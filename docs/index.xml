<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Example Site on My Ship Logs</title>
    <link>https://Narutabe.github.io/</link>
    <description>Recent content in Example Site on My Ship Logs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://Narutabe.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>With ToC</title>
      <link>https://Narutabe.github.io/docs/_example/table-of-contents/with-toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/_example/table-of-contents/with-toc/</guid>
      <description>Caput vino delphine in tamen vias # Cognita laeva illo fracta # Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.
Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit Natus quaerere # Pectora et sine mulcere, coniuge dum tincta incurvae.</description>
    </item>
    <item>
      <title>Without ToC</title>
      <link>https://Narutabe.github.io/docs/_example/table-of-contents/without-toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/_example/table-of-contents/without-toc/</guid>
      <description>At me ipso nepotibus nunc celebratior genus # Tanto oblite # Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.
Quam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/_example/collapsed/3rd-level/4th-level/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/_example/collapsed/3rd-level/4th-level/</guid>
      <description>4th Level of Menu # Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.
Venasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto!</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/_example/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/_example/hidden/</guid>
      <description>This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.
Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/_shortcodes/buttons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/_shortcodes/buttons/</guid>
      <description> Buttons # Buttons are styled links that can lead to local page or external link.
Example # {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}} Get Home Contribute </description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/_shortcodes/columns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/_shortcodes/columns/</guid>
      <description>Columns # Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/_shortcodes/details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/_shortcodes/details/</guid>
      <description> Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.
Example # {{&amp;lt; details &amp;#34;Title&amp;#34; [open] &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} {{&amp;lt; details title=&amp;#34;Title&amp;#34; open=true &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} Title Markdown content # Lorem markdownum insigne&amp;hellip; </description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/_shortcodes/expand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/_shortcodes/expand/</guid>
      <description>Expand # Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.
Example # Default # {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}} Expand ↕ Markdown content # Lorem markdownum insigne&amp;hellip; With Custom Label # {{&amp;lt; expand &amp;#34;Custom Label&amp;#34; &amp;#34;...&amp;#34; &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}} Custom Label ... Markdown content # Lorem markdownum insigne.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/_shortcodes/hints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/_shortcodes/hints/</guid>
      <description>Hints # Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}} Example # Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/_shortcodes/katex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/_shortcodes/katex/</guid>
      <description>KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX
Example # {{&amp;lt;/* katex [display] [class=&amp;#34;text-center&amp;#34;] */&amp;gt;}} f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi {{&amp;lt;/* /katex */&amp;gt;}} \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\] Display Mode Example # Here is some inline example: \(\pi(x)\) , rendered in the same line. And below is display example, having display: block \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\] Text continues here.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/_shortcodes/mermaid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/_shortcodes/mermaid/</guid>
      <description>Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.
Override Mermaid Initialization Config
To override the initialization config for Mermaid, create a mermaid.json file in your assets folder!
Example # {{&amp;lt;/* mermaid [class=&amp;#34;text-center&amp;#34;]*/&amp;gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --&amp;gt; State2 note left of State2 : This is the note to the left.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/_shortcodes/section/first-page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/_shortcodes/section/first-page/</guid>
      <description>&lt;h1 id=&#34;first-page&#34;&gt;
  First page
  &lt;a class=&#34;anchor&#34; href=&#34;#first-page&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/_shortcodes/section/second-page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/_shortcodes/section/second-page/</guid>
      <description>&lt;h1 id=&#34;second-page&#34;&gt;
  Second Page
  &lt;a class=&#34;anchor&#34; href=&#34;#second-page&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/_shortcodes/tabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/_shortcodes/tabs/</guid>
      <description>Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;#34;uniqueid&amp;#34; &amp;gt;}} {{&amp;lt; tab &amp;#34;MacOS&amp;#34; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Linux&amp;#34; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Windows&amp;#34; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}} Example # MacOS MacOS # This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis!</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/</guid>
      <description>HTML attribute reference # ::: section-content Elements in HTML have attributes; these are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want. :::
Attribute list # ::: section-content :::
Content versus IDL attributes # ::: section-content In HTML, most attributes have two faces: the content attribute and the IDL (Interface Definition Language) attribute.
The content attribute is the attribute as you set it from the content (the HTML code) and you can set it or get it via element.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/accept/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/accept/</guid>
      <description>HTML attribute: accept # ::: section-content The accept attribute takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: accept # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/autocomplete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/autocomplete/</guid>
      <description>HTML attribute: autocomplete # ::: section-content The HTML autocomplete attribute lets web developers specify what if any permission the user agent has to provide automated assistance in filling out form field values, as well as guidance to the browser as to the type of information expected in the field.
It is available on &amp;lt;input&amp;gt; elements that take a text or numeric value as input, &amp;lt;textarea&amp;gt; elements, &amp;lt;select&amp;gt; elements, and &amp;lt;form&amp;gt; elements.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/capture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/capture/</guid>
      <description>HTML attribute: capture # ::: section-content The capture attribute specifies that, optionally, a new file should be captured, and which device should be used to capture that new media of a type defined by the accept attribute.
Values include user and environment. The capture attribute is supported on the file input type.
The capture attribute takes as its value a string that specifies which camera to use for capture of image or video data, if the accept attribute indicates that the input should be of one of those types.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/crossorigin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/crossorigin/</guid>
      <description>HTML attribute: crossorigin # ::: section-content The crossorigin attribute, valid on the &amp;lt;audio&amp;gt;, &amp;lt;img&amp;gt;, &amp;lt;link&amp;gt;, &amp;lt;script&amp;gt;, and &amp;lt;video&amp;gt; elements, provides support for CORS, defining how the element handles cross-origin requests, thereby enabling the configuration of the CORS requests for the element&#39;s fetched data. Depending on the element, the attribute can be a CORS settings attribute.
The crossorigin content attribute on media elements is a CORS settings attribute.
These attributes are enumerated, and have the following possible values:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/dirname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/dirname/</guid>
      <description>HTML attribute: dirname # ::: section-content The dirname attribute can be used on &amp;lt;textarea&amp;gt; and &amp;lt;input&amp;gt; elements and describes the directionality of the element&#39;s text content during form submission. The browser uses this attribute&#39;s value to determine whether text the user has entered is left-to-right or right-to-left oriented. When used, the element&#39;s text directionality value is included in form submission data along with the dirname attribute&#39;s value as the name of the field.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/disabled/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/disabled/</guid>
      <description>HTML attribute: disabled # ::: section-content The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: disabled # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/elementtiming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/elementtiming/</guid>
      <description>HTML attribute: elementtiming # ::: section-content The elementtiming attribute is used to indicate that an element is flagged for tracking by PerformanceObserver objects using the &amp;quot;element&amp;quot; type. For more details, see the PerformanceElementTiming interface.
This attribute may be applied to &amp;lt;img&amp;gt;, &amp;lt;image&amp;gt; elements inside an &amp;lt;svg&amp;gt;, poster images of &amp;lt;video&amp;gt; elements, elements which have a background-image, and elements containing text nodes, such as a &amp;lt;p&amp;gt;.
In the DOM, this attribute is reflected as Element.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/for/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/for/</guid>
      <description>HTML attribute: for # ::: section-content The for attribute is an allowed attribute for &amp;lt;label&amp;gt; and &amp;lt;output&amp;gt;. When used on a &amp;lt;label&amp;gt; element it indicates the form element that this label describes. When used on an &amp;lt;output&amp;gt; element it allows for an explicit relationship between the elements that represent values which are used in the output. :::
Usage # ::: section-content When used as an attribute of &amp;lt;label&amp;gt;, the for attribute has a value which is the id of the form element it relates to.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/max/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/max/</guid>
      <description>HTML attribute: max # ::: section-content The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute. If the value of the element is greater than this, the element fails validation. This value must be greater than or equal to the value of the min attribute. If the max attribute is present but is not specified or is invalid, no max value is applied.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/maxlength/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/maxlength/</guid>
      <description>HTML attribute: maxlength # ::: section-content The maxlength attribute defines the maximum string length that the user can enter into an &amp;lt;input&amp;gt; or &amp;lt;textarea&amp;gt;. The attribute must have an integer value of 0 or higher.
The length is measured in UTF-16 code units, which ( for most scripts) is equivalent to the number of characters. If no maxlength is specified, or an invalid value is specified, the input has no maximum length.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/min/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/min/</guid>
      <description>HTML attribute: min # ::: section-content The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute. If the value of the element is less than this, the element fails validation. This value must be less than or equal to the value of the max attribute.
Some input types have a default minimum. If the input has no default minimum and a value is specified for min that can&#39;t be converted to a valid number (or no minimum value is set), the input has no minimum value.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/minlength/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/minlength/</guid>
      <description>HTML attribute: minlength # ::: section-content The minlength attribute defines the minimum string length that the user can enter into an &amp;lt;input&amp;gt; or &amp;lt;textarea&amp;gt;. The attribute must have an integer value of 0 or higher.
The length is measured in UTF-16 code units, which ( for most scripts) is equivalent to the number of characters. If no minlength is specified, or an invalid value is specified, the input has no minimum length.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/multiple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/multiple/</guid>
      <description>HTML attribute: multiple # ::: section-content The Boolean multiple attribute, if set, means the form control accepts one or more values. Valid for the email and file input types and the &amp;lt;select&amp;gt;, the manner by which the user opts for multiple values depends on the form control. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: multiple # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/pattern/</guid>
      <description>HTML attribute: pattern # ::: section-content The pattern attribute specifies a regular expression the form control&#39;s value should match. If a non-null value doesn&#39;t conform to the constraints set by the pattern value, the ValidityState object&#39;s read-only patternMismatch property will be true. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: pattern # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/placeholder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/placeholder/</guid>
      <description>HTML attribute: placeholder # ::: section-content The placeholder attribute defines the text displayed in a form control when the control has no value. The placeholder text should provide a brief hint to the user as to the expected type of data that should be entered into the control.
Effective placeholder text includes a word or short phrase that hints at the expected data type, not an explanation or prompt. The placeholder must not be used instead of a &amp;lt;label&amp;gt;.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/readonly/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/readonly/</guid>
      <description>HTML attribute: readonly # ::: section-content The Boolean readonly attribute, when present, makes the element not mutable, meaning the user can not edit the control. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: readonly # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/</guid>
      <description>HTML attribute: rel # ::: section-content The rel attribute defines the relationship between a linked resource and the current document. Valid on &amp;lt;link&amp;gt;, &amp;lt;a&amp;gt;, &amp;lt;area&amp;gt;, and &amp;lt;form&amp;gt;, the supported values depend on the element on which the attribute is found.
The type of relationships is given by the value of the rel attribute, which, if present, must have a value that is an unordered set of unique space-separated keywords. Differently from a class name, which does not express semantics, the rel attribute must express tokens that are semantically valid for both machines and humans.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/dns-prefetch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/dns-prefetch/</guid>
      <description>rel=dns-prefetch # ::: section-content The dns-prefetch keyword for the rel attribute of the &amp;lt;link&amp;gt; element is a hint to browsers that the user is likely to need resources from the target resource&#39;s origin, and therefore the browser can likely improve the user experience by preemptively performing DNS resolution for that origin.
See Using dns-prefetch for more details. :::
Specifications # ::: _table # Specification # HTML Standard
[# link-type-dns-prefetch]{.small}</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/manifest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/manifest/</guid>
      <description>rel=manifest # ::: section-content ::: {#sect1 .notecard .experimental} Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in production. :::
The manifest keyword for the rel attribute of the &amp;lt;link&amp;gt; element indicates that the target resource is a Web app manifest. :::
Specifications # ::: _table # Specification # HTML Standard
[# link-type-manifest]{.small}
:::
Browser compatibility # ::: _table Desktop Mobile
Chrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet manifest No No No No No No 39 39 No No No 4.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/me/</guid>
      <description>rel=me # ::: section-content The me keyword for the rel attribute of the &amp;lt;link&amp;gt; and &amp;lt;a&amp;gt; elements indicates that the current resource is represented by the linked party. The me value was introduced in the XHTML Friends Network (XFN) specification{target=&amp;quot;_blank&amp;quot;}.
::: code-example [html]{.language-name}
&amp;lt;link rel=&amp;#34;me&amp;#34; value=&amp;#34;example.com&amp;#34; /&amp;gt; :::
The rel=&amp;quot;me&amp;quot; attribute is used in RelMeAuth{target=&amp;quot;_blank&amp;quot;} and Web sign in{target=&amp;quot;_blank&amp;quot;} specifications as a way to enable a person to identify themselves to a web service using their domain name or a particular URL.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/modulepreload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/modulepreload/</guid>
      <description>rel=modulepreload # ::: section-content The modulepreload keyword, for the rel attribute of the &amp;lt;link&amp;gt; element, provides a declarative way to preemptively fetch a module script, parse and compile it, and store it in the document&#39;s module map for later execution.
Preloading allows modules and their dependencies to be downloaded early, and can also significantly reduce the overall download and processing time. This is because it allows pages to fetch modules in parallel, instead of sequentially as each module is processed and its dependencies are discovered.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/noopener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/noopener/</guid>
      <description>rel=noopener # ::: section-content The noopener keyword for the rel attribute of the &amp;lt;a&amp;gt;, &amp;lt;area&amp;gt;, and &amp;lt;form&amp;gt; elements instructs the browser to navigate to the target resource without granting the new browsing context access to the document that opened it &amp;mdash; by not setting the Window.opener property on the opened window (it returns null).
This is especially useful when opening untrusted links, in order to ensure they cannot tamper with the originating document via the Window.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/noreferrer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/noreferrer/</guid>
      <description>rel=noreferrer # ::: section-content The noreferrer keyword for the rel attribute of the &amp;lt;a&amp;gt;, &amp;lt;area&amp;gt;, and &amp;lt;form&amp;gt; elements instructs the browser, when navigating to the target resource, to omit the Referer header and otherwise leak no referrer information &amp;mdash; and additionally to behave as if the noopener keyword were also specified. :::
Specifications # ::: _table # Specification # HTML Standard
[# link-type-noreferrer]{.small}
:::
Browser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android noreferrer 16 13 33 11 15 5 4.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/preconnect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/preconnect/</guid>
      <description>rel=preconnect # ::: section-content The preconnect keyword for the rel attribute of the &amp;lt;link&amp;gt; element is a hint to browsers that the user is likely to need resources from the target resource&#39;s origin, and therefore the browser can likely improve the user experience by preemptively initiating a connection to that origin. Preconnecting speeds up future loads from a given origin by preemptively performing part or all of the handshake (DNS+TCP for HTTP, and DNS+TCP+TLS for HTTPS origins).</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/prefetch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/prefetch/</guid>
      <description>rel=prefetch # ::: section-content The prefetch keyword for the rel attribute of the &amp;lt;link&amp;gt; element provides a hint to browsers that the user is likely to need the target resource for future navigations, and therefore the browser can likely improve the user experience by preemptively fetching and caching the resource. &amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt; is used for same-site navigation resources, or for subresources used by same-site pages.
The result is kept in the HTTP cache on disk.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/preload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/preload/</guid>
      <description>rel=preload # ::: section-content The preload value of the &amp;lt;link&amp;gt; element&#39;s rel attribute lets you declare fetch requests in the HTML&#39;s &amp;lt;head&amp;gt;, specifying resources that your page will need very soon, which you want to start loading early in the page lifecycle, before browsers&#39; main rendering machinery kicks in. This ensures they are available earlier and are less likely to block the page&#39;s render, improving performance. Even though the name contains the term load, it doesn&#39;t load and execute the script but only schedules it to be downloaded and cached with a higher priority.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/prerender/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/rel/prerender/</guid>
      <description>rel=prerender # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/required/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/required/</guid>
      <description>HTML attribute: required # ::: section-content The Boolean required attribute, if present, indicates that the user must specify a value for the input before the owning form can be submitted.
The required attribute is supported by text, search, url, tel, email, password, date, month, week, time, datetime-local, number, checkbox, radio, file, &amp;lt;input&amp;gt; types along with the &amp;lt;select&amp;gt; and &amp;lt;textarea&amp;gt; form control elements. If present on any of these input types and elements, the :required pseudo class will match.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/size/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/size/</guid>
      <description>HTML attribute: size # ::: section-content The size attribute defines the width of the &amp;lt;input&amp;gt; and the height of the &amp;lt;select&amp;gt; element. For the input, if the type attribute is text or password then it&#39;s the number of characters. This must be an integer value of 0 or higher. If no size is specified, or an invalid value is specified, the input has no size declared, and the form control will be the default width based on the user agent.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/attributes/step/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/attributes/step/</guid>
      <description>HTML attribute: step # ::: section-content The step attribute is a number that specifies the granularity that the value must adhere to or the keyword any. It is valid for the numeric input types, including the date, month, week, time, datetime-local, number and range types.
The step sets the stepping interval when clicking up and down spinner buttons, moving a slider left and right on a range, and validating the different date types.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/constraint_validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/constraint_validation/</guid>
      <description>Constraint validation # ::: section-content The creation of web forms has always been a complex task. While marking up the form itself is easy, checking whether each field has a valid and coherent value is more difficult, and informing the user about the problem may become a headache. HTML5 introduced new mechanisms for forms: it added new semantic types for the &amp;lt;input&amp;gt; element and constraint validation to ease the work of checking the form content on the client side.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/content_categories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/content_categories/</guid>
      <description>Content categories # ::: section-content Most HTML elements are a member of one or more content categories &amp;mdash; these categories group elements that share common characteristics. This is a loose grouping (it doesn&#39;t actually create a relationship among elements of these categories), but they help define and describe the categories&#39; shared behavior and their associated rules, especially when you come upon their intricate details. It&#39;s also possible for elements to not be a member of any of these categories.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/cors_enabled_image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/cors_enabled_image/</guid>
      <description>Allowing cross-origin use of images and canvas # ::: section-content HTML provides a crossorigin attribute for images that, in combination with an appropriate CORS header, allows images defined by the &amp;lt;img&amp;gt; element that are loaded from foreign origins to be used in a &amp;lt;canvas&amp;gt; as if they had been loaded from the current origin.
See CORS settings attributes for details on how the crossorigin attribute is used. :::
Security and tainted canvases # ::: section-content Because the pixels in a canvas&#39;s bitmap can come from a variety of sources, including images or videos retrieved from other hosts, it&#39;s inevitable that security problems may arise.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/date_and_time_formats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/date_and_time_formats/</guid>
      <description>Date and time formats used in HTML # ::: section-content Certain HTML elements use date and/or time values. The formats of the strings that specify these values are described in this article.
Elements that use such formats include certain forms of the &amp;lt;input&amp;gt; element that let the user choose or specify a date, time, or both, as well as the &amp;lt;ins&amp;gt; and &amp;lt;del&amp;gt; elements, whose datetime attribute specifies the date or date and time at which the insertion or deletion of content occurred.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/</guid>
      <description>HTML elements reference # ::: section-content This page lists all the HTML elements, which are created using tags.
They are grouped by function to help you find what you have in mind easily. An alphabetical list of all elements is provided in the sidebar on every element&#39;s page as well as this one.
::: {#sect1 .notecard .note} Note: For more information about the basics of HTML elements and attributes, see the section on elements in the Introduction to HTML article.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/a/</guid>
      <description>&amp;lt;a&amp;gt;: The Anchor element # ::: section-content The &amp;lt;a&amp;gt; HTML element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address.
Content within each &amp;lt;a&amp;gt; should indicate the link&#39;s destination. If the href attribute is present, pressing the enter key while focused on the &amp;lt;a&amp;gt; element will activate it. :::
Try it # ::: section-content ::: iframe ::: {.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/abbr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/abbr/</guid>
      <description>&amp;lt;abbr&amp;gt;: The Abbreviation element # ::: section-content The &amp;lt;abbr&amp;gt; HTML element represents an abbreviation or acronym.
When including an abbreviation or acronym, provide a full expansion of the term in plain text on first use, along with the &amp;lt;abbr&amp;gt; to mark up the abbreviation. This informs the user what the abbreviation or acronym means.
The optional title attribute can provide an expansion for the abbreviation or acronym when a full expansion is not present.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/acronym/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/acronym/</guid>
      <description>&amp;lt;acronym&amp;gt; # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/address/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/address/</guid>
      <description>&amp;lt;address&amp;gt;: The Contact Address element # ::: section-content The &amp;lt;address&amp;gt; HTML element indicates that the enclosed HTML provides contact information for a person or people, or for an organization. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;address&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/area/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/area/</guid>
      <description>&amp;lt;area&amp;gt;: The Image Map Area element # ::: section-content The &amp;lt;area&amp;gt; HTML element defines an area inside an image map that has predefined clickable areas. An image map allows geometric areas on an image to be associated with hypertext links.
This element is used only within a &amp;lt;map&amp;gt; element. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;area&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/article/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/article/</guid>
      <description>&amp;lt;article&amp;gt;: The Article Contents element # ::: section-content The &amp;lt;article&amp;gt; HTML element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content. :::
Try it # ::: section-content ::: iframe ::: {.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/aside/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/aside/</guid>
      <description>&amp;lt;aside&amp;gt;: The Aside element # ::: section-content The &amp;lt;aside&amp;gt; HTML element represents a portion of a document whose content is only indirectly related to the document&#39;s main content. Asides are frequently presented as sidebars or call-out boxes. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;aside&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/audio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/audio/</guid>
      <description>&amp;lt;audio&amp;gt;: The Embed Audio element # ::: section-content The &amp;lt;audio&amp;gt; HTML element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the &amp;lt;source&amp;gt; element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;audio&amp;gt; # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/b/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/b/</guid>
      <description>&amp;lt;b&amp;gt;: The Bring Attention To element # ::: section-content The &amp;lt;b&amp;gt; HTML element is used to draw the reader&#39;s attention to the element&#39;s contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use &amp;lt;b&amp;gt; for styling text or granting importance. If you wish to create boldface text, you should use the CSS font-weight property.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/base/</guid>
      <description>&amp;lt;base&amp;gt;: The Document Base URL element # ::: section-content The &amp;lt;base&amp;gt; HTML element specifies the base URL to use for all relative URLs in a document. There can be only one &amp;lt;base&amp;gt; element in a document.
A document&#39;s used base URL can be accessed by scripts with Node.baseURI. If the document has no &amp;lt;base&amp;gt; elements, then baseURI defaults to location.href.
Content categories Metadata content. Permitted content None; it is a void element.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/bdi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/bdi/</guid>
      <description>&amp;lt;bdi&amp;gt;: The Bidirectional Isolate element # ::: section-content The &amp;lt;bdi&amp;gt; HTML element tells the browser&#39;s bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It&#39;s particularly useful when a website dynamically inserts some text and doesn&#39;t know the directionality of the text being inserted. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;bdi&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/bdo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/bdo/</guid>
      <description>&amp;lt;bdo&amp;gt;: The Bidirectional Text Override element # ::: section-content The &amp;lt;bdo&amp;gt; HTML element overrides the current directionality of text, so that the text within is rendered in a different direction. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;bdo&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/big/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/big/</guid>
      <description>&amp;lt;big&amp;gt;: The Bigger Text element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/blockquote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/blockquote/</guid>
      <description>&amp;lt;blockquote&amp;gt;: The Block Quotation element # ::: section-content The &amp;lt;blockquote&amp;gt; HTML element indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see Notes for how to change it). A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the &amp;lt;cite&amp;gt; element. :::
Try it # ::: section-content ::: iframe ::: {.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/body/</guid>
      <description>&amp;lt;body&amp;gt;: The Document Body element # ::: section-content The &amp;lt;body&amp;gt; HTML element represents the content of an HTML document. There can be only one &amp;lt;body&amp;gt; element in a document.
Content categories None. Permitted content Flow content. Tag omission The start tag may be omitted if the first thing inside it is not a space character, comment, &amp;lt;script&amp;gt; element or &amp;lt;style&amp;gt; element. The end tag may be omitted if the &amp;lt;body&amp;gt; element has contents or has a start tag, and is not immediately followed by a comment.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/br/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/br/</guid>
      <description>&amp;lt;br&amp;gt;: The Line Break element # ::: section-content The &amp;lt;br&amp;gt; HTML element produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;br&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/button/</guid>
      <description>&amp;lt;button&amp;gt;: The Button element # ::: section-content The &amp;lt;button&amp;gt; HTML element is an interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it then performs an action, such as submitting a form or opening a dialog.
By default, HTML buttons are presented in a style resembling the platform the user agent runs on, but you can change buttons&#39; appearance with CSS.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/canvas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/canvas/</guid>
      <description>&amp;lt;canvas&amp;gt;: The Graphics Canvas element # ::: section-content Use the &amp;lt;canvas&amp;gt; with either the canvas scripting API or the WebGL API to draw graphics and animations.
Content categories Flow content, phrasing content, embedded content, palpable content. Permitted content Transparent but with no interactive content descendants except for &amp;lt;a&amp;gt; elements, &amp;lt;button&amp;gt; elements, &amp;lt;input&amp;gt; elements whose type attribute is checkbox, radio, or button. Tag omission None, both the starting and ending tag are mandatory.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/caption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/caption/</guid>
      <description>&amp;lt;caption&amp;gt;: The Table Caption element # ::: section-content The &amp;lt;caption&amp;gt; HTML element specifies the caption (or title) of a table. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;caption&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/center/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/center/</guid>
      <description>&amp;lt;center&amp;gt;: The Centered Text element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/cite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/cite/</guid>
      <description>&amp;lt;cite&amp;gt;: The Citation element # ::: section-content The &amp;lt;cite&amp;gt; HTML element is used to mark up the title of a cited creative work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;cite&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/code/</guid>
      <description>&amp;lt;code&amp;gt;: The Inline Code element # ::: section-content The &amp;lt;code&amp;gt; HTML element displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the user agent&#39;s default monospace font. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;code&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/col/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/col/</guid>
      <description>&amp;lt;col&amp;gt;: The Table Column element # ::: section-content The &amp;lt;col&amp;gt; HTML element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a &amp;lt;colgroup&amp;gt; element. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;col&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/colgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/colgroup/</guid>
      <description>&amp;lt;colgroup&amp;gt;: The Table Column Group element # ::: section-content The &amp;lt;colgroup&amp;gt; HTML element defines a group of columns within a table. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;colgroup&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/data/</guid>
      <description>&amp;lt;data&amp;gt;: The Data element # ::: section-content The &amp;lt;data&amp;gt; HTML element links a given piece of content with a machine-readable translation. If the content is time- or date-related, the &amp;lt;time&amp;gt; element must be used. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;data&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/datalist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/datalist/</guid>
      <description>&amp;lt;datalist&amp;gt;: The HTML Data List element # ::: section-content The &amp;lt;datalist&amp;gt; HTML element contains a set of &amp;lt;option&amp;gt; elements that represent the permissible or recommended options available to choose from within other controls. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;datalist&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/dd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/dd/</guid>
      <description>&amp;lt;dd&amp;gt;: The Description Details element # ::: section-content The &amp;lt;dd&amp;gt; HTML element provides the description, definition, or value for the preceding term ( &amp;lt;dt&amp;gt;) in a description list ( &amp;lt;dl&amp;gt;). :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;dd&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/del/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/del/</guid>
      <description>&amp;lt;del&amp;gt;: The Deleted Text element # ::: section-content The &amp;lt;del&amp;gt; HTML element represents a range of text that has been deleted from a document. This can be used when rendering &amp;quot;track changes&amp;quot; or source code diff information, for example. The &amp;lt;ins&amp;gt; element can be used for the opposite purpose: to indicate text that has been added to the document. :::
Try it # ::: section-content ::: iframe ::: {.output-header .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/details/</guid>
      <description>&amp;lt;details&amp;gt;: The Details disclosure element # ::: section-content The &amp;lt;details&amp;gt; HTML element creates a disclosure widget in which information is visible only when the widget is toggled into an &amp;quot;open&amp;quot; state. A summary or label must be provided using the &amp;lt;summary&amp;gt; element.
A disclosure widget is typically presented onscreen using a small triangle which rotates (or twists) to indicate open/closed status, with a label next to the triangle. The contents of the &amp;lt;summary&amp;gt; element are used as the label for the disclosure widget.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/dfn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/dfn/</guid>
      <description>&amp;lt;dfn&amp;gt;: The Definition element # ::: section-content The &amp;lt;dfn&amp;gt; HTML element is used to indicate the term being defined within the context of a definition phrase or sentence. The ancestor &amp;lt;p&amp;gt; element, the &amp;lt;dt&amp;gt;/ &amp;lt;dd&amp;gt; pairing, or the nearest &amp;lt;section&amp;gt; ancestor of the &amp;lt;dfn&amp;gt; element, is considered to be the definition of the term. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;dfn&amp;gt; # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/dialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/dialog/</guid>
      <description>&amp;lt;dialog&amp;gt;: The Dialog element # ::: section-content The &amp;lt;dialog&amp;gt; HTML element represents a modal or non-modal dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow.
The HTML &amp;lt;dialog&amp;gt; element is used to create both modal and non-modal dialog boxes. Modal dialog boxes interrupt interaction with the rest of the page being inert, while non-modal dialog boxes allow interaction with the rest of the page.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/dir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/dir/</guid>
      <description>&amp;lt;dir&amp;gt;: The Directory element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/div/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/div/</guid>
      <description>&amp;lt;div&amp;gt;: The Content Division element # ::: section-content The `` HTML element is the generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g. styling is directly applied to it, or some kind of layout model like Flexbox is applied to its parent element). :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;div&amp;gt; # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/dl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/dl/</guid>
      <description>&amp;lt;dl&amp;gt;: The Description List element # ::: section-content The &amp;lt;dl&amp;gt; HTML element represents a description list. The element encloses a list of groups of terms (specified using the &amp;lt;dt&amp;gt; element) and descriptions (provided by &amp;lt;dd&amp;gt; elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs). :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;dl&amp;gt; # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/dt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/dt/</guid>
      <description>&amp;lt;dt&amp;gt;: The Description Term element # ::: section-content The &amp;lt;dt&amp;gt; HTML element specifies a term in a description or definition list, and as such must be used inside a &amp;lt;dl&amp;gt; element. It is usually followed by a &amp;lt;dd&amp;gt; element; however, multiple &amp;lt;dt&amp;gt; elements in a row indicate several terms that are all defined by the immediate next &amp;lt;dd&amp;gt; element.
The subsequent &amp;lt;dd&amp;gt; (Description Details) element provides the definition or other related text associated with the term specified using &amp;lt;dt&amp;gt;.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/em/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/em/</guid>
      <description>&amp;lt;em&amp;gt;: The Emphasis element # ::: section-content The &amp;lt;em&amp;gt; HTML element marks text that has stress emphasis. The &amp;lt;em&amp;gt; element can be nested, with each level of nesting indicating a greater degree of emphasis. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;em&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/embed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/embed/</guid>
      <description>&amp;lt;embed&amp;gt;: The Embed External Content element # ::: section-content The &amp;lt;embed&amp;gt; HTML element embeds external content at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;embed&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/fieldset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/fieldset/</guid>
      <description>&amp;lt;fieldset&amp;gt;: The Field Set element # ::: section-content The &amp;lt;fieldset&amp;gt; HTML element is used to group several controls as well as labels ( &amp;lt;label&amp;gt;) within a web form. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;fieldset&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/figcaption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/figcaption/</guid>
      <description>&amp;lt;figcaption&amp;gt;: The Figure Caption element # ::: section-content The &amp;lt;figcaption&amp;gt; HTML element represents a caption or legend describing the rest of the contents of its parent &amp;lt;figure&amp;gt; element. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;figcaption&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/figure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/figure/</guid>
      <description>&amp;lt;figure&amp;gt;: The Figure with Optional Caption element # ::: section-content The &amp;lt;figure&amp;gt; HTML element represents self-contained content, potentially with an optional caption, which is specified using the &amp;lt;figcaption&amp;gt; element. The figure, its caption, and its contents are referenced as a single unit. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;figure&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/font/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/font/</guid>
      <description>&amp;lt;font&amp;gt; # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/footer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/footer/</guid>
      <description>&amp;lt;footer&amp;gt; # ::: section-content The &amp;lt;footer&amp;gt; HTML element represents a footer for its nearest ancestor sectioning content or sectioning root element. A &amp;lt;footer&amp;gt; typically contains information about the author of the section, copyright data or links to related documents. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;footer&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/form/</guid>
      <description>&amp;lt;form&amp;gt;: The Form element # ::: section-content The &amp;lt;form&amp;gt; HTML element represents a document section containing interactive controls for submitting information. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;form&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/frame/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/frame/</guid>
      <description>&amp;lt;frame&amp;gt; # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/frameset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/frameset/</guid>
      <description>&amp;lt;frameset&amp;gt; # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/head/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/head/</guid>
      <description>&amp;lt;head&amp;gt;: The Document Metadata (Header) element # ::: section-content The &amp;lt;head&amp;gt; HTML element contains machine-readable information ( metadata) about the document, like its title, scripts, and style sheets.
::: {#sect1 .notecard .note} Note: &amp;lt;head&amp;gt; primarily holds information for machine processing, not human-readability. For human-visible information, like top-level headings and listed authors, see the &amp;lt;header&amp;gt; element. ::: :::
Attributes # ::: section-content This element includes the global attributes.
profile [Deprecated]{.visually-hidden} [Non-standard]{.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/header/</guid>
      <description>&amp;lt;header&amp;gt; # ::: section-content The &amp;lt;header&amp;gt; HTML element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;header&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/heading_elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/heading_elements/</guid>
      <description>&amp;lt;h1&amp;gt;&amp;ndash;&amp;lt;h6&amp;gt;: The HTML Section Heading elements # ::: section-content The &amp;lt;h1&amp;gt; to &amp;lt;h6&amp;gt; HTML elements represent six levels of section headings. &amp;lt;h1&amp;gt; is the highest section level and &amp;lt;h6&amp;gt; is the lowest. By default, all heading elements create a block-level box in the layout, starting on a new line and taking up the full width available in their containing block. :::
Try it # ::: section-content ::: iframe ::: {.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/hgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/hgroup/</guid>
      <description>&amp;lt;hgroup&amp;gt; # ::: section-content The &amp;lt;hgroup&amp;gt; HTML element represents a heading and related content. It groups a single &amp;lt;h1&amp;gt;–&amp;lt;h6&amp;gt; element with one or more &amp;lt;p&amp;gt;. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;hgroup&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/hr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/hr/</guid>
      <description>&amp;lt;hr&amp;gt;: The Thematic Break (Horizontal Rule) element # ::: section-content The &amp;lt;hr&amp;gt; HTML element represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;hr&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/html/</guid>
      <description>&amp;lt;html&amp;gt;: The HTML Document / Root element # ::: section-content The &amp;lt;html&amp;gt; HTML element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element.
Content categories None. Permitted content One &amp;lt;head&amp;gt; element, followed by one &amp;lt;body&amp;gt; element. Tag omission The start tag may be omitted if the first thing inside the &amp;lt;html&amp;gt; element is not a comment.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/i/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/i/</guid>
      <description>&amp;lt;i&amp;gt;: The Idiomatic Text element # ::: section-content The &amp;lt;i&amp;gt; HTML element represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the &amp;lt;i&amp;gt; naming of this element. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/iframe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/iframe/</guid>
      <description>&amp;lt;iframe&amp;gt;: The Inline Frame element # ::: section-content The &amp;lt;iframe&amp;gt; HTML element represents a nested browsing context, embedding another HTML page into the current one. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;iframe&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/image/</guid>
      <description>&amp;lt;image&amp;gt;: The Image element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/img/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/img/</guid>
      <description>&amp;lt;img&amp;gt;: The Image Embed element # ::: section-content The &amp;lt;img&amp;gt; HTML element embeds an image into the document. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;img&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/</guid>
      <description>&amp;lt;input&amp;gt;: The Input (Form Input) element # ::: section-content The &amp;lt;input&amp;gt; HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The &amp;lt;input&amp;gt; element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/button/</guid>
      <description>&amp;lt;input type=&amp;quot;button&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type button are rendered as simple push buttons, which can be programmed to control custom functionality anywhere on a webpage as required when assigned an event handler function (typically for the click event). :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;button&amp;quot;&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/checkbox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/checkbox/</guid>
      <description>&amp;lt;input type=&amp;quot;checkbox&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type checkbox are rendered by default as boxes that are checked (ticked) when activated, like you might see in an official government paper form. The exact appearance depends upon the operating system configuration under which the browser is running. Generally this is a square but it may have rounded corners. A checkbox allows you to select single values for submission in a form (or not).</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/color/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/color/</guid>
      <description>&amp;lt;input type=&amp;quot;color&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type color provide a user interface element that lets a user specify a color, either by using a visual color picker interface or by entering the color into a text field in #rrggbb hexadecimal format.
Only simple colors (without alpha channel) are allowed though CSS colors has more formats, e.g. color names, functional notations and a hexadecimal format with an alpha channel.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/date/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/date/</guid>
      <description>&amp;lt;input type=&amp;quot;date&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type=&amp;quot;date&amp;quot; create input fields that let the user enter a date, either with a textbox that validates the input or a special date picker interface.
The resulting value includes the year, month, and day, but not the time. The time and datetime-local input types support time and date+time input. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;date&amp;quot;&amp;gt; # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/datetime-local/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/datetime-local/</guid>
      <description>&amp;lt;input type=&amp;quot;datetime-local&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type datetime-local create input controls that let the user easily enter both a date and a time, including the year, month, and day as well as the time in hours and minutes. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;datetime-local&amp;quot;&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/email/</guid>
      <description>&amp;lt;input type=&amp;quot;email&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type email are used to let the user enter and edit an email address, or, if the multiple attribute is specified, a list of email addresses. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;email&amp;quot;&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/file/</guid>
      <description>&amp;lt;input type=&amp;quot;file&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements with type=&amp;quot;file&amp;quot; let the user choose one or more files from their device storage. Once chosen, the files can be uploaded to a server using form submission, or manipulated using JavaScript code and the File API. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;file&amp;quot;&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/hidden/</guid>
      <description>&amp;lt;input type=&amp;quot;hidden&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type hidden let web developers include data that cannot be seen or modified by users when a form is submitted. For example, the ID of the content that is currently being ordered or edited, or a unique security token. Hidden inputs are completely invisible in the rendered page, and there is no way to make it visible in the page&#39;s content.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/image/</guid>
      <description>&amp;lt;input type=&amp;quot;image&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type image are used to create graphical submit buttons, i.e. submit buttons that take the form of an image rather than text. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;image&amp;quot;&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/month/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/month/</guid>
      <description>&amp;lt;input type=&amp;quot;month&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type month create input fields that let the user enter a month and year allowing a month and year to be easily entered. The value is a string whose value is in the format &amp;quot;YYYY-MM&amp;quot;, where YYYY is the four-digit year and MM is the month number. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;month&amp;quot;&amp;gt; # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/number/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/number/</guid>
      <description>&amp;lt;input type=&amp;quot;number&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type number are used to let the user enter a number. They include built-in validation to reject non-numerical entries.
The browser may opt to provide stepper arrows to let the user increase and decrease the value using their mouse or by tapping with a fingertip. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;number&amp;quot;&amp;gt; # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/password/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/password/</guid>
      <description>&amp;lt;input type=&amp;quot;password&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type password provide a way for the user to securely enter a password.
The element is presented as a one-line plain text editor control in which the text is obscured so that it cannot be read, usually by replacing each character with a symbol such as the asterisk (&amp;quot;*&amp;quot;) or a dot (&amp;quot;•&amp;quot;). This character will vary depending on the user agent and operating system.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/radio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/radio/</guid>
      <description>&amp;lt;input type=&amp;quot;radio&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type radio are generally used in radio groups&amp;mdash;collections of radio buttons describing a set of related options.
Only one radio button in a given group can be selected at the same time. Radio buttons are typically rendered as small circles, which are filled or highlighted when selected. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;radio&amp;quot;&amp;gt; # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/range/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/range/</guid>
      <description>&amp;lt;input type=&amp;quot;range&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type range let the user specify a numeric value which must be no less than a given value, and no more than another given value. The precise value, however, is not considered important. This is typically represented using a slider or dial control rather than a text entry box like the number input type.
Because this kind of widget is imprecise, it should only be used if the control&#39;s exact value isn&#39;t important.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/reset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/reset/</guid>
      <description>&amp;lt;input type=&amp;quot;reset&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type reset are rendered as buttons, with a default click event handler that resets all inputs in the form to their initial values. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;reset&amp;quot;&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/search/</guid>
      <description>&amp;lt;input type=&amp;quot;search&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type search are text fields designed for the user to enter search queries into. These are functionally identical to text inputs, but may be styled differently by the user agent. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;search&amp;quot;&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/submit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/submit/</guid>
      <description>&amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type submit are rendered as buttons. When the click event occurs (typically because the user clicked the button), the user agent attempts to submit the form to the server. :::
Value # ::: section-content An &amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt; element&#39;s value attribute contains a string which is displayed as the button&#39;s label. Buttons do not have a true value otherwise. :::
Setting the value attribute # ::: section-content ::: code-example [html]{.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/tel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/tel/</guid>
      <description>&amp;lt;input type=&amp;quot;tel&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type tel are used to let the user enter and edit a telephone number. Unlike &amp;lt;input type=&amp;quot;email&amp;quot;&amp;gt; and &amp;lt;input type=&amp;quot;url&amp;quot;&amp;gt;, the input value is not automatically validated to a particular format before the form can be submitted, because formats for telephone numbers vary so much around the world. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;tel&amp;quot;&amp;gt; # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/text/</guid>
      <description>&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type text create basic single-line text fields. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/time/</guid>
      <description>&amp;lt;input type=&amp;quot;time&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type time create input fields designed to let the user easily enter a time (hours and minutes, and optionally seconds).
The control&#39;s user interface varies from browser to browser; see Browser compatibility for further details. In unsupported browsers, the control degrades gracefully to &amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;time&amp;quot;&amp;gt; # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/url/</guid>
      <description>&amp;lt;input type=&amp;quot;url&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type url are used to let the user enter and edit a URL. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;url&amp;quot;&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/input/week/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/input/week/</guid>
      <description>&amp;lt;input type=&amp;quot;week&amp;quot;&amp;gt; # ::: section-content &amp;lt;input&amp;gt; elements of type week create input fields allowing easy entry of a year plus the ISO 8601 week number{target=&amp;quot;_blank&amp;quot;} during that year (i.e., week 1 to 52 or 53{target=&amp;quot;_blank&amp;quot;}). :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;input type=&amp;quot;week&amp;quot;&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/ins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/ins/</guid>
      <description>&amp;lt;ins&amp;gt;: The Inserted Text element # ::: section-content The &amp;lt;ins&amp;gt; HTML element represents a range of text that has been added to a document. You can use the &amp;lt;del&amp;gt; element to similarly represent a range of text that has been deleted from the document. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;ins&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/kbd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/kbd/</guid>
      <description>&amp;lt;kbd&amp;gt;: The Keyboard Input element # ::: section-content The &amp;lt;kbd&amp;gt; HTML element represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the user agent defaults to rendering the contents of a &amp;lt;kbd&amp;gt; element using its default monospace font, although this is not mandated by the HTML standard. :::
Try it # ::: section-content ::: iframe ::: {.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/label/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/label/</guid>
      <description>&amp;lt;label&amp;gt;: The Label element # ::: section-content The &amp;lt;label&amp;gt; HTML element represents a caption for an item in a user interface. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;label&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/legend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/legend/</guid>
      <description>&amp;lt;legend&amp;gt;: The Field Set Legend element # ::: section-content The &amp;lt;legend&amp;gt; HTML element represents a caption for the content of its parent &amp;lt;fieldset&amp;gt;. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;legend&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/li/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/li/</guid>
      <description>&amp;lt;li&amp;gt;: The List Item element # ::: section-content The &amp;lt;li&amp;gt; HTML element is used to represent an item in a list. It must be contained in a parent element: an ordered list ( &amp;lt;ol&amp;gt;), an unordered list ( &amp;lt;ul&amp;gt;), or a menu ( &amp;lt;menu&amp;gt;). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/link/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/link/</guid>
      <description>&amp;lt;link&amp;gt;: The External Resource Link element # ::: section-content The &amp;lt;link&amp;gt; HTML element specifies relationships between the current document and an external resource. This element is most commonly used to link to stylesheets, but is also used to establish site icons (both &amp;quot;favicon&amp;quot; style icons and icons for the home screen and apps on mobile devices) among other things. :::
Try it # ::: section-content ::: iframe ::: {.output-header .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/main/</guid>
      <description>&amp;lt;main&amp;gt; # ::: section-content The &amp;lt;main&amp;gt; HTML element represents the dominant content of the &amp;lt;body&amp;gt; of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;main&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/map/</guid>
      <description>&amp;lt;map&amp;gt;: The Image Map element # ::: section-content The &amp;lt;map&amp;gt; HTML element is used with &amp;lt;area&amp;gt; elements to define an image map (a clickable link area). :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;map&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/mark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/mark/</guid>
      <description>&amp;lt;mark&amp;gt;: The Mark Text element # ::: section-content The &amp;lt;mark&amp;gt; HTML element represents text which is marked or highlighted for reference or notation purposes due to the marked passage&#39;s relevance in the enclosing context. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;mark&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/marquee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/marquee/</guid>
      <description>&amp;lt;marquee&amp;gt;: The Marquee element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/menu/</guid>
      <description>&amp;lt;menu&amp;gt;: The Menu element # ::: section-content The &amp;lt;menu&amp;gt; HTML element is described in the HTML specification as a semantic alternative to &amp;lt;ul&amp;gt;, but treated by browsers (and exposed through the accessibility tree) as no different than &amp;lt;ul&amp;gt;. It represents an unordered list of items (which are represented by &amp;lt;li&amp;gt; elements). :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;menu&amp;gt; # Reset :::
::: {#warning-no-script .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/menuitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/menuitem/</guid>
      <description>&amp;lt;menuitem&amp;gt; # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/meta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/meta/</guid>
      <description>&amp;lt;meta&amp;gt;: The metadata element # ::: section-content The &amp;lt;meta&amp;gt; HTML element represents metadata that cannot be represented by other HTML meta-related elements, like &amp;lt;base&amp;gt;, &amp;lt;link&amp;gt;, &amp;lt;script&amp;gt;, &amp;lt;style&amp;gt; or &amp;lt;title&amp;gt;.
Content categories Metadata content. If the itemprop attribute is present: flow content, phrasing content. Permitted content None; it is a void element. Tag omission As it is a void element, the start tag must be present and the end tag must not be present.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/meta/name/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/meta/name/</guid>
      <description>Standard metadata names # ::: section-content The &amp;lt;meta&amp;gt; element can be used to provide document metadata in terms of name-value pairs, with the name attribute giving the metadata name, and the content attribute giving the value. :::
Standard metadata names defined in the HTML specification # ::: section-content The HTML specification defines the following set of standard metadata names:
application-name: the name of the application running in the web page.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/meta/name/theme-color/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/meta/name/theme-color/</guid>
      <description>theme-color # ::: section-content The theme-color value for the name attribute of the &amp;lt;meta&amp;gt; element indicates a suggested color that user agents should use to customize the display of the page or of the surrounding user interface. If specified, the content attribute must contain a valid CSS &amp;lt;color&amp;gt;. :::
Example # ::: section-content ::: code-example [html]{.language-name}
&amp;lt;meta name=&amp;#34;theme-color&amp;#34; content=&amp;#34;#4285f4&amp;#34; /&amp;gt; :::
The following image shows the effect that the &amp;lt;meta&amp;gt; element above will have on a document displayed in Chrome running on an Android mobile device.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/meter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/meter/</guid>
      <description>&amp;lt;meter&amp;gt;: The HTML Meter element # ::: section-content The &amp;lt;meter&amp;gt; HTML element represents either a scalar value within a known range or a fractional value. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;meter&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/nav/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/nav/</guid>
      <description>&amp;lt;nav&amp;gt;: The Navigation Section element # ::: section-content The &amp;lt;nav&amp;gt; HTML element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;nav&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/nobr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/nobr/</guid>
      <description>&amp;lt;nobr&amp;gt;: The Non-Breaking Text element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/noembed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/noembed/</guid>
      <description>&amp;lt;noembed&amp;gt;: The Embed Fallback element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/noframes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/noframes/</guid>
      <description>&amp;lt;noframes&amp;gt;: The Frame Fallback element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/noscript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/noscript/</guid>
      <description>&amp;lt;noscript&amp;gt;: The Noscript element # ::: section-content The &amp;lt;noscript&amp;gt; HTML element defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser.
Content categories Metadata content, flow content, phrasing content. Permitted content When scripting is disabled and when it is a descendant of the &amp;lt;head&amp;gt; element: in any order, zero or more &amp;lt;link&amp;gt; elements, zero or more &amp;lt;style&amp;gt; elements, and zero or more &amp;lt;meta&amp;gt; elements.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/object/</guid>
      <description>&amp;lt;object&amp;gt;: The External Object element # ::: section-content The &amp;lt;object&amp;gt; HTML element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;object&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/ol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/ol/</guid>
      <description>&amp;lt;ol&amp;gt;: The Ordered List element # ::: section-content The &amp;lt;ol&amp;gt; HTML element represents an ordered list of items &amp;mdash; typically rendered as a numbered list. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;ol&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/optgroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/optgroup/</guid>
      <description>&amp;lt;optgroup&amp;gt;: The Option Group element # ::: section-content The &amp;lt;optgroup&amp;gt; HTML element creates a grouping of options within a &amp;lt;select&amp;gt; element. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;optgroup&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/option/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/option/</guid>
      <description>&amp;lt;option&amp;gt;: The HTML Option element # ::: section-content The &amp;lt;option&amp;gt; HTML element is used to define an item contained in a &amp;lt;select&amp;gt;, an &amp;lt;optgroup&amp;gt;, or a &amp;lt;datalist&amp;gt; element. As such, &amp;lt;option&amp;gt; can represent menu items in popups and other lists of items in an HTML document. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;option&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/output/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/output/</guid>
      <description>&amp;lt;output&amp;gt;: The Output element # ::: section-content The &amp;lt;output&amp;gt; HTML element is a container element into which a site or app can inject the results of a calculation or the outcome of a user action. :::
Attributes # ::: section-content This element includes the global attributes.
for A space-separated list of other elements&#39; ids, indicating that those elements contributed input values to (or otherwise affected) the calculation.
form The &amp;lt;form&amp;gt; element to associate the output with (its form owner).</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/p/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/p/</guid>
      <description>&amp;lt;p&amp;gt;: The Paragraph element # ::: section-content The &amp;lt;p&amp;gt; HTML element represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields.
Paragraphs are block-level elements, and notably will automatically close if another block-level element is parsed before the closing &amp;lt;/p&amp;gt; tag.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/param/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/param/</guid>
      <description>&amp;lt;param&amp;gt;: The Object Parameter element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/picture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/picture/</guid>
      <description>&amp;lt;picture&amp;gt;: The Picture element # ::: section-content The &amp;lt;picture&amp;gt; HTML element contains zero or more &amp;lt;source&amp;gt; elements and one &amp;lt;img&amp;gt; element to offer alternative versions of an image for different display/device scenarios.
The browser will consider each child &amp;lt;source&amp;gt; element and choose the best match among them. If no matches are found&amp;mdash;or the browser doesn&#39;t support the &amp;lt;picture&amp;gt; element&amp;mdash;the URL of the &amp;lt;img&amp;gt; element&#39;s src attribute is selected. The selected image is then presented in the space occupied by the &amp;lt;img&amp;gt; element.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/plaintext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/plaintext/</guid>
      <description>&amp;lt;plaintext&amp;gt;: The Plain Text element (Deprecated) # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/portal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/portal/</guid>
      <description>&amp;lt;portal&amp;gt;: The Portal element # ::: section-content ::: {#sect1 .notecard .experimental} Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in production. :::
The &amp;lt;portal&amp;gt; HTML element enables the embedding of another HTML page into the current one for the purposes of allowing smoother navigation into new pages.
A &amp;lt;portal&amp;gt; is similar to an &amp;lt;iframe&amp;gt;. An &amp;lt;iframe&amp;gt; allows a separate browsing context to be embedded.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/pre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/pre/</guid>
      <description>&amp;lt;pre&amp;gt;: The Preformatted Text element # ::: section-content The &amp;lt;pre&amp;gt; HTML element represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or monospaced{target=&amp;quot;_blank&amp;quot;}, font. Whitespace inside this element is displayed as written. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;pre&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/progress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/progress/</guid>
      <description>&amp;lt;progress&amp;gt;: The Progress Indicator element # ::: section-content The &amp;lt;progress&amp;gt; HTML element displays an indicator showing the completion progress of a task, typically displayed as a progress bar. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;progress&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/q/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/q/</guid>
      <description>&amp;lt;q&amp;gt;: The Inline Quotation element # ::: section-content The &amp;lt;q&amp;gt; HTML element indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don&#39;t require paragraph breaks; for long quotations use the &amp;lt;blockquote&amp;gt; element. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;q&amp;gt; # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/rb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/rb/</guid>
      <description>&amp;lt;rb&amp;gt;: The Ruby Base element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/rp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/rp/</guid>
      <description>&amp;lt;rp&amp;gt;: The Ruby Fallback Parenthesis element # ::: section-content The &amp;lt;rp&amp;gt; HTML element is used to provide fall-back parentheses for browsers that do not support display of ruby annotations using the &amp;lt;ruby&amp;gt; element. One &amp;lt;rp&amp;gt; element should enclose each of the opening and closing parentheses that wrap the &amp;lt;rt&amp;gt; element that contains the annotation&#39;s text. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;rp&amp;gt; # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/rt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/rt/</guid>
      <description>&amp;lt;rt&amp;gt;: The Ruby Text element # ::: section-content The &amp;lt;rt&amp;gt; HTML element specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The &amp;lt;rt&amp;gt; element must always be contained within a &amp;lt;ruby&amp;gt; element. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;rt&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/rtc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/rtc/</guid>
      <description>&amp;lt;rtc&amp;gt;: The Ruby Text Container element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/ruby/</guid>
      <description>&amp;lt;ruby&amp;gt;: The Ruby Annotation element # ::: section-content The &amp;lt;ruby&amp;gt; HTML element represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common.
The term ruby originated as a unit of measurement used by typesetters{target=&amp;quot;_blank&amp;quot;}, representing the smallest size that text can be printed on newsprint while remaining legible.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/s/</guid>
      <description>&amp;lt;s&amp;gt;: The Strikethrough element # ::: section-content The &amp;lt;s&amp;gt; HTML element renders text with a strikethrough, or a line through it. Use the &amp;lt;s&amp;gt; element to represent things that are no longer relevant or no longer accurate. However, &amp;lt;s&amp;gt; is not appropriate when indicating document edits; for that, use the &amp;lt;del&amp;gt; and &amp;lt;ins&amp;gt; elements, as appropriate. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;s&amp;gt; # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/samp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/samp/</guid>
      <description>&amp;lt;samp&amp;gt;: The Sample Output element # ::: section-content The &amp;lt;samp&amp;gt; HTML element is used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser&#39;s default monospaced font (such as Courier{target=&amp;quot;_blank&amp;quot;} or Lucida Console). :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;samp&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/script/</guid>
      <description>&amp;lt;script&amp;gt;: The Script element # ::: section-content The &amp;lt;script&amp;gt; HTML element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The &amp;lt;script&amp;gt; element can also be used with other languages, such as WebGL&#39;s GLSL shader programming language and JSON.
Content categories Metadata content, Flow content, Phrasing content. Permitted content Dynamic script such as text/javascript. Tag omission None, both the starting and ending tag are mandatory.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/script/type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/script/type/</guid>
      <description>&amp;lt;script&amp;gt;: type attribute # ::: section-content The type attribute of the &amp;lt;script&amp;gt; element indicates the type of script represented by the element: a classic script, an import map, a JavaScript module, speculation rules, or a data block. :::
Value # ::: section-content The value of this attribute indicates the type of data represented by the script, and will be one of the following:
Attribute is not set (default), an empty string, or a JavaScript MIME type Indicates that the script is a &amp;quot;classic script&amp;quot;, containing JavaScript code.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/script/type/importmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/script/type/importmap/</guid>
      <description>&amp;lt;script type=&amp;quot;importmap&amp;quot;&amp;gt; # ::: section-content The importmap value of the type attribute of the &amp;lt;script&amp;gt; element indicates that the body of the element contains an import map.
An import map is a JSON object that allows developers to control how the browser resolves module specifiers when importing JavaScript modules. It provides a mapping between the text used as the module specifier in an import statement or import() operator, and the corresponding value that will replace the text when resolving the specifier.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/script/type/speculationrules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/script/type/speculationrules/</guid>
      <description>&amp;lt;script type=&amp;quot;speculationrules&amp;quot;&amp;gt; # ::: section-content The speculationrules value of the type attribute of the &amp;lt;script&amp;gt; element indicates that the body of the element contains speculation rules.
Speculation rules take the form of a JSON structure that determine what resources should be prefetched or prerendered by the browser. This is part of the Speculation Rules API. :::
Syntax # ::: section-content ::: code-example [html]{.language-name}
&amp;lt;script type=&amp;#34;speculationrules&amp;#34;&amp;gt; // JSON object defining rules &amp;lt;/script&amp;gt; :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/search/</guid>
      <description>&amp;lt;search&amp;gt;: The generic search element # ::: section-content The &amp;lt;search&amp;gt; HTML element is a container representing the parts of the document or application with form controls or other content related to performing a search or filtering operation. The &amp;lt;search&amp;gt; element semantically identifies the purpose of the element&#39;s contents as having search or filtering capabilities. The search or filtering functionality can be for the website or application, the current web page or document, or the entire Internet or subsection thereof.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/section/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/section/</guid>
      <description>&amp;lt;section&amp;gt;: The Generic Section element # ::: section-content The &amp;lt;section&amp;gt; HTML element represents a generic standalone section of a document, which doesn&#39;t have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;section&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/select/</guid>
      <description>&amp;lt;select&amp;gt;: The HTML Select element # ::: section-content The &amp;lt;select&amp;gt; HTML element represents a control that provides a menu of options. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;select&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/slot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/slot/</guid>
      <description>&amp;lt;slot&amp;gt;: The Web Component Slot element # ::: section-content The &amp;lt;slot&amp;gt; HTML element&amp;mdash;part of the Web Components technology suite&amp;mdash;is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together. :::
Attributes # ::: section-content This element includes the global attributes.
name The slot&#39;s name.
A named slot is a &amp;lt;slot&amp;gt; element with a name attribute.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/small/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/small/</guid>
      <description>&amp;lt;small&amp;gt;: the side comment element # ::: section-content The &amp;lt;small&amp;gt; HTML element represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font-size smaller, such as from small to x-small. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;small&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/source/</guid>
      <description>&amp;lt;source&amp;gt;: The Media or Image Source element # ::: section-content The &amp;lt;source&amp;gt; HTML element specifies multiple media resources for the &amp;lt;picture&amp;gt;, the &amp;lt;audio&amp;gt; element, or the &amp;lt;video&amp;gt; element. It is a void element, meaning that it has no content and does not have a closing tag. It is commonly used to offer the same media content in multiple file formats in order to provide compatibility with a broad range of browsers given their differing support for image file formats and media file formats.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/span/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/span/</guid>
      <description>&amp;lt;span&amp;gt;: The Content Span element # ::: section-content The &amp;lt;span&amp;gt; HTML element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. It should be used only when no other semantic element is appropriate. &amp;lt;span&amp;gt; is very much like a ](div) element, but [ is a block-level element whereas a &amp;lt;span&amp;gt; is an inline-level element.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/strike/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/strike/</guid>
      <description>&amp;lt;strike&amp;gt; # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/strong/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/strong/</guid>
      <description>&amp;lt;strong&amp;gt;: The Strong Importance element # ::: section-content The &amp;lt;strong&amp;gt; HTML element indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;strong&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/style/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/style/</guid>
      <description>&amp;lt;style&amp;gt;: The Style Information element # ::: section-content The &amp;lt;style&amp;gt; HTML element contains style information for a document, or part of a document. It contains CSS, which is applied to the contents of the document containing the &amp;lt;style&amp;gt; element. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;style&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/sub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/sub/</guid>
      <description>&amp;lt;sub&amp;gt;: The Subscript element # ::: section-content The &amp;lt;sub&amp;gt; HTML element specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;sub&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/summary/</guid>
      <description>&amp;lt;summary&amp;gt;: The Disclosure Summary element # ::: section-content The &amp;lt;summary&amp;gt; HTML element specifies a summary, caption, or legend for a &amp;lt;details&amp;gt; element&#39;s disclosure box. Clicking the &amp;lt;summary&amp;gt; element toggles the state of the parent &amp;lt;details&amp;gt; element open and closed. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;summary&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/sup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/sup/</guid>
      <description>&amp;lt;sup&amp;gt;: The Superscript element # ::: section-content The &amp;lt;sup&amp;gt; HTML element specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;sup&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/table/</guid>
      <description>&amp;lt;table&amp;gt;: The Table element # ::: section-content The &amp;lt;table&amp;gt; HTML element represents tabular data &amp;mdash; that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;table&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/tbody/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/tbody/</guid>
      <description>&amp;lt;tbody&amp;gt;: The Table Body element # ::: section-content The &amp;lt;tbody&amp;gt; HTML element encapsulates a set of table rows ( &amp;lt;tr&amp;gt; elements), indicating that they comprise the body of the table ( &amp;lt;table&amp;gt;). :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;tbody&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/td/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/td/</guid>
      <description>&amp;lt;td&amp;gt;: The Table Data Cell element # ::: section-content The &amp;lt;td&amp;gt; HTML element defines a cell of a table that contains data. It participates in the table model. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;td&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/template/</guid>
      <description>&amp;lt;template&amp;gt;: The Content Template element # ::: section-content The &amp;lt;template&amp;gt; HTML element is a mechanism for holding HTML that is not to be rendered immediately when a page is loaded but may be instantiated subsequently during runtime using JavaScript.
Think of a template as a content fragment that is being stored for subsequent use in the document. While the parser does process the contents of the &amp;lt;template&amp;gt; element while loading the page, it does so only to ensure that those contents are valid; the element&#39;s contents are not rendered, however.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/textarea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/textarea/</guid>
      <description>&amp;lt;textarea&amp;gt;: The Textarea element # ::: section-content The &amp;lt;textarea&amp;gt; HTML element represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example a comment on a review or feedback form. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;textarea&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/tfoot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/tfoot/</guid>
      <description>&amp;lt;tfoot&amp;gt;: The Table Foot element # ::: section-content The &amp;lt;tfoot&amp;gt; HTML element defines a set of rows summarizing the columns of the table. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;tfoot&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/th/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/th/</guid>
      <description>&amp;lt;th&amp;gt;: The Table Header element # ::: section-content The &amp;lt;th&amp;gt; HTML element defines a cell as the header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;th&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/thead/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/thead/</guid>
      <description>&amp;lt;thead&amp;gt;: The Table Head element # ::: section-content The &amp;lt;thead&amp;gt; HTML element defines a set of rows defining the head of the columns of the table. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;thead&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/time/</guid>
      <description>&amp;lt;time&amp;gt;: The (Date) Time element # ::: section-content The &amp;lt;time&amp;gt; HTML element represents a specific period in time. It may include the datetime attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders.
It may represent one of the following:
A time on a 24-hour clock. A precise date in the Gregorian calendar{target=&amp;quot;_blank&amp;quot;} (with optional time and timezone information). A valid time duration{target=&amp;quot;_blank&amp;quot;}.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/title/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/title/</guid>
      <description>&amp;lt;title&amp;gt;: The Document Title element # ::: section-content The &amp;lt;title&amp;gt; HTML element defines the document&#39;s title that is shown in a browser&#39;s title bar or a page&#39;s tab. It only contains text; tags within the element are ignored.
::: code-example [html]{.language-name}
&amp;lt;title&amp;gt;Grandma&amp;#39;s Heavy Metal Festival Journal&amp;lt;/title&amp;gt; :::
Content categories Metadata content. Permitted content Text that is not inter-element whitespace. Tag omission Both opening and closing tags are required. Note that leaving off &amp;lt;/title&amp;gt; should cause the browser to ignore the rest of the page.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/tr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/tr/</guid>
      <description>&amp;lt;tr&amp;gt;: The Table Row element # ::: section-content The &amp;lt;tr&amp;gt; HTML element defines a row of cells in a table. The row&#39;s cells can then be established using a mix of &amp;lt;td&amp;gt; (data cell) and &amp;lt;th&amp;gt; (header cell) elements. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;tr&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/track/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/track/</guid>
      <description>&amp;lt;track&amp;gt;: The Embed Text Track element # ::: section-content The &amp;lt;track&amp;gt; HTML element is used as a child of the media elements, &amp;lt;audio&amp;gt; and &amp;lt;video&amp;gt;. It lets you specify timed text tracks (or time-based data), for example to automatically handle subtitles. The tracks are formatted in WebVTT format (.vtt files) &amp;mdash; Web Video Text Tracks. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;track&amp;gt; # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/tt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/tt/</guid>
      <description>&amp;lt;tt&amp;gt;: The Teletype Text element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/u/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/u/</guid>
      <description>&amp;lt;u&amp;gt;: The Unarticulated Annotation (Underline) element # ::: section-content The &amp;lt;u&amp;gt; HTML element represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a simple solid underline, but may be altered using CSS.
::: {#sect1 .notecard .warning} Warning: This element used to be called the &amp;quot;Underline&amp;quot; element in older versions of HTML, and is still sometimes misused in this way.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/ul/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/ul/</guid>
      <description>&amp;lt;ul&amp;gt;: The Unordered List element # ::: section-content The &amp;lt;ul&amp;gt; HTML element represents an unordered list of items, typically rendered as a bulleted list. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;ul&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/var/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/var/</guid>
      <description>&amp;lt;var&amp;gt;: The Variable element # ::: section-content The &amp;lt;var&amp;gt; HTML element represents the name of a variable in a mathematical expression or a programming context. It&#39;s typically presented using an italicized version of the current typeface, although that behavior is browser-dependent. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;var&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/video/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/video/</guid>
      <description>&amp;lt;video&amp;gt;: The Video Embed element # ::: section-content The &amp;lt;video&amp;gt; HTML element embeds a media player which supports video playback into the document. You can use &amp;lt;video&amp;gt; for audio content as well, but the &amp;lt;audio&amp;gt; element may provide a more appropriate user experience. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;video&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/wbr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/wbr/</guid>
      <description>&amp;lt;wbr&amp;gt;: The Line Break Opportunity element # ::: section-content The &amp;lt;wbr&amp;gt; HTML element represents a word break opportunity&amp;mdash;a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: &amp;lt;wbr&amp;gt; # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/element/xmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/element/xmp/</guid>
      <description>&amp;lt;xmp&amp;gt; # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/</guid>
      <description>Global attributes # ::: section-content Global attributes are attributes common to all HTML elements; they can be used on all elements, though they may have no effect on some elements.
Global attributes may be specified on all HTML elements, even those not specified in the standard. That means that any non-standard elements must still permit these attributes, even though using those elements means that the document is no longer HTML5-compliant.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/accesskey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/accesskey/</guid>
      <description>accesskey # ::: section-content The accesskey global attribute provides a hint for generating a keyboard shortcut for the current element. The attribute value must consist of a single printable character (which includes accented and other characters that can be generated by the keyboard). :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: accesskey # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/autocapitalize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/autocapitalize/</guid>
      <description>autocapitalize # ::: section-content The autocapitalize global attribute is an enumerated attribute that controls whether and how text input is automatically capitalized as it is entered/edited by the user.
The attribute must take one of the following values:
off or none: No autocapitalization is applied (all letters default to lowercase) on or sentences: The first letter of each sentence defaults to a capital letter; all other letters default to lowercase words: The first letter of each word defaults to a capital letter; all other letters default to lowercase characters: All letters should default to uppercase The autocapitalize attribute doesn&#39;t affect behavior when typing on a physical keyboard.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/autofocus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/autofocus/</guid>
      <description>autofocus # ::: section-content The autofocus global attribute is a Boolean attribute indicating that an element should be focused on page load, or when the &amp;lt;dialog&amp;gt; that it is part of is displayed.
::: code-example [html]{.language-name}
&amp;lt;input name=&amp;#34;q&amp;#34; autofocus /&amp;gt; :::
No more than one element in the document or dialog may have the autofocus attribute. If applied to multiple elements the first one will receive focus.
::: {#sect1 .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/class/</guid>
      <description>class # ::: section-content The class global attribute is a space-separated list of the case-sensitive classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the class selectors or functions like the DOM method document.getElementsByClassName. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: class # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/contenteditable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/contenteditable/</guid>
      <description>contenteditable # ::: section-content The contenteditable global attribute is an enumerated attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: contenteditable # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/contextmenu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/contextmenu/</guid>
      <description>contextmenu # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/data-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/data-/</guid>
      <description>data-* # ::: section-content The data-* global attributes form a class of attributes called custom data attributes, that allow proprietary information to be exchanged between the HTML and its DOM representation by scripts. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: data-* # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/dir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/dir/</guid>
      <description>dir # ::: section-content The dir global attribute is an enumerated attribute that indicates the directionality of the element&#39;s text. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: dir # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/draggable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/draggable/</guid>
      <description>draggable # ::: section-content The draggable global attribute is an enumerated attribute that indicates whether the element can be dragged, either with native browser behavior or the HTML Drag and Drop API.
The draggable attribute may be applied to elements that strictly fall under the HTML namespace, which means that it cannot be applied to SVGs. For more information about what namespace declarations look like, and what they do, see Namespace crash course.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/enterkeyhint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/enterkeyhint/</guid>
      <description>enterkeyhint # ::: section-content The enterkeyhint global attribute is an enumerated attribute defining what action label (or icon) to present for the enter key on virtual keyboards. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: enterkeyhint # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/exportparts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/exportparts/</guid>
      <description>exportparts # ::: section-content The exportparts global attribute allows you to select and style elements existing in nested shadow trees, by exporting their part names.
The shadow tree is an isolated structure where identifiers, classes, and styles cannot be reached by selectors or queries belonging to a regular DOM. To apply a style to an element living in a shadow tree, by CSS rule created outside of it, part global attribute has to be used.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/hidden/</guid>
      <description>hidden # ::: section-content The hidden global attribute is an enumerated attribute indicating that the browser should not render the contents of the element. For example, it can be used to hide elements of the page that can&#39;t be used until the login process has been completed. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: hidden # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/id/</guid>
      <description>id # ::: section-content The id global attribute defines an identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS). :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: id # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/inert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/inert/</guid>
      <description>inert # ::: section-content The inert global attribute is a Boolean attribute indicating that the browser will ignore the element. With the inert attribute, all of the element&#39;s flat tree descendants (such as modal &amp;lt;dialog&amp;gt;s) that don&#39;t otherwise escape inertness are ignored. The inert attribute also makes the browser ignore input events sent by the user, including focus-related events and events from assistive technologies.
Specifically, inert does the following:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/inputmode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/inputmode/</guid>
      <description>inputmode # ::: section-content The inputmode global attribute is an enumerated attribute that hints at the type of data that might be entered by the user while editing the element or its contents. This allows a browser to display an appropriate virtual keyboard.
It is used primarily on &amp;lt;input&amp;gt; elements, but is usable on any element in contenteditable mode.
It&#39;s important to understand that the inputmode attribute doesn&#39;t cause any validity requirements to be enforced on input.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/is/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/is/</guid>
      <description>is # ::: section-content The is global attribute allows you to specify that a standard HTML element should behave like a defined custom built-in element (see Using custom elements for more details).
This attribute can only be used if the specified custom element name has been successfully defined in the current document, and extends the element type it is being applied to. :::
Examples # ::: section-content The following code is taken from our word-count-web-component{target=&amp;quot;_blank&amp;quot;} example ( see it live also{target=&amp;quot;_blank&amp;quot;}).</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/itemid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/itemid/</guid>
      <description>itemid # ::: section-content The itemid global attribute provides microdata in the form of a unique, global identifier of an item.
An itemid attribute can only be specified for an element that has both itemscope and itemtype attributes. Also, itemid can only be specified on elements that possess an itemscope attribute whose corresponding itemtype refers to or defines a vocabulary that supports global identifiers.
The exact meaning of an itemtype&#39;s global identifier is provided by the definition of that identifier within the specified vocabulary.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/itemprop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/itemprop/</guid>
      <description>itemprop # ::: section-content The itemprop global attribute is used to add properties to an item. Every HTML element can have an itemprop attribute specified, and an itemprop consists of a name-value pair. Each name-value pair is called a property, and a group of one or more properties forms an item. Property values are either a string or a URL and can be associated with a very wide range of elements including &amp;lt;audio&amp;gt;, &amp;lt;embed&amp;gt;, &amp;lt;iframe&amp;gt;, &amp;lt;img&amp;gt;, &amp;lt;link&amp;gt;, &amp;lt;object&amp;gt;, &amp;lt;source&amp;gt;, &amp;lt;track&amp;gt;, and &amp;lt;video&amp;gt;.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/itemref/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/itemref/</guid>
      <description>itemref # ::: section-content Properties that are not descendants of an element with the itemscope attribute can be associated with an item using the global attribute itemref.
itemref provides a list of element IDs (not itemids) elsewhere in the document, with additional properties
The itemref attribute can only be specified on elements that have an itemscope attribute specified.
::: {#sect1 .notecard .note} Note: The itemref attribute is not part of the microdata data model.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/itemscope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/itemscope/</guid>
      <description>itemscope # ::: section-content itemscope is a boolean global attribute that defines the scope of associated metadata. Specifying the itemscope attribute for an element creates a new item, which results in a number of name-value pairs that are associated with the element.
A related attribute, itemtype, is used to specify the valid URL of a vocabulary (such as schema.org{target=&amp;quot;_blank&amp;quot;}) that describes the item and its properties context. In each of the following examples, the vocabulary is from schema.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/itemtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/itemtype/</guid>
      <description>itemtype # ::: section-content The global attribute itemtype specifies the URL of the vocabulary that will be used to define itemprop&#39;s (item properties) in the data structure.
itemscope is used to set the scope of where in the data structure the vocabulary set by itemtype will be active.
Google and other major search engines support the schema.org{target=&amp;quot;_blank&amp;quot;} vocabulary for structured data. This vocabulary defines a standard set of type names and property names.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/lang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/lang/</guid>
      <description>lang # ::: section-content The lang global attribute helps define the language of an element: the language that non-editable elements are written in, or the language that the editable elements should be written in by the user. The attribute contains a single &amp;quot;language tag&amp;quot; in the format defined in RFC 5646: Tags for Identifying Languages (also known as BCP 47){target=&amp;quot;_blank&amp;quot;}.
::: {#sect1 .notecard .note} Note: The default value of lang is unknown, therefore it is recommended to always specify this attribute with the appropriate value.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/nonce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/nonce/</guid>
      <description>nonce # ::: section-content The nonce global attribute is a content attribute defining a cryptographic nonce (&amp;quot;number used once&amp;quot;) which can be used by Content Security Policy to determine whether or not a given fetch will be allowed to proceed for a given element. :::
Description # ::: section-content The nonce attribute is useful to allowlist specific elements, such as a particular inline script or style elements. It can help you to avoid using the CSP unsafe-inline directive, which would allowlist all inline scripts or styles.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/part/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/part/</guid>
      <description>part # ::: section-content The part global attribute contains a space-separated list of the part names of the element. Part names allows CSS to select and style specific elements in a shadow tree via the ::part pseudo-element.
See our Shadow part example{target=&amp;quot;_blank&amp;quot;} for a usage example. :::
Specifications # ::: _table # Specification # CSS Shadow Parts
[# part-attr]{.small}
:::
Browser compatibility # ::: _table Desktop Mobile
Chrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet part 73 79 72 No 60 13.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/popover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/popover/</guid>
      <description>popover # ::: section-content The popover global attribute is used to designate an element as a popover element.
Popover elements are hidden via display: none until opened via an invoking/control element (i.e. a &amp;lt;button&amp;gt; or &amp;lt;input type=&amp;quot;button&amp;quot;&amp;gt; with a popovertarget attribute) or a HTMLElement.showPopover() call.
When open, popover elements will appear above all other elements in the top layer, and won&#39;t be influenced by parent elements&#39; position or overflow styling.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/slot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/slot/</guid>
      <description>slot # ::: section-content The slot global attribute assigns a slot in a shadow DOM shadow tree to an element: An element with a slot attribute is assigned to the slot created by the &amp;lt;slot&amp;gt; element whose name attribute&#39;s value matches that slot attribute&#39;s value.
For examples, see our Using templates and slots guide. :::
Specifications # ::: _table # Specification # HTML Standard
[# attr-slot]{.small}
DOM Standard
[# ref-for-dom-element-slot①]{.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/spellcheck/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/spellcheck/</guid>
      <description>spellcheck # ::: section-content The spellcheck global attribute is an enumerated attribute that defines whether the element may be checked for spelling errors. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: spellcheck # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/style/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/style/</guid>
      <description>style # ::: section-content The style global attribute contains CSS styling declarations to be applied to the element. Note that it is recommended for styles to be defined in a separate file or files. This attribute and the &amp;lt;style&amp;gt; element have mainly the purpose of allowing for quick styling, for example for testing purposes. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: style # Reset :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/tabindex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/tabindex/</guid>
      <description>tabindex # ::: section-content The tabindex global attribute allows developers to make HTML elements focusable, allow or prevent them from being sequentially focusable (usually with the [Tab]{.kbd} key, hence the name) and determine their relative ordering for sequential focus navigation. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: tabindex # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/title/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/title/</guid>
      <description>title # ::: section-content The title global attribute contains text representing advisory information related to the element it belongs to. :::
Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}
HTML Demo: title # Reset :::
::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::
::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/translate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/translate/</guid>
      <description>translate # ::: section-content The translate global attribute is an enumerated attribute that is used to specify whether an element&#39;s translatable attribute values and its Text node children should be translated when the page is localized, or whether to leave them unchanged.
It can have the following values:
empty string or yes, which indicates that the element should be translated when the page is localized. no, which indicates that the element must not be translated.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/global_attributes/virtualkeyboardpolicy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/global_attributes/virtualkeyboardpolicy/</guid>
      <description>virtualkeyboardpolicy # ::: section-content ::: {#sect1 .notecard .experimental} Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in production. :::
The virtualkeyboardpolicy global attribute is an enumerated attribute. When specified on an element that also uses the contenteditable attribute, it controls the on-screen virtual keyboard behavior on devices such as tablets, mobile phones, or other devices where a hardware keyboard may not be available.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/microdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/microdata/</guid>
      <description>Microdata # ::: section-content Microdata is part of the WHATWG HTML Standard and is used to nest metadata within existing content on web pages. Search engines and web crawlers can extract and process microdata from a web page and use it to provide a richer browsing experience for users. Search engines benefit greatly from direct access to this structured data because it allows search engines to understand the information on web pages and provide more relevant results to users.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/quirks_mode_and_standards_mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/quirks_mode_and_standards_mode/</guid>
      <description>Quirks Mode # ::: section-content In the old days of the web, pages were typically written in two versions: One for Netscape Navigator, and one for Microsoft Internet Explorer. When the web standards were made at W3C, browsers could not just start using them, as doing so would break most existing sites on the web. Browsers therefore introduced two modes to treat new standards compliant sites differently from old legacy sites.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/reference/</guid>
      <description>HTML reference # ::: section-content This HTML reference describes all elements and attributes of HTML, including global attributes that apply to all elements.
HTML element reference This page lists all the HTML elements, which are created using tags.
HTML attribute reference Elements in HTML have attributes; these are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want.
Global attributes Global attributes are attributes common to all HTML elements; they can be used on all elements, though they may have no effect on some elements.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/html/viewport_meta_tag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/html/viewport_meta_tag/</guid>
      <description>Viewport meta tag # ::: section-content This article describes how to use the &amp;quot;viewport&amp;quot; &amp;lt;meta&amp;gt; tag to control the viewport&#39;s size and shape. :::
Background # ::: section-content The browser&#39;s viewport is the area of the window in which web content can be seen. This is often not the same size as the rendered page, in which case the browser provides scrollbars for the user to scroll around and access all the content.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/asp-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/asp-net-core/</guid>
      <description>ASP.NET Core # Install ASP.NET Core and TypeScript # First, install ASP.NET Core if you need it. This quick-start guide requires Visual Studio 2015 or 2017.
Next, if your version of Visual Studio does not already have the latest TypeScript, you can install it.
Create a new project # Choose File Choose New Project (Ctrl + Shift + N) Search for .NET Core in the project search bar Select ASP.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/babel-with-typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/babel-with-typescript/</guid>
      <description>Using Babel with TypeScript # Babel vs tsc for TypeScript # When making a modern JavaScript project, you might ask yourself what is the right way to convert files from TypeScript to JavaScript?
A lot of the time the answer is &amp;ldquo;it depends&amp;rdquo;, or &amp;ldquo;someone may have decided for you&amp;rdquo; depending on the project. If you are building your project with an existing framework like tsdx, Angular, NestJS or any framework mentioned in the Getting Started then this decision is handled for you.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/basic-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/basic-types/</guid>
      <description>The Basics # Each and every value in JavaScript has a set of behaviors you can observe from running different operations. That sounds abstract, but as a quick example, consider some operations we might run on a variable named message.
// Accessing the property &amp;#39;toLowerCase&amp;#39; // on &amp;#39;message&amp;#39; and then calling it message.toLowerCase(); // Calling &amp;#39;message&amp;#39; message(); If we break this down, the first runnable line of code accesses a property called toLowerCase and then calls it.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/classes/</guid>
      <description>Classes # Background Reading:
Classes (MDN)
TypeScript offers full support for the class keyword introduced in ES2015.
As with other JavaScript language features, TypeScript adds type annotations and other syntax to allow you to express relationships between classes and other types.
Class Members # Here&amp;rsquo;s the most basic class - an empty one:
class Point {} This class isn&amp;rsquo;t very useful yet, so let&amp;rsquo;s start adding some members.
Fields # A field declaration creates a public writeable property on a class:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/compiler-options-in-msbuild/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/compiler-options-in-msbuild/</guid>
      <description>Compiler Options in MSBuild # Overview # When you have an MSBuild based project which utilizes TypeScript such as an ASP.NET Core project, you can configure TypeScript in two ways. Either via a tsconfig.json or via the project settings.
Using a tsconfig.json # We recommend using a tsconfig.json for your project when possible. To add one to an existing project, add a new item to your project which is called a &amp;ldquo;TypeScript JSON Configuration File&amp;rdquo; in modern versions of Visual Studio.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/compiler-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/compiler-options/</guid>
      <description>tsc CLI Options # Using the CLI # Running tsc locally will compile the closest project defined by a tsconfig.json, or you can compile a set of TypeScript files by passing in a glob of files you want. When input files are specified on the command line, tsconfig.json files are ignored.
# Run a compile based on a backwards look through the fs for a tsconfig.json tsc # Emit JS for just the index.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/conditional-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/conditional-types/</guid>
      <description>Conditional Types # At the heart of most useful programs, we have to make decisions based on input. JavaScript programs are no different, but given the fact that values can be easily introspected, those decisions are also based on the types of the inputs. Conditional types help describe the relation between the types of inputs and outputs.
interface Animal { live(): void; } interface Dog extends Animal { woof(): void; } type Example1 = Dog extends Animal ?</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/configuring-watch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/configuring-watch/</guid>
      <description>Configuring Watch # As of TypeScript 3.8 and onward, the Typescript compiler exposes configuration which controls how it watches files and directories. Prior to this version, configuration required the use of environment variables which are still available.
Background # The --watch implementation of the compiler relies on Node&amp;rsquo;s fs.watch and fs.watchFile. Each of these methods has pros and cons.
fs.watch relies on file system events to broadcast changes in the watched files and directories.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/by-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/by-example/</guid>
      <description>Declaration Reference # The purpose of this guide is to teach you how to write a high-quality definition file. This guide is structured by showing documentation for some API, along with sample usage of that API, and explaining how to write the corresponding declaration.
These examples are ordered in approximately increasing order of complexity.
Objects with Properties # Documentation
The global variable myLib has a function makeGreeting for creating greetings, and a property numberOfGreetings indicating the number of greetings made so far.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/consumption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/consumption/</guid>
      <description>Consumption # Downloading # Getting type declarations requires no tools apart from npm.
As an example, getting the declarations for a library like lodash takes nothing more than the following command
npm install --save-dev @types/lodash It is worth noting that if the npm package already includes its declaration file as described in Publishing, downloading the corresponding @types package is not needed.
Consuming # From there you&amp;rsquo;ll be able to use lodash in your TypeScript code with no fuss.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/deep-dive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/deep-dive/</guid>
      <description>Deep Dive # Declaration File Theory: A Deep Dive # Structuring modules to give the exact API shape you want can be tricky. For example, we might want a module that can be invoked with or without new to produce different types, has a variety of named types exposed in a hierarchy, and has some properties on the module object as well.
By reading this guide, you&amp;rsquo;ll have the tools to write complex declaration files that expose a friendly API surface.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/do-s-and-don-ts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/do-s-and-don-ts/</guid>
      <description>Do&#39;s and Don&#39;ts # General Types # Number, String, Boolean, Symbol and Object # ❌ Don&amp;rsquo;t ever use the types Number, String, Boolean, Symbol, or Object These types refer to non-primitive boxed objects that are almost never used appropriately in JavaScript code.
/* WRONG */ function reverse(s: String): String; ✅ Do use the types number, string, boolean, and symbol.
/* OK */ function reverse(s: string): string; Instead of Object, use the non-primitive object type ( added in TypeScript 2.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/dts-from-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/dts-from-js/</guid>
      <description>Creating .d.ts Files from .js files # With TypeScript 3.7, TypeScript added support for generating .d.ts files from JavaScript using JSDoc syntax.
This set up means you can own the editor experience of TypeScript-powered editors without porting your project to TypeScript, or having to maintain .d.ts files in your codebase. TypeScript supports most JSDoc tags, you can find the reference here.
Setting up your Project to emit .d.ts files # To add creation of .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/introduction/</guid>
      <description>Introduction # The Declaration Files section is designed to teach you how to write a high-quality TypeScript Declaration File. We need to assume basic familiarity with the TypeScript language in order to get started.
If you haven&amp;rsquo;t already, you should read the TypeScript Handbook to familiarize yourself with basic concepts, especially types and modules.
The most common case for learning how .d.ts files work is that you&amp;rsquo;re typing an npm package with no types.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/library-structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/library-structures/</guid>
      <description>Library Structures # Broadly speaking, the way you structure your declaration file depends on how the library is consumed. There are many ways of offering a library for consumption in JavaScript, and you&amp;rsquo;ll need to write your declaration file to match it. This guide covers how to identify common library patterns, and how to write declaration files which correspond to that pattern.
Each type of major library structuring pattern has a corresponding file in the Templates section.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/publishing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/publishing/</guid>
      <description>Publishing # Now that you have authored a declaration file following the steps of this guide, it is time to publish it to npm. There are two main ways you can publish your declaration files to npm:
bundling with your npm package publishing to the @types organization on npm. If your types are generated by your source code, publish the types with your source code. Both TypeScript and JavaScript projects can generate types via declaration.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/</guid>
      <description>Templates # global-modifying-module.d.ts
global-plugin.d.ts global.d.ts module-class.d.ts module-function.d.ts module-plugin.d.ts module.d.ts ::: _attribution © 2012-2023 Microsoft
Licensed under the Apache License, Version 2.0.
https://www.typescriptlang.org/docs/handbook/declaration-files/templates.html{._attribution-link} :::</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/global-d-ts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/global-d-ts/</guid>
      <description>Global .d.ts # Global Libraries # A global library is one that can be accessed from the global scope (i.e. without using any form of import). Many libraries simply expose one or more global variables for use. For example, if you were using jQuery, the $ variable can be used by simply referring to it:
$(() =&amp;gt; { console.log(&amp;#34;hello!&amp;#34;); }); You&amp;rsquo;ll usually see guidance in the documentation of a global library of how to use the library in an HTML script tag:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/global-modifying-module-d-ts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/global-modifying-module-d-ts/</guid>
      <description>Global: Modifying Module # Global-modifying Modules # A global-modifying module alters existing values in the global scope when they are imported. For example, there might exist a library which adds new members to String.prototype when imported. This pattern is somewhat dangerous due to the possibility of runtime conflicts, but we can still write a declaration file for it.
Identifying global-modifying modules # Global-modifying modules are generally easy to identify from their documentation.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/global-plugin-d-ts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/global-plugin-d-ts/</guid>
      <description>Global: Plugin # UMD # A UMD module is one that can either be used as module (through an import), or as a global (when run in an environment without a module loader). Many popular libraries, such as Moment.js, are written this way. For example, in Node.js or using RequireJS, you would write:
import moment = require(&amp;#34;moment&amp;#34;); console.log(moment.format()); whereas in a vanilla browser environment you would write:
console.log(moment.format()); Identifying a UMD library # UMD modules check for the existence of a module loader environment.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/module-class-d-ts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/module-class-d-ts/</guid>
      <description>Module: Class # For example, when you want to work with JavaScript code which looks like:
const Greeter = require(&amp;#34;super-greeter&amp;#34;); const greeter = new Greeter(); greeter.greet(); To handle both importing via UMD and modules:
// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~] // Project: [~THE PROJECT NAME~] // Definitions by: [~YOUR NAME~] &amp;lt;[~A URL FOR YOU~]&amp;gt; /*~ This is the module template file for class modules. *~ You should rename it to index.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/module-d-ts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/module-d-ts/</guid>
      <description>Modules .d.ts # Comparing JavaScript to an example DTS # Common CommonJS Patterns # A module using CommonJS patterns uses module.exports to describe the exported values. For example, here is a module which exports a function and a numerical constant:
const maxInterval = 12; function getArrayLength(arr) { return arr.length; } module.exports = { getArrayLength, maxInterval, }; This can be described by the following .d.ts:
export function getArrayLength(arr: any[]): number; export const maxInterval: 12; The TypeScript playground can show you the .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/module-function-d-ts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/module-function-d-ts/</guid>
      <description>Module: Function # For example, when you want to work with JavaScript code which looks like:
import greeter from &amp;#34;super-greeter&amp;#34;; greeter(2); greeter(&amp;#34;Hello world&amp;#34;); To handle both importing via UMD and modules:
// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~] // Project: [~THE PROJECT NAME~] // Definitions by: [~YOUR NAME~] &amp;lt;[~A URL FOR YOU~]&amp;gt; /*~ This is the module template file for function modules. *~ You should rename it to index.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/module-plugin-d-ts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-files/templates/module-plugin-d-ts/</guid>
      <description>Module: Plugin # For example, when you want to work with JavaScript code which extends another library.
import { greeter } from &amp;#34;super-greeter&amp;#34;; // Normal Greeter API greeter(2); greeter(&amp;#34;Hello world&amp;#34;); // Now we extend the object with a new function at runtime import &amp;#34;hyper-super-greeter&amp;#34;; greeter.hyperGreet(); The definition for &amp;ldquo;super-greeter&amp;rdquo;:
/*~ This example shows how to have multiple overloads for your function */ export interface GreeterFunction { (name: string): void (time: number): void } /*~ This example shows how to export a function specified by an interface */ export const greeter: GreeterFunction; We can extend the existing module like the following:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/declaration-merging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/declaration-merging/</guid>
      <description>Declaration Merging # Introduction # Some of the unique concepts in TypeScript describe the shape of JavaScript objects at the type level. One example that is especially unique to TypeScript is the concept of &amp;lsquo;declaration merging&amp;rsquo;. Understanding this concept will give you an advantage when working with existing JavaScript. It also opens the door to more advanced abstraction concepts.
For the purposes of this article, &amp;ldquo;declaration merging&amp;rdquo; means that the compiler merges two separate declarations declared with the same name into a single definition.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/decorators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/decorators/</guid>
      <description>Decorators # Introduction # Further Reading:
A Complete Guide to TypeScript Decorators
With the introduction of Classes in TypeScript and ES6, there now exist certain scenarios that require additional features to support annotating or modifying classes and class members. Decorators provide a way to add both annotations and a meta-programming syntax for class declarations and members. Decorators are a stage 2 proposal for JavaScript and are available as an experimental feature of TypeScript.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/dom-manipulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/dom-manipulation/</guid>
      <description>DOM Manipulation # DOM Manipulation # An exploration into the HTMLElement type # In the 20+ years since its standardization, JavaScript has come a very long way. While in 2020, JavaScript can be used on servers, in data science, and even on IoT devices, it is important to remember its most popular use case: web browsers.
Websites are made up of HTML and/or XML documents. These documents are static, they do not change.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/enums/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/enums/</guid>
      <description>Enums # Enums are one of the few features TypeScript has which is not a type-level extension of JavaScript.
Enums allow a developer to define a set of named constants. Using enums can make it easier to document intent, or create a set of distinct cases. TypeScript provides both numeric and string-based enums.
Numeric enums # We&amp;rsquo;ll first start off with numeric enums, which are probably more familiar if you&amp;rsquo;re coming from other languages.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/esm-node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/esm-node/</guid>
      <description>ECMAScript Modules in Node.js # For the last few years, Node.js has been working to support running ECMAScript modules (ESM). This has been a very difficult feature to support, since the foundation of the Node.js ecosystem is built on a different module system called CommonJS (CJS).
Interoperating between the two module systems brings large challenges, with many new features to juggle; however, support for ESM in Node.js is now implemented in Node.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/everyday-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/everyday-types/</guid>
      <description>Everyday Types # In this chapter, we&amp;rsquo;ll cover some of the most common types of values you&amp;rsquo;ll find in JavaScript code, and explain the corresponding ways to describe those types in TypeScript. This isn&amp;rsquo;t an exhaustive list, and future chapters will describe more ways to name and use other types.
Types can also appear in many more places than just type annotations. As we learn about the types themselves, we&amp;rsquo;ll also learn about the places where we can refer to these types to form new constructs.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/functions/</guid>
      <description>More on Functions # Functions are the basic building block of any application, whether they&amp;rsquo;re local functions, imported from another module, or methods on a class. They&amp;rsquo;re also values, and just like other values, TypeScript has many ways to describe how functions can be called. Let&amp;rsquo;s learn about how to write types that describe functions.
Function Type Expressions # The simplest way to describe a function is with a function type expression.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/generics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/generics/</guid>
      <description>Generics # A major part of software engineering is building components that not only have well-defined and consistent APIs, but are also reusable. Components that are capable of working on the data of today as well as the data of tomorrow will give you the most flexible capabilities for building up large software systems.
In languages like C# and Java, one of the main tools in the toolbox for creating reusable components is generics, that is, being able to create a component that can work over a variety of types rather than a single one.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/gulp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/gulp/</guid>
      <description>Gulp # This quick start guide will teach you how to build TypeScript with gulp and then add Browserify, terser, or Watchify to the gulp pipeline. This guide also shows how to add Babel functionality using Babelify.
We assume that you&amp;rsquo;re already using Node.js with npm.
Minimal project # Let&amp;rsquo;s start out with a new directory. We&amp;rsquo;ll name it proj for now, but you can change it to whatever you want.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/indexed-access-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/indexed-access-types/</guid>
      <description>Indexed Access Types # We can use an indexed access type to look up a specific property on another type:
type Person = { age: number; name: string; alive: boolean }; type Age = Person[&amp;#34;age&amp;#34;]; The indexing type is itself a type, so we can use unions, keyof, or other types entirely:
type I1 = Person[&amp;#34;age&amp;#34; | &amp;#34;name&amp;#34;]; type I2 = Person[keyof Person]; type AliveOrName = &amp;#34;alive&amp;#34; | &amp;#34;name&amp;#34;; type I3 = Person[AliveOrName]; You&amp;rsquo;ll even see an error if you try to index a property that doesn&amp;rsquo;t exist:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/integrating-with-build-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/integrating-with-build-tools/</guid>
      <description>Integrating with Build Tools # Babel # Install # npm install @babel/cli @babel/core @babel/preset-typescript --save-dev .babelrc # { &amp;#34;presets&amp;#34;: [&amp;#34;@babel/preset-typescript&amp;#34;] } Using Command Line Interface # ./node_modules/.bin/babel --out-file bundle.js src/index.ts package.json # { &amp;#34;scripts&amp;#34;: { &amp;#34;build&amp;#34;: &amp;#34;babel --out-file bundle.js main.ts&amp;#34; }, } Execute Babel from the command line # npm run build Browserify # Install # npm install tsify Using Command Line Interface # browserify main.ts -p [ tsify --noImplicitAny ] &amp;gt; bundle.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/interfaces/</guid>
      <description>Interfaces # ::: {#deprecated-content .deprecated}
This handbook page has been replaced, go to the new page{.deprecation-redirect-link}
::: One of TypeScript&amp;rsquo;s core principles is that type checking focuses on the shape that values have. This is sometimes called &amp;ldquo;duck typing&amp;rdquo; or &amp;ldquo;structural subtyping&amp;rdquo;. In TypeScript, interfaces fill the role of naming these types, and are a powerful way of defining contracts within your code as well as contracts with code outside of your project.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/intro-to-js-ts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/intro-to-js-ts/</guid>
      <description>JS Projects Utilizing TypeScript # The type system in TypeScript has different levels of strictness when working with a codebase:
A type-system based only on inference with JavaScript code Incremental typing in JavaScript via JSDoc Using // @ts-check in a JavaScript file TypeScript code TypeScript with strict enabled Each step represents a move towards a safer type-system, but not every project needs that level of verification.
TypeScript with JavaScript # This is when you use an editor which uses TypeScript to provide tooling like auto-complete, jump to symbol and refactoring tools like rename.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/intro/</guid>
      <description>The TypeScript Handbook # About this Handbook # Over 20 years after its introduction to the programming community, JavaScript is now one of the most widespread cross-platform languages ever created. Starting as a small scripting language for adding trivial interactivity to webpages, JavaScript has grown to be a language of choice for both frontend and backend applications of every size. While the size, scope, and complexity of programs written in JavaScript has grown exponentially, the ability of the JavaScript language to express the relationships between different units of code has not.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/iterators-and-generators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/iterators-and-generators/</guid>
      <description>Iterators and Generators # Iterables # An object is deemed iterable if it has an implementation for the Symbol.iterator property. Some built-in types like Array, Map, Set, String, Int32Array, Uint32Array, etc. have their Symbol.iterator property already implemented. Symbol.iterator function on an object is responsible for returning the list of values to iterate on.
Iterable interface # Iterable is a type we can use if we want to take in types listed above which are iterable.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/jsdoc-supported-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/jsdoc-supported-types/</guid>
      <description>JSDoc Reference # The list below outlines which constructs are currently supported when using JSDoc annotations to provide type information in JavaScript files.
Note any tags which are not explicitly listed below (such as @async) are not yet supported.
Types # @type @param (or @arg or @argument) @returns (or @return) @typedef @callback @template Classes # Property Modifiers @public, @private, @protected, @readonly @override @extends (or @augments) @implements @class (or @constructor) @this Documentation # Documentation tags work in both TypeScript and JavaScript.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/jsx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/jsx/</guid>
      <description>JSX # JSX is an embeddable XML-like syntax. It is meant to be transformed into valid JavaScript, though the semantics of that transformation are implementation-specific. JSX rose to popularity with the React framework, but has since seen other implementations as well. TypeScript supports embedding, type checking, and compiling JSX directly to JavaScript.
Basic usage # In order to use JSX you must do two things.
Name your files with a .</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/keyof-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/keyof-types/</guid>
      <description>Keyof Type Operator # The keyof type operator # The keyof operator takes an object type and produces a string or numeric literal union of its keys. The following type P is the same type as type P = &amp;quot;x&amp;quot; | &amp;quot;y&amp;quot;:
type Point = { x: number; y: number }; type P = keyof Point; If the type has a string or number index signature, keyof will return those types instead:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/mapped-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/mapped-types/</guid>
      <description>Mapped Types # When you don&amp;rsquo;t want to repeat yourself, sometimes a type needs to be based on another type.
Mapped types build on the syntax for index signatures, which are used to declare the types of properties which have not been declared ahead of time:
type OnlyBoolsAndHorses = { [key: string]: boolean | Horse; }; const conforms: OnlyBoolsAndHorses = { del: true, rodney: false, }; A mapped type is a generic type which uses a union of PropertyKeys (frequently created via a keyof) to iterate through keys to create a type:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/migrating-from-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/migrating-from-javascript/</guid>
      <description>Migrating from JavaScript # TypeScript doesn&amp;rsquo;t exist in a vacuum. It was built with the JavaScript ecosystem in mind, and a lot of JavaScript exists today. Converting a JavaScript codebase over to TypeScript is, while somewhat tedious, usually not challenging. In this tutorial, we&amp;rsquo;re going to look at how you might start out. We assume you&amp;rsquo;ve read enough of the handbook to write new TypeScript code.
If you&amp;rsquo;re looking to convert a React project, we recommend looking at the React Conversion Guide first.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/mixins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/mixins/</guid>
      <description>Mixins # Along with traditional OO hierarchies, another popular way of building up classes from reusable components is to build them by combining simpler partial classes. You may be familiar with the idea of mixins or traits for languages like Scala, and the pattern has also reached some popularity in the JavaScript community.
How Does A Mixin Work? # The pattern relies on using generics with class inheritance to extend a base class.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/module-resolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/module-resolution/</guid>
      <description>Module Resolution # This section assumes some basic knowledge about modules. Please see the Modules documentation for more information.
Module resolution is the process the compiler uses to figure out what an import refers to. Consider an import statement like import { a } from &amp;quot;moduleA&amp;quot;; in order to check any use of a, the compiler needs to know exactly what it represents, and will need to check its definition moduleA.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/modules/</guid>
      <description>Modules # JavaScript has a long history of different ways to handle modularizing code. Having been around since 2012, TypeScript has implemented support for a lot of these formats, but over time the community and the JavaScript specification has converged on a format called ES Modules (or ES6 modules). You might know it as the import/export syntax.
ES Modules was added to the JavaScript spec in 2015, and by 2020 had broad support in most web browsers and JavaScript runtimes.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/namespaces-and-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/namespaces-and-modules/</guid>
      <description>Namespaces and Modules # This post outlines the various ways to organize your code using modules and namespaces in TypeScript. We&amp;rsquo;ll also go over some advanced topics of how to use namespaces and modules, and address some common pitfalls when using them in TypeScript.
See the Modules documentation for more information about ES Modules. See the Namespaces documentation for more information about TypeScript namespaces.
Note: In very old versions of TypeScript namespaces were called &amp;lsquo;Internal Modules&amp;rsquo;, these pre-date JavaScript module systems.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/namespaces/</guid>
      <description>Namespaces # A note about terminology: It&amp;rsquo;s important to note that in TypeScript 1.5, the nomenclature has changed. &amp;ldquo;Internal modules&amp;rdquo; are now &amp;ldquo;namespaces&amp;rdquo;. &amp;ldquo;External modules&amp;rdquo; are now simply &amp;ldquo;modules&amp;rdquo;, as to align with ECMAScript 2015&amp;rsquo;s terminology, (namely that module X { is equivalent to the now-preferred namespace X {).
This post outlines the various ways to organize your code using namespaces (previously &amp;ldquo;internal modules&amp;rdquo;) in TypeScript. As we alluded in our note about terminology, &amp;ldquo;internal modules&amp;rdquo; are now referred to as &amp;ldquo;namespaces&amp;rdquo;.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/narrowing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/narrowing/</guid>
      <description>Narrowing # Imagine we have a function called padLeft.
function padLeft(padding: number | string, input: string): string { throw new Error(&amp;#34;Not implemented yet!&amp;#34;); } If padding is a number, it will treat that as the number of spaces we want to prepend to input. If padding is a string, it should just prepend padding to input. Let&amp;rsquo;s try to implement the logic for when padLeft is passed a number for padding.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/nightly-builds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/nightly-builds/</guid>
      <description>Nightly Builds # A nightly build from the TypeScript&amp;rsquo;s main branch is published by midnight PST to npm. Here is how you can get it and use it with your tools.
Using npm # npm install -g typescript@next Updating your IDE to use the nightly builds # You can also update your IDE to use the nightly drop. First you will need to install the package through npm. You can either install the npm package globally or to a local node_modules folder.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/objects/</guid>
      <description>Object Types # In JavaScript, the fundamental way that we group and pass around data is through objects. In TypeScript, we represent those through object types.
As we&amp;rsquo;ve seen, they can be anonymous:
function greet(person: { name: string; age: number }) { return &amp;#34;Hello &amp;#34; + person.name; } or they can be named by using either an interface:
interface Person { name: string; age: number; } function greet(person: Person) { return &amp;#34;Hello &amp;#34; + person.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/project-references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/project-references/</guid>
      <description>Project References # Project references are a new feature in TypeScript 3.0 that allow you to structure your TypeScript programs into smaller pieces.
By doing this, you can greatly improve build times, enforce logical separation between components, and organize your code in new and better ways.
We&amp;rsquo;re also introducing a new mode for tsc, the --build flag, that works hand in hand with project references to enable faster TypeScript builds.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/symbols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/symbols/</guid>
      <description>Symbols # Starting with ECMAScript 2015, symbol is a primitive data type, just like number and string.
symbol values are created by calling the Symbol constructor.
let sym1 = Symbol(); let sym2 = Symbol(&amp;#34;key&amp;#34;); // optional string key Symbols are immutable, and unique.
let sym2 = Symbol(&amp;#34;key&amp;#34;); let sym3 = Symbol(&amp;#34;key&amp;#34;); sym2 === sym3; // false, symbols are unique Just like strings, symbols can be used as keys for object properties.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/template-literal-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/template-literal-types/</guid>
      <description>Template Literal Types # Template literal types build on string literal types, and have the ability to expand into many strings via unions.
They have the same syntax as template literal strings in JavaScript, but are used in type positions. When used with concrete literal types, a template literal produces a new string literal type by concatenating the contents.
type World = &amp;#34;world&amp;#34;; type Greeting = `hello ${World}`; When a union is used in the interpolated position, the type is the set of every possible string literal that could be represented by each union member:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/triple-slash-directives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/triple-slash-directives/</guid>
      <description>Triple-Slash Directives # Triple-slash directives are single-line comments containing a single XML tag. The contents of the comment are used as compiler directives.
Triple-slash directives are only valid at the top of their containing file. A triple-slash directive can only be preceded by single or multi-line comments, including other triple-slash directives. If they are encountered following a statement or a declaration they are treated as regular single-line comments, and hold no special meaning.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/tsconfig-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/tsconfig-json/</guid>
      <description>What is a tsconfig.json # Overview # The presence of a tsconfig.json file in a directory indicates that the directory is the root of a TypeScript project. The tsconfig.json file specifies the root files and the compiler options required to compile the project.
JavaScript projects can use a jsconfig.json file instead, which acts almost the same but has some JavaScript-related compiler flags enabled by default.
A project is compiled in one of the following ways:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/tsconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/tsconfig/</guid>
      <description>TSConfig Reference # {aria-expanded=&amp;ldquo;false&amp;rdquo; role=&amp;ldquo;button&amp;rdquo;}
Intro to the TSConfig Reference # ::: preview A TSConfig file in a directory indicates that the directory is the root of a TypeScript or JavaScript project... :::
::: {.tsconfig .main-content-block}
Compiler Options # ::: tsconfig-quick-nav ::: tsconfig-quick-nav-category
Top Level {#quick-nav-Top Level} # files, extends, include, excludeand references ::: ::: ::: {.tsconfig-quick-nav .grouped}
&amp;quot;compilerOptions&amp;quot; # ::: tsconfig-quick-nav-category
Type Checking # allowUnreachableCode, allowUnusedLabels, alwaysStrict, exactOptionalPropertyTypes, noFallthroughCasesInSwitch, noImplicitAny, noImplicitOverride, noImplicitReturns, noImplicitThis, noPropertyAccessFromIndexSignature, noUncheckedIndexedAccess, noUnusedLocals, noUnusedParameters, strict, strictBindCallApply, strictFunctionTypes, strictNullChecks, strictPropertyInitializationand useUnknownInCatchVariables ::: ::: tsconfig-quick-nav-category</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/type-checking-javascript-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/type-checking-javascript-files/</guid>
      <description>Type Checking JavaScript Files # Here are some notable differences on how checking works in .js files compared to .ts files.
Properties are inferred from assignments in class bodies # ES2015 does not have a means for declaring properties on classes. Properties are dynamically assigned, just like object literals.
In a .js file, the compiler infers properties from property assignments inside the class body. The type of a property is the type given in the constructor, unless it&amp;rsquo;s not defined there, or the type in the constructor is undefined or null.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/type-compatibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/type-compatibility/</guid>
      <description>Type Compatibility # Type compatibility in TypeScript is based on structural subtyping. Structural typing is a way of relating types based solely on their members. This is in contrast with nominal typing. Consider the following code:
interface Pet { name: string; } class Dog { name: string; } let pet: Pet; // OK, because of structural typing pet = new Dog(); In nominally-typed languages like C# or Java, the equivalent code would be an error because the Dog class does not explicitly describe itself as being an implementer of the Pet interface.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/type-inference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/type-inference/</guid>
      <description>Type Inference # In TypeScript, there are several places where type inference is used to provide type information when there is no explicit type annotation. For example, in this code
let x = 3; The type of the x variable is inferred to be number. This kind of inference takes place when initializing variables and members, setting parameter default values, and determining function return types.
In most cases, type inference is straightforward.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/typeof-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/typeof-types/</guid>
      <description>Typeof Type Operator # The typeof type operator # JavaScript already has a typeof operator you can use in an expression context:
// Prints &amp;#34;string&amp;#34; console.log(typeof &amp;#34;Hello world&amp;#34;); TypeScript adds a typeof operator you can use in a type context to refer to the type of a variable or property:
let s = &amp;#34;hello&amp;#34;; let n: typeof s; This isn&amp;rsquo;t very useful for basic types, but combined with other type operators, you can use typeof to conveniently express many patterns.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/types-from-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/types-from-types/</guid>
      <description>Creating Types from Types # TypeScript&amp;rsquo;s type system is very powerful because it allows expressing types in terms of other types.
The simplest form of this idea is generics. Additionally, we have a wide variety of type operators available to use. It&amp;rsquo;s also possible to express types in terms of values that we already have.
By combining various type operators, we can express complex operations and values in a succinct, maintainable way.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/typescript-from-scratch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/typescript-from-scratch/</guid>
      <description>TypeScript for the New Programmer # Congratulations on choosing TypeScript as one of your first languages &amp;mdash; you&amp;rsquo;re already making good decisions!
You&amp;rsquo;ve probably already heard that TypeScript is a &amp;ldquo;flavor&amp;rdquo; or &amp;ldquo;variant&amp;rdquo; of JavaScript. The relationship between TypeScript (TS) and JavaScript (JS) is rather unique among modern programming languages, so learning more about this relationship will help you understand how TypeScript adds to JavaScript.
What is JavaScript? A Brief History # JavaScript (also known as ECMAScript) started its life as a simple scripting language for browsers.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/typescript-in-5-minutes-func/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/typescript-in-5-minutes-func/</guid>
      <description>TypeScript for Functional Programmers # TypeScript began its life as an attempt to bring traditional object-oriented types to JavaScript so that the programmers at Microsoft could bring traditional object-oriented programs to the web. As it has developed, TypeScript&amp;rsquo;s type system has evolved to model code written by native JavaScripters. The resulting system is powerful, interesting and messy.
This introduction is designed for working Haskell or ML programmers who want to learn TypeScript.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/typescript-in-5-minutes-oop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/typescript-in-5-minutes-oop/</guid>
      <description>TypeScript for Java/C# Programmers # TypeScript is a popular choice for programmers accustomed to other languages with static typing, such as C# and Java.
TypeScript&amp;rsquo;s type system offers many of the same benefits, such as better code completion, earlier detection of errors, and clearer communication between parts of your program. While TypeScript provides many familiar features for these developers, it&amp;rsquo;s worth stepping back to see how JavaScript (and therefore TypeScript) differ from traditional OOP languages.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/typescript-in-5-minutes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/typescript-in-5-minutes/</guid>
      <description>TypeScript for JavaScript Programmers # TypeScript stands in an unusual relationship to JavaScript. TypeScript offers all of JavaScript&amp;rsquo;s features, and an additional layer on top of these: TypeScript&amp;rsquo;s type system.
For example, JavaScript provides language primitives like string and number, but it doesn&amp;rsquo;t check that you&amp;rsquo;ve consistently assigned these. TypeScript does.
This means that your existing working JavaScript code is also TypeScript code. The main benefit of TypeScript is that it can highlight unexpected behavior in your code, lowering the chance of bugs.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/typescript-tooling-in-5-minutes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/typescript-tooling-in-5-minutes/</guid>
      <description>TypeScript Tooling in 5 minutes # Let&amp;rsquo;s get started by building a simple web application with TypeScript.
Installing TypeScript # There are two main ways to add TypeScript to your project:
Via npm (the Node.js package manager) By installing TypeScript&amp;rsquo;s Visual Studio plugins Visual Studio 2017 and Visual Studio 2015 Update 3 include TypeScript language support by default but does not include the TypeScript compiler, tsc. If you didn&amp;rsquo;t install TypeScript with Visual Studio, you can still download it.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/utility-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/utility-types/</guid>
      <description>Utility Types # TypeScript provides several utility types to facilitate common type transformations. These utilities are available globally.
Awaited&amp;lt;Type&amp;gt; # Released: 4.5
This type is meant to model operations like await in async functions, or the .then() method on Promises - specifically, the way that they recursively unwrap Promises.
Example # type A = Awaited&amp;lt;Promise&amp;lt;string&amp;gt;&amp;gt;; type B = Awaited&amp;lt;Promise&amp;lt;Promise&amp;lt;number&amp;gt;&amp;gt;&amp;gt;; type C = Awaited&amp;lt;boolean | Promise&amp;lt;number&amp;gt;&amp;gt;; Partial&amp;lt;Type&amp;gt; # Released:
2.1</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/languages/typescript/variable-declarations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/languages/typescript/variable-declarations/</guid>
      <description>Variable Declaration # let and const are two relatively new concepts for variable declarations in JavaScript. As we mentioned earlier, let is similar to var in some respects, but allows users to avoid some of the common &amp;ldquo;gotchas&amp;rdquo; that users run into in JavaScript.
const is an augmentation of let in that it prevents re-assignment to a variable.
With TypeScript being an extension of JavaScript, the language naturally supports let and const.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/advanced/dos-and-donts-for-performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/advanced/dos-and-donts-for-performance/</guid>
      <description>Do&amp;rsquo;s and don&amp;rsquo;ts for performance # Hey everyone! While writing the book I’ve been gathering a big list of tips, tricks, caveats, and gotchas. This page contains everything that I’ve found so far.
Not all the tips here have been experimentally verified, especially the performance tips. There are too many variables involved to blindly follow a list, so always make sure to test your app thoroughly and see what works for you.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/advanced/performance-pitfalls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/advanced/performance-pitfalls/</guid>
      <description>Performance pitfalls # Tips and Tricks # This is a good overview: https://discoverthreejs.com/tips-and-tricks
The most important gotcha in three.js is that creating objects can be expensive, think twice before you mount/unmount things! Every material or light that you put into the scene has to compile, every geometry you create will be processed. Share materials and geometries if you can, either in global scope or locally:
const geom = useMemo(() =&amp;gt; new BoxGeometry(), []) const mat = useMemo(() =&amp;gt; new MeshBasicMaterial(), []) return items.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/advanced/scaling-performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/advanced/scaling-performance/</guid>
      <description>Scaling performance # Running WebGL can be quite expensive depending on how powerful your devices are. In order to mitigate this, especially if you want to make your application available to a broad variety of devices, including weaker options, you should look into performance optimizations. This article goes through a couple of them.
On-demand rendering # three.js apps usually run in a game-loop that executes 60 times a second, React Three Fiber is no different.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/fundamentals/backgrounds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/fundamentals/backgrounds/</guid>
      <description>Backgrounds # This is the first article in a series of articles about three.js. Three.js is a 3D library that tries to make it as easy as possible to get 3D content on a webpage.
Three.js is often confused with WebGL since more often than not, but not always, three.js uses WebGL to draw 3D. WebGL is a very low-level system that only draws points, lines, and triangles. To do anything useful with WebGL generally requires quite a bit of code and that is where three.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/fundamentals/furthermore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/fundamentals/furthermore/</guid>
      <description> Furthermore # Primitiveshttps://threejs.org/manual/#en/primitivesScene Graphhttps://threejs.org/manual/#en/scenegraphMaterialshttps://threejs.org/manual/#en/materialsTextureshttps://threejs.org/manual/#en/texturesLightshttps://threejs.org/manual/#en/lightsCamerashttps://threejs.org/manual/#en/camerasShadowsFoghttps://threejs.org/manual/#en/shadowsFoghttps://threejs.org/manual/#en/fogRender Targetshttps://threejs.org/manual/#en/rendertargetsCustom BufferGeometryhttps://threejs.org/manual/#en/custom-buffergeometry </description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/getting-started/examplesin-progress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/getting-started/examplesin-progress/</guid>
      <description>Examples (In progress) # Showcase # MonitorsFlying bananasRoom with soft shadows Game prototypes # Basic examples # https://docs.pmnd.rs/react-three-fiber/getting-started/examples</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/getting-started/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/getting-started/installation/</guid>
      <description>Installation # npm install three @react-three/fiber Fiber is compatible with React v18.0.0+ and works with ReactDOM and React Native.
Getting started with React Three Fiber is not nearly as hard as you might have thought, but various frameworks may require particular attention.
We&amp;rsquo;ve put together guides for getting started with each popular framework:
Create React App Vite.js Next.js CDN w/o build tools React Native If you just want to give it a try, fork this example on codesandbox!</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/getting-started/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/getting-started/introduction/</guid>
      <description>Introduction # https://docs.pmnd.rs/react-three-fiber/getting-started/examples
Build your scene declaratively with re-usable, self-contained components that react to state, are readily interactive and can participate in React&amp;rsquo;s ecosystem.
npm install three @types/three @react-three/fiber Does it have limitations?
None. Everything that works in Threejs will work here without exception.
Is it slower than plain Threejs?
No. There is no overhead. Components render outside of React. It outperforms Threejs in scale due to Reacts scheduling abilities.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/getting-started/your-first-scene/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/libs-and-fwks/react-three/getting-started/your-first-scene/</guid>
      <description>Your first scene # This tutorial will assume some React knowledge.
Setting up the Canvas # We&amp;rsquo;ll start by importing the &amp;lt;Canvas /&amp;gt; component from @react-three/fiber and putting it in our React tree.
import { createRoot } from &amp;#39;react-dom/client&amp;#39; import { Canvas } from &amp;#39;@react-three/fiber&amp;#39; function App() { return ( &amp;lt;div id=&amp;#34;canvas-container&amp;#34;&amp;gt; &amp;lt;Canvas /&amp;gt; &amp;lt;/div&amp;gt; ) } createRoot(document.getElementById(&amp;#39;root&amp;#39;)).render(&amp;lt;App /&amp;gt;) The Canvas component does some important setup work behind the scenes:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/accessibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/accessibility/</guid>
      <description>⭐ Accessibility # Why Accessibility? # Web accessibility (also referred to as a11y) is the design and creation of websites that can be used by everyone. Accessibility support is necessary to allow assistive technology to interpret web pages.
React fully supports building accessible websites, often by using standard HTML techniques.
Standards and Guidelines # WCAG # The Web Content Accessibility Guidelines provides guidelines for creating accessible web sites.
The following WCAG checklists provide an overview:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/error-boundaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/error-boundaries/</guid>
      <description>Error Boundaries # In the past, JavaScript errors inside components used to corrupt React’s internal state and cause it to emit cryptic errors on next renders. These errors were always caused by an earlier error in the application code, but React did not provide a way to handle them gracefully in components, and could not recover from them.
Introducing Error Boundaries # A JavaScript error in a part of the UI shouldn’t break the whole app.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/forwarding-refs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/forwarding-refs/</guid>
      <description>⭐ Forwarding Refs # Ref forwarding is a technique for automatically passing a ref through a component to one of its children. This is typically not necessary for most components in the application. However, it can be useful for some kinds of components, especially in reusable component libraries. The most common scenarios are described below.
Forwarding refs to DOM components # Consider a FancyButton component that renders the native button DOM element:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/fragments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/fragments/</guid>
      <description>🌵 Fragments # These docs are old and won’t be updated. Go to react.dev for the new React docs.
These new documentation pages teach modern React:
&amp;lt;Fragment&amp;gt; A common pattern in React is for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.
render() { return ( &amp;lt;React.Fragment&amp;gt; &amp;lt;ChildA /&amp;gt; &amp;lt;ChildB /&amp;gt; &amp;lt;ChildC /&amp;gt; &amp;lt;/React.Fragment&amp;gt; ); } There is also a new short syntax for declaring them.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/higher-order-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/higher-order-components/</guid>
      <description>Higher-Order Components # These docs are old and won’t be updated. Go to react.dev for the new React docs.
Higher-order components are not commonly used in modern React code.
A higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, per se. They are a pattern that emerges from React’s compositional nature.
Concretely, a higher-order component is a function that takes a component and returns a new component.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/integrating-with-other-libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/integrating-with-other-libraries/</guid>
      <description>Integrating with Other Libraries # React can be used in any web application. It can be embedded in other applications and, with a little care, other applications can be embedded in React. This guide will examine some of the more common use cases, focusing on integration with jQuery and Backbone, but the same ideas can be applied to integrating components with any existing code.
Integrating with DOM Manipulation Plugins # React is unaware of changes made to the DOM outside of React.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/jsx-in-depth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/jsx-in-depth/</guid>
      <description>JSX In Depth # These docs are old and won’t be updated. Go to react.dev for the new React docs.
Fundamentally, JSX just provides syntactic sugar for the React.createElement(component, props, ...children) function. The JSX code:
&amp;lt;MyButton color=&amp;#34;blue&amp;#34; shadowSize={2}&amp;gt; Click Me &amp;lt;/MyButton&amp;gt; compiles into:
React.createElement( MyButton, {color: &amp;#39;blue&amp;#39;, shadowSize: 2}, &amp;#39;Click Me&amp;#39; ) You can also use the self-closing form of the tag if there are no children. So:
&amp;lt;div className=&amp;#34;sidebar&amp;#34; /&amp;gt; compiles into:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/optimizing-performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/optimizing-performance/</guid>
      <description>⭐ Optimizing Performance # Internally, React uses several clever techniques to minimize the number of costly DOM operations required to update the UI. For many applications, using React will lead to a fast user interface without doing much work to specifically optimize for performance. Nevertheless, there are several ways you can speed up your React application.
Use the Production Build # If you’re benchmarking or experiencing performance problems in your React apps, make sure you’re testing with the minified production build.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/portals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/portals/</guid>
      <description>Portals # These docs are old and won’t be updated. Go to react.dev for the new React docs.
These new documentation pages teach modern React and include live examples:
createPortal Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.
ReactDOM.createPortal(child, container) The first argument (child) is any renderable React child, such as an element, string, or fragment.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/profiler-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/profiler-api/</guid>
      <description>⭐ Profiler API # These docs are old and won’t be updated. Go to react.dev for the new React docs.
These new documentation pages teach modern React:
&amp;lt;Profiler&amp;gt; The Profiler measures how often a React application renders and what the “cost” of rendering is. Its purpose is to help identify parts of an application that are slow and may benefit from optimizations such as memoization.
Note:
Profiling adds some additional overhead, so it is disabled in the production build.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/react-without-es6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/react-without-es6/</guid>
      <description>React Without ES6 # These docs are old and won’t be updated. Go to react.dev for the new React docs.
Normally you would define a React component as a plain JavaScript class:
class Greeting extends React.Component { render() { return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;; } } If you don’t use ES6 yet, you may use the create-react-class module instead:
var createReactClass = require(&amp;#39;create-react-class&amp;#39;); var Greeting = createReactClass({ render: function() { return &amp;lt;h1&amp;gt;Hello, {this.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/react-without-jsx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/react-without-jsx/</guid>
      <description>React Without JSX # These docs are old and won’t be updated. Go to react.dev for the new React docs.
JSX is not a requirement for using React. Using React without JSX is especially convenient when you don’t want to set up compilation in your build environment.
Each JSX element is just syntactic sugar for calling React.createElement(component, props, ...children). So, anything you can do with JSX can also be done with just plain JavaScript.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/reconciliation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/reconciliation/</guid>
      <description>⭐ Reconciliation # React provides a declarative API so that you don’t have to worry about exactly what changes on every update. This makes writing applications a lot easier, but it might not be obvious how this is implemented within React. This article explains the choices we made in React’s “diffing” algorithm so that component updates are predictable while being fast enough for high-performance apps.
Motivation # When you use React, at a single point in time you can think of the render() function as creating a tree of React elements.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/refs-and-the-dom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/refs-and-the-dom/</guid>
      <description>🌵 Refs and the DOM # Refs provide a way to access DOM nodes or React elements created in the render method.
In the typical React dataflow, props are the only way that parent components interact with their children. To modify a child, you re-render it with new props. However, there are a few cases where you need to imperatively modify a child outside of the typical dataflow. The child to be modified could be an instance of a React component, or it could be a DOM element.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/render-props/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/render-props/</guid>
      <description>🧀 Render Props # These docs are old and won’t be updated. Go to react.dev for the new React docs.
Render props are used in modern React, but aren’t very common.
For many cases, they have been replaced by custom Hooks.
The term “render prop” refers to a technique for sharing code between React components using a prop whose value is a function.
A component with a render prop takes a function that returns a React element and calls it instead of implementing its own render logic.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/static-type-checking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/static-type-checking/</guid>
      <description>Static Type Checking # Static type checkers like Flow and TypeScript identify certain types of problems before you even run your code. They can also improve developer workflow by adding features like auto-completion. For this reason, we recommend using Flow or TypeScript instead of PropTypes for larger code bases.
Flow # Flow is a static type checker for your JavaScript code. It is developed at Facebook and is often used with React.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/strict-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/strict-mode/</guid>
      <description>🐸 Strict Mode # These docs are old and won’t be updated. Go to react.dev for the new React docs.
These new documentation pages teach modern React and include live examples:
StrictMode StrictMode is a tool for highlighting potential problems in an application. Like Fragment, StrictMode does not render any visible UI. It activates additional checks and warnings for its descendants.
Note:
Strict mode checks are run in development mode only; they do not impact the production build.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/typechecking-with-proptypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/typechecking-with-proptypes/</guid>
      <description>Typechecking With PropTypes # These docs are old and won’t be updated. Go to react.dev for the new React docs.
PropTypes aren’t commonly used in modern React. Use TypeScript for static type checking.
Note:
React.PropTypes has moved into a different package since React v15.5. Please use the prop-types library instead.
We provide a codemod script to automate the conversion.
As your app grows, you can catch a lot of bugs with typechecking.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/uncontrolled-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/uncontrolled-components/</guid>
      <description>Uncontrolled Components # These docs are old and won’t be updated. Go to react.dev for the new React docs.
These new documentation pages teach modern React and include live examples:
&amp;lt;input&amp;gt; &amp;lt;select&amp;gt; &amp;lt;textarea&amp;gt; In most cases, we recommend using controlled components to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/web-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/web-components/</guid>
      <description>🐸 Web Components # React and Web Components are built to solve different problems. Web Components provide strong encapsulation for reusable components, while React provides a declarative library that keeps the DOM in sync with your data. The two goals are complementary. As a developer, you are free to use React in your Web Components, or to use Web Components in React, or both.
Most people who use React don’t use Web Components, but you may want to, especially if you are using third-party UI components that are written using Web Components.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/installation/add-react-to-a-website/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/installation/add-react-to-a-website/</guid>
      <description>Add React to a Website # If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.
Note # You need to install Node.js for local development. Although you can try React online or with a simple HTML page, realistically most JavaScript tooling you’ll want to use for development requires Node.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/installation/cdn-links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/installation/cdn-links/</guid>
      <description>CDN Links # Both React and ReactDOM are available over a CDN.
&amp;lt;script crossorigin src=&amp;#34;https://unpkg.com/react@18/umd/react.development.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script crossorigin src=&amp;#34;https://unpkg.com/react-dom@18/umd/react-dom.development.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; The versions above are only meant for development, and are not suitable for production. Minified and optimized production versions of React are available at:
&amp;lt;script crossorigin src=&amp;#34;https://unpkg.com/react@18/umd/react.production.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script crossorigin src=&amp;#34;https://unpkg.com/react-dom@18/umd/react-dom.production.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; To load a specific version of react and react-dom, replace 18 with the version number.
Why the crossorigin Attribute? # If you serve React from a CDN, we recommend to keep the crossorigin attribute set:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/installation/create-a-new-react-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/installation/create-a-new-react-app/</guid>
      <description>Create a New React App # If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community. Frameworks provide features that most apps and sites eventually need, including routing, data fetching, and generating HTML.
Note # You need to install Node.js for local development. You can also choose to use Node.js in production, but you don’t have to.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/installation/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/installation/getting-started/</guid>
      <description>Getting Started # These docs are old and won’t be updated. Go to react.dev for the new React docs.
The new Quick Start teaches modern React and includes live examples.
This page is an overview of the React documentation and related resources.
React is a JavaScript library for building user interfaces. Learn what React is all about on our homepage or in the tutorial.
Try React Learn React Staying Informed Versioned Documentation Something Missing?</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/installation/release-channels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/installation/release-channels/</guid>
      <description>Release Channels # All stable builds of React go through a high level of testing and follow semantic versioning (semver). React also offers unstable release channels to encourage early feedback on experimental features. This page describes what you can expect from React releases.
Stable releases # Stable React releases (also known as “Latest” release channel) follow semantic versioning (semver) principles.
That means that with a version number x.y.z:
When releasing critical bug fixes, we make a patch release by changing the z number (ex: 15.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/components-and-props/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/components-and-props/</guid>
      <description>🌵 Components and Props # Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. This page provides an introduction to the idea of components. You can find a detailed component API reference here.
Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.
Function and Class Components # The simplest way to define a component is to write a JavaScript function:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/composition-vs-inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/composition-vs-inheritance/</guid>
      <description>🍕 Composition vs Inheritance # These docs are old and won’t be updated. Go to react.dev for the new React docs.
React has a powerful composition model, and we recommend using composition instead of inheritance to reuse code between components.
In this section, we will consider a few problems where developers new to React often reach for inheritance, and show how we can solve them with composition.
Containment # Some components don’t know their children ahead of time.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/conditional-rendering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/conditional-rendering/</guid>
      <description>Conditional Rendering # These docs are old and won’t be updated. Go to react.dev for the new React docs.
These new documentation pages teach modern React and include live examples:
Conditional Rendering In React, you can create distinct components that encapsulate behavior you need. Then, you can render only some of them, depending on the state of your application.
Conditional rendering in React works the same way conditions work in JavaScript.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/forms/</guid>
      <description>⭐ Forms # These docs are old and won’t be updated. Go to react.dev for the new React docs.
These new documentation pages teach modern React and include live examples:
&amp;lt;input&amp;gt; &amp;lt;select&amp;gt; &amp;lt;textarea&amp;gt; HTML form elements work a bit differently from other DOM elements in React, because form elements naturally keep some internal state. For example, this form in plain HTML accepts a single name:
&amp;lt;form&amp;gt; &amp;lt;label&amp;gt; Name: &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34; /&amp;gt; &amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Submit&amp;#34; /&amp;gt; &amp;lt;/form&amp;gt; This form has the default HTML form behavior of browsing to a new page when the user submits the form.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/handling-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/handling-events/</guid>
      <description>⭐ Handling Events # These docs are old and won’t be updated. Go to react.dev for the new React docs.
These new documentation pages teach modern React and include live examples:
Responding to Events Handling events with React elements is very similar to handling events on DOM elements. There are some syntax differences:
React events are named using camelCase, rather than lowercase. With JSX you pass a function as the event handler, rather than a string.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/introducing-jsx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/introducing-jsx/</guid>
      <description>⭐ Introducing JSX # Consider this variable declaration:
const element = &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;; This funny tag syntax is neither a string nor HTML.
It is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.
JSX produces React “elements”.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/lifting-state-up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/lifting-state-up/</guid>
      <description>🌵 Lifting State Up # Often, several components need to reflect the same changing data. We recommend lifting the shared state up to their closest common ancestor. Let’s see how this works in action.
In this section, we will create a temperature calculator that calculates whether the water would boil at a given temperature.
We will start with a component called BoilingVerdict. It accepts the celsius temperature as a prop, and prints whether it is enough to boil the water:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/lists-and-keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/lists-and-keys/</guid>
      <description>🌵 Lists and Keys # These docs are old and won’t be updated. Go to react.dev for the new React docs.
These new documentation pages teach modern React and include live examples:
Rendering Lists First, let’s review how you transform lists in JavaScript.
Given the code below, we use the map() function to take an array of numbers and double their values. We assign the new array returned by map() to the variable doubled and log it:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/rendering-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/rendering-elements/</guid>
      <description>Rendering Elements # Elements are the smallest building blocks of React apps.
An element describes what you want to see on the screen:
const element = &amp;lt;h1&amp;gt;Hello, world&amp;lt;/h1&amp;gt;; Unlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match the React elements.
Note:
One might confuse elements with a more widely known concept of “components”. We will introduce components in the next section.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/state-and-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/state-and-lifecycle/</guid>
      <description>🌵 State and Lifecycle # This page introduces the concept of state and lifecycle in a React component. You can find a detailed component API reference here.
Consider the ticking clock example from one of the previous sections. In Rendering Elements, we have only learned one way to update the UI. We call root.render() to change the rendered output:
const root = ReactDOM.createRoot(document.getElementById(&amp;#39;root&amp;#39;)); function tick() { const element = ( &amp;lt;div&amp;gt; &amp;lt;h1&amp;gt;Hello, world!</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/thinking-in-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/basics/main-concepts/thinking-in-react/</guid>
      <description>⭐ Thinking in React # React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/dom-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/dom-elements/</guid>
      <description>🌵 DOM Elements # React implements a browser-independent DOM system for performance and cross-browser compatibility. We took the opportunity to clean up a few rough edges in browser DOM implementations.
In React, all DOM properties and attributes (including event handlers) should be camelCased. For example, the HTML attribute tabindex corresponds to the attribute tabIndex in React. The exception is aria-* and data-* attributes, which should be lowercased. For example, you can keep aria-label as aria-label.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/javascript-environment-requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/javascript-environment-requirements/</guid>
      <description>JavaScript Environment Requirements # React 18 supports all modern browsers (Edge, Firefox, Chrome, Safari, etc).
If you support older browsers and devices such as Internet Explorer which do not provide modern browser features natively or have non-compliant implementations, consider including a global polyfill in your bundled application.
Here is a list of the modern features React 18 uses:
Promise Symbol Object.assign The correct polyfill for these features depend on your environment.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/legacy-context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/legacy-context/</guid>
      <description>Legacy Context # Note:
The legacy context API will be removed in a future major version. Use the new context API introduced with version 16.3. The legacy API will continue working for all 16.x releases.
How To Use Context # This section documents a legacy API. See the new API.
Suppose you have a structure like:
class Button extends React.Component { render() { return ( &amp;lt;button style={{background: this.props.color}}&amp;gt; {this.props.children} &amp;lt;/button&amp;gt; ); } } class Message extends React.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/react-top-level-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/react-top-level-api/</guid>
      <description>🍕 React Top-Level API # React is the entry point to the React library. If you load React from a &amp;lt;script&amp;gt; tag, these top-level APIs are available on the React global. If you use ES6 with npm, you can write import React from &#39;react&#39;. If you use ES5 with npm, you can write var React = require(&#39;react&#39;).
Overview # Components # React components let you split the UI into independent, reusable pieces, and think about each piece in isolation.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/react.component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/react.component/</guid>
      <description>🍕 React.Component # These docs are old and won’t be updated. Go to react.dev for the new React docs.
These new documentation pages teach modern React:
React.Component This page contains a detailed API reference for the React component class definition. It assumes you’re familiar with fundamental React concepts, such as Components and Props, as well as State and Lifecycle. If you’re not, read them first.
Overview # React lets you define components as classes or functions.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/reactdom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/reactdom/</guid>
      <description>⭐ ReactDOM # The react-dom package provides DOM-specific methods that can be used at the top level of your app and as an escape hatch to get outside the React model if you need to.
import * as ReactDOM from &amp;#39;react-dom&amp;#39;; If you use ES5 with npm, you can write:
var ReactDOM = require(&amp;#39;react-dom&amp;#39;); The react-dom package also provides modules specific to client and server apps:
react-dom/client react-dom/server Overview # The react-dom package exports these methods:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/reactdomclient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/reactdomclient/</guid>
      <description>ReactDOMClient # The react-dom/client package provides client-specific methods used for initializing an app on the client. Most of your components should not need to use this module.
import * as ReactDOM from &amp;#39;react-dom/client&amp;#39;; If you use ES5 with npm, you can write:
var ReactDOM = require(&amp;#39;react-dom/client&amp;#39;); Overview # The following methods can be used in client environments:
createRoot() hydrateRoot() Browser Support # React supports all modern browsers, although some polyfills are required for older versions.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/reactdomserver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/reactdomserver/</guid>
      <description>ReactDOMServer # The ReactDOMServer object enables you to render components to static markup. Typically, it’s used on a Node server:
// ES modules import * as ReactDOMServer from &amp;#39;react-dom/server&amp;#39;; // CommonJS var ReactDOMServer = require(&amp;#39;react-dom/server&amp;#39;); Overview # These methods are only available in the environments with Node.js Streams:
renderToPipeableStream() renderToNodeStream() (Deprecated) renderToStaticNodeStream() These methods are only available in the environments with Web Streams (this includes browsers, Deno, and some modern edge runtimes):</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/syntheticevent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/syntheticevent/</guid>
      <description>SyntheticEvent # This reference guide documents the SyntheticEvent wrapper that forms part of React’s Event System. See the Handling Events guide to learn more.
Overview # Your event handlers will be passed instances of SyntheticEvent, a cross-browser wrapper around the browser’s native event. It has the same interface as the browser’s native event, including stopPropagation() and preventDefault(), except the events work identically across all browsers.
If you find that you need the underlying browser event for some reason, simply use the nativeEvent attribute to get it.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/test-renderer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/test-renderer/</guid>
      <description>Test Renderer # Importing
import TestRenderer from &amp;#39;react-test-renderer&amp;#39;; // ES6 const TestRenderer = require(&amp;#39;react-test-renderer&amp;#39;); // ES5 with npm Overview # This package provides a React renderer that can be used to render React components to pure JavaScript objects, without depending on the DOM or a native mobile environment.
Essentially, this package makes it easy to grab a snapshot of the platform view hierarchy (similar to a DOM tree) rendered by a React DOM or React Native component without using a browser or jsdom.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/test-utilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/api-reference/test-utilities/</guid>
      <description>Test Utilities # Importing
import ReactTestUtils from &amp;#39;react-dom/test-utils&amp;#39;; // ES6 var ReactTestUtils = require(&amp;#39;react-dom/test-utils&amp;#39;); // ES5 with npm Overview # ReactTestUtils makes it easy to test React components in the testing framework of your choice. At Facebook we use Jest for painless JavaScript testing. Learn how to get started with Jest through the Jest website’s React Tutorial.
Note:
We recommend using React Testing Library which is designed to enable and encourage writing tests that use your components as the end users do.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/ajax-and-apis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/ajax-and-apis/</guid>
      <description>AJAX and APIs # How can I make an AJAX call? # You can use any AJAX library you like with React. Some popular ones are Axios, jQuery AJAX, and the browser built-in window.fetch.
Where in the component lifecycle should I make an AJAX call? # You should populate data with AJAX calls in the componentDidMount lifecycle method. This is so you can use setState to update your component when the data is retrieved.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/babel-jsx-and-build-steps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/babel-jsx-and-build-steps/</guid>
      <description>🍕 Babel, JSX, and Build Steps # Do I need to use JSX with React? # No! Check out “React Without JSX” to learn more.
Do I need to use ES6 (+) with React? # No! Check out “React Without ES6” to learn more.
How can I write comments in JSX? # &amp;lt;div&amp;gt; {/* Comment goes here */} Hello, {name}! &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; {/* It also works for multi-line comments. */} Hello, {name}!</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/component-state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/component-state/</guid>
      <description>🌵 Component State # What does setState do? # setState() schedules an update to a component’s state object. When state changes, the component responds by re-rendering.
What is the difference between state and props? # props (short for “properties”) and state are both plain JavaScript objects. While both hold information that influences the output of render, they are different in one important way: props get passed to the component (similar to function parameters) whereas state is managed within the component (similar to variables declared within a function).</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/file-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/file-structure/</guid>
      <description>⭐ File Structure # Is there a recommended way to structure React projects? # React doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.
Grouping by features or routes
One common way to structure projects is to locate CSS, JS, and tests together inside folders grouped by feature or route.
common/ Avatar.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/passing-functions-to-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/passing-functions-to-components/</guid>
      <description>🌵 Passing Functions to Components # How do I pass an event handler (like onClick) to a component? # Pass event handlers and other functions as props to child components:
&amp;lt;button onClick={this.handleClick}&amp;gt; If you need to have access to the parent component in the handler, you also need to bind the function to the component instance (see below).
How do I bind a function to a component instance? # There are several ways to make sure functions have access to component attributes like this.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/styling-and-css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/styling-and-css/</guid>
      <description>🌵 Styling and CSS # How do I add CSS classes to components? # Pass a string as the className prop:
render() { return &amp;lt;span className=&amp;#34;menu navigation-menu&amp;#34;&amp;gt;Menu&amp;lt;/span&amp;gt; } It is common for CSS classes to depend on the component props or state:
render() { let className = &amp;#39;menu&amp;#39;; if (this.props.isActive) { className += &amp;#39; menu-active&amp;#39;; } return &amp;lt;span className={className}&amp;gt;Menu&amp;lt;/span&amp;gt; } Tip
If you often find yourself writing code like this, classnames package can simplify it.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/versioning-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/versioning-policy/</guid>
      <description>Versioning Policy # React follows semantic versioning (semver) principles.
That means that with a version number x.y.z:
When releasing critical bug fixes, we make a patch release by changing the z number (ex: 15.6.2 to 15.6.3). When releasing new features or non-critical fixes, we make a minor release by changing the y number (ex: 15.6.2 to 15.7.0). When releasing breaking changes, we make a major release by changing the x number (ex: 15.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/virtual-dom-and-internals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/faq/virtual-dom-and-internals/</guid>
      <description>🍕 Virtual DOM and Internals # What is the Virtual DOM? # The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. This process is called reconciliation.
This approach enables the declarative API of React: You tell React what state you want the UI to be in, and it makes sure the DOM matches that state.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/building-your-own-hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/building-your-own-hooks/</guid>
      <description>💘 Building Your Own Hooks # Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.
Building your own Hooks lets you extract component logic into reusable functions.
When we were learning about using the Effect Hook, we saw this component from a chat application that displays a message indicating whether a friend is online or offline:
import React, { useState, useEffect } from &amp;#39;react&amp;#39;; function FriendStatus(props) { const [isOnline, setIsOnline] = useState(null); useEffect(() =&amp;gt; { function handleStatusChange(status) { setIsOnline(status.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/hooks-api-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/hooks-api-reference/</guid>
      <description>Hooks API Reference # These docs are old and won’t be updated. Go to react.dev for the new React docs.
These new documentation pages teach modern React:
react: Hooks Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.
This page describes the APIs for the built-in Hooks in React.
If you’re new to Hooks, you might want to check out the overview first.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/hooks-at-a-glance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/hooks-at-a-glance/</guid>
      <description>Hooks at a Glance # Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.
Hooks are backwards-compatible. This page provides an overview of Hooks for experienced React users. This is a fast-paced overview. If you get confused, look for a yellow box like this:
Detailed Explanation
Read the Motivation to learn why we’re introducing Hooks to React.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/hooks-faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/hooks-faq/</guid>
      <description>🌵 Hooks FAQ # These docs are old and won’t be updated. Go to react.dev for the new React docs.
The new documentation pages teaches React with Hooks.
Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.
This page answers some of the frequently asked questions about Hooks.
Adoption Strategy Which versions of React include Hooks? Do I need to rewrite all my class components?</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/introducing-hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/introducing-hooks/</guid>
      <description>Introducing Hooks # Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.
import React, { useState } from &amp;#39;react&amp;#39;; function Example() { // Declare a new state variable, which we&amp;#39;ll call &amp;#34;count&amp;#34; const [count, setCount] = useState(0); return ( &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt; &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt; Click me &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ); } This new function useState is the first “Hook” we’ll learn about, but this example is just a teaser.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/rules-of-hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/rules-of-hooks/</guid>
      <description>🌵 Rules of Hooks # Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.
Hooks are JavaScript functions, but you need to follow two rules when using them. We provide a linter plugin to enforce these rules automatically:
Only Call Hooks at the Top Level # Don’t call Hooks inside loops, conditions, or nested functions. Instead, always use Hooks at the top level of your React function, before any early returns.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usecallback/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usecallback/</guid>
      <description>🍕 Usecallback # useCallback # const memoizedCallback = useCallback( () =&amp;gt; { doSomething(a, b); }, [a, b], ); Returns a memoized callback.
Pass an inline callback and an array of dependencies. useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usecontext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usecontext/</guid>
      <description>useContext # useContext # const value = useContext(MyContext); Accepts a context object (the value returned from React.createContext) and returns the current context value for that context. The current context value is determined by the value prop of the nearest &amp;lt;MyContext.Provider&amp;gt; above the calling component in the tree.
When the nearest &amp;lt;MyContext.Provider&amp;gt; above the component updates, this Hook will trigger a rerender with the latest context value passed to that MyContext provider.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usedebugvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usedebugvalue/</guid>
      <description>useDebugValue # useDebugValue # useDebugValue(value) useDebugValue can be used to display a label for custom hooks in React DevTools.
For example, consider the useFriendStatus custom Hook described in “Building Your Own Hooks”:
function useFriendStatus(friendID) { const [isOnline, setIsOnline] = useState(null); // ... // Show a label in DevTools next to this Hook // e.g. &amp;#34;FriendStatus: Online&amp;#34; useDebugValue(isOnline ? &amp;#39;Online&amp;#39; : &amp;#39;Offline&amp;#39;); return isOnline; } Tip
We don’t recommend adding debug values to every custom Hook.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usedeferredvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usedeferredvalue/</guid>
      <description>useDeferredValue # useDeferredValue # const deferredValue = useDeferredValue(value); useDeferredValue accepts a value and returns a new copy of the value that will defer to more urgent updates. If the current render is the result of an urgent update, like user input, React will return the previous value and then render the new value after the urgent render has completed.
This hook is similar to user-space hooks which use debouncing or throttling to defer updates.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/useeffect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/useeffect/</guid>
      <description>🌵 useEffect # useEffect # useEffect(didUpdate); Accepts a function that contains imperative, possibly effectful code.
Mutations, subscriptions, timers, logging, and other side effects are not allowed inside the main body of a function component (referred to as React’s render phase). Doing so will lead to confusing bugs and inconsistencies in the UI.
Instead, use useEffect. The function passed to useEffect will run after the render is committed to the screen.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/useid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/useid/</guid>
      <description>useId # useId # const id = useId(); useId is a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatches.
Note
useId is not for generating keys in a list. Keys should be generated from your data.
For a basic example, pass the id directly to the elements that need it:
function Checkbox() { const id = useId(); return ( &amp;lt;&amp;gt; &amp;lt;label htmlFor={id}&amp;gt;Do you like React?</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/useimperativehandle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/useimperativehandle/</guid>
      <description>useImperativeHandle # useImperativeHandle # useImperativeHandle(ref, createHandle, [deps]) useImperativeHandle customizes the instance value that is exposed to parent components when using ref. As always, imperative code using refs should be avoided in most cases. useImperativeHandle should be used with forwardRef:
function FancyInput(props, ref) { const inputRef = useRef(); useImperativeHandle(ref, () =&amp;gt; ({ focus: () =&amp;gt; { inputRef.current.focus(); } })); return &amp;lt;input ref={inputRef} ... /&amp;gt;; } FancyInput = forwardRef(FancyInput); In this example, a parent component that renders &amp;lt;FancyInput ref={inputRef} /&amp;gt; would be able to call inputRef.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/useinsertioneffect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/useinsertioneffect/</guid>
      <description>useInsertionEffect # useInsertionEffect # useInsertionEffect(didUpdate); The signature is identical to useEffect, but it fires synchronously before all DOM mutations. Use this to inject styles into the DOM before reading layout in useLayoutEffect. Since this hook is limited in scope, this hook does not have access to refs and cannot schedule updates.
Note:
useInsertionEffect should be limited to css-in-js library authors. Prefer useEffect or useLayoutEffect instead.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/uselayouteffect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/uselayouteffect/</guid>
      <description>useLayoutEffect # useLayoutEffect # The signature is identical to useEffect, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint.
Prefer the standard useEffect when possible to avoid blocking visual updates.
Tip
If you’re migrating code from a class component, note useLayoutEffect fires in the same phase as componentDidMount and componentDidUpdate.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usememo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usememo/</guid>
      <description>🍕 useMemo # useMemo # const memoizedValue = useMemo(() =&amp;gt; computeExpensiveValue(a, b), [a, b]); Returns a memoized value.
Pass a “create” function and an array of dependencies. useMemo will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.
Remember that the function passed to useMemo runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usereducer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usereducer/</guid>
      <description>useReducer # useReducer # const [state, dispatch] = useReducer(reducer, initialArg, init); An alternative to useState. Accepts a reducer of type (state, action) =&amp;gt; newState, and returns the current state paired with a dispatch method. (If you’re familiar with Redux, you already know how this works.)
useReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/useref/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/useref/</guid>
      <description>🍕 useRef # useRef # const refContainer = useRef(initialValue); useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component.
A common use case is to access a child imperatively:
function TextInputWithFocusButton() { const inputEl = useRef(null); const onButtonClick = () =&amp;gt; { // `current` points to the mounted text input element inputEl.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usestate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usestate/</guid>
      <description>🌵 useState # useState # const [state, setState] = useState(initialState); Returns a stateful value, and a function to update it.
During the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).
The setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component.
setState(newState); During subsequent re-renders, the first value returned by useState will always be the most recent state after applying updates.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usesyncexternalstore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usesyncexternalstore/</guid>
      <description>useSyncExternalStore # useSyncExternalStore # const state = useSyncExternalStore(subscribe, getSnapshot[, getServerSnapshot]); useSyncExternalStore is a hook recommended for reading and subscribing from external data sources in a way that’s compatible with concurrent rendering features like selective hydration and time slicing.
This method returns the value of the store and accepts three arguments:
subscribe: function to register a callback that is called whenever the store changes. getSnapshot: function that returns the current value of the store.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usetransition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/usetransition/</guid>
      <description> useTransition # useTransition # const [isPending, startTransition] = useTransition(); Returns a stateful value for the pending state of the transition, and a function to start it.
startTransition lets you mark updates in the provided callback as transitions:
startTransition(() =&amp;gt; { setCount(count + 1); }) isPending indicates when a transition is active to show a pending state:
function App() { const [isPending, startTransition] = useTransition(); const [count, setCount] = useState(0); function handleClick() { startTransition(() =&amp;gt; { setCount(c =&amp;gt; c + 1); }) } return ( &amp;lt;div&amp;gt; {isPending &amp;amp;&amp;amp; &amp;lt;Spinner /&amp;gt;} &amp;lt;button onClick={handleClick}&amp;gt;{count}&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ); } </description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/using-the-effect-hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/using-the-effect-hook/</guid>
      <description>🌵 Using the Effect Hook # Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.
The Effect Hook lets you perform side effects in function components:
import React, { useState, useEffect } from &amp;#39;react&amp;#39;; function Example() { const [count, setCount] = useState(0); // Similar to componentDidMount and componentDidUpdate: useEffect(() =&amp;gt; { // Update the document title using the browser API document.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/using-the-state-hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/hooks/using-the-state-hook/</guid>
      <description>🌵 Using the State Hook # Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.
The introduction page used this example to get familiar with Hooks:
import React, { useState } from &amp;#39;react&amp;#39;; function Example() { // Declare a new state variable, which we&amp;#39;ll call &amp;#34;count&amp;#34; const [count, setCount] = useState(0); return ( &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt; &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt; Click me &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ); } We’ll start learning about Hooks by comparing this code to an equivalent class example.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/testing/testing-environments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/testing/testing-environments/</guid>
      <description>Testing Environments # This document goes through the factors that can affect your environment and recommendations for some scenarios.
Test runners # Test runners like Jest, mocha, ava let you write test suites as regular JavaScript, and run them as part of your development process. Additionally, test suites are run as part of continuous integration.
Jest is widely compatible with React projects, supporting features like mocked modules and timers, and jsdom support.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/testing/testing-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/testing/testing-overview/</guid>
      <description>Testing Overview # You can test React components similar to testing other JavaScript code.
There are a few ways to test React components. Broadly, they divide into two categories:
Rendering component trees in a simplified test environment and asserting on their output. Running a complete app in a realistic browser environment (also known as “end-to-end” tests). This documentation section focuses on testing strategies for the first case. While full end-to-end tests can be very useful to prevent regressions to important workflows, such tests are not concerned with React components in particular, and are out of the scope of this section.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/testing/testing-recipes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/frequently-used/testing/testing-recipes/</guid>
      <description>⭐ Testing Recipes # Common testing patterns for React components.
Note:
This page assumes you’re using Jest as a test runner. If you use a different test runner, you may need to adjust the API, but the overall shape of the solution will likely be the same. Read more details on setting up a testing environment on the Testing Environments page.
On this page, we will primarily use function components.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/bundlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/bundlers/</guid>
      <description>Bundlers # Bundlers take JavaScript and CSS code written as separate modules (often hundreds of them), and combine them together into a few files better optimized for the browsers. Some bundlers commonly used in React applications include Webpack and Browserify.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/cdn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/cdn/</guid>
      <description>CDN # CDN stands for Content Delivery Network. CDNs deliver cached, static content from a network of servers across the globe.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/compilers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/compilers/</guid>
      <description>Compilers # A JavaScript compiler takes JavaScript code, transforms it and returns JavaScript code in a different format. The most common use case is to take ES6 syntax and transform it into syntax that older browsers are capable of interpreting. Babel is the compiler most commonly used with React.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/components/</guid>
      <description>🌵 Components # React components are small, reusable pieces of code that return a React element to be rendered to the page. The simplest version of React component is a plain JavaScript function that returns a React element:
function Welcome(props) { return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;; } Components can also be ES6 classes:
class Welcome extends React.Component { render() { return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;; } } Components can be broken down into distinct pieces of functionality and used within other components.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/controlled-vs.-uncontrolled-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/controlled-vs.-uncontrolled-components/</guid>
      <description>Controlled vs. Uncontrolled Components # React has two different approaches to dealing with form inputs.
An input form element whose value is controlled by React is called a controlled component. When a user enters data into a controlled component a change event handler is triggered and your code decides whether the input is valid (by re-rendering with the updated value). If you do not re-render then the form element will remain unchanged.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/elements/</guid>
      <description>Elements # React elements are the building blocks of React applications. One might confuse elements with a more widely known concept of “components”. An element describes what you want to see on the screen. React elements are immutable.
const element = &amp;lt;h1&amp;gt;Hello, world&amp;lt;/h1&amp;gt;; Typically, elements are not used directly, but get returned from components.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/es6-es2015-es2016-etc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/es6-es2015-es2016-etc/</guid>
      <description>ES6, ES2015, ES2016, etc # These acronyms all refer to the most recent versions of the ECMAScript Language Specification standard, which the JavaScript language is an implementation of. The ES6 version (also known as ES2015) includes many additions to the previous versions such as: arrow functions, classes, template literals, let and const statements. You can learn more about specific versions here.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/events/</guid>
      <description> ⭐ Events # Handling events with React elements has some syntactic differences:
React event handlers are named using camelCase, rather than lowercase. With JSX you pass a function as the event handler, rather than a string. </description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/jsx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/jsx/</guid>
      <description>JSX # JSX is a syntax extension to JavaScript. It is similar to a template language, but it has full power of JavaScript. JSX gets compiled to React.createElement() calls which return plain JavaScript objects called “React elements”. To get a basic introduction to JSX see the docs here and find a more in-depth tutorial on JSX here.
React DOM uses camelCase property naming convention instead of HTML attribute names. For example, tabindex becomes tabIndex in JSX.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/keys/</guid>
      <description>🌵 Keys # A “key” is a special string attribute you need to include when creating arrays of elements. Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside an array to give the elements a stable identity.
Keys only need to be unique among sibling elements in the same array. They don’t need to be unique across the whole application or even a single component.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/lifecycle-methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/lifecycle-methods/</guid>
      <description>Lifecycle Methods # Lifecycle methods are custom functionality that gets executed during the different phases of a component. There are methods available when the component gets created and inserted into the DOM (mounting), when the component updates, and when the component gets unmounted or removed from the DOM.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/package-managers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/package-managers/</guid>
      <description>Package Managers # Package managers are tools that allow you to manage dependencies in your project. npm and Yarn are two package managers commonly used in React applications. Both of them are clients for the same npm package registry.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/props.children/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/props.children/</guid>
      <description> props.children # props.children is available on every component. It contains the content between the opening and closing tags of a component. For example:
&amp;lt;Welcome&amp;gt;Hello world!&amp;lt;/Welcome&amp;gt; The string Hello world! is available in props.children in the Welcome component:
function Welcome(props) { return &amp;lt;p&amp;gt;{props.children}&amp;lt;/p&amp;gt;; } For components defined as classes, use this.props.children:
class Welcome extends React.Component { render() { return &amp;lt;p&amp;gt;{this.props.children}&amp;lt;/p&amp;gt;; } } </description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/props/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/props/</guid>
      <description>🌵 props # props are inputs to a React component. They are data passed down from a parent component to a child component.
Remember that props are readonly. They should not be modified in any way:
// Wrong! props.number = 42; If you need to modify some value in response to user input or a network response, use state instead.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/reconciliation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/reconciliation/</guid>
      <description>🍕 Reconciliation # When a component’s props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called “reconciliation”.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/refs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/refs/</guid>
      <description>🍕 Refs # React supports a special attribute that you can attach to any component. The ref attribute can be an object created by React.createRef() function or a callback function, or a string (in legacy API). When the ref attribute is a callback function, the function receives the underlying DOM element or class instance (depending on the type of element) as its argument. This allows you to have direct access to the DOM element or component instance.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/single-page-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/single-page-application/</guid>
      <description>Single-page Application # A single-page application is an application that loads a single HTML page and all the necessary assets (such as JavaScript and CSS) required for the application to run. Any interactions with the page or subsequent pages do not require a round trip to the server which means the page is not reloaded.
Though you may build a single-page application in React, it is not a requirement. React can also be used for enhancing small parts of existing websites with additional interactivity.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/glossary/state/</guid>
      <description>🌵 state # A component needs state when some data associated with it changes over time. For example, a Checkbox component might need isChecked in its state, and a NewsFeed component might want to keep track of fetchedPosts in its state.
The most important difference between state and props is that props are passed from a parent component, but state is managed by the component itself. A component cannot change its props, but it can change its state.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/componentdidcatch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/componentdidcatch/</guid>
      <description>componentDidCatch() # componentDidCatch() # componentDidCatch(error, info) This lifecycle is invoked after an error has been thrown by a descendant component. It receives two parameters:
error - The error that was thrown. info - An object with a componentStack key containing information about which component threw the error. componentDidCatch() is called during the “commit” phase, so side-effects are permitted. It should be used for things like logging errors:
class ErrorBoundary extends React.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/componentdidmount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/componentdidmount/</guid>
      <description>⭐ componentDidMount() # componentDidMount() # componentDidMount() componentDidMount() is invoked immediately after a component is mounted (inserted into the tree). Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request.
This method is a good place to set up any subscriptions. If you do that, don’t forget to unsubscribe in componentWillUnmount().
You may call setState() immediately in componentDidMount().</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/componentdidupdate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/componentdidupdate/</guid>
      <description>⭐ componentDidUpdate() # componentDidUpdate() # componentDidUpdate(prevProps, prevState, snapshot) componentDidUpdate() is invoked immediately after updating occurs. This method is not called for the initial render.
Use this as an opportunity to operate on the DOM when the component has been updated. This is also a good place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed).</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/componentwillunmount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/componentwillunmount/</guid>
      <description>componentWillUnmount() # componentWillUnmount() # componentWillUnmount() componentWillUnmount() is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in componentDidMount().
You should not call setState() in componentWillUnmount() because the component will never be re-rendered. Once a component instance is unmounted, it will never be mounted again.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/constructor/</guid>
      <description>constructor() # constructor() # constructor(props) If you don’t initialize state and you don’t bind methods, you don’t need to implement a constructor for your React component.
The constructor for a React component is called before it is mounted. When implementing the constructor for a React.Component subclass, you should call super(props) before any other statement. Otherwise, this.props will be undefined in the constructor, which can lead to bugs.
Typically, in React constructors are only used for two purposes:</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/defaultprop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/defaultprop/</guid>
      <description>defaultProp # defaultProps # defaultProps can be defined as a property on the component class itself, to set the default props for the class. This is used for undefined props, but not for null props. For example:
class CustomButton extends React.Component { // ... } CustomButton.defaultProps = { color: &amp;#39;blue&amp;#39; }; If props.color is not provided, it will be set by default to &#39;blue&#39;:
render() { return &amp;lt;CustomButton /&amp;gt; ; // props.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/displayname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/displayname/</guid>
      <description>displayName # displayName # The displayName string is used in debugging messages. Usually, you don’t need to set it explicitly because it’s inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component, see Wrap the Display Name for Easy Debugging for details.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/forceupdate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/forceupdate/</guid>
      <description>forceUpdate() # forceUpdate() # component.forceUpdate(callback) By default, when your component’s state or props change, your component will re-render. If your render() method depends on some other data, you can tell React that the component needs re-rendering by calling forceUpdate().
Calling forceUpdate() will cause render() to be called on the component, skipping shouldComponentUpdate(). This will trigger the normal lifecycle methods for child components, including the shouldComponentUpdate() method of each child. React will still only update the DOM if the markup changes.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/getsnapshotbeforeupdate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/getsnapshotbeforeupdate/</guid>
      <description>getSnapshotBeforeUpdate() # getSnapshotBeforeUpdate() # getSnapshotBeforeUpdate(prevProps, prevState) getSnapshotBeforeUpdate() is invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture some information from the DOM (e.g. scroll position) before it is potentially changed. Any value returned by this lifecycle method will be passed as a parameter to componentDidUpdate().
This use case is not common, but it may occur in UIs like a chat thread that need to handle scroll position in a special way.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/props/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/props/</guid>
      <description>🌵 props # props # this.props contains the props that were defined by the caller of this component. See Components and Props for an introduction to props.
In particular, this.props.children is a special prop, typically defined by the child tags in the JSX expression rather than in the tag itself.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/render/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/render/</guid>
      <description>⭐ render() # render() # render() The render() method is the only required method in a class component.
When called, it should examine this.props and this.state and return one of the following types:
React elements. Typically created via JSX. For example, &amp;lt;div /&amp;gt; and &amp;lt;MyComponent /&amp;gt; are React elements that instruct React to render a DOM node, or another user-defined component, respectively. Arrays and fragments. Let you return multiple elements from render.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/setstate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/setstate/</guid>
      <description>setState() # setState() # setState(updater[, callback]) setState() enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses.
Think of setState() as a request rather than an immediate command to update the component. For better perceived performance, React may delay it, and then update several components in a single pass.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/shouldcomponentupdate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/shouldcomponentupdate/</guid>
      <description>shouldComponentUpdate() # shouldComponentUpdate() # shouldComponentUpdate(nextProps, nextState) Use shouldComponentUpdate() to let React know if a component’s output is not affected by the current change in state or props. The default behavior is to re-render on every state change, and in the vast majority of cases you should rely on the default behavior.
shouldComponentUpdate() is invoked before rendering when new props or state are being received. Defaults to true. This method is not called for the initial render or when forceUpdate() is used.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/state/</guid>
      <description>🌵 state # state # The state contains data specific to this component that may change over time. The state is user-defined, and it should be a plain JavaScript object.
If some value isn’t used for rendering or data flow (for example, a timer ID), you don’t have to put it in the state. Such values can be defined as fields on the component instance.
See State and Lifecycle for more information about the state.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/static-getderivedstatefromerror/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/static-getderivedstatefromerror/</guid>
      <description>static getDerivedStateFromError() # static getDerivedStateFromError() # static getDerivedStateFromError(error) This lifecycle is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.
class ErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false }; } static getDerivedStateFromError(error) { // Update state so the next render will show the fallback UI.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/static-getderivedstatefromprops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/static-getderivedstatefromprops/</guid>
      <description>static getDerivedStateFromProps() # static getDerivedStateFromProps() # static getDerivedStateFromProps(props, state) getDerivedStateFromProps is invoked right before calling the render method, both on the initial mount and on subsequent updates. It should return an object to update the state, or null to update nothing.
This method exists for rare use cases where the state depends on changes in props over time. For example, it might be handy for implementing a &amp;lt;Transition&amp;gt; component that compares its previous and next children to decide which of them to animate in and out.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/unsafe_componentwillmount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/unsafe_componentwillmount/</guid>
      <description>UNSAFE_componentWillMount() # UNSAFE_componentWillMount() # UNSAFE_componentWillMount() Note
This lifecycle was previously named componentWillMount. That name will continue to work until version 17. Use the rename-unsafe-lifecycles codemod to automatically update your components.
UNSAFE_componentWillMount() is invoked just before mounting occurs. It is called before render(), therefore calling setState() synchronously in this method will not trigger an extra rendering. Generally, we recommend using the constructor() instead for initializing state.
Avoid introducing any side-effects or subscriptions in this method.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/unsafe_componentwillreceiveprops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/unsafe_componentwillreceiveprops/</guid>
      <description>UNSAFE_componentWillReceiveProps() # UNSAFE_componentWillReceiveProps() # UNSAFE_componentWillReceiveProps(nextProps) Note
This lifecycle was previously named componentWillReceiveProps. That name will continue to work until version 17. Use the rename-unsafe-lifecycles codemod to automatically update your components.
Note:
Using this lifecycle method often leads to bugs and inconsistencies
If you need to perform a side effect (for example, data fetching or an animation) in response to a change in props, use componentDidUpdate lifecycle instead. If you used componentWillReceiveProps for re-computing some data only when a prop changes, use a memoization helper instead.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/unsafe_componentwillupdate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/component/unsafe_componentwillupdate/</guid>
      <description>UNSAFE_componentWillUpdate() # UNSAFE_componentWillUpdate() # UNSAFE_componentWillUpdate(nextProps, nextState) Note
This lifecycle was previously named componentWillUpdate. That name will continue to work until version 17. Use the rename-unsafe-lifecycles codemod to automatically update your components.
UNSAFE_componentWillUpdate() is invoked just before rendering when new props or state are being received. Use this as an opportunity to perform preparation before an update occurs. This method is not called for the initial render.
Note that you cannot call this.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/class.contexttype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/class.contexttype/</guid>
      <description>Class.contextType # Class.contextType # class MyClass extends React.Component { componentDidMount() { let value = this.context; /* perform a side-effect at mount using the value of MyContext */ } componentDidUpdate() { let value = this.context; /* ... */ } componentWillUnmount() { let value = this.context; /* ... */ } render() { let value = this.context; /* render something based on the value of MyContext */ } } MyClass.contextType = MyContext; The contextType property on a class can be assigned a Context object created by React.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/context.consumer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/context.consumer/</guid>
      <description>Context.Consumer # Context.Consumer # &amp;lt;MyContext.Consumer&amp;gt; {value =&amp;gt; /* render something based on the context value */} &amp;lt;/MyContext.Consumer&amp;gt; A React component that subscribes to context changes. Using this component lets you subscribe to a context within a function component.
Requires a function as a child. The function receives the current context value and returns a React node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/context.displayname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/context.displayname/</guid>
      <description> Context.displayName # Context.displayName # Context object accepts a displayName string property. React DevTools uses this string to determine what to display for the context.
For example, the following component will appear as MyDisplayName in the DevTools:
const MyContext = React.createContext(/* some value */); MyContext.displayName = &amp;#39;MyDisplayName&amp;#39;; &amp;lt;MyContext.Provider&amp;gt; // &amp;#34;MyDisplayName.Provider&amp;#34; in DevTools &amp;lt;MyContext.Consumer&amp;gt; // &amp;#34;MyDisplayName.Consumer&amp;#34; in DevTools </description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/context.provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/context.provider/</guid>
      <description>🍕 Context.Provider # Context.Provider # &amp;lt;MyContext.Provider value={/* some value */}&amp;gt; Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes.
The Provider component accepts a value prop to be passed to consuming components that are descendants of this Provider. One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree.
All consumers that are descendants of a Provider will re-render whenever the Provider’s value prop changes.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/createportal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/createportal/</guid>
      <description>createPortal() # createPortal() # createPortal(child, container) Creates a portal. Portals provide a way to render children into a DOM node that exists outside the hierarchy of the DOM component.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/createroot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/createroot/</guid>
      <description>createRoot() # createRoot() # createRoot(container[, options]); Create a React root for the supplied container and return the root. The root can be used to render a React element into the DOM with render:
const root = createRoot(container); root.render(element); createRoot accepts two options:
onRecoverableError: optional callback called when React automatically recovers from errors. identifierPrefix: optional prefix React uses for ids generated by React.useId. Useful to avoid conflicts when using multiple roots on the same page.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/finddomnode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/finddomnode/</guid>
      <description>🍕 findDOMNode() # findDOMNode() # Note:
findDOMNode is an escape hatch used to access the underlying DOM node. In most cases, use of this escape hatch is discouraged because it pierces the component abstraction. It has been deprecated in StrictMode.
findDOMNode(component) If this component has been mounted into the DOM, this returns the corresponding native browser DOM element. This method is useful for reading values out of the DOM, such as form field values and performing DOM measurements.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/flushsync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/flushsync/</guid>
      <description>flushSync() # flushSync() # flushSync(callback) Force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.
// Force this state update to be synchronous. flushSync(() =&amp;gt; { setCount(count + 1); }); // By this point, DOM is updated. Note:
flushSync can significantly hurt performance. Use sparingly.
flushSync may force pending Suspense boundaries to show their fallback state.
flushSync may also run pending effects and synchronously apply any updates they contain before returning.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/hydrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/hydrate/</guid>
      <description>hydrate() # hydrate() # hydrate(element, container[, callback]) Note:
hydrate has been replaced with hydrateRoot in React 18. See hydrateRoot for more info.
Same as render(), but is used to hydrate a container whose HTML contents were rendered by ReactDOMServer. React will attempt to attach event listeners to the existing markup.
React expects that the rendered content is identical between the server and the client. It can patch up differences in text content, but you should treat mismatches as bugs and fix them.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/hydrateroot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/hydrateroot/</guid>
      <description>⭐ hydrateRoot() # hydrateRoot() # hydrateRoot(container, element[, options]) Same as createRoot(), but is used to hydrate a container whose HTML contents were rendered by ReactDOMServer. React will attempt to attach event listeners to the existing markup.
hydrateRoot accepts two options:
onRecoverableError: optional callback called when React automatically recovers from errors. identifierPrefix: optional prefix React uses for ids generated by React.useId. Useful to avoid conflicts when using multiple roots on the same page.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/react.createcontext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/react.createcontext/</guid>
      <description>React.createContext # React.createContext # const MyContext = React.createContext(defaultValue); Creates a Context object. When React renders a component that subscribes to this Context object it will read the current context value from the closest matching Provider above it in the tree.
The defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This default value can be helpful for testing components in isolation without wrapping them.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/render/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/render/</guid>
      <description>🌵 render() # render() # render(element, container[, callback]) Note:
render has been replaced with createRoot in React 18. See createRoot for more info.
Render a React element into the DOM in the supplied container and return a reference to the component (or returns null for stateless components).
If the React element was previously rendered into container, this will perform an update on it and only mutate the DOM as necessary to reflect the latest React element.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/rendertonodestream-deprecated/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/rendertonodestream-deprecated/</guid>
      <description>renderToNodeStream() (Deprecated) # renderToNodeStream() (Deprecated) # ReactDOMServer.renderToNodeStream(element) Render a React element to its initial HTML. Returns a Node.js Readable stream that outputs an HTML string. The HTML output by this stream is exactly equal to what ReactDOMServer.renderToString would return. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/rendertopipeablestream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/rendertopipeablestream/</guid>
      <description>🍕 renderToPipeableStream() # renderToPipeableStream() # ReactDOMServer.renderToPipeableStream(element, options) Render a React element to its initial HTML. Returns a stream with a pipe(res) method to pipe the output and abort() to abort the request. Fully supports Suspense and streaming of HTML with “delayed” content blocks “popping in” via inline &amp;lt;script&amp;gt; tags later. Read more
If you call ReactDOM.hydrateRoot() on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/rendertoreadablestream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/rendertoreadablestream/</guid>
      <description>🍕 renderToReadableStream() # renderToReadableStream() # ReactDOMServer.renderToReadableStream(element, options); Streams a React element to its initial HTML. Returns a Promise that resolves to a Readable Stream. Fully supports Suspense and streaming of HTML. Read more
If you call ReactDOM.hydrateRoot() on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.
let controller = new AbortController(); let didError = false; try { let stream = await renderToReadableStream( &amp;lt;html&amp;gt; &amp;lt;body&amp;gt;Success&amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;, { signal: controller.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/rendertostaticmarkup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/rendertostaticmarkup/</guid>
      <description>renderToStaticMarkup() # renderToStaticMarkup() # ReactDOMServer.renderToStaticMarkup(element) Similar to renderToString, except this doesn’t create extra DOM attributes that React uses internally, such as data-reactroot. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save some bytes.
If you plan to use React on the client to make the markup interactive, do not use this method. Instead, use renderToString on the server and ReactDOM.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/rendertostaticnodestream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/rendertostaticnodestream/</guid>
      <description>🍕 renderToStaticNodeStream() # renderToStaticNodeStream() # ReactDOMServer.renderToStaticNodeStream(element) Similar to renderToNodeStream, except this doesn’t create extra DOM attributes that React uses internally, such as data-reactroot. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save some bytes.
The HTML output by this stream is exactly equal to what ReactDOMServer.renderToStaticMarkup would return.
If you plan to use React on the client to make the markup interactive, do not use this method.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/rendertostring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/rendertostring/</guid>
      <description>🌵 renderToString() # renderToString() # ReactDOMServer.renderToString(element) Render a React element to its initial HTML. React will return an HTML string. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.
If you call ReactDOM.hydrateRoot() on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/requestanimationframe-throttling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/requestanimationframe-throttling/</guid>
      <description>🍕 requestAnimationFrame throttling # requestAnimationFrame throttling
requestAnimationFrame is a way of queuing a function to be executed in the browser at the optimal time for rendering performance. A function that is queued with requestAnimationFrame will fire in the next frame. The browser will work hard to ensure that there are 60 frames per second (60 fps). However, if the browser is unable to it will naturally limit the amount of frames in a second.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.children/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.children/</guid>
      <description>testInstance.children # testInstance.children # testInstance.children The children test instances of this test instance.
Ideas # You can pass createNodeMock function to TestRenderer.create as the option, which allows for custom mock refs. createNodeMock accepts the current element and should return a mock ref object. This is useful when you test a component that relies on refs.
import TestRenderer from &amp;#39;react-test-renderer&amp;#39;; class MyComponent extends React.Component { constructor(props) { super(props); this.input = null; } componentDidMount() { this.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.find/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.find/</guid>
      <description>testInstance.find() # testInstance.find() # testInstance.find(test) Find a single descendant test instance for which test(testInstance) returns true. If test(testInstance) does not return true for exactly one test instance, it will throw an error.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.findall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.findall/</guid>
      <description>testInstance.findAll() # testInstance.findAll() # testInstance.findAll(test) Find all descendant test instances for which test(testInstance) returns true.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.findallbyprops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.findallbyprops/</guid>
      <description>testInstance.findAllByProps() # testInstance.findAllByProps() # testInstance.findAllByProps(props) Find all descendant test instances with the provided props.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.findallbytype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.findallbytype/</guid>
      <description>testInstance.findAllByType() # testInstance.findAllByType() # testInstance.findAllByType(type) Find all descendant test instances with the provided type.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.findbyprops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.findbyprops/</guid>
      <description>testInstance.findByProps() # testInstance.findByProps() # testInstance.findByProps(props) Find a single descendant test instance with the provided props. If there is not exactly one test instance with the provided props, it will throw an error.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.findbytype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.findbytype/</guid>
      <description>testInstance.findByType() # testInstance.findByType() # testInstance.findByType(type) Find a single descendant test instance with the provided type. If there is not exactly one test instance with the provided type, it will throw an error.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.instance/</guid>
      <description>testInstance.instance # testInstance.instance # testInstance.instance The component instance corresponding to this test instance. It is only available for class components, as function components don’t have instances. It matches the this value inside the given component.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.parent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.parent/</guid>
      <description>testInstance.parent # testInstance.parent # testInstance.parent The parent test instance of this test instance.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.props/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.props/</guid>
      <description>testInstance.props # testInstance.props # testInstance.props The props corresponding to this test instance. For example, a &amp;lt;Button size=&amp;quot;small&amp;quot; /&amp;gt; component has {size: &#39;small&#39;} as props.
\</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testinstance.type/</guid>
      <description>testInstance.type # testInstance.type # testInstance.type The component type corresponding to this test instance. For example, a &amp;lt;Button /&amp;gt; component has a type of Button.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.act/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.act/</guid>
      <description>TestRenderer.act() # TestRenderer.act() # TestRenderer.act(callback); Similar to the act() helper from react-dom/test-utils, TestRenderer.act prepares a component for assertions. Use this version of act() to wrap calls to TestRenderer.create and testRenderer.update.
import {create, act} from &amp;#39;react-test-renderer&amp;#39;; import App from &amp;#39;./app.js&amp;#39;; // The component being tested // render the component let root; act(() =&amp;gt; { root = create(&amp;lt;App value={1}/&amp;gt;) }); // make assertions on root expect(root.toJSON()).toMatchSnapshot(); // update with some different props act(() =&amp;gt; { root.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.create/</guid>
      <description>TestRenderer.create() # TestRenderer.create() # TestRenderer.create(element, options); Create a TestRenderer instance with the passed React element. It doesn’t use the real DOM, but it still fully renders the component tree into memory so you can make assertions about it. Returns a TestRenderer instance.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.getinstance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.getinstance/</guid>
      <description>testRenderer.getInstance() # testRenderer.getInstance() # testRenderer.getInstance() Return the instance corresponding to the root element, if available. This will not work if the root element is a function component because they don’t have instances.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.root/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.root/</guid>
      <description>testRenderer.root # testRenderer.root # testRenderer.root Returns the root “test instance” object that is useful for making assertions about specific nodes in the tree. You can use it to find other “test instances” deeper below.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.tojson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.tojson/</guid>
      <description>testRenderer.toJSON() # testRenderer.toJSON() # testRenderer.toJSON() Return an object representing the rendered tree. This tree only contains the platform-specific nodes like &amp;lt;div&amp;gt; or &amp;lt;View&amp;gt; and their props, but doesn’t contain any user-written components. This is handy for snapshot testing.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.totree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.totree/</guid>
      <description>testRenderer.toTree() # testRenderer.toTree() # testRenderer.toTree() Return an object representing the rendered tree. The representation is more detailed than the one provided by toJSON(), and includes the user-written components. You probably don’t need this method unless you’re writing your own assertion library on top of the test renderer.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.unmount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.unmount/</guid>
      <description>testRenderer.unmount() # testRenderer.unmount() # testRenderer.unmount() Unmount the in-memory tree, triggering the appropriate lifecycle events.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/testrenderer.update/</guid>
      <description>testRenderer.update() # testRenderer.update() # testRenderer.update(element) Re-render the in-memory tree with a new root element. This simulates a React update at the root. If the new element has the same type and key as the previous element, the tree will be updated; otherwise, it will re-mount a new tree.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/unmountcomponentatnode-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/unmountcomponentatnode-1/</guid>
      <description>unmountComponentAtNode() # unmountComponentAtNode() # unmountComponentAtNode(container) Note:
unmountComponentAtNode has been replaced with root.unmount() in React 18. See createRoot for more info.
Remove a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/unmountcomponentatnode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/general/unmountcomponentatnode/</guid>
      <description>unmountComponentAtNode() # unmountComponentAtNode() # unmountComponentAtNode(container) Note:
unmountComponentAtNode has been replaced with root.unmount() in React 18. See createRoot for more info.
Remove a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/act/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/act/</guid>
      <description>act() # act() # To prepare a component for assertions, wrap the code rendering it and performing updates inside an act() call. This makes your test run closer to how React works in the browser.
Note
If you use react-test-renderer, it also provides an act export that behaves the same way.
For example, let’s say we have this Counter component:
class Counter extends React.Component { constructor(props) { super(props); this.state = {count: 0}; this.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/findallinrenderedtree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/findallinrenderedtree/</guid>
      <description>🌵 findAllInRenderedTree() # findAllInRenderedTree() # findAllInRenderedTree( tree, test ) Traverse all components in tree and accumulate all components where test(component) is true. This is not that useful on its own, but it’s used as a primitive for other test utils.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/findrenderedcomponentwithtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/findrenderedcomponentwithtype/</guid>
      <description>findRenderedComponentWithType() # findRenderedComponentWithType() # findRenderedComponentWithType( tree, componentClass ) Same as scryRenderedComponentsWithType() but expects there to be one result and returns that one result, or throws exception if there is any other number of matches besides one.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/findrendereddomcomponentwithclass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/findrendereddomcomponentwithclass/</guid>
      <description>findRenderedDOMComponentWithClass() # findRenderedDOMComponentWithClass() # findRenderedDOMComponentWithClass( tree, className ) Like scryRenderedDOMComponentsWithClass() but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/findrendereddomcomponentwithtag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/findrendereddomcomponentwithtag/</guid>
      <description>findRenderedDOMComponentWithTag() # findRenderedDOMComponentWithTag() # findRenderedDOMComponentWithTag( tree, tagName ) Like scryRenderedDOMComponentsWithTag() but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/iscompositecomponent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/iscompositecomponent/</guid>
      <description>isCompositeComponent() # isCompositeComponent() # isCompositeComponent(instance) Returns true if instance is a user-defined component, such as a class or a function.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/iscompositecomponentwithtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/iscompositecomponentwithtype/</guid>
      <description>isCompositeComponentWithType() # isCompositeComponentWithType() # isCompositeComponentWithType( instance, componentClass ) Returns true if instance is a component whose type is of a React componentClass.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/isdomcomponent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/isdomcomponent/</guid>
      <description>🌵 isDOMComponent() # isDOMComponent() # isDOMComponent(instance) Returns true if instance is a DOM component (such as a &amp;lt;div&amp;gt; or &amp;lt;span&amp;gt;).</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/iselement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/iselement/</guid>
      <description>🌵 isElement() # isElement() # isElement(element) Returns true if element is any React element.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/iselementoftype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/iselementoftype/</guid>
      <description>isElementOfType() # isElementOfType() # isElementOfType( element, componentClass ) Returns true if element is a React element whose type is of a React componentClass.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/mockcomponent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/mockcomponent/</guid>
      <description>mockComponent() # mockComponent() # mockComponent( componentClass, [mockTagName] ) Pass a mocked component module to this method to augment it with useful methods that allow it to be used as a dummy React component. Instead of rendering as usual, the component will become a simple &amp;lt;div&amp;gt; (or other tag if mockTagName is provided) containing any provided children.
Note:
mockComponent() is a legacy API. We recommend using jest.mock() instead.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/renderintodocument/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/renderintodocument/</guid>
      <description>renderIntoDocument() # renderIntoDocument() # renderIntoDocument(element) Render a React element into a detached DOM node in the document. This function requires a DOM. It is effectively equivalent to:
const domContainer = document.createElement(&amp;#39;div&amp;#39;); ReactDOM.createRoot(domContainer).render(element); Note:
You will need to have window, window.document and window.document.createElement globally available before you import React. Otherwise React will think it can’t access the DOM and methods like setState won’t work.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/scryrenderedcomponentswithtype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/scryrenderedcomponentswithtype/</guid>
      <description>scryRenderedComponentsWithType() # scryRenderedComponentsWithType() # scryRenderedComponentsWithType( tree, componentClass ) Finds all instances of components with type equal to componentClass.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/scryrendereddomcomponentswithclass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/scryrendereddomcomponentswithclass/</guid>
      <description>scryRenderedDOMComponentsWithClass() # scryRenderedDOMComponentsWithClass() # scryRenderedDOMComponentsWithClass( tree, className ) Finds all DOM elements of components in the rendered tree that are DOM components with the class name matching className.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/scryrendereddomcomponentswithtag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/scryrendereddomcomponentswithtag/</guid>
      <description>scryRenderedDOMComponentsWithTag() # scryRenderedDOMComponentsWithTag() # scryRenderedDOMComponentsWithTag( tree, tagName ) Finds all DOM elements of components in the rendered tree that are DOM components with the tag name matching tagName.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/simulate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/test-utilities/simulate/</guid>
      <description>⭐ Simulate # Simulate # Simulate.{eventName}( element, [eventData] ) Simulate an event dispatch on a DOM node with optional eventData event data.
Simulate has a method for every event that React understands.
Clicking an element
// &amp;lt;button ref={(node) =&amp;gt; this.button = node}&amp;gt;...&amp;lt;/button&amp;gt; const node = this.button; ReactTestUtils.Simulate.click(node); Changing the value of an input field and then pressing ENTER.
// &amp;lt;input ref={(node) =&amp;gt; this.textInput = node} /&amp;gt; const node = this.</description>
    </item>
    <item>
      <title></title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/top-level-apis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/references/top-level-apis/</guid>
      <description> Top Level APIs # </description>
    </item>
    <item>
      <title>Code-Splitting 🌵</title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/code-splitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/code-splitting/</guid>
      <description>Code-Splitting 🌵 # These docs are old and won’t be updated. Go to react.dev for the new React docs.
These new documentation pages teach modern React and include live examples:
lazy &amp;lt;Suspense&amp;gt; Bundling # Most React apps will have their files “bundled” using tools like Webpack, Rollup or Browserify. Bundling is the process of following imported files and merging them into a single file: a “bundle”. This bundle can then be included on a webpage to load an entire app at once.</description>
    </item>
    <item>
      <title>Context</title>
      <link>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/references/meta-frameworks/react/advanced/context/</guid>
      <description>Context # Context provides a way to pass data through the component tree without having to pass props down manually at every level.
In a typical React application, data is passed top-down (parent to child) via props, but such usage can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.</description>
    </item>
    <item>
      <title>Fund1</title>
      <link>https://Narutabe.github.io/docs/fundamental/fund1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/fundamental/fund1/</guid>
      <description>Fund2 # [[fund2]] Fund2</description>
    </item>
    <item>
      <title>Fund2</title>
      <link>https://Narutabe.github.io/docs/fundamental/fund2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://Narutabe.github.io/docs/fundamental/fund2/</guid>
      <description>Fund1 # [[fund1]]</description>
    </item>
  </channel>
</rss>
