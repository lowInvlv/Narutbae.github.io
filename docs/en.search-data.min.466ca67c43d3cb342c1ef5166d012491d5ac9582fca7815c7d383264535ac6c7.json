[{"id":0,"href":"/docs/_example/table-of-contents/with-toc/","title":"With ToC","section":"Table of Contents","content":" Caput vino delphine in tamen vias # Cognita laeva illo fracta # Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\nTe at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit Natus quaerere # Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\nPhrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\nLimitibus misere sit # Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua # Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta # Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"},{"id":1,"href":"/docs/_example/table-of-contents/without-toc/","title":"Without ToC","section":"Table of Contents","content":" At me ipso nepotibus nunc celebratior genus # Tanto oblite # Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius # Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\nRemansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae # Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\nBaculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"},{"id":2,"href":"/docs/_example/table-of-contents/","title":"Table of Contents","section":"Example Site","content":" Ubi loqui # Mentem genus facietque salire tempus bracchia # Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice # Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); Placabilis coactis nega ingemuit ignoscat nimia non # Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; } Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":3,"href":"/docs/references/","title":"References","section":"Docs","content":" Understand # "},{"id":4,"href":"/docs/_example/collapsed/3rd-level/4th-level/","title":"4th Level","section":"3rd Level","content":" 4th Level of Menu # Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":5,"href":"/docs/_example/collapsed/3rd-level/","title":"3rd Level","section":"Collapsed","content":" 3rd Level of Menu # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); "},{"id":6,"href":"/docs/_example/hidden/","title":"Hidden","section":"Example Site","content":" This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); } Fronde cetera dextrae sequens pennis voce muneris # Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":7,"href":"/docs/_shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":" Buttons # Buttons are styled links that can lead to local page or external link.\nExample # {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home Contribute "},{"id":8,"href":"/docs/_shortcodes/columns/","title":"Columns","section":"Shortcodes","content":" Columns # Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia. Mid Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Right Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia. "},{"id":9,"href":"/docs/_shortcodes/details/","title":"Details","section":"Shortcodes","content":" Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample # {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content # Lorem markdownum insigne\u0026hellip; "},{"id":10,"href":"/docs/_shortcodes/expand/","title":"Expand","section":"Shortcodes","content":" Expand # Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample # Default # {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} Expand ↕ Markdown content # Lorem markdownum insigne\u0026hellip; With Custom Label # {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} Custom Label ... Markdown content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia. "},{"id":11,"href":"/docs/_shortcodes/hints/","title":"Hints","section":"Shortcodes","content":" Hints # Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example # Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa "},{"id":12,"href":"/docs/_shortcodes/katex/","title":"Katex","section":"Shortcodes","content":" KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample # {{\u0026lt;/* katex [display] [class=\u0026#34;text-center\u0026#34;] */\u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt;/* /katex */\u0026gt;}} \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Display Mode Example # Here is some inline example: \\(\\pi(x)\\) , rendered in the same line. And below is display example, having display: block \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Text continues here.\n"},{"id":13,"href":"/docs/_shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":" Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid Initialization Config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\nExample # {{\u0026lt;/* mermaid [class=\u0026#34;text-center\u0026#34;]*/\u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt;/* /mermaid */\u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. "},{"id":14,"href":"/docs/_shortcodes/section/","title":"Section","section":"Shortcodes","content":" Section # Section renders pages in section as definition list, using title and description. Optional param summary can be used to show or hide page summary\nExample # {{\u0026lt; section [summary] \u0026gt;}} First Page First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nSecond Page Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n"},{"id":15,"href":"/docs/_shortcodes/section/first-page/","title":"First Page","section":"Section","content":" First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":16,"href":"/docs/_shortcodes/section/second-page/","title":"Second Page","section":"Section","content":" Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":17,"href":"/docs/_shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":" Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example # MacOS MacOS # This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux # This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows # This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":18,"href":"/docs/references/languages/html/","title":"HTML","section":"Programming Languages","content":" HTML: HyperText Markup Language # ::: section-content HTML (HyperText Markup Language) is the most basic building block of the Web. It defines the meaning and structure of web content. Other technologies besides HTML are generally used to describe a web page's appearance/presentation ( CSS) or functionality/behavior ( JavaScript).\n\u0026quot;Hypertext\u0026quot; refers to links that connect web pages to one another, either within a single website or between websites. Links are a fundamental aspect of the Web. By uploading content to the Internet and linking it to pages created by other people, you become an active participant in the World Wide Web.\nHTML uses \u0026quot;markup\u0026quot; to annotate text, images, and other content for display in a Web browser. HTML markup includes special \u0026quot;elements\u0026quot; such as \u0026lt;head\u0026gt;, \u0026lt;title\u0026gt;, \u0026lt;body\u0026gt;, \u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;section\u0026gt;, \u0026lt;p\u0026gt;, ``, \u0026lt;span\u0026gt;, \u0026lt;img\u0026gt;, \u0026lt;aside\u0026gt;, \u0026lt;audio\u0026gt;, \u0026lt;canvas\u0026gt;, \u0026lt;datalist\u0026gt;, \u0026lt;details\u0026gt;, \u0026lt;embed\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;search\u0026gt;, \u0026lt;output\u0026gt;, \u0026lt;progress\u0026gt;, \u0026lt;video\u0026gt;, \u0026lt;ul\u0026gt;, \u0026lt;ol\u0026gt;, \u0026lt;li\u0026gt; and many others.\nAn HTML element is set off from other text in a document by \u0026quot;tags\u0026quot;, which consist of the element name surrounded by \u0026quot;\u0026lt;\u0026quot; and \u0026quot;\u0026gt;\u0026quot;. The name of an element inside a tag is case-insensitive. That is, it can be written in uppercase, lowercase, or a mixture. For example, the \u0026lt;title\u0026gt; tag can be written as \u0026lt;Title\u0026gt;, \u0026lt;TITLE\u0026gt;, or in any other way. However, the convention and recommended practice is to write tags in lowercase.\nThe articles below can help you learn more about HTML. :::\nKey resources # ::: section-content\nHTML Introduction If you're new to web development, be sure to read our HTML Basics article to learn what HTML is and how to use it.\nHTML Tutorials For articles about how to use HTML, as well as tutorials and complete examples, check out our HTML Learning Area.\nHTML Reference In our extensive HTML reference section, you'll find the details about every element and attribute in HTML.\n::: {#sect1 .callout}\nLooking to become a front-end web developer? # We have put together a course that includes all the essential information you need to work towards your goal.\nGet started ::: :::\nBeginner's tutorials # ::: section-content Our HTML Learning Area features multiple modules that teach HTML from the ground up \u0026mdash; no previous knowledge required.\nIntroduction to HTML This module sets the stage, getting you used to important concepts and syntax such as looking at applying HTML to text, how to create hyperlinks, and how to use HTML to structure a web page.\nMultimedia and embedding This module explores how to use HTML to include multimedia in your web pages, including the different ways that images can be included, and how to embed video, audio, and even entire other webpages.\nHTML tables Representing tabular data on a webpage in an understandable, accessible way can be a challenge. This module covers basic table markup, along with more complex features such as implementing captions and summaries.\nHTML forms Forms are a very important part of the Web \u0026mdash; these provide much of the functionality you need for interacting with websites, e.g. registering and logging in, sending feedback, buying products, and more. This module gets you started with creating the client-side/front-end parts of forms.\nUse HTML to solve common problems Provides links to sections of content explaining how to use HTML to solve very common problems when creating a web page: dealing with titles, adding images or videos, emphasizing content, creating a basic form, etc. :::\nAdvanced topics # ::: section-content\nCORS enabled image The crossorigin attribute, in combination with an appropriate CORS header, allows images defined by the \u0026lt;img\u0026gt; element to be loaded from foreign origins and used in a \u0026lt;canvas\u0026gt; element as if they were being loaded from the current origin.\nCORS settings attributes Some HTML elements that provide support for CORS, such as \u0026lt;img\u0026gt; or \u0026lt;video\u0026gt;, have a crossorigin attribute (crossOrigin property), which lets you configure the CORS requests for the element's fetched data.\nPreloading content with rel=\u0026quot;preload\u0026quot; The preload value of the \u0026lt;link\u0026gt; element's rel attribute allows you to write declarative fetch requests in your HTML \u0026lt;head\u0026gt;, specifying resources that your pages will need very soon after loading, which you therefore want to start preloading early in the lifecycle of a page load, before the browser's main rendering machinery kicks in. This ensures that they are made available earlier and are less likely to block the page's first render, leading to performance improvements. This article provides a basic guide to how preload works. :::\nReference # ::: section-content\nHTML reference HTML consists of elements, each of which may be modified by some number of attributes. HTML documents are connected to each other with links.\nHTML element reference Browse a list of all HTML elements.\nHTML attribute reference Elements in HTML have attributes. These are additional values that configure the elements or adjust their behavior in various ways.\nGlobal attributes Global attributes may be specified on all HTML elements, even those not specified in the standard. This means that any non-standard elements must still permit these attributes, even though those elements make the document HTML5-noncompliant.\nInline-level elements and block-level elements HTML elements are usually \u0026quot;inline-level\u0026quot; or \u0026quot;block-level\u0026quot; elements. An inline-level element occupies only the space bounded by the tags that define it. A block-level element occupies the entire space of its parent element (container), thereby creating a \u0026quot;block box\u0026quot;.\nGuide to media types and formats on the web The \u0026lt;audio\u0026gt; and \u0026lt;video\u0026gt; elements allow you to play audio and video media natively within your content without the need for external software support.\nHTML content categories HTML is comprised of several kinds of content, each of which is allowed to be used in certain contexts and is disallowed in others. Similarly, each context has a set of other content categories it can contain and elements that can or can't be used in them. This is a guide to these categories.\nQuirks mode and standards mode Historical information on quirks mode and standards mode. :::\nRelated topics # ::: section-content\nApplying color to HTML elements using CSS This article covers most of the ways you use CSS to add color to HTML content, listing what parts of HTML documents can be colored and what CSS properties to use when doing so. Includes examples, links to palette-building tools, and more. :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML{._attribution-link} :::\n"},{"id":19,"href":"/docs/references/languages/html/attributes/","title":"Attributes","section":"HTML","content":" HTML attribute reference # ::: section-content Elements in HTML have attributes; these are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want. :::\nAttribute list # ::: section-content :::\nContent versus IDL attributes # ::: section-content In HTML, most attributes have two faces: the content attribute and the IDL (Interface Definition Language) attribute.\nThe content attribute is the attribute as you set it from the content (the HTML code) and you can set it or get it via element.setAttribute() or element.getAttribute(). The content attribute is always a string even when the expected value should be an integer. For example, to set an \u0026lt;input\u0026gt; element's maxlength to 42 using the content attribute, you have to call setAttribute(\u0026quot;maxlength\u0026quot;, \u0026quot;42\u0026quot;) on that element.\nThe IDL attribute is also known as a JavaScript property. These are the attributes you can read or set using JavaScript properties like element.foo. The IDL attribute is always going to use (but might transform) the underlying content attribute to return a value when you get it and is going to save something in the content attribute when you set it. In other words, the IDL attributes, in essence, reflect the content attributes.\nMost of the time, IDL attributes will return their values as they are really used. For example, the default type for \u0026lt;input\u0026gt; elements is \u0026quot;text\u0026quot;, so if you set input.type=\u0026quot;foobar\u0026quot;, the \u0026lt;input\u0026gt; element will be of type text (in the appearance and the behavior) but the \u0026quot;type\u0026quot; content attribute's value will be \u0026quot;foobar\u0026quot;. However, the type IDL attribute will return the string \u0026quot;text\u0026quot;.\nIDL attributes are not always strings; for example, input.maxlength is a number (a signed long). When using IDL attributes, you read or set values of the desired type, so input.maxlength is always going to return a number and when you set input.maxlength, it wants a number. If you pass another type, it is automatically converted to a number as specified by the standard JavaScript rules for type conversion.\nIDL attributes can reflect other types{target=\u0026quot;_blank\u0026quot;} such as unsigned long, URLs, booleans, etc. Unfortunately, there are no clear rules and the way IDL attributes behave in conjunction with their corresponding content attributes depends on the attribute. Most of the time, it will follow the rules laid out in the specification{target=\u0026quot;_blank\u0026quot;}, but sometimes it doesn't. HTML specifications try to make this as developer-friendly as possible, but for various reasons (mostly historical), some attributes behave oddly (select.size, for example) and you should read the specifications to understand how exactly they behave. :::\nBoolean Attributes # ::: section-content Some content attributes (e.g. required, readonly, disabled) are called boolean attributes{target=\u0026quot;_blank\u0026quot;}. If a boolean attribute is present, its value is true, and if it's absent, its value is false.\nHTML defines restrictions on the allowed values of boolean attributes: If the attribute is present, its value must either be the empty string (equivalently, the attribute may have an unassigned value), or a value that is an ASCII case-insensitive match for the attribute's canonical name, with no leading or trailing whitespace. The following examples are valid ways to mark up a boolean attribute:\n::: code-example [html]{.language-name}\n\u0026lt;div itemscope\u0026gt;This is valid HTML but invalid XML. \u0026lt;div itemscope=itemscope\u0026gt;This is also valid HTML but invalid XML. \u0026lt;div itemscope=\u0026#34;\u0026#34;\u0026gt;This is valid HTML and also valid XML. \u0026lt;div itemscope=\u0026#34;itemscope\u0026#34;\u0026gt; This is also valid HTML and XML, but perhaps a bit verbose. :::\nTo be clear, the values \u0026quot;true\u0026quot; and \u0026quot;false\u0026quot; are not allowed on boolean attributes. To represent a false value, the attribute has to be omitted altogether. This restriction clears up some common misunderstandings: With checked=\u0026quot;false\u0026quot; for example, the element's checked attribute would be interpreted as true because the attribute is present. :::\nEvent handler attributes # ::: section-content ::: {#sect8 .notecard .warning} Warning: The use of event handler content attributes is discouraged. The mix of HTML and JavaScript often produces unmaintainable code, and the execution of event handler attributes may also be blocked by content security policies. :::\nIn addition to the attributes listed in the table above, global event handlers \u0026mdash; such as onclick \u0026mdash; can also be specified as content attributes on all elements.\nAll event handler attributes accept a string. The string will be used to synthesize a JavaScript function like function name(/*args*/) {body}, where name is the attribute's name, and body is the attribute's value. The handler receives the same parameters as its JavaScript event handler counterpart \u0026mdash; most handlers receive only one event parameter, while onerror receives five: event, source, lineno, colno, error. This means you can, in general, use the event variable within the attribute.\n::: code-example [html]{.language-name}\n\u0026lt;div onclick=\u0026#34;console.log(event)\u0026#34;\u0026gt;Click me! \u0026lt;!-- The synthesized handler has a name; you can reference itself --\u0026gt; \u0026lt;div onclick=\u0026#34;console.log(onclick)\u0026#34;\u0026gt;Click me! ::: :::\nSee also # ::: section-content\nHTML elements ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes{._attribution-link} :::\n"},{"id":20,"href":"/docs/references/languages/html/attributes/accept/","title":"Accept","section":"HTML","content":" HTML attribute: accept # ::: section-content The accept attribute takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: accept # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Choose a movie to upload:\n\u0026lt;input type=\u0026quot;file\u0026quot; name=\u0026quot;movie\u0026quot; accept=\u0026quot;video/*\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;poster\u0026quot;\u0026gt;Choose a poster:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;file\u0026quot; name=\u0026quot;poster\u0026quot; accept=\u0026quot;image/png, image/jpeg\u0026quot; /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; margin-top: 1rem; }\ninput { margin-bottom: 1rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nOverview # ::: section-content The accept property is an attribute of the file \u0026lt;input\u0026gt; type. It was supported on the \u0026lt;form\u0026gt; element, but was removed in favor of file.\nBecause a given file type may be identified in more than one manner, it's useful to provide a thorough set of type specifiers when you need files of specific type, or use the wild card to denote a type of any format is acceptable.\nFor instance, there are a number of ways Microsoft Word files can be identified, so a site that accepts Word files might use an \u0026lt;input\u0026gt; like this:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;docpicker\u0026#34; accept=\u0026#34;.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\u0026#34; /\u0026gt; :::\nWhereas if you're accepting a media file, you may want to be include any format of that media type:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;soundFile\u0026#34; accept=\u0026#34;audio/*\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;videoFile\u0026#34; accept=\u0026#34;video/*\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;imageFile\u0026#34; accept=\u0026#34;image/*\u0026#34; /\u0026gt; :::\nThe accept attribute doesn't validate the types of the selected files; it provides hints for browsers to guide users towards selecting the correct file types. It is still possible (in most cases) for users to toggle an option in the file chooser that makes it possible to override this and select any file they wish, and then choose incorrect file types.\nBecause of this, you should make sure that expected requirement is validated server-side. :::\nExamples # ::: section-content When set on a file input type, the native file picker that opens up should only enable selecting files of the correct file type. Most operating systems lighten the files that don't match the criteria and aren't selectable.\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;soundFile\u0026#34;\u0026gt;Select an audio file:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;soundFile\u0026#34; accept=\u0026#34;audio/*\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;videoFile\u0026#34;\u0026gt;Select a video file:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;videoFile\u0026#34; accept=\u0026#34;video/*\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;imageFile\u0026#34;\u0026gt;Select some images:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;imageFile\u0026#34; accept=\u0026#34;image/*\u0026#34; multiple /\u0026gt; \u0026lt;/p\u0026gt; :::\n::: {#sect1 .code-example} ::: iframe ::: :::\nNote the last example allows you to select multiple images. See the multiple attribute for more information. :::\nUnique file type specifiers # ::: section-content A unique file type specifier is a string that describes a type of file that may be selected by the user in an \u0026lt;input\u0026gt; element of type file. Each unique file type specifier may take one of the following forms:\nA valid case-insensitive filename extension, starting with a period (\u0026quot;.\u0026quot;) character. For example: .jpg, .pdf, or .doc. A valid MIME type string, with no extensions. The string audio/* meaning \u0026quot;any audio file\u0026quot;. The string video/* meaning \u0026quot;any video file\u0026quot;. The string image/* meaning \u0026quot;any image file\u0026quot;. The accept attribute takes as its value a string containing one or more of these unique file type specifiers, separated by commas. For example, a file picker that needs content that can be presented as an image, including both standard image formats and PDF files, might look like this:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;file\u0026#34; accept=\u0026#34;image/*,.pdf\u0026#34; /\u0026gt; ::: :::\nUsing file inputs # A basic example # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;form method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;file\u0026#34;\u0026gt;Choose file to upload\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;file\u0026#34; name=\u0026#34;file\u0026#34; multiple /\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nThis produces the following output:\n::: {#sect2 .code-example} ::: iframe ::: :::\n::: {#sect3 .notecard .note} Note: You can find this example on GitHub too \u0026mdash; see the source code{target=\u0026quot;_blank\u0026quot;}, and also see it running live{target=\u0026quot;_blank\u0026quot;}. :::\nRegardless of the user's device or operating system, the file input provides a button that opens up a file picker dialog that allows the user to choose a file.\nIncluding the multiple attribute, as shown above, specifies that multiple files can be chosen at once. The user can choose multiple files from the file picker in any way that their chosen platform allows (e.g. by holding down [Shift]{.kbd} or [Control]{.kbd}, and then clicking). If you only want the user to choose a single file per \u0026lt;input\u0026gt;, omit the multiple attribute. :::\nLimiting accepted file types # ::: section-content Often you won't want the user to be able to pick any arbitrary type of file; instead, you often want them to select files of a specific type or types. For example, if your file input lets users upload a profile picture, you probably want them to select web-compatible image formats, such as JPEG or PNG.\nAcceptable file types can be specified with the accept attribute, which takes a comma-separated list of allowed file extensions or MIME types. Some examples:\naccept=\u0026quot;image/png\u0026quot; or accept=\u0026quot;.png\u0026quot; \u0026mdash; Accepts PNG files. accept=\u0026quot;image/png, image/jpeg\u0026quot; or accept=\u0026quot;.png, .jpg, .jpeg\u0026quot; \u0026mdash; Accept PNG or JPEG files. accept=\u0026quot;image/*\u0026quot; \u0026mdash; Accept any file with an image/* MIME type. (Many mobile devices also let the user take a picture with the camera when this is used.) accept=\u0026quot;.doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\u0026quot; \u0026mdash; accept anything that smells like an MS Word document. Let's look at a more complete example:\n::: code-example [html]{.language-name}\n\u0026lt;form method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;profile_pic\u0026#34;\u0026gt;Choose file to upload\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;profile_pic\u0026#34; name=\u0026#34;profile_pic\u0026#34; accept=\u0026#34;.jpg, .jpeg, .png\u0026#34; /\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect4 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-input-accept]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet accept 1 12 1 6 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 :::\nSee also # ::: section-content\nUsing files from web applications File API ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept{._attribution-link} :::\n"},{"id":21,"href":"/docs/references/languages/html/attributes/autocomplete/","title":"Autocomplete","section":"HTML","content":" HTML attribute: autocomplete # ::: section-content The HTML autocomplete attribute lets web developers specify what if any permission the user agent has to provide automated assistance in filling out form field values, as well as guidance to the browser as to the type of information expected in the field.\nIt is available on \u0026lt;input\u0026gt; elements that take a text or numeric value as input, \u0026lt;textarea\u0026gt; elements, \u0026lt;select\u0026gt; elements, and \u0026lt;form\u0026gt; elements.\nThe source of the suggested values is generally up to the browser; typically values come from past values entered by the user, but they may also come from pre-configured values. For instance, a browser might let the user save their name, address, phone number, and email addresses for autocomplete purposes. Perhaps the browser offers the ability to save encrypted credit card information, for autocompletion following an authentication procedure.\nIf an \u0026lt;input\u0026gt;, \u0026lt;select\u0026gt; or \u0026lt;textarea\u0026gt; element has no autocomplete attribute, then browsers use the autocomplete attribute of the element's form owner, which is either the \u0026lt;form\u0026gt; element that the element is a descendant of, or the \u0026lt;form\u0026gt; whose id is specified by the form attribute of the element (see the \u0026lt;form\u0026gt; autocomplete attribute).\n::: {#sect1 .notecard .note} Note: In order to provide autocompletion, user-agents might require \u0026lt;input\u0026gt;/\u0026lt;select\u0026gt;/\u0026lt;textarea\u0026gt; elements to:\nHave a name and/or id attribute Be descendants of a \u0026lt;form\u0026gt; element The form to have a submit button ::: ::: Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: autocomplete # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} First Name: \u0026lt;label for=\u0026quot;lastName\u0026quot;\u0026gt;Last Name:\u0026lt;/label\u0026gt; \u0026lt;input name=\u0026quot;lastName\u0026quot; id=\u0026quot;lastName\u0026quot; type=\u0026quot;text\u0026quot; autocomplete=\u0026quot;family-name\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;email\u0026quot;\u0026gt;Email:\u0026lt;/label\u0026gt; \u0026lt;input name=\u0026quot;email\u0026quot; id=\u0026quot;email\u0026quot; type=\u0026quot;email\u0026quot; autocomplete=\u0026quot;off\u0026quot; /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; margin-top: 1rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nValues # ::: section-content\n\u0026quot;off\u0026quot; The browser is not permitted to automatically enter or select a value for this field. It is possible that the document or application provides its own autocomplete feature, or that security concerns require that the field's value not be automatically entered.\n::: {#sect3 .notecard .note} Note: In most modern browsers, setting autocomplete to \u0026quot;off\u0026quot; will not prevent a password manager from asking the user if they would like to save username and password information, or from automatically filling in those values in a site's login form. See the autocomplete attribute and login fields. :::\n\u0026quot;on\u0026quot; The browser is allowed to automatically complete the input. No guidance is provided as to the type of data expected in the field, so the browser may use its own judgement.\n\u0026quot;name\u0026quot; The field expects the value to be a person's full name. Using \u0026quot;name\u0026quot; rather than breaking the name down into its components is generally preferred because it avoids dealing with the wide diversity of human names and how they are structured; however, you can use the following autocomplete values if you do need to break the name down into its components:\n\u0026quot;honorific-prefix\u0026quot; The prefix or title, such as \u0026quot;Mrs.\u0026quot;, \u0026quot;Mr.\u0026quot;, \u0026quot;Miss\u0026quot;, \u0026quot;Ms.\u0026quot;, \u0026quot;Dr.\u0026quot;, or \u0026quot;Mlle.\u0026quot;.\n\u0026quot;given-name\u0026quot; The given (or \u0026quot;first\u0026quot;) name.\n\u0026quot;additional-name\u0026quot; The middle name.\n\u0026quot;family-name\u0026quot; The family (or \u0026quot;last\u0026quot;) name.\n\u0026quot;honorific-suffix\u0026quot; The suffix, such as \u0026quot;Jr.\u0026quot;, \u0026quot;B.Sc.\u0026quot;, \u0026quot;PhD.\u0026quot;, \u0026quot;MBASW\u0026quot;, or \u0026quot;IV\u0026quot;.\n\u0026quot;nickname\u0026quot; A nickname or handle.\n\u0026quot;email\u0026quot; An email address.\n\u0026quot;username\u0026quot; A username or account name.\n\u0026quot;new-password\u0026quot; A new password. When creating a new account or changing passwords, this should be used for an \u0026quot;Enter your new password\u0026quot; or \u0026quot;Confirm new password\u0026quot; field, as opposed to a general \u0026quot;Enter your current password\u0026quot; field that might be present. This may be used by the browser both to avoid accidentally filling in an existing password and to offer assistance in creating a secure password (see also Preventing autofilling with autocomplete=\u0026quot;new-password\u0026quot;).\n\u0026quot;current-password\u0026quot; The user's current password.\n\u0026quot;one-time-code\u0026quot; A one-time password (OTP) for verifying user information, most commonly a phone number used as an additional factor in a sign-in flow.\n\u0026quot;organization-title\u0026quot; A job title, or the title a person has within an organization, such as \u0026quot;Senior Technical Writer\u0026quot;, \u0026quot;President\u0026quot;, or \u0026quot;Assistant Troop Leader\u0026quot;.\n\u0026quot;organization\u0026quot; A company or organization name, such as \u0026quot;Acme Widget Company\u0026quot; or \u0026quot;Girl Scouts of America\u0026quot;.\n\u0026quot;street-address\u0026quot; A street address. This can be multiple lines of text, and should fully identify the location of the address within its second administrative level (typically a city or town), but should not include the city name, ZIP or postal code, or country name.\n\u0026quot;shipping\u0026quot; The street address to send the product. This can be combined with other tokens, such as \u0026quot;shipping street-address\u0026quot; and \u0026quot;shipping address-level2\u0026quot;.\n\u0026quot;billing\u0026quot; The street address to associate with the form of payment used. This can be combined with other tokens, such as \u0026quot;billing street-address\u0026quot; and \u0026quot;billing address-level2\u0026quot;.\n\u0026quot;address-line1\u0026quot;, \u0026quot;address-line2\u0026quot;, \u0026quot;address-line3\u0026quot; Each individual line of the street address. These should only be present if the \u0026quot;street-address\u0026quot; is not present.\n\u0026quot;address-level4\u0026quot; The finest-grained administrative level, in addresses which have four levels.\n\u0026quot;address-level3\u0026quot; The third administrative level, in addresses with at least three administrative levels.\n\u0026quot;address-level2\u0026quot; The second administrative level, in addresses with at least two of them. In countries with two administrative levels, this would typically be the city, town, village, or other locality in which the address is located.\n\u0026quot;address-level1\u0026quot; The first administrative level in the address. This is typically the province in which the address is located. In the United States, this would be the state. In Switzerland, the canton. In the United Kingdom, the post town.\n\u0026quot;country\u0026quot; A country or territory code.\n\u0026quot;country-name\u0026quot; A country or territory name.\n\u0026quot;postal-code\u0026quot; A postal code (in the United States, this is the ZIP code).\n\u0026quot;cc-name\u0026quot; The full name as printed on or associated with a payment instrument such as a credit card. Using a full name field is preferred, typically, over breaking the name into pieces.\n\u0026quot;cc-given-name\u0026quot; A given (first) name as given on a payment instrument like a credit card.\n\u0026quot;cc-additional-name\u0026quot; A middle name as given on a payment instrument or credit card.\n\u0026quot;cc-family-name\u0026quot; A family name, as given on a credit card.\n\u0026quot;cc-number\u0026quot; A credit card number or other number identifying a payment method, such as an account number.\n\u0026quot;cc-exp\u0026quot; A payment method expiration date, typically in the form \u0026quot;MM/YY\u0026quot; or \u0026quot;MM/YYYY\u0026quot;.\n\u0026quot;cc-exp-month\u0026quot; The month in which the payment method expires.\n\u0026quot;cc-exp-year\u0026quot; The year in which the payment method expires.\n\u0026quot;cc-csc\u0026quot; The security code for the payment instrument; on credit cards, this is the 3-digit verification number on the back of the card.\n\u0026quot;cc-type\u0026quot; The type of payment instrument (such as \u0026quot;Visa\u0026quot; or \u0026quot;Master Card\u0026quot;).\n\u0026quot;transaction-currency\u0026quot; The currency in which the transaction is to take place.\n\u0026quot;transaction-amount\u0026quot; The amount, given in the currency specified by \u0026quot;transaction-currency\u0026quot;, of the transaction, for a payment form.\n\u0026quot;language\u0026quot; A preferred language, given as a valid BCP 47 language tag{target=\u0026quot;_blank\u0026quot;}.\n\u0026quot;bday\u0026quot; A birth date, as a full date.\n\u0026quot;bday-day\u0026quot; The day of the month of a birth date.\n\u0026quot;bday-month\u0026quot; The month of the year of a birth date.\n\u0026quot;bday-year\u0026quot; The year of a birth date.\n\u0026quot;sex\u0026quot; A gender identity (such as \u0026quot;Female\u0026quot;, \u0026quot;Fa'afafine\u0026quot;, \u0026quot;Hijra\u0026quot;, \u0026quot;Male\u0026quot;, \u0026quot;Nonbinary\u0026quot;), as freeform text without newlines.\n\u0026quot;tel\u0026quot; A full telephone number, including the country code. If you need to break the phone number up into its components, you can use these values for those fields:\n\u0026quot;tel-country-code\u0026quot; The country code, such as \u0026quot;1\u0026quot; for the United States, Canada, and other areas in North America and parts of the Caribbean.\n\u0026quot;tel-national\u0026quot; The entire phone number without the country code component, including a country-internal prefix. For the phone number \u0026quot;1-855-555-6502\u0026quot;, this field's value would be \u0026quot;855-555-6502\u0026quot;.\n\u0026quot;tel-area-code\u0026quot; The area code, with any country-internal prefix applied if appropriate.\n\u0026quot;tel-local\u0026quot; The phone number without the country or area code. This can be split further into two parts, for phone numbers which have an exchange number and then a number within the exchange. For the phone number \u0026quot;555-6502\u0026quot;, use \u0026quot;tel-local-prefix\u0026quot; for \u0026quot;555\u0026quot; and \u0026quot;tel-local-suffix\u0026quot; for \u0026quot;6502\u0026quot;.\n\u0026quot;tel-extension\u0026quot; A telephone extension code within the phone number, such as a room or suite number in a hotel or an office extension in a company.\n\u0026quot;impp\u0026quot; A URL for an instant messaging protocol endpoint, such as \u0026quot;xmpp: username@example.net\u0026quot;.\n\u0026quot;url\u0026quot; A URL, such as a home page or company website address as appropriate given the context of the other fields in the form.\n\u0026quot;photo\u0026quot; The URL of an image representing the person, company, or contact information given in the other fields in the form.\n\u0026quot;webauthn\u0026quot; Passkeys generated by the Web Authentication API, as requested by a conditional navigator.credentials.get() call (i.e., one that includes mediation: 'conditional'). See Sign in with a passkey through form autofill{target=\u0026quot;_blank\u0026quot;} for more details.\nSee the WHATWG Standard{target=\u0026quot;_blank\u0026quot;} for more detailed information.\n::: {#sect58 .notecard .note} Note: The autocomplete attribute also controls whether Firefox will \u0026mdash; unlike other browsers \u0026mdash; persist the dynamic disabled state and (if applicable) dynamic checkedness{target=\u0026quot;_blank\u0026quot;} of an \u0026lt;input\u0026gt; element, \u0026lt;textarea\u0026gt; element, or entire \u0026lt;form\u0026gt; across page loads. The persistence feature is enabled by default. Setting the value of the autocomplete attribute to off disables this feature. This works even when the autocomplete attribute would normally not apply by virtue of its type. See Firefox bug 654072{target=\u0026quot;_blank\u0026quot;}. ::: :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;cc-number\u0026#34;\u0026gt;Enter your credit card number\u0026lt;/label\u0026gt; \u0026lt;input name=\u0026#34;cc-number\u0026#34; id=\u0026#34;cc-number\u0026#34; autocomplete=\u0026#34;off\u0026#34; /\u0026gt; ::: :::\nAdministrative levels in addresses # ::: section-content The four administrative level fields (address-level1 through address-level4) describe the address in terms of increasing levels of precision within the country in which the address is located. Each country has its own system of administrative levels, and may arrange the levels in different orders when addresses are written.\naddress-level1 always represents the broadest administrative division; it is the least-specific portion of the address short of the country name. :::\nForm layout flexibility # ::: section-content Given that different countries write their address in different ways, with each field in different places within the address, and even different sets and numbers of fields entirely, it can be helpful if, when possible, your site is able to switch to the layout expected by your users when presenting an address entry form, given the country the address is located within. :::\nVariations # ::: section-content The way each administrative level is used will vary from country to country. Below are some examples; this is not meant to be an exhaustive list.\nUnited States # A typical home address within the United States looks like this:\n432 Anywhere St Exampleville CA 95555\nIn the United States, the least-specific portion of the address is the state, in this case \u0026quot;CA\u0026quot; (the official US Postal Service shorthand for \u0026quot;California\u0026quot;). Thus address-level1 is the state, or \u0026quot;CA\u0026quot; in this case.\nThe second-least specific portion of the address is the city or town name, so address-level2 is \u0026quot;Exampleville\u0026quot; in this example address.\nUnited States addresses do not use levels 3 and up.\nUnited Kingdom # Address input forms in the UK should contain one address level and one, two or three address lines, depending on the address. A complete address would look like so:\n103 Frogmarch Street Upper-Wapping Winchelsea TN99 8ZZ\nThe address levels are:\naddress-level1: The post town \u0026mdash; \u0026quot;Winchelsea\u0026quot; in this case. address-line2: The locality \u0026mdash; \u0026quot;Upper-Wapping\u0026quot; in this case. address-line1: The house/street particulars \u0026mdash; \u0026quot;103 Frogmarch Street\u0026quot;. The postcode is separate. Note that you can actually use just the postcode and address-line1 to successfully deliver mail in the UK, so they should be the only mandatory items, but usually people tend to provide more details.\nChina # China can use as many as three administrative levels: the province, the city, and the district.\nThe 6 digit postal code is not always needed but when supplied it is placed separately with a label for clarity. For example:\n北京市东城区建国门北大街 8 号华润大厦 17 层 1708 单元 邮编：100005\nJapan # An address in Japan is typically written in one line, in an order from the least-specific to more-specific portions (in reverse order to the United States). There are two or three administrative levels in an address. Additional line can be used to show building names and room numbers. The postal code is separate. For example:\n〒 381-0000 長野県長野市某町 123\n\u0026quot;〒\u0026quot; and following seven digits shows the postal code.\naddress-level1 is used for prefectures or the Tokyo Metropolis; \u0026quot;長野県\u0026quot; (Nagano Prefecture) is in this case. address-level2 is typically used for cities, counties, towns and villages; \u0026quot;長野市\u0026quot; (Nagano City) in this case. \u0026quot;某町 123\u0026quot; is address-line1 which consists of an area name and a lot number. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-fe-autocomplete]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Android Chrome Android Firefox Opera Safari Samsung Internet Explorer for Android on IOS Android autocomplete 14 ≤79 4 No ≤12.1 6 4.4 18 4 ≤12.1 6 1.0\n\\[\\\u0026quot;In Chrome 66, support was added for \\[\\\u0026quot;In Chrome 66, support was added for \\[\\\u0026quot;In Chrome 66, support was added for \\[\\\u0026quot;In Samsung Internet 9.0, support was the `\u0026lt;textarea\u0026gt;` and `\u0026lt;select\u0026gt;` the `\u0026lt;textarea\u0026gt;` and `\u0026lt;select\u0026gt;` the `\u0026lt;textarea\u0026gt;` and `\u0026lt;select\u0026gt;` added for the `\u0026lt;textarea\u0026gt;` and elements.\\\u0026quot;, \\\u0026quot;Originally only supported elements.\\\u0026quot;, \\\u0026quot;Originally only supported elements.\\\u0026quot;, \\\u0026quot;Originally only supported `\u0026lt;select\u0026gt;` elements.\\\u0026quot;, \\\u0026quot;Originally on the `\u0026lt;input\u0026gt;` element.\\\u0026quot;, \\\u0026quot;Chrome on the `\u0026lt;input\u0026gt;` element.\\\u0026quot;, \\\u0026quot;Chrome on the `\u0026lt;input\u0026gt;` element.\\\u0026quot;, \\\u0026quot;Chrome only supported on the `\u0026lt;input\u0026gt;` does not accept `off` as a value. See does not accept `off` as a value. See does not accept `off` as a value. See element.\\\u0026quot;, \\\u0026quot;Samsung Internet does not [bug [bug [bug accept `off` as a value. See [bug 587466](https://crbug.com/587466).\\\u0026quot;\\] 587466](https://crbug.com/587466).\\\u0026quot;\\] 587466](https://crbug.com/587466).\\\u0026quot;\\] 587466](https://crbug.com/587466).\\\u0026quot;\\] new-password No No 67 No No No No No 67 No No No\none-time-code 93 93 No No 79 12 No 84 No 60 12 14.0\nwebauthn 108 108 No No 94 No 108 108 No 73 No 21.0 # :::\nSee also # ::: section-content\nThe \u0026lt;input\u0026gt; element The \u0026lt;select\u0026gt; element The \u0026lt;textarea\u0026gt; element The \u0026lt;form\u0026gt; element HTML forms All global attributes ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete{._attribution-link} :::\n"},{"id":22,"href":"/docs/references/languages/html/attributes/capture/","title":"Capture","section":"HTML","content":" HTML attribute: capture # ::: section-content The capture attribute specifies that, optionally, a new file should be captured, and which device should be used to capture that new media of a type defined by the accept attribute.\nValues include user and environment. The capture attribute is supported on the file input type.\nThe capture attribute takes as its value a string that specifies which camera to use for capture of image or video data, if the accept attribute indicates that the input should be of one of those types.\nValue Description user The user-facing camera and/or microphone should be used. environment The outward-facing camera and/or microphone should be used ::: {#sect1 .notecard .note} Note: Capture was previously a Boolean attribute which, if present, requested that the device's media capture device(s) such as camera or microphone be used instead of requesting a file input. ::: :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: capture # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Take a picture of your face:\n\u0026lt;input type=\u0026quot;file\u0026quot; name=\u0026quot;picture\u0026quot; accept=\u0026quot;image/*\u0026quot; capture=\u0026quot;user\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;voice\u0026quot;\u0026gt;Record a sample of your voice:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;file\u0026quot; name=\u0026quot;voice\u0026quot; accept=\u0026quot;audio/*\u0026quot; capture /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; margin-top: 1rem; }\ninput { margin-bottom: 1rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nExamples # ::: section-content When set on a file input type, operating systems with microphones and cameras will display a user interface allowing the selection from an existing file or the creating of a new one.\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;soundFile\u0026#34;\u0026gt;What does your voice sound like?:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;soundFile\u0026#34; capture=\u0026#34;user\u0026#34; accept=\u0026#34;audio/*\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;videoFile\u0026#34;\u0026gt;Upload a video:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;videoFile\u0026#34; capture=\u0026#34;environment\u0026#34; accept=\u0026#34;video/*\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;imageFile\u0026#34;\u0026gt;Upload a photo of yourself:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;imageFile\u0026#34; capture=\u0026#34;user\u0026#34; accept=\u0026#34;image/*\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; :::\n::: {#sect2 .code-example} ::: iframe ::: :::\nNote these work better on mobile devices; if your device is a desktop computer, you'll likely get a typical file picker. :::\nSpecifications # ::: _table # Specification # HTML Media Capture\n[# dfn-capture]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet capture No No No No No No 4.4 25 79 14 10 1.5 :::\nSee also # ::: section-content\nUsing files from web applications File API HTMLInputElement.files ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/capture{._attribution-link} :::\n"},{"id":23,"href":"/docs/references/languages/html/attributes/crossorigin/","title":"Crossorigin","section":"HTML","content":" HTML attribute: crossorigin # ::: section-content The crossorigin attribute, valid on the \u0026lt;audio\u0026gt;, \u0026lt;img\u0026gt;, \u0026lt;link\u0026gt;, \u0026lt;script\u0026gt;, and \u0026lt;video\u0026gt; elements, provides support for CORS, defining how the element handles cross-origin requests, thereby enabling the configuration of the CORS requests for the element's fetched data. Depending on the element, the attribute can be a CORS settings attribute.\nThe crossorigin content attribute on media elements is a CORS settings attribute.\nThese attributes are enumerated, and have the following possible values:\nanonymous Request uses CORS headers and credentials flag is set to 'same-origin'. There is no exchange of user credentials via cookies, client-side TLS certificates or HTTP authentication, unless destination is the same origin.\nuse-credentials Request uses CORS headers, credentials flag is set to 'include' and user credentials are always included.\n\u0026quot;\u0026quot; Setting the attribute name to an empty value, like crossorigin or crossorigin=\u0026quot;\u0026quot;, is the same as anonymous.\nAn invalid keyword and an empty string will be handled as the anonymous keyword.\nBy default (that is, when the attribute is not specified), CORS is not used at all. The user agent will not ask for permission for full access to the resource and in the case of a cross-origin request, certain limitations will be applied based on the type of element concerned:\nElement Restrictions img, audio, video When resource is placed in \u0026lt;canvas\u0026gt;, element is marked as tainted. script Access to error logging via window.onerror will be limited. link Request with no appropriate crossorigin header may be discarded. ::: {#sect2 .notecard .note} Note: The crossorigin attribute is not supported for rel=\u0026quot;icon\u0026quot; in Chromium-based browsers. See the open Chromium issue{target=\u0026quot;_blank\u0026quot;}. ::: :::\nExample: crossorigin with the \u0026lt;script\u0026gt; element # ::: section-content You can use the following \u0026lt;script\u0026gt; element to tell a browser to execute the https://example.com/example-framework.js script without sending user-credentials.\n::: code-example [html]{.language-name}\n\u0026lt;script src=\u0026#34;https://example.com/example-framework.js\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ::: :::\nExample: Web manifest with credentials # ::: section-content The use-credentials value must be used when fetching a manifest that requires credentials, even if the file is from the same origin.\n::: code-example [html]{.language-name}\n\u0026lt;link rel=\u0026#34;manifest\u0026#34; href=\u0026#34;/app.webmanifest\u0026#34; crossorigin=\u0026#34;use-credentials\u0026#34; /\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# cors-settings-attributes]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari Samsung Explorer Android Android Android on IOS Internet crossorigin 33 ≤18 74 No 20 10 4.4.3 33 79 20 10 2.0\n12--74 14--79 With `crossorigin=\u0026quot;use-credentials\u0026quot;`, With `crossorigin=\u0026quot;use-credentials\u0026quot;`, cookies aren\\'t sent during seek. See cookies aren\\'t sent during seek. See [bug [bug 1532722](https://bugzil.la/1532722). 1532722](https://bugzil.la/1532722). :::\n::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari on IOS Samsung Explorer Android Android for Android Internet Android crossorigin 19 14 14 No 12 6 4.4 25 14 12 6 1.5\nThe `crossorigin` attribute was The `crossorigin` attribute was implemented in WebKit in WebKit [bug implemented in WebKit in WebKit [bug 81438](https://webkit.org/b/81438). 81438](https://webkit.org/b/81438). :::\n::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Opera Safari Samsung Explorer Android Android Android Android on IOS Internet crossorigin 34 17 18 No 21 10 37 34 18 21 10 2.0\nBefore Firefox Before Firefox 83, 83, `crossorigin` `crossorigin` is not is not supported for supported for `rel=\u0026quot;icon\u0026quot;`. `rel=\u0026quot;icon\u0026quot;`. :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet crossorigin 13 12 8 Yes 15 6 4.4 18 8 14 6 1.0 :::\nhtml.elements.img.crossorigin # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.link.crossorigin # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.script.crossorigin # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.video.crossorigin # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nSee also # ::: section-content\nCross-Origin Resource Sharing (CORS) HTML attribute: rel ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin{._attribution-link} :::\n"},{"id":24,"href":"/docs/references/languages/html/attributes/dirname/","title":"Dirname","section":"HTML","content":" HTML attribute: dirname # ::: section-content The dirname attribute can be used on \u0026lt;textarea\u0026gt; and \u0026lt;input\u0026gt; elements and describes the directionality of the element's text content during form submission. The browser uses this attribute's value to determine whether text the user has entered is left-to-right or right-to-left oriented. When used, the element's text directionality value is included in form submission data along with the dirname attribute's value as the name of the field. :::\nUsage notes # ::: section-content The dirname attribute can be used on any \u0026lt;textarea\u0026gt; element, or any \u0026lt;input\u0026gt; element with text, search, tel, url, or email type.\nThe format of the submitted data is {dirname_value}={direction} where {dirname_value} is the value of the dirname attribute and {direction} is the directionality of the text. For example, if the user enters \u0026quot;Hello\u0026quot; in an element with the attributes name=\u0026quot;comment\u0026quot; and dirname=\u0026quot;comment-direction\u0026quot;, the URL-encoded form submission data for GET requests will be comment=Hello\u0026amp;comment-direction=ltr. The directionality is one of the following:\nrtl The text entered by the user is in a right-to-left writing direction.\nltr The text entered by the user is in a left-to-right writing direction.\nIf no text directionality is specified, the user agent will use the directionality of the parent element containing the form, and if that is not specified, the default directionality of the user agent. :::\nExamples # Textarea element directionality # ::: section-content In this example, the dir=\u0026quot;auto\u0026quot; attribute on the textarea element allows the text directionality to be determined automatically based on the text entered by the user:\n::: code-example [html]{.language-name}\n\u0026lt;form method=\u0026#34;get\u0026#34; action=\u0026#34;https://www.example.com/submit\u0026#34;\u0026gt; \u0026lt;textarea name=\u0026#34;comment\u0026#34; dir=\u0026#34;auto\u0026#34; dirname=\u0026#34;comment-direction\u0026#34;\u0026gt;سيب\u0026lt;/textarea\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Send my greetings\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nWhen the user submits the form, the user agent includes two fields, one called comment with the value \u0026quot;سيب\u0026quot;, and one called comment-direction with the value \u0026quot;rtl\u0026quot;. The URL-encoded submission body looks like this:\n::: code-example [url]{.language-name}\nhttps://www.example.com/submit?comment=%D8%B3%D9%8A%D8%A8\u0026amp;comment-direction=rtl ::: :::\nInput element directionality # ::: section-content In this example, the dir=\u0026quot;auto\u0026quot; attribute on the input element allows the text directionality to be determined automatically based on the text entered by the user:\n::: code-example [html]{.language-name}\n\u0026lt;form method=\u0026#34;get\u0026#34; action=\u0026#34;https://www.example.com/submit\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;comment-input\u0026#34; dir=\u0026#34;auto\u0026#34; dirname=\u0026#34;comment-direction\u0026#34; value=\u0026#34;Hello\u0026#34; /\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Send my greetings\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nWhen the user submits the form, the user agent includes two fields, one called comment-input with the value \u0026quot;Hello\u0026quot;, and one called comment-direction with the value \u0026quot;ltr\u0026quot;:\n::: code-example [url]{.language-name}\nhttps://www.example.com/submit?comment-input=Hello\u0026amp;comment-direction=ltr ::: :::\nInheriting directionality # ::: section-content The following \u0026lt;input\u0026gt; and \u0026lt;textarea\u0026gt; elements do not have a dir attribute, so they inherit the explicit directionality of their parent element, which is rtl:\n::: code-example [html]{.language-name}\n\u0026lt;div dir=\u0026#34;rtl\u0026#34;\u0026gt; \u0026lt;form method=\u0026#34;get\u0026#34; action=\u0026#34;https://www.example.com/submit\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;user\u0026#34; dirname=\u0026#34;user-direction\u0026#34; value=\u0026#34;LTR Username\u0026#34; /\u0026gt; \u0026lt;textarea name=\u0026#34;comment\u0026#34; dirname=\u0026#34;comment-direction\u0026#34;\u0026gt;LTR Comment\u0026lt;/textarea\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Post Comment\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nThe URL-encoded submission body looks like this:\n::: code-example [url]{.language-name}\nhttps://www.example.com/submit?user=LTR+Username\u0026amp;user-direction=rtl\u0026amp;comment=LTR+Comment\u0026amp;comment-direction=rtl ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-fe-dirname]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet dirname 17 79 116 No ≤12.1 6 4.4 18 116 ≤12.1 6 1.0 :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet dirname 17 79 116 No ≤12.1 6 ≤37 18 116 ≤12.1 6 1.0 :::\nhtml.elements.textarea.dirname # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.input.dirname # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nSee also # ::: section-content\ndir attribute \u0026lt;input\u0026gt; \u0026lt;textarea\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/dirname{._attribution-link} :::\n"},{"id":25,"href":"/docs/references/languages/html/attributes/disabled/","title":"Disabled","section":"HTML","content":" HTML attribute: disabled # ::: section-content The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: disabled # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Name: \u0026lt;label for=\u0026quot;emp\u0026quot;\u0026gt;Employed:\u0026lt;/label\u0026gt; \u0026lt;select name=\u0026quot;emp\u0026quot; disabled\u0026gt; \u0026lt;option\u0026gt;No\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Yes\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;label for=\u0026quot;empDate\u0026quot;\u0026gt;Employment Date:\u0026lt;/label\u0026gt; \u0026lt;input name=\u0026quot;empDate\u0026quot; type=\u0026quot;date\u0026quot; disabled /\u0026gt; \u0026lt;label for=\u0026quot;resume\u0026quot;\u0026gt;Resume:\u0026lt;/label\u0026gt; \u0026lt;input name=\u0026quot;resume\u0026quot; type=\u0026quot;file\u0026quot; /\u0026gt; \u0026lt;/form\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; margin-top: 1em; }\n*:disabled { background-color: dimgrey; color: linen; opacity: 1; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nOverview # ::: section-content If the disabled attribute is specified on a form control, the element and its form control descendants do not participate in constraint validation. Often browsers grey out such controls and it won't receive any browsing events, like mouse clicks or focus-related ones.\nThe disabled attribute is supported by \u0026lt;button\u0026gt;, \u0026lt;fieldset\u0026gt;, \u0026lt;optgroup\u0026gt;, \u0026lt;option\u0026gt;, \u0026lt;select\u0026gt;, \u0026lt;textarea\u0026gt; and \u0026lt;input\u0026gt;.\nThis Boolean disabled attribute indicates that the user cannot interact with the control or its descendant controls. If this attribute is not specified, the control inherits its setting from the containing element, for example fieldset; if there is no containing element with the disabled attribute set, and the control itself does not have the attribute, then the control is enabled. If declared on an \u0026lt;optgroup\u0026gt;, the select is still interactive (unless otherwise disabled), but none of the items in the option group are selectable.\n::: {#sect1 .notecard .note} Note: If a \u0026lt;fieldset\u0026gt; is disabled, the descendant form controls are all disabled, with the exception of form controls within the \u0026lt;legend\u0026gt;. :::\nWhen a supporting element has the disabled attribute applied, the :disabled pseudo-class also applies to it. Conversely, elements that support the disabled attribute but don't have the attribute set match the :enabled pseudo-class.\nThis Boolean attribute prevents the user from interacting with the button. If this attribute isn't set, the button can still be disabled from a containing element, for example \u0026lt;fieldset\u0026gt;; if there is no containing element with the disabled attribute set, then the button is enabled.\nFirefox will, unlike other browsers, persist the dynamic disabled state of a \u0026lt;button\u0026gt; across page loads. Use the autocomplete attribute to control this feature. :::\nAttribute interactions # ::: section-content The difference between disabled and readonly is that read-only controls can still function and are still focusable, whereas disabled controls can not receive focus and are not submitted with the form and generally do not function as controls until they are enabled.\nBecause a disabled field cannot have its value changed, required does not have any effect on inputs with the disabled attribute also specified. Additionally, since the elements become immutable, most other attributes, such as pattern, have no effect, until the control is enabled.\n::: {#sect2 .notecard .note} Note: The required attribute is not permitted on inputs with the disabled attribute specified. ::: :::\nUsability # ::: section-content Browsers display disabled form controls greyed as disabled form controls are immutable, won't receive focus or any browsing events, like mouse clicks or focus-related ones, and aren't submitted with the form.\nIf present on a supporting elements, the :disabled pseudo class will match. If the attribute is not included, the :enabled pseudo class will match. If the element doesn't support the disabled attribute, the attribute will have no effect, including not leading to being matched by the :disabled and :enabled pseudo classes. :::\nConstraint validation # ::: section-content If the element is disabled, then the element's value can not receive focus and cannot be updated by the user, and does not participate in constraint validation. :::\nExamples # ::: section-content When form controls are disabled, many browsers will display them in a lighter, greyed-out color by default. Here are examples of a disabled checkbox, radio button, \u0026lt;option\u0026gt; and \u0026lt;optgroup\u0026gt;, as well as some form controls that are disabled via the disabled attribute set on the ancestor \u0026lt;fieldset\u0026gt; element. The \u0026lt;option\u0026gt;s are disabled, but the \u0026lt;select\u0026gt; itself is not. We could have disable the entire \u0026lt;select\u0026gt; by adding the attribute to that element rather than its descendants.\n::: code-example [html]{.language-name}\n\u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Checkboxes\u0026lt;/legend\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;chbox\u0026#34; value=\u0026#34;regular\u0026#34; /\u0026gt; Regular \u0026lt;/label\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;chbox\u0026#34; value=\u0026#34;disabled\u0026#34; disabled /\u0026gt; disabled \u0026lt;/label\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Radio buttons\u0026lt;/legend\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;radio\u0026#34; value=\u0026#34;regular\u0026#34; /\u0026gt; Regular \u0026lt;/label\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;radio\u0026#34; value=\u0026#34;disabled\u0026#34; disabled /\u0026gt; disabled \u0026lt;/label\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label \u0026gt;Select an option: \u0026lt;select\u0026gt; \u0026lt;optgroup label=\u0026#34;Group 1\u0026#34;\u0026gt; \u0026lt;option\u0026gt;Option 1.1\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;optgroup label=\u0026#34;Group 2\u0026#34;\u0026gt; \u0026lt;option\u0026gt;Option 2.1\u0026lt;/option\u0026gt; \u0026lt;option disabled\u0026gt;Option 2.2\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Option 2.3\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;optgroup label=\u0026#34;Group 3\u0026#34; disabled\u0026gt; \u0026lt;option\u0026gt;Disabled 3.1\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Disabled 3.2\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Disabled 3.3\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;fieldset disabled\u0026gt; \u0026lt;legend\u0026gt;Disabled fieldset\u0026lt;/legend\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label\u0026gt; Name: \u0026lt;input type=\u0026#34;name\u0026#34; name=\u0026#34;radio\u0026#34; value=\u0026#34;regular\u0026#34; /\u0026gt; Regular \u0026lt;/label\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label\u0026gt;Number: \u0026lt;input type=\u0026#34;number\u0026#34; /\u0026gt;\u0026lt;/label\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/fieldset\u0026gt; :::\n::: {#sect3 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-fe-disabled]{.small}\nHTML Standard\n[# attr-optgroup-disabled]{.small}\nHTML Standard\n[# attr-option-disabled]{.small} # :::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet disabled 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet disabled 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet disabled 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet disabled 1 12 1 8 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet disabled 1 12 1 5.5 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 :::\n::: _table # Desktop Mobile Chrome Edge Firefox Internet Explorer Opera Safari WebView Chrome Firefox Opera Safari Samsung Android Android for Android on IOS Internet Android disabled 20 12 4 Yes 12 6 4.4 25 4 12 6 1.5\nDoes not work with nested fieldsets. For example: Not all form control descendants of a disabled fieldset are properly disabled in IE11; see IE [bug 817488: input\\[type=\\'file\\'\\] not `\u0026lt;fieldset disabled\u0026gt;\u0026lt;fieldset\u0026gt;\u0026lt;!--Still enabled--\u0026gt;\u0026lt;/fieldset\u0026gt;\u0026lt;/fieldset\u0026gt;` disabled inside disabled fieldset](https://connect.microsoft.com/IE/feedbackdetail/view/817488) and IE [bug 962368: Can still edit input\\[type=\\'text\\'\\] within fieldset\\[disabled\\]](https://connect.microsoft.com/IE/feedbackdetail/view/962368/can-still-edit-input-type-text-within-fieldset-disabled). :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet disabled 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nhtml.elements.button.disabled # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.fieldset.disabled # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.input.disabled # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.optgroup.disabled # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.option.disabled # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.select.disabled # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.textarea.disabled # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nSee also # ::: section-content\n:disabled and :enabled ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled{._attribution-link} :::\n"},{"id":26,"href":"/docs/references/languages/html/attributes/elementtiming/","title":"Elementtiming","section":"HTML","content":" HTML attribute: elementtiming # ::: section-content The elementtiming attribute is used to indicate that an element is flagged for tracking by PerformanceObserver objects using the \u0026quot;element\u0026quot; type. For more details, see the PerformanceElementTiming interface.\nThis attribute may be applied to \u0026lt;img\u0026gt;, \u0026lt;image\u0026gt; elements inside an \u0026lt;svg\u0026gt;, poster images of \u0026lt;video\u0026gt; elements, elements which have a background-image, and elements containing text nodes, such as a \u0026lt;p\u0026gt;.\nIn the DOM, this attribute is reflected as Element.elementTiming. :::\nUsage # ::: section-content The value given for elementtiming becomes an identifier for the observed element.\n::: code-example [html]{.language-name}\n\u0026lt;img alt=\u0026#34;alt\u0026#34; src=\u0026#34;img.jpg\u0026#34; elementtiming=\u0026#34;label for element\u0026#34; /\u0026gt; :::\nGood contenders for elements you might want to observe are:\nThe main image for an article. A blog post title Images in a carousel for a shopping site. The poster image for the main video on a page. ::: Examples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;img alt=\u0026#34;Alt for a main blog post image\u0026#34; src=\u0026#34;my-massive-image.jpg\u0026#34; elementtiming=\u0026#34;Main image\u0026#34;\u0026gt; \u0026lt;p elementtiming=\u0026#34;important-text\u0026#34;\u0026gt;Some very important information.\u0026lt;/p\u0026#34;\u0026gt; ::: :::\nSee also # ::: section-content\nPerformanceElementTiming Element.elementTiming ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/elementtiming{._attribution-link} :::\n"},{"id":27,"href":"/docs/references/languages/html/attributes/for/","title":"For","section":"HTML","content":" HTML attribute: for # ::: section-content The for attribute is an allowed attribute for \u0026lt;label\u0026gt; and \u0026lt;output\u0026gt;. When used on a \u0026lt;label\u0026gt; element it indicates the form element that this label describes. When used on an \u0026lt;output\u0026gt; element it allows for an explicit relationship between the elements that represent values which are used in the output. :::\nUsage # ::: section-content When used as an attribute of \u0026lt;label\u0026gt;, the for attribute has a value which is the id of the form element it relates to.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;username\u0026#34;\u0026gt;Your name\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;username\u0026#34; /\u0026gt; :::\nWhen used as an attribute of \u0026lt;output\u0026gt;, the for attribute has a value which is a space separated list of the id values of the elements which are used to create the output.\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;range\u0026#34; id=\u0026#34;b\u0026#34; name=\u0026#34;b\u0026#34; value=\u0026#34;50\u0026#34; /\u0026gt; + \u0026lt;input type=\u0026#34;number\u0026#34; id=\u0026#34;a\u0026#34; name=\u0026#34;a\u0026#34; value=\u0026#34;10\u0026#34; /\u0026gt; = \u0026lt;output name=\u0026#34;result\u0026#34; for=\u0026#34;a b\u0026#34;\u0026gt;60\u0026lt;/output\u0026gt; ::: :::\nExamples # ::: section-content See examples of usage on the element pages for \u0026lt;label\u0026gt; and \u0026lt;output\u0026gt;. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-label-for]{.small}\nHTML Standard\n[# attr-output-for]{.small} # :::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet for 10 ≤18 4 No 11 7 4.4 18 4 11 7 1.0 :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet for 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nhtml.elements.label.for # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.output.for # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/for{._attribution-link} :::\n"},{"id":28,"href":"/docs/references/languages/html/attributes/max/","title":"Max","section":"HTML","content":" HTML attribute: max # ::: section-content The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute. If the value of the element is greater than this, the element fails validation. This value must be greater than or equal to the value of the min attribute. If the max attribute is present but is not specified or is invalid, no max value is applied. If the max attribute is valid and a non-empty value is greater than the maximum allowed by the max attribute, constraint validation will prevent form submission.\nValid for the numeric input types, including the date, month, week, time, datetime-local, number and range types, and both the \u0026lt;progress\u0026gt; and \u0026lt;meter\u0026gt; elements, the max attribute is a number that specifies the most positive value a form control to be considered valid.\nIf the value exceeds the max value allowed, the validityState.rangeOverflow will be true, and the control will be matched by the :out-of-range and :invalid pseudo-classes. :::\nSyntax # ::: section-content\nSyntax for max values by input type Input type Syntax Example date yyyy-mm-dd \u0026lt;input type=\"date\" max=\"2019-12-25\" step=\"1\"\u0026gt; month yyyy-mm \u0026lt;input type=\"month\" max=\"2019-12\" step=\"12\"\u0026gt; week yyyy-W## \u0026lt;input type=\"week\" max=\"2019-W23\" step=\"\"\u0026gt; time hh:mm \u0026lt;input type=\"time\" max=\"17:00\" step=\"900\"\u0026gt; datetime-local yyyy-mm-ddThh:mm \u0026lt;input type=\"datetime-local\" max=\"2019-12-25T23:59\"\u0026gt; number \u0026lt;number\u0026gt; \u0026lt;input type=\"number\" min=\"0\" step=\"5\" max=\"100\"\u0026gt; range \u0026lt;number\u0026gt; \u0026lt;input type=\"range\" min=\"60\" step=\"5\" max=\"100\"\u0026gt; ::: {#sect1 .notecard .note} Note: When the data entered by the user doesn't adhere to the maximum value set, the value is considered invalid in constraint validation and will match the :invalid and :out-of-range pseudo-classes. :::\nSee Client-side validation and rangeOverflow for more information.\nFor the \u0026lt;progress\u0026gt; element, the max attribute describes how much work the task indicated by the progress element requires. If present, must have a value greater than zero and be a valid floating point number. For the \u0026lt;meter\u0026gt; element, the max attribute defines the upper numeric bound of the measured range. This must be greater than the minimum value ( min attribute), if specified. In both cases, if omitted, the value defaults to 1.\nSyntax for max values for other elements Input type Syntax Example \u0026lt;progress\u0026gt; \u0026lt;number\u0026gt; \u0026lt;progress id=\"file\" max=\"100\" value=\"70\"\u0026gt; 70% \u0026lt;/progress\u0026gt; \u0026lt;meter\u0026gt; \u0026lt;number\u0026gt; \u0026lt;meter id=\"fuel\" min=\"0\" max=\"100\" low=\"33\" high=\"66\" optimum=\"80\" value=\"40\"\u0026gt; at 40/100\u0026lt;/meter\u0026gt; ::: Accessibility concerns # ::: section-content Provide instructions to help users understand how to complete the form and use individual form controls. Indicate any required and optional input, data formats, and other relevant information. When using the max attribute, ensure this maximum requirement is understood by the user. Providing instructions within the \u0026lt;label\u0026gt; may be sufficient. If providing instructions outside of labels, which allows more flexible positioning and design, consider using aria-labelledby or aria-describedby. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-min-and-max-attributes]{.small}\nHTML Standard\n[# attr-meter-max]{.small}\nHTML Standard\n[# attr-progress-max]{.small} # :::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet max 6 12 6 10 11 6 4.4 18 6 11 7 1.0 :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet max 6 ≤18 16 No 11 6 No 18 16 11 10.3 1.0 :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet max 4 12 16 10 ≤12.1 5 ≤37 18 16 ≤12.1 4 1.0 :::\nhtml.elements.input.max # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.meter.max # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.progress.max # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nSee also # ::: section-content\nstep min other meter attributes: low{.page-not-created}, high{.page-not-created}, optimum{.page-not-created} Constraint validation Form validation validityState.rangeOverflow :out-of-range \u0026lt;input\u0026gt; date, month, week, time, datetime-local, number and range types, and the \u0026lt;meter\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max{._attribution-link} :::\n"},{"id":29,"href":"/docs/references/languages/html/attributes/maxlength/","title":"Maxlength","section":"HTML","content":" HTML attribute: maxlength # ::: section-content The maxlength attribute defines the maximum string length that the user can enter into an \u0026lt;input\u0026gt; or \u0026lt;textarea\u0026gt;. The attribute must have an integer value of 0 or higher.\nThe length is measured in UTF-16 code units, which ( for most scripts) is equivalent to the number of characters. If no maxlength is specified, or an invalid value is specified, the input has no maximum length.\nAny maxlength value must be greater than or equal to the value of minlength, if present and valid. The input will fail constraint validation if the length of the text value of the field is greater than maxlength UTF-16 code units long. Constraint validation is only applied when the value is changed by the user. :::\nConstraint validation # ::: section-content While the browser will generally prevent user from entering more text than the maxlength attribute allows, should the length be longer than the maxlength allows, the read-only tooLong property of a ValidityState object will be true. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: maxlength # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Product name: \u0026lt;label for=\u0026quot;description\u0026quot;\u0026gt;Product description:\u0026lt;/label\u0026gt; \u0026lt;textarea name=\u0026quot;description\u0026quot; minlength=\u0026quot;10\u0026quot; maxlength=\u0026quot;40\u0026quot; required\u0026gt;\u0026lt;/textarea\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; margin-top: 1em; }\ninput:valid, textarea:valid { background-color: palegreen; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;password\u0026#34; maxlength=\u0026#34;4\u0026#34; /\u0026gt; :::\n::: {#sect1 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-maxlength-and-minlength-attributes]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet maxlength 4 12 4 10 ≤12.1 5 ≤37 18 4 ≤12.1 5 1.0 :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet maxlength 1 12 1 5.5 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 :::\nhtml.elements.input.maxlength # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.textarea.maxlength # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nSee also # ::: section-content\nminlength size pattern Constraint validation Form validation \u0026lt;input\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength{._attribution-link} :::\n"},{"id":30,"href":"/docs/references/languages/html/attributes/min/","title":"Min","section":"HTML","content":" HTML attribute: min # ::: section-content The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute. If the value of the element is less than this, the element fails validation. This value must be less than or equal to the value of the max attribute.\nSome input types have a default minimum. If the input has no default minimum and a value is specified for min that can't be converted to a valid number (or no minimum value is set), the input has no minimum value.\nIt is valid for the input types including: date, month, week, time, datetime-local, number and range types, and the \u0026lt;meter\u0026gt; element. :::\nSyntax # ::: section-content\nSyntax for min values by input type Input type Syntax Example date yyyy-mm-dd \u0026lt;input type=\"date\" min=\"2019-12-25\" step=\"1\"\u0026gt; month yyyy-mm \u0026lt;input type=\"month\" min=\"2019-12\" step=\"12\"\u0026gt; week yyyy-W## \u0026lt;input type=\"week\" min=\"2019-W23\" step=\"\"\u0026gt; time hh:mm \u0026lt;input type=\"time\" min=\"09:00\" step=\"900\"\u0026gt; datetime-local yyyy-mm-ddThh:mm \u0026lt;input type=\"datetime-local\" min=\"2019-12-25T19:30\"\u0026gt; number \u0026lt;number\u0026gt; \u0026lt;input type=\"number\" min=\"0\" step=\"5\" max=\"100\"\u0026gt; range \u0026lt;number\u0026gt; \u0026lt;input type=\"range\" min=\"60\" step=\"5\" max=\"100\"\u0026gt; ::: {#sect1 .notecard .note} Note: When the data entered by the user doesn't adhere to the min value set, the value is considered invalid in constraint validation and will match the :invalid and :out-of-range pseudo-classes. :::\nSee Client-side validation and rangeUnderflow for more information.\nFor the \u0026lt;meter\u0026gt; element, the min attribute defines the lower numeric bound of the measured range. This must be less than the minimum value ( max attribute), if specified. In both cases, if omitted, the value defaults to 1.\nSyntax for min values for other elements Input type Syntax Example \u0026lt;meter\u0026gt; \u0026lt;number\u0026gt; \u0026lt;meter id=\"fuel\" min=\"0\" max=\"100\" low=\"33\" high=\"66\" optimum=\"80\" value=\"40\"\u0026gt; at 40/100\u0026lt;/meter\u0026gt; ::: Impact on step # ::: section-content The value of min and step define what are valid values, even if the step attribute is not included, as step defaults to 0.\nWe add a big red border around invalid inputs:\n::: code-example [css]{.language-name}\ninput:invalid { border: solid red 3px; } :::\nThen define an input with a minimum value of 7.2, omitting the step attribute, wherein it defaults to 1.\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;myNumber\u0026#34; name=\u0026#34;myNumber\u0026#34; type=\u0026#34;number\u0026#34; min=\u0026#34;7.2\u0026#34; value=\u0026#34;8\u0026#34; /\u0026gt; :::\nBecause step defaults to 1, valid values include 7.2, 8.2, 9.2, and so on. The value 8 is not valid. As we included an invalid value, supporting browsers will show the value as invalid.\n::: {#sect2 .code-example} ::: iframe ::: :::\nIf not explicitly included, step defaults to 1 for number and range, and 1 unit type (second, week, month, day) for the date/time input types. :::\nAccessibility concerns # ::: section-content Provide instructions to help users understand how to complete the form and use individual form controls. Indicate any required and optional input, data formats, and other relevant information. When using the min attribute, ensure this minimum requirement is understood by the user. Providing instructions within the \u0026lt;label\u0026gt; may be sufficient. If providing instructions outside of labels, which allows more flexible positioning and design, consider using aria-labelledby or aria-describedby. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-min-and-max-attributes]{.small}\nHTML Standard\n[# attr-meter-max]{.small} # :::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet min 6 ≤18 16 No 11 6 No 18 16 11 10.3 1.0 :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet min 4 12 16 10 ≤12.1 5 ≤37 18 16 ≤12.1 4 1.0 :::\nhtml.elements.input.min # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.meter.min # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nSee also # ::: section-content\nstep max other meter attributes: low{.page-not-created}, high{.page-not-created}, optimum{.page-not-created} Constraint validation Form validation validityState.rangeUnderflow :out-of-range \u0026lt;input\u0026gt; date, month, week, time, datetime-local, number and range types, and the \u0026lt;meter\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min{._attribution-link} :::\n"},{"id":31,"href":"/docs/references/languages/html/attributes/minlength/","title":"Minlength","section":"HTML","content":" HTML attribute: minlength # ::: section-content The minlength attribute defines the minimum string length that the user can enter into an \u0026lt;input\u0026gt; or \u0026lt;textarea\u0026gt;. The attribute must have an integer value of 0 or higher.\nThe length is measured in UTF-16 code units, which ( for most scripts) is equivalent to the number of characters. If no minlength is specified, or an invalid value is specified, the input has no minimum length. This value must be less than or equal to the value of maxlength, otherwise the value will never be valid, as it is impossible to meet both criteria.\nThe input will fail constraint validation if the length of the text value of the field is less than minlength UTF-16 code units long, with validityState.tooShort returning true. Constraint validation is only applied when the value is changed by the user. Once submission fails, some browsers will display an error message indicating the minimum length required and the current length. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: minlength # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Product name: \u0026lt;label for=\u0026quot;description\u0026quot;\u0026gt;Product description:\u0026lt;/label\u0026gt; \u0026lt;textarea name=\u0026quot;description\u0026quot; minlength=\u0026quot;10\u0026quot; maxlength=\u0026quot;40\u0026quot; required\u0026gt;\u0026lt;/textarea\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; margin-top: 1em; }\ninput:valid, textarea:valid { background-color: palegreen; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nExamples # ::: section-content By adding minlength=\u0026quot;5\u0026quot;, the value must either be empty or five characters or longer to be valid.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;fruit\u0026#34;\u0026gt;Enter a fruit name that is at least 5 letters long\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; minlength=\u0026#34;5\u0026#34; id=\u0026#34;fruit\u0026#34; /\u0026gt; :::\nWe can use pseudoclasses to style the element based on whether the value is valid. The value will be valid as long as it is either null (empty) or five or more characters long. Lime is invalid, lemon is valid.\n::: code-example [css]{.language-name}\ninput { border: 2px solid currentcolor; } input:invalid { border: 2px dashed red; } input:invalid:focus { background-image: linear-gradient(pink, lightgreen); } :::\n::: {#sect1 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-maxlength-and-minlength-attributes]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet minlength 40 17 51 No 27 10.1 40 40 51 27 10.3 4.0 :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet minlength 40 17 51 No 27 10.1 40 40 51 27 10.3 4.0 :::\nhtml.elements.input.minlength # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.textarea.minlength # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nSee also # ::: section-content\nmaxlength size pattern Constraint validation Form validation \u0026lt;input\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlength{._attribution-link} :::\n"},{"id":32,"href":"/docs/references/languages/html/attributes/multiple/","title":"Multiple","section":"HTML","content":" HTML attribute: multiple # ::: section-content The Boolean multiple attribute, if set, means the form control accepts one or more values. Valid for the email and file input types and the \u0026lt;select\u0026gt;, the manner by which the user opts for multiple values depends on the form control. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: multiple # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Where should we send the receipt? \u0026lt;label for=\u0026quot;shakes\u0026quot;\u0026gt;Which shakes would you like to order?\u0026lt;/label\u0026gt; \u0026lt;select name=\u0026quot;shakes\u0026quot; multiple\u0026gt; \u0026lt;option\u0026gt;Vanilla Shake\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Strawberry Shake\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Chocolate Shake\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;label for=\u0026quot;payment\u0026quot;\u0026gt;How would you like to pay?\u0026lt;/label\u0026gt; \u0026lt;select name=\u0026quot;payment\u0026quot;\u0026gt; \u0026lt;option\u0026gt;Credit card\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Bank Transfer\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; margin-top: 1em; }\ninput, select { width: 100%; } input:invalid { background-color: lightpink; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nOverview # ::: section-content Depending on the type, the form control may have a different appearance if the multiple attribute is set. For the file input type, the native messaging the browser provides differs. In Firefox, the file input reads \u0026quot;No files selected\u0026quot; when the attribute is present and \u0026quot;No file selected\u0026quot; when it is not. Most browsers display a scrolling list box for a \u0026lt;select\u0026gt; control with the multiple attribute set and a single line dropdown when the attribute is omitted. The email input displays the same whether or not the multiple attribute is included, but will match the :invalid pseudo-class if more than one comma-separated email address is included if the attribute is not present.\nWhen multiple is set on the email input type, the user can include zero (if not also required), one or more comma-separated email addresses.\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;email\u0026#34; multiple name=\u0026#34;emails\u0026#34; id=\u0026#34;emails\u0026#34; /\u0026gt; :::\nIf and only if the multiple attribute is specified, the value can be a list of properly-formed comma-separated email addresses. Any trailing and leading whitespace is removed from each address in the list.\nWhen multiple is set on the file input type, the user can select one or more files. The user can choose multiple files from the file picker in any way that their chosen platform allows (e.g. by holding down [Shift]{.kbd} or [Control]{.kbd}, and then clicking).\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;file\u0026#34; multiple name=\u0026#34;uploads\u0026#34; id=\u0026#34;uploads\u0026#34; /\u0026gt; :::\nWhen the attribute is omitted, the user can only select a single file per \u0026lt;input\u0026gt;.\nThe multiple attribute on the \u0026lt;select\u0026gt; element represents a control for selecting zero or more options from the list of options. Otherwise, the \u0026lt;select\u0026gt; element represents a control for selecting a single \u0026lt;option\u0026gt; from the list of options.\n::: code-example [html]{.language-name}\n\u0026lt;select multiple name=\u0026#34;dwarfs\u0026#34; id=\u0026#34;dwarfs\u0026#34;\u0026gt; \u0026lt;option\u0026gt;Grumpy\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Happy\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Sleepy\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Bashful\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Sneezy\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Dopey\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Doc\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; :::\nWhen multiple is specified, most browsers will show a scrolling list box instead of a single line dropdown. :::\nAccessibility concerns # ::: section-content Provide instructions to help users understand how to complete the form and use individual form controls. Indicate any required and optional input, data formats, and other relevant information. When using the multiple attribute, inform the user that multiple values are allowed and provide directions on how to provide multiple values, such as \u0026quot;separate email addresses with a comma.\u0026quot;\nSetting size=\u0026quot;1\u0026quot; on a multiple select can make it appear as a single select in some browsers, but then it doesn't expand on focus, harming usability. Don't do that. If you do change the appearance of a select, and even if you don't, make sure to inform the user that more than one option can be selected by another method. :::\nExamples # email input # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;emails\u0026#34;\u0026gt;Who do you want to email?\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; multiple name=\u0026#34;emails\u0026#34; id=\u0026#34;emails\u0026#34; list=\u0026#34;dwarf-emails\u0026#34; required size=\u0026#34;64\u0026#34; /\u0026gt; \u0026lt;datalist id=\u0026#34;dwarf-emails\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;grumpy@woodworkers.com\u0026#34;\u0026gt;Grumpy\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;happy@woodworkers.com\u0026#34;\u0026gt;Happy\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;sleepy@woodworkers.com\u0026#34;\u0026gt;Sleepy\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;bashful@woodworkers.com\u0026#34;\u0026gt;Bashful\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;sneezy@woodworkers.com\u0026#34;\u0026gt;Sneezy\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;dopey@woodworkers.com\u0026#34;\u0026gt;Dopey\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;doc@woodworkers.com\u0026#34;\u0026gt;Doc\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\nIf and only if the multiple attribute is specified, the value can be a list of properly-formed comma-separated email addresses. Any trailing and leading whitespace is removed from each address in the list. If the required attribute is present, at least one email address is required.\nSome browsers support the appearance of the list{.page-not-created} of options from the associated \u0026lt;datalist\u0026gt; for subsequent email addresses when multiple is present. Others do not.\n::: {#sect1 .code-example} ::: iframe ::: ::: :::\nfile input # ::: section-content When multiple is set on the file input type, the user can select one or more files:\n::: code-example [html]{.language-name}\n\u0026lt;form method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;uploads\u0026#34;\u0026gt; Choose the images you want to upload: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;uploads\u0026#34; name=\u0026#34;uploads\u0026#34; accept=\u0026#34;.jpg, .jpeg, .png, .svg, .gif\u0026#34; multiple /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;text\u0026#34;\u0026gt;Pick a text file to upload: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;text\u0026#34; name=\u0026#34;text\u0026#34; accept=\u0026#34;.txt\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect2 .code-example} ::: iframe ::: :::\nNote the difference in appearance between the example with multiple set and the other file input without.\nWhen the form is submitted, had we used method=\u0026quot;get\u0026quot; each selected file's name would have been added to URL parameters as?uploads=img1.jpg\u0026amp;uploads=img2.svg. However, since we are submitting multipart{.page-not-created} form data, we much use post. See the \u0026lt;form\u0026gt; element and sending form data for more information. :::\nselect # ::: section-content The multiple attribute on the \u0026lt;select\u0026gt; element represents a control for selecting zero or more options from the list of options. Otherwise, the \u0026lt;select\u0026gt; element represents a control for selecting a single \u0026lt;option\u0026gt; from the list of options. The control generally has a different appearance based on the presence of the multiple attribute, with most browsers displaying a scrolling list box instead of a single line dropdown when the attribute is present.\n::: code-example [html]{.language-name}\n\u0026lt;form method=\u0026#34;get\u0026#34; action=\u0026#34;#\u0026#34;\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;dwarfs\u0026#34;\u0026gt;Select the dwarf woodsman you like:\u0026lt;/label\u0026gt; \u0026lt;select multiple name=\u0026#34;dwarfs\u0026#34; id=\u0026#34;dwarfs\u0026#34;\u0026gt; \u0026lt;option\u0026gt;grumpy@woodworkers.com\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;happy@woodworkers.com\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;sleepy@woodworkers.com\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;bashful@woodworkers.com\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;sneezy@woodworkers.com\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;dopey@woodworkers.com\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;doc@woodworkers.com\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;favoriteOnly\u0026#34;\u0026gt;Select your favorite:\u0026lt;/label\u0026gt; \u0026lt;select name=\u0026#34;favoriteOnly\u0026#34; id=\u0026#34;favoriteOnly\u0026#34;\u0026gt; \u0026lt;option\u0026gt;grumpy@woodworkers.com\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;happy@woodworkers.com\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;sleepy@woodworkers.com\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;bashful@woodworkers.com\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;sneezy@woodworkers.com\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;dopey@woodworkers.com\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;doc@woodworkers.com\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect3 .code-example} ::: iframe ::: :::\nNote the difference in appearance between the two form controls.\n::: code-example [css]{.language-name}\n/* uncomment this CSS to make the multiple the same height as the single */ /* select[multiple] { height: 1.5em; vertical-align: top; } select[multiple]:focus, select[multiple]:active { height: auto; } */ :::\nThere are a few ways to select multiple options in a \u0026lt;select\u0026gt; element with a multiple attribute. Depending on the operating system, mouse users can hold the [Ctrl]{.kbd}, [Command]{.kbd}, or [Shift]{.kbd} keys and then click multiple options to select/deselect them. Keyboard users can select multiple contiguous items by focusing on the \u0026lt;select\u0026gt; element, selecting an item at the top or bottom of the range they want to select using the [Up]{.kbd} and [Down]{.kbd} cursor keys to go up and down the options. The selection of non-contiguous is not as well-supported: items should be able to be selected and deselected by pressing [Space]{.kbd}, but support varies between browsers. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-input-multiple]{.small}\n:::\nSee also # ::: section-content\n\u0026lt;input\u0026gt; \u0026lt;select\u0026gt; Allowing multiple email addresses ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/multiple{._attribution-link} :::\n"},{"id":33,"href":"/docs/references/languages/html/attributes/pattern/","title":"Pattern","section":"HTML","content":" HTML attribute: pattern # ::: section-content The pattern attribute specifies a regular expression the form control's value should match. If a non-null value doesn't conform to the constraints set by the pattern value, the ValidityState object's read-only patternMismatch property will be true. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: pattern # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Username: (3-16 characters) \u0026lt;label for=\u0026quot;pin\u0026quot;\u0026gt;PIN: (4 digits)\u0026lt;/label\u0026gt; \u0026lt;input name=\u0026quot;pin\u0026quot; type=\u0026quot;password\u0026quot; pattern=\u0026quot;\\d{4,4}\u0026quot; required /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; margin-top: 1em; }\ninput:valid { background-color: palegreen; } input:invalid { background-color: lightpink; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nOverview # ::: section-content The pattern attribute is an attribute of the text, tel, email, url, password, and search input types.\nThe pattern attribute, when specified, is a regular expression which the input's value must match for the value to pass constraint validation. It must be a valid JavaScript regular expression, as used by the RegExp type, and as documented in our guide on regular expressions; the 'u' flag is specified when compiling the regular expression so that the pattern is treated as a sequence of Unicode code points, instead of as ASCII. No forward slashes should be specified around the pattern text.\nIf the specified pattern is not specified or is invalid, no regular expression is applied and this attribute is ignored.\n::: {#sect1 .notecard .note} Note: Use the title attribute to specify text that most browsers will display as a tooltip to explain what the requirements are to match the pattern. You must not rely on the tooltip alone for an explanation. See below for more information on usability. :::\nSome of the input types supporting the pattern attribute, notably the email and url input types, have expected value syntaxes that must be matched. If the pattern attribute isn't present, and the value doesn't match the expected syntax for that value type, the ValidityState object's read-only typeMismatch property will be true. :::\nUsability # ::: section-content When including a pattern, provide a description of the pattern in visible text near the control. Additionally, include a title attribute which gives a description of the pattern. User agents may use the title contents during constraint validation to tell the user that the pattern is not matched. Some browsers show a tooltip with title contents, improving usability for sighted users. Additionally, assistive technology may read the title aloud when the control gains focus, but this should not be relied upon for accessibility. :::\nConstraint validation # ::: section-content If the input's value is not the empty string and the value does not match the entire regular expression, there is a constraint violation reported by the ValidityState object's patternMismatch property being true. The pattern's regular expression, when matched against the value, must have its start anchored to the start of the string and its end anchored to the end of the string, which is slightly different from JavaScript regular expressions: in the case of pattern attribute, we are matching against the entire value, not just any subset, as if a ^(?: were implied at the start of the pattern and )$ at the end.\n::: {#sect2 .notecard .note} Note: If the pattern attribute is specified with no value, its value is implicitly the empty string. Thus, any non-empty input value will result in constraint violation. ::: :::\nExamples # Matching a phone number # ::: section-content Given the following:\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; \u0026lt;label\u0026gt; Enter your phone number in the format (123) - 456 - 7890 (\u0026lt;input name=\u0026#34;tel1\u0026#34; type=\u0026#34;tel\u0026#34; pattern=\u0026#34;[0-9]{3}\u0026#34; placeholder=\u0026#34;###\u0026#34; aria-label=\u0026#34;3-digit area code\u0026#34; size=\u0026#34;2\u0026#34; /\u0026gt;) - \u0026lt;input name=\u0026#34;tel2\u0026#34; type=\u0026#34;tel\u0026#34; pattern=\u0026#34;[0-9]{3}\u0026#34; placeholder=\u0026#34;###\u0026#34; aria-label=\u0026#34;3-digit prefix\u0026#34; size=\u0026#34;2\u0026#34; /\u0026gt; - \u0026lt;input name=\u0026#34;tel3\u0026#34; type=\u0026#34;tel\u0026#34; pattern=\u0026#34;[0-9]{4}\u0026#34; placeholder=\u0026#34;####\u0026#34; aria-label=\u0026#34;4-digit number\u0026#34; size=\u0026#34;3\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;/p\u0026gt; :::\nHere we have 3 sections for a north American phone number with an implicit label encompassing all three components of the phone number, expecting 3-digits, 3-digits and 4-digits respectively, as defined by the pattern attribute set on each.\nIf the values are too long or too short, or contain characters that aren't digits, the patternMismatch will be true. When true, the element matches the :invalid CSS pseudo-classes.\n::: code-example [css]{.language-name}\ninput:invalid { border: red solid 3px; } :::\n::: {#sect3 .code-example} ::: iframe ::: :::\nIf we had used minlength and maxlength attributes instead, we may have seen validityState.tooLong or validityState.tooShort being true. :::\nSpecifying a pattern # ::: section-content You can use the pattern attribute to specify a regular expression that the inputted value must match in order to be considered valid (see Validating against a regular expression for a simple crash course on using regular expressions to validate inputs).\nThe example below restricts the value to 4-8 characters and requires that it contain only lower-case letters.\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;uname\u0026#34;\u0026gt;Choose a username: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;uname\u0026#34; name=\u0026#34;name\u0026#34; required size=\u0026#34;45\u0026#34; pattern=\u0026#34;[a-z]{4,8}\u0026#34; title=\u0026#34;4 to 8 lowercase letters\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;p\u0026gt;Usernames must be lowercase and 4-8 characters in length.\u0026lt;/p\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nThis renders like so:\n::: {#sect4 .code-example} ::: iframe ::: ::: :::\nAccessibility Concerns # ::: section-content When a control has a pattern attribute, the title attribute, if used, must describe the pattern. Relying on the title attribute for the visual display of text content is generally discouraged as many user agents do not expose the attribute in an accessible manner. Some browsers show a tooltip when an element with a title is hovered, but that leaves out keyboard-only and touch-only users. This is one of the several reasons you must include information informing users how to fill out the control to match the requirements.\nWhile titles are used by some browsers to populate error messaging, because browsers sometimes also show the title as text on hover, it therefore shows in non-error situations, so be careful not to word titles as if an error has occurred. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-input-pattern]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet pattern 4 12 4 10 ≤12.1 5 ≤37 18 4 ≤12.1 4 1.0 :::\nSee also # ::: section-content\nConstraint validation Forms: Data form validation Regular Expressions ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern{._attribution-link} :::\n"},{"id":34,"href":"/docs/references/languages/html/attributes/placeholder/","title":"Placeholder","section":"HTML","content":" HTML attribute: placeholder # ::: section-content The placeholder attribute defines the text displayed in a form control when the control has no value. The placeholder text should provide a brief hint to the user as to the expected type of data that should be entered into the control.\nEffective placeholder text includes a word or short phrase that hints at the expected data type, not an explanation or prompt. The placeholder must not be used instead of a \u0026lt;label\u0026gt;. As the placeholder is not visible if the value of the form control is not null, using placeholder instead of a \u0026lt;label\u0026gt; for a prompt harms usability and accessibility.\nThe placeholder attribute is supported by the following input types: text, search, url, tel, email, and password. It is also supported by the \u0026lt;textarea\u0026gt; element. The example below shows the placeholder attribute in use to explain the expected format of an input field.\n::: {#sect1 .notecard .note} Note: The placeholder attribute can't include any line feeds (LF) or carriage returns (CR). If either is included in the value, the placeholder text will be clipped. ::: :::\nAccessibility concerns # ::: section-content Placeholders should only be used to show an example of the type of data that should be entered into a form; never as a replacement for a \u0026lt;label\u0026gt; element; doing so harms accessibility and user experience.\nThe \u0026lt;label\u0026gt; text is visually and programmatically associated with its corresponding form control. Screen readers don't announce placeholder content by default, but they do announce label content; it's the label that informs assistive technology users what data should be entered in the control. Labels also improve user experience for users of pointing devices: When a user clicks, touches, or taps a \u0026lt;label\u0026gt;, focus is moved to the the label's associated form control.\nPlaceholders can not be relied upon as a replacement for a label even for those not relying on assistive technology. Placeholder text is displayed at lower color contrast than the default form control text. This is by design, as you don't want users to be confused by what is placeholder text versus what is a filled-in form field. However, this lack of contrast can cause issues for low-vision users. Additionally, placeholder text disappears from form fields when users start entering text. If the placeholder text contains instructional information or examples that disappear, it can be confusing to users with cognitive issues and can make the form inaccessible if the placeholder contained the label. :::\nExample # HTML # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;form action=\u0026#34;/en-US/docs/Web/HTML/Attributes/placeholder\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Enter your name:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;e.g. Mike Shinoda\u0026#34; /\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-input-placeholder]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet placeholder 4 12 4 10 ≤12.1 5 ≤37 18 4 ≤12.1 5 1.0 line_breaks 36 12 59 10 23 No 37 36 59 No No 3.0 :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet placeholder 3 12 4 10 ≤12.1 4 ≤37 18 4 ≤12.1 3.2 1.0 :::\nhtml.elements.input.placeholder # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.textarea.placeholder # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nSee also # ::: section-content\nHTML title CSS :placeholder-shown pseudo-class selector CSS ::placeholder pseudo-element selector ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/placeholder{._attribution-link} :::\n"},{"id":35,"href":"/docs/references/languages/html/attributes/readonly/","title":"Readonly","section":"HTML","content":" HTML attribute: readonly # ::: section-content The Boolean readonly attribute, when present, makes the element not mutable, meaning the user can not edit the control. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: readonly # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} First Name: \u0026lt;label for=\u0026quot;age\u0026quot;\u0026gt;Age:\u0026lt;/label\u0026gt; \u0026lt;input name=\u0026quot;age\u0026quot; type=\u0026quot;number\u0026quot; value=\u0026quot;42\u0026quot; readonly /\u0026gt; \u0026lt;label for=\u0026quot;hobbies\u0026quot;\u0026gt;Hobbies:\u0026lt;/label\u0026gt; \u0026lt;textarea name=\u0026quot;hobbies\u0026quot; readonly\u0026gt;Baseball\u0026lt;/textarea\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; margin-top: 1em; }\ninput:read-only, textarea:read-only { background-color: silver; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nOverview # ::: section-content If the readonly attribute is specified on an input element, because the user can not edit the input, the element does not participate in constraint validation.\nThe readonly attribute is supported by text, search, url, tel, email, password, date, month, week, time, datetime-local, and number \u0026lt;input\u0026gt; types and the \u0026lt;textarea\u0026gt; form control elements. If present on any of these input types and elements, the :read-only pseudo class will match. If the attribute is not included, the :read-write pseudo class will match.\nThe attribute is not supported or relevant to \u0026lt;select\u0026gt; or input types that are already not mutable, such as checkbox and radio or cannot, by definition, start with a value, such as the file input type. range and color, as both have default values. It is also not supported on hidden as it can not be expected that a user to fill out a form that is hidden. Nor is it supported on any of the button types, including image.\n::: {#sect1 .notecard .note} Note: Only text controls can be made read-only, since for other controls (such as checkboxes and buttons) there is no useful distinction between being read-only and being disabled, so the readonly attribute does not apply. :::\nWhen an input has the readonly attribute, the :read-only pseudo-class also applies to it. Conversely, inputs that support the readonly attribute but don't have the attribute set match the :read-write pseudo-class. :::\nAttribute interactions # ::: section-content The difference between disabled and readonly is that read-only controls can still function and are still focusable, whereas disabled controls can not receive focus and are not submitted with the form and generally do not function as controls until they are enabled.\nBecause a read-only field cannot have its value changed by a user interaction, required does not have any effect on inputs with the readonly attribute also specified.\nThe only way to modify dynamically the value of the readonly attribute is through a script.\n::: {#sect2 .notecard .note} Note: The required attribute is not permitted on inputs with the readonly attribute specified. ::: :::\nUsability # ::: section-content Browsers display the readonly attribute. :::\nConstraint validation # ::: section-content If the element is read-only, then the element's value can not be updated by the user, and does not participate in constraint validation. :::\nExample # HTML # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;div class=\u0026#34;group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;Some value\u0026#34; readonly=\u0026#34;readonly\u0026#34; id=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;text\u0026#34;\u0026gt;Text box\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;date\u0026#34; value=\u0026#34;2020-01-01\u0026#34; readonly=\u0026#34;readonly\u0026#34; id=\u0026#34;date\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;date\u0026#34;\u0026gt;Date\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; value=\u0026#34;Some value\u0026#34; readonly=\u0026#34;readonly\u0026#34; id=\u0026#34;email\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;email\u0026#34;\u0026gt;Email\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; value=\u0026#34;Some value\u0026#34; readonly=\u0026#34;readonly\u0026#34; id=\u0026#34;pwd\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;pwd\u0026#34;\u0026gt;Password\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;group\u0026#34;\u0026gt; \u0026lt;textarea readonly=\u0026#34;readonly\u0026#34; id=\u0026#34;ta\u0026#34;\u0026gt;Some value\u0026lt;/textarea\u0026gt; \u0026lt;label for=\u0026#34;ta\u0026#34;\u0026gt;Message\u0026lt;/label\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-readonly-attribute]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet readonly 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 :::\n::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet readonly 1 12 1 5.5 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 :::\nhtml.elements.input.readonly # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.textarea.readonly # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nSee also # ::: section-content\n:read-only and :read-write \u0026lt;input\u0026gt; \u0026lt;select\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly{._attribution-link} :::\n"},{"id":36,"href":"/docs/references/languages/html/attributes/rel/","title":"Rel","section":"HTML","content":" HTML attribute: rel # ::: section-content The rel attribute defines the relationship between a linked resource and the current document. Valid on \u0026lt;link\u0026gt;, \u0026lt;a\u0026gt;, \u0026lt;area\u0026gt;, and \u0026lt;form\u0026gt;, the supported values depend on the element on which the attribute is found.\nThe type of relationships is given by the value of the rel attribute, which, if present, must have a value that is an unordered set of unique space-separated keywords. Differently from a class name, which does not express semantics, the rel attribute must express tokens that are semantically valid for both machines and humans. The current registries for the possible values of the rel attribute are the IANA link relation registry{target=\u0026quot;_blank\u0026quot;}, the HTML Living Standard{target=\u0026quot;_blank\u0026quot;}, and the freely-editable existing-rel-values page{target=\u0026quot;_blank\u0026quot;} in the microformats wiki, as suggested{target=\u0026quot;_blank\u0026quot;} by the Living Standard. If a rel attribute not present in one of the three sources above is used some HTML validators (such as the W3C Markup Validation Service{target=\u0026quot;_blank\u0026quot;}) will generate a warning.\nThe following table lists some of the most important existing keywords. Every keyword within a space-separated value should be unique within that value.\nrel value Description \u0026lt;link\u0026gt; \u0026lt;a\u0026gt; and \u0026lt;area\u0026gt; \u0026lt;form\u0026gt; alternate Alternate representations of the current document. Link Link Not allowed author Author of the current document or article. Link Link Not allowed bookmark Permalink for the nearest ancestor section. Not allowed Link Not allowed canonical Preferred URL for the current document. Link Not allowed Not allowed dns-prefetch Tells the browser to preemptively perform DNS resolution for the target resource's origin. External Resource Not allowed Not allowed external The referenced document is not part of the same site as the current document. Not allowed Annotation Annotation help Link to context-sensitive help. Link Link Link icon An icon representing the current document. External Resource Not allowed Not allowed license Indicates that the main content of the current document is covered by the copyright license. described by the referenced document. Link Link Link manifest Web app manifest. Link Not allowed Not allowed me Indicates that the current document represents the person who owns the linked content. Link Link Not allowed modulepreload Tells to browser to preemptively fetch the script and store it in the document's module map for later evaluation. Optionally, the module's dependencies can be fetched as well. External Resource Not allowed Not allowed next Indicates that the current document is a part of a series and that the next document in the series is the referenced document. Link Link Link nofollow Indicates that the current document's original author or publisher does not endorse the referenced document. Not allowed Annotation Annotation noopener Creates a top-level browsing context that is not an auxiliary browsing context if the hyperlink would create either of those, to begin with (i.e., has an appropriate target attribute value). Not allowed Annotation Annotation noreferrer No Referer header will be included. Additionally, has the same effect as noopener. Not allowed Annotation Annotation opener Creates an auxiliary browsing context if the hyperlink would otherwise create a top-level browsing context that is not an auxiliary browsing context (i.e., has \"_blank\" as target attribute value). Not allowed Annotation Annotation pingback Gives the address of the pingback server that handles pingbacks to the current document. External Resource Not allowed Not allowed preconnect Specifies that the user agent should preemptively connect to the target resource's origin. External Resource Not allowed Not allowed prefetch Specifies that the user agent should preemptively fetch and cache the target resource as it is likely to be required for a followup navigation. External Resource Not allowed Not allowed preload Specifies that the user agent must preemptively fetch and cache the target resource for current navigation according to the potential destination given by the as attribute (and the priority associated with the corresponding destination). External Resource Not allowed Not allowed prerender Specifies that the user agent should preemptively fetch the target resource and process it in a way that helps deliver a faster response in the future. External Resource Not allowed Not allowed prev Indicates that the current document is a part of a series and that the previous document in the series is the referenced document. Link Link Link search Gives a link to a resource that can be used to search through the current document and its related pages. Link Link Link stylesheet Imports a style sheet. External Resource Not allowed Not allowed tag Gives a tag (identified by the given address) that applies to the current document. Not allowed Link Not allowed The rel attribute is relevant to the \u0026lt;link\u0026gt;, \u0026lt;a\u0026gt;, \u0026lt;area\u0026gt;, and \u0026lt;form\u0026gt; elements, but some values only relevant to a subset of those elements. Like all HTML keyword attribute values, these values are case-insensitive.\nThe rel attribute has no default value. If the attribute is omitted or if none of the values in the attribute are supported, then the document has no particular relationship with the destination resource other than there being a hyperlink between the two. In this case, on \u0026lt;link\u0026gt; and \u0026lt;form\u0026gt;, if the rel attribute is absent, has no keywords, or if not one or more of the space-separated keywords above, then the element does not create any links. \u0026lt;a\u0026gt; and \u0026lt;area\u0026gt; will still created links, but without a defined relationship. :::\nValues # ::: section-content\nalternate Indicates an alternate representation of the current document. Valid for \u0026lt;link\u0026gt;, \u0026lt;a\u0026gt;, and \u0026lt;area\u0026gt;, the meaning depends on the values of the other attributes.\nWith the stylesheet keyword on a \u0026lt;link\u0026gt;, it creates an alternate stylesheet.\n::: code-example [html]{.language-name}\n\u0026lt;!-- a persistent style sheet --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;default.css\u0026#34; /\u0026gt; \u0026lt;!-- alternate style sheets --\u0026gt; \u0026lt;link rel=\u0026#34;alternate stylesheet\u0026#34; href=\u0026#34;highcontrast.css\u0026#34; title=\u0026#34;High contrast\u0026#34; /\u0026gt; :::\nWith an hreflang attribute that differs from the document language, it indicates a translation.\nWith the type attribute value of \u0026quot;application/rss+xml\u0026quot;or \u0026quot;application/atom+xml\u0026quot;, it creates a hyperlink referencing a syndication feed.\n::: code-example [html]{.language-name}\n\u0026lt;link rel=\u0026#34;alternate\u0026#34; type=\u0026#34;application/atom+xml\u0026#34; href=\u0026#34;posts.xml\u0026#34; title=\u0026#34;Blog\u0026#34; /\u0026gt; :::\nOtherwise, it creates a hyperlink referencing an alternate representation of the current document, whose nature is given by the hreflang and type attributes.\nIf hreflang is given alongside alternate, and the value of hreflang is different from the current document's language, it indicates that the referenced document is a translation. If type is given alongside alternate, it indicates that the referenced document is an alternative format (such as a PDF). The hreflang and type attributes may both be given alongside alternate. ::: code-example [html]{.language-name}\n\u0026lt;link rel=\u0026#34;alternate\u0026#34; href=\u0026#34;/fr/html/print\u0026#34; hreflang=\u0026#34;fr\u0026#34; type=\u0026#34;text/html\u0026#34; media=\u0026#34;print\u0026#34; title=\u0026#34;French HTML (for printing)\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;alternate\u0026#34; href=\u0026#34;/fr/pdf\u0026#34; hreflang=\u0026#34;fr\u0026#34; type=\u0026#34;application/pdf\u0026#34; title=\u0026#34;French PDF\u0026#34; /\u0026gt; :::\nauthor Indicates the referenced document provides further information about the author of the current document or article. Relevant for \u0026lt;link\u0026gt;, \u0026lt;a\u0026gt;, and \u0026lt;area\u0026gt; elements.\nWith \u0026lt;a\u0026gt; and \u0026lt;area\u0026gt;, it indicates the linked document (or mailto:) provides information about the author of the nearest \u0026lt;article\u0026gt; ancestor if there is one, otherwise the entire document.\nWith \u0026lt;link\u0026gt;, it represents the author of the entire document.\n::: {#sect1 .notecard .note} Note: For historical reasons, the obsolete attribute value rev=\u0026quot;made\u0026quot; is treated as rel=\u0026quot;author\u0026quot;. :::\nbookmark Relevant as the rel attribute value for the \u0026lt;a\u0026gt; and \u0026lt;area\u0026gt; elements. Gives a permalink for the nearest ancestor \u0026lt;article\u0026gt; element, if there is one. If there is no ancestor \u0026lt;article\u0026gt; element, gives a permalink for the section the linking element is most closely associated with.\ncanonical Valid for \u0026lt;link\u0026gt;, it defines the preferred URL for the current document, which helps search engines reduce duplicate content.\ndns-prefetch Relevant for the \u0026lt;link\u0026gt; element both in the \u0026lt;body\u0026gt; and \u0026lt;head\u0026gt;, it tells the browser to preemptively perform DNS resolution for the target resource's origin. Useful for resources the user will likely need, it helps reduce latency and thereby improves performance when the user does access the resources as the browser preemptively performed DNS resolution for the origin of the specified resource. See dns-prefetch described in resource hints{target=\u0026quot;_blank\u0026quot;}.\nexternal Relevant to \u0026lt;form\u0026gt;, \u0026lt;a\u0026gt;, and \u0026lt;area\u0026gt;, it indicates the referenced document is not part of the current site. This can be used with attribute selectors to style external links in a way that indicates to the user that they will be leaving the current site.\nhelp Relevant to \u0026lt;form\u0026gt;, \u0026lt;link\u0026gt;, \u0026lt;a\u0026gt;, and \u0026lt;area\u0026gt;, the help keyword indicates that the linked to content provides context-sensitive help, providing information for the parent of the element defining the hyperlink, and its children. When used within \u0026lt;link\u0026gt;, the help is for the whole document. When included with \u0026lt;a\u0026gt; and \u0026lt;area\u0026gt; and supported, the default cursor will be help instead of pointer.\nicon Valid with \u0026lt;link\u0026gt;, the linked resource represents the icon, a resource for representing the page in the user interface, for the current document.\nThe most common use for the icon value is the favicon:\n::: code-example [html]{.language-name}\n\u0026lt;link rel=\u0026#34;icon\u0026#34; href=\u0026#34;favicon.ico\u0026#34; /\u0026gt; :::\nIf there are multiple \u0026lt;link rel=\u0026quot;icon\u0026quot;\u0026gt;s, the browser uses their media, type, and sizes attributes to select the most appropriate icon. If several icons are equally appropriate, the last one is used. If the most appropriate icon is later found to be inappropriate, for example because it uses an unsupported format, the browser proceeds to the next-most appropriate, and so on.\n::: {#sect2 .notecard .note} Note: The crossorigin attribute is not supported for rel=\u0026quot;icon\u0026quot; in Chromium-based browsers. See the open Chromium issue{target=\u0026quot;_blank\u0026quot;}. :::\n::: {#sect3 .notecard .note} Note: Apple's iOS does not use this link type, nor the sizes attribute, like others mobile browsers do, to select a webpage icon for Web Clip or a start-up placeholder. Instead it uses the non-standard apple-touch-icon{target=\u0026quot;_blank\u0026quot;} and apple-touch-startup-image{target=\u0026quot;_blank\u0026quot;} respectively. :::\n::: {#sect4 .notecard .note} Note: The shortcut link type is often seen before icon, but this link type is non-conforming, ignored and web authors must not use it anymore. :::\nlicense Valid on the \u0026lt;a\u0026gt;, \u0026lt;area\u0026gt;, \u0026lt;form\u0026gt;, \u0026lt;link\u0026gt; elements, the license value indicates that the hyperlink leads to a document describing the licensing information; that the main content of the current document is covered by the copyright license described by the referenced document. If not inside the \u0026lt;head\u0026gt; element, the standard doesn't distinguish between a hyperlink applying to a specific part of the document or to the document as a whole. Only the data on the page can indicate this.\n::: code-example [html]{.language-name}\n\u0026lt;link rel=\u0026#34;license\u0026#34; href=\u0026#34;#license\u0026#34; /\u0026gt; :::\n::: {#sect5 .notecard .note} Note: Although recognized, the synonym copyright is incorrect and must be avoided. :::\nmanifest [Experimental]{.visually-hidden} Web app manifest. Requires the use of the CORS protocol for cross-origin fetching.\nmodulepreload Useful for improved performance, and relevant to the \u0026lt;link\u0026gt; anywhere in the document, setting rel=\u0026quot;modulepreload\u0026quot; tells the browser to preemptively fetch the script (and dependencies) and store it in the document's module map for later evaluation. modulepreload links can ensure network fetching is done with the module ready (but not evaluated) in the module map before it is necessarily needed. See also modulepreload.\nnext Relevant to \u0026lt;form\u0026gt;, \u0026lt;link\u0026gt;, \u0026lt;a\u0026gt;, and \u0026lt;area\u0026gt;, the next values indicates that the current document is a part of a series, and that the next document in the series is the referenced document. When included in a \u0026lt;link\u0026gt;, browsers may assume that document will be fetched next, and treat it as a resource hint.\nnofollow Relevant to \u0026lt;form\u0026gt;, \u0026lt;a\u0026gt;, and \u0026lt;area\u0026gt;, the nofollow keyword tells search engine spiders to ignore the link relationship. The nofollow relationship may indicate the current document's owner does not endorse the referenced document. It is often included by Search Engine Optimizers pretending their link farms are not spam pages.\nnoopener Relevant to \u0026lt;form\u0026gt;, \u0026lt;a\u0026gt;, and \u0026lt;area\u0026gt;, creates a top-level browsing context that is not an auxiliary browsing context if the hyperlink would create either of those to begin with (i.e., has an appropriate target attribute value). In other words, it makes the link behave as if window.opener were null and target=\u0026quot;_parent\u0026quot; were set.\nThis is the opposite of opener.\nnoreferrer Relevant to \u0026lt;form\u0026gt;, \u0026lt;a\u0026gt;, and \u0026lt;area\u0026gt;, including this value makes the referrer unknown (no Referer header will be included), and creates a top-level browsing context as if noopener were also set.\nopener Creates an auxiliary browsing context if the hyperlink would otherwise create a top-level browsing context that is not an auxiliary browsing context (i.e., has \u0026quot;_blank\u0026quot; as target attribute value). Effectively, the opposite of noopener.\npingback Gives the address of the pingback server that handles pingbacks to the current document. See the Pingback specification{target=\u0026quot;_blank\u0026quot;}.\npreconnect Provides a hint to the browser suggesting that it open a connection to the linked website in advance, without disclosing any private information or downloading any content, so that when the link is followed the linked content can be fetched more quickly.\nprefetch Specifies that the user agent should preemptively fetch and cache the target resource as it is likely to be required for a followup navigation. See prefetch for more information.\npreload Specifies that the user agent must preemptively fetch and cache the target resource for current navigation according to the potential destination given by the as attribute (and the priority associated with the corresponding destination). See the page for the preload value.\nprerender [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} Specifies that the user agent should preemptively fetch the target resource and process it in a way that helps deliver a faster response in the future, for example by fetching its subresources or performing some rendering.\nprev Similar to the next keyword, relevant to \u0026lt;form\u0026gt;, \u0026lt;link\u0026gt;, \u0026lt;a\u0026gt;, and \u0026lt;area\u0026gt;, the prev values indicates that the current document is a part of a series, and that the link references a previous document in the series is the referenced document.\nNote: The synonym previous is incorrect and should not be used.\nsearch Relevant to \u0026lt;form\u0026gt;, \u0026lt;link\u0026gt;, \u0026lt;a\u0026gt;, and \u0026lt;area\u0026gt; elements, the search keywords indicates that the hyperlink references a document whose interface is specially designed for searching in the current document, site, and related resources, providing a link to a resource that can be used to search.\nIf the type attribute is set to application/opensearchdescription+xml the resource is an OpenSearch plugin that can be easily added to the interface of Firefox.\nstylesheet Valid for the \u0026lt;link\u0026gt; element, it imports an external resource to be used as a stylesheet. The type attribute is not needed as it's a text/css stylesheet, as that is the default value. If it's not a stylesheet of type text/css it is best to declare the type.\nWhile this attribute defines the link as being a stylesheet, the interaction with other attributes and other key terms within the rel value impact whether the stylesheet is downloaded and/or used.\nWhen used with the alternate keyword, it defines an alternative style sheet. In this case, include a non-empty title.\nThe external stylesheet will not be used or even downloaded if the media does not match the value of the media attribute.\nRequires the use of the CORS protocol for cross-origin fetching.\ntag Valid for the \u0026lt;a\u0026gt;, and \u0026lt;area\u0026gt; elements, it gives a tag (identified by the given address) that applies to the current document. The tag value denotes that the link refers to a document describing a tag applying to the document on which it is located. This link type is not meant for tags within a tag cloud, as those tags apply to a group of pages, whereas the tag value of the rel attribute is for a single document. :::\nNon-standard values # ::: section-content\napple-touch-icon Specifies the icon for a web application on an iOS device. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# linkTypes]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Opera Safari Samsung Explorer Android Android Android Android on IOS Internet rel 16 12 30 Yes 15 5 4.4 18 30 14 4.2 1.0\nnoopener 49 79 52 No 36 10.1 49 49 52 36 10.3 5.0\nBefore Firefox 63, Before Firefox 63, `rel=\u0026quot;noopener\u0026quot;` `rel=\u0026quot;noopener\u0026quot;` created windows created windows with all features with all features disabled by disabled by default. Starting default. Starting with Firefox 63, with Firefox 63, these windows have these windows have the same features the same features enabled by default enabled by default as any other as any other window. window. noreferrer 16 13 33 11 15 5 4.4 18 33 14 4.2 1.5\nOnly supported in IE11 in later versions of Windows 10 (creators update). (Per caniuse.com.) :::\n::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Opera Safari Samsung Explorer Android Android Android Android on IOS Internet rel 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nnoopener 49 79 52 No 36 10.1 49 49 52 36 10.3 5.0\nBefore Firefox 63, Before Firefox 63, `rel=\u0026quot;noopener\u0026quot;` `rel=\u0026quot;noopener\u0026quot;` created windows created windows with all features with all features disabled by disabled by default. Starting default. Starting with Firefox 63, with Firefox 63, these windows have these windows have the same features the same features enabled by default enabled by default as any other as any other window. window. noreferrer 16 13 33 11 15 5 4.4 18 33 14 4.2 1.5\nOnly supported in IE11 in later versions of Windows 10 (creators update). (Per caniuse.com.) :::\n::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Android Chrome Android Firefox for Android Opera Safari on IOS Samsung Internet Explorer Android rel 1 12 1 Yes 9 1 4.4 18 4 10.1 1 1.0\nalternate_stylesheet 1\u0026ndash;48 No 3 8 15\u0026ndash;35 No 4.4\u0026ndash;48 18\u0026ndash;48 4 14\u0026ndash;35 No 1.0\u0026ndash;5.0\ndns-prefetch 46 ≤79 3 No 33 No 46 Yes 4 No No Yes\nicon 4 12 2 11 9 3.1 38 18 4 No No 4.0\nIf both ICO and PNG In version 79 and Before Firefox 83, the `crossorigin` In version 15 If both ICO and Does not use are available, will later (Blink-based attribute is not supported for and later PNG are favicons at all use ICO over PNG if Edge), if both ICO and `rel=\u0026quot;icon\u0026quot;`. (Blink-based available, will (but may have ICO has better PNG are available, Opera), if both ALWAYS use ICO alternative for matching sizes set. will use ICO over PNG ICO and PNG are file, bookmarks, (Per caniuse.com.). if ICO has better available, will regardless of etc.). (Per matching sizes set. use ICO over sizes set. (Per caniuse.com.) (Per caniuse.com.) PNG if ICO has caniuse.com.) better matching sizes set. (Per caniuse.com.) manifest No No No No No No 39 39 No No No 4.0\nmodulepreload 66 ≤79 115 No 53 No 66 66 115 47 No 9.0\npreconnect 46 79 39 No 33 11.1 46 46 39 33 11.3 4.0\nBefore Firefox 41, it doesn\\'t obey the Before Firefox 41, it doesn\\'t obey the `crossorigin` attribute. `crossorigin` attribute. prefetch 8 12 2 11 15 13.1 4.4 18 4 14 13.4 1.5\nRequires secure Requires secure Requires secure context Requires secure Requires secure context Requires secure Requires secure context Requires Requires secure context context context context context secure context preload 50 ≤79 85 No 37 No 50 50 85 No No 5.0\nDoesn't support Doesn't support 56--57 `as=\u0026quot;document\u0026quot;` is unsupported. See Doesn't support 56--57 `as=\u0026quot;document\u0026quot;` is unsupported. See `as=\u0026quot;audio\u0026quot;`, `as=\u0026quot;audio\u0026quot;`, [bug `as=\u0026quot;audio\u0026quot;`, [bug `as=\u0026quot;audioworklet\u0026quot;`, `as=\u0026quot;audioworklet\u0026quot;`, Disabled due to various web 593267](https://crbug.com/593267). `as=\u0026quot;audioworklet\u0026quot;`, Disabled due to various web 593267](https://crbug.com/593267). `as=\u0026quot;document\u0026quot;`, `as=\u0026quot;document\u0026quot;`, compatibility issues (e.g. [bug `as=\u0026quot;document\u0026quot;`, compatibility issues (e.g. [bug `as=\u0026quot;embed\u0026quot;`, `as=\u0026quot;embed\u0026quot;`, 1405761](https://bugzil.la/1405761)). `as=\u0026quot;embed\u0026quot;`, 1405761](https://bugzil.la/1405761)). `as=\u0026quot;manifest\u0026quot;`, `as=\u0026quot;manifest\u0026quot;`, `as=\u0026quot;manifest\u0026quot;`, `as=\u0026quot;object\u0026quot;`, `as=\u0026quot;object\u0026quot;`, `as=\u0026quot;object\u0026quot;`, `as=\u0026quot;paintworklet\u0026quot;`, `as=\u0026quot;paintworklet\u0026quot;`, `as=\u0026quot;paintworklet\u0026quot;`, `as=\u0026quot;report\u0026quot;`, `as=\u0026quot;report\u0026quot;`, `as=\u0026quot;report\u0026quot;`, `as=\u0026quot;sharedworker\u0026quot;`, `as=\u0026quot;sharedworker\u0026quot;`, `as=\u0026quot;sharedworker\u0026quot;`, `as=\u0026quot;video\u0026quot;`, `as=\u0026quot;video\u0026quot;`, `as=\u0026quot;video\u0026quot;`, `as=\u0026quot;worker\u0026quot;`, or `as=\u0026quot;worker\u0026quot;`, or `as=\u0026quot;worker\u0026quot;`, or `as=\u0026quot;xslt\u0026quot;`. `as=\u0026quot;xslt\u0026quot;`. `as=\u0026quot;xslt\u0026quot;`. prerender 13 79 No 11 15 No 4.4 18 No 14 No 1.5 # :::\nhtml.elements.link.rel # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.a.rel # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nhtml.elements.area.rel # BCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.\nSee also # ::: section-content\nHTMLLinkElement.relList HTMLAnchorElement.relList HTMLAreaElement.relList ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel{._attribution-link} :::\n"},{"id":37,"href":"/docs/references/languages/html/attributes/rel/dns-prefetch/","title":"DNS Prefetch","section":"HTML","content":" rel=dns-prefetch # ::: section-content The dns-prefetch keyword for the rel attribute of the \u0026lt;link\u0026gt; element is a hint to browsers that the user is likely to need resources from the target resource's origin, and therefore the browser can likely improve the user experience by preemptively performing DNS resolution for that origin.\nSee Using dns-prefetch for more details. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# link-type-dns-prefetch]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet dns-prefetch 46 ≤79 3 No 33 No 46 Yes 4 No No Yes :::\nSee also # ::: section-content\nSpeculative loading for a comparison of \u0026lt;link rel=\u0026quot;dns-prefetch\u0026quot;\u0026gt; and other similar performance improvement features. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/dns-prefetch{._attribution-link} :::\n"},{"id":38,"href":"/docs/references/languages/html/attributes/rel/manifest/","title":"Manifest","section":"HTML","content":" rel=manifest # ::: section-content ::: {#sect1 .notecard .experimental} Experimental: This is an experimental technology\nCheck the Browser compatibility table carefully before using this in production. :::\nThe manifest keyword for the rel attribute of the \u0026lt;link\u0026gt; element indicates that the target resource is a Web app manifest. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# link-type-manifest]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet manifest No No No No No No 39 39 No No No 4.0 :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/manifest{._attribution-link} :::\n"},{"id":39,"href":"/docs/references/languages/html/attributes/rel/me/","title":"Me","section":"HTML","content":" rel=me # ::: section-content The me keyword for the rel attribute of the \u0026lt;link\u0026gt; and \u0026lt;a\u0026gt; elements indicates that the current resource is represented by the linked party. The me value was introduced in the XHTML Friends Network (XFN) specification{target=\u0026quot;_blank\u0026quot;}.\n::: code-example [html]{.language-name}\n\u0026lt;link rel=\u0026#34;me\u0026#34; value=\u0026#34;example.com\u0026#34; /\u0026gt; :::\nThe rel=\u0026quot;me\u0026quot; attribute is used in RelMeAuth{target=\u0026quot;_blank\u0026quot;} and Web sign in{target=\u0026quot;_blank\u0026quot;} specifications as a way to enable a person to identify themselves to a web service using their domain name or a particular URL. :::\nSpecifications # ::: {.notecard .warning} No specification found\nNo specification data found for html.elements.link.rel.me.\nCheck for problems with this page or contribute a missing spec_url to mdn/browser-compat-data. Also make sure the specification is included in w3c/browser-specs. :::\nBrowser compatibility # ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/me{._attribution-link} :::\n"},{"id":40,"href":"/docs/references/languages/html/attributes/rel/modulepreload/","title":"Modulepreload","section":"HTML","content":" rel=modulepreload # ::: section-content The modulepreload keyword, for the rel attribute of the \u0026lt;link\u0026gt; element, provides a declarative way to preemptively fetch a module script, parse and compile it, and store it in the document's module map for later execution.\nPreloading allows modules and their dependencies to be downloaded early, and can also significantly reduce the overall download and processing time. This is because it allows pages to fetch modules in parallel, instead of sequentially as each module is processed and its dependencies are discovered. Note however that you can't just preload everything! What you choose to preload must be balanced against other operations that might then be starved, adversely affecting user experience.\nLinks with rel=\u0026quot;modulepreload\u0026quot; are similar to those with rel=\u0026quot;preload\u0026quot;. The main difference is that preload just downloads the file and stores it in the cache, while modulepreload gets the module, parses and compiles it, and puts the results into the module map so that it is ready to execute.\nWhen using modulepreload the fetch request mode is always cors, and the crossorigin property is used to determine the request credential mode. If crossorigin is set to anonymous or \u0026quot;\u0026quot; (default), then the credentials mode is same-origin, and user credentials such as cookies and authentication are only sent for requests with the same-origin. If crossorigin is set to use-credentials then the credentials mode is include, and user credentials for both single- and cross-origin requests.\nThe as attribute is optional for links with rel=\u0026quot;modulepreload\u0026quot;, and defaults to \u0026quot;script\u0026quot;. It can be set to \u0026quot;script\u0026quot; or any script-like destination, such as \u0026quot;audioworklet\u0026quot;, \u0026quot;paintworklet\u0026quot;, \u0026quot;serviceworker\u0026quot;, \u0026quot;sharedworker\u0026quot;, or \u0026quot;worker\u0026quot;. An Event named \u0026quot;error\u0026quot; is fired on the element if any other destination is used.\nA browser may additionally also choose to automatically fetch any dependencies of the module resource. Note however that this is a browser-specific optimization \u0026mdash; the only approach to ensure that all browsers will try to preload a module's dependencies is to individually specify them! Further, the events named load or error fire immediately following success or failure of loading the specified resources. If dependencies are automatically fetched, no additional events are fired in the main thread (although you might monitor additional requests in a service worker or on the server). :::\nExamples # ::: section-content Consider the basic-modules{target=\u0026quot;_blank\u0026quot;} example ( live version{target=\u0026quot;_blank\u0026quot;}), introduced in the JavaScript modules guide.\nThis has a file structure as shown below, consisting of the top level module main.js, which statically imports two dependency modules modules/canvas.js and modules/square.js using the import statement.\nindex.html main.js modules/ canvas.js square.js The HTML for the example below shows how main.js is fetched in a \u0026lt;script\u0026gt; element. Only after main.js has loaded does the browser discover and fetch the two dependency modules.\n::: code-example [html]{.language-name}\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en-US\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Basic JavaScript module example\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; canvas { border: 1px solid black; } \u0026lt;/style\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;main.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::\nThe HTML below updates the example to use \u0026lt;link\u0026gt; elements with rel=\u0026quot;modulepreload\u0026quot; for the main file and each of the dependency modules. This is much faster because the three modules all start downloading asynchronously and in parallel before they are needed. By the time main.js has been parsed and its dependencies are known, they have already been fetched and downloaded.\n::: code-example [html]{.language-name}\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en-US\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Basic JavaScript module example\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;modulepreload\u0026#34; href=\u0026#34;main.js\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;modulepreload\u0026#34; href=\u0026#34;modules/canvas.js\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;modulepreload\u0026#34; href=\u0026#34;modules/square.js\u0026#34; /\u0026gt; \u0026lt;style\u0026gt; canvas { border: 1px solid black; } \u0026lt;/style\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;main.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# link-type-modulepreload]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet modulepreload 66 ≤79 115 No 53 No 66 66 115 47 No 9.0 :::\nSee also # ::: section-content\nSpeculative loading for a comparison of \u0026lt;link rel=\u0026quot;modulepreload\u0026quot;\u0026gt; and other similar performance improvement features. Preloading modules{target=\u0026quot;_blank\u0026quot;} (developer.chrome.com) ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/modulepreload{._attribution-link} :::\n"},{"id":41,"href":"/docs/references/languages/html/attributes/rel/noopener/","title":"Noopener","section":"HTML","content":" rel=noopener # ::: section-content The noopener keyword for the rel attribute of the \u0026lt;a\u0026gt;, \u0026lt;area\u0026gt;, and \u0026lt;form\u0026gt; elements instructs the browser to navigate to the target resource without granting the new browsing context access to the document that opened it \u0026mdash; by not setting the Window.opener property on the opened window (it returns null).\nThis is especially useful when opening untrusted links, in order to ensure they cannot tamper with the originating document via the Window.opener property (see About rel=noopener{target=\u0026quot;_blank\u0026quot;} for more details), while still providing the Referer HTTP header (unless noreferrer is used as well).\nNote that when noopener is used, nonempty target names other than _top, _self, and _parent are all treated like _blank in terms of deciding whether to open a new window/tab.\n::: {#sect1 .notecard .note} Note: Setting target=\u0026quot;_blank\u0026quot; on \u0026lt;a\u0026gt; elements now implicitly provides the same rel behavior as setting rel=\u0026quot;noopener\u0026quot; which does not set window.opener. See browser compatibility for support status. ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# link-type-noopener]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Opera Safari Samsung Explorer Android Android Android Android on IOS Internet noopener 49 79 52 No 36 10.1 49 49 52 36 10.3 5.0\nBefore Firefox 63, Before Firefox 63, `rel=\u0026quot;noopener\u0026quot;` `rel=\u0026quot;noopener\u0026quot;` created windows created windows with all features with all features disabled by disabled by default. Starting default. Starting with Firefox 63, with Firefox 63, these windows have these windows have the same features the same features enabled by default enabled by default as any other as any other window. window. :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/noopener{._attribution-link} :::\n"},{"id":42,"href":"/docs/references/languages/html/attributes/rel/noreferrer/","title":"Noreferrer","section":"HTML","content":" rel=noreferrer # ::: section-content The noreferrer keyword for the rel attribute of the \u0026lt;a\u0026gt;, \u0026lt;area\u0026gt;, and \u0026lt;form\u0026gt; elements instructs the browser, when navigating to the target resource, to omit the Referer header and otherwise leak no referrer information \u0026mdash; and additionally to behave as if the noopener keyword were also specified. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# link-type-noreferrer]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android noreferrer 16 13 33 11 15 5 4.4 18 33 14 4.2 1.5\nOnly supported in IE11 in later versions of Windows 10 (creators update). (Per caniuse.com.) :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/noreferrer{._attribution-link} :::\n"},{"id":43,"href":"/docs/references/languages/html/attributes/rel/preconnect/","title":"Preconnect","section":"HTML","content":" rel=preconnect # ::: section-content The preconnect keyword for the rel attribute of the \u0026lt;link\u0026gt; element is a hint to browsers that the user is likely to need resources from the target resource's origin, and therefore the browser can likely improve the user experience by preemptively initiating a connection to that origin. Preconnecting speeds up future loads from a given origin by preemptively performing part or all of the handshake (DNS+TCP for HTTP, and DNS+TCP+TLS for HTTPS origins).\n\u0026lt;link rel=\u0026quot;preconnect\u0026quot;\u0026gt; will provide a benefit to any future cross-origin HTTP request, navigation or subresource. It has no benefit on same-origin requests because the connection is already open.\nIf a page needs to make connections to many third-party domains, preconnecting them all can be counterproductive. The \u0026lt;link rel=\u0026quot;preconnect\u0026quot;\u0026gt; hint is best used for only the most critical connections. For the others, just use \u0026lt;link rel=\u0026quot;dns-prefetch\u0026quot;\u0026gt; to save time on the first step \u0026mdash; the DNS lookup. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;link rel=\u0026#34;preconnect\u0026#34; href=\u0026#34;https://example.com\u0026#34; /\u0026gt; :::\nYou can also implement preconnect as an HTTP Link header, for example:\n::: code-example [http]{.language-name}\nLink: \u0026lt;https://example.com\u0026gt;; rel=\u0026#34;preconnect\u0026#34; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# link-type-preconnect]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Opera Safari Samsung Explorer Android Android Android Android on IOS Internet preconnect 46 79 39 No 33 11.1 46 46 39 33 11.3 4.0\nBefore Firefox Before Firefox 41, it doesn\\'t 41, it doesn\\'t obey the obey the `crossorigin` `crossorigin` attribute. attribute. :::\nSee also # ::: section-content\nSpeculative loading for a comparison of \u0026lt;link rel=\u0026quot;preconnect\u0026quot;\u0026gt; and other similar performance improvement features. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preconnect{._attribution-link} :::\n"},{"id":44,"href":"/docs/references/languages/html/attributes/rel/prefetch/","title":"Prefetch","section":"HTML","content":" rel=prefetch # ::: section-content The prefetch keyword for the rel attribute of the \u0026lt;link\u0026gt; element provides a hint to browsers that the user is likely to need the target resource for future navigations, and therefore the browser can likely improve the user experience by preemptively fetching and caching the resource. \u0026lt;link rel=\u0026quot;prefetch\u0026quot;\u0026gt; is used for same-site navigation resources, or for subresources used by same-site pages.\nThe result is kept in the HTTP cache on disk. Because of this it is useful for prefetching subresources, even if they are not used by the current page. You could also use it to prefetch the next document the user will likely visit on the site. However, as a result you need to be careful with headers \u0026mdash; for example certain Cache-Control headers could block prefetching (for example no-cache or no-store).\n::: {#sect1 .notecard .note} Note: Because of such limitations, you are advised to use the Speculation Rules API for document prefetches instead, where it is supported. :::\n\u0026lt;link rel=\u0026quot;prefetch\u0026quot;\u0026gt; is functionally equivalent to a fetch() call with a priority: \u0026quot;low\u0026quot; option set on it, except that the former will generally have an even lower priority, and it will have a Sec-Purpose: prefetch header set on the request. Note that in general browsers will give prefetch resources a lower priority than preload ones (e.g. requested via \u0026lt;link rel=\u0026quot;preload\u0026quot;\u0026gt;) \u0026mdash; the current page is more important than the next.\nThe fetch request for a prefetch operation results in an HTTP request that includes the HTTP header Sec-Purpose: prefetch. A server might use this header to change the cache timeouts for the resources, or perform other special handling. The request will also include the Sec-Fetch-Dest header with the value set to empty.\nThe Accept header in the request will match the value used for normal navigation requests. This allows the browser to find the matching cached resources following navigation. :::\nExamples # Basic prefetch # ::: section-content ::: code-example [js]{.language-name}\n\u0026lt;link rel=\u0026#34;prefetch\u0026#34; href=\u0026#34;main.js\u0026#34; /\u0026gt; ::: :::\nNavigation and subresource prefetches # ::: section-content Prefetching can be used to fetch both HTML and sub-resources for a possible next navigation. A common use case is to have a simple website landing page that fetches more \u0026quot;heavy-weight\u0026quot; resources used by the rest of the site.\n::: code-example [html]{.language-name}\n\u0026lt;link rel=\u0026#34;prefetch\u0026#34; href=\u0026#34;/app/style.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;prefetch\u0026#34; href=\u0026#34;/landing-page\u0026#34; /\u0026gt; ::: :::\nThe effects of cache partitioning # ::: section-content Many browsers now implement some form of cache partitioning{target=\u0026quot;_blank\u0026quot;}, which makes \u0026lt;link rel=\u0026quot;prefetch\u0026quot;\u0026gt; useless for resources intended for use by different top-level sites. This includes the main document when navigating cross-site. So, for example, the following prefetch:\n::: code-example [html]{.language-name}\n\u0026lt;link rel=\u0026#34;prefetch\u0026#34; href=\u0026#34;https://news.example/article\u0026#34; /\u0026gt; :::\nWould not be accessible from https://aggregator.example/. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# link-type-prefetch]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android prefetch 8 12 2 11 15 13.1 4.4 18 4 14 13.4 1.5\nRequires Requires Requires Requires Requires Requires Requires Requires Requires secure secure secure secure secure secure secure secure secure context context context context context context context context context :::\nSee also # ::: section-content\nSpeculative loading for a comparison of \u0026lt;link rel=\u0026quot;prefetch\u0026quot;\u0026gt; and other similar performance improvement features. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/prefetch{._attribution-link} :::\n"},{"id":45,"href":"/docs/references/languages/html/attributes/rel/preload/","title":"Preload","section":"HTML","content":" rel=preload # ::: section-content The preload value of the \u0026lt;link\u0026gt; element's rel attribute lets you declare fetch requests in the HTML's \u0026lt;head\u0026gt;, specifying resources that your page will need very soon, which you want to start loading early in the page lifecycle, before browsers' main rendering machinery kicks in. This ensures they are available earlier and are less likely to block the page's render, improving performance. Even though the name contains the term load, it doesn't load and execute the script but only schedules it to be downloaded and cached with a higher priority. :::\nThe basics # ::: section-content You most commonly use \u0026lt;link\u0026gt; to load a CSS file to style your page with:\n::: code-example [html]{.language-name}\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles/main.css\u0026#34; /\u0026gt; :::\nHere however, we will use a rel value of preload, which turns \u0026lt;link\u0026gt; into a preloader for any resource we want. You will also need to specify:\nThe path to the resource in the href attribute. The type of resource in the as attribute. A simple example might look like this (see our JS and CSS example source{target=\u0026quot;_blank\u0026quot;}, and also live{target=\u0026quot;_blank\u0026quot;}):\n::: code-example [html]{.language-name}\n\u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;JS and CSS preload example\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;preload\u0026#34; href=\u0026#34;style.css\u0026#34; as=\u0026#34;style\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;preload\u0026#34; href=\u0026#34;main.js\u0026#34; as=\u0026#34;script\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;bouncing balls\u0026lt;/h1\u0026gt; \u0026lt;canvas\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;script src=\u0026#34;main.js\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; :::\nHere we preload our CSS and JavaScript files so they will be available as soon as they are required for the rendering of the page later on. This example is trivial, as the browser probably discovers the \u0026lt;link rel=\u0026quot;stylesheet\u0026quot;\u0026gt; and \u0026lt;script\u0026gt; elements in the same chunk of HTML as the preloads, but the benefits can be seen much more clearly the later resources are discovered and the larger they are. For example:\nResources that are pointed to from inside CSS, like fonts or images. Resources that JavaScript can request, like JSON, imported scripts, or web workers. Larger images and video files. preload has other advantages too. Using as to specify the type of content to be preloaded allows the browser to:\nPrioritize resource loading more accurately. Store in the cache for future requests, reusing the resource if appropriate. Apply the correct content security policy to the resource. Set the correct Accept request headers for it. ::: What types of content can be preloaded? # ::: section-content Many content types can be preloaded. The possible as attribute values are:\naudio: Audio file, as typically used in \u0026lt;audio\u0026gt;. document: An HTML document intended to be embedded by a \u0026lt;frame\u0026gt; or \u0026lt;iframe\u0026gt;. embed: A resource to be embedded inside an \u0026lt;embed\u0026gt; element. fetch: Resource to be accessed by a fetch or XHR request, such as an ArrayBuffer, WebAssembly binary, or JSON file. font: Font file. image: Image file. object: A resource to be embedded inside an \u0026lt;object\u0026gt; element. script: JavaScript file. style: CSS stylesheet. track: WebVTT file. worker: A JavaScript web worker or shared worker. video: Video file, as typically used in \u0026lt;video\u0026gt;. ::: {#sect1 .notecard .note} Note: font and fetch preloading requires the crossorigin attribute to be set; see CORS-enabled fetches below. :::\n::: {#sect2 .notecard .note} Note: There's more detail about these values and the web features they expect to be consumed by in the Preload spec \u0026mdash; see link element extensions{target=\u0026quot;_blank\u0026quot;}. Also note that the full list of values the as attribute can take is governed by the Fetch spec \u0026mdash; see request destinations{target=\u0026quot;_blank\u0026quot;}. ::: :::\nIncluding a MIME type # ::: section-content \u0026lt;link\u0026gt; elements can accept a type attribute, which contains the MIME type of the resource the element points to. This is especially useful when preloading resources \u0026mdash; the browser will use the type attribute value to work out if it supports that resource, and will only download it if so, ignoring it if not.\nYou can see an example of this in our video example (see the full source code{target=\u0026quot;_blank\u0026quot;}, and also the live version{target=\u0026quot;_blank\u0026quot;}), a code snippet from which is shown below. This illustrates the core behavior behind preloading in general.\n::: code-example [html]{.language-name}\n\u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Video preload example\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;preload\u0026#34; href=\u0026#34;sintel-short.mp4\u0026#34; as=\u0026#34;video\u0026#34; type=\u0026#34;video/mp4\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;video controls\u0026gt; \u0026lt;source src=\u0026#34;sintel-short.mp4\u0026#34; type=\u0026#34;video/mp4\u0026#34; /\u0026gt; \u0026lt;source src=\u0026#34;sintel-short.webm\u0026#34; type=\u0026#34;video/webm\u0026#34; /\u0026gt; \u0026lt;p\u0026gt; Your browser doesn\u0026#39;t support HTML video. Here is a \u0026lt;a href=\u0026#34;sintel-short.mp4\u0026#34;\u0026gt;link to the video\u0026lt;/a\u0026gt; instead. \u0026lt;/p\u0026gt; \u0026lt;/video\u0026gt; \u0026lt;/body\u0026gt; :::\nThe code in the example above causes the video/mp4 video to be preloaded only in supporting browsers \u0026mdash; and for users who have video/mp4 support in their browsers, causes the video/mp4 video to actually be used (since it's the first \u0026lt;source\u0026gt; specified). That makes the video player hopefully smoother/more responsive for users who have video/mp4 support in their browsers.\nNote that for users whose browsers have both video/mp4 and video/webm support, if in that code a \u0026lt;link rel=\u0026quot;preload\u0026quot; href=\u0026quot;sintel-short.webm\u0026quot; as=\u0026quot;video\u0026quot; type=\u0026quot;video/webm\u0026quot;\u0026gt; element were also specified, then both the video/mp4 and video/webm videos would be preloaded \u0026mdash; even though only one of them would actually be used.\nTherefore, specifying preloading for multiple types of the same resource is discouraged. Instead, the best practice is to specify preloading only for the type the majority of your users are likely to actually use. That's why the code in the example above doesn't specify preloading for the video/webm video.\nHowever, the lack of preloading doesn't prevent the video/webm video from actually being used by those who need it: for users whose browsers don't have video/mp4 support but do have video/webm support, the code in the example above does still cause the video/webm video to be used \u0026mdash; but it does so without also causing it to also be preloaded unnecessarily for the majority of other users. :::\nCORS-enabled fetches # ::: section-content When preloading resources that are fetched with CORS enabled (e.g. fetch(), XMLHttpRequest or fonts), special care needs to be taken to setting the crossorigin attribute on your \u0026lt;link\u0026gt; element. The attribute needs to be set to match the resource's CORS and credentials mode, even when the fetch is not cross-origin.\nAs mentioned above, one interesting case where this applies is font files. Because of various reasons, these have to be fetched using anonymous-mode CORS (see Font fetching requirements{target=\u0026quot;_blank\u0026quot;}).\nLet's use this case as an example. You can see the full example source code on GitHub{target=\u0026quot;_blank\u0026quot;} ( also see it live{target=\u0026quot;_blank\u0026quot;}):\n::: code-example [html]{.language-name}\n\u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Web font example\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;preload\u0026#34; href=\u0026#34;fonts/cicle_fina-webfont.woff2\u0026#34; as=\u0026#34;font\u0026#34; type=\u0026#34;font/woff2\u0026#34; crossorigin /\u0026gt; \u0026lt;link rel=\u0026#34;preload\u0026#34; href=\u0026#34;fonts/zantroke-webfont.woff2\u0026#34; as=\u0026#34;font\u0026#34; type=\u0026#34;font/woff2\u0026#34; crossorigin /\u0026gt; \u0026lt;link href=\u0026#34;style.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; … \u0026lt;/body\u0026gt; :::\nNot only are we providing the MIME type hints in the type attributes, but we are also providing the crossorigin attribute to make sure the preload's CORS mode matches the eventual font resource request. :::\nIncluding media # ::: section-content One nice feature of \u0026lt;link\u0026gt; elements is their ability to accept media attributes. These can accept media types or full-blown media queries, allowing you to do responsive preloading!\nLet's look at an example (see it on GitHub \u0026mdash; source code{target=\u0026quot;_blank\u0026quot;}, live example{target=\u0026quot;_blank\u0026quot;}):\n::: code-example [html]{.language-name}\n\u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Responsive preload example\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;preload\u0026#34; href=\u0026#34;bg-image-narrow.png\u0026#34; as=\u0026#34;image\u0026#34; media=\u0026#34;(max-width: 600px)\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;preload\u0026#34; href=\u0026#34;bg-image-wide.png\u0026#34; as=\u0026#34;image\u0026#34; media=\u0026#34;(min-width: 601px)\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;main.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;My site\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;script\u0026gt; const mediaQueryList = window.matchMedia(\u0026#34;(max-width: 600px)\u0026#34;); const header = document.querySelector(\u0026#34;header\u0026#34;); if (mediaQueryList.matches) { header.style.backgroundImage = \u0026#34;url(bg-image-narrow.png)\u0026#34;; } else { header.style.backgroundImage = \u0026#34;url(bg-image-wide.png)\u0026#34;; } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; :::\nWe include media attributes on our \u0026lt;link\u0026gt; elements so that a narrow image is preloaded if the user has a narrow viewport, and a wider image is loaded if they have a wide viewport. We use Window.matchMedia / MediaQueryList to do this (see Testing media queries for more).\nThis makes it much more likely that the font will be available for the page render, cutting down on FOUT (flash of unstyled text).\nThis doesn't have to be limited to images, or even files of the same type \u0026mdash; think big! You could perhaps preload and display a simple SVG diagram if the user is on a narrow screen where bandwidth and CPU is potentially more limited, or preload a complex chunk of JavaScript then use it to render an interactive 3D model if the user's resources are more plentiful. :::\nScripting and preloads # ::: section-content ::: {#sect3 .notecard .note} Note: Use \u0026lt;link rel=\u0026quot;modulepreload\u0026quot;\u0026gt; instead if you are working with JavaScript modules. :::\nAnother nice thing about these preloads is that you can execute them with script. For example, here we create a HTMLLinkElement instance, then attach it to the DOM:\n::: code-example [js]{.language-name}\nconst preloadLink = document.createElement(\u0026#34;link\u0026#34;); preloadLink.href = \u0026#34;myscript.js\u0026#34;; preloadLink.rel = \u0026#34;preload\u0026#34;; preloadLink.as = \u0026#34;script\u0026#34;; document.head.appendChild(preloadLink); :::\nThis means that the browser will preload the myscript.js file, but not actually use it yet. To use it, you could do this:\n::: code-example [js]{.language-name}\nconst preloadedScript = document.createElement(\u0026#34;script\u0026#34;); preloadedScript.src = \u0026#34;myscript.js\u0026#34;; document.body.appendChild(preloadedScript); :::\nThis is useful when you want to preload a script, but then defer execution until exactly when you need it. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# link-type-preload]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Android Chrome Android Firefox for Android Opera Safari Samsung Internet Explorer Android on IOS preload 50 ≤79 85 No 37 No 50 50 85 No No 5.0\nDoesn't support Doesn't support 56--57 `as=\u0026quot;document\u0026quot;` is unsupported. See Doesn't support 56--57 `as=\u0026quot;document\u0026quot;` is unsupported. See `as=\u0026quot;audio\u0026quot;`, `as=\u0026quot;audio\u0026quot;`, [bug `as=\u0026quot;audio\u0026quot;`, [bug `as=\u0026quot;audioworklet\u0026quot;`, `as=\u0026quot;audioworklet\u0026quot;`, Disabled due to various web 593267](https://crbug.com/593267). `as=\u0026quot;audioworklet\u0026quot;`, Disabled due to various web 593267](https://crbug.com/593267). `as=\u0026quot;document\u0026quot;`, `as=\u0026quot;document\u0026quot;`, compatibility issues (e.g. [bug `as=\u0026quot;document\u0026quot;`, compatibility issues (e.g. [bug `as=\u0026quot;embed\u0026quot;`, `as=\u0026quot;embed\u0026quot;`, 1405761](https://bugzil.la/1405761)). `as=\u0026quot;embed\u0026quot;`, 1405761](https://bugzil.la/1405761)). `as=\u0026quot;manifest\u0026quot;`, `as=\u0026quot;manifest\u0026quot;`, `as=\u0026quot;manifest\u0026quot;`, `as=\u0026quot;object\u0026quot;`, `as=\u0026quot;object\u0026quot;`, `as=\u0026quot;object\u0026quot;`, `as=\u0026quot;paintworklet\u0026quot;`, `as=\u0026quot;paintworklet\u0026quot;`, `as=\u0026quot;paintworklet\u0026quot;`, `as=\u0026quot;report\u0026quot;`, `as=\u0026quot;report\u0026quot;`, `as=\u0026quot;report\u0026quot;`, `as=\u0026quot;sharedworker\u0026quot;`, `as=\u0026quot;sharedworker\u0026quot;`, `as=\u0026quot;sharedworker\u0026quot;`, `as=\u0026quot;video\u0026quot;`, `as=\u0026quot;video\u0026quot;`, `as=\u0026quot;video\u0026quot;`, `as=\u0026quot;worker\u0026quot;`, or `as=\u0026quot;worker\u0026quot;`, or `as=\u0026quot;worker\u0026quot;`, or `as=\u0026quot;xslt\u0026quot;`. `as=\u0026quot;xslt\u0026quot;`. `as=\u0026quot;xslt\u0026quot;`. :::\nSee also # ::: section-content\nSpeculative loading for a comparison of \u0026lt;link rel=\u0026quot;preload\u0026quot;\u0026gt; and other similar performance improvement features. Preload: What Is It Good For?{target=\u0026quot;_blank\u0026quot;} by Yoav Weiss ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload{._attribution-link} :::\n"},{"id":46,"href":"/docs/references/languages/html/attributes/rel/prerender/","title":"Prerender","section":"HTML","content":" rel=prerender # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\n::: {#sect2 .notecard .nonstandard} Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future. :::\nThe prerender keyword for the rel attribute of the \u0026lt;link\u0026gt; element is a hint to browsers that the user might need the target resource for the next navigation, and therefore the browser can likely improve the user experience by preemptively fetching and processing the resource \u0026mdash; for example, by fetching its subresources or performing some rendering in the background offscreen.\nThis feature is superceded by the Speculation Rules API. :::\nSpecifications # ::: {.notecard .warning} No specification found\nNo specification data found for html.elements.link.rel.prerender.\nCheck for problems with this page or contribute a missing spec_url to mdn/browser-compat-data. Also make sure the specification is included in w3c/browser-specs. :::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet prerender 13 79 No 11 15 No 4.4 18 No 14 No 1.5 :::\nSee also # ::: section-content\nSpeculative loading for a comparison of \u0026lt;link rel=\u0026quot;prerender\u0026quot;\u0026gt; and other similar performance improvement features. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/prerender{._attribution-link} :::\n"},{"id":47,"href":"/docs/references/languages/html/attributes/required/","title":"Required","section":"HTML","content":" HTML attribute: required # ::: section-content The Boolean required attribute, if present, indicates that the user must specify a value for the input before the owning form can be submitted.\nThe required attribute is supported by text, search, url, tel, email, password, date, month, week, time, datetime-local, number, checkbox, radio, file, \u0026lt;input\u0026gt; types along with the \u0026lt;select\u0026gt; and \u0026lt;textarea\u0026gt; form control elements. If present on any of these input types and elements, the :required pseudo class will match. If the attribute is not included, the :optional pseudo class will match.\nThe attribute is not supported or relevant to range and color, as both have default values. It is also not supported on hidden as it can not be expected that a user to fill out a form that is hidden. Nor is it supported on any of the button types, including image.\nNote color and range don't support required as both always have a value. Type color defaults to #000000. The default for range is the midpoint between min and max \u0026mdash; with min and max defaulting to 0 and 100 respectively in most browsers if not declared.\nIn the case of a same named group of radio buttons, if a single radio button in the group has the required attribute, a radio button in that group must be checked, although it doesn't have to be the one on which the attribute is applied. To improve code maintenance, it is recommended to either include the required attribute in every same-named radio button in the group, or else in none.\nIn the case of a same named group of checkbox input types, only the checkboxes with the required attribute are required.\n::: {#sect1 .notecard .note} Note: Setting aria-required=\u0026quot;true\u0026quot; tells a screen reader that an element (any element) is required, but has no bearing on the optionality of the element. ::: :::\nAttribute interactions # ::: section-content Because a read-only field cannot have a value, required does not have any effect on inputs with the readonly attribute also specified. :::\nUsability # ::: section-content When including the required attribute, provide a visible indication near the control informing the user that the \u0026lt;input\u0026gt;, \u0026lt;select\u0026gt; or \u0026lt;textarea\u0026gt; is required. In addition, target required form controls with the :required pseudo-class, styling them in a way to indicate they are required. This improves usability for sighted users. Assistive technology should inform the user that the form control is mandatory based on the required attribute, but adding aria-required=\u0026quot;true\u0026quot; doesn't hurt, in case the browser / screen reader combination does not support required yet. :::\nConstraint validation # ::: section-content If the element is required and the element's value is the empty string, then the element is suffering from valueMissing and the element will match the :invalid pseudo class. :::\nAccessibility concerns # ::: section-content Provide an indication to users informing them the form control is required. Ensure the messaging is multi-faceted, such as through text, color, markings, and attribute, so that all users understand the requirements whether they have color blindness, cognitive differences, or are using a screen reader. :::\nExample # HTML # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;div class=\u0026#34;group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;label\u0026gt;Normal\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; required /\u0026gt; \u0026lt;label\u0026gt;Required\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: {.notecard .warning} No specification found\nNo specification data found for html.elements.attributes.required.\nCheck for problems with this page or contribute a missing spec_url to mdn/browser-compat-data. Also make sure the specification is included in w3c/browser-specs. :::\nBrowser compatibility # See also # ::: section-content\nvalidityState.valueMissing :required and :optional \u0026lt;input\u0026gt; \u0026lt;select\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required{._attribution-link} :::\n"},{"id":48,"href":"/docs/references/languages/html/attributes/size/","title":"Size","section":"HTML","content":" HTML attribute: size # ::: section-content The size attribute defines the width of the \u0026lt;input\u0026gt; and the height of the \u0026lt;select\u0026gt; element. For the input, if the type attribute is text or password then it's the number of characters. This must be an integer value of 0 or higher. If no size is specified, or an invalid value is specified, the input has no size declared, and the form control will be the default width based on the user agent. If CSS targets the element with properties impacting the width, CSS takes precedence.\nThe size attribute has no impact on constraint validation. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: size # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} First Name: \u0026lt;label for=\u0026quot;lastName\u0026quot;\u0026gt;Last Name:\u0026lt;/label\u0026gt; \u0026lt;input name=\u0026quot;lastName\u0026quot; type=\u0026quot;text\u0026quot; size=\u0026quot;20\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;fruit\u0026quot;\u0026gt;Favourite fruit:\u0026lt;/label\u0026gt; \u0026lt;select name=\u0026quot;fruit\u0026quot; size=\u0026quot;2\u0026quot;\u0026gt; \u0026lt;option\u0026gt;Orange\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Banana\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Apple\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; margin-top: 1rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nExamples # ::: section-content By adding size on some input types, the width of the input can be controlled. Adding size on a select changes the height, defining how many options are visible in the closed state.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;fruit\u0026#34;\u0026gt;Enter a fruit\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; size=\u0026#34;15\u0026#34; id=\u0026#34;fruit\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;vegetable\u0026#34;\u0026gt;Enter a vegetable\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;vegetable\u0026#34; /\u0026gt; \u0026lt;select name=\u0026#34;fruits\u0026#34; size=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;option\u0026gt;banana\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;cherry\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;strawberry\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;durian\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;blueberry\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;select name=\u0026#34;vegetables\u0026#34; size=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;option\u0026gt;carrot\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;cucumber\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;cauliflower\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;celery\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;collard greens\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; :::\n::: {#sect1 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: {.notecard .warning} No specification found\nNo specification data found for html.elements.attribute.size.\nCheck for problems with this page or contribute a missing spec_url to mdn/browser-compat-data. Also make sure the specification is included in w3c/browser-specs. :::\nBrowser compatibility # See also # ::: section-content\nmaxlength minlength pattern ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/size{._attribution-link} :::\n"},{"id":49,"href":"/docs/references/languages/html/attributes/step/","title":"Step","section":"HTML","content":" HTML attribute: step # ::: section-content The step attribute is a number that specifies the granularity that the value must adhere to or the keyword any. It is valid for the numeric input types, including the date, month, week, time, datetime-local, number and range types.\nThe step sets the stepping interval when clicking up and down spinner buttons, moving a slider left and right on a range, and validating the different date types. If not explicitly included, step defaults to 1 for number and range, and 1 unit type (minute, week, month, day) for the date/time input types. The value can must be a positive number - integer or float \u0026mdash; or the special value any, which means no stepping is implied, and any value is allowed (barring other constraints, such as min and max).\nThe default stepping value for number inputs is 1, allowing only integers to be entered, unless the stepping base is not an integer. The default stepping value for time is 1 second, with 900 being equal to 15 minutes. :::\nSyntax # ::: section-content\nDefault values for step Input type Value Example date 1 (day) \u0026lt;input type=\"date\" min=\"2019-12-25\" step=\"1\"\u0026gt; month 1 (month) \u0026lt;input type=\"month\" min=\"2019-12\" step=\"12\"\u0026gt; week 1 (week) \u0026lt;input type=\"week\" min=\"2019-W23\" step=\"2\"\u0026gt; time 60 (seconds) \u0026lt;input type=\"time\" min=\"09:00\" step=\"900\"\u0026gt; datetime-local 1 (second) \u0026lt;input type=\"datetime-local\" min=\"2019-12-25T19:30\" step=\"7\"\u0026gt; number 1 \u0026lt;input type=\"number\" min=\"0\" step=\"0.1\" max=\"10\"\u0026gt; range 1 \u0026lt;input type=\"range\" min=\"0\" step=\"2\" max=\"10\"\u0026gt; If any is not explicitly set, valid values for the number, date/time input types, and range input types are equal to the basis for stepping - the min value and increments of the step value, up to the max value, if specified. For example, if we have \u0026lt;input type=\u0026quot;number\u0026quot; min=\u0026quot;10\u0026quot; step=\u0026quot;2\u0026quot;\u0026gt; any even integer, 10 or greater, is valid. If omitted, \u0026lt;input type=\u0026quot;number\u0026quot;\u0026gt;, any integer is valid, but floats, like 4.2, are not valid, as step defaults to 1. For 4.2 to be valid, step would have had to be set to any, 0.1, 0.2, or any the min value would have had to be a number ending in .2, such as \u0026lt;input type=\u0026quot;number\u0026quot; min=\u0026quot;-5.2\u0026quot;\u0026gt; :::\nmin impact on step # ::: section-content The value of min and step define what are valid values, even if the step attribute is not included, as step defaults to 0.\nWe add a big red border around invalid inputs:\n::: code-example [css]{.language-name}\ninput:invalid { border: solid red 3px; } :::\nThen define an input with a minimum value of 7.2, omitting the step attribute, wherein it defaults to 1.\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;myNumber\u0026#34; name=\u0026#34;myNumber\u0026#34; type=\u0026#34;number\u0026#34; step=\u0026#34;2\u0026#34; min=\u0026#34;1.2\u0026#34; /\u0026gt; :::\nValid values include 1.2, 3.2, 5.2, 7.2, 9.2, 11.2, and so on. Integers and even numbers followed by .2 are not valid. As we included an invalid value, supporting browsers will show the value as invalid. The number spinner, if present, will only show valid float values of 1.2 and greater\n::: {#sect1 .code-example} ::: iframe ::: :::\n::: {#sect2 .notecard .note} Note: When the data entered by the user doesn't adhere to the stepping configuration, the value is considered invalid in constraint validation and will match the :invalid and :out-of-range pseudoclasses :::\nSee Client-side validation and stepMismatch for more information. :::\nAccessibility concerns # ::: section-content Provide instructions to help users understand how to complete the form and use individual form controls. Indicate any required and optional input, data formats, and other relevant information. When using the min attribute, ensure this minimum requirement is understood by the user. Providing instructions within the \u0026lt;label\u0026gt; may be sufficient. If providing instructions outside of labels, which allows more flexible positioning and design, consider using aria-labelledby or aria-describedby. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-input-step]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet step 5 12 16 10 ≤12.1 5 ≤37 18 16 ≤12.1 4 1.0 :::\nSee also # ::: section-content\nmax min Constraint validation Form validation validityState.stepMismatch :out-of-range \u0026lt;input\u0026gt; date, month, week, time, datetime-local, number and range types, and the \u0026lt;meter\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step{._attribution-link} :::\n"},{"id":50,"href":"/docs/references/languages/html/constraint_validation/","title":"Constraint Validation","section":"HTML","content":" Constraint validation # ::: section-content The creation of web forms has always been a complex task. While marking up the form itself is easy, checking whether each field has a valid and coherent value is more difficult, and informing the user about the problem may become a headache. HTML5 introduced new mechanisms for forms: it added new semantic types for the \u0026lt;input\u0026gt; element and constraint validation to ease the work of checking the form content on the client side. Basic, usual constraints can be checked, without the need for JavaScript, by setting new attributes; more complex constraints can be tested using the Constraint Validation API.\nFor a basic introduction to these concepts, with examples, see the Form validation tutorial.\n::: {#sect1 .notecard .note} Note: HTML Constraint validation doesn't remove the need for validation on the server side. Even though far fewer invalid form requests are to be expected, invalid ones can still be sent such as by bad people trying to trick your web application. Therefore, you need to always also validate input constraints on the server side, in a way that is consistent with what is done on the client side. ::: :::\nIntrinsic and basic constraints # ::: section-content In HTML, basic constraints are declared in two ways:\nBy choosing the most semantically appropriate value for the type attribute of the \u0026lt;input\u0026gt; element, e.g., choosing the email type automatically creates a constraint that checks whether the value is a valid email address. By setting values on validation-related attributes, allowing basic constraints to be described in a simple way, without the need for JavaScript. ::: Semantic input types # ::: section-content The intrinsic constraints for the type attribute are:\nInput type Constraint description Associated violation \u0026lt;input type=\"URL\"\u0026gt; The value must be an absolute URL, as defined in the URL Living Standard. TypeMismatch constraint violation \u0026lt;input type=\"email\"\u0026gt; The value must be a syntactically valid email address, which generally has the format username@hostname.tld but can also be local such as username@hostname. TypeMismatch constraint violation For both of these input types, if the multiple attribute is set, several values can be set, as a comma-separated list. If any of these do not satisfy the condition described here, the Type mismatch constraint violation is triggered.\nNote that most input types don't have intrinsic constraints, as some are barred from constraint validation or have a sanitization algorithm transforming incorrect values to a correct default. :::\nValidation-related attributes # ::: section-content In addition to the type attribute described above, the following attributes are used to describe basic constraints:\nAttribute Input types supporting the attribute Possible values Constraint description Associated violation pattern text, search, url, tel, email, password A JavaScript regular expression (compiled with the global, ignoreCase, and multiline flags disabled) The value must match the pattern. patternMismatch constraint violation min range, number A valid number The value must be greater than or equal to the value. rangeUnderflow constraint violation date, month, week A valid date datetime-local, time A valid date and time max range, number A valid number The value must be less than or equal to the value rangeOverflow constraint violation date, month, week A valid date datetime-local, time A valid date and time required text, search, url, tel, email, password, date, datetime-local, month, week, time, number, checkbox, radio, file; also on the \u0026lt;select\u0026gt; and \u0026lt;textarea\u0026gt; elements none as it is a Boolean attribute: its presence means true, its absence means false There must be a value (if set). valueMissing constraint violation step date An integer number of days Unless the step is set to the any literal, the value must be min + an integral multiple of the step. stepMismatch constraint violation month An integer number of months week An integer number of weeks datetime-local, time An integer number of seconds range, number An integer minlength text, search, url, tel, email, password; also on the \u0026lt;textarea\u0026gt; element An integer length The number of characters (code points) must not be less than the value of the attribute, if non-empty. All newlines are normalized to a single character (as opposed to CRLF pairs) for \u0026lt;textarea\u0026gt;. tooShort constraint violation maxlength text, search, url, tel, email, password; also on the \u0026lt;textarea\u0026gt; element An integer length The number of characters (code points) must not exceed the value of the attribute. tooLong constraint violation ::: Constraint validation process # ::: section-content Constraint validation is done through the Constraint Validation API either on a single form element or at the form level, on the \u0026lt;form\u0026gt; element itself. The constraint validation is done in the following ways:\nBy a call to the checkValidity() or reportValidity() method of a form-associated DOM interface, ( HTMLInputElement, HTMLSelectElement, HTMLButtonElement, HTMLOutputElement or HTMLTextAreaElement), which evaluates the constraints only on this element, allowing a script to get this information. The checkValidity() method returns a Boolean indicating whether the element's value passes its constraints. (This is typically done by the user-agent when determining which of the CSS pseudo-classes, :valid or :invalid, applies.) In contrast, the reportValidity() method reports any constraint failures to the user. By a call to the checkValidity() or reportValidity() method on the HTMLFormElement interface. By submitting the form itself. Calling checkValidity() is called statically validating the constraints, while calling reportValidity() or submitting the form is called interactively validating the constraints.\n::: {#sect2 .notecard .note} Note:\nIf the novalidate attribute is set on the \u0026lt;form\u0026gt; element, interactive validation of the constraints doesn't happen. Calling the submit() method on the HTMLFormElement interface doesn't trigger a constraint validation. In other words, this method sends the form data to the server even if it doesn't satisfy the constraints. Call the click() method on a submit button instead. ::: ::: Complex constraints using the Constraint Validation API # ::: section-content Using JavaScript and the Constraint API, it is possible to implement more complex constraints, for example, constraints combining several fields, or constraints involving complex calculations.\nBasically, the idea is to trigger JavaScript on some form field event (like onchange) to calculate whether the constraint is violated, and then to use the method field.setCustomValidity() to set the result of the validation: an empty string means the constraint is satisfied, and any other string means there is an error and this string is the error message to display to the user. :::\nConstraint combining several fields: Postal code validation # ::: section-content The postal code format varies from one country to another. Not only do most countries allow an optional prefix with the country code (like D- in Germany, F- in France or Switzerland), but some countries have postal codes with only a fixed number of digits; others, like the UK, have more complex structures, allowing letters at some specific positions.\n::: {#sect3 .notecard .note} Note: This is not a comprehensive postal code validation library, but rather a demonstration of the key concepts. :::\nAs an example, we will add a script checking the constraint validation for this simple form:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;ZIP\u0026#34;\u0026gt;ZIP : \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;ZIP\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;Country\u0026#34;\u0026gt;Country : \u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;Country\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;ch\u0026#34;\u0026gt;Switzerland\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;fr\u0026#34;\u0026gt;France\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;de\u0026#34;\u0026gt;Germany\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;nl\u0026#34;\u0026gt;The Netherlands\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Validate\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\nThis displays the following form:\n::: {#sect4 .code-example} ::: iframe ::: :::\nFirst, we write a function checking the constraint itself:\n::: code-example [js]{.language-name}\nfunction checkZIP() { // For each country, defines the pattern that the ZIP has to follow const constraints = { ch: [ \u0026#34;^(CH-)?\\\\d{4}$\u0026#34;, \u0026#34;Switzerland ZIPs must have exactly 4 digits: e.g. CH-1950 or 1950\u0026#34;, ], fr: [ \u0026#34;^(F-)?\\\\d{5}$\u0026#34;, \u0026#34;France ZIPs must have exactly 5 digits: e.g. F-75012 or 75012\u0026#34;, ], de: [ \u0026#34;^(D-)?\\\\d{5}$\u0026#34;, \u0026#34;Germany ZIPs must have exactly 5 digits: e.g. D-12345 or 12345\u0026#34;, ], nl: [ \u0026#34;^(NL-)?\\\\d{4}\\\\s*([A-RT-Z][A-Z]|S[BCE-RT-Z])$\u0026#34;, \u0026#34;Netherland ZIPs must have exactly 4 digits, followed by 2 letters except SA, SD and SS\u0026#34;, ], }; // Read the country id const country = document.getElementById(\u0026#34;Country\u0026#34;).value; // Get the NPA field const ZIPField = document.getElementById(\u0026#34;ZIP\u0026#34;); // Build the constraint checker const constraint = new RegExp(constraints[country][0], \u0026#34;\u0026#34;); console.log(constraint); // Check it! if (constraint.test(ZIPField.value)) { // The ZIP follows the constraint, we use the ConstraintAPI to tell it ZIPField.setCustomValidity(\u0026#34;\u0026#34;); } else { // The ZIP doesn\u0026#39;t follow the constraint, we use the ConstraintAPI to // give a message about the format required for this country ZIPField.setCustomValidity(constraints[country][1]); } } :::\nThen we link it to the onchange event for the \u0026lt;select\u0026gt; and the oninput event for the \u0026lt;input\u0026gt;:\n::: code-example [js]{.language-name}\nwindow.onload = () =\u0026gt; { document.getElementById(\u0026#34;Country\u0026#34;).onchange = checkZIP; document.getElementById(\u0026#34;ZIP\u0026#34;).oninput = checkZIP; }; ::: :::\nLimiting the size of a file before its upload # ::: section-content Another common constraint is to limit the size of a file to be uploaded. Checking this on the client side before the file is transmitted to the server requires combining the Constraint Validation API, and especially the field.setCustomValidity() method, with another JavaScript API, here the File API.\nHere is the HTML part:\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;FS\u0026#34;\u0026gt;Select a file smaller than 75 kB : \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;FS\u0026#34; /\u0026gt; :::\nThis displays:\n::: {#sect5 .code-example} ::: iframe ::: :::\nThe JavaScript reads the file selected, uses the File.size() method to get its size, compares it to the (hard coded) limit, and calls the Constraint API to inform the browser if there is a violation:\n::: code-example [js]{.language-name}\nfunction checkFileSize() { const FS = document.getElementById(\u0026#34;FS\u0026#34;); const files = FS.files; // If there is (at least) one file selected if (files.length \u0026gt; 0) { if (files[0].size \u0026gt; 75 * 1024) { // Check the constraint FS.setCustomValidity(\u0026#34;The selected file must not be larger than 75 kB\u0026#34;); return; } } // No custom constraint violation FS.setCustomValidity(\u0026#34;\u0026#34;); } :::\nFinally, we hook the method with the correct event:\n::: code-example [js]{.language-name}\nwindow.onload = () =\u0026gt; { document.getElementById(\u0026#34;FS\u0026#34;).onchange = checkFileSize; }; ::: :::\nVisual styling of constraint validation # ::: section-content Apart from setting constraints, web developers want to control what messages are displayed to the users and how they are styled. :::\nControlling the look of elements # ::: section-content The look of elements can be controlled via CSS pseudo-classes.\n:required and :optional CSS pseudo-classes # The :required and :optional pseudo-classes allow writing selectors that match form elements that have the required attribute, or that don't have it.\n:placeholder-shown CSS pseudo-class # See :placeholder-shown.\n:valid :invalid CSS pseudo-classes # The :valid and :invalid pseudo-classes are used to represent \u0026lt;input\u0026gt; elements whose content validates and fails to validate respectively according to the input's type setting. These classes allow the user to style valid or invalid form elements to make it easier to identify elements that are either formatted correctly or incorrectly. :::\nControlling the text of constraint violation # ::: section-content The following items can help with controlling the text of a constraint violation:\nThe setCustomValidity(message) method on the following elements: \u0026lt;fieldset\u0026gt;. Note: Setting a custom validity message on fieldset elements will not prevent form submission in most browsers. \u0026lt;input\u0026gt; \u0026lt;output\u0026gt; \u0026lt;select\u0026gt; Submit buttons (created with either a \u0026lt;button\u0026gt; element with the submit type, or an input element with the submit type. Other types of buttons do not participate in constraint validation. \u0026lt;textarea\u0026gt; The ValidityState interface describes the object returned by the validity property of the element types listed above. It represents various ways that an entered value can be invalid. Together, they help explain why an element's value fails to validate, if it's not valid. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation{._attribution-link} :::\n"},{"id":51,"href":"/docs/references/languages/html/content_categories/","title":"Content Categories","section":"HTML","content":" Content categories # ::: section-content Most HTML elements are a member of one or more content categories \u0026mdash; these categories group elements that share common characteristics. This is a loose grouping (it doesn't actually create a relationship among elements of these categories), but they help define and describe the categories' shared behavior and their associated rules, especially when you come upon their intricate details. It's also possible for elements to not be a member of any of these categories.\nThere are three types of content categories:\nMain content categories, which describe common rules shared by many elements. Form-related content categories, which describe rules common to form-related elements. Specific content categories, which describe rare categories shared only by a few elements, sometimes only in a specific context. ::: {#sect1 .notecard .note} Note: A more detailed discussion of these content categories and their comparative functionalities is beyond the scope of this article; for that, you may wish to read the relevant portions of the HTML specification{target=\u0026quot;_blank\u0026quot;}. :::\n{width=\u0026ldquo;747\u0026rdquo; height=\u0026ldquo;428\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;} :::\nMain content categories # Metadata content # ::: section-content Elements belonging to the metadata content category modify the presentation or the behavior of the rest of the document, set up links to other documents, or convey other out-of-band information.\nElements belonging to this category are \u0026lt;base\u0026gt;, \u0026lt;link\u0026gt;, \u0026lt;meta\u0026gt;, \u0026lt;noscript\u0026gt;, \u0026lt;script\u0026gt;, \u0026lt;style\u0026gt; and \u0026lt;title\u0026gt;. :::\nFlow content # ::: section-content Flow content is a broad category that encompasses most elements that can go inside the \u0026lt;body\u0026gt; element, including heading elements, sectioning elements, phrasing elements, embedding elements, interactive elements, and form-related elements. It also includes text nodes (but not those that only consist of white space characters).\nThe flow elements are:\n\u0026lt;a\u0026gt; \u0026lt;abbr\u0026gt; \u0026lt;address\u0026gt; \u0026lt;article\u0026gt; \u0026lt;aside\u0026gt; \u0026lt;audio\u0026gt; \u0026lt;b\u0026gt; \u0026lt;bdo\u0026gt; \u0026lt;bdi\u0026gt; \u0026lt;blockquote\u0026gt; \u0026lt;br\u0026gt; \u0026lt;button\u0026gt; \u0026lt;canvas\u0026gt; \u0026lt;cite\u0026gt; \u0026lt;code\u0026gt; \u0026lt;data\u0026gt; \u0026lt;datalist\u0026gt; \u0026lt;del\u0026gt; \u0026lt;details\u0026gt; \u0026lt;dfn\u0026gt; \u0026lt;dialog\u0026gt; `` \u0026lt;dl\u0026gt; \u0026lt;em\u0026gt; \u0026lt;embed\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;footer\u0026gt; \u0026lt;form\u0026gt; h1 h2 h3 h4 h5 h6 \u0026lt;header\u0026gt; \u0026lt;hgroup\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;i\u0026gt; \u0026lt;iframe\u0026gt; \u0026lt;img\u0026gt; \u0026lt;input\u0026gt; \u0026lt;ins\u0026gt; \u0026lt;kbd\u0026gt; \u0026lt;label\u0026gt; \u0026lt;main\u0026gt; \u0026lt;map\u0026gt; \u0026lt;mark\u0026gt; \u0026lt;math\u0026gt; \u0026lt;menu\u0026gt; \u0026lt;meter\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;noscript\u0026gt; \u0026lt;object\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;output\u0026gt; \u0026lt;p\u0026gt; \u0026lt;picture\u0026gt; \u0026lt;pre\u0026gt; \u0026lt;progress\u0026gt; \u0026lt;q\u0026gt; \u0026lt;ruby\u0026gt; \u0026lt;s\u0026gt; \u0026lt;samp\u0026gt; \u0026lt;search\u0026gt; \u0026lt;script\u0026gt; \u0026lt;section\u0026gt; \u0026lt;select\u0026gt; \u0026lt;slot\u0026gt; \u0026lt;small\u0026gt; \u0026lt;span\u0026gt; \u0026lt;strong\u0026gt; \u0026lt;sub\u0026gt; \u0026lt;sup\u0026gt; \u0026lt;svg\u0026gt; \u0026lt;table\u0026gt; \u0026lt;template\u0026gt; \u0026lt;textarea\u0026gt; \u0026lt;time\u0026gt; \u0026lt;u\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;var\u0026gt; \u0026lt;video\u0026gt; \u0026lt;wbr\u0026gt; Plain text A few other elements belong to this category, but only if a specific condition is fulfilled:\n\u0026lt;area\u0026gt;, if it is a descendant of a \u0026lt;map\u0026gt; element \u0026lt;link\u0026gt;, if the itemprop attribute is present \u0026lt;meta\u0026gt;, if the itemprop attribute is present \u0026lt;style\u0026gt;, if the scoped [Deprecated]{.visually-hidden} attribute is present ::: Sectioning content # ::: section-content Sectioning content is a subset of flow content, and can be used everywhere flow content is expected. Elements belonging to the sectioning content model create a section in the current outline that defines the scope of \u0026lt;header\u0026gt; elements, \u0026lt;footer\u0026gt; elements, and heading content.\nElements belonging to this category are \u0026lt;article\u0026gt;, \u0026lt;aside\u0026gt;, \u0026lt;nav\u0026gt;, and \u0026lt;section\u0026gt;. :::\nHeading content # ::: section-content Heading content is a subset of flow content, which defines the title of a section, whether marked by an explicit sectioning content element, or implicitly defined by the heading content itself. Heading content can be used everywhere flow content is expected.\nElements belonging to this category are h1, h2, h3, h4, h5, h6 and \u0026lt;hgroup\u0026gt;.\n::: {#sect2 .notecard .note} Note: Though likely to contain heading content, the \u0026lt;header\u0026gt; is not heading content itself. :::\n::: {#sect3 .notecard .note} Note: The \u0026lt;hgroup\u0026gt; element is not recommended as it does not work properly with assistive technologies. It was removed from the W3C HTML specification prior to HTML 5 being finalized, but is still part of the WHATWG specification and is at least partially supported by most browsers. ::: :::\nPhrasing content # ::: section-content Phrasing content is a subset of flow content that defines the text and the markup it contains, and can be used everywhere flow content is expected. Runs of phrasing content make up paragraphs.\nElements belonging to this category are:\n\u0026lt;abbr\u0026gt; \u0026lt;audio\u0026gt; \u0026lt;b\u0026gt; \u0026lt;bdi\u0026gt; \u0026lt;bdo\u0026gt; \u0026lt;br\u0026gt; \u0026lt;button\u0026gt; \u0026lt;canvas\u0026gt; \u0026lt;cite\u0026gt; \u0026lt;code\u0026gt; \u0026lt;data\u0026gt; \u0026lt;datalist\u0026gt; \u0026lt;dfn\u0026gt; \u0026lt;em\u0026gt; \u0026lt;embed\u0026gt; \u0026lt;i\u0026gt; \u0026lt;iframe\u0026gt; \u0026lt;img\u0026gt; \u0026lt;input\u0026gt; \u0026lt;kbd\u0026gt; \u0026lt;label\u0026gt; \u0026lt;mark\u0026gt; \u0026lt;math\u0026gt; \u0026lt;meter\u0026gt; \u0026lt;noscript\u0026gt; \u0026lt;object\u0026gt; \u0026lt;output\u0026gt; \u0026lt;picture\u0026gt; \u0026lt;progress\u0026gt; \u0026lt;q\u0026gt; \u0026lt;ruby\u0026gt; \u0026lt;s\u0026gt; \u0026lt;samp\u0026gt; \u0026lt;script\u0026gt; \u0026lt;select\u0026gt; \u0026lt;slot\u0026gt; \u0026lt;small\u0026gt; \u0026lt;span\u0026gt; \u0026lt;strong\u0026gt; \u0026lt;sub\u0026gt; \u0026lt;sup\u0026gt; \u0026lt;svg\u0026gt; \u0026lt;template\u0026gt; \u0026lt;textarea\u0026gt; \u0026lt;time\u0026gt; \u0026lt;u\u0026gt; \u0026lt;var\u0026gt; \u0026lt;video\u0026gt; \u0026lt;wbr\u0026gt; and plain text (not only consisting of white spaces characters). A few other elements belong to this category, but only if a specific condition is fulfilled:\n\u0026lt;a\u0026gt;, if it contains only phrasing content \u0026lt;area\u0026gt;, if it is a descendant of a \u0026lt;map\u0026gt; element \u0026lt;del\u0026gt;, if it contains only phrasing content \u0026lt;ins\u0026gt;, if it contains only phrasing content \u0026lt;link\u0026gt;, if the itemprop attribute is present \u0026lt;map\u0026gt;, if it contains only phrasing content \u0026lt;meta\u0026gt;, if the itemprop attribute is present ::: Embedded content # ::: section-content Embedded content is a subset of flow content that imports another resource or inserts content from another markup language or namespace into the document, and can be used everywhere flow content is expected. Elements that belong to this category include:\n\u0026lt;audio\u0026gt; \u0026lt;canvas\u0026gt; \u0026lt;embed\u0026gt; \u0026lt;iframe\u0026gt; \u0026lt;img\u0026gt; \u0026lt;math\u0026gt; \u0026lt;object\u0026gt; \u0026lt;picture\u0026gt; \u0026lt;svg\u0026gt; \u0026lt;video\u0026gt;. ::: Interactive content # ::: section-content Interactive content is a subset of flow content that includes elements that are specifically designed for user interaction, and can be used everywhere flow content is expected. Elements that belong to this category include:\n\u0026lt;button\u0026gt; \u0026lt;details\u0026gt; \u0026lt;embed\u0026gt; \u0026lt;iframe\u0026gt; \u0026lt;label\u0026gt; \u0026lt;select\u0026gt;, and \u0026lt;textarea\u0026gt;. Some elements belong to this category only under specific conditions:\n\u0026lt;a\u0026gt;, if the href attribute is present \u0026lt;audio\u0026gt;, if the controls attribute is present \u0026lt;img\u0026gt;, if the usemap attribute is present \u0026lt;input\u0026gt;, if the type attribute is not in the hidden state \u0026lt;object\u0026gt;, if the usemap attribute is present \u0026lt;video\u0026gt;, if the controls attribute is present ::: Palpable content # ::: section-content Content is palpable when it's neither empty nor hidden; it is content that is rendered and is substantive. Elements whose model is flow content should have at least one node which is palpable. :::\nForm-associated content # ::: section-content Form-associated content is a subset of flow content comprising elements that have a form owner, exposed by a form attribute, and can be used everywhere flow content is expected. A form owner is either the containing \u0026lt;form\u0026gt; element or the element whose id is specified in the form attribute.\n\u0026lt;button\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;input\u0026gt; \u0026lt;label\u0026gt; \u0026lt;meter\u0026gt; \u0026lt;object\u0026gt; \u0026lt;output\u0026gt; \u0026lt;progress\u0026gt; \u0026lt;select\u0026gt; \u0026lt;textarea\u0026gt; This category contains several sub-categories:\nlisted Elements that are listed in the form.elements and fieldset.elements collections. Contains \u0026lt;button\u0026gt;, \u0026lt;fieldset\u0026gt;, \u0026lt;input\u0026gt;, \u0026lt;object\u0026gt;, \u0026lt;output\u0026gt;, \u0026lt;select\u0026gt;, and \u0026lt;textarea\u0026gt;.\nlabelable Elements that can be associated with \u0026lt;label\u0026gt; elements. Contains \u0026lt;button\u0026gt;, \u0026lt;input\u0026gt;, \u0026lt;meter\u0026gt;, \u0026lt;output\u0026gt;, \u0026lt;progress\u0026gt;, \u0026lt;select\u0026gt;, and \u0026lt;textarea\u0026gt;.\nsubmittable Elements that can be used for constructing the form data set when the form is submitted. Contains \u0026lt;button\u0026gt;, \u0026lt;input\u0026gt;, \u0026lt;object\u0026gt;, \u0026lt;select\u0026gt;, and \u0026lt;textarea\u0026gt;.\nresettable Elements that can be affected when a form is reset. Contains \u0026lt;input\u0026gt;, \u0026lt;output\u0026gt;, \u0026lt;select\u0026gt;, and \u0026lt;textarea\u0026gt;. :::\nSecondary categories # ::: section-content There are some secondary classifications of elements that can be useful to be aware of as well. :::\nScript-supporting elements # ::: section-content Script-supporting elements are elements which don't directly contribute to the rendered output of a document. Instead, they serve to support scripts, either by containing or specifying script code directly, or by specifying data that will be used by scripts.\nThe script-supporting elements are:\n\u0026lt;script\u0026gt; \u0026lt;template\u0026gt; ::: Transparent content model # ::: section-content If an element has a transparent content model, then its contents must be structured such that they would be valid HTML 5, even if the transparent element were removed and replaced by the child elements.\nFor example, the \u0026lt;del\u0026gt; and \u0026lt;ins\u0026gt; elements are transparent:\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; We hold these truths to be \u0026lt;del\u0026gt;\u0026lt;em\u0026gt;sacred \u0026amp;amp; undeniable\u0026lt;/em\u0026gt;\u0026lt;/del\u0026gt; \u0026lt;ins\u0026gt;self-evident\u0026lt;/ins\u0026gt;. \u0026lt;/p\u0026gt; :::\nIf those elements were removed, this fragment would still be valid HTML (if not correct English).\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;We hold these truths to be \u0026lt;em\u0026gt;sacred \u0026amp;amp; undeniable\u0026lt;/em\u0026gt; self-evident.\u0026lt;/p\u0026gt; ::: :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories{._attribution-link} :::\n"},{"id":52,"href":"/docs/references/languages/html/cors_enabled_image/","title":"Cors Enabled Image","section":"HTML","content":" Allowing cross-origin use of images and canvas # ::: section-content HTML provides a crossorigin attribute for images that, in combination with an appropriate CORS header, allows images defined by the \u0026lt;img\u0026gt; element that are loaded from foreign origins to be used in a \u0026lt;canvas\u0026gt; as if they had been loaded from the current origin.\nSee CORS settings attributes for details on how the crossorigin attribute is used. :::\nSecurity and tainted canvases # ::: section-content Because the pixels in a canvas's bitmap can come from a variety of sources, including images or videos retrieved from other hosts, it's inevitable that security problems may arise.\nAs soon as you draw into a canvas any data that was loaded from another origin without CORS approval, the canvas becomes tainted. A tainted canvas is one which is no longer considered secure, and any attempts to retrieve image data back from the canvas will cause an exception to be thrown.\nIf the source of the foreign content is an HTML \u0026lt;img\u0026gt; or SVG \u0026lt;svg\u0026gt; element, attempting to retrieve the contents of the canvas isn't allowed.\nIf the foreign content comes from an image obtained from either as HTMLCanvasElement or ImageBitMap, and the image source doesn't meet the same origin rules, attempts to read the canvas's contents are blocked.\nCalling any of the following on a tainted canvas will result in an error:\nCalling getImageData() on the canvas's context Calling toBlob(), toDataURL() or captureStream() on the \u0026lt;canvas\u0026gt; element itself Attempting any of these when the canvas is tainted will cause a SecurityError to be thrown. This protects users from having private data exposed by using images to pull information from remote websites without permission. :::\nStoring an image from a foreign origin # ::: section-content In this example, we wish to permit images from a foreign origin to be retrieved and saved to local storage. Implementing this requires configuring the server as well as writing code for the website itself. :::\nWeb server configuration # ::: section-content The first thing we need is a server that's configured to host images with the Access-Control-Allow-Origin header configured to permit cross-origin access to image files.\nLet's assume we're serving our site using Apache{target=\u0026quot;_blank\u0026quot;}. Consider the HTML5 Boilerplate Apache server configuration file for CORS images{target=\u0026quot;_blank\u0026quot;}, shown below:\n::: code-example [xml]{.language-name}\n\u0026lt;IfModule mod_setenvif.c\u0026gt; \u0026lt;IfModule mod_headers.c\u0026gt; \u0026lt;FilesMatch \u0026#34;\\.(avifs?|bmp|cur|gif|ico|jpe?g|jxl|a?png|svgz?|webp)$\u0026#34;\u0026gt; SetEnvIf Origin \u0026#34;:\u0026#34; IS_CORS Header set Access-Control-Allow-Origin \u0026#34;*\u0026#34; env=IS_CORS \u0026lt;/FilesMatch\u0026gt; \u0026lt;/IfModule\u0026gt; \u0026lt;/IfModule\u0026gt; :::\nIn short, this configures the server to allow graphic files (those with the extensions \u0026quot;.bmp\u0026quot;, \u0026quot;.cur\u0026quot;, \u0026quot;.gif\u0026quot;, \u0026quot;.ico\u0026quot;, \u0026quot;.jpg\u0026quot;, \u0026quot;.jpeg\u0026quot;, \u0026quot;.png\u0026quot;, \u0026quot;.svg\u0026quot;, \u0026quot;.svgz\u0026quot;, and \u0026quot;.webp\u0026quot;) to be accessed cross-origin from anywhere on the internet. :::\nImplementing the save feature # ::: section-content Now that the server has been configured to allow retrieval of the images cross-origin, we can write the code that allows the user to save them to local storage, just as if they were being served from the same domain the code is running on.\nThe key is to use the crossorigin attribute by setting crossOrigin on the HTMLImageElement into which the image will be loaded. This tells the browser to request cross-origin access when downloading the image data.\nStarting the download # The code that starts the download (say, when the user clicks a \u0026quot;Download\u0026quot; button), looks like this:\n::: code-example [js]{.language-name}\nfunction startDownload() { let imageURL = \u0026#34;https://cdn.glitch.com/4c9ebeb9-8b9a-4adc-ad0a-238d9ae00bb5%2Fmdn_logo-only_color.svg?1535749917189\u0026#34;; let imageDescription = \u0026#34;The Mozilla logo\u0026#34;; downloadedImg = new Image(); downloadedImg.crossOrigin = \u0026#34;anonymous\u0026#34;; downloadedImg.addEventListener(\u0026#34;load\u0026#34;, imageReceived, false); downloadedImg.alt = imageDescription; downloadedImg.src = imageURL; } :::\nWe're using a hard-coded URL (imageURL) and associated descriptive text (imageDescription) here, but that could easily come from anywhere. To begin downloading the image, we create a new HTMLImageElement object by using the Image() constructor. The image is then configured to allow cross-origin downloading by setting its crossOrigin attribute to \u0026quot;Anonymous\u0026quot; (that is, allow non-authenticated downloading of the image cross-origin). An event listener is added for the load event being fired on the image element, which means the image data has been received. Alternative text is added to the image; while \u0026lt;canvas\u0026gt; does not support the alt attribute, the value can be used to set an aria-label or the canvas's inner content.\nFinally, the image's src attribute is set to the URL of the image to download; this triggers the download to begin.\nReceiving and saving the image # The code that handles the newly-downloaded image is found in the imageReceived() method:\n::: code-example [js]{.language-name}\nfunction imageReceived() { const canvas = document.createElement(\u0026#34;canvas\u0026#34;); const context = canvas.getContext(\u0026#34;2d\u0026#34;); canvas.width = downloadedImg.width; canvas.height = downloadedImg.height; canvas.innerText = downloadedImg.alt; context.drawImage(downloadedImg, 0, 0); imageBox.appendChild(canvas); try { localStorage.setItem(\u0026#34;saved-image-example\u0026#34;, canvas.toDataURL(\u0026#34;image/png\u0026#34;)); } catch (err) { console.error(`Error: ${err}`); } } :::\nimageReceived() is called to handle the \u0026quot;load\u0026quot; event on the HTMLImageElement that receives the downloaded image. This event is triggered once the downloaded data is all available. It begins by creating a new \u0026lt;canvas\u0026gt; element that we'll use to convert the image into a data URL, and by getting access to the canvas's 2D drawing context ( CanvasRenderingContext2D) in the variable context.\nThe canvas's size is adjusted to match the received image, the inner text is set to the image description, then the image is drawn into the canvas using drawImage(). The canvas is then inserted into the document so the image is visible.\nNow it's time to actually save the image locally. To do this, we use the Web Storage API's local storage mechanism, which is accessed through the localStorage global. The canvas method toDataURL() is used to convert the image into a data:// URL representing a PNG image, which is then saved into local storage using setItem(). :::\nSee also # ::: section-content\nUsing Cross-domain images in WebGL and Chrome 13{target=\u0026quot;_blank\u0026quot;} HTML Specification - the crossorigin attribute{target=\u0026quot;_blank\u0026quot;} Web Storage API ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image{._attribution-link} :::\n"},{"id":53,"href":"/docs/references/languages/html/date_and_time_formats/","title":"Date and Time Formats","section":"HTML","content":" Date and time formats used in HTML # ::: section-content Certain HTML elements use date and/or time values. The formats of the strings that specify these values are described in this article.\nElements that use such formats include certain forms of the \u0026lt;input\u0026gt; element that let the user choose or specify a date, time, or both, as well as the \u0026lt;ins\u0026gt; and \u0026lt;del\u0026gt; elements, whose datetime attribute specifies the date or date and time at which the insertion or deletion of content occurred.\nFor \u0026lt;input\u0026gt;, the values of type that return a value which contains a string representing a date and/or time are:\ndate datetime-local month time week ::: Examples # ::: section-content Before getting into the intricacies of how date and time strings are written and parsed in HTML, here are some examples that should give you a good idea what the more commonly-used date and time string formats look like.\nExample HTML date and time strings String Date and/or time 2005-06-07 June 7, 2005 [details] 08:45 8:45 AM [details] 08:45:25 8:45 AM and 25 seconds [details] 0033-08-04T03:40 3:40 AM on August 4, 33 [details] 1977-04-01T14:00:30 30 seconds after 2:00 PM on April 1, 1977 [details] 1901-01-01T00:00Z Midnight UTC on January 1, 1901 [details] 1901-01-01T00:00:01-04:00 1 second past midnight Eastern Standard Time (EST) on January 1, 1901 [details] ::: Basics # ::: section-content Before looking at the various formats of date and time related strings used by HTML elements, it is helpful to understand a few fundamental facts about the way they're defined. HTML uses a variation of the ISO 8601{target=\u0026quot;_blank\u0026quot;} standard for its date and time strings. It's worth reviewing the descriptions of the formats you're using in order to ensure that your strings are in fact compatible with HTML, as the HTML specification includes algorithms for parsing these strings that is actually more precise than ISO 8601, so there can be subtle differences in how date and time strings are expected to look. :::\nCharacter set # ::: section-content Dates and times in HTML are always strings which use the ASCII character set. :::\nYear numbers # ::: section-content In order to simplify the basic format used for date strings in HTML, the specification requires that all years be given using the modern (or proleptic) Gregorian calendar{target=\u0026quot;_blank\u0026quot;}. While user interfaces may allow entry of dates using other calendars, the underlying value always uses the Gregorian calendar.\nWhile the Gregorian calendar wasn't created until the year 1582 (replacing the similar Julian calendar), for HTML's purposes, the Gregorian calendar is extended back to the year 1 C.E. Make sure any older dates account for this.\nFor the purposes of HTML dates, years are always at least four digits long; years prior to the year 1000 are padded with leading zeroes (\u0026quot;0\u0026quot;), so the year 72 is written as 0072. Years prior to the year 1 C.E. are not supported, so HTML doesn't support years 1 B.C.E. (1 B.C.) or earlier.\nA year is normally 365 days long, except during leap years.\nLeap years # A leap year is any year which is divisible by 400 or the year is divisible by 4 but not by 100. Although the calendar year is normally 365 days long, it actually takes the planet Earth approximately 365.2422 days to complete a single orbit around the sun. Leap years help to adjust the calendar to keep it synchronized with the actual position of the planet in its orbit. Adding a day to the year every four years essentially makes the average year 365.25 days long, which is close to correct.\nThe adjustments to the algorithm (taking a leap year when the year can be divided by 400, and skipping leap years when the year is divisible by 100) help to bring the average even closer to the correct number of days (365.2425 days). Scientists occasionally add leap seconds to the calendar (seriously) to handle the remaining three ten-thousandths of a day and to compensate for the gradual, naturally occurring slowing of Earth's rotation.\nWhile month 02, February, normally has 28 days, it has 29 days in leap years. :::\nMonths of the year # ::: section-content There are 12 months in the year, numbered 1 through 12. They are always represented by a two-digit ASCII string whose value ranges from 01 through 12. See the table in the section Days of the month for the month numbers and their corresponding names (and lengths in days). :::\nDays of the month # ::: section-content Month numbers 1, 3, 5, 7, 8, 10, and 12 are 31 days long. Months 4, 6, 9, and 11 are 30 days long. Month 2, February, is 28 days long most years, but is 29 days long in leap years. This is detailed in the following table.\nThe months of the year and their lengths in days Month number Name (English) Length in days 01 January 31 02 February 28 (29 in leap years) 03 March 31 04 April 30 05 May 31 06 June 30 07 July 31 08 August 31 09 September 30 10 October 31 11 November 30 12 December 31 ::: Week strings # ::: section-content A week string specifies a week within a particular year. A valid week string consists of a valid year number, followed by a hyphen character (\u0026quot;-\u0026quot;, or U+002D), then the capital letter \u0026quot;W\u0026quot; (U+0057), followed by a two-digit week of the year value.\nThe week of the year is a two-digit string between 01 and 53. Each week begins on Monday and ends on Sunday. That means it's possible for the first few days of January to be considered part of the previous week-year, and for the last few days of December to be considered part of the following week-year. The first week of the year is the week that contains the first Thursday of the year. For example, the first Thursday of 1953 was on January 1, so that week\u0026mdash;beginning on Monday, December 29\u0026mdash;is considered the first week of the year. Therefore, December 30, 1952 occurs during the week 1953-W01.\nA year has 53 weeks if:\nThe first day of the calendar year (January 1) is a Thursday or The first day of the year (January 1) is a Wednesday and the year is a leap year All other years have 52 weeks.\nWeek string Week and year (Date range) 2001-W37 Week 37, 2001 (September 10-16, 2001) 1953-W01 Week 1, 1953 (December 29, 1952-January 4, 1953) 1948-W53 Week 53, 1948 (December 27, 1948-January 2, 1949) 1949-W01 Week 1, 1949 (January 3-9, 1949) 0531-W16 Week 16, 531 (April 13-19, 531) 0042-W04 Week 4, 42 (January 21-27, 42) Note that both the year and week numbers are padded with leading zeroes, with the year padded to four digits and the week to two. :::\nMonth strings # ::: section-content A month string represents a specific month in time, rather than a generic month of the year. That is, rather than representing \u0026quot;January,\u0026quot; an HTML month string represents a month and year paired, like \u0026quot;January 1972.\u0026quot;\nA valid month string consists of a valid year number (a string of at least four digits), followed by a hyphen character (\u0026quot;-\u0026quot;, or U+002D), followed by a two-digit numeric month number, where 01 represents January and 12 represents December.\nMonth string Month and year 17310-09 September, 17310 2019-01 January, 2019 1993-11 November, 1993 0571-04 April, 571 0001-07 July, 1 C.E. Notice that all years are at least four characters long; years that are fewer than four digits long are padded with leading zeroes. :::\nDate strings # ::: section-content A valid date string consists of a month string, followed by a hyphen character (\u0026quot;-\u0026quot;, or U+002D), followed by a two-digit day of the month.\nDate string Full date 1993-11-01 November 1, 1993 1066-10-14 October 14, 1066 0571-04-22 April 22, 571 0062-02-05 February 5, 62 ::: Time strings # ::: section-content A time string can specify a time with precision to the minute, second, or to the millisecond. Specifying only the hour or minute isn't permitted. A valid time string minimally consists of a two-digit hour followed by a colon (\u0026quot;:\u0026quot;, U+003A), then a two-digit minute. The minute may optionally be followed by another colon and a two-digit number of seconds. Milliseconds may be specified, optionally, by adding a decimal point character (\u0026quot;.\u0026quot;, U+002E) followed by one, two, or three digits.\nThere are some additional basic rules:\nThe hour is always specified using the 24-hour clock, with 00 being midnight and 11 PM being 23. No values outside the range 00 \u0026ndash; 23 are permitted. The minute must be a two-digit number between 00 and 59. No values outside that range are allowed. If the number of seconds is omitted (to specify a time accurate only to the minute), no colon should follow the number of minutes. If specified, the integer portion of the number of seconds must be between 00 and 59. You cannot specify leap seconds by using values like 60 or 61. If the number of seconds is specified and is an integer, it must not be followed by a decimal point. If a fraction of a second is included, it may be from one to three digits long, indicating the number of milliseconds. It follows the decimal point placed after the seconds component of the time string. Time string Time 00:00:30.75 12:00:30.75 AM (30.75 seconds after midnight) 12:15 12:15 PM 13:44:25 1:44:25 PM (25 seconds after 1:44 PM) ::: Local date and time strings # ::: section-content A valid datetime-local string consists of a date string and a time string concatenated together with either the letter \u0026quot;T\u0026quot; or a space character separating them. No information about the time zone is included in the string; the date and time is presumed to be in the user's local time zone.\nWhen you set the value of a datetime-local input, the string is normalized into a standard form. Normalized datetime strings always use the letter \u0026quot;T\u0026quot; to separate the date and the time, and the time portion of the string is as short as possible. This is done by leaving out the seconds component if its value is :00.\nExamples of valid datetime-local strings Date/time string Normalized date/time string Actual date and time 1986-01-28T11:38:00.01 1986-01-28T11:38:00.01 January 28, 1986 at 11:38:00.01 AM 1986-01-28 11:38:00.010 1986-01-28T11:38:00.01\nNote that after normalization, this is the same string as the previous datetime-local string. The space has been replaced with the \"T\" character and the trailing zero in the fraction of a second has been removed to make the string as short as possible.\nJanuary 28, 1986 at 11:38:00.01 AM 0170-07-31T22:00:00 0170-07-31T22:00\nNote that the normalized form of this date drops the \":00\" indicating the number of seconds to be zero, because the seconds are optional when zero, and the normalized string minimizes the length of the string.\nJuly 31, 170 at 10:00 PM ::: Global date and time strings # ::: section-content A global date and time string specifies a date and time as well as the time zone in which it occurs. A valid global date and time string is the same format as a local date and time string, except it has a time zone string appended to the end, following the time. :::\nTime zone offset string # ::: section-content A time zone offset string specifies the offset in either a positive or a negative number of hours and minutes from the standard time base. There are two standard time bases, which are very close to the same, but not exactly the same:\nFor dates after the establishment of Coordinated Universal Time{target=\u0026quot;_blank\u0026quot;} (UTC) in the early 1960s, the time base is Z and the offset indicates a particular time zone's offset from the time at the prime meridian at 0º longitude (which passes through the Royal Observatory at Greenwich, England). For dates prior to UTC, the time base is instead expressed in terms of UT1{target=\u0026quot;_blank\u0026quot;}, which is the contemporary Earth solar time at the prime meridian. The time zone string is appended immediately following the time in the date and time string. You can specify \u0026quot;Z\u0026quot; as the time zone offset string to indicate that the time is specified in UTC. Otherwise, the time zone string is constructed as follows:\nA character indicating the sign of the offset: the plus character (\u0026quot;+\u0026quot;, or U+002B) for time zones to the east of the prime meridian or the minus character (\u0026quot;-\u0026quot;, or U+002D) for time zones to the west of the prime meridian. A two-digit number of hours that the time zone is offset from the prime meridian. This value must be between 00 and 23. An optional colon (\u0026quot;:\u0026quot;) character. A two-digit number of minutes past the hour; this value must be between 00 and 59. While this format allows for time zones between -23:59 and +23:59, the current range of time zone offsets is -12:00 to +14:00, and no time zones are currently offset from the hour by anything other than 00, 30, or 45 minutes. This may change at more or less anytime, since countries are free to tamper with their time zones at any time and in any way they wish to do so.\nExamples of valid global date and time strings Global date and time string Actual global date and time Date and time at prime meridian 2005-06-07T00:00Z June 7, 2005 at midnight UTC June 7, 2005 at midnight 1789-08-22T12:30:00.1-04:00 August 22, 1789 at a tenth of a second past 12:30 PM Eastern Daylight Time (EDT) August 22, 1789 at a tenth of a second past 4:30 PM 3755-01-01 00:00+10:00 January 1, 3755 at midnight Australian Eastern Standard Time (AEST) December 31, 3754 at 2:00 PM ::: Date issues # ::: section-content Because of data storage and precision issues, you may want to be aware of a few client-side and server-side issues. :::\nThe Y2K38 Problem (often server-side) # ::: section-content JavaScript uses double precision floating points to store dates, as with all numbers, meaning that JavaScript code will not suffer from the Y2K38 problem unless integer coercion/bit-hacks are used because all JavaScript bit operators use 32-bit signed 2s-complement integers.\nThe problem is with the server side of things: storage of dates greater than 2^31 - 1. To fix this problem, you must store all dates using either unsigned 32-bit integers, signed 64-bit integers, or double-precision floating points on the server. If your server is written in PHP, the fix may be as simple as upgrading to PHP 8 or 7, and upgrading your hardware to x86_64 or IA64. If you are stuck with other hardware, you can try to emulate 64-bit hardware inside a 32-bit virtual machine, but most VMs don't support this kind of virtualization, since stability may suffer, and performance will definitely suffer greatly. :::\nThe Y10k Problem (often client-side) # ::: section-content In many servers, dates are stored as numbers instead of as strings--numbers of a fixed size and agnostic of format (aside from endianness). After the year 10,000, those numbers will just be a bit bigger than before, so many servers will not see issues with forms submitted after the year 10,000.\nThe problem is with the client side of things: parsing of dates with more than 4 digits in the year.\n::: code-example [html]{.language-name}\n\u0026lt;!--midnight of January 1st, 10000: the exact time of Y10K--\u0026gt; \u0026lt;input type=\u0026#34;datetime-local\u0026#34; value=\u0026#34;+010000-01-01T05:00\u0026#34; /\u0026gt; :::\nIt's that simple. Just prepare your code for any number of digits. Do not only prepare for 5 digits. Here is JavaScript code for programmatically setting the value:\n::: code-example [js]{.language-name}\nfunction setValue(element, date) { const isoString = date.toISOString(); element.value = isoString.substring(0, isoString.indexOf(\u0026#34;T\u0026#34;) + 6); } :::\nWhy worry about the Y10K problem if it is going to happen many centuries after your death? Exactly because you will already be dead, so the companies using your software will be stuck using your software without any other coder who knows the system well enough to come in and fix it. :::\nSee also # ::: section-content\n\u0026lt;input\u0026gt; \u0026lt;ins\u0026gt; and \u0026lt;del\u0026gt;: see the datetime attribute, which specifies either a date or a local date and time at which the content was inserted or deleted The ISO 8601 specification{target=\u0026quot;_blank\u0026quot;} Numbers and Dates in the JavaScript Guide The JavaScript Date object The Intl.DateTimeFormat object for formatting dates and times for a given locale ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats{._attribution-link} :::\n"},{"id":54,"href":"/docs/references/languages/html/element/","title":"Element","section":"HTML","content":" HTML elements reference # ::: section-content This page lists all the HTML elements, which are created using tags.\nThey are grouped by function to help you find what you have in mind easily. An alphabetical list of all elements is provided in the sidebar on every element's page as well as this one.\n::: {#sect1 .notecard .note} Note: For more information about the basics of HTML elements and attributes, see the section on elements in the Introduction to HTML article. ::: :::\nMain root # ::: section-content\nElement Description \u0026lt;html\u0026gt; Represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element. ::: Document metadata # ::: section-content Metadata contains information about the page. This includes information about styles, scripts and data to help software ( search engines, browsers, etc.) use and render the page. Metadata for styles and scripts may be defined in the page or linked to another file that has the information.\nElement Description \u0026lt;base\u0026gt; Specifies the base URL to use for all relative URLs in a document. There can be only one such element in a document. \u0026lt;head\u0026gt; Contains machine-readable information (metadata) about the document, like its title, scripts, and style sheets. \u0026lt;link\u0026gt; Specifies relationships between the current document and an external resource. This element is most commonly used to link to CSS but is also used to establish site icons (both \"favicon\" style icons and icons for the home screen and apps on mobile devices) among other things. \u0026lt;meta\u0026gt; Represents metadata that cannot be represented by other HTML meta-related elements, like \u0026lt;base\u0026gt;, \u0026lt;link\u0026gt;, \u0026lt;script\u0026gt;, \u0026lt;style\u0026gt; and \u0026lt;title\u0026gt;. \u0026lt;style\u0026gt; Contains style information for a document or part of a document. It contains CSS, which is applied to the contents of the document containing this element. \u0026lt;title\u0026gt; Defines the document's title that is shown in a browser's title bar or a page's tab. It only contains text; tags within the element are ignored. ::: Sectioning root # ::: section-content\nElement Description \u0026lt;body\u0026gt; represents the content of an HTML document. There can be only one such element in a document. ::: Content sectioning # ::: section-content Content sectioning elements allow you to organize the document content into logical pieces. Use the sectioning elements to create a broad outline for your page content, including header and footer navigation, and heading elements to identify sections of content.\nElement Description \u0026lt;address\u0026gt; Indicates that the enclosed HTML provides contact information for a person or people, or for an organization. \u0026lt;article\u0026gt; Represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include a forum post, a magazine or newspaper article, a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content. \u0026lt;aside\u0026gt; Represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes. \u0026lt;footer\u0026gt; Represents a footer for its nearest ancestor sectioning content or sectioning root element. A \u0026lt;footer\u0026gt; typically contains information about the author of the section, copyright data, or links to related documents. \u0026lt;header\u0026gt; Represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements. \u0026lt;h1\u0026gt;, \u0026lt;h2\u0026gt;, \u0026lt;h3\u0026gt;, \u0026lt;h4\u0026gt;, \u0026lt;h5\u0026gt;, \u0026lt;h6\u0026gt; Represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level and \u0026lt;h6\u0026gt; is the lowest. \u0026lt;hgroup\u0026gt; Represents a heading grouped with any secondary content, such as subheadings, an alternative title, or a tagline. \u0026lt;main\u0026gt; Represents the dominant content of the body of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application. \u0026lt;nav\u0026gt; Represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes. \u0026lt;section\u0026gt; Represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions. \u0026lt;search\u0026gt; Represents a part that contains a set of form controls or other content related to performing a search or filtering operation. ::: Text content # ::: section-content Use HTML text content elements to organize blocks or sections of content placed between the opening \u0026lt;body\u0026gt; and closing \u0026lt;/body\u0026gt; tags. Important for accessibility and SEO, these elements identify the purpose or structure of that content.\nElement Description \u0026lt;blockquote\u0026gt; Indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation. A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the \u0026lt;cite\u0026gt; element. \u0026lt;dd\u0026gt; Provides the description, definition, or value for the preceding term (\u0026lt;dt\u0026gt;) in a description list (\u0026lt;dl\u0026gt;). \u0026lt;div\u0026gt; The generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g., styling is directly applied to it, or some kind of layout model like flexbox is applied to its parent element). \u0026lt;dl\u0026gt; Represents a description list. The element encloses a list of groups of terms (specified using the \u0026lt;dt\u0026gt; element) and descriptions (provided by \u0026lt;dd\u0026gt; elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs). \u0026lt;dt\u0026gt; Specifies a term in a description or definition list, and as such must be used inside a \u0026lt;dl\u0026gt; element. It is usually followed by a \u0026lt;dd\u0026gt; element; however, multiple \u0026lt;dt\u0026gt; elements in a row indicate several terms that are all defined by the immediate next \u0026lt;dd\u0026gt; element. \u0026lt;figcaption\u0026gt; Represents a caption or legend describing the rest of the contents of its parent \u0026lt;figure\u0026gt; element. \u0026lt;figure\u0026gt; Represents self-contained content, potentially with an optional caption, which is specified using the \u0026lt;figcaption\u0026gt; element. The figure, its caption, and its contents are referenced as a single unit. \u0026lt;hr\u0026gt; Represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section. \u0026lt;li\u0026gt; Represents an item in a list. It must be contained in a parent element: an ordered list (\u0026lt;ol\u0026gt;), an unordered list (\u0026lt;ul\u0026gt;), or a menu (\u0026lt;menu\u0026gt;). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter. \u0026lt;menu\u0026gt; A semantic alternative to \u0026lt;ul\u0026gt;, but treated by browsers (and exposed through the accessibility tree) as no different than \u0026lt;ul\u0026gt;. It represents an unordered list of items (which are represented by \u0026lt;li\u0026gt; elements). \u0026lt;ol\u0026gt; Represents an ordered list of items — typically rendered as a numbered list. \u0026lt;p\u0026gt; Represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields. \u0026lt;pre\u0026gt; Represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or monospaced, font. Whitespace inside this element is displayed as written. \u0026lt;ul\u0026gt; Represents an unordered list of items, typically rendered as a bulleted list. ::: Inline text semantics # ::: section-content Use the HTML inline text semantic to define the meaning, structure, or style of a word, line, or any arbitrary piece of text.\nElement Description \u0026lt;a\u0026gt; Together with its href attribute, creates a hyperlink to web pages, files, email addresses, locations within the current page, or anything else a URL can address. \u0026lt;abbr\u0026gt; Represents an abbreviation or acronym. \u0026lt;b\u0026gt; Used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use \u0026lt;b\u0026gt; for styling text or granting importance. If you wish to create boldface text, you should use the CSS font-weight property. If you wish to indicate an element is of special importance, you should use the strong element. \u0026lt;bdi\u0026gt; Tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It's particularly useful when a website dynamically inserts some text and doesn't know the directionality of the text being inserted. \u0026lt;bdo\u0026gt; Overrides the current directionality of text, so that the text within is rendered in a different direction. \u0026lt;br\u0026gt; Produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant. \u0026lt;cite\u0026gt; Used to mark up the title of a cited creative work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata. \u0026lt;code\u0026gt; Displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the user agent's default monospace font. \u0026lt;data\u0026gt; Links a given piece of content with a machine-readable translation. If the content is time- or date-related, the\u0026lt;time\u0026gt; element must be used. \u0026lt;dfn\u0026gt; Used to indicate the term being defined within the context of a definition phrase or sentence. The ancestor \u0026lt;p\u0026gt; element, the \u0026lt;dt\u0026gt;/\u0026lt;dd\u0026gt; pairing, or the nearest section ancestor of the \u0026lt;dfn\u0026gt; element, is considered to be the definition of the term. \u0026lt;em\u0026gt; Marks text that has stress emphasis. The \u0026lt;em\u0026gt; element can be nested, with each nesting level indicating a greater degree of emphasis. \u0026lt;i\u0026gt; Represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, and taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the \u0026lt;i\u0026gt; naming of this element. \u0026lt;kbd\u0026gt; Represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the user agent defaults to rendering the contents of a \u0026lt;kbd\u0026gt; element using its default monospace font, although this is not mandated by the HTML standard. \u0026lt;mark\u0026gt; Represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context. \u0026lt;q\u0026gt; Indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the \u0026lt;blockquote\u0026gt; element. \u0026lt;rp\u0026gt; Used to provide fall-back parentheses for browsers that do not support the display of ruby annotations using the \u0026lt;ruby\u0026gt; element. One \u0026lt;rp\u0026gt; element should enclose each of the opening and closing parentheses that wrap the \u0026lt;rt\u0026gt; element that contains the annotation's text. \u0026lt;rt\u0026gt; Specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The \u0026lt;rt\u0026gt; element must always be contained within a \u0026lt;ruby\u0026gt; element. \u0026lt;ruby\u0026gt; Represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common. \u0026lt;s\u0026gt; Renders text with a strikethrough, or a line through it. Use the \u0026lt;s\u0026gt; element to represent things that are no longer relevant or no longer accurate. However, \u0026lt;s\u0026gt; is not appropriate when indicating document edits; for that, use the del and ins elements, as appropriate. \u0026lt;samp\u0026gt; Used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser's default monospaced font (such as Courier or Lucida Console). \u0026lt;small\u0026gt; Represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font size smaller, such as from small to x-small. \u0026lt;span\u0026gt; A generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. It should be used only when no other semantic element is appropriate. \u0026lt;span\u0026gt; is very much like a div element, but div is a block-level element whereas a \u0026lt;span\u0026gt; is an inline-level element. \u0026lt;strong\u0026gt; Indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type. \u0026lt;sub\u0026gt; Specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text. \u0026lt;sup\u0026gt; Specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text. \u0026lt;time\u0026gt; Represents a specific period in time. It may include the datetime attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders. \u0026lt;u\u0026gt; Represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a simple solid underline but may be altered using CSS. \u0026lt;var\u0026gt; Represents the name of a variable in a mathematical expression or a programming context. It's typically presented using an italicized version of the current typeface, although that behavior is browser-dependent. \u0026lt;wbr\u0026gt; Represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location. ::: Image and multimedia # ::: section-content HTML supports various multimedia resources such as images, audio, and video.\nElement Description \u0026lt;area\u0026gt; Defines an area inside an image map that has predefined clickable areas. An image map allows geometric areas on an image to be associated with hyperlink. \u0026lt;audio\u0026gt; Used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the source element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream. \u0026lt;img\u0026gt; Embeds an image into the document. \u0026lt;map\u0026gt; Used with \u0026lt;area\u0026gt; elements to define an image map (a clickable link area). \u0026lt;track\u0026gt; Used as a child of the media elements, audio and video. It lets you specify timed text tracks (or time-based data), for example to automatically handle subtitles. The tracks are formatted in WebVTT format (.vtt files)—Web Video Text Tracks. \u0026lt;video\u0026gt; Embeds a media player which supports video playback into the document. You can also use \u0026lt;video\u0026gt; for audio content, but the audio element may provide a more appropriate user experience. ::: Embedded content # ::: section-content In addition to regular multimedia content, HTML can include a variety of other content, even if it's not always easy to interact with.\nElement Description \u0026lt;embed\u0026gt; Embeds external content at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in. \u0026lt;iframe\u0026gt; Represents a nested browsing context, embedding another HTML page into the current one. \u0026lt;object\u0026gt; Represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin. \u0026lt;picture\u0026gt; Contains zero or more \u0026lt;source\u0026gt; elements and one \u0026lt;img\u0026gt; element to offer alternative versions of an image for different display/device scenarios. \u0026lt;portal\u0026gt; Enables the embedding of another HTML page into the current one to enable smoother navigation into new pages. \u0026lt;source\u0026gt; Specifies multiple media resources for the picture, the audio element, or the video element. It is a void element, meaning that it has no content and does not have a closing tag. It is commonly used to offer the same media content in multiple file formats in order to provide compatibility with a broad range of browsers given their differing support for image file formats and media file formats. ::: SVG and MathML # ::: section-content You can embed SVG and MathML content directly into HTML documents, using the \u0026lt;svg\u0026gt; and \u0026lt;math\u0026gt; elements.\nElement Description \u0026lt;svg\u0026gt; Container defining a new coordinate system and viewport. It is used as the outermost element of SVG documents, but it can also be used to embed an SVG fragment inside an SVG or HTML document. \u0026lt;math\u0026gt; The top-level element in MathML. Every valid MathML instance must be wrapped in it. In addition, you must not nest a second \u0026lt;math\u0026gt; element in another, but you can have an arbitrary number of other child elements in it. ::: Scripting # ::: section-content To create dynamic content and Web applications, HTML supports the use of scripting languages, most prominently JavaScript. Certain elements support this capability.\nElement Description \u0026lt;canvas\u0026gt; Container element to use with either the canvas scripting API or the WebGL API to draw graphics and animations. \u0026lt;noscript\u0026gt; Defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser. \u0026lt;script\u0026gt; Used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The \u0026lt;script\u0026gt; element can also be used with other languages, such as WebGL's GLSL shader programming language and JSON. ::: Demarcating edits # ::: section-content These elements let you provide indications that specific parts of the text have been altered.\nElement Description \u0026lt;del\u0026gt; Represents a range of text that has been deleted from a document. This can be used when rendering \"track changes\" or source code diff information, for example. The \u0026lt;ins\u0026gt; element can be used for the opposite purpose: to indicate text that has been added to the document. \u0026lt;ins\u0026gt; Represents a range of text that has been added to a document. You can use the \u0026lt;del\u0026gt; element to similarly represent a range of text that has been deleted from the document. ::: Table content # ::: section-content The elements here are used to create and handle tabular data.\nElement Description \u0026lt;caption\u0026gt; Specifies the caption (or title) of a table. \u0026lt;col\u0026gt; Defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a \u0026lt;colgroup\u0026gt; element. \u0026lt;colgroup\u0026gt; Defines a group of columns within a table. \u0026lt;table\u0026gt; Represents tabular data — that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data. \u0026lt;tbody\u0026gt; Encapsulates a set of table rows (\u0026lt;tr\u0026gt; elements), indicating that they comprise the body of the table (\u0026lt;table\u0026gt;). \u0026lt;td\u0026gt; Defines a cell of a table that contains data. It participates in the table model. \u0026lt;tfoot\u0026gt; Defines a set of rows summarizing the columns of the table. \u0026lt;th\u0026gt; Defines a cell as a header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes. \u0026lt;thead\u0026gt; Defines a set of rows defining the head of the columns of the table. \u0026lt;tr\u0026gt; Defines a row of cells in a table. The row's cells can then be established using a mix of \u0026lt;td\u0026gt; (data cell) and \u0026lt;th\u0026gt; (header cell) elements. ::: Forms # ::: section-content HTML provides several elements that can be used together to create forms that the user can fill out and submit to the website or application. Further information about this available in the HTML forms guide.\nElement Description \u0026lt;button\u0026gt; An interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it performs an action, such as submitting a form or opening a dialog. \u0026lt;datalist\u0026gt; Contains a set of \u0026lt;option\u0026gt; elements that represent the permissible or recommended options available to choose from within other controls. \u0026lt;fieldset\u0026gt; Used to group several controls as well as labels (\u0026lt;label\u0026gt;) within a web form. \u0026lt;form\u0026gt; Represents a document section containing interactive controls for submitting information. \u0026lt;input\u0026gt; Used to create interactive controls for web-based forms to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The \u0026lt;input\u0026gt; element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes. \u0026lt;label\u0026gt; Represents a caption for an item in a user interface. \u0026lt;legend\u0026gt; Represents a caption for the content of its parent \u0026lt;fieldset\u0026gt;. \u0026lt;meter\u0026gt; Represents either a scalar value within a known range or a fractional value. \u0026lt;optgroup\u0026gt; Creates a grouping of options within a \u0026lt;select\u0026gt; element. \u0026lt;option\u0026gt; Used to define an item contained in a select, an \u0026lt;optgroup\u0026gt;, or a \u0026lt;datalist\u0026gt; element. As such, \u0026lt;option\u0026gt; can represent menu items in popups and other lists of items in an HTML document. \u0026lt;output\u0026gt; Container element into which a site or app can inject the results of a calculation or the outcome of a user action. \u0026lt;progress\u0026gt; Displays an indicator showing the completion progress of a task, typically displayed as a progress bar. \u0026lt;select\u0026gt; Represents a control that provides a menu of options. \u0026lt;textarea\u0026gt; Represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example, a comment on a review or feedback form. ::: Interactive elements # ::: section-content HTML offers a selection of elements that help to create interactive user interface objects.\nElement Description \u0026lt;details\u0026gt; Creates a disclosure widget in which information is visible only when the widget is toggled into an \"open\" state. A summary or label must be provided using the \u0026lt;summary\u0026gt; element. \u0026lt;dialog\u0026gt; Represents a dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow. \u0026lt;summary\u0026gt; Specifies a summary, caption, or legend for a details element's disclosure box. Clicking the \u0026lt;summary\u0026gt; element toggles the state of the parent \u0026lt;details\u0026gt; element open and closed. ::: Web Components # ::: section-content Web Components is an HTML-related technology that makes it possible to, essentially, create and use custom elements as if it were regular HTML. In addition, you can create custom versions of standard HTML elements.\nElement Description \u0026lt;slot\u0026gt; Part of the Web Components technology suite, this element is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together. \u0026lt;template\u0026gt; A mechanism for holding HTML that is not to be rendered immediately when a page is loaded but may be instantiated subsequently during runtime using JavaScript. ::: Obsolete and deprecated elements # ::: section-content ::: {#sect2 .notecard .warning} Warning: These are old HTML elements that are deprecated and should not be used. You should never use them in new projects, and you should replace them in old projects as soon as you can. They are listed here for completeness only. :::\nElement Description \u0026lt;acronym\u0026gt; Allows authors to clearly indicate a sequence of characters that compose an acronym or abbreviation for a word. \u0026lt;big\u0026gt; Renders the enclosed text at a font size one level larger than the surrounding text (medium becomes large, for example). The size is capped at the browser's maximum permitted font size. \u0026lt;center\u0026gt; Displays its block-level or inline contents centered horizontally within its containing element. \u0026lt;content\u0026gt; An obsolete part of the Web Components suite of technologies—was used inside of Shadow DOM as an insertion point, and wasn't meant to be used in ordinary HTML. It has now been replaced by the \u0026lt;slot\u0026gt; element, which creates a point in the DOM at which a shadow DOM can be inserted. Consider using \u0026lt;slot\u0026gt; instead. \u0026lt;dir\u0026gt; Container for a directory of files and/or folders, potentially with styles and icons applied by the user agent. Do not use this obsolete element; instead, you should use the \u0026lt;ul\u0026gt; element for lists, including lists of files. \u0026lt;font\u0026gt; Defines the font size, color and face for its content. \u0026lt;frame\u0026gt; Defines a particular area in which another HTML document can be displayed. A frame should be used within a \u0026lt;frameset\u0026gt;. \u0026lt;frameset\u0026gt; Used to contain \u0026lt;frame\u0026gt; elements. \u0026lt;image\u0026gt; An ancient and poorly supported precursor to the \u0026lt;img\u0026gt; element. It should not be used. \u0026lt;marquee\u0026gt; Used to insert a scrolling area of text. You can control what happens when the text reaches the edges of its content area using its attributes. \u0026lt;menuitem\u0026gt; Represents a command that a user is able to invoke through a popup menu. This includes context menus, as well as menus that might be attached to a menu button. \u0026lt;nobr\u0026gt; Prevents the text it contains from automatically wrapping across multiple lines, potentially resulting in the user having to scroll horizontally to see the entire width of the text. \u0026lt;noembed\u0026gt; An obsolete, non-standard way to provide alternative, or \"fallback\", content for browsers that do not support the embed element or do not support the type of embedded content an author wishes to use. This element was deprecated in HTML 4.01 and above in favor of placing fallback content between the opening and closing tags of an \u0026lt;object\u0026gt; element. \u0026lt;noframes\u0026gt; Provides content to be presented in browsers that don't support (or have disabled support for) the \u0026lt;frame\u0026gt; element. Although most commonly-used browsers support frames, there are exceptions, including certain special-use browsers including some mobile browsers, as well as text-mode browsers. \u0026lt;param\u0026gt; Defines parameters for an \u0026lt;object\u0026gt; element. \u0026lt;plaintext\u0026gt; Renders everything following the start tag as raw text, ignoring any following HTML. There is no closing tag, since everything after it is considered raw text. \u0026lt;rb\u0026gt; Used to delimit the base text component of a ruby annotation, i.e. the text that is being annotated. One \u0026lt;rb\u0026gt; element should wrap each separate atomic segment of the base text. \u0026lt;rtc\u0026gt; Embraces semantic annotations of characters presented in a ruby of \u0026lt;rb\u0026gt; elements used inside of \u0026lt;ruby\u0026gt; element. \u0026lt;rb\u0026gt; elements can have both pronunciation (\u0026lt;rt\u0026gt;) and semantic (\u0026lt;rtc\u0026gt;) annotations. \u0026lt;shadow\u0026gt; An obsolete part of the Web Components technology suite that was intended to be used as a shadow DOM insertion point. You might have used it if you have created multiple shadow roots under a shadow host. Consider using \u0026lt;slot\u0026gt; instead. \u0026lt;strike\u0026gt; Places a strikethrough (horizontal line) over text. \u0026lt;tt\u0026gt; Creates inline text which is presented using the user agent default monospace font face. This element was created for the purpose of rendering text as it would be displayed on a fixed-width display such as a teletype, text-only screen, or line printer. \u0026lt;xmp\u0026gt; Renders text between the start and end tags without interpreting the HTML in between and using a monospaced font. The HTML2 specification recommended that it should be rendered wide enough to allow 80 characters per line. ::: See also # ::: section-content\nElement interface ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element{._attribution-link} :::\n"},{"id":55,"href":"/docs/references/languages/html/element/a/","title":"A","section":"HTML","content":" \u0026lt;a\u0026gt;: The Anchor element # ::: section-content The \u0026lt;a\u0026gt; HTML element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address.\nContent within each \u0026lt;a\u0026gt; should indicate the link's destination. If the href attribute is present, pressing the enter key while focused on the \u0026lt;a\u0026gt; element will activate it. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;a\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} You can reach Michael at:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;https://example.com\u0026quot;\u0026gt;Website\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;mailto:m.bluth@example.com\u0026quot;\u0026gt;Email\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;tel:+123456789\u0026quot;\u0026gt;Phone\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} li { margin-bottom: 0.5rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element's attributes include the global attributes.\ndownload Causes the browser to treat the linked URL as a download. Can be used with or without a filename value:\nWithout a value, the browser will suggest a filename/extension, generated from various sources: The Content-Disposition HTTP header The final segment in the URL path The media type (from the Content-Type header, the start of a data: URL, or Blob.type for a blob: URL) filename: defining a value suggests it as the filename. / and \\ characters are converted to underscores (_). Filesystems may forbid other characters in filenames, so browsers will adjust the suggested name if necessary. ::: {#sect1 .notecard .note} Note:\ndownload only works for same-origin URLs, or the blob: and data: schemes. How browsers treat downloads varies by browser, user settings, and other factors. The user may be prompted before a download starts, or the file may be saved automatically, or it may open automatically, either in an external application or in the browser itself. If the Content-Disposition header has different information from the download attribute, resulting behavior may differ: If the header specifies a filename, it takes priority over a filename specified in the download attribute. If the header specifies a disposition of inline, Chrome and Firefox prioritize the attribute and treat it as a download. Old Firefox versions (before 82) prioritize the header and will display the content inline. ::: href The URL that the hyperlink points to. Links are not restricted to HTTP-based URLs \u0026mdash; they can use any URL scheme supported by browsers:\nSections of a page with document fragments Specific text portions with text fragments Pieces of media files with media fragments Telephone numbers with tel: URLs Email addresses with mailto: URLs SMS text messages with sms: URLs While web browsers may not support other URL schemes, websites can with registerProtocolHandler() hreflang Hints at the human language of the linked URL. No built-in functionality. Allowed values are the same as the global lang attribute.\nping A space-separated list of URLs. When the link is followed, the browser will send POST requests with the body PING to the URLs. Typically for tracking.\nreferrerpolicy How much of the referrer to send when following the link.\nno-referrer: The Referer header will not be sent. no-referrer-when-downgrade: The Referer header will not be sent to origins without TLS ( HTTPS). origin: The sent referrer will be limited to the origin of the referring page: its scheme, host, and port. origin-when-cross-origin: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path. same-origin: A referrer will be sent for same origin, but cross-origin requests will contain no referrer information. strict-origin: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP). strict-origin-when-cross-origin (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP). unsafe-url: The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins. rel The relationship of the linked URL as space-separated link types.\ntarget Where to display the linked URL, as the name for a browsing context (a tab, window, or \u0026lt;iframe\u0026gt;). The following keywords have special meanings for where to load the URL:\n_self: the current browsing context. (Default) _blank: usually a new tab, but users can configure browsers to open a new window instead. _parent: the parent browsing context of the current one. If no parent, behaves as _self. _top: the topmost browsing context (the \u0026quot;highest\u0026quot; context that's an ancestor of the current one). If no ancestors, behaves as _self. ::: {#sect2 .notecard .note} Note: Setting target=\u0026quot;_blank\u0026quot; on \u0026lt;a\u0026gt; elements implicitly provides the same rel behavior as setting rel=\u0026quot;noopener\u0026quot; which does not set window.opener. :::\ntype Hints at the linked URL's format with a MIME type. No built-in functionality. :::\nDeprecated attributes # ::: section-content\ncharset [Deprecated]{.visually-hidden} Hinted at the character encoding of the linked URL.\n::: {#sect3 .notecard .note} Note: This attribute is deprecated and should not be used by authors. Use the HTTP Content-Type header on the linked URL. :::\ncoords [Deprecated]{.visually-hidden} Used with the shape attribute. A comma-separated list of coordinates.\nname [Deprecated]{.visually-hidden} Was required to define a possible target location in a page. In HTML 4.01, id and name could both be used on \u0026lt;a\u0026gt;, as long as they had identical values.\n::: {#sect4 .notecard .note} Note: Use the global attribute id instead. :::\nrev [Deprecated]{.visually-hidden} Specified a reverse link; the opposite of the rel attribute. Deprecated for being very confusing.\nshape [Deprecated]{.visually-hidden} The shape of the hyperlink's region in an image map.\n::: {#sect5 .notecard .note} Note: Use the \u0026lt;area\u0026gt; element for image maps instead. ::: :::\nExamples # Linking to an absolute URL # ::: section-content\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;a href=\u0026#34;https://www.mozilla.com\u0026#34;\u0026gt;Mozilla\u0026lt;/a\u0026gt; :::\nResult # ::: {#sect6 .code-example} ::: iframe ::: ::: :::\nLinking to relative URLs # ::: section-content\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;a href=\u0026#34;//example.com\u0026#34;\u0026gt;Scheme-relative URL\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/en-US/docs/Web/HTML\u0026#34;\u0026gt;Origin-relative URL\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;./p\u0026#34;\u0026gt;Directory-relative URL\u0026lt;/a\u0026gt; :::\nResult # ::: {#sect7 .code-example} ::: iframe ::: ::: :::\nLinking to an element on the same page # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;!-- \u0026lt;a\u0026gt; element links to the section below --\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;#Section_further_down\u0026#34;\u0026gt;Jump to the heading below\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;!-- Heading to link to --\u0026gt; \u0026lt;h2 id=\u0026#34;Section_further_down\u0026#34;\u0026gt;Section further down\u0026lt;/h2\u0026gt; :::\nResult # ::: {#sect8 .code-example} ::: iframe ::: :::\n::: {#sect9 .notecard .note} Note: You can use href=\u0026quot;#top\u0026quot; or the empty fragment (href=\u0026quot;#\u0026quot;) to link to the top of the current page, as defined in the HTML specification{target=\u0026quot;_blank\u0026quot;}. ::: :::\nLinking to an email address # ::: section-content To create links that open in the user's email program to let them send a new message, use the mailto: scheme:\n::: code-example [html]{.language-name}\n\u0026lt;a href=\u0026#34;mailto:nowhere@mozilla.org\u0026#34;\u0026gt;Send email to nowhere\u0026lt;/a\u0026gt; :::\nResult # ::: {#sect10 .code-example} ::: iframe ::: :::\nFor details about mailto: URLs, such as including a subject or body, see Email links or RFC 6068{target=\u0026quot;_blank\u0026quot;}. :::\nLinking to telephone numbers # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;a href=\u0026#34;tel:+49.157.0156\u0026#34;\u0026gt;+49 157 0156\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;tel:+1(800)555-0123\u0026#34;\u0026gt;(800) 555-0123\u0026lt;/a\u0026gt; :::\nResult # ::: {#sect11 .code-example} ::: iframe ::: :::\ntel: link behavior varies with device capabilities:\nCellular devices autodial the number. Most operating systems have programs that can make calls, like Skype or FaceTime. Websites can make phone calls with registerProtocolHandler, such as web.skype.com. Other behaviors include saving the number to contacts, or sending the number to another device. See RFC 3966{target=\u0026quot;_blank\u0026quot;} for syntax, additional features, and other details about the tel: URL scheme. :::\nUsing the download attribute to save a \u0026lt;canvas\u0026gt; as a PNG # ::: section-content To save a \u0026lt;canvas\u0026gt; element's contents as an image, you can create a link where the href is the canvas data as a data: URL created with JavaScript and the download attribute provides the file name for the downloaded PNG file:\nExample painting app with save link # HTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; Paint by holding down the mouse button and moving it. \u0026lt;a href=\u0026#34;\u0026#34; download=\u0026#34;my_painting.png\u0026#34;\u0026gt;Download my painting\u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;canvas width=\u0026#34;300\u0026#34; height=\u0026#34;300\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; :::\nCSS # ::: code-example [css]{.language-name}\nhtml { font-family: sans-serif; } canvas { background: #fff; border: 1px dashed; } a { display: inline-block; background: #69c; color: #fff; padding: 5px 10px; } :::\nJavaScript # ::: code-example [js]{.language-name}\nconst canvas = document.querySelector(\u0026#34;canvas\u0026#34;); const c = canvas.getContext(\u0026#34;2d\u0026#34;); c.fillStyle = \u0026#34;hotpink\u0026#34;; let isDrawing; function draw(x, y) { if (isDrawing) { c.beginPath(); c.arc(x, y, 10, 0, Math.PI * 2); c.closePath(); c.fill(); } } canvas.addEventListener(\u0026#34;mousemove\u0026#34;, (event) =\u0026gt; draw(event.offsetX, event.offsetY), ); canvas.addEventListener(\u0026#34;mousedown\u0026#34;, () =\u0026gt; (isDrawing = true)); canvas.addEventListener(\u0026#34;mouseup\u0026#34;, () =\u0026gt; (isDrawing = false)); document .querySelector(\u0026#34;a\u0026#34;) .addEventListener( \u0026#34;click\u0026#34;, (event) =\u0026gt; (event.target.href = canvas.toDataURL()), ); :::\nResult # ::: {#sect12 .code-example} ::: iframe ::: ::: :::\nSecurity and privacy # ::: section-content \u0026lt;a\u0026gt; elements can have consequences for users' security and privacy. See Referer header: privacy and security concerns for information.\nUsing target=\u0026quot;_blank\u0026quot; without rel=\u0026quot;noreferrer\u0026quot; and rel=\u0026quot;noopener\u0026quot; makes the website vulnerable to window.opener API exploitation attacks, although note that, in newer browser versions setting target=\u0026quot;_blank\u0026quot; implicitly provides the same protection as setting rel=\u0026quot;noopener\u0026quot;. See browser compatibility for details. :::\nAccessibility # Strong link text # ::: section-content The content inside a link should indicate where the link goes, even out of context.\nInaccessible, weak link text # A sadly common mistake is to only link the words \u0026quot;click here\u0026quot; or \u0026quot;here\u0026quot;:\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;Learn more about our products \u0026lt;a href=\u0026#34;/products\u0026#34;\u0026gt;here\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt; :::\nResult # ::: {#sect13 .code-example} ::: iframe ::: :::\nStrong link text # Luckily, this is an easy fix, and it's actually shorter than the inaccessible version!\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;Learn more \u0026lt;a href=\u0026#34;/products\u0026#34;\u0026gt;about our products\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt; :::\nResult # ::: {#sect14 .code-example} ::: iframe ::: :::\nAssistive software has shortcuts to list all links on a page. However, strong link text benefits all users \u0026mdash; the \u0026quot;list all links\u0026quot; shortcut emulates how sighted users quickly scan pages. :::\nonclick events # ::: section-content Anchor elements are often abused as fake buttons by setting their href to # or javascript:void(0) to prevent the page from refreshing, then listening for their click events .\nThese bogus href values cause unexpected behavior when copying/dragging links, opening links in a new tab/window, bookmarking, or when JavaScript is loading, errors, or is disabled. They also convey incorrect semantics to assistive technologies, like screen readers.\nUse a \u0026lt;button\u0026gt; instead. In general, you should only use a hyperlink for navigation to a real URL. :::\nExternal links and linking to non-HTML resources # ::: section-content Links that open in a new tab/window via target=\u0026quot;_blank\u0026quot;, or links that point to a download file should indicate what will happen when the link is followed.\nPeople experiencing low vision conditions, navigating with the aid of screen reading technology, or with cognitive concerns may be confused when a new tab, window, or application opens unexpectedly. Older screen-reading software may not even announce the behavior.\nLink that opens a new tab/window # ::: code-example [html]{.language-name}\n\u0026lt;a target=\u0026#34;_blank\u0026#34; href=\u0026#34;https://www.wikipedia.org\u0026#34;\u0026gt; Wikipedia (opens in new tab) \u0026lt;/a\u0026gt; :::\nResult # ::: {#sect15 .code-example} ::: iframe ::: :::\nLink to a non-HTML resource # ::: code-example [html]{.language-name}\n\u0026lt;a href=\u0026#34;2017-annual-report.ppt\u0026#34;\u0026gt;2017 Annual Report (PowerPoint)\u0026lt;/a\u0026gt; :::\nIf an icon is used to signify link behavior, make sure it has an alt text:\n::: code-example [html]{.language-name}\n\u0026lt;a target=\u0026#34;_blank\u0026#34; href=\u0026#34;https://www.wikipedia.org\u0026#34;\u0026gt; Wikipedia \u0026lt;img alt=\u0026#34;(opens in new tab)\u0026#34; src=\u0026#34;newtab.svg\u0026#34; /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;2017-annual-report.ppt\u0026#34;\u0026gt; 2017 Annual Report \u0026lt;img alt=\u0026#34;(PowerPoint file)\u0026#34; src=\u0026#34;ppt-icon.svg\u0026#34; /\u0026gt; \u0026lt;/a\u0026gt; :::\nResult # ::: {#sect16 .code-example} ::: iframe ::: :::\nWebAIM: Links and Hypertext - Hypertext Links{target=\u0026quot;_blank\u0026quot;} MDN / Understanding WCAG, Guideline 3.2 G200: Opening new windows and tabs from a link only when necessary{target=\u0026quot;_blank\u0026quot;} G201: Giving users advanced warning when opening a new window{target=\u0026quot;_blank\u0026quot;} ::: Skip links # ::: section-content A skip link is a link placed as early as possible in \u0026lt;body\u0026gt; content that points to the beginning of the page's main content. Usually, CSS hides a skip link offscreen until focused.\n::: code-example [html]{.language-name}\n\u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;#content\u0026#34; class=\u0026#34;skip-link\u0026#34;\u0026gt;Skip to main content\u0026lt;/a\u0026gt; \u0026lt;header\u0026gt;…\u0026lt;/header\u0026gt; \u0026lt;!-- The skip link jumps to here --\u0026gt; \u0026lt;main id=\u0026#34;content\u0026#34;\u0026gt;\u0026lt;/main\u0026gt; \u0026lt;/body\u0026gt; :::\n::: code-example [css]{.language-name}\n.skip-link { position: absolute; top: -3em; background: #fff; } .skip-link:focus { top: 0; } :::\nResult # ::: {#sect17 .code-example} ::: iframe ::: :::\nSkip links let keyboard users bypass content repeated throughout multiple pages, such as header navigation.\nSkip links are especially useful for people who navigate with the aid of assistive technology such as switch control, voice command, or mouth sticks/head wands, where the act of moving through repetitive links can be laborious.\nWebAIM: \u0026quot;Skip Navigation\u0026quot; Links{target=\u0026quot;_blank\u0026quot;} How-to: Use Skip Navigation links{target=\u0026quot;_blank\u0026quot;} MDN / Understanding WCAG, Guideline 2.4 explanations Understanding Success Criterion 2.4.1{target=\u0026quot;_blank\u0026quot;} ::: Size and proximity # ::: section-content\nSize # Interactive elements, like links, should provide an area large enough that it is easy to activate them. This helps a variety of people, including those with motor control issues and those using imprecise inputs such as a touchscreen. A minimum size of 44×44 CSS pixels{target=\u0026quot;_blank\u0026quot;} is recommended.\nText-only links in prose content are exempt from this requirement, but it's still a good idea to make sure enough text is hyperlinked to be easily activated.\nUnderstanding Success Criterion 2.5.5: Target Size{target=\u0026quot;_blank\u0026quot;} Target Size and 2.5.5{target=\u0026quot;_blank\u0026quot;} Quick test: Large touch targets{target=\u0026quot;_blank\u0026quot;} Proximity # Interactive elements, like links, placed in close visual proximity should have space separating them. Spacing helps people with motor control issues, who may otherwise accidentally activate the wrong interactive content.\nSpacing may be created using CSS properties like margin.\nHand tremors and the giant-button-problem{target=\u0026quot;_blank\u0026quot;} ::: Technical summary # ::: section-content\nContent categories Flow content, phrasing content, interactive content, palpable content. Permitted content Transparent, except that no descendant may be interactive content or an a element, and no descendant may have a specified tabindex attribute. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content, or any element that accepts flow content, but not other \u0026lt;a\u0026gt; elements. Implicit ARIA role link when href attribute is present, otherwise generic Permitted ARIA roles When href attribute is present:\nbutton checkbox menuitem menuitemcheckbox menuitemradio option radio switch tab treeitem When href attribute is not present:\nany DOM interface HTMLAnchorElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-a-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Android Firefox for Android Opera Android Safari Samsung Explorer Android on IOS Internet a 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nStarting with Firefox 41, \\\u0026lt;a\\\u0026gt; without Starting with Firefox 41, \\\u0026lt;a\\\u0026gt; without `href` attribute is no longer `href` attribute is no longer classified as interactive content: classified as interactive content: clicking it inside \\\u0026lt;label\\\u0026gt; will clicking it inside \\\u0026lt;label\\\u0026gt; will activate labelled content ([bug activate labelled content ([bug 1167816](https://bugzil.la/1167816)). 1167816](https://bugzil.la/1167816)). attributionsrc 117 117 No No 103 No 117 117 No No No No\ncharset 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\ncoords No No 1\u0026ndash;58 No No 1 No No 4\u0026ndash;58 No 1 No\nYou can no longer nest an `\u0026lt;a\u0026gt;` element You can no longer nest an `\u0026lt;a\u0026gt;` element inside a `\u0026lt;map\u0026gt;` element to create a inside a `\u0026lt;map\u0026gt;` element to create a hotspot region - `coords` and `shape` hotspot region - `coords` and `shape` attribute support removed. attribute support removed. download 14 18 20 No 15 10.1 4.4 18 20 14 13 1.0\nStarting in Starting in Edge 79, cross-origin downloads are not supported on the `\u0026lt;a\u0026gt;` element. Starting in Starting in Starting in Starting in Starting in Chrome 65, Opera 52, Chrome 65, Chrome 65, Opera 47, Samsung cross-origin 13 cross-origin cross-origin cross-origin cross-origin Internet 9.0, downloads are downloads are downloads are downloads are downloads are cross-origin not supported \\[\\\u0026quot;Until Edge 14 (build 14357), attempting to download data URIs caused Edge to crash not supported not supported not supported not supported downloads are on the `\u0026lt;a\u0026gt;` ([bug on the `\u0026lt;a\u0026gt;` on the `\u0026lt;a\u0026gt;` on the `\u0026lt;a\u0026gt;` on the `\u0026lt;a\u0026gt;` not supported element. 7160092](https://developer.microsoft.com/microsoft-edge/platform/issues/7160092/)).\\\u0026quot;, element. element. element. element. on the `\u0026lt;a\u0026gt;` \\\u0026quot;Edge 17 or older didn\\'t follow the attributes\\' value to determine filename ([bug element. 7260192](https://developer.microsoft.com/microsoft-edge/platform/issues/7260192/)).\\\u0026quot;\\] href 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nhref_sms No No 12 No No No No No 14 No No No\nhreflang 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nimplicit_noopener 88 88 79 No 74 12.1 No 88 79 Yes 12.2 15.0\nname 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nping 12 17 1 No 15 6 ≤37 18 No 14 6 1.0\nreferrerpolicy 51 79 50 No 38 14 51 51 50 41 14 7.2\nrel 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nrev 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nshape No No 1\u0026ndash;58 No No 1 No No 4\u0026ndash;58 No 1 No\nYou can no longer nest an `\u0026lt;a\u0026gt;` element You can no longer nest an `\u0026lt;a\u0026gt;` element inside a `\u0026lt;map\u0026gt;` element to create a inside a `\u0026lt;map\u0026gt;` element to create a hotspot region - `coords` and `shape` hotspot region - `coords` and `shape` attribute support removed. attribute support removed. target 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\ntext_fragments 80 80 No No 67 16.1 80 80 No 57 16.1 13.0\ntype 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 # :::\nSee also # ::: section-content\n\u0026lt;link\u0026gt; is similar to \u0026lt;a\u0026gt;, but for metadata hyperlinks that are invisible to users. :link is a CSS pseudo-class that will match \u0026lt;a\u0026gt; elements with URL in href attribute that was not yet visited by the user. :visited is a CSS pseudo-class that will match \u0026lt;a\u0026gt; elements with URL in href attribute that was visited by the user in the past. :any-link is a CSS pseudo-class that will match \u0026lt;a\u0026gt; elements with href attribute. Text fragments are user-agent instructions added to URLs that allow content authors to link to specific text on a page, without IDs being required. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/a{._attribution-link} :::\n"},{"id":56,"href":"/docs/references/languages/html/element/abbr/","title":"Abbr","section":"HTML","content":" \u0026lt;abbr\u0026gt;: The Abbreviation element # ::: section-content The \u0026lt;abbr\u0026gt; HTML element represents an abbreviation or acronym.\nWhen including an abbreviation or acronym, provide a full expansion of the term in plain text on first use, along with the \u0026lt;abbr\u0026gt; to mark up the abbreviation. This informs the user what the abbreviation or acronym means.\nThe optional title attribute can provide an expansion for the abbreviation or acronym when a full expansion is not present. This provides a hint to user agents on how to announce/display the content while informing all users what the abbreviation means. If present, title must contain this full description and nothing else. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;abbr\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} You can use CSS (Cascading Style Sheets) to style your HTML (HyperText Markup Language). Using style sheets, you can keep your CSS presentation layer and HTML content layer separate. This is called \u0026ldquo;separation of concerns.\u0026rdquo; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} abbr { font-style: italic; color: chocolate; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only supports the global attributes. The title attribute has a specific semantic meaning when used with the \u0026lt;abbr\u0026gt; element; it must contain a full human-readable description or expansion of the abbreviation. This text is often presented by browsers as a tooltip when the mouse cursor is hovered over the element.\nEach \u0026lt;abbr\u0026gt; element you use is independent of all others; providing a title for one does not automatically attach the same expansion text to others with the same content text. :::\nUsage notes # Typical use cases # ::: section-content It's certainly not required that all abbreviations be marked up using \u0026lt;abbr\u0026gt;. There are, though, a few cases where it's helpful to do so:\nWhen an abbreviation is used and you want to provide an expansion or definition outside the flow of the document's content, use \u0026lt;abbr\u0026gt; with an appropriate title. To define an abbreviation which may be unfamiliar to the reader, present the term using \u0026lt;abbr\u0026gt; and inline text providing the definition. Include a title attribute only when the inline expansion or definition is not available. When an abbreviation's presence in the text needs to be semantically noted, the \u0026lt;abbr\u0026gt; element is useful. This can be used, in turn, for styling or scripting purposes. You can use \u0026lt;abbr\u0026gt; in concert with \u0026lt;dfn\u0026gt; to establish definitions for terms which are abbreviations or acronyms. See the example Defining an abbreviation below. ::: Grammar considerations # ::: section-content In languages with grammatical number{target=\u0026quot;_blank\u0026quot;} (that is, languages where the number of items affects the grammar of a sentence), use the same grammatical number in your title attribute as inside your \u0026lt;abbr\u0026gt; element. This is especially important in languages with more than two numbers, such as Arabic, but is also relevant in English. :::\nDefault styling # ::: section-content The purpose of this element is purely for the convenience of the author and all browsers display it inline ( display: inline) by default, though its default styling varies from one browser to another:\nSome browsers add a dotted underline to the content of the element. Others add a dotted underline while converting the contents to small caps. Others may not style it differently than a \u0026lt;span\u0026gt; element. To control this styling, use text-decoration and font-variant. :::\nExamples # Marking up an abbreviation semantically # ::: section-content To mark up an abbreviation without providing an expansion or description, use \u0026lt;abbr\u0026gt; without any attributes, as seen in this example.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;Using \u0026lt;abbr\u0026gt;HTML\u0026lt;/abbr\u0026gt; is fun and easy!\u0026lt;/p\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nStyling abbreviations # ::: section-content You can use CSS to set a custom style to be used for abbreviations, as seen in this simple example.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;Using \u0026lt;abbr\u0026gt;CSS\u0026lt;/abbr\u0026gt;, you can style your abbreviations!\u0026lt;/p\u0026gt; :::\nCSS # ::: code-example [css]{.language-name}\nabbr { font-variant: all-small-caps; } :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nProviding an expansion # ::: section-content Adding a title attribute lets you provide an expansion or definition for the abbreviation or acronym.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;Ashok\u0026#39;s joke made me \u0026lt;abbr title=\u0026#34;Laugh Out Loud\u0026#34;\u0026gt;LOL\u0026lt;/abbr\u0026gt; big time.\u0026lt;/p\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nDefining an abbreviation # ::: section-content You can use \u0026lt;abbr\u0026gt; in tandem with \u0026lt;dfn\u0026gt; to more formally define an abbreviation, as shown here.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; \u0026lt;dfn id=\u0026#34;html\u0026#34;\u0026gt;\u0026lt;abbr title=\u0026#34;HyperText Markup Language\u0026#34;\u0026gt;HTML\u0026lt;/abbr\u0026gt; \u0026lt;/dfn\u0026gt; is a markup language used to create the semantics and structure of a web page. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; A \u0026lt;dfn id=\u0026#34;spec\u0026#34;\u0026gt;Specification\u0026lt;/dfn\u0026gt; (\u0026lt;abbr\u0026gt;spec\u0026lt;/abbr\u0026gt;) is a document that outlines in detail how a technology or API is intended to function and how it is accessed. \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # ::: section-content Spelling out the acronym or abbreviation in full the first time it is used on a page is beneficial for helping people understand it, especially if the content is technical or industry jargon.\nOnly include a title if expanding the abbreviation or acronym in the text is not possible. Having a difference between the announced word or phrase and what is displayed on the screen, especially if it's technical jargon the reader may not be familiar with, can be jarring.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; JavaScript Object Notation (\u0026lt;abbr\u0026gt;JSON\u0026lt;/abbr\u0026gt;) is a lightweight data-interchange format. \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect5 .code-example} ::: iframe ::: :::\nThis is especially helpful for people who are unfamiliar with the terminology or concepts discussed in the content, people who are new to the language, and people with cognitive concerns. :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content Permitted content Phrasing content Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content Implicit ARIA role No corresponding role Permitted ARIA roles Any DOM Interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-abbr-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android abbr 2 12 1 7 15 4 4.4 18 4 14 3.2 1.0\nBefore Firefox 4, this element implemented the `HTMLSpanElement` interface instead of the standard `HTMLElement` interface. :::\nSee also # ::: section-content\nUsing the \u0026lt;abbr\u0026gt; element ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr{._attribution-link} :::\n"},{"id":57,"href":"/docs/references/languages/html/element/acronym/","title":"Acronym","section":"HTML","content":" \u0026lt;acronym\u0026gt; # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. ::: :::\nSummary # ::: section-content The \u0026lt;acronym\u0026gt; HTML element allows authors to clearly indicate a sequence of characters that compose an acronym or abbreviation for a word.\n::: {#sect2 .notecard .warning} Warning: Don't use this element. Use the \u0026lt;abbr\u0026gt; element instead. ::: :::\nAttributes # ::: section-content This element only has global attributes, which are common to all elements. :::\nDOM Interface # ::: section-content This element implements the HTMLElement interface. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; The \u0026lt;acronym title=\u0026#34;World Wide Web\u0026#34;\u0026gt;WWW\u0026lt;/acronym\u0026gt; is only a component of the Internet. \u0026lt;/p\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nDefault styling # ::: section-content Though the purpose of this tag is purely for the convenience of the author, its default styling varies from one browser to another:\nOpera, Firefox, Chrome, and some others add a dotted underline to the content of the element. A few browsers not only add a dotted underline, but also put it in small caps; to avoid this styling, adding something like font-variant: none in the CSS takes care of this case. It is therefore recommended that web authors either explicitly style this element, or accept some cross-browser variation. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# acronym]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet acronym 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 :::\nSee also # ::: section-content\nThe \u0026lt;abbr\u0026gt; HTML element ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/acronym{._attribution-link} :::\n"},{"id":58,"href":"/docs/references/languages/html/element/address/","title":"Address","section":"HTML","content":" \u0026lt;address\u0026gt;: The Contact Address element # ::: section-content The \u0026lt;address\u0026gt; HTML element indicates that the enclosed HTML provides contact information for a person or people, or for an organization. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;address\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Contact the author of this page:\n\u0026lt;address\u0026gt; \u0026lt;a href=\u0026quot;mailto:jim@rock.com\u0026quot;\u0026gt;jim@rock.com\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;a href=\u0026quot;tel:+13115552368\u0026quot;\u0026gt;(311) 555-2368\u0026lt;/a\u0026gt; \u0026lt;/address\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} a[href^=\u0026lsquo;mailto\u0026rsquo;]::before { content: \u0026lsquo;📧 \u0026lsquo;; }\na[href^='tel']::before { content: '📞 '; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe contact information provided by an \u0026lt;address\u0026gt; element's contents can take whatever form is appropriate for the context, and may include any type of contact information that is needed, such as a physical address, URL, email address, phone number, social media handle, geographic coordinates, and so forth. The \u0026lt;address\u0026gt; element should include the name of the person, people, or organization to which the contact information refers.\n\u0026lt;address\u0026gt; can be used in a variety of contexts, such as providing a business's contact information in the page header, or indicating the author of an article by including an \u0026lt;address\u0026gt; element within the \u0026lt;article\u0026gt;. :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content\nThe \u0026lt;address\u0026gt; element can only be used to represent the contact information for its nearest \u0026lt;article\u0026gt; or \u0026lt;body\u0026gt; element ancestor. This element should not contain more information than the contact information, like a publication date (which belongs in a \u0026lt;time\u0026gt; element). Typically an \u0026lt;address\u0026gt; element can be placed inside the \u0026lt;footer\u0026gt; element of the current section, if any. ::: Examples # ::: section-content This example demonstrates the use of \u0026lt;address\u0026gt; to demarcate the contact information for an article's author.\n::: code-example [html]{.language-name}\n\u0026lt;address\u0026gt; You can contact author at \u0026lt;a href=\u0026#34;http://www.somedomain.com/contact\u0026#34;\u0026gt;www.somedomain.com\u0026lt;/a\u0026gt;.\u0026lt;br /\u0026gt; If you see any bugs, please \u0026lt;a href=\u0026#34;mailto:webmaster@somedomain.com\u0026#34;\u0026gt;contact webmaster\u0026lt;/a\u0026gt;.\u0026lt;br /\u0026gt; You may also want to visit us:\u0026lt;br /\u0026gt; Mozilla Foundation\u0026lt;br /\u0026gt; 331 E Evelyn Ave\u0026lt;br /\u0026gt; Mountain View, CA 94041\u0026lt;br /\u0026gt; USA \u0026lt;/address\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: :::\nAlthough it renders text with the same default styling as the \u0026lt;i\u0026gt; or \u0026lt;em\u0026gt; elements, it is more appropriate to use \u0026lt;address\u0026gt; when dealing with contact information, as it conveys additional semantic information. :::\nTechnical summary # ::: section-content\nContent categories Flow content, palpable content. Permitted content Flow content, but with no nested \u0026lt;address\u0026gt; element, no heading content (\u0026lt;hgroup\u0026gt;, h1, h2, h3, h4, h5, h6), no sectioning content (\u0026lt;article\u0026gt;, \u0026lt;aside\u0026gt;, \u0026lt;section\u0026gt;, \u0026lt;nav\u0026gt;), and no \u0026lt;header\u0026gt; or \u0026lt;footer\u0026gt; element. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content, but always excluding \u0026lt;address\u0026gt; elements (according to the logical principle of symmetry, if \u0026lt;address\u0026gt; tag, as a parent, can not have nested \u0026lt;address\u0026gt; element, then the same \u0026lt;address\u0026gt; content can not have \u0026lt;address\u0026gt; tag as its parent). Implicit ARIA role group Permitted ARIA roles Any DOM interface HTMLElement Prior to Gecko 2.0 (Firefox 4), Gecko implemented this element using the HTMLSpanElement interface ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-address-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet address 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 :::\nSee also # ::: section-content\nOthers section-related elements: \u0026lt;body\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;aside\u0026gt;, h1, h2, h3, h4, h5, h6, \u0026lt;hgroup\u0026gt;, \u0026lt;footer\u0026gt;, \u0026lt;section\u0026gt;, \u0026lt;header\u0026gt;; Sections and outlines of an HTML document. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/address{._attribution-link} :::\n"},{"id":59,"href":"/docs/references/languages/html/element/area/","title":"Area","section":"HTML","content":" \u0026lt;area\u0026gt;: The Image Map Area element # ::: section-content The \u0026lt;area\u0026gt; HTML element defines an area inside an image map that has predefined clickable areas. An image map allows geometric areas on an image to be associated with hypertext links.\nThis element is used only within a \u0026lt;map\u0026gt; element. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;area\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-taller .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} img { display: block; margin: 0 auto; width: 260px; height: 260px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element's attributes include the global attributes.\nalt A text string alternative to display on browsers that do not display images. The text should be phrased so that it presents the user with the same kind of choice as the image would offer when displayed without the alternative text. This attribute is required only if the href attribute is used.\ncoords The coords attribute details the coordinates of the shape attribute in size, shape, and placement of an \u0026lt;area\u0026gt;. This attribute must not be used if shape is set to default.\nrect: the value is x1,y1,x2,y2. The value specifies the coordinates of the top-left and bottom-right corner of the rectangle. For example, in \u0026lt;area shape=\u0026quot;rect\u0026quot; coords=\u0026quot;0,0,253,27\u0026quot; href=\u0026quot;#\u0026quot; target=\u0026quot;_blank\u0026quot; alt=\u0026quot;Mozilla\u0026quot;\u0026gt; the coordinates are 0,0 and 253,27, indicating the top-left and bottom-right corners of the rectangle, respectively. circle: the value is x,y,radius. Value specifies the coordinates of the circle center and the radius. For example: \u0026lt;area shape=\u0026quot;circle\u0026quot; coords=\u0026quot;130,136,60\u0026quot; href=\u0026quot;#\u0026quot; target=\u0026quot;_blank\u0026quot; alt=\u0026quot;MDN\u0026quot;\u0026gt; poly: the value is x1,y1,x2,y2,..,xn,yn. Value specifies the coordinates of the edges of the polygon. If the first and last coordinate pairs are not the same, the browser will add the last coordinate pair to close the polygon The values are numbers of CSS pixels.\ndownload This attribute, if present, indicates that the author intends the hyperlink to be used for downloading a resource. See \u0026lt;a\u0026gt; for a full description of the download attribute.\nhref The hyperlink target for the area. Its value is a valid URL. This attribute may be omitted; if so, the \u0026lt;area\u0026gt; element does not represent a hyperlink.\nping Contains a space-separated list of URLs to which, when the hyperlink is followed, POST requests with the body PING will be sent by the browser (in the background). Typically used for tracking.\nreferrerpolicy A string indicating which referrer to use when fetching the resource:\nno-referrer: The Referer header will not be sent. no-referrer-when-downgrade: The Referer header will not be sent to origins without TLS ( HTTPS). origin: The sent referrer will be limited to the origin of the referring page: its scheme, host, and port. origin-when-cross-origin: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path. same-origin: A referrer will be sent for same origin, but cross-origin requests will contain no referrer information. strict-origin: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP). strict-origin-when-cross-origin (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP). unsafe-url: The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins. rel For anchors containing the href attribute, this attribute specifies the relationship of the target object to the link object. The value is a space-separated list of link types. The values and their semantics will be registered by some authority that might have meaning to the document author. The default relationship, if no other is given, is void. Use this attribute only if the href attribute is present.\nshape The shape of the associated hot spot. The specifications for HTML defines the values rect, which defines a rectangular region; circle, which defines a circular region; poly, which defines a polygon; and default, which indicates the entire region beyond any defined shapes.\ntarget A keyword or author-defined name of the browsing context to display the linked resource. The following keywords have special meanings:\n_self (default): Show the resource in the current browsing context. _blank: Show the resource in a new, unnamed browsing context. _parent: Show the resource in the parent browsing context of the current one, if the current page is inside a frame. If there is no parent, acts the same as _self. _top: Show the resource in the topmost browsing context (the browsing context that is an ancestor of the current one and has no parent). If there is no parent, acts the same as _self. Use this attribute only if the href attribute is present.\n::: {#sect1 .notecard .note} Note: Setting target=\u0026quot;_blank\u0026quot; on \u0026lt;area\u0026gt; elements implicitly provides the same rel behavior as setting rel=\u0026quot;noopener\u0026quot; which does not set window.opener. See browser compatibility for support status. ::: :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;map name=\u0026#34;primary\u0026#34;\u0026gt; \u0026lt;area shape=\u0026#34;circle\u0026#34; coords=\u0026#34;75,75,75\u0026#34; href=\u0026#34;left.html\u0026#34; alt=\u0026#34;Click to go Left\u0026#34; /\u0026gt; \u0026lt;area shape=\u0026#34;circle\u0026#34; coords=\u0026#34;275,75,75\u0026#34; href=\u0026#34;right.html\u0026#34; alt=\u0026#34;Click to go Right\u0026#34; /\u0026gt; \u0026lt;/map\u0026gt; \u0026lt;img usemap=\u0026#34;#primary\u0026#34; src=\u0026#34;https://via.placeholder.com/350x150\u0026#34; alt=\u0026#34;350 x 150 pic\u0026#34; /\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content. Permitted content None; it is a void element. Tag omission Must have a start tag and must not have an end tag. Permitted parents Any element that accepts phrasing content. The \u0026lt;area\u0026gt; element must have an ancestor \u0026lt;map\u0026gt;, but it need not be a direct parent. Implicit ARIA role link when href attribute is present, otherwise generic Permitted ARIA roles No role permitted DOM interface HTMLAreaElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-area-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet area 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 accesskey 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 alt 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 coords 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 download 54 12 20 Yes 41 10.1 54 54 20 41 10.3 6.0 href 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 implicit_noopener 88 88 79 No No 12.1 No 88 79 Yes 12.2 15.0 nohref 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 ping 12 17 1 No 15 6 ≤37 18 No 14 6 1.0 referrerpolicy 51 79 50 No 38 11.1 51 51 50 41 No 7.2 rel 16 12 30 Yes 15 5 4.4 18 30 14 4.2 1.0 shape 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 tabindex 1 12 1 Yes 15 3.1 4.4 18 4 14 2 1.0 target 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/area{._attribution-link} :::\n"},{"id":60,"href":"/docs/references/languages/html/element/article/","title":"Article","section":"HTML","content":" \u0026lt;article\u0026gt;: The Article Contents element # ::: section-content The \u0026lt;article\u0026gt; HTML element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;article\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Weather forecast for Seattle 03 March 2018 Rain.\n04 March 2018 Periods of rain.\n05 March 2018 Heavy rain.\n::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} .forecast { margin: 0; padding: 0.3rem; background-color: #eee; }\n.forecast \u0026gt; h1, .day-forecast { margin: 0.5rem; padding: 0.3rem; font-size: 1.2rem; } .day-forecast { background: right/contain content-box border-box no-repeat url('/media/examples/rain.svg') white; } .day-forecast \u0026gt; h2, .day-forecast \u0026gt; p { margin: 0.2rem; font-size: 1rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nA given document can have multiple articles in it; for example, on a blog that shows the text of each article one after another as the reader scrolls, each post would be contained in an \u0026lt;article\u0026gt; element, possibly with one or more \u0026lt;section\u0026gt;s within.\nContent categories Flow content, sectioning content, palpable content Permitted content Flow content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Note that an \u0026lt;article\u0026gt; element must not be a descendant of an \u0026lt;address\u0026gt; element. Implicit ARIA role article Permitted ARIA roles application, document, feed, main, none, presentation, region DOM interface HTMLElement ::: Attributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content\nEach \u0026lt;article\u0026gt; should be identified, typically by including a heading ( \u0026lt;h1\u0026gt; - \u0026lt;h6\u0026gt; element) as a child of the \u0026lt;article\u0026gt; element. When an \u0026lt;article\u0026gt; element is nested, the inner element represents an article related to the outer element. For example, the comments of a blog post can be \u0026lt;article\u0026gt; elements nested in the \u0026lt;article\u0026gt; representing the blog post. Author information of an \u0026lt;article\u0026gt; element can be provided through the \u0026lt;address\u0026gt; element, but it doesn't apply to nested \u0026lt;article\u0026gt; elements. The publication date and time of an \u0026lt;article\u0026gt; element can be described using the datetime attribute of a \u0026lt;time\u0026gt; element. ::: Examples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;article class=\u0026#34;film_review\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Jurassic Park\u0026lt;/h2\u0026gt; \u0026lt;section class=\u0026#34;main_review\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Review\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;Dinos were great!\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;section class=\u0026#34;user_reviews\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;User reviews\u0026lt;/h3\u0026gt; \u0026lt;article class=\u0026#34;user_review\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;Too scary!\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt;Way too scary for me.\u0026lt;/p\u0026gt; \u0026lt;footer\u0026gt; \u0026lt;p\u0026gt; Posted on \u0026lt;time datetime=\u0026#34;2015-05-16 19:00\u0026#34;\u0026gt;May 16\u0026lt;/time\u0026gt; by Lisa. \u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;article class=\u0026#34;user_review\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;Love the dinos!\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt;I agree, dinos are my favorite.\u0026lt;/p\u0026gt; \u0026lt;footer\u0026gt; \u0026lt;p\u0026gt; Posted on \u0026lt;time datetime=\u0026#34;2015-05-17 19:00\u0026#34;\u0026gt;May 17\u0026lt;/time\u0026gt; by Tom. \u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;footer\u0026gt; \u0026lt;p\u0026gt; Posted on \u0026lt;time datetime=\u0026#34;2015-05-15 19:00\u0026#34;\u0026gt;May 15\u0026lt;/time\u0026gt; by Staff. \u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/article\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-article-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet article 5 12 4 9 11.1 5 4.4 18 4 11.1 4.2 1.0 :::\nSee also # ::: section-content\nOther section-related elements: \u0026lt;body\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;section\u0026gt;, \u0026lt;aside\u0026gt;, h1, h2, h3, h4, h5, h6, \u0026lt;hgroup\u0026gt;, \u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt;, \u0026lt;address\u0026gt; Using HTML sections and outlines ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/article{._attribution-link} :::\n"},{"id":61,"href":"/docs/references/languages/html/element/aside/","title":"Aside","section":"HTML","content":" \u0026lt;aside\u0026gt;: The Aside element # ::: section-content The \u0026lt;aside\u0026gt; HTML element represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;aside\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Salamanders are a group of amphibians with a lizard-like appearance, including short legs and a tail in both larval and adult forms. \u0026lt;aside\u0026gt; \u0026lt;p\u0026gt;The Rough-skinned Newt defends itself with a deadly neurotoxin.\u0026lt;/p\u0026gt; \u0026lt;/aside\u0026gt; \u0026lt;p\u0026gt; Several species of salamander inhabit the temperate rainforest of the Pacific Northwest, including the Ensatina, the Northwestern Salamander and the Rough-skinned Newt. Most salamanders are nocturnal, and hunt for insects, worms and other small creatures. \u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} aside { width: 40%; padding-left: 0.5rem; margin-left: 0.5rem; float: right; box-shadow: inset 5px 0 5px -5px #29627e; font-style: italic; color: #29627e; }\naside \u0026gt; p { margin: 0.5rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content\nDo not use the \u0026lt;aside\u0026gt; element to tag parenthesized text, as this kind of text is considered part of the main flow. ::: Examples # Using \u0026lt;aside\u0026gt; # ::: section-content This example uses \u0026lt;aside\u0026gt; to mark up a paragraph in an article. The paragraph is only indirectly related to the main article content:\n::: code-example [html]{.language-name}\n\u0026lt;article\u0026gt; \u0026lt;p\u0026gt; The Disney movie \u0026lt;cite\u0026gt;The Little Mermaid\u0026lt;/cite\u0026gt; was first released to theatres in 1989. \u0026lt;/p\u0026gt; \u0026lt;aside\u0026gt; \u0026lt;p\u0026gt;The movie earned $87 million during its initial release.\u0026lt;/p\u0026gt; \u0026lt;/aside\u0026gt; \u0026lt;p\u0026gt;More info about the movie…\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, sectioning content, palpable content. Permitted content Flow content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Note that an \u0026lt;aside\u0026gt; element must not be a descendant of an \u0026lt;address\u0026gt; element. Implicit ARIA role complementary Permitted ARIA roles feed, none, note, presentation, region, search DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-aside-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet aside 5 12 4 9 11.1 5 4.4 18 4 11.1 4.2 1.0 :::\nSee also # ::: section-content\nOther section-related elements: \u0026lt;body\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;section\u0026gt;, \u0026lt;nav\u0026gt;, h1, h2, h3, h4, h5, h6, \u0026lt;hgroup\u0026gt;, \u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt;, \u0026lt;address\u0026gt;; Using HTML sections and outlines ARIA: Complementary role ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside{._attribution-link} :::\n"},{"id":62,"href":"/docs/references/languages/html/element/audio/","title":"Audio","section":"HTML","content":" \u0026lt;audio\u0026gt;: The Embed Audio element # ::: section-content The \u0026lt;audio\u0026gt; HTML element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the \u0026lt;source\u0026gt; element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;audio\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Listen to the T-Rex: Download audio ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} figure { margin: 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe above example shows simple usage of the \u0026lt;audio\u0026gt; element. In a similar manner to the \u0026lt;img\u0026gt; element, we include a path to the media we want to embed inside the src attribute; we can include other attributes to specify information such as whether we want it to autoplay and loop, whether we want to show the browser's default audio controls, etc.\nThe content inside the opening and closing \u0026lt;audio\u0026gt;\u0026lt;/audio\u0026gt; tags is shown as a fallback in browsers that don't support the element. :::\nAttributes # ::: section-content This element's attributes include the global attributes.\nautoplay A Boolean attribute: if specified, the audio will automatically begin playback as soon as it can do so, without waiting for the entire audio file to finish downloading.\n::: {#sect1 .notecard .note} Note: Sites that automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control. See our autoplay guide for additional information about how to properly use autoplay. :::\ncontrols If this attribute is present, the browser will offer controls to allow the user to control audio playback, including volume, seeking, and pause/resume playback.\ncontrolslist [Experimental]{.visually-hidden} [Non-standard]{.visually-hidden} The controlslist{target=\u0026quot;_blank\u0026quot;} attribute, when specified, helps the browser select what controls to show for the audio element whenever the browser shows its own set of controls (that is, when the controls attribute is specified).\nThe allowed values are nodownload, nofullscreen and noremoteplayback.\ncrossorigin This enumerated attribute indicates whether to use CORS to fetch the related audio file. CORS-enabled resources can be reused in the \u0026lt;canvas\u0026gt; element without being tainted. The allowed values are:\nanonymous Sends a cross-origin request without a credential. In other words, it sends the Origin: HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin: HTTP header), the resource will be tainted, and its usage restricted.\nuse-credentials Sends a cross-origin request with a credential. In other words, it sends the Origin: HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials: HTTP header), the resource will be tainted and its usage restricted.\nWhen not present, the resource is fetched without a CORS request (i.e. without sending the Origin: HTTP header), preventing its non-tainted use in \u0026lt;canvas\u0026gt; elements. If invalid, it is handled as if the enumerated keyword anonymous was used. See CORS settings attributes for additional information.\ndisableremoteplayback [Experimental]{.visually-hidden} A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.). See this proposed specification{target=\u0026quot;_blank\u0026quot;} for more information.\n::: {#sect2 .notecard .note} Note: In Safari, you can use x-webkit-airplay=\u0026quot;deny\u0026quot;{target=\u0026quot;_blank\u0026quot;} as a fallback. :::\nloop A Boolean attribute: if specified, the audio player will automatically seek back to the start upon reaching the end of the audio.\nmuted A Boolean attribute that indicates whether the audio will be initially silenced. Its default value is false.\npreload This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience. It may have one of the following values:\nnone: Indicates that the audio should not be preloaded. metadata: Indicates that only audio metadata (e.g. length) is fetched. auto: Indicates that the whole audio file can be downloaded, even if the user is not expected to use it. empty string: A synonym of the auto value. The default value is different for each browser. The spec advises it to be set to metadata.\n::: {#sect3 .notecard .note} Note:\nThe autoplay attribute has precedence over preload. If autoplay is specified, the browser would obviously need to start downloading the audio for playback. The browser is not forced by the specification to follow the value of this attribute; it is a mere hint. ::: src The URL of the audio to embed. This is subject to HTTP access controls. This is optional; you may instead use the \u0026lt;source\u0026gt; element within the audio block to specify the audio to embed. :::\nEvents # ::: section-content\nEvent name Fired when audioprocess The input buffer of a ScriptProcessorNode is ready to be processed. canplay The browser can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content. canplaythrough The browser estimates it can play the media up to its end without stopping for content buffering. complete The rendering of an OfflineAudioContext is terminated. durationchange The duration attribute has been updated. emptied The media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the HTMLMediaElement.load method is called to reload it. ended Playback has stopped because the end of the media was reached. loadeddata The first frame of the media has finished loading. loadedmetadata The metadata has been loaded. loadstart Fired when the browser has started to load the resource. pause Playback has been paused. play Playback has begun. playing Playback is ready to start after having been paused or delayed due to lack of data. ratechange The playback rate has changed. seeked A seek operation completed. seeking A seek operation began. stalled The user agent is trying to fetch media data, but data is unexpectedly not forthcoming. suspend Media data loading has been suspended. timeupdate The time indicated by the currentTime attribute has been updated. volumechange The volume has changed. waiting Playback has stopped because of a temporary lack of data ::: Usage notes # ::: section-content Browsers don't all support the same file types and audio codecs; you can provide multiple sources inside nested \u0026lt;source\u0026gt; elements, and the browser will then use the first one it understands:\n::: code-example [html]{.language-name}\n\u0026lt;audio controls\u0026gt; \u0026lt;source src=\u0026#34;myAudio.mp3\u0026#34; type=\u0026#34;audio/mpeg\u0026#34; /\u0026gt; \u0026lt;source src=\u0026#34;myAudio.ogg\u0026#34; type=\u0026#34;audio/ogg\u0026#34; /\u0026gt; \u0026lt;p\u0026gt; Download \u0026lt;a href=\u0026#34;myAudio.mp3\u0026#34;\u0026gt;MP3\u0026lt;/a\u0026gt; or \u0026lt;a href=\u0026#34;myAudio.ogg\u0026#34;\u0026gt;OGG\u0026lt;/a\u0026gt; audio. \u0026lt;/p\u0026gt; \u0026lt;/audio\u0026gt; :::\nWe offer a substantive and thorough guide to media file types and the audio codecs that can be used within them. Also available is a guide to the codecs supported for video.\nOther usage notes:\nIf you don't specify the controls attribute, the audio player won't include the browser's default controls. You can, however, create your own custom controls using JavaScript and the HTMLMediaElement API. To allow precise control over your audio content, HTMLMediaElements fire many different events. This also provides a way to monitor the audio's fetching process so you can watch for errors or detect when enough is available to begin to play or manipulate it. You can also use the Web Audio API to directly generate and manipulate audio streams from JavaScript code rather than streaming pre-existing audio files. \u0026lt;audio\u0026gt; elements can't have subtitles or captions associated with them in the same way that \u0026lt;video\u0026gt; elements can. See WebVTT and Audio{target=\u0026quot;_blank\u0026quot;} by Ian Devlin for some useful information and workarounds. To test the fallback content on browsers that support the element, you can replace \u0026lt;audio\u0026gt; with a non-existing element like \u0026lt;notanaudio\u0026gt;. A good general source of information on using HTML \u0026lt;audio\u0026gt; is the Video and audio content beginner's tutorial. :::\nStyling with CSS # ::: section-content The \u0026lt;audio\u0026gt; element has no intrinsic visual output of its own unless the controls attribute is specified, in which case the browser's default controls are shown.\nThe default controls have a display value of inline by default, and it is often a good idea to set the value to block to improve control over positioning and layout, unless you want it to sit within a text block or similar.\nYou can style the default controls with properties that affect the block as a single unit, so for example you can give it a border and border-radius, padding, margin, etc. You can't however style the individual components inside the audio player (e.g. change the button size or icons, change the font, etc.), and the controls are different across the different browsers.\nTo get a consistent look and feel across browsers, you'll need to create custom controls; these can be marked up and styled in whatever way you want, and then JavaScript can be used along with the HTMLMediaElement API to wire up their functionality.\nVideo player styling basics provides some useful styling techniques \u0026mdash; it is written in the context of \u0026lt;video\u0026gt;, but much of it is equally applicable to \u0026lt;audio\u0026gt;. :::\nDetecting addition and removal of tracks # ::: section-content You can detect when tracks are added to and removed from an \u0026lt;audio\u0026gt; element using the addtrack and removetrack events. However, these events aren't sent directly to the \u0026lt;audio\u0026gt; element itself. Instead, they're sent to the track list object within the \u0026lt;audio\u0026gt; element's HTMLMediaElement that corresponds to the type of track that was added to the element:\nHTMLMediaElement.audioTracks An AudioTrackList containing all of the media element's audio tracks. You can add a listener for addtrack to this object to be alerted when new audio tracks are added to the element.\nHTMLMediaElement.videoTracks Add an addtrack listener to this VideoTrackList object to be informed when video tracks are added to the element.\nHTMLMediaElement.textTracks Add an addtrack event listener to this TextTrackList to be notified when new text tracks are added to the element.\n::: {#sect4 .notecard .note} Note: Even though it's an \u0026lt;audio\u0026gt; element, it still has video and text track lists, and can in fact be used to present video, although the user interface implications can be odd. :::\nFor example, to detect when audio tracks are added to or removed from an \u0026lt;audio\u0026gt; element, you can use code like this:\n::: code-example [js]{.language-name}\nconst elem = document.querySelector(\u0026#34;audio\u0026#34;); elem.audioTrackList.onaddtrack = (event) =\u0026gt; { trackEditor.addTrack(event.track); }; elem.audioTrackList.onremovetrack = (event) =\u0026gt; { trackEditor.removeTrack(event.track); }; :::\nThis code watches for audio tracks to be added to and removed from the element, and calls a hypothetical function on a track editor to register and remove the track from the editor's list of available tracks.\nYou can also use addEventListener() to listen for the addtrack and removetrack events. :::\nExamples # Basic usage # ::: section-content The following example shows simple usage of the \u0026lt;audio\u0026gt; element to play an OGG file. It will autoplay due to the autoplay attribute\u0026mdash;if the page has permission to do so\u0026mdash;and also includes fallback content.\n::: code-example [html]{.language-name}\n\u0026lt;!-- Simple audio playback --\u0026gt; \u0026lt;audio src=\u0026#34;AudioTest.ogg\u0026#34; autoplay\u0026gt; \u0026lt;a href=\u0026#34;AudioTest.ogg\u0026#34;\u0026gt;Download OGG audio\u0026lt;/a\u0026gt;. \u0026lt;/audio\u0026gt; :::\nFor details on when autoplay works, how to get permission to use autoplay, and how and when it's appropriate to use autoplay, see our autoplay guide. :::\n\u0026lt;audio\u0026gt; element with \u0026lt;source\u0026gt; element # ::: section-content This example specifies which audio track to embed using the src attribute on a nested \u0026lt;source\u0026gt; element rather than directly on the \u0026lt;audio\u0026gt; element. It is always useful to include the file's MIME type inside the type attribute, as the browser is able to instantly tell if it can play that file, and not waste time on it if not.\n::: code-example [html]{.language-name}\n\u0026lt;audio controls\u0026gt; \u0026lt;source src=\u0026#34;foo.wav\u0026#34; type=\u0026#34;audio/wav\u0026#34; /\u0026gt; \u0026lt;a href=\u0026#34;foo.wav\u0026#34;\u0026gt;Download WAV audio\u0026lt;/a\u0026gt;. \u0026lt;/audio\u0026gt; ::: :::\n\u0026lt;audio\u0026gt; with multiple \u0026lt;source\u0026gt; elements # ::: section-content This example includes multiple \u0026lt;source\u0026gt; elements. The browser tries to load the first source element (Opus) if it is able to play it; if not it falls back to the second (Vorbis) and finally back to MP3:\n::: code-example [html]{.language-name}\n\u0026lt;audio controls\u0026gt; \u0026lt;source src=\u0026#34;foo.opus\u0026#34; type=\u0026#34;audio/ogg; codecs=opus\u0026#34; /\u0026gt; \u0026lt;source src=\u0026#34;foo.ogg\u0026#34; type=\u0026#34;audio/ogg; codecs=vorbis\u0026#34; /\u0026gt; \u0026lt;source src=\u0026#34;foo.mp3\u0026#34; type=\u0026#34;audio/mpeg\u0026#34; /\u0026gt; \u0026lt;/audio\u0026gt; ::: :::\nAccessibility concerns # ::: section-content Audio with spoken dialog should provide both captions and transcripts that accurately describe its content. Captions, which are specified using WebVTT, allow people who are hearing impaired to understand an audio recording's content as the recording is being played, while transcripts allow people who need additional time to be able to review the recording's content at a pace and format that is comfortable for them.\nIf automatic captioning services are used, it is important to review the generated content to ensure it accurately represents the source audio.\nThe \u0026lt;audio\u0026gt; element doesn't directly support WebVTT. You will have to find a library or framework that provides the capability for you, or write the code to display captions yourself. One option is to play your audio using a \u0026lt;video\u0026gt; element, which does support WebVTT.\nIn addition to spoken dialog, subtitles and transcripts should also identify music and sound effects that communicate important information. This includes emotion and tone. For example, in the WebVTT below, note the use of square brackets to provide tone and emotional insight to the viewer; this can help establish the mood otherwise provided using music, nonverbal sounds and crucial sound effects, and so forth.\n1 00:00:00 --\u0026gt; 00:00:45 [Energetic techno music] 2 00:00:46 --\u0026gt; 00:00:51 Welcome to the Time Keeper\u0026#39;s podcast! In this episode we\u0026#39;re discussing which Swisswatch is a wrist switchwatch? 16 00:00:52 --\u0026gt; 00:01:02 [Laughing] Sorry! I mean, which wristwatch is a Swiss wristwatch? Also it's a good practice to provide some content (such as the direct download link) as a fallback for viewers who use a browser in which the \u0026lt;audio\u0026gt; element is not supported:\n::: code-example [html]{.language-name}\n\u0026lt;audio controls\u0026gt; \u0026lt;source src=\u0026#34;myAudio.mp3\u0026#34; type=\u0026#34;audio/mpeg\u0026#34; /\u0026gt; \u0026lt;source src=\u0026#34;myAudio.ogg\u0026#34; type=\u0026#34;audio/ogg\u0026#34; /\u0026gt; \u0026lt;p\u0026gt; Download \u0026lt;a href=\u0026#34;myAudio.mp3\u0026#34;\u0026gt;MP3\u0026lt;/a\u0026gt; or \u0026lt;a href=\u0026#34;myAudio.ogg\u0026#34;\u0026gt;OGG\u0026lt;/a\u0026gt; audio. \u0026lt;/p\u0026gt; \u0026lt;/audio\u0026gt; :::\nWeb Video Text Tracks Format (WebVTT) WebAIM: Captions, Transcripts, and Audio Descriptions{target=\u0026quot;_blank\u0026quot;} MDN Understanding WCAG, Guideline 1.2 explanations Understanding Success Criterion 1.2.1 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} Understanding Success Criterion 1.2.2 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} ::: Technical summary # ::: section-content\nContent categories Flow content, phrasing content, embedded content. If it has a controls attribute: interactive content and palpable content. Permitted content If the element has a src attribute: zero or more \u0026lt;track\u0026gt; elements followed by transparent content that contains no \u0026lt;audio\u0026gt; or \u0026lt;video\u0026gt; media elements.\nElse: zero or more \u0026lt;source\u0026gt; elements followed by zero or more \u0026lt;track\u0026gt; elements followed by transparent content that contains no \u0026lt;audio\u0026gt; or \u0026lt;video\u0026gt; media elements. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts embedded content. Implicit ARIA role No corresponding role Permitted ARIA roles application DOM interface HTMLAudioElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-audio-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android audio 3 12 3.5 9 10.5 3.1 3 18 4 11 3 1.0\nFor For Firefox Firefox to play to play audio, audio, the the server server must must serve the serve the file file using the using the correct correct MIME MIME type. type. autoplay 3 12 3.5 9 10.5 3.1 3 18 4 11 3 1.0\ncontrols 3 12 3.5 9 10.5 3.1 3 18 4 11 3 1.0\nloop 3 12 11 9 10.5 3.1 3 18 14 11 3 1.0\nmuted 15 ≤18 11 No 15 6 4.4 18 14 14 6 1.0\npreload 3 12 43.5\u0026ndash;4 9 15 3.1 3 18 4 14 3 1.0\nDefaults to Defaults to Defaults to Defaults to Defaults to Defaults to `metadata` `metadata` `metadata` `metadata` `metadata` `metadata` in Chrome in Opera 51. in Chrome in Chrome in Opera 51. in Samsung 64. 64. 64. Internet 10.5--15 11--14 9.0. src 3 12 3.5 9 10.5 3.1 3 18 4 11 3 1.0 # :::\nSee also # ::: section-content\nWeb media technologies Media container formats (file types) Guide to audio codecs used on the web Web Audio API HTMLAudioElement \u0026lt;source\u0026gt; \u0026lt;video\u0026gt; Learning area: Video and audio content Cross-browser audio basics ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio{._attribution-link} :::\n"},{"id":63,"href":"/docs/references/languages/html/element/b/","title":"B","section":"HTML","content":" \u0026lt;b\u0026gt;: The Bring Attention To element # ::: section-content The \u0026lt;b\u0026gt; HTML element is used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use \u0026lt;b\u0026gt; for styling text or granting importance. If you wish to create boldface text, you should use the CSS font-weight property. If you wish to indicate an element is of special importance, you should use the \u0026lt;strong\u0026gt; element. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;b\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} The two most popular science courses offered by the school are chemistry (the study of chemicals and the composition of substances) and physics (the study of the nature and properties of matter and energy). ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} /* stylelint-disable-next-line block-no-empty */ b { } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content\nUse the \u0026lt;b\u0026gt; for cases like keywords in a summary, product names in a review, or other spans of text whose typical presentation would be boldfaced (but not including any special importance). Do not confuse the \u0026lt;b\u0026gt; element with the \u0026lt;strong\u0026gt;, \u0026lt;em\u0026gt;, or \u0026lt;mark\u0026gt; elements. The \u0026lt;strong\u0026gt; element represents text of certain importance, \u0026lt;em\u0026gt; puts some emphasis on the text and the \u0026lt;mark\u0026gt; element represents text of certain relevance. The \u0026lt;b\u0026gt; element doesn't convey such special semantic information; use it only when no others fit. Similarly, do not mark titles and headings using the \u0026lt;b\u0026gt; element. For this purpose, use the h1 to h6 tags. Further, stylesheets can change the default style of these elements, with the result that they are not necessarily displayed in bold. It is a good practice to use the class attribute on the \u0026lt;b\u0026gt; element in order to convey additional semantic information as needed (for example \u0026lt;b class=\u0026quot;lead\u0026quot;\u0026gt; for the first sentence in a paragraph). This makes it easier to manage multiple use cases of \u0026lt;b\u0026gt; if your stylistic needs change, without the need to change all of its uses in the HTML. Historically, the \u0026lt;b\u0026gt; element was meant to make text boldface. Styling information has been deprecated since HTML4, so the meaning of the \u0026lt;b\u0026gt; element has been changed. If there is no semantic purpose to using the \u0026lt;b\u0026gt; element, you should use the CSS font-weight property with the value \u0026quot;bold\u0026quot; instead in order to make text bold. ::: Examples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; This article describes several \u0026lt;b class=\u0026#34;keywords\u0026#34;\u0026gt;text-level\u0026lt;/b\u0026gt; elements. It explains their usage in an \u0026lt;b class=\u0026#34;keywords\u0026#34;\u0026gt;HTML\u0026lt;/b\u0026gt; document. \u0026lt;/p\u0026gt; Keywords are displayed with the default style of the \u0026lt;b\u0026gt;element, likely in bold.\u0026lt;/b\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role generic Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-b-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android b 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nBefore Firefox 4, this element implemented the `HTMLSpanElement` interface instead of the standard `HTMLElement` interface. :::\nSee also # ::: section-content\nOther elements conveying text-level semantics: \u0026lt;a\u0026gt;, \u0026lt;em\u0026gt;, \u0026lt;strong\u0026gt;, \u0026lt;small\u0026gt;, \u0026lt;cite\u0026gt;, \u0026lt;q\u0026gt;, \u0026lt;dfn\u0026gt;, \u0026lt;abbr\u0026gt;, \u0026lt;time\u0026gt;, \u0026lt;code\u0026gt;, \u0026lt;var\u0026gt;, \u0026lt;samp\u0026gt;, \u0026lt;kbd\u0026gt;, \u0026lt;sub\u0026gt;, \u0026lt;sup\u0026gt;, \u0026lt;i\u0026gt;, \u0026lt;mark\u0026gt;, \u0026lt;ruby\u0026gt;, \u0026lt;rp\u0026gt;, \u0026lt;rt\u0026gt;, \u0026lt;bdo\u0026gt;, \u0026lt;span\u0026gt;, \u0026lt;br\u0026gt;, \u0026lt;wbr\u0026gt;. Using \u0026lt;b\u0026gt; and \u0026lt;i\u0026gt; elements (W3C){target=\u0026quot;_blank\u0026quot;} ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/b{._attribution-link} :::\n"},{"id":64,"href":"/docs/references/languages/html/element/base/","title":"Base","section":"HTML","content":" \u0026lt;base\u0026gt;: The Document Base URL element # ::: section-content The \u0026lt;base\u0026gt; HTML element specifies the base URL to use for all relative URLs in a document. There can be only one \u0026lt;base\u0026gt; element in a document.\nA document's used base URL can be accessed by scripts with Node.baseURI. If the document has no \u0026lt;base\u0026gt; elements, then baseURI defaults to location.href.\nContent categories Metadata content. Permitted content None; it is a void element. Tag omission There must be no closing tag. Permitted parents A \u0026lt;head\u0026gt; that doesn't contain another \u0026lt;base\u0026gt; element. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLBaseElement ::: Attributes # ::: section-content This element's attributes include the global attributes.\n::: {#sect1 .notecard .warning} Warning: If either of the following attributes are specified, this element must come before other elements with attribute values of URLs, such as \u0026lt;link\u0026gt;'s href attribute. :::\nhref The base URL to be used throughout the document for relative URLs. Absolute and relative URLs are allowed. data: and javascript: URLs are not allowed.\ntarget A keyword or author-defined name of the default browsing context to show the results of navigation from \u0026lt;a\u0026gt;, \u0026lt;area\u0026gt;, or \u0026lt;form\u0026gt; elements without explicit target attributes. The following keywords have special meanings:\n_self (default): Show the result in the current browsing context. _blank: Show the result in a new, unnamed browsing context. _parent: Show the result in the parent browsing context of the current one, if the current page is inside a frame. If there is no parent, acts the same as _self. _top: Show the result in the topmost browsing context (the browsing context that is an ancestor of the current one and has no parent). If there is no parent, acts the same as _self. ::: Usage notes # Multiple \u0026lt;base\u0026gt; elements # ::: section-content If multiple \u0026lt;base\u0026gt; elements are used, only the first href and first target are obeyed \u0026mdash; all others are ignored. :::\nIn-page anchors # ::: section-content Links pointing to a fragment in the document \u0026mdash; e.g. \u0026lt;a href=\u0026quot;#some-id\u0026quot;\u0026gt; \u0026mdash; are resolved with the \u0026lt;base\u0026gt;, triggering an HTTP request to the base URL with the fragment attached.\nFor example, given \u0026lt;base href=\u0026quot;https://example.com/\u0026quot;\u0026gt; and this link: \u0026lt;a href=\u0026quot;#anchor\u0026quot;\u0026gt;To anchor\u0026lt;/a\u0026gt;. The link points to https://example.com/#anchor. :::\nOpen Graph # ::: section-content Open Graph{target=\u0026quot;_blank\u0026quot;} tags do not acknowledge \u0026lt;base\u0026gt;, and should always have full absolute URLs. For example:\n::: code-example [html]{.language-name}\n\u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;https://example.com/thumbnail.jpg\u0026#34; /\u0026gt; ::: :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;base href=\u0026#34;https://www.example.com/\u0026#34; /\u0026gt; \u0026lt;base target=\u0026#34;_blank\u0026#34; /\u0026gt; \u0026lt;base target=\u0026#34;_top\u0026#34; href=\u0026#34;https://example.com/\u0026#34; /\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-base-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android base 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nBefore Internet Explorer 7, `\u0026lt;base\u0026gt;` can be positioned anywhere in the document and the nearest value of `\u0026lt;base\u0026gt;` is used. href 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\ntarget 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 # :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/base{._attribution-link} :::\n"},{"id":65,"href":"/docs/references/languages/html/element/bdi/","title":"Bdi","section":"HTML","content":" \u0026lt;bdi\u0026gt;: The Bidirectional Isolate element # ::: section-content The \u0026lt;bdi\u0026gt; HTML element tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It's particularly useful when a website dynamically inserts some text and doesn't know the directionality of the text being inserted. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;bdi\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} World wrestling championships\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;bdi class=\u0026quot;name\u0026quot;\u0026gt;Evil Steven\u0026lt;/bdi\u0026gt;: 1st place\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;bdi class=\u0026quot;name\u0026quot;\u0026gt;François fatale\u0026lt;/bdi\u0026gt;: 2nd place\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;span class=\u0026quot;name\u0026quot;\u0026gt;سما\u0026lt;/span\u0026gt;: 3rd place\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;bdi class=\u0026quot;name\u0026quot;\u0026gt;الرجل القوي إيان\u0026lt;/bdi\u0026gt;: 4th place\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;span class=\u0026quot;name\u0026quot; dir=\u0026quot;auto\u0026quot;\u0026gt;سما\u0026lt;/span\u0026gt;: 5th place\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} html { font-family: sans-serif; }\n/* stylelint-disable-next-line block-no-empty */ bdi { } .name { color: red; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nBidirectional text is text that may contain both sequences of characters that are arranged left-to-right (LTR) and sequences of characters that are arranged right-to-left (RTL), such as an Arabic quotation embedded in an English string. Browsers implement the Unicode Bidirectional Algorithm{target=\u0026quot;_blank\u0026quot;} to handle this. In this algorithm, characters are given an implicit directionality: for example, Latin characters are treated as LTR while Arabic characters are treated as RTL. Some other characters (such as spaces and some punctuation) are treated as neutral and are assigned directionality based on that of their surrounding characters.\nUsually, the bidirectional algorithm will do the right thing without the author having to provide any special markup but, occasionally, the algorithm needs help. That's where \u0026lt;bdi\u0026gt; comes in.\nThe \u0026lt;bdi\u0026gt; element is used to wrap a span of text and instructs the bidirectional algorithm to treat this text in isolation from its surroundings. This works in two ways:\nThe directionality of text embedded in \u0026lt;bdi\u0026gt; does not influence the directionality of the surrounding text. The directionality of text embedded in \u0026lt;bdi\u0026gt; is not influenced by the directionality of the surrounding text. For example, consider some text like:\nEMBEDDED-TEXT - 1st place If EMBEDDED-TEXT is LTR, this works fine. But if EMBEDDED-TEXT is RTL, then - 1 will be treated as RTL text (because it consists of neutral and weak characters). The result will be garbled:\n1 - EMBEDDED-TEXTst place If you know the directionality of EMBEDDED-TEXT in advance, you can fix this problem by wrapping EMBEDDED-TEXT in a \u0026lt;span\u0026gt; with the dir attribute set to the known directionality. But if you don't know the directionality - for example, because EMBEDDED-TEXT is being read from a database or entered by the user - you should use \u0026lt;bdi\u0026gt; to prevent the directionality of EMBEDDED-TEXT from affecting its surroundings.\nThough the same visual effect can be achieved using the CSS rule unicode-bidi: isolate on a \u0026lt;span\u0026gt; or another text-formatting element, HTML authors should not use this approach because it is not semantic and browsers are allowed to ignore CSS styling.\nEmbedding the characters in \u0026lt;span dir=\u0026quot;auto\u0026quot;\u0026gt; has the same effect as using \u0026lt;bdi\u0026gt;, but its semantics are less clear. :::\nAttributes # ::: section-content Like all other HTML elements, this element supports the global attributes, except that the dir attribute behaves differently than normal: it defaults to auto, meaning its value is never inherited from the parent element. This means that unless you specify a value of either rtl or ltr for dir, the user agent will determine the correct directionality to use based on the contents of the \u0026lt;bdi\u0026gt;. :::\nExamples # No bdi with only LTR # ::: section-content This example lists the winners of a competition using \u0026lt;span\u0026gt; elements only. When the names only contain LTR text the results look fine:\n::: code-example [html]{.language-name}\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;span class=\u0026#34;name\u0026#34;\u0026gt;Henrietta Boffin\u0026lt;/span\u0026gt; - 1st place\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;span class=\u0026#34;name\u0026#34;\u0026gt;Jerry Cruncher\u0026lt;/span\u0026gt; - 2nd place\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; :::\n::: {#sect1 .code-example} ::: iframe ::: ::: :::\nNo bdi with RTL text # ::: section-content This example lists the winners of a competition using \u0026lt;span\u0026gt; elements only, and one of the winners has a name consisting of RTL text. In this case the \u0026quot;- 1\u0026quot;, which consists of characters with neutral or weak directionality, will adopt the directionality of the RTL text, and the result will be garbled:\n::: code-example [html]{.language-name}\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;span class=\u0026#34;name\u0026#34;\u0026gt;اَلأَعْشَى\u0026lt;/span\u0026gt; - 1st place\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;span class=\u0026#34;name\u0026#34;\u0026gt;Jerry Cruncher\u0026lt;/span\u0026gt; - 2nd place\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; :::\n::: {#sect2 .code-example} ::: iframe ::: ::: :::\nUsing bdi with LTR and RTL text # ::: section-content This example lists the winners of a competition using \u0026lt;bdi\u0026gt; elements. These elements instruct the browser to treat the name in isolation from its embedding context, so the example output is properly ordered:\n::: code-example [html]{.language-name}\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;bdi class=\u0026#34;name\u0026#34;\u0026gt;اَلأَعْشَى\u0026lt;/bdi\u0026gt; - 1st place\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;bdi class=\u0026#34;name\u0026#34;\u0026gt;Jerry Cruncher\u0026lt;/bdi\u0026gt; - 2nd place\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; :::\n::: {#sect3 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role generic Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-bdi-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet bdi 16 79 10 No 15 6 ≤37 18 10 14 6 1.0 :::\nSee also # ::: section-content\nInline markup and bidirectional text in HTML{target=\u0026quot;_blank\u0026quot;} Unicode Bidirectional Algorithm basics{target=\u0026quot;_blank\u0026quot;} Localization Related HTML element: \u0026lt;bdo\u0026gt; Related CSS properties: direction, unicode-bidi ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi{._attribution-link} :::\n"},{"id":66,"href":"/docs/references/languages/html/element/bdo/","title":"Bdo","section":"HTML","content":" \u0026lt;bdo\u0026gt;: The Bidirectional Text Override element # ::: section-content The \u0026lt;bdo\u0026gt; HTML element overrides the current directionality of text, so that the text within is rendered in a different direction. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;bdo\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Famous seaside songs\n\u0026lt;p\u0026gt;The English song \u0026quot;Oh I do like to be beside the seaside\u0026quot;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Looks like this in Hebrew: \u0026lt;span dir=\u0026quot;rtl\u0026quot;\u0026gt;אה, אני אוהב להיות ליד חוף הים\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;In the computer's memory, this is stored as \u0026lt;bdo dir=\u0026quot;ltr\u0026quot;\u0026gt;אה, אני אוהב להיות ליד חוף הים\u0026lt;/bdo\u0026gt;\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} html { font-family: sans-serif; }\n/* stylelint-disable-next-line block-no-empty */ bdo { } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe text's characters are drawn from the starting point in the given direction; the individual characters' orientation is not affected (so characters don't get drawn backward, for example). :::\nAttributes # ::: section-content This element's attributes include the global attributes.\ndir The direction in which text should be rendered in this element's contents. Possible values are:\nltr: Indicates that the text should go in a left-to-right direction. rtl: Indicates that the text should go in a right-to-left direction. ::: Examples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;!-- Switch text direction --\u0026gt; \u0026lt;p\u0026gt;This text will go left to right.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;bdo dir=\u0026#34;rtl\u0026#34;\u0026gt;This text will go right to left.\u0026lt;/bdo\u0026gt;\u0026lt;/p\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nNotes # ::: section-content The HTML 4 specification did not specify events for this element; they were added in XHTML. This is most likely an oversight. :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role generic Permitted ARIA roles Any DOM interface HTMLElement Up to Gecko 1.9.2 (Firefox 4) inclusive, Firefox implements the HTMLSpanElement interface for this element. ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-bdo-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet bdo ≤15 12 10 Yes ≤15 ≤4 4.4 18 10 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nRelated HTML element: \u0026lt;bdi\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo{._attribution-link} :::\n"},{"id":67,"href":"/docs/references/languages/html/element/big/","title":"Big","section":"HTML","content":" \u0026lt;big\u0026gt;: The Bigger Text element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;big\u0026gt; HTML deprecated element renders the enclosed text at a font size one level larger than the surrounding text (medium becomes large, for example). The size is capped at the browser's maximum permitted font size.\n::: {#sect2 .notecard .warning} Warning: This element has been removed from the specification and shouldn't be used anymore. Use the CSS font-size property to adjust the font size. ::: :::\nAttributes # ::: section-content This element has no other attributes than the global attributes, common to all elements. :::\nExamples # ::: section-content Here we see examples showing the use of \u0026lt;big\u0026gt; followed by an example showing how to accomplish the same results using modern CSS syntax instead. :::\nUsing big # ::: section-content This example uses the obsolete \u0026lt;big\u0026gt; element to increase the size of some text.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; This is the first sentence. \u0026lt;big\u0026gt;This whole sentence is in bigger letters.\u0026lt;/big\u0026gt; \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nUsing CSS font-size # ::: section-content This example uses the CSS font-size property to increase the font size by one level.\nCSS # ::: code-example [css]{.language-name}\n.bigger { font-size: larger; } :::\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; This is the first sentence. \u0026lt;span class=\u0026#34;bigger\u0026#34;\u0026gt;This whole sentence is in bigger letters.\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: ::: :::\nDOM interface # ::: section-content This element implements the HTMLElement interface. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# big]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet big 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nCSS: font-size, font HTML: \u0026lt;small\u0026gt;, \u0026lt;font\u0026gt;, \u0026lt;style\u0026gt; HTML 4.01 Specification: Font Styles{target=\u0026quot;_blank\u0026quot;} ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/big{._attribution-link} :::\n"},{"id":68,"href":"/docs/references/languages/html/element/blockquote/","title":"Blockquote","section":"HTML","content":" \u0026lt;blockquote\u0026gt;: The Block Quotation element # ::: section-content The \u0026lt;blockquote\u0026gt; HTML element indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see Notes for how to change it). A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the \u0026lt;cite\u0026gt; element. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;blockquote\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Words can be like X-rays, if you use them properly—they’ll go through anything. You read and you’re pierced.\n—Aldous Huxley, Brave New World ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} blockquote { margin: 0; }\nblockquote p { padding: 15px; background: #eee; border-radius: 5px; } blockquote p::before { content: '\\201C'; } blockquote p::after { content: '\\201D'; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element's attributes include the global attributes.\ncite A URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote. :::\nUsage notes # ::: section-content To change the indentation applied to the quoted text, use the CSS margin-left and/or margin-right properties, or the margin shorthand property.\nTo include shorter quotes inline rather than in a separate block, use the \u0026lt;q\u0026gt; (Quotation) element. :::\nExamples # ::: section-content This example demonstrates the use of the \u0026lt;blockquote\u0026gt; element to quote a passage from RFC 1149{target=\u0026quot;_blank\u0026quot;}, A Standard for the Transmission of IP Datagrams on Avian Carriers.\n::: code-example [html]{.language-name}\n\u0026lt;blockquote cite=\u0026#34;https://datatracker.ietf.org/doc/html/rfc1149\u0026#34;\u0026gt; \u0026lt;p\u0026gt; Avian carriers can provide high delay, low throughput, and low altitude service. The connection topology is limited to a single point-to-point path for each carrier, used with standard carriers, but many carriers can be used without significant interference with each other, outside early spring. This is because of the 3D ether space available to the carriers, in contrast to the 1D ether used by IEEE802.3. The carriers have an intrinsic collision avoidance system, which increases availability. \u0026lt;/p\u0026gt; \u0026lt;/blockquote\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, sectioning root, palpable content. Permitted content Flow content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Implicit ARIA role blockquote Permitted ARIA roles Any DOM interface HTMLQuoteElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-blockquote-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet blockquote 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 cite 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nThe \u0026lt;q\u0026gt; element for inline quotations. The \u0026lt;cite\u0026gt; element for source citations. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote{._attribution-link} :::\n"},{"id":69,"href":"/docs/references/languages/html/element/body/","title":"Body","section":"HTML","content":" \u0026lt;body\u0026gt;: The Document Body element # ::: section-content The \u0026lt;body\u0026gt; HTML element represents the content of an HTML document. There can be only one \u0026lt;body\u0026gt; element in a document.\nContent categories None. Permitted content Flow content. Tag omission The start tag may be omitted if the first thing inside it is not a space character, comment, \u0026lt;script\u0026gt; element or \u0026lt;style\u0026gt; element. The end tag may be omitted if the \u0026lt;body\u0026gt; element has contents or has a start tag, and is not immediately followed by a comment. Permitted parents It must be the second element of an \u0026lt;html\u0026gt; element. Implicit ARIA role generic Permitted ARIA roles No role permitted DOM interface HTMLBodyElement The \u0026lt;body\u0026gt; element exposes the HTMLBodyElement interface. You can access the \u0026lt;body\u0026gt; element through the document.body property. ::: Attributes # ::: section-content This element includes the global attributes.\nalink [Deprecated]{.visually-hidden} Color of text for hyperlinks when selected. Do not use this attribute! Use the CSS color property in conjunction with the :active pseudo-class instead.\nbackground [Deprecated]{.visually-hidden} URI of an image to use as a background. Do not use this attribute! Use the CSS background property on the element instead.\nbgcolor [Deprecated]{.visually-hidden} Background color for the document. Do not use this attribute! Use the CSS background-color property on the element instead.\nbottommargin [Deprecated]{.visually-hidden} The margin of the bottom of the body. Do not use this attribute! Use the CSS margin-bottom property on the element instead.\nleftmargin [Deprecated]{.visually-hidden} The margin of the left of the body. Do not use this attribute! Use the CSS margin-left property on the element instead.\nlink [Deprecated]{.visually-hidden} Color of text for unvisited hypertext links. Do not use this attribute! Use the CSS color property in conjunction with the :link pseudo-class instead.\nonafterprint Function to call after the user has printed the document.\nonbeforeprint Function to call when the user requests printing of the document.\nonbeforeunload Function to call when the document is about to be unloaded.\nonblur Function to call when the document loses focus.\nonerror Function to call when the document fails to load properly.\nonfocus Function to call when the document receives focus.\nonhashchange Function to call when the fragment identifier part (starting with the hash ('#') character) of the document's current address has changed.\nonlanguagechange Function to call when the preferred languages changed.\nonload Function to call when the document has finished loading.\nonmessage Function to call when the document has received a message.\nonoffline Function to call when network communication has failed.\nononline Function to call when network communication has been restored.\nonpopstate Function to call when the user has navigated session history.\nonredo Function to call when the user has moved forward in undo transaction history.\nonresize Function to call when the document has been resized.\nonstorage Function to call when the storage area has changed.\nonundo Function to call when the user has moved backward in undo transaction history.\nonunload Function to call when the document is going away.\nrightmargin [Deprecated]{.visually-hidden} The margin of the right of the body. Do not use this attribute! Use the CSS margin-right property on the element instead.\ntext [Deprecated]{.visually-hidden} Foreground color of text. Do not use this attribute! Use CSS color property on the element instead.\ntopmargin [Deprecated]{.visually-hidden} The margin of the top of the body. Do not use this attribute! Use the CSS margin-top property on the element instead.\nvlink [Deprecated]{.visually-hidden} Color of text for visited hypertext links. Do not use this attribute! Use the CSS color property in conjunction with the :visited pseudo-class instead. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Document title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt; The \u0026lt;code\u0026gt;\u0026amp;lt;body\u0026amp;gt;\u0026lt;/code\u0026gt; HTML element represents the content of an HTML document. There can be only one \u0026lt;code\u0026gt;\u0026amp;lt;body\u0026amp;gt;\u0026lt;/code\u0026gt; element in a document. \u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-body-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Opera Safari Samsung Explorer Android Android Android Android on IOS Internet body 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nalink 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nbackground 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nbgcolor 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nbottommargin 1 79 35 No 15 ≤4 4.4 18 35 14 ≤3.2 1.0\nBefore Before Firefox 35, Firefox 35, it was it was supported supported in Quirks in Quirks Mode only. Mode only. leftmargin 1 79 35 No 15 ≤4 4.4 18 35 14 ≤3.2 1.0\nBefore Before Firefox 35, Firefox 35, it was it was supported supported in Quirks in Quirks Mode only. Mode only. link 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nrightmargin 1 79 35 No 15 ≤4 4.4 18 35 14 ≤3.2 1.0\nBefore Before Firefox 35, Firefox 35, it was it was supported supported in Quirks in Quirks Mode only. Mode only. text 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\ntopmargin 1 79 35 No 15 ≤4 4.4 18 35 14 ≤3.2 1.0\nBefore Before Firefox 35, Firefox 35, it was it was supported supported in Quirks in Quirks Mode only. Mode only. vlink 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 # :::\nSee also # ::: section-content\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/body{._attribution-link} :::\n"},{"id":70,"href":"/docs/references/languages/html/element/br/","title":"Br","section":"HTML","content":" \u0026lt;br\u0026gt;: The Line Break element # ::: section-content The \u0026lt;br\u0026gt; HTML element produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;br\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} O’er all the hilltops\nIs quiet now,\nIn all the treetops\nHearest thou\nHardly a breath;\nThe birds are asleep in the trees:\nWait, soon like these\nThou too shalt rest. ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p { font-size: 1rem; font-family: sans-serif; margin: 20px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nAs you can see from the above example, a \u0026lt;br\u0026gt; element is included at each point where we want the text to break. The text after the \u0026lt;br\u0026gt; begins again at the start of the next line of the text block.\n::: {#sect1 .notecard .note} Note: Do not use \u0026lt;br\u0026gt; to create margins between paragraphs; wrap them in \u0026lt;p\u0026gt; elements and use the CSS margin property to control their size. ::: :::\nAttributes # ::: section-content This element's attributes include the global attributes. :::\nDeprecated attributes # ::: section-content\nclear [Deprecated]{.visually-hidden} Indicates where to begin the next line after the break. :::\nStyling with CSS # ::: section-content The \u0026lt;br\u0026gt; element has a single, well-defined purpose \u0026mdash; to create a line break in a block of text. As such, it has no dimensions or visual output of its own, and there is very little you can do to style it.\nYou can set a margin on \u0026lt;br\u0026gt; elements themselves to increase the spacing between the lines of text in the block, but this is a bad practice \u0026mdash; you should use the line-height property that was designed for that purpose. :::\nExamples # Simple br # ::: section-content In the following example we use \u0026lt;br\u0026gt; elements to create line breaks between the different lines of a postal address:\n::: code-example [html]{.language-name}\nMozilla\u0026lt;br /\u0026gt; 331 E. Evelyn Avenue\u0026lt;br /\u0026gt; Mountain View, CA\u0026lt;br /\u0026gt; 94041\u0026lt;br /\u0026gt; USA\u0026lt;br /\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # ::: section-content Creating separate paragraphs of text using \u0026lt;br\u0026gt; is not only bad practice, it is problematic for people who navigate with the aid of screen reading technology. Screen readers may announce the presence of the element, but not any content contained within \u0026lt;br\u0026gt;s. This can be a confusing and frustrating experience for the person using the screen reader.\nUse \u0026lt;p\u0026gt; elements, and use CSS properties like margin to control their spacing. :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content. Permitted content None; it is a void element. Tag omission Must have a start tag, and must not have an end tag. In XHTML documents, write this element as \u0026lt;br /\u0026gt;. Permitted parents Any element that accepts phrasing content. Implicit ARIA role No corresponding role Permitted ARIA roles none, presentation DOM interface HTMLBRElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-br-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet br 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 clear 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\n\u0026lt;address\u0026gt; element \u0026lt;p\u0026gt; element \u0026lt;wbr\u0026gt; element ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/br{._attribution-link} :::\n"},{"id":71,"href":"/docs/references/languages/html/element/button/","title":"Button","section":"HTML","content":" \u0026lt;button\u0026gt;: The Button element # ::: section-content The \u0026lt;button\u0026gt; HTML element is an interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it then performs an action, such as submitting a form or opening a dialog.\nBy default, HTML buttons are presented in a style resembling the platform the user agent runs on, but you can change buttons' appearance with CSS. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;button\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Add to favorites ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} .styled { border: 0; line-height: 2.5; padding: 0 20px; font-size: 1rem; text-align: center; color: #fff; text-shadow: 1px 1px 1px #000; border-radius: 10px; background-color: rgba(220, 0, 0, 1); background-image: linear-gradient( to top left, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2) 30%, rgba(0, 0, 0, 0) ); box-shadow: inset 2px 2px 3px rgba(255, 255, 255, 0.6), inset -2px -2px 3px rgba(0, 0, 0, 0.6); }\n.styled:hover { background-color: rgba(255, 0, 0, 1); } .styled:active { box-shadow: inset -2px -2px 3px rgba(255, 255, 255, 0.6), inset 2px 2px 3px rgba(0, 0, 0, 0.6); } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element's attributes include the global attributes.\nautofocus This Boolean attribute specifies that the button should have input focus when the page loads. Only one element in a document can have this attribute.\nautocomplete [Non-standard]{.visually-hidden} This attribute on a \u0026lt;button\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} is nonstandard and Firefox-specific. Unlike other browsers, Firefox persists the dynamic disabled state{target=\u0026quot;_blank\u0026quot;} of a \u0026lt;button\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} across page loads. Setting autocomplete=\u0026quot;off\u0026quot; on the button disables this feature; see Firefox bug 654072{target=\u0026quot;_blank\u0026quot;}.\ndisabled This Boolean attribute prevents the user from interacting with the button: it cannot be pressed or focused.\nFirefox, unlike other browsers, persists the dynamic disabled state{target=\u0026quot;_blank\u0026quot;} of a \u0026lt;button\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} across page loads. To control this feature, use the autocomplete attribute.\nform The \u0026lt;form\u0026gt; element to associate the button with (its form owner). The value of this attribute must be the id of a \u0026lt;form\u0026gt; in the same document. (If this attribute is not set, the \u0026lt;button\u0026gt; is associated with its ancestor \u0026lt;form\u0026gt; element, if any.)\nThis attribute lets you associate \u0026lt;button\u0026gt; elements to \u0026lt;form\u0026gt;s anywhere in the document, not just inside a \u0026lt;form\u0026gt;. It can also override an ancestor \u0026lt;form\u0026gt; element.\nformaction The URL that processes the information submitted by the button. Overrides the action attribute of the button's form owner. Does nothing if there is no form owner.\nformenctype If the button is a submit button (it's inside/associated with a \u0026lt;form\u0026gt; and doesn't have type=\u0026quot;button\u0026quot;), specifies how to encode the form data that is submitted. Possible values:\napplication/x-www-form-urlencoded: The default if the attribute is not used. multipart/form-data: Used to submit \u0026lt;input\u0026gt; elements with their type attributes set to file. text/plain: Specified as a debugging aid; shouldn't be used for real form submission. If this attribute is specified, it overrides the enctype attribute of the button's form owner.\nformmethod If the button is a submit button (it's inside/associated with a \u0026lt;form\u0026gt; and doesn't have type=\u0026quot;button\u0026quot;), this attribute specifies the HTTP method used to submit the form. Possible values:\npost: The data from the form are included in the body of the HTTP request when sent to the server. Use when the form contains information that shouldn't be public, like login credentials. get: The form data are appended to the form's action URL, with a ? as a separator, and the resulting URL is sent to the server. Use this method when the form has no side effects, like search forms. dialog: This method is used to indicate that the button closes the dialog with which it is associated, and does not transmit the form data at all. If specified, this attribute overrides the method attribute of the button's form owner.\nformnovalidate If the button is a submit button, this Boolean attribute specifies that the form is not to be validated when it is submitted. If this attribute is specified, it overrides the novalidate attribute of the button's form owner.\nThis attribute is also available on \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; and \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt; elements.\nformtarget If the button is a submit button, this attribute is an author-defined name or standardized, underscore-prefixed keyword indicating where to display the response from submitting the form. This is the name of, or keyword for, a browsing context (a tab, window, or \u0026lt;iframe\u0026gt;). If this attribute is specified, it overrides the target attribute of the button's form owner. The following keywords have special meanings:\n_self: Load the response into the same browsing context as the current one. This is the default if the attribute is not specified. _blank: Load the response into a new unnamed browsing context \u0026mdash; usually a new tab or window, depending on the user's browser settings. _parent: Load the response into the parent browsing context of the current one. If there is no parent, this option behaves the same way as _self. _top: Load the response into the top-level browsing context (that is, the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as _self. name The name of the button, submitted as a pair with the button's value as part of the form data, when that button is used to submit the form.\npopovertarget Turns a \u0026lt;button\u0026gt; element into a popover control button; takes the ID of the popover element to control as its value. See the Popover API landing page for more details.\npopovertargetaction Specifies the action to be performed on a popover element being controlled by a control \u0026lt;button\u0026gt;. Possible values are:\n\u0026quot;hide\u0026quot; The button will hide a shown popover. If you try to hide an already hidden popover, no action will be taken.\n\u0026quot;show\u0026quot; The button will show a hidden popover. If you try to show an already showing popover, no action will be taken.\n\u0026quot;toggle\u0026quot; The button will toggle a popover between showing and hidden. If the popover is hidden, it will be shown; if the popover is showing, it will be hidden. If popovertargetaction is omitted, \u0026quot;toggle\u0026quot; is the default action that will be performed by the control button.\ntype The default behavior of the button. Possible values are:\nsubmit: The button submits the form data to the server. This is the default if the attribute is not specified for buttons associated with a \u0026lt;form\u0026gt;, or if the attribute is an empty or invalid value. reset: The button resets all the controls to their initial values, like \u0026lt;input type=\u0026quot;reset\u0026quot;\u0026gt;. (This behavior tends to annoy users.) button: The button has no default behavior, and does nothing when pressed by default. It can have client-side scripts listen to the element's events, which are triggered when the events occur. value Defines the value associated with the button's name when it's submitted with the form data. This value is passed to the server in params when the form is submitted using this button. :::\nNotes # ::: section-content A submit button with the attribute formaction set, but without an associated form does nothing. You have to set a form owner, either by wrapping it in a \u0026lt;form\u0026gt; or set the attribute form to the id of the form.\n\u0026lt;button\u0026gt; elements are much easier to style than \u0026lt;input\u0026gt; elements. You can add inner HTML content (think \u0026lt;i\u0026gt;, \u0026lt;br\u0026gt;, or even \u0026lt;img\u0026gt;), and use ::after and ::before pseudo-elements for complex rendering.\nIf your buttons are not for submitting form data to a server, be sure to set their type attribute to button. Otherwise they will try to submit form data and to load the (nonexistent) response, possibly destroying the current state of the document.\nWhile \u0026lt;button type=\u0026quot;button\u0026quot;\u0026gt; has no default behavior, event handlers can be scripted to trigger behaviors. An activated button can perform programmable actions using JavaScript, such as removing an item from a list. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;button name=\u0026#34;button\u0026#34;\u0026gt;Press me\u0026lt;/button\u0026gt; :::\n::: {#sect1 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # Icon buttons # ::: section-content Buttons that only show an icon to represent do not have an accessible name. Accessible names provide information for assistive technology, such as screen readers, to access when they parse the document and generate an accessibility tree. Assistive technology then uses the accessibility tree to navigate and manipulate page content.\nTo give an icon button an accessible name, put text in the \u0026lt;button\u0026gt; element that concisely describes the button's functionality.\nExamples # ::: code-example [html]{.language-name}\n\u0026lt;button name=\u0026#34;favorite\u0026#34;\u0026gt; \u0026lt;svg aria-hidden=\u0026#34;true\u0026#34; viewBox=\u0026#34;0 0 10 10\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M7 9L5 8 3 9V6L1 4h3l1-3 1 3h3L7 6z\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; Add to favorites \u0026lt;/button\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: :::\nIf you want to visually hide the button's text, an accessible way to do so is to use a combination of CSS properties{target=\u0026quot;_blank\u0026quot;} to remove it visually from the screen, but keep it parsable by assistive technology.\nHowever, it is worth noting that leaving the button text visually apparent can aid people who may not be familiar with the icon's meaning or understand the button's purpose. This is especially relevant for people who are not technologically sophisticated, or who may have different cultural interpretations for the icon the button uses.\nWhat is an accessible name? | The Paciello Group{target=\u0026quot;_blank\u0026quot;} MDN Understanding WCAG, Guideline 4.1 explanations Understanding Success Criterion 4.1.2 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} ::: Size and Proximity # ::: section-content\nSize # Interactive elements such as buttons should provide an area large enough that it is easy to activate them. This helps a variety of people, including people with motor control issues and people using non-precise forms of input such as a stylus or fingers. A minimum interactive size of 44×44 CSS pixels{target=\u0026quot;_blank\u0026quot;} is recommended.\nUnderstanding Success Criterion 2.5.5: Target Size | W3C Understanding WCAG 2.1{target=\u0026quot;_blank\u0026quot;} Target Size and 2.5.5 | Adrian Roselli{target=\u0026quot;_blank\u0026quot;} Quick test: Large touch targets - The A11Y Project{target=\u0026quot;_blank\u0026quot;} Proximity # Large amounts of interactive content \u0026mdash; including buttons \u0026mdash; placed in close visual proximity to each other should have space separating them. This spacing is beneficial for people who are experiencing motor control issues, who may accidentally activate the wrong interactive content.\nSpacing may be created using CSS properties such as margin.\nHand tremors and the giant-button-problem - Axess Lab{target=\u0026quot;_blank\u0026quot;} ::: ARIA state information # ::: section-content To describe the state of a button the correct ARIA attribute to use is aria-pressed and not aria-checked or aria-selected. To find out more read the information about the ARIA button role. :::\nFirefox # ::: section-content Firefox will add a small dotted border on a focused button. This border is declared through CSS in the browser stylesheet, but you can override it to add your own focused style using button::-moz-focus-inner { }.\nIf overridden, it is important to ensure that the state change when focus is moved to the button is high enough that people experiencing low vision conditions will be able to perceive it.\nColor contrast ratio is determined by comparing the luminosity of the button text and background color values compared to the background the button is placed on. In order to meet current Web Content Accessibility Guidelines (WCAG){target=\u0026quot;_blank\u0026quot;}, a ratio of 4.5:1 is required for text content and 3:1 for large text. (Large text is defined as 18.66px and bold or larger, or 24px or larger.)\nWebAIM: Color Contrast Checker{target=\u0026quot;_blank\u0026quot;} MDN Understanding WCAG, Guideline 1.4 explanations Understanding Success Criterion 1.4.3 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} ::: Clicking and focus # ::: section-content Whether clicking on a \u0026lt;button\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} or \u0026lt;input\u0026gt; button types causes it to (by default) become focused varies by browser and OS. Most browsers do give focus to a button being clicked, but Safari does not, by design{target=\u0026quot;_blank\u0026quot;}. :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, Interactive content, listed, labelable, and submittable form-associated element, palpable content. Permitted content Phrasing content but there must be no Interactive content Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role button Permitted ARIA roles checkbox, combobox, link, menuitem, menuitemcheckbox, menuitemradio, option, radio, switch, tab DOM interface HTMLButtonElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-button-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet button 1 12 1 Yes ≤15 ≤4 4.4 18 4 ≤14 ≤3.2 1.0 autocomplete No No 4 No No No No No 4 No No No disabled 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 form 9 16 4 No 15 5.1 4.4 18 4 14 5 1.0 formaction 9 12 4 10 15 5.1 37 18 4 No 5 1.0 formenctype 9 12 4 10 10.6 5.1 37 18 4 11 5 1.0 formmethod 9 12 4 10 15 5.1 37 18 4 14 5 1.0 formnovalidate 9 12 4 Yes 15 5.1 4.4 18 4 14 5 1.0 formtarget 9 12 4 Yes 15 5.1 4.4 18 4 14 5 1.0 name 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 type 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 value 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/button{._attribution-link} :::\n"},{"id":72,"href":"/docs/references/languages/html/element/canvas/","title":"Canvas","section":"HTML","content":" \u0026lt;canvas\u0026gt;: The Graphics Canvas element # ::: section-content Use the \u0026lt;canvas\u0026gt; with either the canvas scripting API or the WebGL API to draw graphics and animations.\nContent categories Flow content, phrasing content, embedded content, palpable content. Permitted content Transparent but with no interactive content descendants except for \u0026lt;a\u0026gt; elements, \u0026lt;button\u0026gt; elements, \u0026lt;input\u0026gt; elements whose type attribute is checkbox, radio, or button. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role No corresponding role Permitted ARIA roles Any DOM interface HTMLCanvasElement ::: Attributes # ::: section-content This element's attributes include the global attributes.\nheight The height of the coordinate space in CSS pixels. Defaults to 150.\nmoz-opaque [Non-standard]{.visually-hidden} [Deprecated]{.visually-hidden} Lets the canvas know whether translucency will be a factor. If the canvas knows there's no translucency, painting performance can be optimized. This is only supported by Mozilla-based browsers; use the standardized canvas.getContext('2d', { alpha: false }) instead.\nwidth The width of the coordinate space in CSS pixels. Defaults to 300. :::\nUsage notes # Alternative content # ::: section-content You should provide alternate content inside the \u0026lt;canvas\u0026gt; block. That content will be rendered both on older browsers that don't support canvas and in browsers with JavaScript disabled. :::\nClosing \u0026lt;/canvas\u0026gt; tag # ::: section-content Unlike the \u0026lt;img\u0026gt; element, the \u0026lt;canvas\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} element requires the closing tag (\u0026lt;/canvas\u0026gt;). :::\nSizing the canvas using CSS versus HTML # ::: section-content The displayed size of the canvas can be changed using CSS, but if you do this the image is scaled during rendering to fit the styled size, which can make the final graphics rendering end up being distorted.\nIt is better to specify your canvas dimensions by setting the width and height attributes directly on the \u0026lt;canvas\u0026gt; elements, either directly in the HTML or by using JavaScript. :::\nMaximum canvas size # ::: section-content The exact maximum size of a \u0026lt;canvas\u0026gt; element depends on the browser and environment. While in most cases the maximum dimensions exceed 10,000 x 10,000 pixels, notably iOS devices limit the canvas size to only 4,096 x 4,096 pixels. See canvas size limits in different browsers and devices{target=\u0026quot;_blank\u0026quot;} (2021).\n::: {#sect1 .notecard .note} Note: Exceeding the maximum dimensions or area renders the canvas unusable \u0026mdash; drawing commands will not work. ::: :::\nUsing an offscreen canvas # ::: section-content A canvas can be rendered using the OffscreenCanvas API where the document and canvas are decoupled. The benefit is that a worker thread can handle canvas rendering and the main thread of your web application is not blocked by canvas operations. By parallelizing work, other UI elements of your web application will remain responsive even if you are running complex graphics on an offscreen canvas. For more information, see the OffscreenCanvas API documentation. :::\nExamples # HTML # ::: section-content This code snippet adds a canvas element to your HTML document. A fallback text is provided if a browser is unable to read or render the canvas.\n::: code-example [html]{.language-name}\n\u0026lt;canvas width=\u0026#34;120\u0026#34; height=\u0026#34;120\u0026#34;\u0026gt; An alternative text describing what your canvas displays. \u0026lt;/canvas\u0026gt; ::: :::\nJavaScript # ::: section-content Then in the JavaScript code, call HTMLCanvasElement.getContext() to get a drawing context and start drawing onto the canvas:\n::: code-example [js]{.language-name}\nconst canvas = document.querySelector(\u0026#34;canvas\u0026#34;); const ctx = canvas.getContext(\u0026#34;2d\u0026#34;); ctx.fillStyle = \u0026#34;green\u0026#34;; // Add a rectangle at (10, 10) with size 100x100 pixels ctx.fillRect(10, 10, 100, 100); ::: :::\nResult # ::: section-content ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # Alternative content # ::: section-content The \u0026lt;canvas\u0026gt; element on its own is just a bitmap and does not provide information about any drawn objects. Canvas content is not exposed to accessibility tools as semantic HTML is. In general, you should avoid using canvas in an accessible website or app. The following guides can help to make it more accessible.\nCanvas accessibility use cases{target=\u0026quot;_blank\u0026quot;} Canvas element accessibility issues{target=\u0026quot;_blank\u0026quot;} HTML Canvas Accessibility in Firefox 13 \u0026ndash; by Steve Faulkner{target=\u0026quot;_blank\u0026quot;} Best practices for interactive canvas elements{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-canvas-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Opera Safari Samsung Explorer Android Android Android Android on IOS Internet canvas 1 12 1.5 9 9 2 37 18 4 10.1 1 1.0\n\\[\\\u0026quot;Before Although early \\[\\\u0026quot;Before Firefox 5, the versions of Firefox 5, the canvas width and Apple\\'s Safari canvas width and height were browser don\\'t height were signed integers require the signed integers instead of closing tag, the instead of unsigned specification unsigned integers.\\\u0026quot;, indicates that integers.\\\u0026quot;, \\\u0026quot;Before Firefox it is required, \\\u0026quot;Before Firefox 6, a \\\u0026lt;canvas\\\u0026gt; so you should be 6, a \\\u0026lt;canvas\\\u0026gt; element with a sure to include element with a zero width or it for broadest zero width or height would be compatibility. height would be rendered as if Before version rendered as if it had default 2, Safari will it had default dimensions.\\\u0026quot;, render the dimensions.\\\u0026quot;, \\\u0026quot;Before Firefox content of the \\\u0026quot;Before Firefox 12, if fallback in 12, if JavaScript is addition to the JavaScript is disabled, the canvas itself disabled, the \\\u0026lt;canvas\\\u0026gt; unless you use \\\u0026lt;canvas\\\u0026gt; element was CSS tricks to element was being rendered mask it. being rendered instead of instead of showing the showing the fallback content fallback content as per the as per the specification. specification. Since then, the Since then, the fallback content fallback content is rendered is rendered instead.\\\u0026quot;\\] instead.\\\u0026quot;\\] height 1 12 1.5 9 9 2 37 18 4 10.1 1 1.0\n\\[\\\u0026quot;Before Although early \\[\\\u0026quot;Before Firefox 5, the versions of Firefox 5, the canvas width and Apple\\'s Safari canvas width and height were browser don\\'t height were signed integers require the signed integers instead of closing tag, the instead of unsigned specification unsigned integers.\\\u0026quot;, indicates that integers.\\\u0026quot;, \\\u0026quot;Before Firefox it is required, \\\u0026quot;Before Firefox 6, a \\\u0026lt;canvas\\\u0026gt; so you should be 6, a \\\u0026lt;canvas\\\u0026gt; element with a sure to include element with a zero width or it for broadest zero width or height would be compatibility. height would be rendered as if Before version rendered as if it had default 2, Safari will it had default dimensions.\\\u0026quot;, render the dimensions.\\\u0026quot;, \\\u0026quot;Before Firefox content of the \\\u0026quot;Before Firefox 12, if fallback in 12, if JavaScript is addition to the JavaScript is disabled, the canvas itself disabled, the \\\u0026lt;canvas\\\u0026gt; unless you use \\\u0026lt;canvas\\\u0026gt; element was CSS tricks to element was being rendered mask it. being rendered instead of instead of showing the showing the fallback content fallback content as per the as per the specification. specification. Since then, the Since then, the fallback content fallback content is rendered is rendered instead.\\\u0026quot;\\] instead.\\\u0026quot;\\] moz-opaque No No 3.5 No No No No No 4 No No No\nwidth 1 12 1.5 9 9 2 37 18 4 10.1 1 1.0\n\\[\\\u0026quot;Before Although early \\[\\\u0026quot;Before Firefox 5, the versions of Firefox 5, the canvas width and Apple\\'s Safari canvas width and height were browser don\\'t height were signed integers require the signed integers instead of closing tag, the instead of unsigned specification unsigned integers.\\\u0026quot;, indicates that integers.\\\u0026quot;, \\\u0026quot;Before Firefox it is required, \\\u0026quot;Before Firefox 6, a \\\u0026lt;canvas\\\u0026gt; so you should be 6, a \\\u0026lt;canvas\\\u0026gt; element with a sure to include element with a zero width or it for broadest zero width or height would be compatibility. height would be rendered as if Before version rendered as if it had default 2, Safari will it had default dimensions.\\\u0026quot;, render the dimensions.\\\u0026quot;, \\\u0026quot;Before Firefox content of the \\\u0026quot;Before Firefox 12, if fallback in 12, if JavaScript is addition to the JavaScript is disabled, the canvas itself disabled, the \\\u0026lt;canvas\\\u0026gt; unless you use \\\u0026lt;canvas\\\u0026gt; element was CSS tricks to element was being rendered mask it. being rendered instead of instead of showing the showing the fallback content fallback content as per the as per the specification. specification. Since then, the Since then, the fallback content fallback content is rendered is rendered instead.\\\u0026quot;\\] instead.\\\u0026quot;\\] :::\nSee also # ::: section-content\nCanvas API Canvas tutorial Canvas-related demos OffscreenCanvas Canvas cheat sheet{target=\u0026quot;_blank\u0026quot;} (2009) Canvas cheat sheet{target=\u0026quot;_blank\u0026quot;} (pdf) (2015) Canvas cheat sheet{target=\u0026quot;_blank\u0026quot;} (pdf) (2020) Canvas introduction by Apple{target=\u0026quot;_blank\u0026quot;} (2013) ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas{._attribution-link} :::\n"},{"id":73,"href":"/docs/references/languages/html/element/caption/","title":"Caption","section":"HTML","content":" \u0026lt;caption\u0026gt;: The Table Caption element # ::: section-content The \u0026lt;caption\u0026gt; HTML element specifies the caption (or title) of a table. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;caption\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-taller .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} He-Man and Skeletor facts He-Man Skeletor Role Hero Villain Weapon Power Sword Havoc Staff Dark secret Expert florist Cries at romcoms ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} caption { padding: 10px; caption-side: bottom; }\ntable { border-collapse: collapse; border: 2px solid rgb(200, 200, 200); letter-spacing: 1px; font-family: sans-serif; font-size: 0.8rem; } td, th { border: 1px solid rgb(190, 190, 190); padding: 7px 5px; } th { background-color: rgb(235, 235, 235); } td { text-align: center; } tr:nth-child(even) td { background-color: rgb(250, 250, 250); } tr:nth-child(odd) td { background-color: rgb(240, 240, 240); } .heman { font: 1.4rem molot; text-shadow: 1px 1px 1px #fff, 2px 2px 1px #000; } .skeletor { font: 1.7rem rapscallion; letter-spacing: 3px; text-shadow: 1px 1px 0 #fff, 0 0 9px #000; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element includes the global attributes. :::\nDeprecated attributes # ::: section-content The following attributes are deprecated and should not be used. They are documented below for reference when updating existing code and for historical interest only.\nalign [Deprecated]{.visually-hidden} This enumerated attribute indicates how the caption must be aligned with respect to the table. It may have one of the following values:\nleft The caption is displayed to the left of the table.\ntop The caption is displayed above the table.\nright The caption is displayed to the right of the table.\nbottom The caption is displayed below the table.\n::: {#sect1 .notecard .warning} Warning: Do not use this attribute, as it has been deprecated. The \u0026lt;caption\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} element should be styled using the CSS properties caption-side and text-align. ::: :::\nUsage notes # ::: section-content If used, the \u0026lt;caption\u0026gt; element must be the first child of its parent \u0026lt;table\u0026gt; element.\nWhen the \u0026lt;table\u0026gt; element that contains the \u0026lt;caption\u0026gt; is the only descendant of a \u0026lt;figure\u0026gt; element, you should use the \u0026lt;figcaption\u0026gt; element instead of \u0026lt;caption\u0026gt;.\nA background-color on the table will not include the caption. Add a background-color to the \u0026lt;caption\u0026gt; element as well if you want the same color to be behind both. :::\nExample # ::: section-content This simple example presents a table that includes a caption.\n::: code-example [html]{.language-name}\n\u0026lt;table\u0026gt; \u0026lt;caption\u0026gt; Example Caption \u0026lt;/caption\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Login\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Email\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;user1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;user1@sample.com\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;user2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;user2@sample.com\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; :::\n::: {#sect2 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content Flow content. Tag omission The end tag can be omitted if the element is not immediately followed by ASCII whitespace or a comment. Permitted parents A \u0026lt;table\u0026gt; element, as its first descendant. Implicit ARIA role caption Permitted ARIA roles No role permitted DOM interface HTMLTableCaptionElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-caption-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet caption 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 align 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nCSS properties that may be specially useful to style the \u0026lt;caption\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} element: text-align, caption-side. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption{._attribution-link} :::\n"},{"id":74,"href":"/docs/references/languages/html/element/center/","title":"Center","section":"HTML","content":" \u0026lt;center\u0026gt;: The Centered Text element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;center\u0026gt; HTML element is a block-level element that displays its block-level or inline contents centered horizontally within its containing element. The container is usually, but isn't required to be, \u0026lt;body\u0026gt;.\nThis tag has been deprecated in HTML 4 (and XHTML 1) in favor of the CSS text-align property, which can be applied to the `` element or to an individual \u0026lt;p\u0026gt;. For centering blocks, use other CSS properties like margin-left and margin-right and set them to auto (or set margin to 0 auto). :::\nDOM interface # ::: section-content This element implements the HTMLElement interface. :::\nExample 1 # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;center\u0026gt; This text will be centered. \u0026lt;p\u0026gt;So will this paragraph.\u0026lt;/p\u0026gt; \u0026lt;/center\u0026gt; ::: :::\nExample 2 (CSS alternative) # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;div style=\u0026#34;text-align:center\u0026#34;\u0026gt; This text will be centered. \u0026lt;p\u0026gt;So will this paragraph.\u0026lt;/p\u0026gt; ::: :::\nExample 3 (CSS alternative) # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p style=\u0026#34;text-align:center\u0026#34;\u0026gt; This line will be centered.\u0026lt;br /\u0026gt; And so will this line. \u0026lt;/p\u0026gt; ::: :::\nNote # ::: section-content Applying text-align:center to a `` or \u0026lt;p\u0026gt; element centers the contents of those elements while leaving their overall dimensions unchanged. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# center]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari Samsung Explorer Android Android Android on IOS Internet center 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nBefore Firefox 4, Before Firefox 4, this element this element implemented the implemented the `HTMLSpanElement` `HTMLSpanElement` interface instead interface instead of the standard of the standard `HTMLElement` `HTMLElement` interface. interface. :::\nSee also # ::: section-content\ntext-align display ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/center{._attribution-link} :::\n"},{"id":75,"href":"/docs/references/languages/html/element/cite/","title":"Cite","section":"HTML","content":" \u0026lt;cite\u0026gt;: The Citation element # ::: section-content The \u0026lt;cite\u0026gt; HTML element is used to mark up the title of a cited creative work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;cite\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} It was a bright cold day in April, and the clocks were striking thirteen.\nFirst sentence in Nineteen Eighty-Four by George Orwell (Part 1, Chapter 1). ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} /* stylelint-disable-next-line block-no-empty */ cite { } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content In the context of the \u0026lt;cite\u0026gt; element, a creative work that might be cited could be, for example, one of the following:\nA book A research paper An essay A poem A musical score A song A play or film script A film A television show A game A sculpture A painting A theatrical production A play An opera A musical An exhibition A legal case report A computer program A website A web page A blog post or comment A forum post or comment A tweet A Facebook post A written or oral statement And so forth. To include a reference to the source of quoted material which is contained within a \u0026lt;blockquote\u0026gt; or \u0026lt;q\u0026gt; element, use the cite attribute on the element.\nTypically, browsers style the contents of a \u0026lt;cite\u0026gt; element in italics by default. To avoid this, apply the CSS font-style property to the \u0026lt;cite\u0026gt; element. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;More information can be found in \u0026lt;cite\u0026gt;[ISO-0000]\u0026lt;/cite\u0026gt;.\u0026lt;/p\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role No corresponding role Permitted ARIA roles Any DOM interface HTMLElement Up to Gecko 1.9.2 (Firefox 4) inclusive, Firefox implements the HTMLSpanElement interface for this element. ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-cite-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet cite 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nThe element \u0026lt;blockquote\u0026gt; for long quotations. The element \u0026lt;q\u0026gt; for inline quotations and the cite attribute. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite{._attribution-link} :::\n"},{"id":76,"href":"/docs/references/languages/html/element/code/","title":"Code","section":"HTML","content":" \u0026lt;code\u0026gt;: The Inline Code element # ::: section-content The \u0026lt;code\u0026gt; HTML element displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the user agent's default monospace font. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;code\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} The push() method adds one or more elements to the end of an array and returns the new length of the array. ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} code { background-color: #eee; border-radius: 3px; font-family: courier, monospace; padding: 0 3px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nExamples # ::: section-content A paragraph of text that includes \u0026lt;code\u0026gt;:\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; The function \u0026lt;code\u0026gt;selectAll()\u0026lt;/code\u0026gt; highlights all the text in the input field so the user can, for example, copy or delete the text. \u0026lt;/p\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nNotes # ::: section-content To represent multiple lines of code, wrap the \u0026lt;code\u0026gt; element within a \u0026lt;pre\u0026gt; element. The \u0026lt;code\u0026gt; element by itself only represents a single phrase of code or line of code.\nA CSS rule can be defined for the code selector to override the browser's default font face. Preferences set by the user might take precedence over the specified CSS. :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role code Permitted ARIA roles Any DOM interface HTMLElement Up to Gecko 1.9.2 (Firefox 4) inclusive, Firefox implements the HTMLSpanElement interface for this element. ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-code-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet code 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\n\u0026lt;samp\u0026gt; \u0026lt;kbd\u0026gt; \u0026lt;var\u0026gt; \u0026lt;pre\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/code{._attribution-link} :::\n"},{"id":77,"href":"/docs/references/languages/html/element/col/","title":"Col","section":"HTML","content":" \u0026lt;col\u0026gt;: The Table Column element # ::: section-content The \u0026lt;col\u0026gt; HTML element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a \u0026lt;colgroup\u0026gt; element. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;col\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-taller .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Superheros and sidekicks Batman Robin The Flash Kid Flash Skill Smarts Dex, acrobat Super speed Super speed ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} .batman { background-color: #d7d9f2; }\n.flash { background-color: #ffe8d4; } caption { padding: 8px; caption-side: bottom; } table { border-collapse: collapse; border: 2px solid rgb(100, 100, 100); letter-spacing: 1px; font-family: sans-serif; font-size: 0.7rem; } td, th { border: 1px solid rgb(100, 100, 100); padding: 10px 10px; } td { text-align: center; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\n\u0026lt;col\u0026gt; allows styling columns using CSS, but only a few properties will have an effect on the column ( see the CSS 2.1 specification{target=\u0026quot;_blank\u0026quot;} for a list). :::\nAttributes # ::: section-content This element includes the global attributes.\nspan This attribute contains a positive integer indicating the number of consecutive columns the \u0026lt;col\u0026gt; element spans. If not present, its default value is 1. :::\nDeprecated attributes # ::: section-content The following attributes are deprecated and should not be used. They are documented below for reference when updating existing code and for historical interest only.\nalign [Deprecated]{.visually-hidden} This enumerated attribute specifies how horizontal alignment of each column cell content will be handled. Possible values are:\nleft, aligning the content to the left of the cell center, centering the content in the cell right, aligning the content to the right of the cell justify, inserting spaces into the textual content so that the content is justified in the cell If this attribute is not set, its value is inherited from the align of the \u0026lt;colgroup\u0026gt; element this \u0026lt;col\u0026gt; element belongs too. If there are none, the left value is assumed.\n::: {#sect1 .notecard .note} Note: To achieve the same effect as the left, center, right or justify values, do not try to set the text-align property on a selector giving a \u0026lt;col\u0026gt; element. Because \u0026lt;td\u0026gt; elements are not descendant of the \u0026lt;col\u0026gt; element, they won't inherit it.\nIf the table doesn't use a colspan attribute, use the td:nth-child(an+b) CSS selector. Set a to zero and b to the position of the column in the table, e.g. td:nth-child(2) { text-align: right; } to right-align the second column.\nIf the table does use a colspan attribute, the effect can be achieved by combining adequate CSS attribute selectors like [colspan=n], though this is not trivial. :::\nbgcolor [Deprecated]{.visually-hidden} The background color of the table. It is a 6-digit hexadecimal RGB code, prefixed by a '#'. One of the predefined color keywords can also be used.\nTo achieve a similar effect, use the CSS background-color property.\nchar [Deprecated]{.visually-hidden} This attribute sets the character to align the cells in a column on. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.\ncharoff [Deprecated]{.visually-hidden} This attribute is used to indicate the number of characters to offset the column data from the alignment characters specified by the char attribute.\nvalign [Deprecated]{.visually-hidden} This attribute specifies the vertical alignment of the text within each cell of the column. Possible values for this attribute are:\nbaseline, which will put the text as close to the bottom of the cell as it is possible, but align it on the baseline{target=\u0026quot;_blank\u0026quot;} of the characters instead of the bottom of them. If characters are all of the size, this has the same effect as bottom. bottom, which will put the text as close to the bottom of the cell as it is possible; middle, which will center the text in the cell; and top, which will put the text as close to the top of the cell as it is possible. ::: {#sect2 .notecard .note} Note: Do not try to set the vertical-align property on a selector giving a \u0026lt;col\u0026gt; element. Because \u0026lt;td\u0026gt; elements are not descendant of the \u0026lt;col\u0026gt; element, they won't inherit it.\nIf the table doesn't use a colspan attribute, use the td:nth-child(an+b) CSS selector where 'a' is the total number of the columns in the table and 'b' is the ordinal position of the column in the table. Only after this selector the vertical-align property can be used.\nIf the table does use a colspan attribute, the effect can be achieved by combining adequate CSS attribute selectors like [colspan=n], though this is not trivial. :::\nwidth [Deprecated]{.visually-hidden} This attribute specifies a default width for each column in the current column group. In addition to the standard pixel and percentage values, this attribute might take the special form 0*, which means that the width of each column in the group should be the minimum width necessary to hold the column's contents. Relative widths such as 5* also can be used. :::\nExamples # ::: section-content Please see the \u0026lt;table\u0026gt; page for examples on \u0026lt;col\u0026gt;. :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content None; it is a void element. Tag omission It must have start tag, but must not have an end tag. Permitted parents \u0026lt;colgroup\u0026gt; only, though it can be implicitly defined as its start tag is not mandatory. The \u0026lt;colgroup\u0026gt; must not have a span attribute. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLTableColElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-col-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet col 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 align 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 bgcolor 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 char 1 12 No Yes 15 3 4.4 18 No 14 2 1.0 charoff 1 12 No Yes 15 3 4.4 18 No 14 2 1.0 span 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 valign 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 width 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nCSS properties and pseudo-classes that may be specially useful to style the \u0026lt;col\u0026gt; element: the width property to control the width of the column; the :nth-child pseudo-class to set the alignment on the cells of the column; the text-align property to align all cells content on the same character, like '.'. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/col{._attribution-link} :::\n"},{"id":78,"href":"/docs/references/languages/html/element/colgroup/","title":"Colgroup","section":"HTML","content":" \u0026lt;colgroup\u0026gt;: The Table Column Group element # ::: section-content The \u0026lt;colgroup\u0026gt; HTML element defines a group of columns within a table. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;colgroup\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-taller .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Superheros and sidekicks Batman Robin The Flash Kid Flash Skill Smarts Dex, acrobat Super speed Super speed ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} .batman { background-color: #d7d9f2; }\n.flash { background-color: #ffe8d4; } caption { padding: 8px; caption-side: bottom; } table { border-collapse: collapse; border: 2px solid rgb(100, 100, 100); letter-spacing: 1px; font-family: sans-serif; font-size: 0.7rem; } td, th { border: 1px solid rgb(100, 100, 100); padding: 10px 10px; } td { text-align: center; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element's attributes include the global attributes.\nspan This attribute contains a positive integer indicating the number of consecutive columns the \u0026lt;colgroup\u0026gt; element spans. If not present, its default value is 1.\nThe span attribute is not permitted if there are one or more \u0026lt;col\u0026gt; elements within the \u0026lt;colgroup\u0026gt;. :::\nDeprecated attributes # ::: section-content The following attributes are deprecated and should not be used. They are documented below for reference when updating existing code and for historical interest only.\nalign [Deprecated]{.visually-hidden} This enumerated attribute specifies how horizontal alignment of each column cell content will be handled. Possible values are:\nleft, aligning the content to the left of the cell center, centering the content in the cell right, aligning the content to the right of the cell justify, inserting spaces into the textual content so that the content is justified in the cell char, aligning the textual content on a special character with a minimal offset, defined by the char and charoff attributes. If this attribute is not set, the left value is assumed. The descendant \u0026lt;col\u0026gt; elements may override this value using their own align attribute.\n::: {#sect1 .notecard .note} Note: Do not try to set the text-align property on a selector giving a \u0026lt;colgroup\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} element. Because \u0026lt;td\u0026gt; elements are not descendant of the \u0026lt;colgroup\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} element, they won't inherit it.\nIf the table doesn't use a colspan attribute, use one td:nth-child(an+b) CSS selector per column, where 'a' is the total number of the columns in the table and 'b' is the ordinal position of this column in the table. Only after this selector the text-align property can be used.\nIf the table does use a colspan attribute, the effect can be achieved by combining adequate CSS attribute selectors like [colspan=n], though this is not trivial. :::\nbgcolor [Deprecated]{.visually-hidden} The background color of the table. It is a 6-digit hexadecimal RGB code, prefixed by a '#'. One of the predefined color keywords can also be used.\nTo achieve a similar effect, use the CSS background-color property.\nchar [Deprecated]{.visually-hidden} This attribute specifies the alignment of the content in a column group to a character. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored, though it will still be used as the default value for the align of the \u0026lt;col\u0026gt; which are members of this column group.\ncharoff [Deprecated]{.visually-hidden} This attribute is used to indicate the number of characters to offset the column data from the alignment character specified by the char attribute.\nvalign [Deprecated]{.visually-hidden} This attribute specifies the vertical alignment of the text within each cell of the column. Possible values for this attribute are:\nbaseline, which will put the text as close to the bottom of the cell as it is possible, but align it on the baseline{target=\u0026quot;_blank\u0026quot;} of the characters instead of the bottom of them. If characters are all of the size, this has the same effect as bottom. bottom, which will put the text as close to the bottom of the cell as it is possible; middle, which will center the text in the cell; and top, which will put the text as close to the top of the cell as it is possible. ::: {#sect2 .notecard .note} Note: Do not try to set the vertical-align property on a selector giving a \u0026lt;colgroup\u0026gt; element. Because \u0026lt;td\u0026gt; elements are not descendant of the \u0026lt;colgroup\u0026gt; element, they won't inherit it.\nIf the table doesn't use a colspan attribute, use the td:nth-child(an+b) CSS selector per column, where 'a' is the total number of the columns in the table and 'b' is the ordinal position of the column in the table. Only after this selector the vertical-align property can be used.\nIf the table does use a colspan attribute, the effect can be achieved by combining adequate CSS attribute selectors like [colspan=n], though this is not trivial. ::: :::\nExamples # ::: section-content Please see the \u0026lt;table\u0026gt; page for examples on \u0026lt;colgroup\u0026gt;. :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content If the span attribute is present: none.\nIf the attribute is not present: zero or more \u0026lt;col\u0026gt; element Tag omission The start tag may be omitted, if it has a \u0026lt;col\u0026gt; element as its first child and if it is not preceded by a \u0026lt;colgroup\u0026gt; whose end tag has been omitted.\nThe end tag may be omitted, if it is not followed by a space or a comment. Permitted parents A \u0026lt;table\u0026gt; element. The \u0026lt;colgroup\u0026gt; must appear after any optional \u0026lt;caption\u0026gt; element but before any \u0026lt;thead\u0026gt;, \u0026lt;th\u0026gt;, \u0026lt;tbody\u0026gt;, \u0026lt;tfoot\u0026gt; and \u0026lt;tr\u0026gt; element. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLTableColElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-colgroup-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet colgroup 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 align 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 bgcolor 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 char 1 12 No Yes 15 3 4.4 18 No 14 2 1.0 charoff 1 12 No Yes 15 3 4.4 18 No 14 2 1.0 span 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 valign 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 width 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nCSS properties and pseudo-classes that may be specially useful to style the \u0026lt;col\u0026gt; element: the width property to control the width of the column; the :nth-child pseudo-class to set the alignment on the cells of the column; the text-align property to align all cells content on the same character, like '.'. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup{._attribution-link} :::\n"},{"id":79,"href":"/docs/references/languages/html/element/data/","title":"Data","section":"HTML","content":" \u0026lt;data\u0026gt;: The Data element # ::: section-content The \u0026lt;data\u0026gt; HTML element links a given piece of content with a machine-readable translation. If the content is time- or date-related, the \u0026lt;time\u0026gt; element must be used. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;data\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} New Products:\nMini Ketchup Jumbo Ketchup Mega Jumbo Ketchup ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} data:hover::after { content: \u0026rsquo; (ID \u0026rsquo; attr(value) \u0026lsquo;)\u0026rsquo;; font-size: 0.7em; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role generic Permitted ARIA roles Any DOM interface HTMLDataElement ::: Attributes # ::: section-content This element's attributes include the global attributes.\nvalue This attribute specifies the machine-readable translation of the content of the element. :::\nExamples # ::: section-content The following example displays product names but also associates each name with a product number.\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;New Products\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;data value=\u0026#34;398\u0026#34;\u0026gt;Mini Ketchup\u0026lt;/data\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;data value=\u0026#34;399\u0026#34;\u0026gt;Jumbo Ketchup\u0026lt;/data\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;data value=\u0026#34;400\u0026#34;\u0026gt;Mega Jumbo Ketchup\u0026lt;/data\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-data-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet data 62 ≤18 22 No 49 10 62 62 22 46 10 8.0 :::\nSee also # ::: section-content\nThe HTML \u0026lt;time\u0026gt; element. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/data{._attribution-link} :::\n"},{"id":80,"href":"/docs/references/languages/html/element/datalist/","title":"Datalist","section":"HTML","content":" \u0026lt;datalist\u0026gt;: The HTML Data List element # ::: section-content The \u0026lt;datalist\u0026gt; HTML element contains a set of \u0026lt;option\u0026gt; elements that represent the permissible or recommended options available to choose from within other controls. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;datalist\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Choose a flavor: \u0026lt;datalist id=\u0026quot;ice-cream-flavors\u0026quot;\u0026gt; \u0026lt;option value=\u0026quot;Chocolate\u0026quot;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;Coconut\u0026quot;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;Mint\u0026quot;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;Strawberry\u0026quot;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;Vanilla\u0026quot;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; margin-bottom: 10px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nTo bind the \u0026lt;datalist\u0026gt; element to the control, we give it a unique identifier in the id attribute, and then add the list attribute to the \u0026lt;input\u0026gt; element with the same identifier as value. Only certain types of \u0026lt;input\u0026gt; support this behavior, and it can also vary from browser to browser.\n::: {#sect1 .notecard .note} Note: The \u0026lt;option\u0026gt; element can store a value as internal content and in the value and label attributes. Which one will be visible in the drop-down menu depends on the browser, but when clicked, content entered into control field will always come from the value attribute. ::: :::\nAttributes # ::: section-content This element has no other attributes than the global attributes, common to all elements. :::\nExamples # Textual types # ::: section-content Recommended values in types text, search, url, tel, email and number, are displayed in a drop-down menu when user clicks or double-clicks on the control. Typically the right side of a control will also have an arrow pointing to the presence of predefined values.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;myBrowser\u0026#34;\u0026gt;Choose a browser from this list:\u0026lt;/label\u0026gt; \u0026lt;input list=\u0026#34;browsers\u0026#34; id=\u0026#34;myBrowser\u0026#34; name=\u0026#34;myBrowser\u0026#34; /\u0026gt; \u0026lt;datalist id=\u0026#34;browsers\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;Chrome\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;Firefox\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;Opera\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;Safari\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;Microsoft Edge\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\n::: {#sect2 .code-example} ::: iframe ::: ::: :::\nDate and Time types # ::: section-content The types month, week, date, time and datetime-local can show an interface that allows a convenient selection of a date and time. Predefined values can be shown there, allowing the user to quickly fill the control value.\n::: {#sect3 .notecard .note} Note: When type is not supported, text type creating simple text field will be used instead. That field will correctly recognize recommended values and display them to the user in a drop-down menu. :::\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;time\u0026#34; list=\u0026#34;popularHours\u0026#34; /\u0026gt; \u0026lt;datalist id=\u0026#34;popularHours\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;12:00\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;13:00\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;14:00\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\n::: {#sect4 .code-example} ::: iframe ::: ::: :::\nRange type # ::: section-content The recommended values in the range type will be shown as series of hash marks that the user can easily select.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;tick\u0026#34;\u0026gt;Tip amount:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;range\u0026#34; list=\u0026#34;tickmarks\u0026#34; min=\u0026#34;0\u0026#34; max=\u0026#34;100\u0026#34; id=\u0026#34;tick\u0026#34; name=\u0026#34;tick\u0026#34; /\u0026gt; \u0026lt;datalist id=\u0026#34;tickmarks\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;10\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;20\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;30\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\n::: {#sect5 .code-example} ::: iframe ::: ::: :::\nColor type # ::: section-content The color type can show predefined colors in a browser-provided interface.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;colors\u0026#34;\u0026gt;Pick a color (preferably a red tone):\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;color\u0026#34; list=\u0026#34;redColors\u0026#34; id=\u0026#34;colors\u0026#34; /\u0026gt; \u0026lt;datalist id=\u0026#34;redColors\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;#800000\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;#8B0000\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;#A52A2A\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;#DC143C\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\n::: {#sect6 .code-example} ::: iframe ::: ::: :::\nPassword type # ::: section-content The specification allows linking \u0026lt;datalist\u0026gt; with a password type, but no browser supports it for security reasons.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;pwd\u0026#34;\u0026gt;Enter a password:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; list=\u0026#34;randomPassword\u0026#34; id=\u0026#34;pwd\u0026#34; /\u0026gt; \u0026lt;datalist id=\u0026#34;randomPassword\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;5Mg[_3DnkgSu@!q#\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\n::: {#sect7 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content. Permitted content Either phrasing content or zero or more \u0026lt;option\u0026gt; elements. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role listbox Permitted ARIA roles No role permitted DOM interface HTMLDataListElement ::: Accessibility concerns # ::: section-content When deciding to use the \u0026lt;datalist\u0026gt; element, here are some accessibility issues to be mindful of:\nThe font size of the data list's options does not zoom, always remaining the same size. The contents of the autosuggest do not grow or shrink when the rest of the contents are zoomed in or out. As targeting the list of options with CSS is very limited to non-existent, rendering can not be styled for high-contrast mode. Some screen reader/browser combinations, including NVDA and Firefox, do not announce the contents of the autosuggest popup. ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-datalist-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari Samsung Explorer Android Android Android on IOS Internet datalist 20 12 4 10 9.5 12.1 4.4.3 33 79 20 12.2 2.0\nThe The dropdown menu containing available `\u0026lt;datalist\u0026gt;` options does not appear. See [bug element will 1535985](https://bugzil.la/1535985). only create a dropdown for 4--79 textual types, such as `text`, `search`, `url`, `tel`, `email` and `number`. The `date`, `time`, `range` and `color` types are not supported. :::\nSee also # ::: section-content\nThe \u0026lt;input\u0026gt; element, and more specifically its list attribute; The \u0026lt;option\u0026gt; element. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist{._attribution-link} :::\n"},{"id":81,"href":"/docs/references/languages/html/element/dd/","title":"Dd","section":"HTML","content":" \u0026lt;dd\u0026gt;: The Description Details element # ::: section-content The \u0026lt;dd\u0026gt; HTML element provides the description, definition, or value for the preceding term ( \u0026lt;dt\u0026gt;) in a description list ( \u0026lt;dl\u0026gt;). :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;dd\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Cryptids of Cornwall:\n\u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;Beast of Bodmin\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;A large feline inhabiting Bodmin Moor.\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Morgawr\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;A sea serpent.\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Owlman\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;A giant owl-like creature.\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p, dt { font-weight: bold; }\ndl, dd { font-size: 0.9rem; } dd { margin-bottom: 1em; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element's attributes include the global attributes.\nnowrap [Non-standard]{.visually-hidden} [Deprecated]{.visually-hidden} If the value of this attribute is set to yes, the definition text will not wrap. The default value is no. :::\nExamples # ::: section-content For examples, see the examples provided for the \u0026lt;dl\u0026gt; element. :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content Flow content. Tag omission The start tag is required. The end tag may be omitted if this element is immediately followed by another \u0026lt;dd\u0026gt; element or a \u0026lt;dt\u0026gt; element, or if there is no more content in the parent element. Permitted parents A \u0026lt;dl\u0026gt; or a \u0026lt;div\u0026gt; that is a child of a \u0026lt;dl\u0026gt;.\nThis element can be used after a \u0026lt;dt\u0026gt; or another \u0026lt;dd\u0026gt; element. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-dd-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android dd 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nBefore Firefox 4, this element was implemented using the `HTMLSpanElement` interface instead of `HTMLElement`. nowrap 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 # :::\nSee also # ::: section-content\n\u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd{._attribution-link} :::\n"},{"id":82,"href":"/docs/references/languages/html/element/del/","title":"Del","section":"HTML","content":" \u0026lt;del\u0026gt;: The Deleted Text element # ::: section-content The \u0026lt;del\u0026gt; HTML element represents a range of text that has been deleted from a document. This can be used when rendering \u0026quot;track changes\u0026quot; or source code diff information, for example. The \u0026lt;ins\u0026gt; element can be used for the opposite purpose: to indicate text that has been added to the document. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;del\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} There is nothing no code either good or bad, but thinking running it makes it so. ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} del { text-decoration: line-through; background-color: #fbb; color: #555; }\nins { text-decoration: none; background-color: #d4fcbc; } blockquote { padding-left: 15px; border-left: 3px solid #d7d7db; font-size: 1rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThis element is often (but need not be) rendered by applying a strike-through style to the text.\nContent categories Phrasing content, flow content. Permitted content Transparent. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role deletion Permitted ARIA roles Any DOM interface HTMLModElement ::: Attributes # ::: section-content This element's attributes include the global attributes.\ncite A URI for a resource that explains the change (for example, meeting minutes).\ndatetime This attribute indicates the time and date of the change and must be a valid date string with an optional time. If the value cannot be parsed as a date with an optional time string, the element does not have an associated timestamp. For the format of the string without a time, see Date strings. The format of the string if it includes both date and time is covered in Local date and time strings. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;\u0026lt;del\u0026gt;This text has been deleted\u0026lt;/del\u0026gt;, here is the rest of the paragraph.\u0026lt;/p\u0026gt; \u0026lt;del\u0026gt;\u0026lt;p\u0026gt;This paragraph has been deleted.\u0026lt;/p\u0026gt;\u0026lt;/del\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # ::: section-content The presence of the del element is not announced by most screen reading technology in its default configuration. It can be made to be announced by using the CSS content property, along with the ::before and ::after pseudo-elements.\n::: code-example [css]{.language-name}\ndel::before, del::after { clip-path: inset(100%); clip: rect(1px, 1px, 1px, 1px); height: 1px; overflow: hidden; position: absolute; white-space: nowrap; width: 1px; } del::before { content: \u0026#34; [deletion start] \u0026#34;; } del::after { content: \u0026#34; [deletion end] \u0026#34;; } :::\nSome people who use screen readers deliberately disable announcing content that creates extra verbosity. Because of this, it is important to not abuse this technique and only apply it in situations where not knowing content has been deleted would adversely affect understanding.\nShort note on making your mark (more accessible) | The Paciello Group{target=\u0026quot;_blank\u0026quot;} Tweaking Text Level Styles | Adrian Roselli{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-del-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet del 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 cite 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 datetime 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 :::\nSee also # ::: section-content\n\u0026lt;ins\u0026gt; element for insertions into a text \u0026lt;s\u0026gt; element for strikethrough separate from representing deletion of text ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/del{._attribution-link} :::\n"},{"id":83,"href":"/docs/references/languages/html/element/details/","title":"Details","section":"HTML","content":" \u0026lt;details\u0026gt;: The Details disclosure element # ::: section-content The \u0026lt;details\u0026gt; HTML element creates a disclosure widget in which information is visible only when the widget is toggled into an \u0026quot;open\u0026quot; state. A summary or label must be provided using the \u0026lt;summary\u0026gt; element.\nA disclosure widget is typically presented onscreen using a small triangle which rotates (or twists) to indicate open/closed status, with a label next to the triangle. The contents of the \u0026lt;summary\u0026gt; element are used as the label for the disclosure widget. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;details\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Details Something small enough to escape casual notice. ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} details { border: 1px solid #aaa; border-radius: 4px; padding: 0.5em 0.5em 0; }\nsummary { font-weight: bold; margin: -0.5em -0.5em 0; padding: 0.5em; } details[open] { padding: 0.5em; } details[open] summary { border-bottom: 1px solid #aaa; margin-bottom: 0.5em; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nA \u0026lt;details\u0026gt; widget can be in one of two states. The default closed state displays only the triangle and the label inside \u0026lt;summary\u0026gt; (or a user agent-defined default string if no \u0026lt;summary\u0026gt;).\nWhen the user clicks on the widget or focuses it then presses the space bar, it \u0026quot;twists\u0026quot; open, revealing its contents. The common use of a triangle which rotates or twists around to represent opening or closing the widget is why these are sometimes called \u0026quot;twisty\u0026quot;.\nYou can use CSS to style the disclosure widget, and you can programmatically open and close the widget by setting/removing its open attribute. Unfortunately, at this time, there's no built-in way to animate the transition between open and closed.\nBy default when closed, the widget is only tall enough to display the disclosure triangle and summary. When open, it expands to display the details contained within.\nFully standards-compliant implementations automatically apply the CSS display: list-item to the \u0026lt;summary\u0026gt; element. You can use this to customize its appearance further. See Customizing the disclosure widget for further details. :::\nAttributes # ::: section-content This element includes the global attributes.\nopen This Boolean attribute indicates whether the details \u0026mdash; that is, the contents of the \u0026lt;details\u0026gt; element \u0026mdash; are currently visible. The details are shown when this attribute exists, or hidden when this attribute is absent. By default this attribute is absent which means the details are not visible.\n::: {#sect1 .notecard .note} Note: You have to remove this attribute entirely to make the details hidden. open=\u0026quot;false\u0026quot; makes the details visible because this attribute is Boolean. ::: :::\nEvents # ::: section-content In addition to the usual events supported by HTML elements, the \u0026lt;details\u0026gt; element supports the toggle event, which is dispatched to the \u0026lt;details\u0026gt; element whenever its state changes between open and closed. It is sent after the state is changed, although if the state changes multiple times before the browser can dispatch the event, the events are coalesced so that only one is sent.\nYou can use an event listener for the toggle event to detect when the widget changes state:\n::: code-example [js]{.language-name}\ndetails.addEventListener(\u0026#34;toggle\u0026#34;, (event) =\u0026gt; { if (details.open) { /* the element was toggled open */ } else { /* the element was toggled closed */ } }); ::: :::\nExamples # A simple disclosure example # ::: section-content This example shows a simple \u0026lt;details\u0026gt; element with a \u0026lt;summary\u0026gt;.\n::: code-example [html]{.language-name}\n\u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;System Requirements\u0026lt;/summary\u0026gt; \u0026lt;p\u0026gt; Requires a computer running an operating system. The computer must have some memory and ideally some kind of long-term storage. An input device as well as some form of output device is recommended. \u0026lt;/p\u0026gt; \u0026lt;/details\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nCreating an open disclosure box # ::: section-content To start the \u0026lt;details\u0026gt; box in its open state, add the Boolean open attribute:\n::: code-example [html]{.language-name}\n\u0026lt;details open\u0026gt; \u0026lt;summary\u0026gt;System Requirements\u0026lt;/summary\u0026gt; \u0026lt;p\u0026gt; Requires a computer running an operating system. The computer must have some memory and ideally some kind of long-term storage. An input device as well as some form of output device is recommended. \u0026lt;/p\u0026gt; \u0026lt;/details\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nCustomizing the appearance # ::: section-content Now let's apply some CSS to customize the appearance of the disclosure box.\nCSS # ::: code-example [css]{.language-name}\ndetails { font: 16px \u0026#34;Open Sans\u0026#34;, Calibri, sans-serif; width: 620px; } details \u0026gt; summary { padding: 2px 6px; width: 15em; background-color: #ddd; border: none; box-shadow: 3px 3px 4px black; cursor: pointer; } details \u0026gt; p { border-radius: 0 0 10px 10px; background-color: #ddd; padding: 2px 6px; margin: 0; box-shadow: 3px 3px 4px black; } details[open] \u0026gt; summary { background-color: #ccf; } :::\nThis CSS creates a look similar to a tabbed interface, where clicking the tab opens it to reveal its contents.\nThe selector details[open] can be used to style the element which is open.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;System Requirements\u0026lt;/summary\u0026gt; \u0026lt;p\u0026gt; Requires a computer running an operating system. The computer must have some memory and ideally some kind of long-term storage. An input device as well as some form of output device is recommended. \u0026lt;/p\u0026gt; \u0026lt;/details\u0026gt; :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: ::: :::\nCustomizing the disclosure widget # ::: section-content The disclosure triangle itself can be customized, although this is not as broadly supported. There are variations in how browsers support this customization due to experimental implementations as the element was standardized, so we'll have to use multiple approaches for a while.\nThe \u0026lt;summary\u0026gt; element supports the list-style shorthand property and its longhand properties, such as list-style-type, to change the disclosure triangle to whatever you choose (usually with list-style-image). For example, we can remove the disclosure widget icon by setting list-style: none.\nCSS # ::: code-example [css]{.language-name}\ndetails { font: 16px \u0026#34;Open Sans\u0026#34;, Calibri, sans-serif; width: 620px; } details \u0026gt; summary { padding: 2px 6px; width: 15em; background-color: #ddd; border: none; box-shadow: 3px 3px 4px black; cursor: pointer; list-style: none; } details \u0026gt; p { border-radius: 0 0 10px 10px; background-color: #ddd; padding: 2px 6px; margin: 0; box-shadow: 3px 3px 4px black; } :::\nThis CSS creates a look similar to a tabbed interface, where activating the tab expands and opens it to reveal its contents.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;System Requirements\u0026lt;/summary\u0026gt; \u0026lt;p\u0026gt; Requires a computer running an operating system. The computer must have some memory and ideally some kind of long-term storage. An input device as well as some form of output device is recommended. \u0026lt;/p\u0026gt; \u0026lt;/details\u0026gt; :::\nResult # ::: {#sect5 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, sectioning root, interactive content, palpable content. Permitted content One \u0026lt;summary\u0026gt; element followed by flow content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Implicit ARIA role group Permitted ARIA roles No role permitted DOM interface HTMLDetailsElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-details-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Opera Safari Samsung Explorer Android Android Android Android on IOS Internet details 12 79 49 No 15 6 4.4 18 49 14 6 1.0\nBefore There is a Firefox 57, bug meaning there was a that bug meaning `\u0026lt;details\u0026gt;` that elements `\u0026lt;details\u0026gt;` can\\'t be elements made open by can\\'t be default using made open by the `open` default using attribute if the `open` they have a attribute if CSS they have a `animation` CSS active on `animation` them. active on them. name 120 120 No No No No No No No No No No\nopen 12 79 49 No 15 6 4.4 18 49 14 6 1.0 # :::\nSee also # ::: section-content\n\u0026lt;summary\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/details{._attribution-link} :::\n"},{"id":84,"href":"/docs/references/languages/html/element/dfn/","title":"Dfn","section":"HTML","content":" \u0026lt;dfn\u0026gt;: The Definition element # ::: section-content The \u0026lt;dfn\u0026gt; HTML element is used to indicate the term being defined within the context of a definition phrase or sentence. The ancestor \u0026lt;p\u0026gt; element, the \u0026lt;dt\u0026gt;/ \u0026lt;dd\u0026gt; pairing, or the nearest \u0026lt;section\u0026gt; ancestor of the \u0026lt;dfn\u0026gt; element, is considered to be the definition of the term. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;dfn\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} A validator is a program that checks for syntax errors in code or documents.\n::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} /* stylelint-disable-next-line block-no-empty */ dfn { } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element's attributes include the global attributes.\nThe title attribute has special meaning, as noted below. :::\nUsage notes # ::: section-content There are some not-entirely-obvious aspects to using the \u0026lt;dfn\u0026gt; element. We examine those here. :::\nSpecifying the term being defined # ::: section-content The term being defined is identified following these rules:\nIf the \u0026lt;dfn\u0026gt; element has a title attribute, the value of the title attribute is considered to be the term being defined. The element must still have text within it, but that text may be an abbreviation (perhaps using \u0026lt;abbr\u0026gt;) or another form of the term. If the \u0026lt;dfn\u0026gt; contains a single child element and does not have any text content of its own, and the child element is an \u0026lt;abbr\u0026gt; element with a title attribute itself, then the exact value of the \u0026lt;abbr\u0026gt; element's title is the term being defined. Otherwise, the text content of the \u0026lt;dfn\u0026gt; element is the term being defined. This is shown in the first example below. ::: {#sect1 .notecard .note} Note: If the \u0026lt;dfn\u0026gt; element has a title attribute, it must contain the term being defined and no other text. ::: :::\nLinks to \u0026lt;dfn\u0026gt; elements # ::: section-content If you include an id attribute on the \u0026lt;dfn\u0026gt; element, you can then link to it using \u0026lt;a\u0026gt; elements. Such links should be uses of the term, with the intent being that the reader can quickly navigate to the term's definition if they're not already aware of it, by clicking on the term's link.\nThis is shown in the example under Links to definitions below. :::\nExamples # ::: section-content Let's take a look at some examples of various usage scenarios. :::\nBasic identification of a term # ::: section-content This example uses a plain \u0026lt;dfn\u0026gt; element to identify the location of a term within the definition.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; The \u0026lt;strong\u0026gt;HTML Definition element (\u0026lt;dfn\u0026gt;\u0026amp;lt;dfn\u0026amp;gt;\u0026lt;/dfn\u0026gt;)\u0026lt;/strong\u0026gt; is used to indicate the term being defined within the context of a definition phrase or sentence. \u0026lt;/p\u0026gt; :::\nSince the \u0026lt;dfn\u0026gt; element has no title, the text contents of the \u0026lt;dfn\u0026gt; element itself are used as the term being defined.\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nLinks to definitions # ::: section-content To add links to the definitions, you create the link the same way you always do, with the \u0026lt;a\u0026gt; element.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; The \u0026lt;strong\u0026gt;HTML Definition element (\u0026lt;dfn id=\u0026#34;definition-dfn\u0026#34;\u0026gt;\u0026amp;lt;dfn\u0026amp;gt;\u0026lt;/dfn\u0026gt;)\u0026lt;/strong\u0026gt; is used to indicate the term being defined within the context of a definition phrase or sentence. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Graece donan, Latine voluptatem vocant. Confecta res esset. Duo Reges: constructio interrete. Scrupulum, inquam, abeunti; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Because of all of that, we decided to use the \u0026lt;code\u0026gt;\u0026lt;a href=\u0026#34;#definition-dfn\u0026#34;\u0026gt;\u0026amp;lt;dfn\u0026amp;gt;\u0026lt;/a\u0026gt;\u0026lt;/code\u0026gt; element for this project. \u0026lt;/p\u0026gt; :::\nHere we see the definition \u0026mdash; now with an id attribute, \u0026quot;definition-dfn\u0026quot;, which can be used as the target of a link. Later on, a link is created using \u0026lt;a\u0026gt; with the href attribute set to \u0026quot;#definition-dfn\u0026quot; to set up the link back to the definition.\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nUsing abbreviations and definitions together # ::: section-content In some cases, you may wish to use an abbreviation for a term when defining it. This can be done by using the \u0026lt;dfn\u0026gt; and \u0026lt;abbr\u0026gt; elements in tandem, like this:\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; The \u0026lt;dfn\u0026gt;\u0026lt;abbr title=\u0026#34;Hubble Space Telescope\u0026#34;\u0026gt;HST\u0026lt;/abbr\u0026gt;\u0026lt;/dfn\u0026gt; is among the most productive scientific instruments ever constructed. It has been in orbit for over 20 years, scanning the sky and returning data and photographs of unprecedented quality and detail. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Indeed, the \u0026lt;abbr title=\u0026#34;Hubble Space Telescope\u0026#34;\u0026gt;HST\u0026lt;/abbr\u0026gt; has arguably done more to advance science than any device ever built. \u0026lt;/p\u0026gt; :::\nNote the \u0026lt;abbr\u0026gt; element nested inside the \u0026lt;dfn\u0026gt;. The former establishes that the term is an abbreviation (\u0026quot;HST\u0026quot;) and specifies the full term (\u0026quot;Hubble Space Telescope\u0026quot;) in its title attribute. The latter indicates that the abbreviated term represents a term being defined.\nResult # ::: {#sect4 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content, but no \u0026lt;dfn\u0026gt; element must be a descendant. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role term Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-dfn-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet dfn 15 12 1 Yes 15 6 4.4 18 4 14 6 1.0 :::\nSee also # ::: section-content\nElements related to definition lists: \u0026lt;dl\u0026gt;, \u0026lt;dt\u0026gt;, \u0026lt;dd\u0026gt; \u0026lt;abbr\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn{._attribution-link} :::\n"},{"id":85,"href":"/docs/references/languages/html/element/dialog/","title":"Dialog","section":"HTML","content":" \u0026lt;dialog\u0026gt;: The Dialog element # ::: section-content The \u0026lt;dialog\u0026gt; HTML element represents a modal or non-modal dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow.\nThe HTML \u0026lt;dialog\u0026gt; element is used to create both modal and non-modal dialog boxes. Modal dialog boxes interrupt interaction with the rest of the page being inert, while non-modal dialog boxes allow interaction with the rest of the page.\nJavaScript should be used to display the \u0026lt;dialog\u0026gt; element. Use the .showModal() method to display a modal dialog and the .show() method to display a non-modal dialog. The dialog box can be closed using the .close() method or using the dialog method when submitting a \u0026lt;form\u0026gt; that is nested within the \u0026lt;dialog\u0026gt; element. Modal dialogs can also be closed by pressing the [Esc]{.kbd} key. :::\nAttributes # ::: section-content This element includes the global attributes.\n::: {#sect1 .notecard .warning} Warning: The tabindex attribute must not be used on the \u0026lt;dialog\u0026gt; element. :::\nopen Indicates that the dialog box is active and is available for interaction. If the open attribute is not set, the dialog box will not be visible to the user. It is recommended to use the .show() or .showModal() method to render dialogs, rather than the open attribute. If a \u0026lt;dialog\u0026gt; is opened using the open attribute, it is non-modal.\n::: {#sect2 .notecard .note} Note: While you can toggle between the open and closed states of non-modal dialog boxes by toggling the presence of the open attribute, this approach is not recommended. ::: :::\nUsage notes # ::: section-content\nHTML \u0026lt;form\u0026gt; elements can be used to close a dialog box if they have the attribute method=\u0026quot;dialog\u0026quot; or if the button used to submit the form has formmethod=\u0026quot;dialog\u0026quot; set. When a \u0026lt;form\u0026gt; within a \u0026lt;dialog\u0026gt; is submitted via the dialog method, the dialog box closes, the states of the form controls are saved but not submitted, and the returnValue property gets set to the value of the button that was activated. The CSS ::backdrop pseudo-element can be used to style the backdrop of a modal dialog, which is displayed behind the \u0026lt;dialog\u0026gt; element when the dialog is displayed using the HTMLDialogElement.showModal() method. For example, you can use this pseudo-element to obfuscate the inert content behind the modal dialog. The autofocus attribute should be added to the element with which the user is expected to interact immediately on opening a modal dialog. If there is no element involving immediate interaction, the autofocus attribute can be added to the \u0026lt;dialog\u0026gt; element itself. ::: Examples # Caveats of creating a dialog using only HTML # ::: section-content This example demonstrates the create a non-modal dialog by using only HTML. Because of the boolean open attribute in the \u0026lt;dialog\u0026gt; element, the dialog appears open when the page loads. The dialog can be closed by clicking the \u0026quot;OK\u0026quot; button because the method attribute in the \u0026lt;form\u0026gt; element is set to \u0026quot;dialog\u0026quot;. In this case, no JavaScript is needed to close the form.\n::: code-example [html]{.language-name}\n\u0026lt;dialog open\u0026gt; \u0026lt;p\u0026gt;Greetings, one and all!\u0026lt;/p\u0026gt; \u0026lt;form method=\u0026#34;dialog\u0026#34;\u0026gt; \u0026lt;button\u0026gt;OK\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/dialog\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: :::\nThis dialog is initially open because of the presence of the open attribute. Dialogs that are displayed using the open attribute are non-modal. You may notice that after clicking \u0026quot;OK\u0026quot;, the dialog gets dismissed leaving the Result frame empty. When the dialog is dismissed, there is no method provided to reopen it. For this reason, the preferred method to display non-modal dialogs is by using the HTMLDialogElement.show() method. It is possible to toggle the display of the dialog by adding or removing the boolean open attribute, but it is not the recommended practice. :::\nCreating a modal dialog # ::: section-content This example demonstrates a modal dialog with a gradient backdrop. The .showModal() method opens the modal dialog when the \u0026quot;Show the dialog\u0026quot; button is activated. The dialog can be closed by pressing the [Esc]{.kbd} key or via the close() method when the \u0026quot;Close\u0026quot; button within the dialog is activated.\nWhen a dialog opens, the browser, by default, gives focus to the first element that can be focused within the dialog. In this example, the autofocus attribute is applied to the \u0026quot;Close\u0026quot; button, giving it focus when the dialog opens, as this is the element we expect the user will interact with immediately after the dialog opens.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;dialog\u0026gt; \u0026lt;button autofocus\u0026gt;Close\u0026lt;/button\u0026gt; \u0026lt;p\u0026gt;This modal dialog has a groovy backdrop!\u0026lt;/p\u0026gt; \u0026lt;/dialog\u0026gt; \u0026lt;button\u0026gt;Show the dialog\u0026lt;/button\u0026gt; :::\nCSS # We can style the backdrop of the dialog by using the ::backdrop pseudo-element.\n::: code-example [css]{.language-name}\n::backdrop { background-image: linear-gradient( 45deg, magenta, rebeccapurple, dodgerblue, green ); opacity: 0.75; } :::\nJavaScript # The dialog is opened modally using the .showModal() method and closed using the .close() method.\n::: code-example [js]{.language-name}\nconst dialog = document.querySelector(\u0026#34;dialog\u0026#34;); const showButton = document.querySelector(\u0026#34;dialog + button\u0026#34;); const closeButton = document.querySelector(\u0026#34;dialog button\u0026#34;); // \u0026#34;Show the dialog\u0026#34; button opens the dialog modally showButton.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { dialog.showModal(); }); // \u0026#34;Close\u0026#34; button closes the dialog closeButton.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { dialog.close(); }); :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: :::\nWhen the modal dialog is displayed, it appears above any other dialogs that might be present. Everything outside the modal dialog is inert and interactions outside the dialog are blocked. Notice that when the dialog is open, with the exception of the dialog itself, interaction with the document is not possible; the \u0026quot;Show the dialog\u0026quot; button is mostly obfuscated by the almost opaque backdrop of the dialog and is inert. :::\nHandling the return value from the dialog # ::: section-content This example demonstrates the returnValue of the \u0026lt;dialog\u0026gt; element and how to close a modal dialog by using a form. By default, the returnValue is the empty string or the value of the button that submits the form within the \u0026lt;dialog\u0026gt; element, if there is one.\nThis example opens a modal dialog when the \u0026quot;Show the dialog\u0026quot; button is activated. The dialog contains a form with a \u0026lt;select\u0026gt; and two \u0026lt;button\u0026gt; elements, which default to type=\u0026quot;submit\u0026quot;. An eventlistener updates the value of the \u0026quot;Confirm\u0026quot; button when the select option changes. If the \u0026quot;Confirm\u0026quot; button is activated to close the dialog, the current value of the button is the return value. If the dialog is closed by pressing the \u0026quot;Cancel\u0026quot; button, the returnValue is cancel.\nWhen the dialog is closed, the return value is displayed under the \u0026quot;Show the dialog\u0026quot; button. If the dialog is closed by pressing the [Esc]{.kbd} key, the returnValue is not updated and the close event doesn't occur so the text in the \u0026lt;output\u0026gt; is not updated.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;!-- A modal dialog containing a form --\u0026gt; \u0026lt;dialog id=\u0026#34;favDialog\u0026#34;\u0026gt; \u0026lt;form\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label\u0026gt; Favorite animal: \u0026lt;select\u0026gt; \u0026lt;option value=\u0026#34;default\u0026#34;\u0026gt;Choose…\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Brine shrimp\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Red panda\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Spider monkey\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;button value=\u0026#34;cancel\u0026#34; formmethod=\u0026#34;dialog\u0026#34;\u0026gt;Cancel\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;confirmBtn\u0026#34; value=\u0026#34;default\u0026#34;\u0026gt;Confirm\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/dialog\u0026gt; \u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;showDialog\u0026#34;\u0026gt;Show the dialog\u0026lt;/button\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;output\u0026gt;\u0026lt;/output\u0026gt; :::\nJavaScript # ::: code-example [js]{.language-name}\nconst showButton = document.getElementById(\u0026#34;showDialog\u0026#34;); const favDialog = document.getElementById(\u0026#34;favDialog\u0026#34;); const outputBox = document.querySelector(\u0026#34;output\u0026#34;); const selectEl = favDialog.querySelector(\u0026#34;select\u0026#34;); const confirmBtn = favDialog.querySelector(\u0026#34;#confirmBtn\u0026#34;); // \u0026#34;Show the dialog\u0026#34; button opens the \u0026lt;dialog\u0026gt; modally showButton.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { favDialog.showModal(); }); // \u0026#34;Favorite animal\u0026#34; input sets the value of the submit button selectEl.addEventListener(\u0026#34;change\u0026#34;, (e) =\u0026gt; { confirmBtn.value = selectEl.value; }); // \u0026#34;Cancel\u0026#34; button closes the dialog without submitting because of [formmethod=\u0026#34;dialog\u0026#34;], triggering a close event. favDialog.addEventListener(\u0026#34;close\u0026#34;, (e) =\u0026gt; { outputBox.value = favDialog.returnValue === \u0026#34;default\u0026#34; ? \u0026#34;No return value.\u0026#34; : `ReturnValue: ${favDialog.returnValue}.`; // Have to check for \u0026#34;default\u0026#34; rather than empty string }); // Prevent the \u0026#34;confirm\u0026#34; button from the default behavior of submitting the form, and close the dialog with the `close()` method, which triggers the \u0026#34;close\u0026#34; event. confirmBtn.addEventListener(\u0026#34;click\u0026#34;, (event) =\u0026gt; { event.preventDefault(); // We don\u0026#39;t want to submit this fake form favDialog.close(selectEl.value); // Have to send the select box value here. }); ::: :::\nResult # ::: section-content ::: {#sect5 .code-example} ::: iframe ::: :::\nThis example demonstrates the following three methods of closing modal dialogs:\nBy submitting the form within the dialog form using the dialog method (as seen in the HTML-only example). By pressing the [Esc]{.kbd} key. By calling the HTMLDialogElement.close() method (as seen in the modal example. In this example, the \u0026quot;Cancel\u0026quot; button closes the dialog via the dialog form method and the \u0026quot;Confirm\u0026quot; button closes the dialog via the HTMLDialogElement.close() method. The \u0026quot;Cancel\u0026quot; button includes the formmethod=\u0026quot;dialog\u0026quot; attribute, which overrides the \u0026lt;form\u0026gt;'s default GET method. When a form's method is dialog, the state of the form is saved but not submitted, and the dialog gets closed.\nWithout an action, submitting the form via the default GET method causes a page to reload. We use JavaScript to prevent the submission and close the dialog with the event.preventDefault() and HTMLDialogElement.close() methods, respectively.\nIt is important to provide a closing mechanism within every dialog element. The [Esc]{.kbd} key does not close non-modal dialogs by default, nor can one assume that a user will even have access to a physical keyboard (e.g., someone using a touch screen device without access to a keyboard). :::\nTechnical summary # ::: section-content\nContent categories Flow content, sectioning root Permitted content Flow content Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content Implicit ARIA role dialog Permitted ARIA roles alertdialog DOM interface HTMLDialogElement ::: Accessibility considerations # ::: section-content When implementing a dialog, it is important to consider the most appropriate place to set user focus. When using HTMLDialogElement.showModal() to open a \u0026lt;dialog\u0026gt;, focus is set on the first nested focusable element. Explicitly indicating the initial focus placement by using the autofocus attribute will help ensure initial focus is set on the element deemed the best initial focus placement for any particular dialog. When in doubt, as it may not always be known where initial focus could be set within a dialog, particularly for instances where a dialog's content is dynamically rendered when invoked, the \u0026lt;dialog\u0026gt; element itself may provide the best initial focus placement.\nEnsure a mechanism is provided to allow users to close the dialog. The most robust way to ensure that all users can close the dialog is to include an explicit button to do so, such as a confirmation, cancellation, or close button.\nBy default, a dialog invoked by the showModal() method can be dismissed by pressing the [Esc]{.kbd} key. A non-modal dialog does not dismiss via the [Esc]{.kbd} key by default, and depending on what the non-modal dialog represents, it may not be desired for this behavior. Keyboard users expect the [Esc]{.kbd} key to close modal dialogs; ensure that this behavior is implemented and maintained. If multiple modal dialogs are open, pressing the [Esc]{.kbd} key should close only the last shown dialog. When using \u0026lt;dialog\u0026gt;, this behavior is provided by the browser.\nWhile dialogs can be created using other elements, the native \u0026lt;dialog\u0026gt; element provides usability and accessibility features that must be replicated if you use other elements for a similar purpose. If you're creating a custom dialog implementation, ensure that all expected default behaviors are supported and proper labeling recommendations are followed.\nThe \u0026lt;dialog\u0026gt; element is exposed by browsers in a manner similar to custom dialogs that use the ARIA role=\u0026quot;dialog\u0026quot; attribute. \u0026lt;dialog\u0026gt; elements invoked by the showModal() method implicitly have aria-modal=\u0026quot;true\u0026quot;, whereas \u0026lt;dialog\u0026gt; elements invoked by the show() method or displayed using the open attribute or by changing the default display of a \u0026lt;dialog\u0026gt; are exposed as [aria-modal=\u0026quot;false\u0026quot;]. When implementing modal dialogs, everything other than the \u0026lt;dialog\u0026gt; and its contents should be rendered inert using the inert attribute. When using \u0026lt;dialog\u0026gt; along with the HTMLDialogElement.showModal() method, this behavior is provided by the browser. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-dialog-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet dialog 37 79 98 No 24 15.4 37 37 98 24 15.4 3.0 open 37 79 98 No 24 15.4 37 37 98 24 15.4 3.0 :::\nSee also # ::: section-content\nHTMLDialogElement interface close event cancel event open property of the HTMLDialogElement interface inert global attribute for HTML elements ::backdrop CSS pseudo-element Web forms in the Learn area ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog{._attribution-link} :::\n"},{"id":86,"href":"/docs/references/languages/html/element/dir/","title":"Dir","section":"HTML","content":" \u0026lt;dir\u0026gt;: The Directory element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;dir\u0026gt; HTML element is used as a container for a directory of files and/or folders, potentially with styles and icons applied by the user agent. Do not use this obsolete element; instead, you should use the \u0026lt;ul\u0026gt; element for lists, including lists of files.\n::: {#sect2 .notecard .warning} Warning: Do not use this element. Though present in early HTML specifications, it has been deprecated in HTML 4, and has since been removed entirely. No major browsers support this element. ::: :::\nDOM interface # ::: section-content This element implements the [HTMLDirectoryElement]{.page-not-created} interface. :::\nAttributes # ::: section-content Like all other HTML elements, this element supports the global attributes.\ncompact [Deprecated]{.visually-hidden} This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent and it doesn't work in all browsers. :::\nSpecifications # ::: section-content Not part of any current specifications. :::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet dir 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 compact 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 :::\nSee also # ::: section-content\nOther list-related HTML Elements: \u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt;, \u0026lt;li\u0026gt;, and \u0026lt;menu\u0026gt;; CSS properties that may be specially useful to style the \u0026lt;dir\u0026gt; element: The list-style property, useful to choose the way the ordinal is displayed. CSS counters, useful to handle complex nested lists. The line-height property, useful to simulate the deprecated compact attribute. The margin property, useful to control the indent of the list. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/dir{._attribution-link} :::\n"},{"id":87,"href":"/docs/references/languages/html/element/div/","title":"Div","section":"HTML","content":" \u0026lt;div\u0026gt;: The Content Division element # ::: section-content The `` HTML element is the generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g. styling is directly applied to it, or some kind of layout model like Flexbox is applied to its parent element). :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;div\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Beware of the leopard\n::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} .warning { border: 10px ridge #f00; background-color: #ff0; padding: 0.5rem; display: flex; flex-direction: column; }\n.warning img { width: 100%; } .warning p { font: small-caps bold 1.2rem sans-serif; text-align: center; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nAs a \u0026quot;pure\u0026quot; container, the `` element does not inherently represent anything. Instead, it's used to group content so it can be easily styled using the class or id attributes, marking a section of a document as being written in a different language (using the lang attribute), and so on. :::\nAttributes # ::: section-content This element includes the global attributes.\n::: {#sect1 .notecard .note} Note: The align attribute is obsolete; do not use it anymore. Instead, you should use CSS properties or techniques such as CSS Grid or CSS Flexbox to align and position `` elements on the page. ::: :::\nUsage notes # ::: section-content\nThe `` element should be used only when no other semantic element (such as \u0026lt;article\u0026gt; or \u0026lt;nav\u0026gt;) is appropriate. ::: Accessibility concerns # ::: section-content The `` element has an implicit role of generic{target=\u0026quot;_blank\u0026quot;}, and not none. This may affect certain ARIA combination declarations that expect a direct descendant element with a certain role to function properly. :::\nExamples # A simple example # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; Any kind of content here. Such as \u0026amp;lt;p\u0026amp;gt;, \u0026amp;lt;table\u0026amp;gt;. You name it! \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nA styled example # ::: section-content This example creates a shadowed box by applying a style to the using CSS. Note the use of the [`class`](../global_attributes#class) attribute on the to apply the style named \u0026quot;shadowbox\u0026quot; to the element.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;div class=\u0026#34;shadowbox\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Here\u0026#39;s a very interesting note displayed in a lovely shadowed box.\u0026lt;/p\u0026gt; :::\nCSS # ::: code-example [css]{.language-name}\n.shadowbox { width: 15em; border: 1px solid #333; box-shadow: 8px 8px 5px #444; padding: 8px 12px; background-image: linear-gradient(180deg, #fff, #ddd 40%, #ccc); } :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, palpable content. Permitted content Flow content.\nOr (in WHATWG HTML): If the parent is a \u0026lt;dl\u0026gt; element: one or more \u0026lt;dt\u0026gt; elements followed by one or more \u0026lt;dd\u0026gt; elements, optionally intermixed with \u0026lt;script\u0026gt; and \u0026lt;template\u0026gt; elements. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content.\nOr (in WHATWG HTML): \u0026lt;dl\u0026gt; element. Implicit ARIA role generic Permitted ARIA roles Any DOM interface HTMLDivElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-div-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet div 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 align 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 :::\nSee also # ::: section-content\nSemantic sectioning elements: \u0026lt;section\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt; \u0026lt;span\u0026gt; element for styling of phrasing content ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/div{._attribution-link} :::\n"},{"id":88,"href":"/docs/references/languages/html/element/dl/","title":"Dl","section":"HTML","content":" \u0026lt;dl\u0026gt;: The Description List element # ::: section-content The \u0026lt;dl\u0026gt; HTML element represents a description list. The element encloses a list of groups of terms (specified using the \u0026lt;dt\u0026gt; element) and descriptions (provided by \u0026lt;dd\u0026gt; elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs). :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;dl\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Cryptids of Cornwall:\n\u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;Beast of Bodmin\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;A large feline inhabiting Bodmin Moor.\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Morgawr\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;A sea serpent.\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Owlman\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;A giant owl-like creature.\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p, dt { font-weight: bold; }\ndl, dd { font-size: 0.9rem; } dd { margin-bottom: 1em; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nContent categories Flow content, and if the \u0026lt;dl\u0026gt; element's children include one name-value group, palpable content. Permitted content Either: Zero or more groups each consisting of one or more \u0026lt;dt\u0026gt; elements followed by one or more \u0026lt;dd\u0026gt; elements, optionally intermixed with \u0026lt;script\u0026gt; and \u0026lt;template\u0026gt; elements.\nOr: (in WHATWG HTML, W3C HTML 5.2 and later) One or more \u0026lt;div\u0026gt; elements, optionally intermixed with \u0026lt;script\u0026gt; and \u0026lt;template\u0026gt; elements.\nTag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Implicit ARIA role No corresponding role Permitted ARIA roles group, list, none, presentation DOM interface HTMLDListElement ::: Attributes # ::: section-content This element only includes the global attributes. :::\nExamples # Single term and description # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;Firefox\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt; A free, open source, cross-platform, graphical web browser developed by the Mozilla Corporation and hundreds of volunteers. \u0026lt;/dd\u0026gt; \u0026lt;!-- Other terms and descriptions --\u0026gt; \u0026lt;/dl\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nMultiple terms, single description # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;Firefox\u0026lt;/dt\u0026gt; \u0026lt;dt\u0026gt;Mozilla Firefox\u0026lt;/dt\u0026gt; \u0026lt;dt\u0026gt;Fx\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt; A free, open source, cross-platform, graphical web browser developed by the Mozilla Corporation and hundreds of volunteers. \u0026lt;/dd\u0026gt; \u0026lt;!-- Other terms and descriptions --\u0026gt; \u0026lt;/dl\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nSingle term, multiple descriptions # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;Firefox\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt; A free, open source, cross-platform, graphical web browser developed by the Mozilla Corporation and hundreds of volunteers. \u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt; The Red Panda also known as the Lesser Panda, Wah, Bear Cat or Firefox, is a mostly herbivorous mammal, slightly larger than a domestic cat (60 cm long). \u0026lt;/dd\u0026gt; \u0026lt;!-- Other terms and descriptions --\u0026gt; \u0026lt;/dl\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nMultiple terms and descriptions # ::: section-content It is also possible to define multiple terms with multiple corresponding descriptions, by combining the examples above. :::\nMetadata # ::: section-content Description lists are useful for displaying metadata as a list of key-value pairs.\n::: code-example [html]{.language-name}\n\u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;Name\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;Godzilla\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Born\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;1952\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Birthplace\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;Japan\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Color\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;Green\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: :::\nTip: It can be handy to define a key-value separator in the CSS, such as:\n::: code-example [css]{.language-name}\ndt::after { content: \u0026#34;: \u0026#34;; } ::: :::\nWrapping name-value groups in div elements # ::: section-content WHATWG HTML allows wrapping each name-value group in a \u0026lt;dl\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} element in a `` element. This can be useful when using microdata, or when global attributes apply to a whole group, or for styling purposes.\n::: code-example [html]{.language-name}\n\u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;Name\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;Godzilla\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Born\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;1952\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Birthplace\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;Japan\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Color\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;Green\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; :::\nResult # ::: {#sect5 .code-example} ::: iframe ::: ::: :::\nNotes # ::: section-content Do not use this element (nor \u0026lt;ul\u0026gt; elements) to merely create indentation on a page. Although it works, this is a bad practice and obscures the meaning of description lists.\nTo change the indentation of a description term, use the CSS margin property. :::\nAccessibility concerns # ::: section-content Each screen reader exposes \u0026lt;dl\u0026gt; content differently, including total count, terms/definitions context, and navigation methods. These differences are not necessarily bugs. As of iOS 14, VoiceOver will announce that \u0026lt;dl\u0026gt; content is a list when navigating with the virtual cursor (not via the read-all command). VoiceOver does not support list navigation commands with \u0026lt;dl\u0026gt;. Be careful applying ARIA term and definition roles to \u0026lt;dl\u0026gt; constructs as VoiceOver (macOS and iOS) will adjust how they are announced.\nVoiceOver on iOS 14 Supports Description Lists{target=\u0026quot;_blank\u0026quot;} Brief Note on Description List Support{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-dl-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet dl 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\n\u0026lt;dt\u0026gt; \u0026lt;dd\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl{._attribution-link} :::\n"},{"id":89,"href":"/docs/references/languages/html/element/dt/","title":"Dt","section":"HTML","content":" \u0026lt;dt\u0026gt;: The Description Term element # ::: section-content The \u0026lt;dt\u0026gt; HTML element specifies a term in a description or definition list, and as such must be used inside a \u0026lt;dl\u0026gt; element. It is usually followed by a \u0026lt;dd\u0026gt; element; however, multiple \u0026lt;dt\u0026gt; elements in a row indicate several terms that are all defined by the immediate next \u0026lt;dd\u0026gt; element.\nThe subsequent \u0026lt;dd\u0026gt; (Description Details) element provides the definition or other related text associated with the term specified using \u0026lt;dt\u0026gt;. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;dt\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Please use the following paint colors for the new house:\n\u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;Denim (semigloss finish)\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;Ceiling\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Denim (eggshell finish)\u0026lt;/dt\u0026gt; \u0026lt;dt\u0026gt;Evening Sky (eggshell finish)\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;Layered on the walls\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p, dl { font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ndl \u0026gt; dt { font-weight: normal; font-style: oblique; } dd { margin-bottom: 1rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nExamples # ::: section-content For examples, see the examples provided for the \u0026lt;dl\u0026gt; element. :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content Flow content, but with no \u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt;, sectioning content or heading content descendants. Tag omission The start tag is required. The end tag may be omitted if this element is immediately followed by another \u0026lt;dt\u0026gt; element or a \u0026lt;dd\u0026gt; element, or if there is no more content in the parent element. Permitted parents A \u0026lt;dl\u0026gt; or (in WHATWG HTML, W3C HTML 5.2 and later) a \u0026lt;div\u0026gt; that is a child of a \u0026lt;dl\u0026gt;.\nThis element can be used before a \u0026lt;dd\u0026gt; or another \u0026lt;dt\u0026gt; element. Implicit ARIA role No corresponding role Permitted ARIA roles listitem DOM interface HTMLElement Up to Gecko 1.9.2 (Firefox 4) inclusive, Firefox implements the HTMLSpanElement interface for this element. ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-dt-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet dt 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\n\u0026lt;dl\u0026gt; \u0026lt;dd\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt{._attribution-link} :::\n"},{"id":90,"href":"/docs/references/languages/html/element/em/","title":"Em","section":"HTML","content":" \u0026lt;em\u0026gt;: The Emphasis element # ::: section-content The \u0026lt;em\u0026gt; HTML element marks text that has stress emphasis. The \u0026lt;em\u0026gt; element can be nested, with each level of nesting indicating a greater degree of emphasis. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;em\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Get out of bed now!\n\u0026lt;p\u0026gt;We \u0026lt;em\u0026gt;had\u0026lt;/em\u0026gt; to do something about it.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;This is \u0026lt;em\u0026gt;not\u0026lt;/em\u0026gt; a drill!\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} /* stylelint-disable-next-line block-no-empty */ em { } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content The \u0026lt;em\u0026gt; element is for words that have a stressed emphasis compared to surrounding text, which is often limited to a word or words of a sentence and affects the meaning of the sentence itself.\nTypically this element is displayed in italic type. However, it should not be used to apply italic styling; use the CSS font-style property for that purpose. Use the \u0026lt;cite\u0026gt; element to mark the title of a work (book, play, song, etc.). Use the \u0026lt;i\u0026gt; element to mark text that is in an alternate tone or mood, which covers many common situations for italics such as scientific names or words in other languages. Use the \u0026lt;strong\u0026gt; element to mark text that has greater importance than surrounding text. :::\n\u0026lt;i\u0026gt; vs. \u0026lt;em\u0026gt; # ::: section-content Some developers may be confused by how multiple elements seemingly produce similar visual results. \u0026lt;em\u0026gt; and \u0026lt;i\u0026gt; are a common example, since they both italicize text. What's the difference? Which should you use?\nBy default, the visual result is the same. However, the semantic meaning is different. The \u0026lt;em\u0026gt; element represents stress emphasis of its contents, while the \u0026lt;i\u0026gt; element represents text that is set off from the normal prose, such as a foreign word, fictional character thoughts, or when the text refers to the definition of a word instead of representing its semantic meaning. (The title of a work, such as the name of a book or movie, should use \u0026lt;cite\u0026gt;.)\nThis means the right one to use depends on the situation. Neither is for purely decorative purposes, that's what CSS styling is for.\nAn example for \u0026lt;em\u0026gt; could be: \u0026quot;Just do it already!\u0026quot;, or: \u0026quot;We had to do something about it\u0026quot;. A person or software reading the text would pronounce the words in italics with an emphasis, using verbal stress.\nAn example for \u0026lt;i\u0026gt; could be: \u0026quot;The Queen Mary sailed last night\u0026quot;. Here, there is no added emphasis or importance on the word \u0026quot;Queen Mary\u0026quot;. It is merely indicated that the object in question is not a queen named Mary, but a ship named Queen Mary. Another example for \u0026lt;i\u0026gt; could be: \u0026quot;The word the is an article\u0026quot;. :::\nExamples # ::: section-content In this example, the \u0026lt;em\u0026gt; element is used to highlight an implicit or explicit contrast between two ingredient lists:\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; Ice cream is made with milk, sweetener, and cream. Frozen custard, on the other hand, is made of milk, cream, sweetener, and \u0026lt;em\u0026gt;egg yolks\u0026lt;/em\u0026gt;. \u0026lt;/p\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role emphasis Permitted ARIA roles Any DOM interface HTMLElement Up to Gecko 1.9.2 (Firefox 4) inclusive, Firefox implements the HTMLSpanElement interface for this element. ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-em-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet em 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\n\u0026lt;i\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/em{._attribution-link} :::\n"},{"id":91,"href":"/docs/references/languages/html/element/embed/","title":"Embed","section":"HTML","content":" \u0026lt;embed\u0026gt;: The Embed External Content element # ::: section-content The \u0026lt;embed\u0026gt; HTML element embeds external content at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;embed\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\n::: {#sect1 .notecard .note} Note: This topic documents only the element that is defined as part of the HTML Living Standard{target=\u0026quot;_blank\u0026quot;}. It does not address earlier, non-standardized implementation of the element. :::\nKeep in mind that most modern browsers have deprecated and removed support for browser plug-ins, so relying upon \u0026lt;embed\u0026gt; is generally not wise if you want your site to be operable on the average user's browser. :::\nAttributes # ::: section-content This element's attributes include the global attributes.\nheight The displayed height of the resource, in CSS pixels{target=\u0026quot;_blank\u0026quot;}. This must be an absolute value; percentages are not allowed.\nsrc The URL of the resource being embedded.\ntype The MIME type to use to select the plug-in to instantiate.\nwidth The displayed width of the resource, in CSS pixels{target=\u0026quot;_blank\u0026quot;}. This must be an absolute value; percentages are not allowed. :::\nUsage notes # ::: section-content You can use the object-position property to adjust the positioning of the embedded object within the element's frame, and the object-fit property to control how the object's size is adjusted to fit within the frame. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;embed type=\u0026#34;video/quicktime\u0026#34; src=\u0026#34;movie.mov\u0026#34; width=\u0026#34;640\u0026#34; height=\u0026#34;480\u0026#34; title=\u0026#34;Title of my video\u0026#34; /\u0026gt; ::: :::\nAccessibility concerns # ::: section-content Use the title attribute on an embed element to label its content so that people navigating with assistive technology such as a screen reader can understand what it contains. The title's value should concisely describe the embedded content. Without a title, they may not be able to determine what its embedded content is. This context shift can be confusing and time-consuming, especially if the embed element contains interactive content like video or audio. :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, embedded content, interactive content, palpable content. Permitted content None; it is a void element. Tag omission Must have a start tag, and must not have an end tag. Permitted parents Any element that accepts embedded content. Implicit ARIA role No corresponding role Permitted ARIA roles application, document, img, none, presentation DOM interface HTMLEmbedElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-embed-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet embed 1 12 1 Yes ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 align 1 79 1 No ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 height 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 name 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 src 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 type 1 79 1 No ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 width 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 :::\nSee also # ::: section-content\nOther elements that are used for embedding content of various types include \u0026lt;audio\u0026gt;, \u0026lt;canvas\u0026gt;, \u0026lt;iframe\u0026gt;, \u0026lt;img\u0026gt;, \u0026lt;math\u0026gt;, \u0026lt;object\u0026gt;, \u0026lt;svg\u0026gt;, and \u0026lt;video\u0026gt;. Positioning and sizing the embedded content within its frame: object-position and object-fit ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed{._attribution-link} :::\n"},{"id":92,"href":"/docs/references/languages/html/element/fieldset/","title":"Fieldset","section":"HTML","content":" \u0026lt;fieldset\u0026gt;: The Field Set element # ::: section-content The \u0026lt;fieldset\u0026gt; HTML element is used to group several controls as well as labels ( \u0026lt;label\u0026gt;) within a web form. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;fieldset\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Choose your favorite monster\n\u0026lt;input type=\u0026quot;radio\u0026quot; id=\u0026quot;kraken\u0026quot; name=\u0026quot;monster\u0026quot; value=\u0026quot;K\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;kraken\u0026quot;\u0026gt;Kraken\u0026lt;/label\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input type=\u0026quot;radio\u0026quot; id=\u0026quot;sasquatch\u0026quot; name=\u0026quot;monster\u0026quot; value=\u0026quot;S\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;sasquatch\u0026quot;\u0026gt;Sasquatch\u0026lt;/label\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input type=\u0026quot;radio\u0026quot; id=\u0026quot;mothman\u0026quot; name=\u0026quot;monster\u0026quot; value=\u0026quot;M\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;mothman\u0026quot;\u0026gt;Mothman\u0026lt;/label\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} legend { background-color: #000; color: #fff; padding: 3px 6px; }\ninput { margin: 0.4rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nAs the example above shows, the \u0026lt;fieldset\u0026gt; element provides a grouping for a part of an HTML form, with a nested \u0026lt;legend\u0026gt; element providing a caption for the \u0026lt;fieldset\u0026gt;. It takes few attributes, the most notable of which are form, which can contain the id of a \u0026lt;form\u0026gt; on the same page, allowing you to make the \u0026lt;fieldset\u0026gt; part of that \u0026lt;form\u0026gt; even if it is not nested inside it, and disabled, which allows you to disable the \u0026lt;fieldset\u0026gt; and all its contents in one go. :::\nAttributes # ::: section-content This element includes the global attributes.\ndisabled If this Boolean attribute is set, all form controls that are descendants of the \u0026lt;fieldset\u0026gt;, are disabled, meaning they are not editable and won't be submitted along with the \u0026lt;form\u0026gt;. They won't receive any browsing events, like mouse clicks or focus-related events. By default browsers display such controls grayed out. Note that form elements inside the \u0026lt;legend\u0026gt; element won't be disabled.\nform This attribute takes the value of the id attribute of a \u0026lt;form\u0026gt; element you want the \u0026lt;fieldset\u0026gt; to be part of, even if it is not inside the form. Please note that usage of this is confusing \u0026mdash; if you want the \u0026lt;input\u0026gt; elements inside the \u0026lt;fieldset\u0026gt; to be associated with the form, you need to use the form attribute directly on those elements. You can check which elements are associated with a form via JavaScript, using HTMLFormElement.elements.\nname The name associated with the group.\n::: {#sect1 .notecard .note} Note: The caption for the fieldset is given by the first \u0026lt;legend\u0026gt; element nested inside it. ::: :::\nStyling with CSS # ::: section-content There are several special styling considerations for \u0026lt;fieldset\u0026gt;.\nIts display value is block by default, and it establishes a block formatting context. If the \u0026lt;fieldset\u0026gt; is styled with an inline-level display value, it will behave as inline-block, otherwise it will behave as block. By default there is a 2px groove border surrounding the contents, and a small amount of default padding. The element has min-inline-size: min-content by default.\nIf a \u0026lt;legend\u0026gt; is present, it is placed over the block-start border. The \u0026lt;legend\u0026gt; shrink-wraps, and also establishes a formatting context. The display value is blockified. (For example, display: inline behaves as block.)\nThere will be an anonymous box holding the contents of the \u0026lt;fieldset\u0026gt;, which inherits certain properties from the \u0026lt;fieldset\u0026gt;. If the \u0026lt;fieldset\u0026gt; is styled with display: grid or display: inline-grid, then the anonymous box will be a grid formatting context. If the \u0026lt;fieldset\u0026gt; is styled with display: flex or display: inline-flex, then the anonymous box will be a flex formatting context. Otherwise, it establishes a block formatting context.\nYou can feel free to style the \u0026lt;fieldset\u0026gt; and \u0026lt;legend\u0026gt; in any way you want to suit your page design. :::\nExamples # Simple fieldset # ::: section-content This example shows a really simple \u0026lt;fieldset\u0026gt; example, with a \u0026lt;legend\u0026gt;, and a single control inside it.\n::: code-example [html]{.language-name}\n\u0026lt;form action=\u0026#34;#\u0026#34;\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Do you agree?\u0026lt;/legend\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;chbx\u0026#34; name=\u0026#34;agree\u0026#34; value=\u0026#34;Yes!\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;chbx\u0026#34;\u0026gt;I agree\u0026lt;/label\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nDisabled fieldset # ::: section-content This example shows a disabled \u0026lt;fieldset\u0026gt; with two controls inside it. Note how both the controls are disabled due to being inside a disabled \u0026lt;fieldset\u0026gt;.\n::: code-example [html]{.language-name}\n\u0026lt;form action=\u0026#34;#\u0026#34;\u0026gt; \u0026lt;fieldset disabled\u0026gt; \u0026lt;legend\u0026gt;Disabled login fieldset\u0026lt;/legend\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Name: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name\u0026#34; value=\u0026#34;Chris\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;pwd\u0026#34;\u0026gt;Archetype: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;pwd\u0026#34; value=\u0026#34;Wookie\u0026#34; /\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, sectioning root, listed, form-associated element, palpable content. Permitted content An optional \u0026lt;legend\u0026gt; element, followed by flow content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Implicit ARIA role group Permitted ARIA roles radiogroup, presentation, none DOM interface HTMLFieldSetElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-fieldset-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox Opera Safari Samsung Internet for Android on IOS Android fieldset 1 12 1 Yes ≤15 ≤4 4.4 18 4 ≤14 ≤3.2 1.0\nBefore version 86, this element did Before version 86, this element did not support `flexbox` and `grid` layouts within Before version 86, this element did Before version 86, this element did Before version 14.0, this element not support `flexbox` and `grid` this element. See [bug not support `flexbox` and `grid` not support `flexbox` and `grid` did not support `flexbox` and `grid` layouts within this element. See 4511145](https://developer.microsoft.com/microsoft-edge/platform/issues/4511145/). layouts within this element. See layouts within this element. See layouts within this element. See [bug [bug [bug [bug 262679](https://crbug.com/262679). 262679](https://crbug.com/262679). 262679](https://crbug.com/262679). 262679](https://crbug.com/262679). disabled 20 12 4 Yes 12 6 4.4 25 4 12 6 1.5\nDoes not work with nested fieldsets. For example: Not all form control descendants of a disabled fieldset are properly disabled in IE11; see IE [bug 817488: input\\[type=\\'file\\'\\] not `\u0026lt;fieldset disabled\u0026gt;\u0026lt;fieldset\u0026gt;\u0026lt;!--Still enabled--\u0026gt;\u0026lt;/fieldset\u0026gt;\u0026lt;/fieldset\u0026gt;` disabled inside disabled fieldset](https://connect.microsoft.com/IE/feedbackdetail/view/817488) and IE [bug 962368: Can still edit input\\[type=\\'text\\'\\] within fieldset\\[disabled\\]](https://connect.microsoft.com/IE/feedbackdetail/view/962368/can-still-edit-input-type-text-within-fieldset-disabled). form 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nname 19 12 4 Yes 15 6 4.4 25 4 14 6 1.5 # :::\nSee also # ::: section-content\nThe \u0026lt;legend\u0026gt; element The \u0026lt;input\u0026gt; element The \u0026lt;label\u0026gt; element The \u0026lt;form\u0026gt; element ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset{._attribution-link} :::\n"},{"id":93,"href":"/docs/references/languages/html/element/figcaption/","title":"Figcaption","section":"HTML","content":" \u0026lt;figcaption\u0026gt;: The Figure Caption element # ::: section-content The \u0026lt;figcaption\u0026gt; HTML element represents a caption or legend describing the rest of the contents of its parent \u0026lt;figure\u0026gt; element. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;figcaption\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} An elephant at sunset ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} figure { border: thin #c0c0c0 solid; display: flex; flex-flow: column; padding: 5px; max-width: 220px; margin: auto; }\nimg { max-width: 220px; max-height: 150px; } figcaption { background-color: #222; color: #fff; font: italic smaller sans-serif; padding: 3px; text-align: center; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nExamples # ::: section-content Please see the \u0026lt;figure\u0026gt; page for examples on \u0026lt;figcaption\u0026gt;. :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content Flow content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents A \u0026lt;figure\u0026gt; element; the \u0026lt;figcaption\u0026gt; element must be its first or last child. Implicit ARIA role No corresponding role Permitted ARIA roles group, none, presentation DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-figcaption-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet figcaption 8 12 4 9 11 5.1 4.4 18 4 11 5 1.0 :::\nSee also # ::: section-content\nThe \u0026lt;figure\u0026gt; element. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption{._attribution-link} :::\n"},{"id":94,"href":"/docs/references/languages/html/element/figure/","title":"Figure","section":"HTML","content":" \u0026lt;figure\u0026gt;: The Figure with Optional Caption element # ::: section-content The \u0026lt;figure\u0026gt; HTML element represents self-contained content, potentially with an optional caption, which is specified using the \u0026lt;figcaption\u0026gt; element. The figure, its caption, and its contents are referenced as a single unit. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;figure\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} An elephant at sunset ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} figure { border: thin #c0c0c0 solid; display: flex; flex-flow: column; padding: 5px; max-width: 220px; margin: auto; }\nimg { max-width: 220px; max-height: 150px; } figcaption { background-color: #222; color: #fff; font: italic smaller sans-serif; padding: 3px; text-align: center; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content\nUsually a \u0026lt;figure\u0026gt; is an image, illustration, diagram, code snippet, etc., that is referenced in the main flow of a document, but that can be moved to another part of the document or to an appendix without affecting the main flow. A caption can be associated with the \u0026lt;figure\u0026gt; element by inserting a \u0026lt;figcaption\u0026gt; inside it (as the first or the last child). The first \u0026lt;figcaption\u0026gt; element found in the figure is presented as the figure's caption. ::: Examples # Images # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;!-- Just an image --\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;favicon-192x192.png\u0026#34; alt=\u0026#34;The beautiful MDN logo.\u0026#34; /\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;!-- Image with a caption --\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;favicon-192x192.png\u0026#34; alt=\u0026#34;The beautiful MDN logo.\u0026#34; /\u0026gt; \u0026lt;figcaption\u0026gt;MDN Logo\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nCode snippets # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;figure\u0026gt; \u0026lt;figcaption\u0026gt;Get browser details using \u0026lt;code\u0026gt;navigator\u0026lt;/code\u0026gt;.\u0026lt;/figcaption\u0026gt; \u0026lt;pre\u0026gt; function NavigatorExample() { var txt; txt = \u0026#34;Browser CodeName: \u0026#34; + navigator.appCodeName + \u0026#34;; \u0026#34;; txt+= \u0026#34;Browser Name: \u0026#34; + navigator.appName + \u0026#34;; \u0026#34;; txt+= \u0026#34;Browser Version: \u0026#34; + navigator.appVersion + \u0026#34;; \u0026#34;; txt+= \u0026#34;Cookies Enabled: \u0026#34; + navigator.cookieEnabled + \u0026#34;; \u0026#34;; txt+= \u0026#34;Platform: \u0026#34; + navigator.platform + \u0026#34;; \u0026#34;; txt+= \u0026#34;User-agent header: \u0026#34; + navigator.userAgent + \u0026#34;; \u0026#34;; console.log(\u0026#34;NavigatorExample\u0026#34;, txt); } \u0026lt;/pre\u0026gt; \u0026lt;/figure\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nQuotations # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;figure\u0026gt; \u0026lt;figcaption\u0026gt;\u0026lt;b\u0026gt;Edsger Dijkstra:\u0026lt;/b\u0026gt;\u0026lt;/figcaption\u0026gt; \u0026lt;blockquote\u0026gt; If debugging is the process of removing software bugs, then programming must be the process of putting them in. \u0026lt;/blockquote\u0026gt; \u0026lt;/figure\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nPoems # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;figure\u0026gt; \u0026lt;p style=\u0026#34;white-space:pre\u0026#34;\u0026gt; Bid me discourse, I will enchant thine ear, Or like a fairy trip upon the green, Or, like a nymph, with long dishevelled hair, Dance on the sands, and yet no footing seen: Love is a spirit all compact of fire, Not gross to sink, but light, and will aspire. \u0026lt;/p\u0026gt; \u0026lt;figcaption\u0026gt;\u0026lt;cite\u0026gt;Venus and Adonis\u0026lt;/cite\u0026gt;, by William Shakespeare\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, palpable content. Permitted content A \u0026lt;figcaption\u0026gt; element, followed by flow content; or flow content followed by a \u0026lt;figcaption\u0026gt; element; or flow content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts Flow content. Implicit ARIA role figure Permitted ARIA roles With no figcaption descendant: any, otherwise no permitted roles DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-figure-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet figure 8 12 4 9 11 5.1 4.4 18 4 11 5 1.0 :::\nSee also # ::: section-content\nThe \u0026lt;figcaption\u0026gt; element. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure{._attribution-link} :::\n"},{"id":95,"href":"/docs/references/languages/html/element/font/","title":"Font","section":"HTML","content":" \u0026lt;font\u0026gt; # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;font\u0026gt; HTML element defines the font size, color and face for its content.\n::: {#sect2 .notecard .warning} Warning: Do not use this element. Use the CSS Fonts properties to style text. ::: :::\nAttributes # ::: section-content Like all other HTML elements, this element supports the global attributes.\ncolor [Deprecated]{.visually-hidden} This attribute sets the text color using either a named color or a color specified in the hexadecimal #RRGGBB format.\nface [Deprecated]{.visually-hidden} This attribute contains a comma-separated list of one or more font names. The document text in the default style is rendered in the first font face that the client's browser supports. If no font listed is installed on the local system, the browser typically defaults to the proportional or fixed-width font for that system.\nsize [Deprecated]{.visually-hidden} This attribute specifies the font size as either a numeric or relative value. Numeric values range from 1 to 7 with 1 being the smallest and 3 the default. It can be defined using a relative value, like +2 or -3, which sets it relative to 3, the default value. :::\nDOM interface # ::: section-content This element implements the HTMLFontElement interface. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# font]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet font 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 color 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 face 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 size 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/font{._attribution-link} :::\n"},{"id":96,"href":"/docs/references/languages/html/element/footer/","title":"Footer","section":"HTML","content":" \u0026lt;footer\u0026gt; # ::: section-content The \u0026lt;footer\u0026gt; HTML element represents a footer for its nearest ancestor sectioning content or sectioning root element. A \u0026lt;footer\u0026gt; typically contains information about the author of the section, copyright data or links to related documents. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;footer\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} How to be a wizard Grow a long, majestic beard. Wear a tall, pointed hat. Have I mentioned the beard? © 2018 Gandalf\n::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} article { min-height: 100%; display: grid; grid-template-rows: auto 1fr auto; }\nfooter { display: flex; justify-content: center; padding: 5px; background-color: #45a1ff; color: #fff; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nContent categories Flow content, palpable content. Permitted content Flow content, but with no \u0026lt;footer\u0026gt; or \u0026lt;header\u0026gt; descendants. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Note that a \u0026lt;footer\u0026gt; element must not be a descendant of an \u0026lt;address\u0026gt;, \u0026lt;header\u0026gt; or another \u0026lt;footer\u0026gt; element. Implicit ARIA role contentinfo, or generic if a descendant of an article, aside, main, nav or section element, or an element with role=article, complementary, main, navigation or region Permitted ARIA roles group, presentation or none DOM interface HTMLElement ::: Attributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content\nEnclose information about the author in an \u0026lt;address\u0026gt; element that can be included into the \u0026lt;footer\u0026gt; element. When the nearest ancestor sectioning content or sectioning root element is the body element the footer applies to the whole page. The \u0026lt;footer\u0026gt; element is not sectioning content and therefore doesn't introduce a new section in the outline. ::: Examples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;body\u0026gt; \u0026lt;h3\u0026gt;FIFA World Cup top goalscorers\u0026lt;/h3\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Miroslav Klose, 16\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Ronaldo Nazário, 15\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Gerd Müller, 14\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;footer\u0026gt; \u0026lt;small\u0026gt; Copyright © 2023 Football History Archives. All Rights Reserved. \u0026lt;/small\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; :::\n::: code-example [css]{.language-name}\nfooter { text-align: center; padding: 5px; background-color: #abbaba; color: #000; } :::\n::: {#sect1 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # ::: section-content Prior to the release of Safari 13, the contentinfo landmark role was not properly exposed by VoiceOver{target=\u0026quot;_blank\u0026quot;}. If needing to support legacy Safari browsers, add role=\u0026quot;contentinfo\u0026quot; to the footer element to ensure the landmark will be properly exposed.\nRelated: WebKit Bugzilla: 146930 \u0026ndash; AX: HTML native elements (header, footer, main, aside, nav) should work the same as ARIA landmarks, sometimes they don't{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-footer-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet footer 5 12 4 9 11.1 5 4.4 18 4 11.1 4.2 1.0 :::\nSee also # ::: section-content\nOther section-related elements: \u0026lt;body\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;aside\u0026gt;, h1, h2, h3, h4, h5, h6, \u0026lt;hgroup\u0026gt;, \u0026lt;header\u0026gt;, \u0026lt;section\u0026gt;, \u0026lt;address\u0026gt;; Using HTML sections and outlines ARIA: Contentinfo role ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer{._attribution-link} :::\n"},{"id":97,"href":"/docs/references/languages/html/element/form/","title":"Form","section":"HTML","content":" \u0026lt;form\u0026gt;: The Form element # ::: section-content The \u0026lt;form\u0026gt; HTML element represents a document section containing interactive controls for submitting information. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;form\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Enter your name: \u0026lt;div class=\u0026quot;form-example\u0026quot;\u0026gt; \u0026lt;label for=\u0026quot;email\u0026quot;\u0026gt;Enter your email: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;email\u0026quot; name=\u0026quot;email\u0026quot; id=\u0026quot;email\u0026quot; required /\u0026gt; \u0026lt;div class=\u0026quot;form-example\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;Subscribe!\u0026quot; /\u0026gt; \u0026lt;/form\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} form.form-example { display: table; }\ndiv.form-example { display: table-row; } label, input { display: table-cell; margin-bottom: 10px; } label { padding-right: 10px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nIt is possible to use the :valid and :invalid CSS pseudo-classes to style a \u0026lt;form\u0026gt; element based on whether the elements inside the form are valid. :::\nAttributes # ::: section-content This element includes the global attributes.\naccept [Deprecated]{.visually-hidden} Comma-separated content types the server accepts.\n::: {#sect1 .notecard .note} Note: This attribute has been deprecated and should not be used. Instead, use the accept attribute on \u0026lt;input type=file\u0026gt; elements. :::\naccept-charset Space-separated character encodings the server accepts. The browser uses them in the order in which they are listed. The default value means the same encoding as the page. (In previous versions of HTML, character encodings could also be delimited by commas.)\nautocapitalize [Non-standard]{.visually-hidden} A nonstandard attribute used by iOS Safari that controls how textual form elements should be automatically capitalized. autocapitalize attributes on a form elements override it on \u0026lt;form\u0026gt;. Possible values:\nnone: No automatic capitalization. sentences (default): Capitalize the first letter of each sentence. words: Capitalize the first letter of each word. characters: Capitalize all characters \u0026mdash; that is, uppercase. autocomplete Indicates whether input elements can by default have their values automatically completed by the browser. autocomplete attributes on form elements override it on \u0026lt;form\u0026gt;. Possible values:\noff: The browser may not automatically complete entries. (Browsers tend to ignore this for suspected login forms; see The autocomplete attribute and login fields.) on: The browser may automatically complete entries. name The name of the form. The value must not be the empty string, and must be unique among the form elements in the forms collection that it is in, if any.\nrel Controls the annotations and what kinds of links the form creates. Annotations include external, nofollow, opener, noopener, and noreferrer. Link types include help, prev, next, search, and license. The rel value is a space-separated list of these enumerated values. :::\nAttributes for form submission # ::: section-content The following attributes control behavior during form submission.\naction The URL that processes the form submission. This value can be overridden by a formaction attribute on a \u0026lt;button\u0026gt;, \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt;, or \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; element. This attribute is ignored when method=\u0026quot;dialog\u0026quot; is set.\nenctype If the value of the method attribute is post, enctype is the MIME type{target=\u0026quot;_blank\u0026quot;} of the form submission. Possible values:\napplication/x-www-form-urlencoded: The default value. multipart/form-data: Use this if the form contains \u0026lt;input\u0026gt; elements with type=file. text/plain: Useful for debugging purposes. This value can be overridden by formenctype attributes on \u0026lt;button\u0026gt;, \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt;, or \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; elements.\nmethod The HTTP method to submit the form with. The only allowed methods/values are (case insensitive):\npost: The POST method; form data sent as the request body. get (default): The GET; form data appended to the action URL with a ? separator. Use this method when the form has no side effects. dialog: When the form is inside a \u0026lt;dialog\u0026gt;, closes the dialog and causes a submit event to be fired on submission, without submitting data or clearing the form. This value is overridden by formmethod attributes on \u0026lt;button\u0026gt;, \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt;, or \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; elements.\nnovalidate This Boolean attribute indicates that the form shouldn't be validated when submitted. If this attribute is not set (and therefore the form is validated), it can be overridden by a formnovalidate attribute on a \u0026lt;button\u0026gt;, \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt;, or \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; element belonging to the form.\ntarget Indicates where to display the response after submitting the form. It is a name/keyword for a browsing context (for example, tab, window, or iframe). The following keywords have special meanings:\n_self (default): Load into the same browsing context as the current one. _blank: Load into a new unnamed browsing context. This provides the same behavior as setting rel=\u0026quot;noopener\u0026quot; which does not set window.opener. _parent: Load into the parent browsing context of the current one. If no parent, behaves the same as _self. _top: Load into the top-level browsing context (i.e., the browsing context that is an ancestor of the current one and has no parent). If no parent, behaves the same as _self. This value can be overridden by a formtarget attribute on a \u0026lt;button\u0026gt;, \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt;, or \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; element. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;!-- Form which will send a GET request to the current URL --\u0026gt; \u0026lt;form method=\u0026#34;get\u0026#34;\u0026gt; \u0026lt;label\u0026gt; Name: \u0026lt;input name=\u0026#34;submitted-name\u0026#34; autocomplete=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button\u0026gt;Save\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;!-- Form which will send a POST request to the current URL --\u0026gt; \u0026lt;form method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;label\u0026gt; Name: \u0026lt;input name=\u0026#34;submitted-name\u0026#34; autocomplete=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button\u0026gt;Save\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;!-- Form with fieldset, legend, and label --\u0026gt; \u0026lt;form method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Do you agree to the terms?\u0026lt;/legend\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;radio\u0026#34; value=\u0026#34;yes\u0026#34; /\u0026gt; Yes\u0026lt;/label\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;radio\u0026#34; value=\u0026#34;no\u0026#34; /\u0026gt; No\u0026lt;/label\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, palpable content Permitted content Flow content, but not containing \u0026lt;form\u0026gt; elements Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content Implicit ARIA role form Permitted ARIA roles search, none or presentation DOM interface HTMLFormElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-form-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Android Chrome Android Firefox Opera Android Safari Samsung Internet Explorer for on IOS Android form 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\naccept 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\naccept-charset 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\naction 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nautocapitalize 43 79 111 No 30 No 43 43 111 30 Yes 4.0\nautocomplete 14 12 4 Yes 15 6 4.4 18 4 14 6 1.0\nThe Google Chrome The Opera UI for The Google Chrome The Google Chrome The Opera UI for The Samsung UI for auto-complete UI for UI for auto-complete Internet UI for auto-complete request varies, auto-complete auto-complete request varies, auto-complete request varies, depending on request varies, request varies, depending on request varies, depending on whether depending on depending on whether depending on whether `autocomplete` is whether whether `autocomplete` is whether `autocomplete` is set to `off` on `autocomplete` is `autocomplete` is set to `off` on `autocomplete` is set to `off` on `\u0026lt;input\u0026gt;` elements set to `off` on set to `off` on `\u0026lt;input\u0026gt;` elements set to `off` on `\u0026lt;input\u0026gt;` elements as well as their `\u0026lt;input\u0026gt;` elements `\u0026lt;input\u0026gt;` elements as well as their `\u0026lt;input\u0026gt;` elements as well as their form. as well as their as well as their form. as well as their form. Specifically, when form. form. Specifically, when form. Specifically, when a form has Specifically, when Specifically, when a form has Specifically, when a form has `autocomplete` set a form has a form has `autocomplete` set a form has `autocomplete` set to `off` and its `autocomplete` set `autocomplete` set to `off` and its `autocomplete` set to `off` and its `\u0026lt;input\u0026gt;` to `off` and its to `off` and its `\u0026lt;input\u0026gt;` to `off` and its `\u0026lt;input\u0026gt;` element\\'s `\u0026lt;input\u0026gt;` `\u0026lt;input\u0026gt;` element\\'s `\u0026lt;input\u0026gt;` element\\'s `autocomplete` element\\'s element\\'s `autocomplete` element\\'s `autocomplete` attribute is not `autocomplete` `autocomplete` attribute is not `autocomplete` attribute is not set, then if the attribute is not attribute is not set, then if the attribute is not set, then if the user asks for set, then if the set, then if the user asks for set, then if the user asks for autofill user asks for user asks for autofill user asks for autofill suggestions for autofill autofill suggestions for autofill suggestions for the `\u0026lt;input\u0026gt;` suggestions for suggestions for the `\u0026lt;input\u0026gt;` suggestions for the `\u0026lt;input\u0026gt;` element, Opera the `\u0026lt;input\u0026gt;` the `\u0026lt;input\u0026gt;` element, Opera the `\u0026lt;input\u0026gt;` element, Chrome might display a element, Chrome element, Chrome might display a element, Samsung might display a message saying might display a might display a message saying Internet might message saying \\'autocomplete has message saying message saying \\'autocomplete has display a message \\'autocomplete has been disabled for \\'autocomplete has \\'autocomplete has been disabled for saying been disabled for this form.\\' On been disabled for been disabled for this form.\\' On \\'autocomplete has this form.\\' On the other hand, if this form.\\' On this form.\\' On the other hand, if been disabled for the other hand, if both the form and the other hand, if the other hand, if both the form and this form.\\' On both the form and the input element both the form and both the form and the input element the other hand, if the input element have the input element the input element have both the form and have `autocomplete` set have have `autocomplete` set the input element `autocomplete` set to `off`, the `autocomplete` set `autocomplete` set to `off`, the have to `off`, the browser will not to `off`, the to `off`, the browser will not `autocomplete` set browser will not display that browser will not browser will not display that to `off`, the display that message. For this display that display that message. For this browser will not message. For this reason, you should message. For this message. For this reason, you should display that reason, you should set `autocomplete` reason, you should reason, you should set `autocomplete` message. For this set `autocomplete` to `off` for each set `autocomplete` set `autocomplete` to `off` for each reason, you should to `off` for each `\u0026lt;input\u0026gt;` that has to `off` for each to `off` for each `\u0026lt;input\u0026gt;` that has set `autocomplete` `\u0026lt;input\u0026gt;` that has custom `\u0026lt;input\u0026gt;` that has `\u0026lt;input\u0026gt;` that has custom to `off` for each custom auto-completion. custom custom auto-completion. `\u0026lt;input\u0026gt;` that has auto-completion. auto-completion. auto-completion. custom auto-completion. enctype 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nmethod 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nname 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nnovalidate 10 12 4 10 15 10.1 37 18 4 14 10.3 1.0\nrel 108 108 111 No 94 15.4 108 108 111 73 15.4 21.0\ntarget 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 # :::\nSee also # ::: section-content\nHTML forms guide Other elements that are used when creating forms: \u0026lt;button\u0026gt;, \u0026lt;datalist\u0026gt;, \u0026lt;fieldset\u0026gt;, \u0026lt;input\u0026gt;, \u0026lt;label\u0026gt;, \u0026lt;legend\u0026gt;, \u0026lt;meter\u0026gt;, \u0026lt;optgroup\u0026gt;, \u0026lt;option\u0026gt;, \u0026lt;output\u0026gt;, \u0026lt;progress\u0026gt;, \u0026lt;select\u0026gt;, \u0026lt;textarea\u0026gt;. Getting a list of the elements in the form: HTMLFormElement.elements ARIA: Form role ARIA: Search role ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/form{._attribution-link} :::\n"},{"id":98,"href":"/docs/references/languages/html/element/frame/","title":"Frame","section":"HTML","content":" \u0026lt;frame\u0026gt; # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;frame\u0026gt; HTML element defines a particular area in which another HTML document can be displayed. A frame should be used within a \u0026lt;frameset\u0026gt;.\nUsing the \u0026lt;frame\u0026gt; element is not encouraged because of certain disadvantages such as performance problems and lack of accessibility for users with screen readers. Instead of the \u0026lt;frame\u0026gt; element, \u0026lt;iframe\u0026gt; may be preferred. :::\nAttributes # ::: section-content Like all other HTML elements, this element supports the global attributes.\nsrc [Deprecated]{.visually-hidden} This attribute specifies the document that will be displayed by the frame.\nname [Deprecated]{.visually-hidden} This attribute is used for labeling frames. Without labeling, every link will open in the frame that it's in \u0026ndash; the closest parent frame. See the target attribute for more information.\nnoresize [Deprecated]{.visually-hidden} This attribute prevents resizing of frames by users.\nscrolling [Deprecated]{.visually-hidden} This attribute defines the existence of a scrollbar. If this attribute is not used, the browser adds a scrollbar when necessary. There are two choices: \u0026quot;yes\u0026quot; for forcing a scrollbar even when it is not necessary and \u0026quot;no\u0026quot; for forcing no scrollbar even when it is necessary.\nmarginheight [Deprecated]{.visually-hidden} This attribute defines the height of the margin between frames.\nmarginwidth [Deprecated]{.visually-hidden} This attribute defines the width of the margin between frames.\nframeborder [Deprecated]{.visually-hidden} This attribute allows you to specify a frame's border. :::\nExample # A frameset document # ::: section-content A frameset document has a \u0026lt;frameset\u0026gt; element instead of a \u0026lt;body\u0026gt; element. The \u0026lt;frame\u0026gt; elements are placed within the \u0026lt;frameset\u0026gt;.\n::: code-example [html]{.language-name}\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en-US\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- Document metadata goes here --\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;frameset cols=\u0026#34;400, 500\u0026#34;\u0026gt; \u0026lt;frame src=\u0026#34;https://developer.mozilla.org/en/HTML/Element/iframe\u0026#34; /\u0026gt; \u0026lt;frame src=\u0026#34;https://developer.mozilla.org/en/HTML/Element/frame\u0026#34; /\u0026gt; \u0026lt;/frameset\u0026gt; \u0026lt;/html\u0026gt; :::\nIf you want to embed another HTML page into the \u0026lt;body\u0026gt; of a document, use an \u0026lt;iframe\u0026gt; element. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# frame]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet frame 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 frameborder 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 marginheight 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 marginwidth 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 name 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 noresize 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 scrolling 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 src 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 :::\nSee also # ::: section-content\n\u0026lt;frameset\u0026gt; \u0026lt;iframe\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame{._attribution-link} :::\n"},{"id":99,"href":"/docs/references/languages/html/element/frameset/","title":"Frameset","section":"HTML","content":" \u0026lt;frameset\u0026gt; # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;frameset\u0026gt; HTML element is used to contain \u0026lt;frame\u0026gt; elements.\n::: {#sect2 .notecard .note} Note: Because the use of frames is now discouraged in favor of using \u0026lt;iframe\u0026gt;, this element is not typically used by modern websites. ::: :::\nAttributes # ::: section-content Like all other HTML elements, this element supports the global attributes.\ncols [Deprecated]{.visually-hidden} This attribute specifies the number and size of horizontal spaces in a frameset.\nrows [Deprecated]{.visually-hidden} This attribute specifies the number and size of vertical spaces in a frameset. :::\nExample # A frameset document # ::: section-content A frameset document has a \u0026lt;frameset\u0026gt; element instead of a \u0026lt;body\u0026gt; element. The \u0026lt;frame\u0026gt; elements are placed within the \u0026lt;frameset\u0026gt;.\n::: code-example [html]{.language-name}\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en-US\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- Document metadata goes here --\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;frameset cols=\u0026#34;50%, 50%\u0026#34;\u0026gt; \u0026lt;frame src=\u0026#34;https://developer.mozilla.org/en/HTML/Element/iframe\u0026#34; /\u0026gt; \u0026lt;frame src=\u0026#34;https://developer.mozilla.org/en/HTML/Element/frame\u0026#34; /\u0026gt; \u0026lt;/frameset\u0026gt; \u0026lt;/html\u0026gt; :::\nIf you want to embed another HTML page into the \u0026lt;body\u0026gt; of a document, use an \u0026lt;iframe\u0026gt; element. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# frameset]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet frameset 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 cols 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 rows 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 :::\nSee also # ::: section-content\n\u0026lt;frame\u0026gt; \u0026lt;iframe\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/frameset{._attribution-link} :::\n"},{"id":100,"href":"/docs/references/languages/html/element/head/","title":"Head","section":"HTML","content":" \u0026lt;head\u0026gt;: The Document Metadata (Header) element # ::: section-content The \u0026lt;head\u0026gt; HTML element contains machine-readable information ( metadata) about the document, like its title, scripts, and style sheets.\n::: {#sect1 .notecard .note} Note: \u0026lt;head\u0026gt; primarily holds information for machine processing, not human-readability. For human-visible information, like top-level headings and listed authors, see the \u0026lt;header\u0026gt; element. ::: :::\nAttributes # ::: section-content This element includes the global attributes.\nprofile [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} The URIs of one or more metadata profiles, separated by white space. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en-US\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;/html\u0026gt; ::: :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content If the document is an \u0026lt;iframe\u0026gt; srcdoc document, or if title information is available from a higher level protocol (like the subject line in HTML email), zero or more elements of metadata content.\nOtherwise, one or more elements of metadata content where exactly one is a \u0026lt;title\u0026gt; element.\nTag omission The start tag may be omitted if the first thing inside the \u0026lt;head\u0026gt; element is an element.\nThe end tag may be omitted if the first thing following the \u0026lt;head\u0026gt; element is not a space character or a comment. Permitted parents An \u0026lt;html\u0026gt; element, as its first child. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLHeadElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-head-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet head 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 profile 1 12 1 Yes 15 1\u0026ndash;16.4 4.4 18 4 14 1\u0026ndash;16.4 1.0 :::\nSee also # ::: section-content\nElements that can be used inside the \u0026lt;head\u0026gt;: \u0026lt;title\u0026gt; \u0026lt;base\u0026gt; \u0026lt;link\u0026gt; \u0026lt;style\u0026gt; \u0026lt;meta\u0026gt; \u0026lt;script\u0026gt; \u0026lt;noscript\u0026gt; \u0026lt;template\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/head{._attribution-link} :::\n"},{"id":101,"href":"/docs/references/languages/html/element/header/","title":"Header","section":"HTML","content":" \u0026lt;header\u0026gt; # ::: section-content The \u0026lt;header\u0026gt; HTML element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;header\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Cute Puppies Express! \u0026lt;article\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Beagles\u0026lt;/h1\u0026gt; \u0026lt;time\u0026gt;08.12.2014\u0026lt;/time\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;p\u0026gt;I love beagles \u0026lt;em\u0026gt;so\u0026lt;/em\u0026gt; much! Like, really, a lot. They’re adorable and their ears are so, so snuggly soft!\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} .logo { background: left / cover url(\u0026rsquo;/media/examples/puppy-header-logo.jpg\u0026rsquo;); display: flex; height: 120px; align-items: center; justify-content: center; font: bold calc(1em + 2 * (100vw - 120px) / 100) \u0026lsquo;Dancing Script\u0026rsquo;, fantasy; color: #ff0083; text-shadow: #000 2px 2px 0.2rem; }\nheader \u0026gt; h1 { margin-bottom: 0; } header \u0026gt; time { font: italic 0.7rem sans-serif; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nUsage notes # ::: section-content The \u0026lt;header\u0026gt; element has an identical meaning to the site-wide banner landmark role, unless nested within sectioning content. Then, the \u0026lt;header\u0026gt; element is not a landmark.\nThe \u0026lt;header\u0026gt; element can define a global site header, described as a banner in the accessibility tree. It usually includes a logo, company name, search feature, and possibly the global navigation or a slogan. It is generally located at the top of the page.\nOtherwise, it is a section in the accessibility tree, and usually contains the surrounding section's heading (an h1 \u0026ndash; h6 element) and optional subheading, but this is not required. :::\nHistorical Usage # ::: section-content The \u0026lt;header\u0026gt; element originally existed at the very beginning of HTML for headings. It is seen in the very first website{target=\u0026quot;_blank\u0026quot;}. At some point, headings became \u0026lt;h1\u0026gt; through \u0026lt;h6\u0026gt;, allowing \u0026lt;header\u0026gt; to be free to fill a different role. :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nExamples # Page Header # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Main Page Title\u0026lt;/h1\u0026gt; \u0026lt;img src=\u0026#34;mdn-logo-sm.png\u0026#34; alt=\u0026#34;MDN logo\u0026#34; /\u0026gt; \u0026lt;/header\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nArticle Header # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;article\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h2\u0026gt;The Planet Earth\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt; Posted on Wednesday, \u0026lt;time datetime=\u0026#34;2017-10-04\u0026#34;\u0026gt;4 October 2017\u0026lt;/time\u0026gt; by Jane Smith \u0026lt;/p\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;p\u0026gt; We live on a planet that\u0026#39;s blue and green, with so many things still unseen. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;https://example.com/the-planet-earth/\u0026#34;\u0026gt;Continue reading…\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nAccessibility # ::: section-content The \u0026lt;header\u0026gt; element defines a banner landmark when its context is the \u0026lt;body\u0026gt; element. The HTML header element is not considered a banner landmark when it is descendant of an \u0026lt;article\u0026gt;, \u0026lt;aside\u0026gt;, \u0026lt;main\u0026gt;, \u0026lt;nav\u0026gt;, or \u0026lt;section\u0026gt; element. :::\nTechnical summary # ::: section-content\nContent categories Flow content, palpable content. Permitted content Flow content, but with no \u0026lt;header\u0026gt; or \u0026lt;footer\u0026gt; descendant. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Note that a \u0026lt;header\u0026gt; element must not be a descendant of an \u0026lt;address\u0026gt;, \u0026lt;footer\u0026gt; or another \u0026lt;header\u0026gt; element. Implicit ARIA role banner, or generic if a descendant of an article, aside, main, nav or section element, or an element with role=article, complementary, main, navigation or region Permitted ARIA roles group, presentation or none DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-header-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet header 5 12 4 9 11.1 5 4.4 18 4 11.1 4.2 1.0 :::\nSee also # ::: section-content\nOther section-related elements: \u0026lt;body\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;aside\u0026gt;, h1, h2, h3, h4, h5, h6, \u0026lt;footer\u0026gt;, \u0026lt;section\u0026gt;, \u0026lt;address\u0026gt;. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/header{._attribution-link} :::\n"},{"id":102,"href":"/docs/references/languages/html/element/heading_elements/","title":"Heading Elements","section":"HTML","content":" \u0026lt;h1\u0026gt;\u0026ndash;\u0026lt;h6\u0026gt;: The HTML Section Heading elements # ::: section-content The \u0026lt;h1\u0026gt; to \u0026lt;h6\u0026gt; HTML elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level and \u0026lt;h6\u0026gt; is the lowest. By default, all heading elements create a block-level box in the layout, starting on a new line and taking up the full width available in their containing block. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;h1-h6\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Beetles External morphology Head Mouthparts Thorax Prothorax Pterothorax ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} h1, h2, h3, h4 { margin: 0.1rem 0; }\nh1 { font-size: 2rem; } h2 { font-size: 1.5rem; padding-left: 20px; } h3 { font-size: 1.2rem; padding-left: 40px; } h4 { font-size: 1rem; font-style: italic; padding-left: 60px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nContent categories Flow content, heading content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Implicit ARIA role heading Permitted ARIA roles tab, presentation or none DOM interface HTMLHeadingElement ::: Attributes # ::: section-content These elements only include the global attributes. :::\nUsage notes # ::: section-content\nHeading information can be used by user agents to construct a table of contents for a document automatically. Do not use heading elements to resize text. Instead, use the CSS font-size property. Do not skip heading levels: always start from \u0026lt;h1\u0026gt;, followed by \u0026lt;h2\u0026gt; and so on. ::: Avoid using multiple \u0026lt;h1\u0026gt; elements on one page # ::: section-content While using multiple \u0026lt;h1\u0026gt; elements on one page is allowed by the HTML standard (as long as they are not nested), this is not considered a best practice. A page should generally have a single \u0026lt;h1\u0026gt; element that describes the content of the page (similar to the document's \u0026lt;title\u0026gt; element).\n::: {#sect1 .notecard .note} Note: Nesting multiple \u0026lt;h1\u0026gt; elements in nested sectioning elements was allowed in older versions of the HTML standard. However, this was never considered a best practice and is now non-conforming. Read more in There Is No Document Outline Algorithm{target=\u0026quot;_blank\u0026quot;}. :::\nPrefer using only one \u0026lt;h1\u0026gt; per page and nest headings without skipping levels. :::\nExamples # All headings # ::: section-content The following code shows all the heading levels, in use.\n::: code-example [html]{.language-name}\n\u0026lt;h1\u0026gt;Heading level 1\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Heading level 2\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;Heading level 3\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;Heading level 4\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;Heading level 5\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;Heading level 6\u0026lt;/h6\u0026gt; :::\n::: {#sect2 .code-example} ::: iframe ::: ::: :::\nExample page # ::: section-content The following code shows a few headings with some content under them.\n::: code-example [html]{.language-name}\n\u0026lt;h1\u0026gt;Heading elements\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Summary\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Some text here…\u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;Examples\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;Example 1\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;Some text here…\u0026lt;/p\u0026gt; \u0026lt;h3\u0026gt;Example 2\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;Some text here…\u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;See also\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Some text here…\u0026lt;/p\u0026gt; :::\n::: {#sect3 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # Navigation # ::: section-content A common navigation technique for users of screen reading software is to quickly jump from heading to heading in order to determine the content of the page. Because of this, it is important to not skip one or more heading levels. Doing so may create confusion, as the person navigating this way may be left wondering where the missing heading is.\nDon't do this:\n::: code-example [html]{.language-name}\n\u0026lt;h1\u0026gt;Heading level 1\u0026lt;/h1\u0026gt; \u0026lt;h3\u0026gt;Heading level 3\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;Heading level 4\u0026lt;/h4\u0026gt; :::\nPrefer this:\n::: code-example [html]{.language-name}\n\u0026lt;h1\u0026gt;Heading level 1\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Heading level 2\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;Heading level 3\u0026lt;/h3\u0026gt; :::\nNesting # Headings may be nested as subsections to reflect the organization of the content of the page. Most screen readers can also generate an ordered list of all the headings on a page, which can help a person quickly determine the hierarchy of the content:\nh1 Beetles h2 Etymology h2 Distribution and Diversity h2 Evolution h3 Late Paleozoic h3 Jurassic h3 Cretaceous h3 Cenozoic h2 External Morphology h3 Head h4 Mouthparts h3 Thorax h4 Prothorax h4 Pterothorax h3 Legs h3 Wings h3 Abdomen When headings are nested, heading levels may be \u0026quot;skipped\u0026quot; when closing a subsection.\nHeadings • Page Structure • WAI Web Accessibility Tutorials{target=\u0026quot;_blank\u0026quot;} MDN Understanding WCAG, Guideline 1.3 explanations Understanding Success Criterion 1.3.1 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} MDN Understanding WCAG, Guideline 2.4 explanations Understanding Success Criterion 2.4.1 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} Understanding Success Criterion 2.4.6 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} Understanding Success Criterion 2.4.10 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} ::: Labeling section content # ::: section-content Another common navigation technique for users of screen reading software is to generate a list of sectioning content and use it to determine the page's layout.\nSectioning content can be labeled using a combination of the aria-labelledby and id attributes, with the label concisely describing the purpose of the section. This technique is useful for situations where there is more than one sectioning element on the same page.\nSectioning content examples # ::: code-example [html]{.language-name}\n\u0026lt;header\u0026gt; \u0026lt;nav aria-labelledby=\u0026#34;primary-navigation\u0026#34;\u0026gt; \u0026lt;h2 id=\u0026#34;primary-navigation\u0026#34;\u0026gt;Primary navigation\u0026lt;/h2\u0026gt; \u0026lt;!-- navigation items --\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;!-- page content --\u0026gt; \u0026lt;footer\u0026gt; \u0026lt;nav aria-labelledby=\u0026#34;footer-navigation\u0026#34;\u0026gt; \u0026lt;h2 id=\u0026#34;footer-navigation\u0026#34;\u0026gt;Footer navigation\u0026lt;/h2\u0026gt; \u0026lt;!-- navigation items --\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/footer\u0026gt; :::\n::: {#sect4 .code-example} ::: iframe ::: :::\nIn this example, screen reading technology would announce that there are two \u0026lt;nav\u0026gt; sections, one called \u0026quot;Primary navigation\u0026quot; and one called \u0026quot;Footer navigation\u0026quot;. If labels were not provided, the person using screen reading software may have to investigate each nav element's contents to determine their purpose.\nUsing the aria-labelledby attribute Labeling Regions • Page Structure • W3C WAI Web Accessibility Tutorials{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-h1,-h2,-h3,-h4,-h5,-and-h6-elements]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet Heading_Elements 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\n\u0026lt;p\u0026gt; `` \u0026lt;section\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements{._attribution-link} :::\n"},{"id":103,"href":"/docs/references/languages/html/element/hgroup/","title":"Hgroup","section":"HTML","content":" \u0026lt;hgroup\u0026gt; # ::: section-content The \u0026lt;hgroup\u0026gt; HTML element represents a heading and related content. It groups a single \u0026lt;h1\u0026gt;–\u0026lt;h6\u0026gt; element with one or more \u0026lt;p\u0026gt;. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;hgroup\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Frankenstein Or: The Modern Prometheus\nVictor Frankenstein, a Swiss scientist, has a great ambition: to create intelligent life. But when his creature first stirs, he realizes he has made a monster. A monster which, abandoned by his master and shunned by everyone who sees it, follows Dr Frankenstein to the very ends of the earth. ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} hgroup { text-align: right; padding-right: 16px; border-right: 10px solid #00c8d7; }\nhgroup h1 { margin-bottom: 0; } hgroup p { margin: 0; font-weight: bold; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content The \u0026lt;hgroup\u0026gt; element allows the grouping of a heading with any secondary content, such as subheadings, an alternative title, or tagline. Each of these types of content represented as a \u0026lt;p\u0026gt; element within the \u0026lt;hgroup\u0026gt;.\nThe \u0026lt;hgroup\u0026gt; itself has no impact on the document outline of a web page. Rather, the single allowed heading within the \u0026lt;hgroup\u0026gt; contributes to the document outline. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;!doctype html\u0026gt; \u0026lt;title\u0026gt;HTML Standard\u0026lt;/title\u0026gt; \u0026lt;body\u0026gt; \u0026lt;hgroup id=\u0026#34;document-title\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;HTML: Living Standard\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Last Updated 12 July 2022\u0026lt;/p\u0026gt; \u0026lt;/hgroup\u0026gt; \u0026lt;p\u0026gt;Some intro to the document.\u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;Table of contents\u0026lt;/h2\u0026gt; \u0026lt;ol id=\u0026#34;toc\u0026#34;\u0026gt; … \u0026lt;/ol\u0026gt; \u0026lt;h2\u0026gt;First section\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Some intro to the first section.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # ::: section-content The \u0026lt;hgroup\u0026gt; presently has no strong accessibility semantics. The content of the element (a heading and optional paragraphs) is what is exposed by browser accessibility APIs. :::\nTechnical summary # ::: section-content\nContent categories Flow content, heading content, palpable content. Permitted content Zero or more \u0026lt;p\u0026gt; elements, followed by one h1, h2, h3, h4, h5, or h6 element, followed by zero or more \u0026lt;p\u0026gt; elements. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Implicit ARIA role generic Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-hgroup-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet hgroup 5 12 4 9 11.1 5 2.2 18 4 11.1 4.2 1.0 :::\nSee also # ::: section-content\nOthers section-related elements: \u0026lt;body\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;section\u0026gt;, \u0026lt;aside\u0026gt;, h1, h2, h3, h4, h5, h6, \u0026lt;nav\u0026gt;, \u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt;, \u0026lt;address\u0026gt;; Sections and outlines of an HTML document. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup{._attribution-link} :::\n"},{"id":104,"href":"/docs/references/languages/html/element/hr/","title":"Hr","section":"HTML","content":" \u0026lt;hr\u0026gt;: The Thematic Break (Horizontal Rule) element # ::: section-content The \u0026lt;hr\u0026gt; HTML element represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;hr\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} §1: The first rule of Fight Club is: You do not talk about Fight Club.\n\u0026lt;hr /\u0026gt; \u0026lt;p\u0026gt;§2: The second rule of Fight Club is: Always bring cupcakes.\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} hr { border: none; border-top: 3px double #333; color: #333; overflow: visible; text-align: center; height: 5px; }\nhr:after { background: #fff; content: '§'; padding: 0 4px; position: relative; top: -13px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nHistorically, this has been presented as a horizontal rule or line. While it may still be displayed as a horizontal rule in visual browsers, this element is now defined in semantic terms, rather than presentational terms, so if you wish to draw a horizontal line, you should do so using appropriate CSS. :::\nAttributes # ::: section-content This element's attributes include the global attributes.\nalign [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} Sets the alignment of the rule on the page. If no value is specified, the default value is left.\ncolor [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} Sets the color of the rule through color name or hexadecimal value.\nnoshade [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} Sets the rule to have no shading.\nsize [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} Sets the height, in pixels, of the rule.\nwidth [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} Sets the length of the rule on the page through a pixel or percentage value. :::\nExample # HTML # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; This is the first paragraph of text. This is the first paragraph of text. This is the first paragraph of text. This is the first paragraph of text. \u0026lt;/p\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;p\u0026gt; This is the second paragraph of text. This is the second paragraph of text. This is the second paragraph of text. This is the second paragraph of text. \u0026lt;/p\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content. Permitted content None; it is a void element. Tag omission It must have start tag, but must not have an end tag. Permitted parents Any element that accepts flow content. Implicit ARIA role separator Permitted ARIA roles presentation or none DOM interface HTMLHRElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-hr-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet hr 1 12 1 5.5 ≤12.1 3 4.4 18 4 ≤12.1 1 1.0 align 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 color 33 12 1 ≤6 20 10.1 4.4.3 33 4 20 10.3 2.0 noshade 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 size 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 width 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 :::\nSee also # ::: section-content\n\u0026lt;p\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr{._attribution-link} :::\n"},{"id":105,"href":"/docs/references/languages/html/element/html/","title":"HTML","section":"HTML","content":" \u0026lt;html\u0026gt;: The HTML Document / Root element # ::: section-content The \u0026lt;html\u0026gt; HTML element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element.\nContent categories None. Permitted content One \u0026lt;head\u0026gt; element, followed by one \u0026lt;body\u0026gt; element. Tag omission The start tag may be omitted if the first thing inside the \u0026lt;html\u0026gt; element is not a comment.\nThe end tag may be omitted if the \u0026lt;html\u0026gt; element is not immediately followed by a comment. Permitted parents None. This is the root element of a document. Implicit ARIA role document Permitted ARIA roles No role permitted DOM interface HTMLHtmlElement ::: Attributes # ::: section-content This element includes the global attributes.\nmanifest [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} Specifies the URI of a resource manifest indicating resources that should be cached locally.\nversion [Deprecated]{.visually-hidden} Specifies the version of the HTML Document Type Definition that governs the current document. This attribute is not needed, because it is redundant with the version information in the document type declaration.\nxmlns Specifies the XML Namespace of the document. Default value is \u0026quot;http://www.w3.org/1999/xhtml\u0026quot;. This is required in documents parsed with XML parsers, and optional in text/html documents. :::\nExample # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- … --\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- … --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ::: :::\nAccessibility concerns # ::: section-content While HTML does not require authors to specify \u0026lt;html\u0026gt; element start and ending tags, it is important for authors to do so as it will allow them to specify the lang for the webpage. Providing a lang attribute with a valid language tag according to RFC 5646: Tags for Identifying Languages (also known as BCP 47){target=\u0026quot;_blank\u0026quot;} on the \u0026lt;html\u0026gt; element will help screen reading technology determine the proper language to announce. The identifying language tag should describe the language used by the majority of the content of the page. Without it, screen readers will typically default to the operating system's set language, which may cause mispronunciations.\nIncluding a valid lang declaration on the \u0026lt;html\u0026gt; element also ensures that important metadata contained in the page's \u0026lt;head\u0026gt;, such as the page's \u0026lt;title\u0026gt;, are also announced properly.\nMDN Understanding WCAG, Guideline 3.1 explanations Understanding Success Criterion 3.1.1 | W3C Understanding WCAG 2.1{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-html-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari on Samsung Explorer Android Android for Android IOS Internet Android html 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0\nmanifest 4 12 3.5\u0026ndash;84 10 10.6 4\u0026ndash;16.4 4.4 18 4\u0026ndash;84 11 3.2\u0026ndash;16.4 1.0\n3 Before version 3.5, Firefox ignores the `NETWORK` and `FALLBACK` sections of the cache manifest file. version 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nxmlns 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 # :::\nSee also # ::: section-content\nMathML top-level element: \u0026lt;math\u0026gt; SVG top-level element: \u0026lt;svg\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/html{._attribution-link} :::\n"},{"id":106,"href":"/docs/references/languages/html/element/i/","title":"I","section":"HTML","content":" \u0026lt;i\u0026gt;: The Idiomatic Text element # ::: section-content The \u0026lt;i\u0026gt; HTML element represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the \u0026lt;i\u0026gt; naming of this element. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;i\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} I looked at it and thought This can\u0026rsquo;t be real!\n\u0026lt;p\u0026gt;\u0026lt;i\u0026gt;Musa\u0026lt;/i\u0026gt; is one of two or three genera in the family \u0026lt;i\u0026gt;Musaceae\u0026lt;/i\u0026gt;; it includes bananas and plantains.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; The term \u0026lt;i\u0026gt;bandwidth\u0026lt;/i\u0026gt; describes the measure of how much information can pass through a data connection in a given amount of time. \u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} /* stylelint-disable-next-line block-no-empty */ i { } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content\nUse the \u0026lt;i\u0026gt; element for text that is set off from the normal prose for readability reasons. This would be a range of text with different semantic meaning than the surrounding text. Among the use cases for the \u0026lt;i\u0026gt; element are spans of text representing a different quality or mode of text, such as: Alternative voice or mood Taxonomic designations (such as the genus and species \u0026quot;Homo sapiens\u0026quot;) Idiomatic terms from another language (such as \u0026quot;et cetera\u0026quot;); these should include the lang attribute to identify the language Technical terms Transliterations Thoughts (such as \u0026quot;She wondered, What is this writer talking about, anyway?\u0026quot;) Ship or vessel names in Western writing systems (such as \u0026quot;They searched the docks for the Empress of the Galaxy, the ship to which they were assigned.\u0026quot;) In earlier versions of the HTML specification, the \u0026lt;i\u0026gt; element was merely a presentational element used to display text in italics, much like the \u0026lt;b\u0026gt; element was used to display text in bold letters. This is no longer true, as these tags now define semantics rather than typographic appearance. A browser will typically still display the contents of the \u0026lt;i\u0026gt; element in italic type, but is, by definition, no longer required to do so. To display text in italic type, authors should use the CSS font-style property. Be sure the text in question is not actually more appropriately marked up with another element. Use \u0026lt;em\u0026gt; to indicate stress emphasis. Use \u0026lt;strong\u0026gt; to indicate importance, seriousness, or urgency. Use \u0026lt;mark\u0026gt; to indicate relevance. Use \u0026lt;cite\u0026gt; to mark up the name of a work, such as a book, play, or song. Use \u0026lt;dfn\u0026gt; to mark up the defining instance of a term. ::: Examples # ::: section-content This example demonstrates using the \u0026lt;i\u0026gt; element to mark text that is in another language.\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; The Latin phrase \u0026lt;i lang=\u0026#34;la\u0026#34;\u0026gt;Veni, vidi, vici\u0026lt;/i\u0026gt; is often mentioned in music, art, and literature. \u0026lt;/p\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role generic Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-i-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet i 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\n\u0026lt;em\u0026gt; Other italicized elements: \u0026lt;var\u0026gt;, \u0026lt;dfn\u0026gt;, \u0026lt;cite\u0026gt;, \u0026lt;address\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/i{._attribution-link} :::\n"},{"id":107,"href":"/docs/references/languages/html/element/iframe/","title":"Iframe","section":"HTML","content":" \u0026lt;iframe\u0026gt;: The Inline Frame element # ::: section-content The \u0026lt;iframe\u0026gt; HTML element represents a nested browsing context, embedding another HTML page into the current one. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;iframe\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} iframe { border: 1px solid black; width: 100%; /* takes precedence over the width set with the HTML width attribute */ } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nEach embedded browsing context has its own document and allows URL navigations. The navigations of each embedded browsing context are linearized into the session history of the topmost browsing context. The browsing context that embeds the others is called the parent browsing context. The topmost browsing context \u0026mdash; the one with no parent \u0026mdash; is usually the browser window, represented by the Window object.\n::: {#sect1 .notecard .warning} Warning: Because each browsing context is a complete document environment, every \u0026lt;iframe\u0026gt; in a page requires increased memory and other computing resources. While theoretically you can use as many \u0026lt;iframe\u0026gt;s as you like, check for performance problems. ::: :::\nAttributes # ::: section-content This element includes the global attributes.\nallow Specifies a Permissions Policy for the \u0026lt;iframe\u0026gt;. The policy defines what features are available to the \u0026lt;iframe\u0026gt; (for example, access to the microphone, camera, battery, web-share, etc.) based on the origin of the request.\n::: {#sect2 .notecard .note} Note: A Permissions Policy specified by the allow attribute implements a further restriction on top of the policy specified in the Permissions-Policy header. It doesn't replace it. :::\nallowfullscreen Set to true if the \u0026lt;iframe\u0026gt; can activate fullscreen mode by calling the requestFullscreen() method.\n::: {#sect3 .notecard .note} Note: This attribute is considered a legacy attribute and redefined as allow=\u0026quot;fullscreen\u0026quot;. :::\nallowpaymentrequest [Experimental]{.visually-hidden} Set to true if a cross-origin \u0026lt;iframe\u0026gt; should be allowed to invoke the Payment Request API.\n::: {#sect4 .notecard .note} Note: This attribute is considered a legacy attribute and redefined as allow=\u0026quot;payment\u0026quot;. :::\ncredentialless [Experimental]{.visually-hidden} [Non-standard]{.visually-hidden} Set to true to make the \u0026lt;iframe\u0026gt; credentialless, meaning that its content will be loaded in a new, ephemeral context. It doesn't have access to the network, cookies, and storage data associated with its origin. It uses a new context local to the top-level document lifetime. In return, the Cross-Origin-Embedder-Policy (COEP) embedding rules can be lifted, so documents with COEP set can embed third-party documents that do not. See IFrame credentialless for more details.\ncsp [Experimental]{.visually-hidden} A Content Security Policy enforced for the embedded resource. See HTMLIFrameElement.csp for details.\nheight The height of the frame in CSS pixels. Default is 150.\nloading Indicates how the browser should load the iframe:\neager: Load the iframe immediately, regardless if it is outside the visible viewport (this is the default value). lazy: Defer loading of the iframe until it reaches a calculated distance from the viewport, as defined by the browser. name A targetable name for the embedded browsing context. This can be used in the target attribute of the \u0026lt;a\u0026gt;, \u0026lt;form\u0026gt;, or \u0026lt;base\u0026gt; elements; the formtarget attribute of the \u0026lt;input\u0026gt; or \u0026lt;button\u0026gt; elements; or the windowName parameter in the window.open() method.\nreferrerpolicy Indicates which referrer to send when fetching the frame's resource:\nno-referrer: The Referer header will not be sent. no-referrer-when-downgrade: The Referer header will not be sent to origins without TLS ( HTTPS). origin: The sent referrer will be limited to the origin of the referring page: its scheme, host, and port. origin-when-cross-origin: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path. same-origin: A referrer will be sent for same origin, but cross-origin requests will contain no referrer information. strict-origin: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP). strict-origin-when-cross-origin (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP). unsafe-url: The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins. sandbox Controls the restrictions applied to the content embedded in the \u0026lt;iframe\u0026gt;. The value of the attribute can either be empty to apply all restrictions, or space-separated tokens to lift particular restrictions:\nallow-downloads: Allows downloading files through an \u0026lt;a\u0026gt; or \u0026lt;area\u0026gt; element with the download attribute, as well as through the navigation that leads to a download of a file. This works regardless of whether the user clicked on the link, or JS code initiated it without user interaction. allow-downloads-without-user-activation [Experimental]{.visually-hidden} : Allows for downloads to occur without a gesture from the user. allow-forms: Allows the page to submit forms. If this keyword is not used, form will be displayed as normal, but submitting it will not trigger input validation, sending data to a web server or closing a dialog. allow-modals: Allows the page to open modal windows by Window.alert(), Window.confirm(), Window.print() and Window.prompt(), while opening a \u0026lt;dialog\u0026gt; is allowed regardless of this keyword. It also allows the page to receive BeforeUnloadEvent event. allow-orientation-lock: Lets the resource lock the screen orientation. allow-pointer-lock: Allows the page to use the Pointer Lock API. allow-popups: Allows popups (like from Window.open(), target=\u0026quot;_blank\u0026quot;, Window.showModalDialog()). If this keyword is not used, that functionality will silently fail. allow-popups-to-escape-sandbox: Allows a sandboxed document to open new windows without forcing the sandboxing flags upon them. This will allow, for example, a third-party advertisement to be safely sandboxed without forcing the same restrictions upon the page the ad links to. allow-presentation: Allows embedders to have control over whether an iframe can start a presentation session. allow-same-origin: If this token is not used, the resource is treated as being from a special origin that always fails the same-origin policy (potentially preventing access to data storage/cookies and some JavaScript APIs). allow-scripts: Allows the page to run scripts (but not create pop-up windows). If this keyword is not used, this operation is not allowed. allow-storage-access-by-user-activation [Experimental]{.visually-hidden} : Allows a document loaded in the \u0026lt;iframe\u0026gt; to use the Storage Access API to request access to unpartitioned cookies. allow-top-navigation: Lets the resource navigate the top-level browsing context (the one named _top). allow-top-navigation-by-user-activation: Lets the resource navigate the top-level browsing context, but only if initiated by a user gesture. allow-top-navigation-to-custom-protocols: Allows navigations to non-http protocols built into browser or registered by a website. This feature is also activated by allow-popups or allow-top-navigation keyword. ::: {#sect5 .notecard .note} Note:\nWhen the embedded document has the same origin as the embedding page, it is strongly discouraged to use both allow-scripts and allow-same-origin, as that lets the embedded document remove the sandbox attribute \u0026mdash; making it no more secure than not using the sandbox attribute at all. Sandboxing is useless if the attacker can display content outside a sandboxed iframe \u0026mdash; such as if the viewer opens the frame in a new tab. Such content should be also served from a separate origin to limit potential damage. ::: src The URL of the page to embed. Use a value of about:blank to embed an empty page that conforms to the same-origin policy. Also note that programmatically removing an \u0026lt;iframe\u0026gt;'s src attribute (e.g. via Element.removeAttribute()) causes about:blank to be loaded in the frame in Firefox (from version 65), Chromium-based browsers, and Safari/iOS.\nsrcdoc Inline HTML to embed, overriding the src attribute. If a browser does not support the srcdoc attribute, it will fall back to the URL in the src attribute.\nwidth The width of the frame in CSS pixels. Default is 300. :::\nDeprecated attributes # ::: section-content These attributes are deprecated and may no longer be supported by all user agents. You should not use them in new content, and try to remove them from existing content.\nalign [Deprecated]{.visually-hidden} The alignment of this element with respect to the surrounding context.\nframeborder [Deprecated]{.visually-hidden} The value 1 (the default) draws a border around this frame. The value 0 removes the border around this frame, but you should instead use the CSS property border to control \u0026lt;iframe\u0026gt; borders.\nlongdesc [Deprecated]{.visually-hidden} A URL of a long description of the frame's content. Due to widespread misuse, this is not helpful for non-visual browsers.\nmarginheight [Deprecated]{.visually-hidden} The amount of space in pixels between the frame's content and its top and bottom borders.\nmarginwidth [Deprecated]{.visually-hidden} The amount of space in pixels between the frame's content and its left and right borders.\nscrolling [Deprecated]{.visually-hidden} Indicates when the browser should provide a scrollbar for the frame:\nauto: Only when the frame's content is larger than its dimensions. yes: Always show a scrollbar. no: Never show a scrollbar. ::: Scripting # ::: section-content Inline frames, like \u0026lt;frame\u0026gt; elements, are included in the window.frames pseudo-array.\nWith the DOM HTMLIFrameElement object, scripts can access the window object of the framed resource via the contentWindow property. The contentDocument property refers to the document inside the \u0026lt;iframe\u0026gt;, same as contentWindow.document.\nFrom the inside of a frame, a script can get a reference to its parent window with window.parent.\nScript access to a frame's content is subject to the same-origin policy. Scripts cannot access most properties in other window objects if the script was loaded from a different origin, including scripts inside a frame accessing the frame's parent. Cross-origin communication can be achieved using Window.postMessage(). :::\nPositioning and scaling # ::: section-content As a replaced element, the position, alignment, and scaling of the embedded document within the \u0026lt;iframe\u0026gt; element's box, can be adjusted with the object-position and object-fit properties. :::\nExamples # A simple \u0026lt;iframe\u0026gt; # ::: section-content This example embeds the page at https://example.org{target=\u0026quot;_blank\u0026quot;} in an iframe.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;iframe src=\u0026#34;https://example.org\u0026#34; title=\u0026#34;iframe Example 1\u0026#34; width=\u0026#34;400\u0026#34; height=\u0026#34;300\u0026#34;\u0026gt; \u0026lt;/iframe\u0026gt; :::\nResult # ::: {#sect6 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # ::: section-content People navigating with assistive technology such as a screen reader can use the title attribute on an \u0026lt;iframe\u0026gt; to label its content. The title's value should concisely describe the embedded content:\n::: code-example [html]{.language-name}\n\u0026lt;iframe title=\u0026#34;Wikipedia page for Avocados\u0026#34; src=\u0026#34;https://en.wikipedia.org/wiki/Avocado\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; :::\nWithout this title, they have to navigate into the \u0026lt;iframe\u0026gt; to determine what its embedded content is. This context shift can be confusing and time-consuming, especially for pages with multiple \u0026lt;iframe\u0026gt;s and/or if embeds contain interactive content like video or audio. :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, embedded content, interactive content, palpable content. Permitted content None. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts embedded content. Implicit ARIA role No corresponding role Permitted ARIA roles application, document, img, none, presentation DOM interface HTMLIFrameElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-iframe-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari on IOS Samsung Explorer Android Android Android Internet iframe 1 12 1 Yes ≤15 ≤4 4.4 18 4 ≤14 ≤3.2 1.0\nThe `resize` CSS property doesn\\'t Safari has a The `resize` CSS property doesn\\'t Safari has a have any effect on this element due [bug](https://www.quirksmode.org/bugreports/archives/2005/02/hidden_iframes.html) have any effect on this element due [bug](https://www.quirksmode.org/bugreports/archives/2005/02/hidden_iframes.html) to [bug that prevents iframes from loading if the `iframe` element was hidden when added to to [bug that prevents iframes from loading if the `iframe` element was hidden when added to 680823](https://bugzil.la/680823). the page. `iframeElement.src = iframeElement.src` should cause it to load the 680823](https://bugzil.la/680823). the page. `iframeElement.src = iframeElement.src` should cause it to load the iframe. iframe. align 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nallow 60 79 74 No 47 11.1 60 60 No 44 11.3 8.0\nallowfullscreen 3817\u0026ndash;38 12 189\u0026ndash;18 11 2515\u0026ndash;25 10.15.1 384.4\u0026ndash;38 3818\u0026ndash;38 189\u0026ndash;18 2514\u0026ndash;25 12 3.01.0\u0026ndash;3.0\nOnly available on iPad, not on iPhone. allowpaymentrequest 60 79 56\u0026ndash;83 No 47 No 60 60 56\u0026ndash;83 44 No 8.0\ncredentialless 110 110 No No 96 No 110 110 No 74 No 21.0\nexternal_protocol_urls_blocked No No 67 No No No No No 67 No No No\nframeborder 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nheight 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nloading 77 79 No No 64 16.4 77 77 No 55 16.4 12.0\nlongdesc 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nmarginheight 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nmarginwidth 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nname 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nreferrerpolicy 51 79 50 No 38 14 51 51 50 41 14 7.2\nsandbox 4 12 17 10 15 5 4.4 18 17 14 4.2 1.0\nscrolling 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nsrc 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nsrcdoc 20 79 25 No 15 6 37 25 25 No No 1.5\nwidth 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 # :::\nSee also # ::: section-content\nCSP: frame-ancestors Privacy, permissions, and information security ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe{._attribution-link} :::\n"},{"id":108,"href":"/docs/references/languages/html/element/image/","title":"Image","section":"HTML","content":" \u0026lt;image\u0026gt;: The Image element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\n::: {#sect2 .notecard .nonstandard} Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future. :::\nThe \u0026lt;image\u0026gt; HTML element is an ancient and poorly supported precursor to the \u0026lt;img\u0026gt; element. It should not be used.\nSome browsers will attempt to automatically convert this into an \u0026lt;img\u0026gt; element, and may succeed if the src attribute is specified as well. :::\nSpecifications # ::: section-content This does not appear to have been part of any formal specification. It was mentioned in HTML+ Discussion Document - Dave Raggett, November 8, 1993{target=\u0026quot;_blank\u0026quot;} (Section 5.9 - Images), but was not part of the first revision of HyperText Markup Language Specification - 2.0{target=\u0026quot;_blank\u0026quot;} in 1994. :::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari Samsung Explorer Android Android Android on IOS Internet image 1 79 1 No 15 1 4.4 18 4 14 1 1.0\nBefore Firefox 22, Before Firefox 22, creating an creating an \\\u0026lt;image\\\u0026gt; element \\\u0026lt;image\\\u0026gt; element incorrectly incorrectly resulted in an resulted in an `HTMLSpanElement` `HTMLSpanElement` object, instead of object, instead of the expected the expected `HTMLElement`. `HTMLElement`. :::\nSee also # ::: section-content\n\u0026lt;img\u0026gt;: The correct way to display an image in a document \u0026lt;picture\u0026gt;: A more powerful correct way to display an image in a document ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/image{._attribution-link} :::\n"},{"id":109,"href":"/docs/references/languages/html/element/img/","title":"Img","section":"HTML","content":" \u0026lt;img\u0026gt;: The Image Embed element # ::: section-content The \u0026lt;img\u0026gt; HTML element embeds an image into the document. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;img\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} .fit-picture { width: 250px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe above example shows usage of the \u0026lt;img\u0026gt; element:\nThe src attribute is required, and contains the path to the image you want to embed. The alt attribute holds a textual replacement for the image, which is mandatory and incredibly useful for accessibility \u0026mdash; screen readers read the attribute value out to their users so they know what the image means. Alt text is also displayed on the page if the image can't be loaded for some reason: for example, network errors, content blocking, or linkrot. There are many other attributes to achieve various purposes:\nReferrer/ CORS control for security and privacy: see crossorigin and referrerpolicy. Use both width and height to set the intrinsic size of the image, allowing it to take up space before it loads, to mitigate content layout shifts. Responsive image hints with sizes and srcset (see also the \u0026lt;picture\u0026gt; element and our Responsive images tutorial). ::: Supported image formats # ::: section-content The HTML standard doesn't list what image formats to support, so user agents may support different formats.\n::: {#sect1 .notecard .note} Note: The Image file type and format guide provides comprehensive information about image formats and their web browser support. This section is just a summary! :::\nThe image file formats that are most commonly used on the web are:\nAPNG (Animated Portable Network Graphics) \u0026mdash; Good choice for lossless animation sequences (GIF is less performant) AVIF (AV1 Image File Format) \u0026mdash; Good choice for both images and animated images due to high performance. GIF (Graphics Interchange Format) \u0026mdash; Good choice for simple images and animations. JPEG (Joint Photographic Expert Group image) \u0026mdash; Good choice for lossy compression of still images (currently the most popular). PNG (Portable Network Graphics) \u0026mdash; Good choice for lossless compression of still images (slightly better quality than JPEG). SVG (Scalable Vector Graphics) \u0026mdash; Vector image format. Use for images that must be drawn accurately at different sizes. WebP (Web Picture format) \u0026mdash; Excellent choice for both images and animated images Formats like WebP and AVIF are recommended as they perform much better than PNG, JPEG, GIF for both still and animated images. WebP is widely supported while AVIF lacks support in Edge.\nSVG remains the recommended format for images that must be drawn accurately at different sizes. :::\nImage loading errors # ::: section-content If an error occurs while loading or rendering an image, and an onerror event handler has been set for the error event, that event handler will get called. This can happen in several situations, including:\nThe src attribute is empty (\u0026quot;\u0026quot;) or null. The src URL is the same as the URL of the page the user is currently on. The image is corrupted in some way that prevents it from being loaded. The image's metadata is corrupted in such a way that it's impossible to retrieve its dimensions, and no dimensions were specified in the \u0026lt;img\u0026gt; element's attributes. The image is in a format not supported by the user agent. ::: Attributes # ::: section-content This element includes the global attributes.\nalt Defines text that can replace the image in the page.\n::: {#sect2 .notecard .note} Note: Browsers do not always display images. There are a number of situations in which a browser might not display images, such as:\nNon-visual browsers (such as those used by people with visual impairments) The user chooses not to display images (saving bandwidth, privacy reasons) The image is invalid or an unsupported type In these cases, the browser may replace the image with the text in the element's alt attribute. For these reasons and others, provide a useful value for alt whenever possible. :::\nSetting this attribute to an empty string (alt=\u0026quot;\u0026quot;) indicates that this image is not a key part of the content (it's decoration or a tracking pixel), and that non-visual browsers may omit it from rendering. Visual browsers will also hide the broken image icon if the alt attribute is empty and the image failed to display.\nThis attribute is also used when copying and pasting the image to text, or saving a linked image to a bookmark.\ncrossorigin Indicates if the fetching of the image must be done using a CORS request. Image data from a CORS-enabled image returned from a CORS request can be reused in the \u0026lt;canvas\u0026gt; element without being marked \u0026quot; tainted\u0026quot;.\nIf the crossorigin attribute is not specified, then a non-CORS request is sent (without the Origin request header), and the browser marks the image as tainted and restricts access to its image data, preventing its usage in \u0026lt;canvas\u0026gt; elements.\nIf the crossorigin attribute is specified, then a CORS request is sent (with the Origin request header); but if the server does not opt into allowing cross-origin access to the image data by the origin site (by not sending any Access-Control-Allow-Origin response header, or by not including the site's origin in any Access-Control-Allow-Origin response header it does send), then the browser blocks the image from loading, and logs a CORS error to the devtools console.\nAllowed values:\nanonymous A CORS request is sent with credentials omitted (that is, no cookies, X.509 certificates{target=\u0026quot;_blank\u0026quot;}, or Authorization request header).\nuse-credentials The CORS request is sent with any credentials included (that is, cookies, X.509 certificates, and the Authorization request header). If the server does not opt into sharing credentials with the origin site (by sending back the Access-Control-Allow-Credentials: true response header), then the browser marks the image as tainted and restricts access to its image data.\nIf the attribute has an invalid value, browsers handle it as if the anonymous value was used. See CORS settings attributes for additional information.\ndecoding This attribute provides a hint to the browser as to whether it should perform image decoding along with rendering the other DOM content in a single presentation step that looks more \u0026quot;correct\u0026quot; (sync), or render and present the other DOM content first and then decode the image and present it later (async). In practice, async means that the next paint does not wait for the image to decode.\nIt is often difficult to perceive any noticeable effect when using decoding on static \u0026lt;img\u0026gt; elements. They'll likely be initially rendered as empty images while the image files are fetched (either from the network or from the cache) and then handled independently anyway, so the \u0026quot;syncing\u0026quot; of content updates is less apparent. However, the blocking of rendering while decoding happens, while often quite small, can be measured \u0026mdash; even if it is difficult to observe with the human eye. See What does the image decoding attribute actually do?{target=\u0026quot;_blank\u0026quot;} for a more detailed analysis (tunetheweb.com, 2023).\nUsing different decoding types can result in more noticeable differences when dynamically inserting \u0026lt;img\u0026gt; elements into the DOM via JavaScript \u0026mdash; see HTMLImageElement.decoding for more details.\nAllowed values:\nsync Decode the image synchronously along with rendering the other DOM content, and present everything together.\nasync Decode the image asynchronously, after rendering and presenting the other DOM content.\nauto No preference for the decoding mode; the browser decides what is best for the user. This is the default value.\nelementtiming Marks the image for observation by the PerformanceElementTiming API. The value given becomes an identifier for the observed image element. See also the elementtiming attribute page.\nfetchpriority [Experimental]{.visually-hidden} Provides a hint of the relative priority to use when fetching the image. Allowed values:\nhigh Signals a high-priority fetch relative to other images.\nlow Signals a low-priority fetch relative to other images.\nauto Default: Signals automatic determination of fetch priority relative to other images.\nheight The intrinsic height of the image, in pixels. Must be an integer without a unit.\n::: {#sect3 .notecard .note} Note: Including height and width enables the aspect ratio of the image to be calculated by the browser prior to the image being loaded. This aspect ratio is used to reserve the space needed to display the image, reducing or even preventing a layout shift when the image is downloaded and painted to the screen. Reducing layout shift is a major component of good user experience and web performance. :::\nismap This Boolean attribute indicates that the image is part of a server-side map{target=\u0026quot;_blank\u0026quot;}. If so, the coordinates where the user clicked on the image are sent to the server.\n::: {#sect4 .notecard .note} Note: This attribute is allowed only if the \u0026lt;img\u0026gt; element is a descendant of an \u0026lt;a\u0026gt; element with a valid href attribute. This gives users without pointing devices a fallback destination. :::\nloading Indicates how the browser should load the image:\neager Loads the image immediately, regardless of whether or not the image is currently within the visible viewport (this is the default value).\nlazy Defers loading the image until it reaches a calculated distance from the viewport, as defined by the browser. The intent is to avoid the network and storage bandwidth needed to handle the image until it's reasonably certain that it will be needed. This generally improves the performance of the content in most typical use cases.\n::: {#sect5 .notecard .note} Note: Loading is only deferred when JavaScript is enabled. This is an anti-tracking measure, because if a user agent supported lazy loading when scripting is disabled, it would still be possible for a site to track a user's approximate scroll position throughout a session, by strategically placing images in a page's markup such that a server can track how many images are requested and when. :::\nreferrerpolicy A string indicating which referrer to use when fetching the resource:\nno-referrer: The Referer header will not be sent. no-referrer-when-downgrade: The Referer header will not be sent to origins without TLS ( HTTPS). origin: The sent referrer will be limited to the origin of the referring page: its scheme, host, and port. origin-when-cross-origin: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path. same-origin: A referrer will be sent for same origin, but cross-origin requests will contain no referrer information. strict-origin: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP). strict-origin-when-cross-origin (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP). unsafe-url: The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins. sizes One or more strings separated by commas, indicating a set of source sizes. Each source size consists of:\nA media condition. This must be omitted for the last item in the list. A source size value. Media Conditions describe properties of the viewport, not of the image. For example, (max-height: 500px) 1000px proposes to use a source of 1000px width, if the viewport is not higher than 500px.\nSource size values specify the intended display size of the image. User agents use the current source size to select one of the sources supplied by the srcset attribute, when those sources are described using width (w) descriptors. The selected source size affects the intrinsic size of the image (the image's display size if no CSS styling is applied). If the srcset attribute is absent, or contains no values with a width descriptor, then the sizes attribute has no effect.\nsrc The image URL. Mandatory for the \u0026lt;img\u0026gt; element. On browsers supporting srcset, src is treated like a candidate image with a pixel density descriptor 1x, unless an image with this pixel density descriptor is already defined in srcset, or unless srcset contains w descriptors.\nsrcset One or more strings separated by commas, indicating possible image sources for the user agent to use. Each string is composed of:\nA URL to an image Optionally, whitespace followed by one of: A width descriptor (a positive integer directly followed by w). The width descriptor is divided by the source size given in the sizes attribute to calculate the effective pixel density. A pixel density descriptor (a positive floating point number directly followed by x). If no descriptor is specified, the source is assigned the default descriptor of 1x.\nIt is incorrect to mix width descriptors and pixel density descriptors in the same srcset attribute. Duplicate descriptors (for instance, two sources in the same srcset which are both described with 2x) are also invalid.\nIf the srcset attribute uses width descriptors, the sizes attribute must also be present, or the srcset itself will be ignored.\nThe user agent selects any of the available sources at its discretion. This provides them with significant leeway to tailor their selection based on things like user preferences or bandwidth conditions. See our Responsive images tutorial for an example.\nwidth The intrinsic width of the image in pixels. Must be an integer without a unit.\nusemap The partial URL (starting with #) of an image map associated with the element.\n::: {#sect6 .notecard .note} Note: You cannot use this attribute if the \u0026lt;img\u0026gt; element is inside an \u0026lt;a\u0026gt; or \u0026lt;button\u0026gt; element. ::: :::\nDeprecated attributes # ::: section-content\nalign [Deprecated]{.visually-hidden} Aligns the image with its surrounding context. Use the float and/or vertical-align CSS properties instead of this attribute. Allowed values:\ntop Equivalent to vertical-align: top or vertical-align: text-top\nmiddle Equivalent to vertical-align: -moz-middle-with-baseline\nbottom The default, equivalent to vertical-align: unset or vertical-align: initial\nleft Equivalent to float: left\nright Equivalent to float: right\nborder [Deprecated]{.visually-hidden} The width of a border around the image. Use the border CSS property instead.\nhspace [Deprecated]{.visually-hidden} The number of pixels of white space on the left and right of the image. Use the margin CSS property instead.\nlongdesc [Deprecated]{.visually-hidden} A link to a more detailed description of the image. Possible values are a URL or an element id.\n::: {#sect7 .notecard .note} Note: This attribute is mentioned in the latest W3C version, HTML 5.2{target=\u0026quot;_blank\u0026quot;}, but has been removed from the WHATWG's HTML Living Standard{target=\u0026quot;_blank\u0026quot;}. It has an uncertain future; authors should use a WAI- ARIA alternative such as aria-describedby{target=\u0026quot;_blank\u0026quot;} or aria-details{target=\u0026quot;_blank\u0026quot;}. :::\nname [Deprecated]{.visually-hidden} A name for the element. Use the id attribute instead.\nvspace [Deprecated]{.visually-hidden} The number of pixels of white space above and below the image. Use the margin CSS property instead. :::\nStyling with CSS # ::: section-content \u0026lt;img\u0026gt; is a replaced element; it has a display value of inline by default, but its default dimensions are defined by the embedded image's intrinsic values, like it were inline-block. You can set properties like border/ border-radius, padding/ margin, width, height, etc. on an image.\n\u0026lt;img\u0026gt; has no baseline, so when images are used in an inline formatting context with vertical-align: baseline, the bottom of the image will be placed on the text baseline.\nYou can use the object-position property to position the image within the element's box, and the object-fit property to adjust the sizing of the image within the box (for example, whether the image should fit the box or fill it even if clipping is required).\nDepending on its type, an image may have an intrinsic width and height. For some image types, however, intrinsic dimensions are unnecessary. SVG images, for instance, have no intrinsic dimensions if their root \u0026lt;svg\u0026gt; element doesn't have a width or height set on it. :::\nExamples # Alternative text # ::: section-content The following example embeds an image into the page and includes alternative text for accessibility.\n::: code-example [html]{.language-name}\n\u0026lt;img src=\u0026#34;favicon144.png\u0026#34; alt=\u0026#34;MDN\u0026#34; /\u0026gt; :::\n::: {#sect8 .code-example} ::: iframe ::: ::: :::\nImage link # ::: section-content This example builds upon the previous one, showing how to turn the image into a link. To do so, nest the \u0026lt;img\u0026gt; tag inside the \u0026lt;a\u0026gt;. You should make the alternative text describe the resource the link is pointing to, as if you were using a text link instead.\n::: code-example [html]{.language-name}\n\u0026lt;a href=\u0026#34;https://developer.mozilla.org\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;favicon144.png\u0026#34; alt=\u0026#34;Visit the MDN site\u0026#34; /\u0026gt; \u0026lt;/a\u0026gt; :::\n::: {#sect9 .code-example} ::: iframe ::: ::: :::\nUsing the srcset attribute # ::: section-content In this example we include a srcset attribute with a reference to a high-resolution version of the logo; this will be loaded instead of the src image on high-resolution devices. The image referenced in the src attribute is counted as a 1x candidate in user agents that support srcset.\n::: code-example [html]{.language-name}\n\u0026lt;img src=\u0026#34;favicon72.png\u0026#34; alt=\u0026#34;MDN\u0026#34; srcset=\u0026#34;favicon144.png 2x\u0026#34; /\u0026gt; :::\n::: {#sect10 .code-example} ::: iframe ::: ::: :::\nUsing the srcset and sizes attributes # ::: section-content The src attribute is ignored in user agents that support srcset when w descriptors are included. When the (max-width: 600px) media condition matches, the 200 pixel-wide image will load (it is the one that matches 200px most closely), otherwise the other image will load.\n::: code-example [html]{.language-name}\n\u0026lt;img src=\u0026#34;clock-demo-200px.png\u0026#34; alt=\u0026#34;The time is 12:45.\u0026#34; srcset=\u0026#34;clock-demo-200px.png 200w, clock-demo-400px.png 400w\u0026#34; sizes=\u0026#34;(max-width: 600px) 200px, 50vw\u0026#34; /\u0026gt; :::\n::: {#sect11 .code-example} ::: iframe ::: :::\n::: {#sect12 .notecard .note} Note: To see the resizing in action, view the example on a separate page{target=\u0026quot;_blank\u0026quot;}, so you can actually resize the content area. ::: :::\nSecurity and privacy concerns # ::: section-content Although \u0026lt;img\u0026gt; elements have innocent uses, they can have undesirable consequences for user security and privacy. See Referer header: privacy and security concerns for more information and mitigations. :::\nAccessibility concerns # Authoring meaningful alternate descriptions # ::: section-content An alt attribute's value should provide a clear and concise text replacement for the image's content. It should not describe the presence of the image itself or the file name of the image. If the alt attribute is purposefully left off because the image has no textual equivalent, consider alternate methods to present what the image is trying to communicate.\nDon't # ::: code-example [html]{.language-name}\n\u0026lt;img alt=\u0026#34;image\u0026#34; src=\u0026#34;penguin.jpg\u0026#34; /\u0026gt; :::\nDo # ::: code-example [html]{.language-name}\n\u0026lt;img alt=\u0026#34;A Rockhopper Penguin is standing on a beach.\u0026#34; src=\u0026#34;penguin.jpg\u0026#34; /\u0026gt; :::\nWhen an alt attribute is not present on an image, some screen readers may announce the image's file name instead. This can be a confusing experience if the file name isn't representative of the image's contents.\nAn alt Decision Tree • Images • WAI Web Accessibility Tutorials{target=\u0026quot;_blank\u0026quot;} Alt-texts: The Ultimate Guide \u0026mdash; Axess Lab{target=\u0026quot;_blank\u0026quot;} How to Design Great Alt Text: An Introduction | Deque{target=\u0026quot;_blank\u0026quot;} MDN Understanding WCAG, Guideline 1.1 explanations Understanding Success Criterion 1.1.1 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} ::: Identifying SVG as an image # ::: section-content Due to a VoiceOver bug{target=\u0026quot;_blank\u0026quot;}, VoiceOver does not correctly announce SVG images as images. Include role=\u0026quot;img\u0026quot; to all \u0026lt;img\u0026gt; elements with SVG source files to ensure assistive technologies correctly announce the SVG as image content.\n::: code-example [html]{.language-name}\n\u0026lt;img src=\u0026#34;mdn.svg\u0026#34; alt=\u0026#34;MDN\u0026#34; role=\u0026#34;img\u0026#34; /\u0026gt; ::: :::\nThe title attribute # ::: section-content The title attribute is not an acceptable substitute for the alt attribute. Additionally, avoid duplicating the alt attribute's value in a title attribute declared on the same image. Doing so may cause some screen readers to announce the same text twice, creating a confusing experience.\nThe title attribute should also not be used as supplemental captioning information to accompany an image's alt description. If an image needs a caption, use the figure and figcaption elements.\nThe value of the title attribute is usually presented to the user as a tooltip, which appears shortly after the cursor stops moving over the image. While this can provide additional information to the user, you should not assume that the user will ever see it: the user may only have keyboard or touchscreen. If you have information that's particularly important or valuable for the user, present it inline using one of the methods mentioned above instead of using title.\nUsing the HTML title attribute \u0026ndash; updated | The Paciello Group{target=\u0026quot;_blank\u0026quot;} ::: Technical summary # ::: section-content\nContent categories Flow content, phrasing content, embedded content, palpable content. If the element has a usemap attribute, it also is a part of the interactive content category. Permitted content None; it is a void element. Tag omission Must have a start tag and must not have an end tag. Permitted parents Any element that accepts embedded content. Implicit ARIA role with non-empty alt attribute or no alt attribute: img with empty alt attribute: presentation Permitted ARIA roles with non-empty alt attribute: button checkbox link menuitem menuitemcheckbox menuitemradio option progressbar scrollbar separator slider switch tab treeitem with empty alt attribute, none or presentation with no alt attribute, no role permitted DOM interface HTMLImageElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-img-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari on IOS Samsung Explorer Android Android for Android Internet Android img 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nalign 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nalt 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\naspect_ratio_computed_from_attributes 79 79 71 No 66 15 79 79 79 57 15 12.0\n14--15 14--15 Safari doesn\\'t preserve space for Safari doesn\\'t preserve space for images without a valid `src`, which may images without a valid `src`, which may disrupt layouts that rely on lazy disrupt layouts that rely on lazy loading (see [bug loading (see [bug 224197](https://webkit.org/b/224197)). 224197](https://webkit.org/b/224197)). attributionsrc 117 117 No No 103 No 117 117 No No No No\nborder 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\ncrossorigin 13 12 8 Yes 15 6 4.4 18 8 14 6 1.0\ndecoding 65 ≤79 63 No 52 11.1 65 65 63 47 11.3 9.0\nfetchpriority 101 101 No No No preview 101 101 No 70 No 19.0\nheight 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nhspace 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nismap 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nloading 77 79 75 No 64 15.4 77 77 79 55 15.4 12.0\nlongdesc 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nname 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nonerror 1 ≤79 51 No 15 1 4.4 18 51 14 1 1.0\nreferrerpolicy 51 79 50 No 38 14 51 51 50 41 14 7.2\nsizes 38 12 38 Yes 25 9.1 38 38 38 25 9.3 3.0\nsrc 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nsrcset 34 ≤18 38 No 21 8 37 34 38 21 8 2.0\nusemap 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nvspace 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nwidth 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 # :::\nSee also # ::: section-content\n\u0026lt;picture\u0026gt;, \u0026lt;object\u0026gt;, and \u0026lt;embed\u0026gt; elements object-fit, object-position, image-orientation, image-rendering, and image-resolution: Image-related CSS properties. HTMLImageElement interface for this element Images in HTML Image file type and format guide Responsive images ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/img{._attribution-link} :::\n"},{"id":110,"href":"/docs/references/languages/html/element/input/","title":"Input","section":"HTML","content":" \u0026lt;input\u0026gt;: The Input (Form Input) element # ::: section-content The \u0026lt;input\u0026gt; HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The \u0026lt;input\u0026gt; element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Name (4 to 8 characters):\n\u0026lt;input type=\u0026quot;text\u0026quot; id=\u0026quot;name\u0026quot; name=\u0026quot;name\u0026quot; required minlength=\u0026quot;4\u0026quot; maxlength=\u0026quot;8\u0026quot; size=\u0026quot;10\u0026quot; /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput, label { margin: 0.4rem 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\n\u0026lt;input\u0026gt; types # ::: section-content How an \u0026lt;input\u0026gt; works varies considerably depending on the value of its type attribute, hence the different types are covered in their own separate reference pages. If this attribute is not specified, the default type adopted is text.\nThe available types are as follows:\nType Description Basic Examples button A push button with no default behavior displaying the value of the value attribute, empty by default. checkbox A check box allowing single values to be selected/deselected. color A control for specifying a color; opening a color picker when active in supporting browsers. date A control for entering a date (year, month, and day, with no time). Opens a date picker or numeric wheels for year, month, day when active in supporting browsers. datetime-local A control for entering a date and time, with no time zone. Opens a date picker or numeric wheels for date- and time-components when active in supporting browsers. email A field for editing an email address. Looks like a text input, but has validation parameters and relevant keyboard in supporting browsers and devices with dynamic keyboards. file A control that lets the user select a file. Use the accept attribute to define the types of files that the control can select. hidden A control that is not displayed but whose value is submitted to the server. There is an example in the next column, but it's hidden! image A graphical submit button. Displays an image defined by the src attribute. The alt attribute displays if the image src is missing. month A control for entering a month and year, with no time zone. number A control for entering a number. Displays a spinner and adds default validation. Displays a numeric keypad in some devices with dynamic keypads. password A single-line text field whose value is obscured. Will alert user if site is not secure. radio A radio button, allowing a single value to be selected out of multiple choices with the same name value. range A control for entering a number whose exact value is not important. Displays as a range widget defaulting to the middle value. Used in conjunction min and max to define the range of acceptable values. reset A button that resets the contents of the form to default values. Not recommended. search A single-line text field for entering search strings. Line-breaks are automatically removed from the input value. May include a delete icon in supporting browsers that can be used to clear the field. Displays a search icon instead of enter key on some devices with dynamic keypads. submit A button that submits the form. tel A control for entering a telephone number. Displays a telephone keypad in some devices with dynamic keypads. text The default value. A single-line text field. Line-breaks are automatically removed from the input value. time A control for entering a time value with no time zone. url A field for entering a URL. Looks like a text input, but has validation parameters and relevant keyboard in supporting browsers and devices with dynamic keyboards. week A control for entering a date consisting of a week-year number and a week number with no time zone. Obsolete values datetime Deprecated A control for entering a date and time (hour, minute, second, and fraction of a second) based on UTC time zone. ::: Attributes # ::: section-content The \u0026lt;input\u0026gt; element is so powerful because of its attributes; the type attribute, described with examples above, being the most important. Since every \u0026lt;input\u0026gt; element, regardless of type, is based on the HTMLInputElement interface, they technically share the exact same set of attributes. However, in reality, most attributes have an effect on only a specific subset of input types. In addition, the way some attributes impact an input depends on the input type, impacting different input types in different ways.\nThis section provides a table listing all the attributes with a brief description. This table is followed by a list describing each attribute in greater detail, along with which input types they are associated with. Those that are common to most or all input types are defined in greater detail below. Attributes that are unique to particular input types\u0026mdash;or attributes which are common to all input types but have special behaviors when used on a given input type\u0026mdash;are instead documented on those types' pages.\nAttributes for the \u0026lt;input\u0026gt; element include the global HTML attributes and additionally:\nAttribute Type or Types Description accept file Hint for expected file type in file upload controls alt image alt attribute for the image type. Required for accessibility autocomplete all except checkbox, radio, and buttons Hint for form autofill feature capture file Media capture input method in file upload controls checked checkbox, radio Whether the command or control is checked dirname hidden, text, search, url, tel, email Name of form field to use for sending the element's directionality in form submission disabled all Whether the form control is disabled form all Associates the control with a form element formaction image, submit URL to use for form submission formenctype image, submit Form data set encoding type to use for form submission formmethod image, submit HTTP method to use for form submission formnovalidate image, submit Bypass form control validation for form submission formtarget image, submit Browsing context for form submission height image Same as height attribute for \u0026lt;img\u0026gt;; vertical dimension list all except hidden, password, checkbox, radio, and buttons Value of the id attribute of the \u0026lt;datalist\u0026gt; of autocomplete options max date, month, week, time, datetime-local, number, range Maximum value maxlength text, search, url, tel, email, password Maximum length (number of characters) of value min date, month, week, time, datetime-local, number, range Minimum value minlength text, search, url, tel, email, password Minimum length (number of characters) of value multiple email, file Boolean. Whether to allow multiple values name all Name of the form control. Submitted with the form as part of a name/value pair pattern text, search, url, tel, email, password Pattern the value must match to be valid placeholder text, search, url, tel, email, password, number Text that appears in the form control when it has no value set popovertarget button Designates an \u0026lt;input type=\"button\"\u0026gt; as a control for a popover element popovertargetaction button Specifies the action that a popover control should perform readonly all except hidden, range, color, checkbox, radio, and buttons Boolean. The value is not editable required all except hidden, range, color, and buttons Boolean. A value is required or must be checked for the form to be submittable size text, search, url, tel, email, password Size of the control src image Same as src attribute for \u0026lt;img\u0026gt;; address of image resource step date, month, week, time, datetime-local, number, range Incremental values that are valid type all Type of form control value all except image The initial value of the control width image Same as width attribute for \u0026lt;img\u0026gt; A few additional non-standard attributes are listed following the descriptions of the standard attributes. :::\nIndividual attributes # ::: section-content\naccept Valid for the file input type only, the accept attribute defines which file types are selectable in a file upload control. See the file input type.\nalt Valid for the image button only, the alt attribute provides alternative text for the image, displaying the value of the attribute if the image src is missing or otherwise fails to load. See the image input type.\nautocomplete (Not a Boolean attribute!) The autocomplete attribute takes as its value a space-separated string that describes what, if any, type of autocomplete functionality the input should provide. A typical implementation of autocomplete recalls previous values entered in the same input field, but more complex forms of autocomplete can exist. For instance, a browser could integrate with a device's contacts list to autocomplete email addresses in an email input field. See autocomplete for permitted values.\nThe autocomplete attribute is valid on hidden, text, search, url, tel, email, date, month, week, time, datetime-local, number, range, color, and password. This attribute has no effect on input types that do not return numeric or text data, being valid for all input types except checkbox, radio, file, or any of the button types.\nSee the autocomplete attribute for additional information, including information on password security and how autocomplete is slightly different for hidden than for other input types.\nautofocus A Boolean attribute which, if present, indicates that the input should automatically have focus when the page has finished loading (or when the \u0026lt;dialog\u0026gt; containing the element has been displayed).\n::: {#sect24 .notecard .note} Note: An element with the autofocus attribute may gain focus before the DOMContentLoaded event is fired. :::\nNo more than one element in the document may have the autofocus attribute. If put on more than one element, the first one with the attribute receives focus.\nThe autofocus attribute cannot be used on inputs of type hidden, since hidden inputs cannot be focused.\n::: {#sect25 .notecard .warning} Warning: Automatically focusing a form control can confuse visually-impaired people using screen-reading technology and people with cognitive impairments. When autofocus is assigned, screen-readers \u0026quot;teleport\u0026quot; their user to the form control without warning them beforehand. :::\nUse careful consideration for accessibility when applying the autofocus attribute. Automatically focusing on a control can cause the page to scroll on load. The focus can also cause dynamic keyboards to display on some touch devices. While a screen reader will announce the label of the form control receiving focus, the screen reader will not announce anything before the label, and the sighted user on a small device will equally miss the context created by the preceding content.\ncapture Introduced in the HTML Media Capture specification and valid for the file input type only, the capture attribute defines which media\u0026mdash;microphone, video, or camera\u0026mdash;should be used to capture a new file for upload with file upload control in supporting scenarios. See the file input type.\nchecked Valid for both radio and checkbox types, checked is a Boolean attribute. If present on a radio type, it indicates that the radio button is the currently selected one in the group of same-named radio buttons. If present on a checkbox type, it indicates that the checkbox is checked by default (when the page loads). It does not indicate whether this checkbox is currently checked: if the checkbox's state is changed, this content attribute does not reflect the change. (Only the HTMLInputElement's checked IDL attribute is updated.)\n::: {#sect26 .notecard .note} Note: Unlike other input controls, a checkboxes and radio buttons value are only included in the submitted data if they are currently checked. If they are, the name and the value(s) of the checked controls are submitted.\nFor example, if a checkbox whose name is fruit has a value of cherry, and the checkbox is checked, the form data submitted will include fruit=cherry. If the checkbox isn't active, it isn't listed in the form data at all. The default value for checkboxes and radio buttons is on. :::\ndirname Valid for hidden, text, search, url, tel, and email input types, the dirname attribute enables the submission of the directionality of the element. When included, the form control will submit with two name/value pairs: the first being the name and value, and the second being the value of the dirname attribute as the name, with a value of ltr or rtl as set by the browser.\n::: code-example [html]{.language-name}\n\u0026lt;form action=\u0026#34;page.html\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;label\u0026gt; Fruit: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;fruit\u0026#34; dirname=\u0026#34;fruit-dir\u0026#34; value=\u0026#34;cherry\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;!-- page.html?fruit=cherry\u0026amp;fruit-dir=ltr --\u0026gt; :::\nWhen the form above is submitted, the input cause both the name / value pair of fruit=cherry and the dirname / direction pair of fruit-dir=ltr to be sent. For more information, see the dirname attribute.\ndisabled A Boolean attribute which, if present, indicates that the user should not be able to interact with the input. Disabled inputs are typically rendered with a dimmer color or using some other form of indication that the field is not available for use.\nSpecifically, disabled inputs do not receive the click event, and disabled inputs are not submitted with the form.\n::: {#sect27 .notecard .note} Note: Although not required by the specification, Firefox will by default persist the dynamic disabled state{target=\u0026quot;_blank\u0026quot;} of an \u0026lt;input\u0026gt; across page loads. Use the autocomplete attribute to control this feature. :::\nform A string specifying the \u0026lt;form\u0026gt; element with which the input is associated (that is, its form owner). This string's value, if present, must match the id of a \u0026lt;form\u0026gt; element in the same document. If this attribute isn't specified, the \u0026lt;input\u0026gt; element is associated with the nearest containing form, if any.\nThe form attribute lets you place an input anywhere in the document but have it included with a form elsewhere in the document.\n::: {#sect28 .notecard .note} Note: An input can only be associated with one form. :::\nformaction Valid for the image and submit input types only. See the submit input type for more information.\nformenctype Valid for the image and submit input types only. See the submit input type for more information.\nformmethod Valid for the image and submit input types only. See the submit input type for more information.\nformnovalidate Valid for the image and submit input types only. See the submit input type for more information.\nformtarget Valid for the image and submit input types only. See the submit input type for more information.\nheight Valid for the image input button only, the height is the height of the image file to display to represent the graphical submit button. See the image input type.\nid Global attribute valid for all elements, including all the input types, it defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking. The value is used as the value of the \u0026lt;label\u0026gt;'s for attribute to link the label with the form control. See \u0026lt;label\u0026gt;.\ninputmode Global value valid for all elements, it provides a hint to browsers as to the type of virtual keyboard configuration to use when editing this element or its contents. Values include none, text, tel, url, email, numeric, decimal, and search.\nlist The value given to the list attribute should be the id of a \u0026lt;datalist\u0026gt; element located in the same document. The \u0026lt;datalist\u0026gt; provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the type are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value.\nIt is valid on text, search, url, tel, email, date, month, week, time, datetime-local, number, range, and color.\nPer the specifications, the list attribute is not supported by the hidden, password, checkbox, radio, file, or any of the button types.\nDepending on the browser, the user may see a custom color palette suggested, tic marks along a range, or even an input that opens like a \u0026lt;select\u0026gt; but allows for non-listed values. Check out the browser compatibility table for the other input types.\nSee the \u0026lt;datalist\u0026gt; element.\nmax Valid for date, month, week, time, datetime-local, number, and range, it defines the greatest value in the range of permitted values. If the value entered into the element exceeds this, the element fails constraint validation. If the value of the max attribute isn't a number, then the element has no maximum value.\nThere is a special case: if the data type is periodic (such as for dates or times), the value of max may be lower than the value of min, which indicates that the range may wrap around; for example, this allows you to specify a time range from 10 PM to 4 AM.\nmaxlength Valid for text, search, url, tel, email, and password, it defines the maximum string length (measured in UTF-16 code units) that the user can enter into the field. This must be an integer value of 0 or higher. If no maxlength is specified, or an invalid value is specified, the field has no maximum length. This value must also be greater than or equal to the value of minlength.\nThe input will fail constraint validation if the length of the text entered into the field is greater than maxlength UTF-16 code units long. By default, browsers prevent users from entering more characters than allowed by the maxlength attribute. See Client-side validation for more information.\nmin Valid for date, month, week, time, datetime-local, number, and range, it defines the most negative value in the range of permitted values. If the value entered into the element is less than this, the element fails constraint validation. If the value of the min attribute isn't a number, then the element has no minimum value.\nThis value must be less than or equal to the value of the max attribute. If the min attribute is present but is not specified or is invalid, no min value is applied. If the min attribute is valid and a non-empty value is less than the minimum allowed by the min attribute, constraint validation will prevent form submission. See Client-side validation for more information.\nThere is a special case: if the data type is periodic (such as for dates or times), the value of max may be lower than the value of min, which indicates that the range may wrap around; for example, this allows you to specify a time range from 10 PM to 4 AM.\nminlength Valid for text, search, url, tel, email, and password, it defines the minimum string length (measured in UTF-16 code units) that the user can enter into the entry field. This must be a non-negative integer value smaller than or equal to the value specified by maxlength. If no minlength is specified, or an invalid value is specified, the input has no minimum length.\nThe input will fail constraint validation if the length of the text entered into the field is fewer than minlength UTF-16 code units long, preventing form submission. See Client-side validation for more information.\nmultiple The Boolean multiple attribute, if set, means the user can enter comma separated email addresses in the email widget or can choose more than one file with the file input. See the email and file input type.\nname A string specifying a name for the input control. This name is submitted along with the control's value when the form data is submitted.\nConsider the name a required attribute (even though it's not). If an input has no name specified, or name is empty, the input's value is not submitted with the form! (Disabled controls, unchecked radio buttons, unchecked checkboxes, and reset buttons are also not sent.)\nThere are two special cases:\n_charset_ : If used as the name of an \u0026lt;input\u0026gt; element of type hidden, the input's value is automatically set by the user agent to the character encoding being used to submit the form. isindex: For historical reasons, the name isindex{target=\u0026quot;_blank\u0026quot;} is not allowed. The name attribute creates a unique behavior for radio buttons.\nOnly one radio button in a same-named group of radio buttons can be checked at a time. Selecting any radio button in that group automatically deselects any currently-selected radio button in the same group. The value of that one checked radio button is sent along with the name if the form is submitted,\nWhen tabbing into a series of same-named group of radio buttons, if one is checked, that one will receive focus. If they aren't grouped together in source order, if one of the group is checked, tabbing into the group starts when the first one in the group is encountered, skipping all those that aren't checked. In other words, if one is checked, tabbing skips the unchecked radio buttons in the group. If none are checked, the radio button group receives focus when the first button in the same name group is reached.\nOnce one of the radio buttons in a group has focus, using the arrow keys will navigate through all the radio buttons of the same name, even if the radio buttons are not grouped together in the source order.\nWhen an input element is given a name, that name becomes a property of the owning form element's HTMLFormElement.elements property. If you have an input whose name is set to guest and another whose name is hat-size, the following code can be used:\n::: code-example [js]{.language-name}\nlet form = document.querySelector(\u0026#34;form\u0026#34;); let guestName = form.elements.guest; let hatSize = form.elements[\u0026#34;hat-size\u0026#34;]; :::\nWhen this code has run, guestName will be the HTMLInputElement for the guest field, and hatSize the object for the hat-size field.\n::: {#sect29 .notecard .warning} Warning: Avoid giving form elements a name that corresponds to a built-in property of the form, since you would then override the predefined property or method with this reference to the corresponding input. :::\npattern Valid for text, search, url, tel, email, and password, the pattern attribute defines a regular expression that the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression, as used by the RegExp type, and as documented in our guide on regular expressions; the 'u' flag is specified when compiling the regular expression, so that the pattern is treated as a sequence of Unicode code points, instead of as ASCII. No forward slashes should be specified around the pattern text.\nIf the pattern attribute is present but is not specified or is invalid, no regular expression is applied and this attribute is ignored completely. If the pattern attribute is valid and a non-empty value does not match the pattern, constraint validation will prevent form submission.\n::: {#sect30 .notecard .note} Note: If using the pattern attribute, inform the user about the expected format by including explanatory text nearby. You can also include a title attribute to explain what the requirements are to match the pattern; most browsers will display this title as a tooltip. The visible explanation is required for accessibility. The tooltip is an enhancement. :::\nSee Client-side validation for more information.\nplaceholder Valid for text, search, url, tel, email, password, and number, the placeholder attribute provides a brief hint to the user as to what kind of information is expected in the field. It should be a word or short phrase that provides a hint as to the expected type of data, rather than an explanation or prompt. The text must not include carriage returns or line feeds. So for example if a field is expected to capture a user's first name, and its label is \u0026quot;First Name\u0026quot;, a suitable placeholder might be \u0026quot;e.g. Mustafa\u0026quot;.\n::: {#sect31 .notecard .note} Note: The placeholder attribute is not as semantically useful as other ways to explain your form, and can cause unexpected technical issues with your content. See Labels for more information. :::\npopovertarget Turns an \u0026lt;input type=\u0026quot;button\u0026quot;\u0026gt; element into a popover control button; takes the ID of the popover element to control as its value. See the Popover API landing page for more details.\npopovertargetaction Specifies the action to be performed on a popover element being controlled by a control \u0026lt;input type=\u0026quot;button\u0026quot;\u0026gt;. Possible values are:\n\u0026quot;hide\u0026quot; The button will hide a shown popover. If you try to hide an already hidden popover, no action will be taken.\n\u0026quot;show\u0026quot; The button will show a hidden popover. If you try to show an already showing popover, no action will be taken.\n\u0026quot;toggle\u0026quot; The button will toggle a popover between showing and hidden. If the popover is hidden, it will be shown; if the popover is showing, it will be hidden. If popovertargetaction is omitted, \u0026quot;toggle\u0026quot; is the default action that will be performed by the control button.\nreadonly A Boolean attribute which, if present, indicates that the user should not be able to edit the value of the input. The readonly attribute is supported by the text, search, url, tel, email, date, month, week, time, datetime-local, number, and password input types.\nSee the HTML attribute: readonly for more information.\nrequired required is a Boolean attribute which, if present, indicates that the user must specify a value for the input before the owning form can be submitted. The required attribute is supported by text, search, url, tel, email, date, month, week, time, datetime-local, number, password, checkbox, radio, and file inputs.\nSee Client-side validation and the HTML attribute: required for more information.\nsize Valid for email, password, tel, url, and text, the size attribute specifies how much of the input is shown. Basically creates same result as setting CSS width property with a few specialities. The actual unit of the value depends on the input type. For password and text, it is a number of characters (or em units) with a default value of 20, and for others, it is pixels (or px units). CSS width takes precedence over the size attribute.\nsrc Valid for the image input button only, the src is string specifying the URL of the image file to display to represent the graphical submit button. See the image input type.\nstep Valid for date, month, week, time, datetime-local, number, and range, the step attribute is a number that specifies the granularity that the value must adhere to.\nIf not explicitly included:\nstep defaults to 1 for number and range. Each date/time input type has a default step value appropriate for the type; see the individual input pages: date, datetime-local, month, time, and week. The value must be a positive number\u0026mdash;integer or float\u0026mdash;or the special value any, which means no stepping is implied, and any value is allowed (barring other constraints, such as min and max).\nIf any is not explicitly set, valid values for the number, date/time input types, and range input types are equal to the basis for stepping \u0026mdash; the min value and increments of the step value, up to the max value, if specified.\nFor example, if you have \u0026lt;input type=\u0026quot;number\u0026quot; min=\u0026quot;10\u0026quot; step=\u0026quot;2\u0026quot;\u0026gt;, then any even integer, 10 or greater, is valid. If omitted, \u0026lt;input type=\u0026quot;number\u0026quot;\u0026gt;, any integer is valid, but floats (like 4.2) are not valid, because step defaults to 1. For 4.2 to be valid, step would have had to be set to any, 0.1, 0.2, or any the min value would have had to be a number ending in .2, such as \u0026lt;input type=\u0026quot;number\u0026quot; min=\u0026quot;-5.2\u0026quot;\u0026gt;\n::: {#sect32 .notecard .note} Note: When the data entered by the user doesn't adhere to the stepping configuration, the value is considered invalid in constraint validation and will match the :invalid pseudoclass. :::\nSee Client-side validation for more information.\ntabindex Global attribute valid for all elements, including all the input types, an integer attribute indicating if the element can take input focus (is focusable), if it should participate to sequential keyboard navigation. As all input types except for input of type hidden are focusable, this attribute should not be used on form controls, because doing so would require the management of the focus order for all elements within the document with the risk of harming usability and accessibility if done incorrectly.\ntitle Global attribute valid for all elements, including all input types, containing a text representing advisory information related to the element it belongs to. Such information can typically, but not necessarily, be presented to the user as a tooltip. The title should NOT be used as the primary explanation of the purpose of the form control. Instead, use the \u0026lt;label\u0026gt; element with a for attribute set to the form control's id attribute. See Labels below.\ntype A string specifying the type of control to render. For example, to create a checkbox, a value of checkbox is used. If omitted (or an unknown value is specified), the input type text is used, creating a plaintext input field.\nPermitted values are listed in Input types above.\nvalue The input control's value. When specified in the HTML, this is the initial value, and from then on it can be altered or retrieved at any time using JavaScript to access the respective HTMLInputElement object's value property. The value attribute is always optional, though should be considered mandatory for checkbox, radio, and hidden.\nwidth Valid for the image input button only, the width is the width of the image file to display to represent the graphical submit button. See the image input type. :::\nNon-standard attributes # ::: section-content The following non-standard attributes are also available on some browsers. As a general rule, you should avoid using them unless it can't be helped.\nAttribute Description autocapitalize A string indicating how auto-capitalization should be applied to the content of text elements. Safari only. autocorrect A string indicating whether autocorrect is on or off. Safari only. incremental Whether or not to send repeated search events to allow updating live search results while the user is still editing the value of the field. WebKit and Blink only (Safari, Chrome, Opera, etc.). mozactionhint Deprecated A string indicating the type of action that will be taken when the user presses the Enter or Return key while editing the field; this is used to determine an appropriate label for that key on a virtual keyboard. Since this attribute is deprecated, use enterkeyhint instead.\norient Sets the orientation of the range slider. Firefox only. results The maximum number of items that should be displayed in the drop-down list of previous search queries. Safari only. webkitdirectory A Boolean indicating whether to only allow the user to choose a directory (or directories, if multiple is also present) autocapitalize [Non-standard]{.visually-hidden} (Safari only). A string which indicates how auto-capitalization should be applied while the user is editing this field. Permitted values are:\nnone Do not automatically capitalize any text\nsentences Automatically capitalize the first character of each sentence.\nwords Automatically capitalize the first character of each word.\ncharacters Automatically capitalize every character.\nautocorrect [Non-standard]{.visually-hidden} (Safari only). A string which indicates whether to activate automatic correction while the user is editing this field. Permitted values are:\non Enable automatic correction of typos, as well as processing of text substitutions if any are configured.\noff Disable automatic correction and text substitutions.\nincremental [Non-standard]{.visually-hidden} The Boolean attribute incremental is a WebKit and Blink extension (so supported by Safari, Opera, Chrome, etc.) which, if present, tells the user agent to process the input as a live search. As the user edits the value of the field, the user agent sends search events to the HTMLInputElement object representing the search box. This allows your code to update the search results in real time as the user edits the search.\nIf incremental is not specified, the search event is only sent when the user explicitly initiates a search (such as by pressing the [Enter]{.kbd} or [Return]{.kbd} key while editing the field).\nThe search event is rate-limited so that it is not sent more frequently than an implementation-defined interval.\norient [Non-standard]{.visually-hidden} Similar to the -moz-orient non-standard CSS property impacting the \u0026lt;progress\u0026gt; and \u0026lt;meter\u0026gt; elements, the orient attribute defines the orientation of the range slider. Values include horizontal, meaning the range is rendered horizontally, and vertical, where the range is rendered vertically.\nresults [Non-standard]{.visually-hidden} The results attribute\u0026mdash;supported only by Safari\u0026mdash;is a numeric value that lets you override the maximum number of entries to be displayed in the \u0026lt;input\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} element's natively-provided drop-down menu of previous search queries.\nThe value must be a non-negative decimal number. If not provided, or an invalid value is given, the browser's default maximum number of entries is used.\nwebkitdirectory [Non-standard]{.visually-hidden} The Boolean webkitdirectory attribute, if present, indicates that only directories should be available to be selected by the user in the file picker interface. See HTMLInputElement.webkitdirectory for additional details and examples.\nThough originally implemented only for WebKit-based browsers, webkitdirectory is also usable in Microsoft Edge as well as Firefox 50 and later. However, even though it has relatively broad support, it is still not standard and should not be used unless you have no alternative. :::\nMethods # ::: section-content The following methods are provided by the HTMLInputElement interface which represents \u0026lt;input\u0026gt; elements in the DOM. Also available are those methods specified by the parent interfaces, HTMLElement, Element, Node, and EventTarget.\ncheckValidity() Returns true if the element's value passes validity checks; otherwise, returns false and fires an invalid event at the element.\nreportValidity() Returns true if the element's value passes validity checks; otherwise, returns false, fires an invalid event at the element, and (if the event isn't canceled) reports the problem to the user.\nselect() Selects the entire content of the \u0026lt;input\u0026gt; element, if the element's content is selectable. For elements with no selectable text content (such as a visual color picker or calendar date input), this method does nothing.\nsetCustomValidity() Sets a custom message to display if the input element's value isn't valid.\nsetRangeText() Sets the contents of the specified range of characters in the input element to a given string. A selectMode parameter is available to allow controlling how the existing content is affected.\nsetSelectionRange() Selects the specified range of characters within a textual input element. Does nothing for inputs which aren't presented as text input fields.\nshowPicker() Displays the browser picker for the input element that would normally be displayed when the element is selected, but triggered from a button press or other user interaction.\nstepDown() Decrements the value of a numeric input by one, by default, or by the specified number of units.\nstepUp() Increments the value of a numeric input by one or by the specified number of units. :::\nCSS # ::: section-content Inputs, being replaced elements, have a few features not applicable to non form elements. There are CSS selectors that can specifically target form controls based on their UI features, also known as UI pseudo-classes. The input element can also be targeted by type with attribute selectors. There are some properties that are especially useful as well. :::\nUI pseudo-classes # ::: section-content\nCaptions super relevant to the \u0026lt;input\u0026gt; element: Pseudo-class Description :enabled Any currently enabled element that can be activated (selected, clicked on, typed into, etc.) or accept focus and also has a disabled state, in which it can't be activated or accept focus. :disabled Any currently disabled element that has an enabled state, meaning it otherwise could be activated (selected, clicked on, typed into, etc.) or accept focus were it not disabled. :read-only Element not editable by the user :read-write Element that is editable by the user. :placeholder-shown Element that is currently displaying placeholder text, including \u0026lt;input\u0026gt; and \u0026lt;textarea\u0026gt; elements with the placeholder attribute present that has, as yet, no value. :default Form elements that are the default in a group of related elements. Matches checkbox and radio input types that were checked on page load or render. :checked Matches checkbox and radio input types that are currently checked (and the (\u0026lt;option\u0026gt; in a \u0026lt;select\u0026gt; that is currently selected). :indeterminate checkbox elements whose indeterminate property is set to true by JavaScript, radio elements, when all radio buttons with the same name value in the form are unchecked, and \u0026lt;progress\u0026gt; elements in an indeterminate state :valid Form controls that can have constraint validation applied and are currently valid. :invalid Form controls that have constraint validation applied and are currently not valid. Matches a form control whose value doesn't match the constraints set on it by its attributes, such as required, pattern, step and max. :in-range A non-empty input whose current value is within the range limits specified by the min and max attributes and the step. :out-of-range A non-empty input whose current value is NOT within the range limits specified by the min and max attributes or does not adhere to the step constraint. :required \u0026lt;input\u0026gt;, \u0026lt;select\u0026gt;, or \u0026lt;textarea\u0026gt; element that has the required attribute set on it. Only matches elements that can be required. The attribute included on a non-requirable element will not make for a match. :optional \u0026lt;input\u0026gt;, \u0026lt;select\u0026gt;, or \u0026lt;textarea\u0026gt; element that does NOT have the required attribute set on it. Does not match elements that can't be required. :blank \u0026lt;input\u0026gt; and \u0026lt;textarea\u0026gt; elements that currently have no value. :user-invalid Similar to :invalid, but is activated on blur. Matches invalid input but only after the user interaction, such as by focusing on the control, leaving the control, or attempting to submit the form containing the invalid control. Pseudo-classes example # We can style a checkbox label based on whether the checkbox is checked or not. In this example, we are styling the color and font-weight of the \u0026lt;label\u0026gt; that comes immediately after a checked input. We haven't applied any styles if the input is not checked.\n::: code-example [css]{.language-name}\ninput:checked + label { color: red; font-weight: bold; } :::\n::: {#sect33 .code-example} ::: iframe ::: ::: :::\nAttribute selectors # ::: section-content It is possible to target different types of form controls based on their type using attribute selectors. CSS attribute selectors match elements based on either just the presence of an attribute or the value of a given attribute.\n::: code-example [css]{.language-name}\n/* matches a password input */ input[type=\u0026#34;password\u0026#34;] { } /* matches a form control whose valid values are limited to a range of values*/ input[min][max] { } /* matches a form control with a pattern attribute */ input[pattern] { } ::: :::\n::placeholder # ::: section-content By default, the appearance of placeholder text is a translucent or light gray. The ::placeholder pseudo-element is the input's placeholder text. It can be styled with a limited subset of CSS properties.\n::: code-example [css]{.language-name}\n::placeholder { color: blue; } :::\nOnly the subset of CSS properties that apply to the ::first-line pseudo-element can be used in a rule using ::placeholder in its selector. :::\nappearance # ::: section-content The appearance property enables the displaying of (almost) any element as a platform-native style based on the operating system's theme as well as the removal of any platform-native styling with the none value.\nYou could make a `` look like a radio button with div {appearance: radio;} or a radio look like a checkbox with [type=\u0026quot;radio\u0026quot;] {appearance: checkbox;}, but don't.\nSetting appearance: none removes platform native borders, but not functionality. :::\ncaret-color # ::: section-content A property specific to text entry-related elements is the CSS caret-color property, which lets you set the color used to draw the text input caret:\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;textInput\u0026#34;\u0026gt;Note the red caret:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;textInput\u0026#34; class=\u0026#34;custom\u0026#34; size=\u0026#34;32\u0026#34; /\u0026gt; :::\nCSS # ::: code-example [css]{.language-name}\ninput.custom { caret-color: red; font: 16px \u0026#34;Helvetica\u0026#34;, \u0026#34;Arial\u0026#34;, \u0026#34;sans-serif\u0026#34;; } :::\nResult # ::: {#sect34 .code-example} ::: iframe ::: ::: :::\nobject-position and object-fit # ::: section-content In certain cases (typically involving non-textual inputs and specialized interfaces), the \u0026lt;input\u0026gt; element is a replaced element. When it is, the position and size of the element's size and positioning within its frame can be adjusted using the CSS object-position and object-fit properties :::\nStyling # ::: section-content For more information about adding color to elements in HTML, see:\nApplying color to HTML elements using CSS. Also see:\nStyling HTML forms Advanced styling for HTML forms and the compatibility table of CSS properties. ::: Additional features # Labels # ::: section-content Labels are needed to associate assistive text with an \u0026lt;input\u0026gt;. The \u0026lt;label\u0026gt; element provides explanatory information about a form field that is always appropriate (aside from any layout concerns you have). It's never a bad idea to use a \u0026lt;label\u0026gt; to explain what should be entered into an \u0026lt;input\u0026gt; or \u0026lt;textarea\u0026gt;.\nAssociated labels # The semantic pairing of \u0026lt;input\u0026gt; and \u0026lt;label\u0026gt; elements is useful for assistive technologies such as screen readers. By pairing them using the \u0026lt;label\u0026gt;'s for attribute, you bond the label to the input in a way that lets screen readers describe inputs to users more precisely.\nIt does not suffice to have plain text adjacent to the \u0026lt;input\u0026gt; element. Rather, usability and accessibility requires the inclusion of either implicit or explicit \u0026lt;label\u0026gt;:\n::: code-example [html]{.language-name}\n\u0026lt;!-- inaccessible --\u0026gt; \u0026lt;p\u0026gt;Enter your name: \u0026lt;input id=\u0026#34;name\u0026#34; type=\u0026#34;text\u0026#34; size=\u0026#34;30\u0026#34; /\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;!-- implicit label --\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label\u0026gt;Enter your name: \u0026lt;input id=\u0026#34;name\u0026#34; type=\u0026#34;text\u0026#34; size=\u0026#34;30\u0026#34; /\u0026gt;\u0026lt;/label\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;!-- explicit label --\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Enter your name: \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;name\u0026#34; type=\u0026#34;text\u0026#34; size=\u0026#34;30\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; :::\nThe first example is inaccessible: no relationship exists between the prompt and the \u0026lt;input\u0026gt; element.\nIn addition to an accessible name, the label provides a larger 'hit' area for mouse and touch screen users to click on or touch. By pairing a \u0026lt;label\u0026gt; with an \u0026lt;input\u0026gt;, clicking on either one will focus the \u0026lt;input\u0026gt;. If you use plain text to \u0026quot;label\u0026quot; your input, this won't happen. Having the prompt part of the activation area for the input is helpful for people with motor control conditions.\nAs web developers, it's important that we never assume that people will know all the things that we know. The diversity of people using the web\u0026mdash;and by extension your website\u0026mdash;practically guarantees that some of your site's visitors will have some variation in thought processes and/or circumstances that leads them to interpret your forms very differently from you without clear and properly-presented labels.\nPlaceholders are not accessible # The placeholder attribute lets you specify text that appears within the \u0026lt;input\u0026gt; element's content area itself when it is empty. The placeholder should never be required to understand your forms. It is not a label, and should not be used as a substitute, because it isn't. The placeholder is used to provide a hint as to what an inputted value should look like, not an explanation or prompt.\nNot only is the placeholder not accessible to screen readers, but once the user enters any text into the form control, or if the form control already has a value, the placeholder disappears. Browsers with automatic page translation features may skip over attributes when translating, meaning the placeholder may not get translated.\n::: {#sect35 .notecard .note} Note: Don't use the placeholder attribute if you can avoid it. If you need to label an \u0026lt;input\u0026gt; element, use the \u0026lt;label\u0026gt; element. ::: :::\nClient-side validation # ::: section-content ::: {#sect36 .notecard .warning} Warning: Client-side validation is useful, but it does not guarantee that the server will receive valid data. If the data must be in a specific format, always verify it also on the server-side, and return a 400 HTTP response if the format is invalid. :::\nIn addition to using CSS to style inputs based on the :valid or :invalid UI states based on the current state of each input, as noted in the UI pseudo-classes section above, the browser provides for client-side validation on (attempted) form submission. On form submission, if there is a form control that fails constraint validation, supporting browsers will display an error message on the first invalid form control; displaying a default message based on the error type, or a message set by you.\nSome input types and other attributes place limits on what values are valid for a given input. For example, \u0026lt;input type=\u0026quot;number\u0026quot; min=\u0026quot;2\u0026quot; max=\u0026quot;10\u0026quot; step=\u0026quot;2\u0026quot;\u0026gt; means only the number 2, 4, 6, 8, or 10 are valid. Several errors could occur, including a rangeUnderflow error if the value is less than 2, rangeOverflow if greater than 10, stepMismatch if the value is a number between 2 and 10, but not an even integer (does not match the requirements of the step attribute), or typeMismatch if the value is not a number.\nFor the input types whose domain of possible values is periodic (that is, at the highest possible value, the values wrap back around to the beginning rather than ending), it's possible for the values of the max and min properties to be reversed, which indicates that the range of permitted values starts at min, wraps around to the lowest possible value, then continues on until max is reached. This is particularly useful for dates and times, such as when you want to allow the range to be from 8 PM to 8 AM:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;time\u0026#34; min=\u0026#34;20:00\u0026#34; max=\u0026#34;08:00\u0026#34; name=\u0026#34;overnight\u0026#34; /\u0026gt; :::\nSpecific attributes and their values can lead to a specific error ValidityState:\nValidity object errors depend on the \u0026lt;input\u0026gt; attributes and their values: Attribute Relevant property Description max validityState.rangeOverflow Occurs when the value is greater than the maximum value as defined by the max attribute maxlength validityState.tooLong Occurs when the number of characters is greater than the number allowed by the maxlength property min validityState.rangeUnderflow Occurs when the value is less than the minimum value as defined by the min attribute minlength validityState.tooShort Occurs when the number of characters is less than the number required by the minlength property pattern validityState.patternMismatch Occurs when a pattern attribute is included with a valid regular expression and the value does not match it. required validityState.valueMissing Occurs when the required attribute is present but the value is null or radio or checkbox is not checked. step validityState.stepMismatch The value doesn't match the step increment. Increment default is 1, so only integers are valid on type=\"number\" is step is not included. step=\"any\" will never throw this error. type validityState.typeMismatch Occurs when the value is not of the correct type, for example an email does not contain an @ or a url doesn't contain a protocol. If a form control doesn't have the required attribute, no value, or an empty string, is not invalid. Even if the above attributes are present, with the exception of required, an empty string will not lead to an error.\nWe can set limits on what values we accept, and supporting browsers will natively validate these form values and alert the user if there is a mistake when the form is submitted.\nIn addition to the errors described in the table above, the validityState interface contains the badInput, valid, and customError boolean readonly properties. The validity object includes:\nvalidityState.valueMissing validityState.typeMismatch validityState.patternMismatch validityState.tooLong validityState.tooShort validityState.rangeUnderflow validityState.rangeOverflow validityState.stepMismatch validityState.badInput validityState.valid validityState.customError For each of these Boolean properties, a value of true indicates that the specified reason validation may have failed is true, with the exception of the valid property, which is true if the element's value obeys all constraints.\nIf there is an error, supporting browsers will both alert the user and prevent the form from being submitted. A word of caution: if a custom error is set to a truthy value (anything other than the empty string or null), the form will be prevented from being submitted. If there is no custom error message, and none of the other properties return true, valid will be true, and the form can be submitted.\n::: code-example [js]{.language-name}\nfunction validate(input) { let validityState_object = input.validity; if (validityState_object.valueMissing) { input.setCustomValidity(\u0026#34;A value is required\u0026#34;); } else if (validityState_object.rangeUnderflow) { input.setCustomValidity(\u0026#34;Your value is too low\u0026#34;); } else if (validityState_object.rangeOverflow) { input.setCustomValidity(\u0026#34;Your value is too high\u0026#34;); } else { input.setCustomValidity(\u0026#34;\u0026#34;); } } :::\nThe last line, setting the custom validity message to the empty string is vital. If the user makes an error, and the validity is set, it will fail to submit, even if all the values are valid, until the message is null.\nCustom validation error example # If you want to present a custom error message when a field fails to validate, you need to use the Constraint Validation API available on \u0026lt;input\u0026gt; (and related) elements. Take the following form:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Enter username (upper and lowercase letters): \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34; required pattern=\u0026#34;[A-Za-z]+\u0026#34; /\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nThe basic HTML form validation features will cause this to produce a default error message if you try to submit the form with either no valid filled in, or a value that does not match the pattern.\nIf you wanted to instead display custom error messages, you could use JavaScript like the following:\n::: code-example [js]{.language-name}\nconst nameInput = document.querySelector(\u0026#34;input\u0026#34;); nameInput.addEventListener(\u0026#34;input\u0026#34;, () =\u0026gt; { nameInput.setCustomValidity(\u0026#34;\u0026#34;); nameInput.checkValidity(); }); nameInput.addEventListener(\u0026#34;invalid\u0026#34;, () =\u0026gt; { if (nameInput.value === \u0026#34;\u0026#34;) { nameInput.setCustomValidity(\u0026#34;Enter your username!\u0026#34;); } else { nameInput.setCustomValidity( \u0026#34;Usernames can only contain upper and lowercase letters. Try again!\u0026#34;, ); } }); :::\nThe example renders like so:\n::: {#sect37 .code-example} ::: iframe ::: :::\nIn brief:\nWe check the valid state of the input element every time its value is changed by running the checkValidity() method via the input event handler. If the value is invalid, an invalid event is raised, and the invalid event handler function is run. Inside this function we work out whether the value is invalid because it is empty, or because it doesn't match the pattern, using an if () block, and set a custom validity error message. As a result, if the input value is invalid when the submit button is pressed, one of the custom error messages will be shown. If it is valid, it will submit as you'd expect. For this to happen, the custom validity has to be cancelled, by invoking setCustomValidity() with an empty string value. We therefore do this every time the input event is raised. If you don't do this, and a custom validity was previously set, the input will register as invalid, even if it currently contains a valid value on submission. ::: {#sect38 .notecard .note} Note: Always validate input constraints both client side and server side. Constraint validation doesn't remove the need for validation on the server side. Invalid values can still be sent by older browsers or by bad actors. :::\n::: {#sect39 .notecard .note} Note: Firefox supported a proprietary error attribute \u0026mdash; x-moz-errormessage \u0026mdash; for many versions, which allowed you set custom error messages in a similar way. This has been removed as of version 66 (see Firefox bug 1513890{target=\u0026quot;_blank\u0026quot;}). ::: :::\nLocalization # ::: section-content The allowed inputs for certain \u0026lt;input\u0026gt; types depend on the locale. In some locales, 1,000.00 is a valid number, while in other locales the valid way to enter this number is 1.000,00.\nFirefox uses the following heuristics to determine the locale to validate the user's input (at least for type=\u0026quot;number\u0026quot;):\nTry the language specified by a lang/xml:lang attribute on the element or any of its parents. Try the language specified by any Content-Language HTTP header. Or, If none specified, use the browser's locale. ::: Technical summary # ::: section-content\nContent categories Flow content, listed, submittable, resettable, form-associated element, phrasing content. If the type is not hidden, then labelable element, palpable content. Permitted content None; it is a void element. Tag omission Must have a start tag and must not have an end tag. Permitted parents Any element that accepts phrasing content. Implicit ARIA role type=button: button type=checkbox: checkbox type=email with no list attribute: textbox with list attribute: combobox type=image: button type=number: spinbutton type=radio: radio type=range: slider type=reset: button type=search with no list attribute: searchbox with list attribute:combobox type=submit: button type=tel with no list attribute: textbox with list attribute: combobox type=text with no list attribute: textbox with list attribute: combobox type=url with no list attribute: textbox with list attribute: combobox type=color|date|datetime-local|file|hidden|month|password|time|week: no corresponding role Permitted ARIA roles type=button: checkbox, combobox, link, menuitem, menuitemcheckbox, menuitemradio, option, radio, switch, tab type=checkbox: button when used with aria-pressed, menuitemcheckbox, option, switch type=image: link, menuitem, menuitemcheckbox, menuitemradio, radio, switch type=radio: menuitemradio type=text with no list attribute: combobox, searchbox, spinbutton type=color|date|datetime-local|email|file|hidden| month|number|password|range|reset|search|submit|tel|url|week or text with list attribute: no role permitted DOM interface HTMLInputElement ::: Accessibility concerns # Labels # ::: section-content When including inputs, it is an accessibility requirement to add labels alongside. This is needed so those who use assistive technologies can tell what the input is for. Also, clicking or touching a label gives focus to the label's associated form control. This improves the accessibility and usability for sighted users, increases the area a user can click or touch to activate the form control. This is especially useful (and even needed) for radio buttons and checkboxes, which are tiny. For more information about labels in general see Labels .\nThe following is an example of how to associate the \u0026lt;label\u0026gt; with an \u0026lt;input\u0026gt; element in the above style. You need to give the \u0026lt;input\u0026gt; an id attribute. The \u0026lt;label\u0026gt; then needs a for attribute whose value is the same as the input's id.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;peas\u0026#34;\u0026gt;Do you like peas?\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;peas\u0026#34; id=\u0026#34;peas\u0026#34; /\u0026gt; ::: :::\nSize # ::: section-content Interactive elements such as form input should provide an area large enough that it is easy to activate them. This helps a variety of people, including people with motor control issues and people using non-precise forms of input such as a stylus or fingers. A minimum interactive size of 44×44 CSS pixels{target=\u0026quot;_blank\u0026quot;} is recommended.\nUnderstanding Success Criterion 2.5.5: Target Size | W3C Understanding WCAG 2.1{target=\u0026quot;_blank\u0026quot;} Target Size and 2.5.5 | Adrian Roselli{target=\u0026quot;_blank\u0026quot;} Quick test: Large touch targets - The A11Y Project{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-input-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Android Chrome Firefox for Android Opera Safari on IOS Samsung Explorer Android Android Internet input 1 12 1 Yes ≤12.1 1 1 18 4 ≤12.1 1 1.0\nBefore Firefox 89, manipulating the content of `\u0026lt;input\u0026gt;` elements using `Document.execCommand()` commands requires workarounds Before Firefox 89, manipulating the content of `\u0026lt;input\u0026gt;` elements using `Document.execCommand()` commands requires workarounds (see [bug 1220696](https://bugzil.la/1220696)). (see [bug 1220696](https://bugzil.la/1220696)). accept 1 12 1 6 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0\nalign 1 12 1 5.5 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0\nalt 1 12 1 5.5 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0\ncapture No No No No No No 4.4 25 79 14 10 1.5\nchecked 1 12 1 5.5 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0\ndirname 17 79 116 No ≤12.1 6 4.4 18 116 ≤12.1 6 1.0\ndisabled 1 12 1 5.5 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0\nform 1 12 1 5.5 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0\nformaction 9 12 4 10 ≤12.1 5 3 18 4 ≤12.1 4.2 1.0\nformenctype 9 12 4 10 ≤12.1 5 3 18 4 ≤12.1 4.2 1.0\nformmethod 9 12 4 10 ≤12.1 5 3 18 4 ≤12.1 4.2 1.0\nformnovalidate 4 12 4 10 ≤12.1 5 ≤37 18 4 ≤12.1 4 1.0\nformtarget 9 12 4 10 ≤12.1 5 3 18 4 ≤12.1 4.2 1.0\nlist 20 12 4 10 ≤12.1 12.1 4.4.3 25 4 ≤12.1 12.2 1.5\nmax 4 12 16 10 ≤12.1 5 ≤37 18 16 ≤12.1 4 1.0\nmaxlength 1 12 1 5.5 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0\nmin 4 12 16 10 ≤12.1 5 ≤37 18 16 ≤12.1 4 1.0\nminlength 40 17 51 No 27 10.1 40 40 51 27 10.3 4.0\nmozactionhint No No 4\u0026ndash;119 No No No No No 4\u0026ndash;119 No No No\nmultiple 2 12 3.6 10 ≤12.1 4 ≤37 18 4 ≤12.1 3.2 1.0\nname 1 12 1 5.5 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0\npattern 4 12 4 10 ≤12.1 5 ≤37 18 4 ≤12.1 4 1.0\nplaceholder 3 12 4 10 ≤12.1 4 ≤37 18 4 ≤12.1 3.2 1.0\nreadonly 1 12 1 5.5 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0\nsrc 1 12 1 5.5 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0\nstep 5 12 16 10 ≤12.1 5 ≤37 18 16 ≤12.1 4 1.0\ntype_button 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\ntype_checkbox 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\ntype_color 20 14 29 No 12 12.1 4.4 25 27 12 12.2 1.5\nFirefox for Android doesn\\'t allow the user to choose a custom color, only one of the predefined ones. type_date 20 12 57 No 11 14.1 4.4 25 57 11 5 1.5\ntype_datetime-local 20 12 93 No 11 14.1 4.4 25 93 11 5 1.5\ntype_email 5 12 1 10 11 5 4.4 18 4 11 3 1.0\n\\[\\\u0026quot;Doesn\\'t do validation, but instead offers a custom \\'email\\' keyboard, which is designed to make entering email addresses easier.\\\u0026quot;, \\\u0026quot;The custom \\'email\\' keyboard does not provide a comma key, so users cannot enter multiple email addresses.\\\u0026quot;, \\\u0026quot;Automatically applies a default style of `opacity: 0.4` to disable textual `\u0026lt;input\u0026gt;` elements, including those of type \\'email\\'. Other major browsers don\\'t currently share this particular default style.\\\u0026quot;\\] type_file 1 12 1 Yes 11 1 4.4 18 4 11 1 1.0\nYou can set as well as get the value of `HTMLInputElement.files` in all modern browsers; this was most recently added to Firefox, in version 57 (see [bug 1384030](https://bugzil.la/1384030)). type_hidden 1 12 1 Yes 2 1 4.4 18 4 14 1 1.0\ntype_image 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\ntype_month 20 12 No No 11 No 4.4 25 18 14 Yes 1.5\nThe input type is recognized, but there is no month-specific control. See [bug 200416](https://webkit.org/b/200416). type_number 7 12 29 10 15 5.1 4.4 18 29 14 5 1.0\ntype_password 1 12 1 2 2 1 4.4 18 4 14 1 1.0\ntype_radio 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\ntype_range 4 12 23 10 11 3.1 4.4 57 52 11 5 7.0\n2--4.4 Pre-Chromium Android WebView recognizes the `range` type, but doesn\\'t implement a range-specific control. type_reset 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nUnlike other browsers, Firefox by default [persists the dynamic disabled Unlike other browsers, Firefox by default [persists the dynamic disabled state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) of a `\u0026lt;button\u0026gt;` across page loads. Use the of a `\u0026lt;button\u0026gt;` across page loads. Use the [`autocomplete`](https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete) attribute to control this [`autocomplete`](https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete) attribute to control this feature. feature. type_search 5 12 4 10 10.6 5 4.4 18 4 14 4.2 1.0\ntype_submit 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nUnlike other browsers, Firefox by default [persists the dynamic disabled Unlike other browsers, Firefox by default [persists the dynamic disabled state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) of a `\u0026lt;button\u0026gt;` across page loads. Use the of a `\u0026lt;button\u0026gt;` across page loads. Use the [`autocomplete`](https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete) attribute to control this [`autocomplete`](https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete) attribute to control this feature. feature. type_tel 3 12 Yes 10 11 4 ≤37 18 Yes 11 3 1.0\nThe field The field type doesn\\'t demonstrate any type doesn\\'t special behavior. demonstrate any special behavior. type_text 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\ntype_time 20 12 57 No 10 14.1 4.4 25 57 10.1 5 1.5\ntype_url 1 12 1 10 11 1 4.4 18 4 14 1 1.0\ntype_week 20 12 No No 11 No 4.4 25 18 14 No 1.5\nusemap 1 12 1 6 ≤12.1 1 4.4 18 4 ≤12.1 1 1.0\nx-moz-errormessage No No Yes\u0026ndash;66 No No No No No Yes\u0026ndash;66 No No No # :::\nSee also # ::: section-content\nForm constraint validation Your first HTML form How to structure an HTML form The native form widgets Sending form data Form data validation How to build custom form widgets HTML forms in legacy browsers Styling HTML forms Advanced styling for HTML forms CSS property compatibility table ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input{._attribution-link} :::\n"},{"id":111,"href":"/docs/references/languages/html/element/input/button/","title":"Button","section":"HTML","content":" \u0026lt;input type=\u0026quot;button\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type button are rendered as simple push buttons, which can be programmed to control custom functionality anywhere on a webpage as required when assigned an event handler function (typically for the click event). :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;button\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} .styled { border: 0; line-height: 2.5; padding: 0 20px; font-size: 1rem; text-align: center; color: #fff; text-shadow: 1px 1px 1px #000; border-radius: 10px; background-color: rgba(220, 0, 0, 1); background-image: linear-gradient( to top left, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2) 30%, rgba(0, 0, 0, 0) ); box-shadow: inset 2px 2px 3px rgba(255, 255, 255, 0.6), inset -2px -2px 3px rgba(0, 0, 0, 0.6); }\n.styled:hover { background-color: rgba(255, 0, 0, 1); } .styled:active { box-shadow: inset -2px -2px 3px rgba(255, 255, 255, 0.6), inset 2px 2px 3px rgba(0, 0, 0, 0.6); } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\n::: {#sect1 .notecard .note} Note: While \u0026lt;input\u0026gt; elements of type button are still perfectly valid HTML, the newer \u0026lt;button\u0026gt; element is now the favored way to create buttons. Given that a \u0026lt;button\u0026gt;'s label text is inserted between the opening and closing tags, you can include HTML in the label, even images. ::: :::\nValue # Button with a value # ::: section-content An \u0026lt;input type=\u0026quot;button\u0026quot;\u0026gt; elements' value attribute contains a string that is used as the button's label.\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Click Me\u0026#34; /\u0026gt; :::\n::: {#sect2 .code-example} ::: iframe ::: ::: :::\nButton without a value # ::: section-content If you don't specify a value, you get an empty button:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;button\u0026#34; /\u0026gt; :::\n::: {#sect3 .code-example} ::: iframe ::: ::: :::\nUsing buttons # ::: section-content \u0026lt;input type=\u0026quot;button\u0026quot;\u0026gt; elements have no default behavior (their cousins, \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt; and \u0026lt;input type=\u0026quot;reset\u0026quot;\u0026gt; are used to submit and reset forms, respectively). To make buttons do anything, you have to write JavaScript code to do the work. :::\nA simple button # ::: section-content We'll begin by creating a simple button with a click event handler that starts our machine (well, it toggles the value of the button and the text content of the following paragraph):\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Start machine\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;p\u0026gt;The machine is stopped.\u0026lt;/p\u0026gt; :::\n::: code-example [js]{.language-name}\nconst button = document.querySelector(\u0026#34;input\u0026#34;); const paragraph = document.querySelector(\u0026#34;p\u0026#34;); button.addEventListener(\u0026#34;click\u0026#34;, updateButton); function updateButton() { if (button.value === \u0026#34;Start machine\u0026#34;) { button.value = \u0026#34;Stop machine\u0026#34;; paragraph.textContent = \u0026#34;The machine has started!\u0026#34;; } else { button.value = \u0026#34;Start machine\u0026#34;; paragraph.textContent = \u0026#34;The machine is stopped.\u0026#34;; } } :::\nThe script gets a reference to the HTMLInputElement object representing the \u0026lt;input\u0026gt; in the DOM, saving this reference in the variable button. addEventListener() is then used to establish a function that will be run when click events occur on the button.\n::: {#sect4 .code-example} ::: iframe ::: ::: :::\nAdding keyboard shortcuts to buttons # ::: section-content Keyboard shortcuts, also known as access keys and keyboard equivalents, let the user trigger a button using a key or combination of keys on the keyboard. To add a keyboard shortcut to a button \u0026mdash; just as you would with any \u0026lt;input\u0026gt; for which it makes sense \u0026mdash; you use the accesskey global attribute.\nIn this example, [s]{.kbd} is specified as the access key (you'll need to press [s]{.kbd} plus the particular modifier keys for your browser/OS combination; see accesskey for a useful list of those).\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Start machine\u0026#34; accesskey=\u0026#34;s\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;p\u0026gt;The machine is stopped.\u0026lt;/p\u0026gt; :::\n::: {#sect5 .code-example} ::: iframe ::: :::\n::: {#sect6 .notecard .note} Note: The problem with the above example of course is that the user will not know what the access key is! In a real site, you'd have to provide this information in a way that doesn't interfere with the site design (for example by providing an easily accessible link that points to information on what the site accesskeys are). ::: :::\nDisabling and enabling a button # ::: section-content To disable a button, specify the disabled global attribute on it, like so:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Disable me\u0026#34; disabled /\u0026gt; :::\nSetting the disabled attribute # You can enable and disable buttons at run time by setting disabled to true or false. In this example our button starts off enabled, but if you press it, it is disabled using button.disabled = true. A setTimeout() function is then used to reset the button back to its enabled state after two seconds.\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Enabled\u0026#34; /\u0026gt; :::\n::: code-example [js]{.language-name}\nconst button = document.querySelector(\u0026#34;input\u0026#34;); button.addEventListener(\u0026#34;click\u0026#34;, disableButton); function disableButton() { button.disabled = true; button.value = \u0026#34;Disabled\u0026#34;; setTimeout(() =\u0026gt; { button.disabled = false; button.value = \u0026#34;Enabled\u0026#34;; }, 2000); } :::\n::: {#sect7 .code-example} ::: iframe ::: :::\nInheriting the disabled state # If the disabled attribute isn't specified, the button inherits its disabled state from its parent element. This makes it possible to enable and disable groups of elements all at once by enclosing them in a container such as a \u0026lt;fieldset\u0026gt; element, and then setting disabled on the container.\nThe example below shows this in action. This is very similar to the previous example, except that the disabled attribute is set on the \u0026lt;fieldset\u0026gt; when the first button is pressed \u0026mdash; this causes all three buttons to be disabled until the two second timeout has passed.\n::: code-example [html]{.language-name}\n\u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Button group\u0026lt;/legend\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Button 1\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Button 2\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Button 3\u0026#34; /\u0026gt; \u0026lt;/fieldset\u0026gt; :::\n::: code-example [js]{.language-name}\nconst button = document.querySelector(\u0026#34;input\u0026#34;); const fieldset = document.querySelector(\u0026#34;fieldset\u0026#34;); button.addEventListener(\u0026#34;click\u0026#34;, disableButton); function disableButton() { fieldset.disabled = true; setTimeout(() =\u0026gt; { fieldset.disabled = false; }, 2000); } :::\n::: {#sect8 .code-example} ::: iframe ::: :::\n::: {#sect9 .notecard .note} Note: Firefox will, unlike other browsers, by default, persist the dynamic disabled state{target=\u0026quot;_blank\u0026quot;} of a \u0026lt;button\u0026gt; across page loads. Use the autocomplete attribute to control this feature. ::: :::\nValidation # ::: section-content Buttons don't participate in constraint validation; they have no real value to be constrained. :::\nExamples # ::: section-content The below example shows a very simple drawing app created using a \u0026lt;canvas\u0026gt; element and some simple CSS and JavaScript (we'll hide the CSS for brevity). The top two controls allow you to choose the color and size of the drawing pen. The button, when clicked, invokes a function that clears the canvas.\n::: code-example [html]{.language-name}\n\u0026lt;div class=\u0026#34;toolbar\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;color\u0026#34; aria-label=\u0026#34;select pen color\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;range\u0026#34; min=\u0026#34;2\u0026#34; max=\u0026#34;50\u0026#34; value=\u0026#34;30\u0026#34; aria-label=\u0026#34;select pen size\u0026#34; /\u0026gt;\u0026lt;span class=\u0026#34;output\u0026#34;\u0026gt;30\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Clear canvas\u0026#34; /\u0026gt; \u0026lt;canvas class=\u0026#34;myCanvas\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Add suitable fallback here.\u0026lt;/p\u0026gt; \u0026lt;/canvas\u0026gt; :::\n::: code-example [js]{.language-name}\nconst canvas = document.querySelector(\u0026#34;.myCanvas\u0026#34;); const width = (canvas.width = window.innerWidth); const height = (canvas.height = window.innerHeight - 85); const ctx = canvas.getContext(\u0026#34;2d\u0026#34;); ctx.fillStyle = \u0026#34;rgb(0,0,0)\u0026#34;; ctx.fillRect(0, 0, width, height); const colorPicker = document.querySelector(\u0026#39;input[type=\u0026#34;color\u0026#34;]\u0026#39;); const sizePicker = document.querySelector(\u0026#39;input[type=\u0026#34;range\u0026#34;]\u0026#39;); const output = document.querySelector(\u0026#34;.output\u0026#34;); const clearBtn = document.querySelector(\u0026#39;input[type=\u0026#34;button\u0026#34;]\u0026#39;); // covert degrees to radians function degToRad(degrees) { return (degrees * Math.PI) / 180; } // update sizepicker output value sizePicker.oninput = () =\u0026gt; { output.textContent = sizePicker.value; }; // store mouse pointer coordinates, and whether the button is pressed let curX; let curY; let pressed = false; // update mouse pointer coordinates document.onmousemove = (e) =\u0026gt; { curX = e.pageX; curY = e.pageY; }; canvas.onmousedown = () =\u0026gt; { pressed = true; }; canvas.onmouseup = () =\u0026gt; { pressed = false; }; clearBtn.onclick = () =\u0026gt; { ctx.fillStyle = \u0026#34;rgb(0,0,0)\u0026#34;; ctx.fillRect(0, 0, width, height); }; function draw() { if (pressed) { ctx.fillStyle = colorPicker.value; ctx.beginPath(); ctx.arc( curX, curY - 85, sizePicker.value, degToRad(0), degToRad(360), false, ); ctx.fill(); } requestAnimationFrame(draw); } draw(); :::\n::: {#sect10 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nValue A string used as the button's label Events click Supported common attributes type and value IDL attributes value DOM interface HTMLInputElement\nMethods None Implicit ARIA Role button ::: Specifications # ::: _table # Specification # HTML Standard\n[# button-state-(type=button)]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet button 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 :::\nSee also # ::: section-content\n\u0026lt;input\u0026gt; and the HTMLInputElement interface which implements it. The more modern \u0026lt;button\u0026gt; element. Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/button{._attribution-link} :::\n"},{"id":112,"href":"/docs/references/languages/html/element/input/checkbox/","title":"Checkbox","section":"HTML","content":" \u0026lt;input type=\u0026quot;checkbox\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type checkbox are rendered by default as boxes that are checked (ticked) when activated, like you might see in an official government paper form. The exact appearance depends upon the operating system configuration under which the browser is running. Generally this is a square but it may have rounded corners. A checkbox allows you to select single values for submission in a form (or not). :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;checkbox\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Choose your monster\u0026rsquo;s features:\n\u0026lt;input type=\u0026quot;checkbox\u0026quot; id=\u0026quot;scales\u0026quot; name=\u0026quot;scales\u0026quot; checked /\u0026gt; \u0026lt;label for=\u0026quot;scales\u0026quot;\u0026gt;Scales\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;checkbox\u0026quot; id=\u0026quot;horns\u0026quot; name=\u0026quot;horns\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;horns\u0026quot;\u0026gt;Horns\u0026lt;/label\u0026gt; \u0026lt;/fieldset\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p, label { font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput { margin: 0.4rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\n::: {#sect1 .notecard .note} Note: Radio buttons are similar to checkboxes, but with an important distinction \u0026mdash; same-named radio buttons are grouped into a set in which only one radio button can be selected at a time, whereas checkboxes allow you to turn single values on and off. Where multiple same-named controls exist, radio buttons allow one to be selected out of them all, whereas checkboxes allow multiple values to be selected. ::: :::\nValue # ::: section-content A string representing the value of the checkbox. This is not displayed on the client-side, but on the server this is the value given to the data submitted with the checkbox's name. Take the following example:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;subscribeNews\u0026#34; name=\u0026#34;subscribe\u0026#34; value=\u0026#34;newsletter\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;subscribeNews\u0026#34;\u0026gt;Subscribe to newsletter?\u0026lt;/label\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Subscribe\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nIn this example, we've got a name of subscribe, and a value of newsletter. When the form is submitted, the data name/value pair will be subscribe=newsletter.\nIf the value attribute was omitted, the default value for the checkbox is on, so the submitted data in that case would be subscribe=on.\n::: {#sect2 .notecard .note} Note: If a checkbox is unchecked when its form is submitted, neither the name nor the value is submitted to the server. There is no HTML-only method of representing a checkbox's unchecked state (e.g. value=unchecked). If you wanted to submit a default value for the checkbox when it is unchecked, you could include JavaScript to create a \u0026lt;input type=\u0026quot;hidden\u0026quot;\u0026gt; within the form with a value indicating an unchecked state. ::: :::\nAdditional attributes # ::: section-content In addition to the common attributes shared by all \u0026lt;input\u0026gt; elements, \u0026quot;checkbox\u0026quot; inputs support the following attributes.\nchecked A boolean attribute indicating whether this checkbox is checked by default (when the page loads). It does not indicate whether this checkbox is currently checked: if the checkbox's state is changed, this content attribute does not reflect the change. (Only the HTMLInputElement's checked IDL attribute is updated.)\n::: {#sect3 .notecard .note} Note: Unlike other input controls, a checkbox's value is only included in the submitted data if the checkbox is currently checked. If it is, then the value of the checkbox's value attribute is reported as the input's value, or on if no value is set. Unlike other browsers, Firefox by default persists the dynamic checked state{target=\u0026quot;_blank\u0026quot;} of an \u0026lt;input\u0026gt; across page loads. Use the autocomplete attribute to control this feature. :::\nvalue The value attribute is one which all \u0026lt;input\u0026gt;s share; however, it serves a special purpose for inputs of type checkbox: when a form is submitted, only checkboxes which are currently checked are submitted to the server, and the reported value is the value of the value attribute. If the value is not otherwise specified, it is the string on by default. This is demonstrated in the section Value above. :::\nUsing checkbox inputs # ::: section-content We already covered the most basic use of checkboxes above. Let's now look at the other common checkbox-related features and techniques you'll need. :::\nHandling multiple checkboxes # ::: section-content The example we saw above only contained one checkbox; in real-world situations you'll be likely to encounter multiple checkboxes. If they are completely unrelated, then you can just deal with them all separately, as shown above. However, if they're all related, things are not quite so simple.\nFor example, in the following demo we include multiple checkboxes to allow the user to select their interests (see the full version in the Examples section).\n::: code-example [html]{.language-name}\n\u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Choose your interests\u0026lt;/legend\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;coding\u0026#34; name=\u0026#34;interest\u0026#34; value=\u0026#34;coding\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;coding\u0026#34;\u0026gt;Coding\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;music\u0026#34; name=\u0026#34;interest\u0026#34; value=\u0026#34;music\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;music\u0026#34;\u0026gt;Music\u0026lt;/label\u0026gt; \u0026lt;/fieldset\u0026gt; :::\n::: {#sect4 .code-example} ::: iframe ::: :::\nIn this example you will see that we've given each checkbox the same name. If both checkboxes are checked and then the form is submitted, you'll get a string of name/value pairs submitted like this: interest=coding\u0026amp;interest=music. When this string reaches the server, you need to parse it other than as an associative array, so all values, not only the last value, of interest are captured. For one technique used with Python, see Handle Multiple Checkboxes with a Single Serverside Variable{target=\u0026quot;_blank\u0026quot;}, for example. :::\nChecking boxes by default # ::: section-content To make a checkbox checked by default, you give it the checked attribute. See the below example:\n::: code-example [html]{.language-name}\n\u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Choose your interests\u0026lt;/legend\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;coding\u0026#34; name=\u0026#34;interest\u0026#34; value=\u0026#34;coding\u0026#34; checked /\u0026gt; \u0026lt;label for=\u0026#34;coding\u0026#34;\u0026gt;Coding\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;music\u0026#34; name=\u0026#34;interest\u0026#34; value=\u0026#34;music\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;music\u0026#34;\u0026gt;Music\u0026lt;/label\u0026gt; \u0026lt;/fieldset\u0026gt; :::\n::: {#sect5 .code-example} ::: iframe ::: ::: :::\nProviding a bigger hit area for your checkboxes # ::: section-content In the above examples, you may have noticed that you can toggle a checkbox by clicking on its associated \u0026lt;label\u0026gt; element as well as on the checkbox itself. This is a really useful feature of HTML form labels that makes it easier to click the option you want, especially on small-screen devices like smartphones.\nBeyond accessibility, this is another good reason to properly set up \u0026lt;label\u0026gt; elements on your forms. :::\nIndeterminate state checkboxes # ::: section-content In addition to the checked and unchecked states, there is a third state a checkbox can be in: indeterminate. This is a state in which it's impossible to say whether the item is toggled on or off. This is set using the HTMLInputElement object's indeterminate property via JavaScript (it cannot be set using an HTML attribute):\n::: code-example [js]{.language-name}\ninputInstance.indeterminate = true; :::\nA checkbox in the indeterminate state has a horizontal line in the box (it looks somewhat like a hyphen or minus sign) instead of a check/tick in most browsers.\nThere are not many use cases for this property. The most common is when a checkbox is available that \u0026quot;owns\u0026quot; a number of sub-options (which are also checkboxes). If all of the sub-options are checked, the owning checkbox is also checked, and if they're all unchecked, the owning checkbox is unchecked. If any one or more of the sub-options have a different state than the others, the owning checkbox is in the indeterminate state.\nThis can be seen in the below example (thanks to CSS Tricks{target=\u0026quot;_blank\u0026quot;} for the inspiration). In this example we keep track of the ingredients we are collecting for a recipe. When you check or uncheck an ingredient's checkbox, a JavaScript function checks the total number of checked ingredients:\nIf none are checked, the recipe name's checkbox is set to unchecked. If one or two are checked, the recipe name's checkbox is set to indeterminate. If all three are checked, the recipe name's checkbox is set to checked. So in this case the indeterminate state is used to state that collecting the ingredients has started, but the recipe is not yet complete.\n::: code-example [js]{.language-name}\nconst overall = document.querySelector(\u0026#34;#enchantment\u0026#34;); const ingredients = document.querySelectorAll(\u0026#34;ul input\u0026#34;); overall.addEventListener(\u0026#34;click\u0026#34;, (e) =\u0026gt; { e.preventDefault(); }); for (const ingredient of ingredients) { ingredient.addEventListener(\u0026#34;click\u0026#34;, updateDisplay); } function updateDisplay() { let checkedCount = 0; for (const ingredient of ingredients) { if (ingredient.checked) { checkedCount++; } } if (checkedCount === 0) { overall.checked = false; overall.indeterminate = false; } else if (checkedCount === ingredients.length) { overall.checked = true; overall.indeterminate = false; } else { overall.checked = false; overall.indeterminate = true; } } :::\n::: iframe Complete the recipe\nEnchantment table\nBook Diamonds (x2) Obsidian (x4) :::\n::: {#sect6 .notecard .note} Note: If you submit a form with an indeterminate checkbox, the same thing happens as if the checkbox were unchecked \u0026mdash; no data is submitted to represent the checkbox. ::: :::\nValidation # ::: section-content Checkboxes do support validation (offered to all \u0026lt;input\u0026gt;s). However, most of the ValidityStates will always be false. If the checkbox has the required attribute, but is not checked, then ValidityState.valueMissing will be true. :::\nExamples # ::: section-content The following example is an extended version of the \u0026quot;multiple checkboxes\u0026quot; example we saw above \u0026mdash; it has more standard options, plus an \u0026quot;other\u0026quot; checkbox that when checked causes a text field to appear to enter a value for the \u0026quot;other\u0026quot; option. This is achieved with a simple block of JavaScript. The example includes implicit labels, with the \u0026lt;input\u0026gt; directly inside the \u0026lt;label\u0026gt;. The text input, without a visible label, includes the aria-label attribute which provides its accessible name. This example also includes some CSS to improve the styling. :::\nHTML # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Choose your interests\u0026lt;/legend\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;coding\u0026#34; name=\u0026#34;interest\u0026#34; value=\u0026#34;coding\u0026#34; /\u0026gt; Coding \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;music\u0026#34; name=\u0026#34;interest\u0026#34; value=\u0026#34;music\u0026#34; /\u0026gt; Music \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;art\u0026#34; name=\u0026#34;interest\u0026#34; value=\u0026#34;art\u0026#34; /\u0026gt; Art \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;sports\u0026#34; name=\u0026#34;interest\u0026#34; value=\u0026#34;sports\u0026#34; /\u0026gt; Sports \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;cooking\u0026#34; name=\u0026#34;interest\u0026#34; value=\u0026#34;cooking\u0026#34; /\u0026gt; Cooking \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;other\u0026#34; name=\u0026#34;interest\u0026#34; value=\u0026#34;other\u0026#34; /\u0026gt; Other \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;otherValue\u0026#34; name=\u0026#34;other\u0026#34; aria-label=\u0026#34;Other interest\u0026#34; /\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit form\u0026lt;/button\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; ::: :::\nCSS # ::: section-content ::: code-example [css]{.language-name}\nhtml { font-family: sans-serif; } form { width: 600px; margin: 0 auto; } div { margin-bottom: 10px; } fieldset { background: cyan; border: 5px solid blue; } legend { padding: 10px; background: blue; color: cyan; } ::: :::\nJavaScript # ::: section-content ::: code-example [js]{.language-name}\nconst otherCheckbox = document.querySelector(\u0026#34;#other\u0026#34;); const otherText = document.querySelector(\u0026#34;#otherValue\u0026#34;); otherText.style.visibility = \u0026#34;hidden\u0026#34;; otherCheckbox.addEventListener(\u0026#34;change\u0026#34;, () =\u0026gt; { if (otherCheckbox.checked) { otherText.style.visibility = \u0026#34;visible\u0026#34;; otherText.value = \u0026#34;\u0026#34;; } else { otherText.style.visibility = \u0026#34;hidden\u0026#34;; } }); :::\n::: {#sect7 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nValue A string representing the value of the checkbox. Events change and input Supported common attributes checked IDL attributes checked, indeterminate and value DOM interface HTMLInputElement\nMethods select() Implicit ARIA Role checkbox ::: Specifications # ::: _table # Specification # HTML Standard\n[# checkbox-state-(type=checkbox)]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet checkbox 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 :::\nSee also # ::: section-content\n:checked, :indeterminate: CSS selectors that let you style checkboxes based on their current state HTMLInputElement: HTML DOM API that implements the \u0026lt;input\u0026gt; element CSS property compatibility table for form controls ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox{._attribution-link} :::\n"},{"id":113,"href":"/docs/references/languages/html/element/input/color/","title":"Color","section":"HTML","content":" \u0026lt;input type=\u0026quot;color\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type color provide a user interface element that lets a user specify a color, either by using a visual color picker interface or by entering the color into a text field in #rrggbb hexadecimal format.\nOnly simple colors (without alpha channel) are allowed though CSS colors has more formats, e.g. color names, functional notations and a hexadecimal format with an alpha channel.\nThe element's presentation may vary substantially from one browser and/or platform to another\u0026mdash;it might be a simple textual input that automatically validates to ensure that the color information is entered in the proper format, or a platform-standard color picker, or some kind of custom color picker window. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;color\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Choose your monster\u0026rsquo;s colors:\n\u0026lt;input type=\u0026quot;color\u0026quot; id=\u0026quot;head\u0026quot; name=\u0026quot;head\u0026quot; value=\u0026quot;#e66465\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;head\u0026quot;\u0026gt;Head\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;color\u0026quot; id=\u0026quot;body\u0026quot; name=\u0026quot;body\u0026quot; value=\u0026quot;#f6b73c\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;body\u0026quot;\u0026gt;Body\u0026lt;/label\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p, label { font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput { margin: 0.4rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nValue # ::: section-content The value of an \u0026lt;input\u0026gt; element of type color is always a string which contains a 7-character string specifying an RGB color in hexadecimal format. While you can input the color in either upper- or lower-case, it will be stored in lower-case form. The value is never in any other form, and is never empty.\n::: {#sect1 .notecard .note} Note: Setting the value to anything that isn't a valid, fully-opaque, RGB color in hexadecimal notation will result in the value being set to #000000. In particular, you can't use CSS's standardized color names, or any CSS function syntax, to set the value. This makes sense when you keep in mind that HTML and CSS are separate languages and specifications. In addition, colors with an alpha channel are not supported; specifying a color in 9-character hexadecimal notation (e.g. #009900aa) will also result in the color being set to #000000. ::: :::\nUsing color inputs # ::: section-content Inputs of type color are simple, due to the limited number of attributes they support. :::\nProviding a default color # ::: section-content You can update the simple example above to set a default value, so that the color picker is pre-filled with the default color and the color picker (if any) will also default to that color:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;color\u0026#34; value=\u0026#34;#ff0000\u0026#34; /\u0026gt; :::\n::: {#sect2 .code-example} ::: iframe ::: :::\nIf you don't specify a value, the default is #000000, which is black. The value must be in seven-character hexadecimal notation, meaning the \u0026quot;#\u0026quot; character followed by two digits each representing red, green, and blue, like this: #rrggbb. If you have colors that are in any other format (such as CSS color names or CSS color functions such as rgb() or rgba()), you'll have to convert them to hexadecimal before setting the value. :::\nTracking color changes # ::: section-content As is the case with other \u0026lt;input\u0026gt; types, there are two events that can be used to detect changes to the color value: input and change. input is fired on the \u0026lt;input\u0026gt; element every time the color changes. The change event is fired when the user dismisses the color picker. In both cases, you can determine the new value of the element by looking at its value.\nHere's an example that watches changes over time to the color value:\n::: code-example [js]{.language-name}\ncolorPicker.addEventListener(\u0026#34;input\u0026#34;, updateFirst, false); colorPicker.addEventListener(\u0026#34;change\u0026#34;, watchColorPicker, false); function watchColorPicker(event) { document.querySelectorAll(\u0026#34;p\u0026#34;).forEach((p) =\u0026gt; { p.style.color = event.target.value; }); } ::: :::\nSelecting the value # ::: section-content When a browser doesn't support a color picker interface, its implementation of color inputs will be a text box that validates the contents automatically to ensure that the value is in the correct format. In this case you can use the select() method to select the text currently in the edit field.\nIf the browser instead uses a color picker, select() does nothing. You should be aware of this behavior so your code can respond appropriately in either case.\n::: code-example [js]{.language-name}\ncolorPicker.select(); ::: :::\nValidation # ::: section-content A color input's value is considered to be invalid if the user agent is unable to convert the user's input into seven-character lower-case hexadecimal notation. If and when this is the case, the :invalid pseudo-class is applied to the element. :::\nExample # ::: section-content Let's create an example which does a little more with the color input by tracking the change and input events to take the new color and apply it to every \u0026lt;p\u0026gt; element in the document. :::\nHTML # ::: section-content The HTML is fairly straightforward \u0026mdash; a couple of paragraphs of descriptive material with an \u0026lt;input\u0026gt; of type color with the ID color-picker, which we'll use to change the color of the paragraphs' text.\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; An example demonstrating the use of the \u0026lt;code\u0026gt;\u0026amp;lt;input type=\u0026#34;color\u0026#34;\u0026amp;gt;\u0026lt;/code\u0026gt; control. \u0026lt;/p\u0026gt; \u0026lt;label for=\u0026#34;color-picker\u0026#34;\u0026gt;Color:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;color\u0026#34; value=\u0026#34;#ff0000\u0026#34; id=\u0026#34;color-picker\u0026#34; /\u0026gt; \u0026lt;p\u0026gt; Watch the paragraph colors change when you adjust the color picker. As you make changes in the color picker, the first paragraph\u0026#39;s color changes, as a preview (this uses the \u0026lt;code\u0026gt;input\u0026lt;/code\u0026gt; event). When you close the color picker, the \u0026lt;code\u0026gt;change\u0026lt;/code\u0026gt; event fires, and we detect that to change every paragraph to the selected color. \u0026lt;/p\u0026gt; ::: :::\nJavaScript # ::: section-content First, there's some setup. Here we establish some variables, setting up a variable that contains the color we'll set the color picker to when we first load up, and then setting up a load handler to do the main startup work once the page is fully loaded.\n::: code-example [js]{.language-name}\nlet colorPicker; const defaultColor = \u0026#34;#0000ff\u0026#34;; window.addEventListener(\u0026#34;load\u0026#34;, startup, false); :::\nInitialization # Once the page is loaded, our load event handler, startup(), is called:\n::: code-example [js]{.language-name}\nfunction startup() { colorPicker = document.querySelector(\u0026#34;#color-picker\u0026#34;); colorPicker.value = defaultColor; colorPicker.addEventListener(\u0026#34;input\u0026#34;, updateFirst, false); colorPicker.addEventListener(\u0026#34;change\u0026#34;, updateAll, false); colorPicker.select(); } :::\nThis gets a reference to the color \u0026lt;input\u0026gt; element in a variable called colorPicker, then sets the color input's value to the value in defaultColor. Then the color input's input event is set up to call our updateFirst() function, and the change event is set to call updateAll(). These are both seen below.\nFinally, we call select() to select the text content of the color input if the control is implemented as a text field (this has no effect if a color picker interface is provided instead).\nReacting to color changes # We provide two functions that deal with color changes. The updateFirst() function is called in response to the input event. It changes the color of the first paragraph element in the document to match the new value of the color input. Since input events are fired every time an adjustment is made to the value (for example, if the brightness of the color is increased), these will happen repeatedly as the color picker is used.\n::: code-example [js]{.language-name}\nfunction updateFirst(event) { const p = document.querySelector(\u0026#34;p\u0026#34;); if (p) { p.style.color = event.target.value; } } :::\nWhen the color picker is dismissed, indicating that the value will not change again (unless the user re-opens the color picker), a change event is sent to the element. We handle that event using the updateAll() function, using Event.target.value to obtain the final selected color:\n::: code-example [js]{.language-name}\nfunction updateAll(event) { document.querySelectorAll(\u0026#34;p\u0026#34;).forEach((p) =\u0026gt; { p.style.color = event.target.value; }); } :::\nThis sets the color of every \u0026lt;p\u0026gt; block so that its color attribute matches the current value of the color input, which is referred to using event.target. :::\nResult # ::: section-content The final result looks like this:\n::: {#sect3 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nValue A 7-character string specifying a \u0026lt;color\u0026gt; in lower-case hexadecimal notation Events change and input Supported common attributes autocomplete and list IDL attributes list and value DOM interface HTMLInputElement\nMethods select() Implicit ARIA Role no corresponding role ::: Specifications # ::: _table # Specification # HTML Standard\n[# color-state-(type=color)]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Opera Safari Samsung Explorer Android Android Android Android on IOS Internet color 20 14 29 No 12 12.1 4.4 25 27 12 12.2 1.5\nFirefox for Android doesn\\'t allow the user to choose a custom color, only one of the predefined ones. autocomplete 20 14 No No 15 No 4.4 25 No 14 No 1.5\nlist 20 14 110 No 15 12.1 4.4 25 No 14 12.2 1.5\nThe `list` attribute is supported in Firefox for Windows and Linux. See [bug 960984](https://bugzil.la/960984). :::\nSee also # ::: section-content\nCompatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/color{._attribution-link} :::\n"},{"id":114,"href":"/docs/references/languages/html/element/input/date/","title":"Date","section":"HTML","content":" \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type=\u0026quot;date\u0026quot; create input fields that let the user enter a date, either with a textbox that validates the input or a special date picker interface.\nThe resulting value includes the year, month, and day, but not the time. The time and datetime-local input types support time and date+time input. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Start date:\n\u0026lt;input type=\u0026quot;date\u0026quot; id=\u0026quot;start\u0026quot; name=\u0026quot;trip-start\u0026quot; value=\u0026quot;2018-07-22\u0026quot; min=\u0026quot;2018-01-01\u0026quot; max=\u0026quot;2018-12-31\u0026quot; /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput, label { margin: 0.4rem 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe input UI generally varies from browser to browser; see Browser compatibility for further details. In unsupported browsers, the control degrades gracefully to \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt;. :::\nValue # ::: section-content A string representing the date entered in the input. The date is formatted according to Date strings format.\nYou can set a default value for the input with a date inside the value attribute, like so:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;date\u0026#34; value=\u0026#34;2017-06-01\u0026#34; /\u0026gt; :::\n::: {#sect1 .code-example} ::: iframe ::: :::\n::: {#sect2 .notecard .note} Note: The displayed date format will differ from the actual value \u0026mdash; the displayed date is formatted based on the locale of the user's browser, but the parsed value is always formatted yyyy-mm-dd. :::\nYou can get and set the date value in JavaScript with the HTMLInputElement value and valueAsNumber properties. For example:\n::: code-example [js]{.language-name}\nconst dateControl = document.querySelector(\u0026#39;input[type=\u0026#34;date\u0026#34;]\u0026#39;); dateControl.value = \u0026#34;2017-06-01\u0026#34;; console.log(dateControl.value); // prints \u0026#34;2017-06-01\u0026#34; console.log(dateControl.valueAsNumber); // prints 1496275200000, a JavaScript timestamp (ms) :::\nThis code finds the first \u0026lt;input\u0026gt; element whose type is date, and sets its value to 2017-06-01 (June 1st, 2017). It then reads that value back in string and number formats. :::\nAdditional attributes # ::: section-content The attributes common to all \u0026lt;input\u0026gt; elements apply to the date inputs as well, but might not influence its presentation. For example size and placeholder might not work. date inputs have the following additional attributes. :::\nmax # ::: section-content The latest date to accept. If the value entered into the element occurs afterward, the element fails constraint validation. If the value of the max attribute isn't a possible date string in the format yyyy-mm-dd, then the element has no maximum date value.\nIf both the max and min attributes are set, this value must be a date string later than or equal to the one in the min attribute. :::\nmin # ::: section-content The earliest date to accept. If the value entered into the element occurs beforehand, the element fails constraint validation. If the value of the min attribute isn't a possible date string in the format yyyy-mm-dd, then the element has no minimum date value.\nIf both the max and min attributes are set, this value must be a date string earlier than or equal to the one in the max attribute. :::\nstep # ::: section-content The step attribute is a number that specifies the granularity that the value must adhere to, or the special value any, which is described below. Only values which are equal to the basis for stepping ( min if specified, value otherwise, and an appropriate default value if neither of those is provided) are valid.\nA string value of any means that no stepping is implied, and any value is allowed (barring other constraints, such as min and max).\n::: {#sect3 .notecard .note} Note: When the data entered by the user doesn't adhere to the stepping configuration, the user agent may round to the nearest valid value, preferring numbers in the positive direction when there are two equally close options. :::\nFor date inputs, the value of step is given in days; and is treated as a number of milliseconds equal to 86,400,000 times the step value (the underlying numeric value is in milliseconds). The default value of step is 1, indicating 1 day.\n::: {#sect4 .notecard .note} Note: Specifying any as the value for step has the same effect as 1 for date inputs. ::: :::\nUsing date inputs # ::: section-content Date inputs provide an easy interface for choosing dates, and they normalize the data format sent to the server regardless of the user's locale.\nIn this section, we'll look at basic and then more complex uses of \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt;. :::\nBasic uses of date # ::: section-content The simplest use of \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt; involves one \u0026lt;input\u0026gt; combined with its \u0026lt;label\u0026gt;, as seen below:\n::: code-example [html]{.language-name}\n\u0026lt;form action=\u0026#34;https://example.com\u0026#34;\u0026gt; \u0026lt;label\u0026gt; Enter your birthday: \u0026lt;input type=\u0026#34;date\u0026#34; name=\u0026#34;bday\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;p\u0026gt;\u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect5 .code-example} ::: iframe ::: :::\nThis HTML submits the entered date under the key bday to https://example.com \u0026mdash; resulting in a URL like https://example.com/?bday=1955-06-08. :::\nSetting maximum and minimum dates # ::: section-content You can use the min and max attributes to restrict the dates that can be chosen by the user. In the following example, we set a minimum date of 2017-04-01 and a maximum date of 2017-04-30:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label\u0026gt; Choose your preferred party date: \u0026lt;input type=\u0026#34;date\u0026#34; name=\u0026#34;party\u0026#34; min=\u0026#34;2017-04-01\u0026#34; max=\u0026#34;2017-04-30\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect6 .code-example} ::: iframe ::: :::\nThe result is that only days in April 2017 can be selected \u0026mdash; the month and year parts of the textbox will be uneditable, and dates outside April 2017 can't be selected in the picker widget.\n::: {#sect7 .notecard .note} Note: You should be able to use the step attribute to vary the number of days jumped each time the date is incremented (e.g. to only make Saturdays selectable). However, this does not seem to be in any implementation at the time of writing. ::: :::\nControlling input size # ::: section-content \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt; doesn't support form sizing attributes such as size. Prefer CSS for sizing it. :::\nValidation # ::: section-content By default, \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt; doesn't validate the entered value beyond its format. The interfaces generally don't let you enter anything that isn't a date \u0026mdash; which is helpful \u0026mdash; but you can leave the field empty or enter an invalid date in browsers where the input falls back to type text (like the 32nd of April).\nIf you use min and max to restrict the available dates (see Setting maximum and minimum dates), supporting browsers will display an error if you try to submit a date that is out of bounds. However, you'll need to double-check the submitted results to ensure the value is within these dates, if the date picker isn't fully supported on the user's device.\nYou can also use the required attribute to make filling in the date mandatory \u0026mdash; an error will be displayed if you try to submit an empty date field. This should work in most browsers, even if they fall back to a text input.\nLet's look at an example of minimum and maximum dates, and also made a field required:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label\u0026gt; Choose your preferred party date (required, April 1st to 20th): \u0026lt;input type=\u0026#34;date\u0026#34; name=\u0026#34;party\u0026#34; min=\u0026#34;2017-04-01\u0026#34; max=\u0026#34;2017-04-20\u0026#34; required /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;p\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt; :::\nIf you try to submit the form with an incomplete date (or with a date outside the set bounds), the browser displays an error. Try playing with the example now:\n::: {#sect8 .code-example} ::: iframe ::: :::\nHere's the CSS used in the above example. We make use of the :valid and :invalid pseudo-elements to add an icon next to the input, based on whether the current value is valid. We had to put the icon on a \u0026lt;span\u0026gt; next to the input, not on the input itself, because in Chrome at least the input's generated content is placed inside the form control, and can't be styled or shown effectively.\n::: code-example [css]{.language-name}\nlabel { display: flex; align-items: center; } span::after { padding-left: 5px; } input:invalid + span::after { content: \u0026#34;✖\u0026#34;; } input:valid + span::after { content: \u0026#34;✓\u0026#34;; } :::\n::: {#sect9 .notecard .warning} Warning: Client-side form validation is no substitute for validating on the server. It's easy for someone to modify the HTML, or bypass your HTML entirely and submit the data directly to your server. If your server fails to validate the received data, disaster could strike with data that is badly-formatted, too large, of the wrong type, etc. ::: :::\nHandling browser support # ::: section-content Browsers that don't support this input type gracefully degrade to a text input, but this creates problems in consistency of user interface (the presented controls are different) and data handling.\nThe second problem is the more serious one; with date input supported, the value is normalized to the format yyyy-mm-dd. But with a text input, the browser has no recognition of what format the date should be in, and there are many formats in which people write dates. For example:\nddmmyyyy dd/mm/yyyy mm/dd/yyyy dd-mm-yyyy mm-dd-yyyy Month dd, yyyy One way around this is the pattern attribute on your date input. Even though the date picker doesn't use it, the text input fallback will. For example, try viewing the following in an unsupporting browser:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label\u0026gt; Enter your birthday: \u0026lt;input type=\u0026#34;date\u0026#34; name=\u0026#34;bday\u0026#34; required pattern=\u0026#34;\\d{4}-\\d{2}-\\d{2}\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;p\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect10 .code-example} ::: iframe ::: :::\nIf you submit it, you'll see that the browser displays an error and highlights the input as invalid if your entry doesn't match the pattern ####-##-## (where # is a digit from 0 to 9). Of course, this doesn't stop people from entering invalid dates, or incorrect formats. So we still have a problem.\nAt the moment, the best way to deal with dates in forms in a cross-browser way is to have the user enter the day, month, and year in separate controls, or to use a JavaScript library such as jQuery date picker{target=\u0026quot;_blank\u0026quot;}. :::\nExamples # ::: section-content In this example, we create 2 sets of UI elements for choosing dates: a native \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt; picker and a set of 3 \u0026lt;select\u0026gt; elements for older browsers that don't support the native date input.\n::: {#sect11 .code-example} ::: iframe ::: ::: :::\nHTML # ::: section-content The HTML looks like so:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;div class=\u0026#34;nativeDatePicker\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;bday\u0026#34;\u0026gt;Enter your birthday:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;date\u0026#34; id=\u0026#34;bday\u0026#34; name=\u0026#34;bday\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;p class=\u0026#34;fallbackLabel\u0026#34;\u0026gt;Enter your birthday:\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;fallbackDatePicker\u0026#34;\u0026gt; \u0026lt;span\u0026gt; \u0026lt;label for=\u0026#34;day\u0026#34;\u0026gt;Day:\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;day\u0026#34; name=\u0026#34;day\u0026#34;\u0026gt;\u0026lt;/select\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; \u0026lt;label for=\u0026#34;month\u0026#34;\u0026gt;Month:\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;month\u0026#34; name=\u0026#34;month\u0026#34;\u0026gt; \u0026lt;option selected\u0026gt;January\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;February\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;March\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;April\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;May\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;June\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;July\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;August\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;September\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;October\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;November\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;December\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; \u0026lt;label for=\u0026#34;year\u0026#34;\u0026gt;Year:\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;year\u0026#34; name=\u0026#34;year\u0026#34;\u0026gt;\u0026lt;/select\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/form\u0026gt; :::\nThe months are hardcoded (as they are always the same), while the day and year values are dynamically generated depending on the currently selected month and year, and the current year (see the code comments below for detailed explanations of how these functions work.) :::\nJavaScript # ::: section-content The other part of the code that may be of interest is the feature detection code \u0026mdash; to detect whether the browser supports \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt;.\nWe create a new \u0026lt;input\u0026gt; element, try setting its type to date, then immediately check what its type is \u0026mdash; unsupporting browsers will return text, because the date type falls back to type text. If \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt; isn't supported, we hide the native picker and show the fallback ( \u0026lt;select\u0026gt;) instead.\n::: code-example [js]{.language-name}\n// Obtain UI widgets const nativePicker = document.querySelector(\u0026#34;.nativeDatePicker\u0026#34;); const fallbackPicker = document.querySelector(\u0026#34;.fallbackDatePicker\u0026#34;); const fallbackLabel = document.querySelector(\u0026#34;.fallbackLabel\u0026#34;); const yearSelect = document.querySelector(\u0026#34;#year\u0026#34;); const monthSelect = document.querySelector(\u0026#34;#month\u0026#34;); const daySelect = document.querySelector(\u0026#34;#day\u0026#34;); // hide fallback initially fallbackPicker.style.display = \u0026#34;none\u0026#34;; fallbackLabel.style.display = \u0026#34;none\u0026#34;; // test whether a new date input falls back to a text input or not const test = document.createElement(\u0026#34;input\u0026#34;); try { test.type = \u0026#34;date\u0026#34;; } catch (e) { console.log(e.message); } // if it does, run the code inside the if () {} block if (test.type === \u0026#34;text\u0026#34;) { // hide the native picker and show the fallback nativePicker.style.display = \u0026#34;none\u0026#34;; fallbackPicker.style.display = \u0026#34;block\u0026#34;; fallbackLabel.style.display = \u0026#34;block\u0026#34;; // populate the days and years dynamically // (the months are always the same, therefore hardcoded) populateDays(monthSelect.value); populateYears(); } function populateDays(month) { // delete the current set of \u0026lt;option\u0026gt; elements out of the // day \u0026lt;select\u0026gt;, ready for the next set to be injected while (daySelect.firstChild) { daySelect.removeChild(daySelect.firstChild); } // Create variable to hold new number of days to inject let dayNum; // 31 or 30 days? if ( [ \u0026#34;January\u0026#34;, \u0026#34;March\u0026#34;, \u0026#34;May\u0026#34;, \u0026#34;July\u0026#34;, \u0026#34;August\u0026#34;, \u0026#34;October\u0026#34;, \u0026#34;December\u0026#34;, ].includes(month) ) { dayNum = 31; } else if ([\u0026#34;April\u0026#34;, \u0026#34;June\u0026#34;, \u0026#34;September\u0026#34;, \u0026#34;November\u0026#34;].includes(month)) { dayNum = 30; } else { // If month is February, calculate whether it is a leap year or not const year = yearSelect.value; const isLeap = new Date(year, 1, 29).getMonth() === 1; dayNum = isLeap ? 29 : 28; } // inject the right number of new \u0026lt;option\u0026gt; elements into the day \u0026lt;select\u0026gt; for (let i = 1; i \u0026lt;= dayNum; i++) { const option = document.createElement(\u0026#34;option\u0026#34;); option.textContent = i; daySelect.appendChild(option); } // if previous day has already been set, set daySelect\u0026#39;s value // to that day, to avoid the day jumping back to 1 when you // change the year if (previousDay) { daySelect.value = previousDay; // If the previous day was set to a high number, say 31, and then // you chose a month with less total days in it (e.g. February), // this part of the code ensures that the highest day available // is selected, rather than showing a blank daySelect if (daySelect.value === \u0026#34;\u0026#34;) { daySelect.value = previousDay - 1; } if (daySelect.value === \u0026#34;\u0026#34;) { daySelect.value = previousDay - 2; } if (daySelect.value === \u0026#34;\u0026#34;) { daySelect.value = previousDay - 3; } } } function populateYears() { // get this year as a number const date = new Date(); const year = date.getFullYear(); // Make this year, and the 100 years before it available in the year \u0026lt;select\u0026gt; for (let i = 0; i \u0026lt;= 100; i++) { const option = document.createElement(\u0026#34;option\u0026#34;); option.textContent = year - i; yearSelect.appendChild(option); } } // when the month or year \u0026lt;select\u0026gt; values are changed, rerun populateDays() // in case the change affected the number of available days yearSelect.onchange = () =\u0026gt; { populateDays(monthSelect.value); }; monthSelect.onchange = () =\u0026gt; { populateDays(monthSelect.value); }; //preserve day selection let previousDay; // update what day has been set to previously // see end of populateDays() for usage daySelect.onchange = () =\u0026gt; { previousDay = daySelect.value; }; :::\n::: {#sect12 .notecard .note} Note: Remember that some years have 53 weeks in them (see Weeks per year{target=\u0026quot;_blank\u0026quot;})! You'll need to take this into consideration when developing production apps. ::: :::\nTechnical summary # ::: section-content\nValue A string representing a date in YYYY-MM-DD format, or empty Events change and input Supported common attributes autocomplete, list, readonly, and step IDL attributes list, value, valueAsDate, valueAsNumber. DOM interface HTMLInputElement\nMethods select(), stepDown(), stepUp() Implicit ARIA Role no corresponding role ::: Specifications # ::: _table # Specification # HTML Standard\n[# date-state-(type=date)]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet date 20 12 57 No 11 14.1 4.4 25 57 11 5 1.5 :::\nSee also # ::: section-content\nThe generic \u0026lt;input\u0026gt; element and the interface used to manipulate it, HTMLInputElement Date and Time picker tutorial Date and time formats used in HTML Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date{._attribution-link} :::\n"},{"id":115,"href":"/docs/references/languages/html/element/input/datetime-local/","title":"Datetime Local","section":"HTML","content":" \u0026lt;input type=\u0026quot;datetime-local\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type datetime-local create input controls that let the user easily enter both a date and a time, including the year, month, and day as well as the time in hours and minutes. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;datetime-local\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Choose a time for your appointment:\n\u0026lt;input type=\u0026quot;datetime-local\u0026quot; id=\u0026quot;meeting-time\u0026quot; name=\u0026quot;meeting-time\u0026quot; value=\u0026quot;2018-06-12T19:30\u0026quot; min=\u0026quot;2018-06-07T00:00\u0026quot; max=\u0026quot;2018-06-14T00:00\u0026quot; /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput, label { margin: 0.4rem 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe control's UI varies in general from browser to browser. In browsers with no support, these degrade gracefully to simple \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt; controls.\nThe control is intended to represent a local date and time, not necessarily the user's local date and time. In other words, the input allows any valid combination of year, month, day, hour, and minute\u0026mdash;even if such a combination is invalid in the user's local time zone (such as the one hour within a daylight saving time spring-forward transition gap). :::\nValue # ::: section-content A string representing the value of the date entered into the input. The format of the date and time value used by this input type is described in Local date and time strings.\nYou can set a default value for the input by including a date and time inside the value attribute, like so:\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;party\u0026#34;\u0026gt;Enter a date and time for your party booking:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;party\u0026#34; type=\u0026#34;datetime-local\u0026#34; name=\u0026#34;partydate\u0026#34; value=\u0026#34;2017-06-01T08:30\u0026#34; /\u0026gt; :::\n::: {#sect1 .code-example} ::: iframe ::: :::\nOne thing to note is that the displayed date and time formats differ from the actual value; the displayed date and time are formatted according to the user's locale as reported by their operating system, whereas the date/time value is always formatted YYYY-MM-DDThh:mm. When the above value is submitted to the server, for example, it will look like partydate=2024-06-01T08:30.\n::: {#sect2 .notecard .note} Note: Also bear in mind that if such data is submitted via HTTP GET, the colon character will need to be escaped for inclusion in the URL parameters, e.g. partydate=2024-06-01T08%3A30. See encodeURI() for one way to do this. :::\nYou can also get and set the date value in JavaScript using the HTMLInputElement value property, for example:\n::: code-example [js]{.language-name}\nconst dateControl = document.querySelector(\u0026#39;input[type=\u0026#34;datetime-local\u0026#34;]\u0026#39;); dateControl.value = \u0026#34;2017-06-01T08:30\u0026#34;; ::: :::\nAdditional attributes # ::: section-content In addition to the attributes common to all \u0026lt;input\u0026gt; elements, datetime-local inputs offer the following attributes. :::\nmax # ::: section-content The latest date and time to accept. If the value entered into the element is later than this timestamp, the element fails constraint validation. If the value of the max attribute isn't a valid string that follows the format YYYY-MM-DDThh:mm, then the element has no maximum value.\nThis value must specify a date string later than or equal to the one specified by the min attribute. :::\nmin # ::: section-content The earliest date and time to accept; timestamps earlier than this will cause the element to fail constraint validation. If the value of the min attribute isn't a valid string that follows the format YYYY-MM-DDThh:mm, then the element has no minimum value.\nThis value must specify a date string earlier than or equal to the one specified by the max attribute. :::\nstep # ::: section-content The step attribute is a number that specifies the granularity that the value must adhere to, or the special value any, which is described below. Only values which are equal to the basis for stepping ( min if specified, value otherwise, and an appropriate default value if neither of those is provided) are valid.\nA string value of any means that no stepping is implied, and any value is allowed (barring other constraints, such as min and max).\n::: {#sect3 .notecard .note} Note: When the data entered by the user doesn't adhere to the stepping configuration, the user agent may round to the nearest valid value, preferring numbers in the positive direction when there are two equally close options. :::\nFor datetime-local inputs, the value of step is given in seconds, with a scaling factor of 1000 (since the underlying numeric value is in milliseconds). The default value of step is 60, indicating 60 seconds (or 1 minute, or 60,000 milliseconds).\nAt this time, it's unclear what a value of any means for step when used with datetime-local inputs. This will be updated as soon as that information is determined. :::\nUsing datetime-local inputs # ::: section-content Date/time inputs are convenient for the developer; they provide an easy UI for choosing dates and times, and they normalize the data format sent to the server, regardless of the user's locale. However, it is important to consider your users. Don't require your users to enter data that is not needed for your app to function. :::\nControlling input size # ::: section-content \u0026lt;input type=\u0026quot;datetime-local\u0026quot;\u0026gt; doesn't support form control sizing attributes such as size. You'll have to resort to CSS for customizing the sizes of these elements. :::\nSetting timezones # ::: section-content One thing the datetime-local input type doesn't provide is a way to set the time zone and/or locale of the date/time control. This was available in the datetime input type, but this type is now obsolete, having been removed from the spec. The main reasons why this was removed are a lack of implementation in browsers and concerns over the user interface/experience. It is easier to just have a control (or controls) for setting the date/time and then deal with the locale in a separate control.\nFor example, if you are creating a system where the user is likely to already be logged in, with their locale already set, you could provide the timezone in a hidden input type. For example:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;hidden\u0026#34; id=\u0026#34;timezone\u0026#34; name=\u0026#34;timezone\u0026#34; value=\u0026#34;-08:00\u0026#34; /\u0026gt; :::\nOn the other hand, if you were required to allow the user to enter a time zone along with a date/time input, you could have a \u0026lt;select\u0026gt; element to enable the user to set the right time zone by choosing a particular location from among a set of locations:\n::: code-example [html]{.language-name}\n\u0026lt;select name=\u0026#34;timezone\u0026#34; id=\u0026#34;timezone\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;Pacific/Kwajalein\u0026#34;\u0026gt;Eniwetok, Kwajalein\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;Pacific/Midway\u0026#34;\u0026gt;Midway Island, Samoa\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;Pacific/Honolulu\u0026#34;\u0026gt;Hawaii\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;Pacific/Marquesas\u0026#34;\u0026gt;Taiohae\u0026lt;/option\u0026gt; \u0026lt;!-- and so on --\u0026gt; \u0026lt;/select\u0026gt; :::\nIn either case, the date/time and time zone values would be submitted to the server as separate data points, and then you'd need to store them appropriately in the database on the server-side. :::\nValidation # ::: section-content By default, \u0026lt;input type=\u0026quot;datetime-local\u0026quot;\u0026gt; does not apply any validation to entered values. The UI implementations generally don't let you enter anything that isn't a date/time \u0026mdash; which is helpful \u0026mdash; but a user might still fill in no value and submit, or enter an invalid date and/or time (e.g. the 32nd of April).\nYou can use min and max to restrict the available dates (see Setting maximum and minimum dates), and you can use the required attribute to make filling in the date/time mandatory. As a result, supporting browsers will display an error if you try to submit a date that is outside the set bounds or an empty date field.\nLet's look at an example; here we've set minimum and maximum date/time values, and also made the field required:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;party\u0026#34;\u0026gt; Choose your preferred party date and time (required, June 1st 8.30am to June 30th 4.30pm): \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;party\u0026#34; type=\u0026#34;datetime-local\u0026#34; name=\u0026#34;partydate\u0026#34; min=\u0026#34;2017-06-01T08:30\u0026#34; max=\u0026#34;2017-06-30T16:30\u0026#34; required /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Book party!\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\nIf you try to submit the form with an incomplete date (or with a date outside the set bounds), the browser displays an error. Try playing with the example now:\n::: {#sect4 .code-example} ::: iframe ::: :::\nHere's the CSS used in the above example. Here we make use of the :valid and :invalid CSS properties to style the input based on whether the current value is valid. We put the icons on a \u0026lt;span\u0026gt; next to the input.\n::: code-example [css]{.language-name}\ndiv { margin-bottom: 10px; display: flex; align-items: center; } label { display: inline-block; width: 300px; } input:invalid + span::after { content: \u0026#34;✖\u0026#34;; padding-left: 5px; } input:valid + span::after { content: \u0026#34;✓\u0026#34;; padding-left: 5px; } :::\n::: {#sect5 .notecard .warning} Warning: HTML form validation is not a substitute for scripts that ensure that the entered data is in the proper format. It's far too easy for someone to make adjustments to the HTML that allow them to bypass the validation, or to remove it entirely. It's also possible for someone to bypass your HTML entirely and submit the data directly to your server. If your server-side code fails to validate the data it receives, problems can arise when improperly-formatted data is submitted (or data that is too large, is of the wrong type, and so forth). :::\n::: {#sect6 .notecard .note} Note: With a datetime-local input, the date value is always normalized to the format YYYY-MM-DDThh:mm. ::: :::\nExamples # Basic uses of datetime-local # ::: section-content The simplest use of \u0026lt;input type=\u0026quot;datetime-local\u0026quot;\u0026gt; involves a basic \u0026lt;input\u0026gt; and \u0026lt;label\u0026gt; element combination, as seen below:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;party\u0026#34;\u0026gt;Enter a date and time for your party booking:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;party\u0026#34; type=\u0026#34;datetime-local\u0026#34; name=\u0026#34;partydate\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect7 .code-example} ::: iframe ::: ::: :::\nSetting maximum and minimum dates and times # ::: section-content You can use the min and max attributes to restrict the dates/times that can be chosen by the user. In the following example, we are setting a minimum datetime of 2024-06-01T08:30 and a maximum datetime of 2024-06-30T16:30:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;party\u0026#34;\u0026gt;Enter a date and time for your party booking:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;party\u0026#34; type=\u0026#34;datetime-local\u0026#34; name=\u0026#34;partydate\u0026#34; min=\u0026#34;2024-06-01T08:30\u0026#34; max=\u0026#34;2024-06-30T16:30\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect8 .code-example} ::: iframe ::: :::\nOnly days in June 2024 can be selected. Depending on what browser you are using, times outside the specified values might not be selectable. In other browsers, invalid dates and times are selectable but will match :invalid and :out-of-range and will fail validation.\nIn some browsers (Chrome and Edge), only the \u0026quot;days\u0026quot; part of the date value will be editable, and dates outside June can't be scrolled. In others (Safari), the date picker will appear to allow any date, but the value will be clamped to the valid range when a date is selected.\nThe valid range included all times between the min and max values; the time of day is only constrained on the first and last dates in the range.\n::: {#sect9 .notecard .note} Note: You should be able to use the step attribute to vary the number of days jumped each time the date is incremented (e.g. maybe you only want to make Saturdays selectable). However, this does not seem to work effectively in any implementation at the time of writing. ::: :::\nTechnical summary # ::: section-content\nValue A string representing a date and time (in the local time zone), or empty. Events change and input Supported common attributes autocomplete, list, readonly, and step IDL attributes list, value, valueAsNumber. DOM interface HTMLInputElement\nMethods select(), stepDown(), stepUp() Implicit ARIA Role no corresponding role ::: Specifications # ::: _table # Specification # HTML Standard\n[# local-date-and-time-state-(type=datetime-local)]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet datetime-local 20 12 93 No 11 14.1 4.4 25 93 11 5 1.5 :::\nSee also # ::: section-content\nThe generic \u0026lt;input\u0026gt; element and the interface used to manipulate it, HTMLInputElement \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt; and \u0026lt;input type=\u0026quot;time\u0026quot;\u0026gt; Date and time formats used in HTML Date and Time picker tutorial Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local{._attribution-link} :::\n"},{"id":116,"href":"/docs/references/languages/html/element/input/email/","title":"Email","section":"HTML","content":" \u0026lt;input type=\u0026quot;email\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type email are used to let the user enter and edit an email address, or, if the multiple attribute is specified, a list of email addresses. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;email\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Enter your globex.com email:\n\u0026lt;input type=\u0026quot;email\u0026quot; id=\u0026quot;email\u0026quot; pattern=\u0026quot;.+@globex\\.com\u0026quot; size=\u0026quot;30\u0026quot; required /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput, label { margin: 0.4rem 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe input value is automatically validated to ensure that it's either empty or a properly-formatted email address (or list of addresses) before the form can be submitted. The :valid and :invalid CSS pseudo-classes are automatically applied as appropriate to visually denote whether the current value of the field is a valid email address or not. :::\nValue # ::: section-content The \u0026lt;input\u0026gt; element's value attribute contains a string which is automatically validated as conforming to email syntax. More specifically, there are three possible value formats that will pass validation:\nAn empty string (\u0026quot;\u0026quot;) indicating that the user did not enter a value or that the value was removed. A single properly-formed email address. This doesn't necessarily mean the email address exists, but it is at least formatted correctly. In simple terms, this means username@domain or username@domain.tld. There's more to it than that, of course; see Validation for a regular expression that matches the email address validation algorithm. If and only if the multiple attribute is specified, the value can be a list of properly-formed comma-separated email addresses. Any trailing and leading whitespace is removed from each address in the list. See Validation for details on how email addresses are validated to ensure that they're formatted properly. :::\nAdditional attributes # ::: section-content In addition to the attributes that operate on all \u0026lt;input\u0026gt; elements regardless of their type, email inputs support the following attributes. :::\nlist # ::: section-content The values of the list attribute is the id of a \u0026lt;datalist\u0026gt; element located in the same document. The \u0026lt;datalist\u0026gt; provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the type are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value. :::\nmaxlength # ::: section-content The maximum string length (measured in UTF-16 code units) that the user can enter into the email input. This must be an integer value of 0 or higher. If no maxlength is specified, or an invalid value is specified, the email input has no maximum length. This value must also be greater than or equal to the value of minlength.\nThe input will fail constraint validation if the length of the text value of the field is greater than maxlength UTF-16 code units long. Constraint validation is only applied when the value is changed by the user. :::\nminlength # ::: section-content The minimum string length (measured in UTF-16 code units) that the user can enter into the email input. This must be a non-negative integer value smaller than or equal to the value specified by maxlength. If no minlength is specified, or an invalid value is specified, the email input has no minimum length.\nThe input will fail constraint validation if the length of the text entered into the field is fewer than minlength UTF-16 code units long. Constraint validation is only applied when the value is changed by the user. :::\nmultiple # ::: section-content A Boolean attribute which, if present, indicates that the user can enter a list of multiple email addresses, separated by commas and, optionally, whitespace characters. See Allowing multiple email addresses for an example, or HTML attribute: multiple for more details.\n::: {#sect1 .notecard .note} Note: Normally, if you specify the required attribute, the user must enter a valid email address for the field to be considered valid. However, if you add the multiple attribute, a list of zero email addresses (an empty string, or one which is entirely whitespace) is a valid value. In other words, the user does not have to enter even one email address when multiple is specified, regardless of the value of required. ::: :::\npattern # ::: section-content The pattern attribute, when specified, is a regular expression that the input's value must match for the value to pass constraint validation. It must be a valid JavaScript regular expression, as used by the RegExp type, and as documented in our guide on regular expressions; the 'u' flag is specified when compiling the regular expression so that the pattern is treated as a sequence of Unicode code points, instead of as ASCII. No forward slashes should be specified around the pattern text.\nIf the specified pattern is not specified or is invalid, no regular expression is applied and this attribute is ignored completely.\n::: {#sect2 .notecard .note} Note: Use the title attribute to specify text that most browsers will display as a tooltip to explain what the requirements are to match the pattern. You should also include other explanatory text nearby. :::\nSee the section Pattern validation for details and an example. :::\nplaceholder # ::: section-content The placeholder attribute is a string that provides a brief hint to the user as to what kind of information is expected in the field. It should be a word or short phrase that demonstrates the expected type of data, rather than an explanatory message. The text must not include carriage returns or line feeds.\nIf the control's content has one directionality ( LTR or RTL) but needs to present the placeholder in the opposite directionality, you can use Unicode bidirectional algorithm formatting characters to override directionality within the placeholder; see How to use Unicode controls for bidi text{target=\u0026quot;_blank\u0026quot;} for more information.\n::: {#sect3 .notecard .note} Note: Avoid using the placeholder attribute if you can. It is not as semantically useful as other ways to explain your form, and can cause unexpected technical issues with your content. See \u0026lt;input\u0026gt; labels for more information. ::: :::\nreadonly # ::: section-content A Boolean attribute which, if present, means this field cannot be edited by the user. Its value can, however, still be changed by JavaScript code directly setting the HTMLInputElement value property.\n::: {#sect4 .notecard .note} Note: Because a read-only field cannot have a value, required does not have any effect on inputs with the readonly attribute also specified. ::: :::\nsize # ::: section-content The size attribute is a numeric value indicating how many characters wide the input field should be. The value must be a number greater than zero, and the default value is 20. Since character widths vary, this may or may not be exact and should not be relied upon to be so; the resulting input may be narrower or wider than the specified number of characters, depending on the characters and the font ( font settings in use).\nThis does not set a limit on how many characters the user can enter into the field. It only specifies approximately how many can be seen at a time. To set an upper limit on the length of the input data, use the maxlength attribute. :::\nUsing email inputs # ::: section-content Email addresses are among the most frequently-inputted textual data forms on the web; they're used when logging into websites, when requesting information, to allow order confirmation, for webmail, and so forth. As such, the email input type can make your job as a web developer much easier since it can help simplify your work when building the user interface and logic for email addresses. When you create an email input with the proper type value, email, you get automatic validation that the entered text is at least in the correct form to potentially be a legitimate email address. This can help avoid cases in which the user mistypes their address, or provides an invalid address.\nIt's important, however, to note that this is not enough to ensure that the specified text is an email address which actually exists, corresponds to the user of the site, or is acceptable in any other way. It ensures that the value of the field is properly formatted to be an email address.\n::: {#sect5 .notecard .note} Note: It's also crucial to remember that a user can tinker with your HTML behind the scenes, so your site must not use this validation for any security purposes. You must verify the email address on the server side of any transaction in which the provided text may have any security implications of any kind. ::: :::\nA simple email input # ::: section-content Currently, all browsers which implement this element implement it as a standard text input field with basic validation features. The specification does, however, allow browsers latitude on this. For example, the element could be integrated with the user's device's built-in address book to allow picking email addresses from that list. In its most basic form, an email input can be implemented like this:\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;emailAddress\u0026#34; type=\u0026#34;email\u0026#34; /\u0026gt; :::\n::: {#sect6 .code-example} ::: iframe ::: :::\nNotice that it's considered valid when empty and when a single validly-formatted email address is entered, but is otherwise not considered valid. By adding the required attribute, only validly-formed email addresses are allowed; the input is no longer considered valid when empty. :::\nAllowing multiple email addresses # ::: section-content By adding the multiple Boolean attribute, the input can be configured to accept multiple email addresses.\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;emailAddress\u0026#34; type=\u0026#34;email\u0026#34; multiple /\u0026gt; :::\n::: {#sect7 .code-example} ::: iframe ::: :::\nThe input is now considered valid when a single email address is entered, or when any number of email addresses separated by commas and, optionally, some number of whitespace characters are present.\n::: {#sect8 .notecard .note} Note: When multiple is used, the value is allowed to be empty. :::\nSome examples of valid strings when multiple is specified:\n\u0026quot;\u0026quot; \u0026quot;me@example\u0026quot; \u0026quot;me@example.org\u0026quot; \u0026quot;me@example.org,you@example.org\u0026quot; \u0026quot;me@example.org, you@example.org\u0026quot; \u0026quot;me@example.org,you@example.org, us@example.org\u0026quot; Some examples of invalid strings:\n\u0026quot;,\u0026quot; \u0026quot;me\u0026quot; \u0026quot;me@example.org you@example.org\u0026quot; ::: Placeholders # ::: section-content Sometimes it's helpful to offer an in-context hint as to what form the input data should take. This can be especially important if the page design doesn't offer descriptive labels for each \u0026lt;input\u0026gt;. This is where placeholders come in. A placeholder is a value that demonstrates the form the value should take by presenting an example of a valid value, which is displayed inside the edit box when the element's value is \u0026quot;\u0026quot;. Once data is entered into the box, the placeholder disappears; if the box is emptied, the placeholder reappears.\nHere, we have an email input with the placeholder sophie@example.com. Note how the placeholder disappears and reappears as you manipulate the contents of the edit field.\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;email\u0026#34; placeholder=\u0026#34;sophie@example.com\u0026#34; /\u0026gt; :::\n::: {#sect9 .code-example} ::: iframe ::: ::: :::\nControlling the input size # ::: section-content You can control not only the physical length of the input box, but also the minimum and maximum lengths allowed for the input text itself.\nPhysical input element size # The physical size of the input box can be controlled using the size attribute. With it, you can specify the number of characters the input box can display at a time. In this example the email edit box is 15 characters wide:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;email\u0026#34; size=\u0026#34;15\u0026#34; /\u0026gt; :::\n::: {#sect10 .code-example} ::: iframe ::: :::\nElement value length # The size is separate from the length limitation on the entered email address itself so that you can have fields fit in a small space while still allowing longer email address strings to be entered. You can specify a minimum length, in characters, for the entered email address using the minlength attribute; similarly, use maxlength to set the maximum length of the entered email address.\nThe example below creates a 32 character-wide email address entry box, requiring that the contents be no shorter than 3 characters and no longer than 64 characters.\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;email\u0026#34; size=\u0026#34;32\u0026#34; minlength=\u0026#34;3\u0026#34; maxlength=\u0026#34;64\u0026#34; /\u0026gt; :::\n::: {#sect11 .code-example} ::: iframe ::: ::: :::\nProviding default options # ::: section-content\nProviding a single default using the value attribute # As always, you can provide a default value for an email input box by setting its value attribute:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;email\u0026#34; value=\u0026#34;default@example.com\u0026#34; /\u0026gt; :::\n::: {#sect12 .code-example} ::: iframe ::: :::\nOffering suggested values # Taking it a step further, you can provide a list of default options from which the user can select by specifying the list attribute. This doesn't limit the user to those options, but does allow them to select commonly-used email addresses more quickly. This also offers hints to autocomplete. The list attribute specifies the ID of a \u0026lt;datalist\u0026gt;, which in turn contains one \u0026lt;option\u0026gt; element per suggested value; each option's value is the corresponding suggested value for the email entry box.\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;email\u0026#34; size=\u0026#34;40\u0026#34; list=\u0026#34;defaultEmails\u0026#34; /\u0026gt; \u0026lt;datalist id=\u0026#34;defaultEmails\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;jbond007@mi6.defence.gov.uk\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;jbourne@unknown.net\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;nfury@shield.org\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;tony@starkindustries.com\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;hulk@grrrrrrrr.arg\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\n::: {#sect13 .code-example} ::: iframe ::: :::\nWith the \u0026lt;datalist\u0026gt; element and its \u0026lt;option\u0026gt;s in place, the browser will offer the specified values as potential values for the email address; this is typically presented as a popup or drop-down menu containing the suggestions. While the specific user experience may vary from one browser to another, typically clicking in the edit box presents a drop-down of the suggested email addresses. Then, as the user types, the list is filtered to show only matching values. Each typed character narrows down the list until the user makes a selection or types a custom value. :::\nValidation # ::: section-content There are two levels of content validation available for email inputs. First, there's the standard level of validation offered to all \u0026lt;input\u0026gt;s, which automatically ensures that the contents meet the requirements to be a valid email address. But there's also the option to add additional filtering to ensure that your own specialized needs are met, if you have any.\n::: {#sect14 .notecard .warning} Warning: HTML form validation is not a substitute for scripts that ensure that the entered data is in the proper format.It's far too easy for someone to make adjustments to the HTML that allow them to bypass the validation, or to remove it completely. It's also possible for someone to bypass your HTML entirely and submit the data directly to your server. If your server-side code fails to validate the data it receives, disaster could strike when improperly-formatted data (or data which is too large, is of the wrong type, and so forth) is entered into your database. ::: :::\nBasic validation # ::: section-content Browsers automatically provide validation to ensure that only text that matches the standard format for Internet email addresses is entered into the input box. Browsers use an algorithm equivalent to the following regular expression:\n::: code-example [js]{.language-name}\n/^[a-zA-Z0-9.!#$%\u0026amp;\u0026#39;*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/; :::\nTo learn more about how form validation works and how to take advantage of the :valid and :invalid CSS properties to style the input based on whether the current value is valid, see Form data validation.\n::: {#sect15 .notecard .note} Note: There are known specification issues related to international domain names and the validation of email addresses in HTML. See W3C bug 15489{target=\u0026quot;_blank\u0026quot;} for details. ::: :::\nPattern validation # ::: section-content If you need the entered email address to be restricted further than just \u0026quot;any string that looks like an email address,\u0026quot; you can use the pattern attribute to specify a regular expression the value must match for it to be valid. If the multiple attribute is specified, each individual item in the comma-delineated list of values must match the regular expression.\nFor example, let's say you're building a page for employees of Best Startup Ever, Inc. which will let them contact their IT department for help. In our simplified form, the user needs to enter their email address and a message describing the problem they need help with. We want to ensure that not only does the user provide a valid email address, but for security purposes, we require that the address be an internal corporate email address.\nSince inputs of type email validate against both the standard email address validation and the specified pattern, you can implement this easily. Let's see how:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;div class=\u0026#34;emailBox\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;emailAddress\u0026#34;\u0026gt;Your email address\u0026lt;/label\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input id=\u0026#34;emailAddress\u0026#34; type=\u0026#34;email\u0026#34; size=\u0026#34;64\u0026#34; maxlength=\u0026#34;64\u0026#34; required placeholder=\u0026#34;username@beststartupever.com\u0026#34; pattern=\u0026#34;.+@beststartupever\\.com\u0026#34; title=\u0026#34;Please provide only a Best Startup Ever corporate email address\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;messageBox\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;message\u0026#34;\u0026gt;Request\u0026lt;/label\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;textarea id=\u0026#34;message\u0026#34; cols=\u0026#34;80\u0026#34; rows=\u0026#34;8\u0026#34; required placeholder=\u0026#34;My shoes are too tight, and I have forgotten how to dance.\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Send Request\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect16 .code-example} ::: iframe ::: :::\nOur \u0026lt;form\u0026gt; contains one \u0026lt;input\u0026gt; of type email for the user's email address, a \u0026lt;textarea\u0026gt; to enter their message for IT into, and an \u0026lt;input\u0026gt; of type \u0026quot;submit\u0026quot;, which creates a button to submit the form. Each text entry box has a \u0026lt;label\u0026gt; associated with it to let the user know what's expected of them.\nLet's take a closer look at the email address entry box. Its size and maxlength attributes are both set to 64 in order to show room for 64 characters worth of email address, and to limit the number of characters actually entered to a maximum of 64. The required attribute is specified, making it mandatory that a valid email address be provided.\nAn appropriate placeholder is provided---`username@beststartupever.com---to demonstrate what constitutes a valid entry. This string demonstrates both that an email address should be entered, and suggests that it should be a corporate beststartupever.com account. This is in addition to the fact that using type email` will validate the text to ensure that it's formatted like an email address. If the text in the input box isn't an email address, you'll get an error message that looks something like this:\n![Invalid email address in error state with a popout from the input reading 'please enter an email address'.] height=\u0026ldquo;125\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;}\nIf we left things at that, we would at least be validating on legitimate email addresses. But we want to go one step farther: we want to make sure that the email address is in fact in the form \u0026quot; _username_@beststartupever.com\u0026quot;. This is where we'll use pattern. We set pattern to .+@beststartupever.com. This simple regular expression requests a string that consists of at least one character of any kind, then an \u0026quot;@\u0026quot; followed by the domain name \u0026quot;beststartupever.com\u0026quot;.\nNote that this is not even close to an adequate filter for valid email addresses; it would allow things such as \u0026quot; @beststartupever.com\u0026quot; (note the leading space) or \u0026quot;@@beststartupever.com\u0026quot;, neither of which is valid. However, the browser runs both the standard email address filter and our custom pattern against the specified text. As a result, we wind up with a validation which says \u0026quot;make sure this resembles a valid email address, and if it is, make sure it's also a beststartupever.com address.\u0026quot;\nIt's advisable to use the title attribute along with pattern. If you do, the title must describe the pattern. That is, it should explain what format the data should take on, rather than any other information. That's because the title may be displayed or spoken as part of a validation error message. For example, the browser might present the message \u0026quot;The entered text doesn't match the required pattern.\u0026quot; followed by your specified title. If your title is something like \u0026quot;Email address\u0026quot;, the result would be the message \u0026quot;The entered text doesn't match the required pattern. Email address\u0026quot;, which isn't very good.\nThat's why, instead, we specify the string \u0026quot;Please provide only a Best Startup Ever corporate email address\u0026quot; By doing that, the resulting full error message might be something like \u0026quot;The entered text doesn't match the required pattern. Please provide only a Best Startup Ever corporate email address.\u0026quot;\n![A valid email address, but the input is in error state with a popout from the input reading 'The entered text doesn't match the required pattern. Please provide only a Best Startup Ever corporate email address.'] height=\u0026ldquo;140\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;}\n::: {#sect17 .notecard .note} Note: If you run into trouble while writing your validation regular expressions and they're not working properly, check your browser's console; there may be helpful error messages there to aid you in solving the problem. ::: :::\nExamples # ::: section-content Here we have an email input with the ID emailAddress which is allowed to be up to a maximum of 256 characters long. The input box itself is physically 64 characters wide, and displays the text user@example.gov as a placeholder anytime the field is empty. In addition, by using the multiple attribute, the box is configured to allow the user to enter zero or more email addresses, separated by commas, as described in Allowing multiple email addresses. As a final touch, the list attribute contains the ID of a \u0026lt;datalist\u0026gt; whose \u0026lt;option\u0026gt;s specify a set of suggested values the user can choose from.\nAs an added touch, the \u0026lt;label\u0026gt; element is used to establish a label for the email entry box, with its for attribute referencing the emailAddress ID of the \u0026lt;input\u0026gt; element. By associating the two elements in this way, clicking on the label will focus the input element.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;emailAddress\u0026#34;\u0026gt;Email\u0026lt;/label\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input id=\u0026#34;emailAddress\u0026#34; type=\u0026#34;email\u0026#34; placeholder=\u0026#34;user@example.gov\u0026#34; list=\u0026#34;defaultEmails\u0026#34; size=\u0026#34;64\u0026#34; maxlength=\u0026#34;256\u0026#34; multiple /\u0026gt; \u0026lt;datalist id=\u0026#34;defaultEmails\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;jbond007@mi6.defence.gov.uk\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;jbourne@unknown.net\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;nfury@shield.org\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;tony@starkindustries.com\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;hulk@grrrrrrrr.arg\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\n::: {#sect18 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nValue A string representing an email address, or empty Events change and input Supported Common Attributes autocomplete, list, maxlength, minlength, multiple, name, pattern, placeholder, readonly, required, size, and type IDL attributes list and value DOM interface HTMLInputElement\nMethods select() Implicit ARIA Role with no list attribute: textbox\nwith list attribute: combobox ::: Specifications # ::: _table # Specification # HTML Standard\n[# email-state-(type=email)]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari on IOS Samsung Explorer Android Android for Android Internet Android email 5 12 1 10 11 5 4.4 18 4 11 3 1.0\n\\[\\\u0026quot;Doesn\\'t do validation, but instead offers a custom \\'email\\' keyboard, which is designed to make entering email addresses easier.\\\u0026quot;, \\\u0026quot;The custom \\'email\\' keyboard does not provide a comma key, so users cannot enter multiple email addresses.\\\u0026quot;, \\\u0026quot;Automatically applies a default style of `opacity: 0.4` to disable textual `\u0026lt;input\u0026gt;` elements, including those of type \\'email\\'. Other major browsers don\\'t currently share this particular default style.\\\u0026quot;\\] :::\nSee also # ::: section-content\nHTML forms guide \u0026lt;input\u0026gt; \u0026lt;input type=\u0026quot;tel\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;url\u0026quot;\u0026gt; Attributes: list minlength maxlength multiple pattern placeholder readonly size Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email{._attribution-link} :::\n"},{"id":117,"href":"/docs/references/languages/html/element/input/file/","title":"File","section":"HTML","content":" \u0026lt;input type=\u0026quot;file\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements with type=\u0026quot;file\u0026quot; let the user choose one or more files from their device storage. Once chosen, the files can be uploaded to a server using form submission, or manipulated using JavaScript code and the File API. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;file\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Choose a profile picture:\n\u0026lt;input type=\u0026quot;file\u0026quot; id=\u0026quot;avatar\u0026quot; name=\u0026quot;avatar\u0026quot; accept=\u0026quot;image/png, image/jpeg\u0026quot; /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput, label { margin: 0.4rem 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nValue # ::: section-content A file input's value attribute contains a string that represents the path to the selected file(s). If no file is selected yet, the value is an empty string (\u0026quot;\u0026quot;). When the user selected multiple files, the value represents the first file in the list of files they selected. The other files can be identified using the input's HTMLInputElement.files property.\n::: {#sect1 .notecard .note} Note: The value is always the file's name prefixed with C:\\fakepath\\{target=\u0026quot;_blank\u0026quot;}, which isn't the real path of the file. This is to prevent malicious software from guessing the user's file structure. ::: :::\nAdditional attributes # ::: section-content In addition to the common attributes shared by all \u0026lt;input\u0026gt; elements, inputs of type file also support the following attributes. :::\naccept # ::: section-content The accept attribute value is a string that defines the file types the file input should accept. This string is a comma-separated list of unique file type specifiers. Because a given file type may be identified in more than one manner, it's useful to provide a thorough set of type specifiers when you need files of a given format.\nFor instance, there are a number of ways Microsoft Word files can be identified, so a site that accepts Word files might use an \u0026lt;input\u0026gt; like this:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;docpicker\u0026#34; accept=\u0026#34;.doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\u0026#34; /\u0026gt; ::: :::\ncapture # ::: section-content The capture attribute value is a string that specifies which camera to use for capture of image or video data, if the accept attribute indicates that the input should be of one of those types. A value of user indicates that the user-facing camera and/or microphone should be used. A value of environment specifies that the outward-facing camera and/or microphone should be used. If this attribute is missing, the user agent is free to decide on its own what to do. If the requested facing mode isn't available, the user agent may fall back to its preferred default mode.\n::: {#sect2 .notecard .note} Note: capture was previously a Boolean attribute which, if present, requested that the device's media capture device(s) such as camera or microphone be used instead of requesting a file input. ::: :::\nmultiple # ::: section-content When the multiple Boolean attribute is specified, the file input allows the user to select more than one file. :::\nNon-standard attributes # ::: section-content In addition to the attributes listed above, the following non-standard attributes are available on some browsers. You should try to avoid using them when possible, since doing so will limit the ability of your code to function in browsers that don't implement them. :::\nwebkitdirectory # ::: section-content The Boolean webkitdirectory attribute, if present, indicates that only directories should be available to be selected by the user in the file picker interface. See HTMLInputElement.webkitdirectory for additional details and examples.\nThough originally implemented only for WebKit-based browsers, webkitdirectory is also usable in Microsoft Edge as well as Firefox 50 and later. However, even though it has relatively broad support, it is still not standard and should not be used unless you have no alternative. :::\nUnique file type specifiers # ::: section-content A unique file type specifier is a string that describes a type of file that may be selected by the user in an \u0026lt;input\u0026gt; element of type file. Each unique file type specifier may take one of the following forms:\nA valid case-insensitive filename extension, starting with a period (\u0026quot;.\u0026quot;) character. For example: .jpg, .pdf, or .doc. A valid MIME type string, with no extensions. The string audio/* meaning \u0026quot;any audio file\u0026quot;. The string video/* meaning \u0026quot;any video file\u0026quot;. The string image/* meaning \u0026quot;any image file\u0026quot;. The accept attribute takes a string containing one or more of these unique file type specifiers as its value, separated by commas. For example, a file picker that needs content that can be presented as an image, including both standard image formats and PDF files, might look like this:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;file\u0026#34; accept=\u0026#34;image/*,.pdf\u0026#34; /\u0026gt; ::: :::\nUsing file inputs # A basic example # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;form method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;file\u0026#34;\u0026gt;Choose file to upload\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;file\u0026#34; name=\u0026#34;file\u0026#34; multiple /\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nThis produces the following output:\n::: {#sect3 .code-example} ::: iframe ::: :::\n::: {#sect4 .notecard .note} Note: You can find this example on GitHub too \u0026mdash; see the source code{target=\u0026quot;_blank\u0026quot;}, and also see it running live{target=\u0026quot;_blank\u0026quot;}. :::\nRegardless of the user's device or operating system, the file input provides a button that opens up a file picker dialog that allows the user to choose a file.\nIncluding the multiple attribute, as shown above, specifies that multiple files can be chosen at once. The user can choose multiple files from the file picker in any way that their chosen platform allows (e.g. by holding down [Shift]{.kbd} or [Control]{.kbd} and then clicking). If you only want the user to choose a single file per \u0026lt;input\u0026gt;, omit the multiple attribute. :::\nGetting information on selected files # ::: section-content The selected files' are returned by the element's HTMLInputElement.files property, which is a FileList object containing a list of File objects. The FileList behaves like an array, so you can check its length property to get the number of selected files.\nEach File object contains the following information:\nname The file's name.\nlastModified A number specifying the date and time at which the file was last modified, in milliseconds since the UNIX epoch (January 1, 1970 at midnight).\nlastModifiedDate [Deprecated]{.visually-hidden} A Date object representing the date and time at which the file was last modified. This is deprecated and should not be used. Use lastModified instead.\nsize The size of the file in bytes.\ntype The file's MIME type.\nwebkitRelativePath [Non-standard]{.visually-hidden} A string specifying the file's path relative to the base directory selected in a directory picker (that is, a file picker in which the webkitdirectory attribute is set). This is non-standard and should be used with caution.\n::: {#sect5 .notecard .note} Note: You can set as well as get the value of HTMLInputElement.files in all modern browsers; this was most recently added to Firefox, in version 57 (see Firefox bug 1384030{target=\u0026quot;_blank\u0026quot;}). ::: :::\nLimiting accepted file types # ::: section-content Often you won't want the user to be able to pick any arbitrary type of file; instead, you often want them to select files of a specific type or types. For example, if your file input lets users upload a profile picture, you probably want them to select web-compatible image formats, such as JPEG or PNG.\nAcceptable file types can be specified with the accept attribute, which takes a comma-separated list of allowed file extensions or MIME types. Some examples:\naccept=\u0026quot;image/png\u0026quot; or accept=\u0026quot;.png\u0026quot; \u0026mdash; Accepts PNG files. accept=\u0026quot;image/png, image/jpeg\u0026quot; or accept=\u0026quot;.png, .jpg, .jpeg\u0026quot; \u0026mdash; Accept PNG or JPEG files. accept=\u0026quot;image/*\u0026quot; \u0026mdash; Accept any file with an image/* MIME type. (Many mobile devices also let the user take a picture with the camera when this is used.) accept=\u0026quot;.doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\u0026quot; \u0026mdash; accept anything that smells like an MS Word document. Let's look at a more complete example:\n::: code-example [html]{.language-name}\n\u0026lt;form method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;profile_pic\u0026#34;\u0026gt;Choose file to upload\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;profile_pic\u0026#34; name=\u0026#34;profile_pic\u0026#34; accept=\u0026#34;.jpg, .jpeg, .png\u0026#34; /\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nThis produces a similar-looking output to the previous example:\n::: {#sect6 .code-example} ::: iframe ::: :::\n::: {#sect7 .notecard .note} Note: You can find this example on GitHub too \u0026mdash; see the source code{target=\u0026quot;_blank\u0026quot;}, and also see it running live{target=\u0026quot;_blank\u0026quot;}. :::\nIt may look similar, but if you try selecting a file with this input, you'll see that the file picker only lets you select the file types specified in the accept value (the exact interface differs across browsers and operating systems).\nThe accept attribute doesn't validate the types of the selected files; it provides hints for browsers to guide users towards selecting the correct file types. It is still possible (in most cases) for users to toggle an option in the file chooser that makes it possible to override this and select any file they wish, and then choose incorrect file types.\nBecause of this, you should make sure that the accept attribute is backed up by appropriate server-side validation. :::\nNotes # ::: section-content\nYou cannot set the value of a file picker from a script \u0026mdash; doing something like the following has no effect:\n::: code-example [js]{.language-name}\nconst input = document.querySelector(\u0026#34;input[type=file]\u0026#34;); input.value = \u0026#34;foo\u0026#34;; :::\nWhen a file is chosen using an \u0026lt;input type=\u0026quot;file\u0026quot;\u0026gt;, the real path to the source file is not shown in the input's value attribute for obvious security reasons. Instead, the filename is shown, with C:\\fakepath\\ prepended to it. There are some historical reasons for this quirk, but it is supported across all modern browsers, and in fact is defined in the spec{target=\u0026quot;_blank\u0026quot;}. :::\nExamples # ::: section-content In this example, we'll present a slightly more advanced file chooser that takes advantage of the file information available in the HTMLInputElement.files property, as well as showing off a few clever tricks.\n::: {#sect8 .notecard .note} Note: You can see the complete source code for this example on GitHub \u0026mdash; file-example.html{target=\u0026quot;_blank\u0026quot;} ( see it live also{target=\u0026quot;_blank\u0026quot;}). We won't explain the CSS; the JavaScript is the main focus. :::\nFirst of all, let's look at the HTML:\n::: code-example [html]{.language-name}\n\u0026lt;form method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;image_uploads\u0026#34;\u0026gt;Choose images to upload (PNG, JPG)\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;image_uploads\u0026#34; name=\u0026#34;image_uploads\u0026#34; accept=\u0026#34;.jpg, .jpeg, .png\u0026#34; multiple /\u0026gt; \u0026lt;div class=\u0026#34;preview\u0026#34;\u0026gt; \u0026lt;p\u0026gt;No files currently selected for upload\u0026lt;/p\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nThis is similar to what we've seen before \u0026mdash; nothing special to comment on.\nNext, let's walk through the JavaScript.\nIn the first lines of script, we get references to the form input itself, and the `` element with the class of .preview. Next, we hide the \u0026lt;input\u0026gt; element \u0026mdash; we do this because file inputs tend to be ugly, difficult to style, and inconsistent in their design across browsers. You can activate the input element by clicking its \u0026lt;label\u0026gt;, so it is better to visually hide the input and style the label like a button, so the user will know to interact with it if they want to upload files.\n::: code-example [js]{.language-name}\nconst input = document.querySelector(\u0026#34;input\u0026#34;); const preview = document.querySelector(\u0026#34;.preview\u0026#34;); input.style.opacity = 0; :::\n::: {#sect9 .notecard .note} Note: opacity is used to hide the file input instead of visibility: hidden or display: none, because assistive technology interprets the latter two styles to mean the file input isn't interactive. :::\nNext, we add an event listener to the input to listen for changes to its selected value (in this case, when files are selected). The event listener invokes our custom updateImageDisplay() function.\n::: code-example [js]{.language-name}\ninput.addEventListener(\u0026#34;change\u0026#34;, updateImageDisplay); :::\nWhenever the updateImageDisplay() function is invoked, we:\nUse a while loop to empty the previous contents of the preview ``. Grab the FileList object that contains the information on all the selected files, and store it in a variable called curFiles. Check to see if no files were selected, by checking if curFiles.length is equal to 0. If so, print a message into the preview `` stating that no files have been selected. If files have been selected, we loop through each one, printing information about it into the preview ``. Things to note here: We use the custom validFileType() function to check whether the file is of the correct type (e.g. the image types specified in the accept attribute). If it is, we: Print out its name and file size into a list item inside the previous `` (obtained from file.name and file.size). The custom returnFileSize() function returns a nicely-formatted version of the size in bytes/KB/MB (by default the browser reports the size in absolute bytes). Generate a thumbnail preview of the image by calling URL.createObjectURL(file). Then, insert the image into the list item too by creating a new \u0026lt;img\u0026gt; and setting its src to the thumbnail. If the file type is invalid, we display a message inside a list item telling the user that they need to select a different file type. ::: code-example [js]{.language-name}\nfunction updateImageDisplay() { while (preview.firstChild) { preview.removeChild(preview.firstChild); } const curFiles = input.files; if (curFiles.length === 0) { const para = document.createElement(\u0026#34;p\u0026#34;); para.textContent = \u0026#34;No files currently selected for upload\u0026#34;; preview.appendChild(para); } else { const list = document.createElement(\u0026#34;ol\u0026#34;); preview.appendChild(list); for (const file of curFiles) { const listItem = document.createElement(\u0026#34;li\u0026#34;); const para = document.createElement(\u0026#34;p\u0026#34;); if (validFileType(file)) { para.textContent = `File name ${file.name}, file size ${returnFileSize( file.size, )}.`; const image = document.createElement(\u0026#34;img\u0026#34;); image.src = URL.createObjectURL(file); listItem.appendChild(image); listItem.appendChild(para); } else { para.textContent = `File name ${file.name}: Not a valid file type. Update your selection.`; listItem.appendChild(para); } list.appendChild(listItem); } } } :::\nThe custom validFileType() function takes a File object as a parameter, then uses Array.prototype.includes() to check if any value in the fileTypes matches the file's type property. If a match is found, the function returns true. If no match is found, it returns false.\n::: code-example [js]{.language-name}\n// https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types const fileTypes = [ \u0026#34;image/apng\u0026#34;, \u0026#34;image/bmp\u0026#34;, \u0026#34;image/gif\u0026#34;, \u0026#34;image/jpeg\u0026#34;, \u0026#34;image/pjpeg\u0026#34;, \u0026#34;image/png\u0026#34;, \u0026#34;image/svg+xml\u0026#34;, \u0026#34;image/tiff\u0026#34;, \u0026#34;image/webp\u0026#34;, \u0026#34;image/x-icon\u0026#34;, ]; function validFileType(file) { return fileTypes.includes(file.type); } :::\nThe returnFileSize() function takes a number (of bytes, taken from the current file's size property), and turns it into a nicely formatted size in bytes/KB/MB.\n::: code-example [js]{.language-name}\nfunction returnFileSize(number) { if (number \u0026lt; 1024) { return `${number} bytes`; } else if (number \u0026gt;= 1024 \u0026amp;\u0026amp; number \u0026lt; 1048576) { return `${(number / 1024).toFixed(1)} KB`; } else if (number \u0026gt;= 1048576) { return `${(number / 1048576).toFixed(1)} MB`; } } :::\nThe example looks like this; have a play:\n::: {#sect10 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nValue A string representing the path to the selected file. Events change and input Supported common attributes required Additional Attributes accept, capture, multiple IDL attributes files and value DOM interface HTMLInputElement\nMethods select() Implicit ARIA Role no corresponding role ::: Specifications # ::: _table # Specification # HTML Standard\n[# file-upload-state-(type=file)]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android file 1 12 1 Yes 11 1 4.4 18 4 11 1 1.0\nYou can set as well as get the value of `HTMLInputElement.files` in all modern browsers; this was most recently added to Firefox, in version 57 (see [bug 1384030](https://bugzil.la/1384030)). :::\nSee also # ::: section-content\nUsing files from web applications \u0026mdash; contains a number of other useful examples related to \u0026lt;input type=\u0026quot;file\u0026quot;\u0026gt; and the File API. Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file{._attribution-link} :::\n"},{"id":118,"href":"/docs/references/languages/html/element/input/hidden/","title":"Hidden","section":"HTML","content":" \u0026lt;input type=\u0026quot;hidden\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type hidden let web developers include data that cannot be seen or modified by users when a form is submitted. For example, the ID of the content that is currently being ordered or edited, or a unique security token. Hidden inputs are completely invisible in the rendered page, and there is no way to make it visible in the page's content.\n::: {#sect1 .notecard .note} Note: The input and change events do not apply to this input type. Hidden inputs cannot be focused even using JavaScript (e.g. hiddenInput.focus()). ::: :::\nValue # ::: section-content The \u0026lt;input\u0026gt; element's value attribute holds a string that contains the hidden data you want to include when the form is submitted to the server. This specifically can't be edited or seen by the user via the user interface, although you could edit the value via browser developer tools.\n::: {#sect2 .notecard .warning} Warning: While the value isn't displayed to the user in the page's content, it is visible\u0026mdash;and can be edited\u0026mdash;using any browser's developer tools or \u0026quot;View Source\u0026quot; functionality. Do not rely on hidden inputs as a form of security. ::: :::\nAdditional attributes # ::: section-content In addition to the attributes common to all \u0026lt;input\u0026gt; elements, hidden inputs offer the following attributes. :::\nname # ::: section-content This is actually one of the common attributes, but it has a special meaning available for hidden inputs. Normally, the name attribute functions on hidden inputs just like on any other input. However, when the form is submitted, a hidden input whose name is set to _charset_ will automatically be reported with the value set to the character encoding used to submit the form. :::\nUsing hidden inputs # ::: section-content As mentioned above, hidden inputs can be used anywhere that you want to include data the user can't see or edit along with the form when it's submitted to the server. Let's look at some examples that illustrate its use. :::\nTracking edited content # ::: section-content One of the most common uses for hidden inputs is to keep track of what database record needs to be updated when an edit form is submitted. A typical workflow looks like this:\nUser decides to edit some content they have control over, such as a blog post, or a product entry. They get started by pressing the edit button. The content to be edited is taken from the database and loaded into an HTML form to allow the user to make changes. After editing, the user submits the form, and the updated data is sent back to the server to be updated in the database. The idea here is that during step 2, the ID of the record being updated is kept in a hidden input. When the form is submitted in step 3, the ID is automatically sent back to the server with the record content. The ID lets the site's server-side component know exactly which record needs to be updated with the submitted data.\nYou can see a full example of what this might look like in the Examples section below. :::\nImproving website security # ::: section-content Hidden inputs are also used to store and submit security tokens or secrets, for the purposes of improving website security. The basic idea is that if a user is filling in a sensitive form, such as a form on their banking website to transfer some money to another account, the secret they would be provided with would prove that they are who they say they are, and that they are using the correct form to submit the transfer request.\nThis would stop a malicious user from creating a fake form, pretending to be a bank, and emailing the form to unsuspecting users to trick them into transferring money to the wrong place. This kind of attack is called a Cross Site Request Forgery (CSRF); pretty much any reputable server-side framework uses hidden secrets to prevent such attacks.\n::: {#sect3 .notecard .note} Note: Placing the secret in a hidden input doesn't inherently make it secure. The key's composition and encoding would do that. The value of the hidden input is that it keeps the secret associated with the data and automatically includes it when the form is sent to the server. You need to use well-designed secrets to actually secure your website. ::: :::\nValidation # ::: section-content Hidden inputs don't participate in constraint validation; they have no real value to be constrained. :::\nExamples # ::: section-content Let's look at how we might implement a simple version of the edit form we described earlier (see Tracking edited content), using a hidden input to remember the ID of the record being edited.\nThe edit form's HTML might look a bit like this:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;title\u0026#34;\u0026gt;Post title:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;title\u0026#34; name=\u0026#34;title\u0026#34; value=\u0026#34;My excellent blog post\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;content\u0026#34;\u0026gt;Post content:\u0026lt;/label\u0026gt; \u0026lt;textarea id=\u0026#34;content\u0026#34; name=\u0026#34;content\u0026#34; cols=\u0026#34;60\u0026#34; rows=\u0026#34;5\u0026#34;\u0026gt; This is the content of my excellent blog post. I hope you enjoy it! \u0026lt;/textarea\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Update post\u0026lt;/button\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; id=\u0026#34;postId\u0026#34; name=\u0026#34;postId\u0026#34; value=\u0026#34;34657\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\nLet's also add some simple CSS:\n::: code-example [css]{.language-name}\nhtml { font-family: sans-serif; } form { width: 500px; } div { display: flex; margin-bottom: 10px; } label { flex: 2; line-height: 2; text-align: right; padding-right: 20px; } input, textarea { flex: 7; font-family: sans-serif; font-size: 1.1rem; padding: 5px; } textarea { height: 60px; } :::\nThe server would set the value of the hidden input with the ID \u0026quot;postID\u0026quot; to the ID of the post in its database before sending the form to the user's browser and would use that information when the form is returned to know which database record to update with modified information. No scripting is needed in the content to handle this.\nThe output looks like this:\n::: {#sect4 .code-example} ::: iframe ::: :::\n::: {#sect5 .notecard .note} Note: You can also find the example on GitHub (see the source code{target=\u0026quot;_blank\u0026quot;}, and also see it running live{target=\u0026quot;_blank\u0026quot;}). :::\nWhen submitted, the form data sent to the server will look something like this:\ntitle=My+excellent+blog+post\u0026amp;content=This+is+the+content+of+my+excellent+blog+post.+I+hope+you+enjoy+it!\u0026amp;postId=34657\nEven though the hidden input cannot be seen at all, its data is still submitted. :::\nTechnical summary # ::: section-content\nValue A string representing the value of the hidden data you want to pass back to the server. Events None. Supported Common Attributes autocomplete IDL attributes value DOM interface HTMLInputElement\nMethods None. Implicit ARIA Role no corresponding role ::: Specifications # ::: _table # Specification # HTML Standard\n[# hidden-state-(type=hidden)]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet hidden 1 12 1 Yes 2 1 4.4 18 4 14 1 1.0 :::\nSee also # ::: section-content\nHTML forms guide \u0026lt;input\u0026gt; and the HTMLInputElement interface it's based upon ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/hidden{._attribution-link} :::\n"},{"id":119,"href":"/docs/references/languages/html/element/input/image/","title":"Image","section":"HTML","content":" \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type image are used to create graphical submit buttons, i.e. submit buttons that take the form of an image rather than text. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Sign in to your account:\n\u0026lt;label for=\u0026quot;userId\u0026quot;\u0026gt;User ID\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; id=\u0026quot;userId\u0026quot; name=\u0026quot;userId\u0026quot; /\u0026gt; \u0026lt;input type=\u0026quot;image\u0026quot; id=\u0026quot;image\u0026quot; alt=\u0026quot;Login\u0026quot; src=\u0026quot;/media/examples/login-button.png\u0026quot; /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { font-size: 0.8rem; }\nlabel, input[type='image'] { margin-top: 1rem; } input[type='image'] { width: 80px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nValue # ::: section-content \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; elements do not accept value attributes. The path to the image to be displayed is specified in the src attribute. :::\nAdditional attributes # ::: section-content In addition to the attributes shared by all \u0026lt;input\u0026gt; elements, image button inputs support the following attributes. :::\nalt # ::: section-content The alt attribute provides an alternate string to use as the button's label if the image cannot be shown (due to error, a user agent that cannot or is configured not to show images, or if the user is using a screen reading device). If provided, it must be a non-empty string appropriate as a label for the button.\nFor example, if you have a graphical button that shows an image with an icon and/or image text \u0026quot;Login Now\u0026quot;, you should also set the alt attribute to something like Login Now.\n::: {#sect1 .notecard .note} Note: While the alt attribute is technically optional, you should always include one to maximize the usability of your content. :::\nFunctionally, the alt attribute of the \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; element works just like the alt attribute on \u0026lt;img\u0026gt; elements. :::\nformaction # ::: section-content A string indicating the URL to which to submit the data. This takes precedence over the action attribute on the \u0026lt;form\u0026gt; element that owns the \u0026lt;input\u0026gt;.\nThis attribute is also available on \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt; and \u0026lt;button\u0026gt; elements. :::\nformenctype # ::: section-content A string that identifies the encoding method to use when submitting the form data to the server. There are three permitted values:\napplication/x-www-form-urlencoded This, the default value, sends the form data as a string after URL encoding{target=\u0026quot;_blank\u0026quot;} the text using an algorithm such as encodeURI().\nmultipart/form-data Uses the FormData API to manage the data, allowing for files to be submitted to the server. You must use this encoding type if your form includes any \u0026lt;input\u0026gt; elements of type file ( \u0026lt;input type=\u0026quot;file\u0026quot;\u0026gt;).\ntext/plain Plain text; mostly useful only for debugging, so you can easily see the data that's to be submitted.\nIf specified, the value of the formenctype attribute overrides the owning form's action attribute.\nThis attribute is also available on \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt; and \u0026lt;button\u0026gt; elements. :::\nformmethod # ::: section-content A string indicating the HTTP method to use when submitting the form's data; this value overrides any method attribute given on the owning form. Permitted values are:\nget A URL is constructed by starting with the URL given by the formaction or action attribute, appending a question mark (\u0026quot;?\u0026quot;) character, then appending the form's data, encoded as described by formenctype or the form's enctype attribute. This URL is then sent to the server using an HTTP get request. This method works well for simple forms that contain only ASCII characters and have no side effects. This is the default value.\npost The form's data is included in the body of the request that is sent to the URL given by the formaction or action attribute using an HTTP post request. This method supports complex data and file attachments.\ndialog This method is used to indicate that the button closes the dialog with which the input is associated, and does not transmit the form data at all.\nThis attribute is also available on \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt; and \u0026lt;button\u0026gt; elements. :::\nformnovalidate # ::: section-content A Boolean attribute which, if present, specifies that the form should not be validated before submission to the server. This overrides the value of the novalidate attribute on the element's owning form.\nThis attribute is also available on \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt; and \u0026lt;button\u0026gt; elements. :::\nformtarget # ::: section-content A string which specifies a name or keyword that indicates where to display the response received after submitting the form. The string must be the name of a browsing context (that is, a tab, window, or \u0026lt;iframe\u0026gt;. A value specified here overrides any target given by the target attribute on the \u0026lt;form\u0026gt; that owns this input.\nIn addition to the actual names of tabs, windows, or inline frames, there are a few special keywords that can be used:\n_self Loads the response into the same browsing context as the one that contains the form. This will replace the current document with the received data. This is the default value used if none is specified.\n_blank Loads the response into a new, unnamed, browsing context. This is typically a new tab in the same window as the current document, but may differ depending on the configuration of the user agent.\n_parent Loads the response into the parent browsing context of the current one. If there is no parent context, this behaves the same as _self.\n_top Loads the response into the top-level browsing context; this is the browsing context that is the topmost ancestor of the current context. If the current context is the topmost context, this behaves the same as _self.\nThis attribute is also available on \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt; and \u0026lt;button\u0026gt; elements. :::\nheight # ::: section-content A number specifying the height, in CSS pixels, at which to draw the image specified by the src attribute. :::\nsrc # ::: section-content A string specifying the URL of the image file to display to represent the graphical submit button. When the user interacts with the image, the input is handled like any other button input. :::\nwidth # ::: section-content A number indicating the width at which to draw the image, in CSS pixels. :::\nObsolete attributes # ::: section-content The following attribute was defined by HTML 4 for image inputs, but was not implemented by all browsers and has since been deprecated. :::\nusemap # ::: section-content If usemap is specified, it must be the name of an image map element, \u0026lt;map\u0026gt;, that defines an image map to use with the image. This usage is obsolete; you should switch to using the \u0026lt;img\u0026gt; element when you want to use image maps. :::\nUsing image inputs # ::: section-content The \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; element is a replaced element (an element whose content isn't generated or directly managed by the CSS layer), behaving in much the same way as a regular \u0026lt;img\u0026gt; element, but with the capabilities of a submit button. :::\nEssential image input features # ::: section-content Let's look at a basic example that includes all the essential features you'd need to use (These work exactly the same as they do on the \u0026lt;img\u0026gt; element.):\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;image\u0026#34; type=\u0026#34;image\u0026#34; width=\u0026#34;100\u0026#34; height=\u0026#34;30\u0026#34; alt=\u0026#34;Login\u0026#34; src=\u0026#34;https://raw.githubusercontent.com/mdn/learning-area/master/html/forms/image-type-example/login.png\u0026#34; /\u0026gt; :::\n::: {#sect2 .code-example} ::: iframe ::: :::\nThe src attribute is used to specify the path to the image you want to display in the button. The alt attribute provides alt text for the image, so screen reader users can get a better idea of what the button is used for. It will also display if the image can't be shown for any reason (for example if the path is misspelled). If possible, use text which matches the label you'd use if you were using a standard submit button. The width and height attributes are used to specify the width and height the image should be shown at, in pixels. The button is the same size as the image; if you need the button's hit area to be bigger than the image, you will need to use CSS (e.g. padding). Also, if you specify only one dimension, the other is automatically adjusted so that the image maintains its original aspect ratio. ::: Overriding default form behaviors # ::: section-content \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; elements \u0026mdash; like regular submit buttons \u0026mdash; can accept a number of attributes that override the default form behavior:\nformaction The URI of a program that processes the information submitted by the input element; overrides the action attribute of the element's form owner.\nformenctype Specifies the type of content that is used to submit the form to the server. Possible values are:\napplication/x-www-form-urlencoded: The default value if the attribute is not specified. text/plain. If this attribute is specified, it overrides the enctype attribute of the element's form owner.\nformmethod Specifies the HTTP method that the browser uses to submit the form. Possible values are:\npost: The data from the form is included in the body of the form and is sent to the server. get: The data from the form is appended to the form attribute URI, with a '?' as a separator, and the resulting URI is sent to the server. Use this method when the form has no side effects and contains only ASCII characters. If specified, this attribute overrides the method attribute of the element's form owner.\nformnovalidate A Boolean attribute specifying that the form is not to be validated when it is submitted. If this attribute is specified, it overrides the novalidate attribute of the element's form owner.\nformtarget A name or keyword indicating where to display the response that is received after submitting the form. This is a name of, or keyword for, a browsing context (for example, tab, window, or inline frame). If this attribute is specified, it overrides the target attribute of the element's form owner. The following keywords have special meanings:\n_self: Load the response into the same browsing context as the current one. This value is the default if the attribute is not specified. _blank: Load the response into a new unnamed browsing context. _parent: Load the response into the parent browsing context of the current one. If there is no parent, this option behaves the same way as _self. _top: Load the response into the top-level browsing context (that is, the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same as _self. ::: Using the x and y data points # ::: section-content When you submit a form using a button created with \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt;, two extra data points are submitted to the server automatically by the browser \u0026mdash; x and y. You can see this in action in our X Y coordinates example{target=\u0026quot;_blank\u0026quot;}.\nWhen you click on the image to submit the form, you'll see the data appended to the URL as parameters, for example ?x=52\u0026amp;y=55. If the image input has a name attribute, then keep in mind that the specified name is prefixed on every attribute, so if the name is position, then the returned coordinates would be formatted in the URL as ?position.x=52\u0026amp;position.y=55. This, of course, applies to all other attributes as well.\nThese are the X and Y coordinates of the image that the mouse clicked on to submit the form, where (0,0) is the top-left of the image and the default in case submission happens without a click on the image. These can be used when the position the image was clicked on is significant, for example you might have a map that when clicked, sends the coordinates that were clicked to the server. The server-side code then works out what location was clicked on, and returns information about places nearby.\nIn our above example, we could write server-side code that works out what color was clicked on by the coordinates submitted, and keeps a tally of the favorite colors people voted for. :::\nAdjusting the image's position and scaling algorithm # ::: section-content You can use the object-position property to adjust the positioning of the image within the \u0026lt;input\u0026gt; element's frame, and the object-fit property to control how the image's size is adjusted to fit within the frame. This allows you to specify a frame for the image using the width and height attributes to set aside space in the layout, then adjust where within that space the image is located and how (or if) it is scaled to occupy that space. :::\nExamples # A login form # ::: section-content The following example shows the same button as before, but included in the context of a typical login form.\n::: {#sect3 .code-example} ::: iframe ::: :::\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;p\u0026gt;Login to your account\u0026lt;/p\u0026gt; \u0026lt;label for=\u0026#34;userId\u0026#34;\u0026gt;User ID\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;userId\u0026#34; name=\u0026#34;userId\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;pwd\u0026#34;\u0026gt;Password\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;pwd\u0026#34; name=\u0026#34;pwd\u0026#34; /\u0026gt; \u0026lt;input id=\u0026#34;image\u0026#34; type=\u0026#34;image\u0026#34; src=\u0026#34;https://raw.githubusercontent.com/mdn/learning-area/master/html/forms/image-type-example/login.png\u0026#34; alt=\u0026#34;Login\u0026#34; width=\u0026#34;100\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\nCSS # And now some simple CSS to make the basic elements sit more neatly:\n::: code-example [css]{.language-name}\ndiv { margin-bottom: 10px; } label { display: inline-block; width: 70px; text-align: right; padding-right: 10px; } ::: :::\nAdjusting the image position and scaling # ::: section-content In this example, we adapt the previous example to set aside more space for the image and then adjust the actual image's size and positioning using object-fit and object-position.\n::: {#sect4 .code-example} ::: iframe ::: :::\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;p\u0026gt;Login to your account\u0026lt;/p\u0026gt; \u0026lt;label for=\u0026#34;userId\u0026#34;\u0026gt;User ID\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;userId\u0026#34; name=\u0026#34;userId\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;pwd\u0026#34;\u0026gt;Password\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;pwd\u0026#34; name=\u0026#34;pwd\u0026#34; /\u0026gt; \u0026lt;input id=\u0026#34;image\u0026#34; type=\u0026#34;image\u0026#34; src=\u0026#34;https://raw.githubusercontent.com/mdn/learning-area/master/html/forms/image-type-example/login.png\u0026#34; alt=\u0026#34;Login\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;100\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\nCSS # ::: code-example [css]{.language-name}\ndiv { margin-bottom: 10px; } label { display: inline-block; width: 70px; text-align: right; padding-right: 10px; } #image { object-position: right top; object-fit: contain; background-color: #ddd; } :::\nHere, object-position is configured to draw the image in the top-right corner of the element, while object-fit is set to contain, which indicates that the image should be drawn at the largest size that will fit within the element's box without altering its aspect ratio. Note the visible grey background of the element still visible in the area not covered by the image. :::\nTechnical summary # ::: section-content\nValue None — the value attribute should not be specified. Events None. Supported common attributes alt, src, width, height, formaction, formenctype, formmethod, formnovalidate, formtarget IDL attributes None. DOM interface HTMLInputElement\nMethods None. Implicit ARIA Role button ::: Specifications # ::: _table # Specification # HTML Standard\n[# image-button-state-(type=image)]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet image 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 :::\nSee also # ::: section-content\n\u0026lt;input\u0026gt; and the HTMLInputElement interface which implements it. The HTML \u0026lt;img\u0026gt; element Positioning and sizing the image within the \u0026lt;input\u0026gt; element's frame: object-position and object-fit Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/image{._attribution-link} :::\n"},{"id":120,"href":"/docs/references/languages/html/element/input/month/","title":"Month","section":"HTML","content":" \u0026lt;input type=\u0026quot;month\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type month create input fields that let the user enter a month and year allowing a month and year to be easily entered. The value is a string whose value is in the format \u0026quot;YYYY-MM\u0026quot;, where YYYY is the four-digit year and MM is the month number. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;month\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Start month:\n\u0026lt;input type=\u0026quot;month\u0026quot; id=\u0026quot;start\u0026quot; name=\u0026quot;start\u0026quot; min=\u0026quot;2018-03\u0026quot; value=\u0026quot;2018-05\u0026quot; /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput, label { margin: 0.4rem 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe control's UI varies in general from browser to browser; at the moment support is patchy, with only Chrome/Opera and Edge on desktop \u0026mdash; and most modern mobile browser versions \u0026mdash; having usable implementations. In browsers that don't support month inputs, the control degrades gracefully to a simple \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt;, although there may be automatic validation of the entered text to ensure it's formatted as expected.\nFor those of you using a browser that doesn't support month, the screenshot below shows what it looks like in Chrome and Opera. Clicking the down arrow on the right-hand side brings up a date picker that lets you select the month and year.\n![Month control on Chrome browser] height=\u0026ldquo;216\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;}\nThe Microsoft Edge month control looks like this:\n![Month control on Edge browser] height=\u0026ldquo;389\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;} :::\nValue # ::: section-content A string representing the value of the month and year entered into the input, in the form YYYY-MM (four or more digit year, then a hyphen (\u0026quot;-\u0026quot;), followed by the two-digit month). The format of the month string used by this input type is described in Month strings. :::\nSetting a default value # ::: section-content You can set a default value for the input control by including a month and year inside the value attribute, like so:\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;bday-month\u0026#34;\u0026gt;What month were you born in?\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;bday-month\u0026#34; type=\u0026#34;month\u0026#34; name=\u0026#34;bday-month\u0026#34; value=\u0026#34;2001-06\u0026#34; /\u0026gt; :::\n::: {#sect1 .code-example} ::: iframe ::: :::\nOne thing to note is that the displayed date format differs from the actual value; most user agents display the month and year in a locale-appropriate form, based on the set locale of the user's operating system, whereas the date value is always formatted yyyy-MM.\nWhen the above value is submitted to the server, for example, it will look like bday-month=1978-06. :::\nSetting the value using JavaScript # ::: section-content You can also get and set the date value in JavaScript using the [HTMLInputElement.value]{.page-not-created} property, for example:\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;bday-month\u0026#34;\u0026gt;What month were you born in?\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;bday-month\u0026#34; type=\u0026#34;month\u0026#34; name=\u0026#34;bday-month\u0026#34; /\u0026gt; :::\n::: code-example [js]{.language-name}\nconst monthControl = document.querySelector(\u0026#39;input[type=\u0026#34;month\u0026#34;]\u0026#39;); monthControl.value = \u0026#34;2001-06\u0026#34;; :::\n::: {#sect2 .code-example} ::: iframe ::: ::: :::\nAdditional attributes # ::: section-content In addition to the attributes common to \u0026lt;input\u0026gt; elements, month inputs offer the following attributes. :::\nlist # ::: section-content The values of the list attribute is the id of a \u0026lt;datalist\u0026gt; element located in the same document. The \u0026lt;datalist\u0026gt; provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the type are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value. :::\nmax # ::: section-content The latest year and month, in the string format discussed in the Value section above, to accept. If the value entered into the element exceeds this, the element fails constraint validation. If the value of the max attribute isn't a valid string in \u0026quot;yyyy-MM\u0026quot; format, then the element has no maximum value.\nThis value must specify a year-month pairing later than or equal to the one specified by the min attribute. :::\nmin # ::: section-content The earliest year and month to accept, in the same \u0026quot;yyyy-MM\u0026quot; format described above. If the value of the element is less than this, the element fails constraint validation. If a value is specified for min that isn't a valid year and month string, the input has no minimum value.\nThis value must be a year-month pairing which is earlier than or equal to the one specified by the max attribute. :::\nreadonly # ::: section-content A Boolean attribute which, if present, means this field cannot be edited by the user. Its value can, however, still be changed from JavaScript code that directly sets the value of the [HTMLInputElement.value]{.page-not-created} property.\n::: {#sect3 .notecard .note} Note: Because a read-only field cannot have a value, required does not have any effect on inputs with the readonly attribute also specified. ::: :::\nstep # ::: section-content The step attribute is a number that specifies the granularity that the value must adhere to, or the special value any, which is described below. Only values which are equal to the basis for stepping ( min if specified, value otherwise, and an appropriate default value if neither of those is provided) are valid.\nA string value of any means that no stepping is implied, and any value is allowed (barring other constraints, such as min and max).\n::: {#sect4 .notecard .note} Note: When the data entered by the user doesn't adhere to the stepping configuration, the user agent may round to the nearest valid value, preferring numbers in the positive direction when there are two equally close options. :::\nFor month inputs, the value of step is given in months, with a scaling factor of 1 (since the underlying numeric value is also in months). The default value of step is 1 month. :::\nUsing month inputs # ::: section-content Date-related inputs (including month) sound convenient at first glance; they promise an easy UI for choosing dates, and they normalize the data format sent to the server, regardless of the user's locale. However, there are issues with \u0026lt;input type=\u0026quot;month\u0026quot;\u0026gt; because at this time, many major browsers don't yet support it.\nWe'll look at basic and more complex uses of \u0026lt;input type=\u0026quot;month\u0026quot;\u0026gt;, then offer advice on mitigating the browser support issue in the section Handling browser support). :::\nBasic uses of month # ::: section-content The simplest use of \u0026lt;input type=\u0026quot;month\u0026quot;\u0026gt; involves a basic \u0026lt;input\u0026gt; and \u0026lt;label\u0026gt; element combination, as seen below:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;bday-month\u0026#34;\u0026gt;What month were you born in?\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;bday-month\u0026#34; type=\u0026#34;month\u0026#34; name=\u0026#34;bday-month\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect5 .code-example} ::: iframe ::: ::: :::\nSetting maximum and minimum dates # ::: section-content You can use the min and max attributes to restrict the range of dates that the user can choose. In the following example we specify a minimum month of 1900-01 and a maximum month of 2013-12:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;bday-month\u0026#34;\u0026gt;What month were you born in?\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;bday-month\u0026#34; type=\u0026#34;month\u0026#34; name=\u0026#34;bday-month\u0026#34; min=\u0026#34;1900-01\u0026#34; max=\u0026#34;2013-12\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect6 .code-example} ::: iframe ::: :::\nThe result here is that:\nOnly months between in January 1900 and December 2013 can be selected; months outside that range can't be scrolled to in the control. Depending on what browser you are using, you might find that months outside the specified range might not be selectable in the month picker (e.g. Edge), or invalid (see Validation) but still available (e.g. Chrome). ::: Controlling input size # ::: section-content \u0026lt;input type=\u0026quot;month\u0026quot;\u0026gt; doesn't support form sizing attributes such as size. You'll have to resort to CSS for sizing needs. :::\nValidation # ::: section-content By default, \u0026lt;input type=\u0026quot;month\u0026quot;\u0026gt; does not apply any validation to entered values. The UI implementations generally don't let you enter anything that isn't a date \u0026mdash; which is helpful \u0026mdash; but you can still submit the form with the month input empty, or enter an invalid date (e.g. the 32nd of April).\nTo help avoid this, you can use min and max to restrict the available dates (see Setting maximum and minimum dates), and in addition use the required attribute to make filling in the date mandatory. As a result, supporting browsers will display an error if you try to submit a date that is outside the set bounds, or an empty date field.\nLet's look at an example; here we've set minimum and maximum dates, and also made the field required:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;month\u0026#34;\u0026gt; What month would you like to visit (June to Sept.)? \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;month\u0026#34; type=\u0026#34;month\u0026#34; name=\u0026#34;month\u0026#34; min=\u0026#34;2022-06\u0026#34; max=\u0026#34;2022-09\u0026#34; required /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit form\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\nIf you try to submit the form without both the month and year specified (or with a date outside the set bounds), the browser displays an error. Try playing with the example now:\n::: {#sect7 .code-example} ::: iframe ::: :::\nHere's a screenshot for those of you who aren't using a supporting browser:\n![Month required prompt on Chrome browser] height=\u0026ldquo;93\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;}\nHere's the CSS used in the above example. Here we make use of the :valid and :invalid CSS properties to style the input based on whether the current value is valid. We had to put the icons on a \u0026lt;span\u0026gt; next to the input, not on the input itself, because in Chrome the generated content is placed inside the form control, and can't be styled or shown effectively.\n::: code-example [css]{.language-name}\ndiv { margin-bottom: 10px; position: relative; } input[type=\u0026#34;number\u0026#34;] { width: 100px; } input + span { padding-right: 30px; } input:invalid + span::after { position: absolute; content: \u0026#34;✖\u0026#34;; padding-left: 5px; } input:valid + span::after { position: absolute; content: \u0026#34;✓\u0026#34;; padding-left: 5px; } :::\n::: {#sect8 .notecard .warning} Warning: HTML form validation is not a substitute for scripts that ensure that the entered data is in the proper format. It's far too easy for someone to make adjustments to the HTML that allow them to bypass the validation, or to remove it entirely. It's also possible for someone to bypass your HTML entirely and submit the data directly to your server. If your server-side code fails to validate the data it receives, disaster could strike when improperly-formatted data is submitted (or data which is too large, of the wrong type, and so forth). ::: :::\nHandling browser support # ::: section-content As mentioned above, the major problem with using date inputs at the time of writing is that many major browsers don't yet implement them all; only Chrome/Opera and Edge support it on desktop, and most modern browsers on mobile. As an example, the month picker on Chrome for Android looks like this:\n![Month picker on Chrome for Android] height=\u0026ldquo;640\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;}\nNon-supporting browsers gracefully degrade to a text input, but this creates problems both in terms of consistency of user interface (the presented control will be different), and data handling.\nThe second problem is the more serious of the two. As mentioned earlier, with a month input the actual value is always normalized to the format yyyy-mm. On the other hand, in its default configuration, a text input has no idea what format the date should be in, and this is an issue because of the number of different ways in which people write dates. For example:\nmmyyyy (072022) mm/yyyy (07/2022) mm-yyyy (07-2022) yyyy-mm (2022-07) Month yyyy (July 2022) and so forth\u0026hellip; One way around this is to put a pattern attribute on your month input. Even though the month input doesn't use it, if the browser falls back to treating it like a text input, the pattern will be used. For example, try viewing the following demo in a browser that doesn't support month inputs:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;month\u0026#34;\u0026gt; What month would you like to visit (June to Sept.)? \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;month\u0026#34; type=\u0026#34;month\u0026#34; name=\u0026#34;month\u0026#34; min=\u0026#34;2022-06\u0026#34; max=\u0026#34;2022-09\u0026#34; required pattern=\u0026#34;[0-9]{4}-[0-9]{2}\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit form\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect9 .code-example} ::: iframe ::: :::\nIf you try submitting it, you'll see that the browser now displays an error message (and highlights the input as invalid) if your entry doesn't match the pattern nnnn-nn, where n is a number from 0 to 9. Of course, this doesn't stop people from entering invalid dates (such as 0000-42), or incorrectly formatted dates that follow the pattern.\nThere's also the problem that the user won't necessarily know which of the many date formats is expected. We have work left to do.\nThe best way to deal with dates in forms in a cross-browser way (until all major browsers have supported them for a while) is to get the user to enter the month and year in separate controls ( \u0026lt;select\u0026gt; elements being popular; see below for an implementation), or use JavaScript libraries such as the jQuery date picker{target=\u0026quot;_blank\u0026quot;} plugin. :::\nExamples # ::: section-content In this example, we create two sets of UI elements, each designed to let the user select a month and year. The first is a native month input, and the other is a pair of \u0026lt;select\u0026gt; elements that allow choosing a month and year independently, for compatibility with browsers that don't yet support \u0026lt;input type=\u0026quot;month\u0026quot;\u0026gt;.\n::: {#sect10 .code-example} ::: iframe ::: ::: :::\nHTML # ::: section-content The form that requests the month and year looks like this:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;div class=\u0026#34;nativeDatePicker\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;month-visit\u0026#34;\u0026gt;What month would you like to visit us?\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;month\u0026#34; id=\u0026#34;month-visit\u0026#34; name=\u0026#34;month-visit\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;p class=\u0026#34;fallbackLabel\u0026#34;\u0026gt;What month would you like to visit us?\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;fallbackDatePicker\u0026#34;\u0026gt; \u0026lt;span\u0026gt; \u0026lt;label for=\u0026#34;month\u0026#34;\u0026gt;Month:\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;month\u0026#34; name=\u0026#34;month\u0026#34;\u0026gt; \u0026lt;option selected\u0026gt;January\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;February\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;March\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;April\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;May\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;June\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;July\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;August\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;September\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;October\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;November\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;December\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; \u0026lt;label for=\u0026#34;year\u0026#34;\u0026gt;Year:\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;year\u0026#34; name=\u0026#34;year\u0026#34;\u0026gt;\u0026lt;/select\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/form\u0026gt; :::\nThe [](../div) with the ID `nativeDatePicker` uses the `month` input type to request the month and year, while the with the ID fallbackDatePicker instead uses a pair of \u0026lt;select\u0026gt; elements. The first requests the month, and the second the year.\nThe \u0026lt;select\u0026gt; for choosing the month is hardcoded with the names of the months, as they don't change (leaving localization out of things). The list of available year values is dynamically generated depending on the current year (see the code comments below for detailed explanations of how these functions work). :::\nJavaScript # ::: section-content The JavaScript code that handles selecting which approach to use and to set up the list of years to include in the non-native year \u0026lt;select\u0026gt; follows.\nThe part of the example that may be of most interest is the feature detection code. In order to detect whether the browser supports \u0026lt;input type=\u0026quot;month\u0026quot;\u0026gt;, we create a new \u0026lt;input\u0026gt; element, try setting its type to month, then immediately check what its type is set to. Browsers that don't support type month will return text, since that's What month falls back to when not supported. If \u0026lt;input type=\u0026quot;month\u0026quot;\u0026gt; is not supported, we hide the native picker and show the fallback picker UI instead.\n::: code-example [js]{.language-name}\n// Get UI elements const nativePicker = document.querySelector(\u0026#34;.nativeDatePicker\u0026#34;); const fallbackPicker = document.querySelector(\u0026#34;.fallbackDatePicker\u0026#34;); const fallbackLabel = document.querySelector(\u0026#34;.fallbackLabel\u0026#34;); const yearSelect = document.querySelector(\u0026#34;#year\u0026#34;); const monthSelect = document.querySelector(\u0026#34;#month\u0026#34;); // Hide fallback initially fallbackPicker.style.display = \u0026#34;none\u0026#34;; fallbackLabel.style.display = \u0026#34;none\u0026#34;; // Test whether a new date input falls back to a text input or not const test = document.createElement(\u0026#34;input\u0026#34;); try { test.type = \u0026#34;month\u0026#34;; } catch (e) { console.log(e.description); } // If it does, run the code inside the if () {} block if (test.type === \u0026#34;text\u0026#34;) { // Hide the native picker and show the fallback nativePicker.style.display = \u0026#34;none\u0026#34;; fallbackPicker.style.display = \u0026#34;block\u0026#34;; fallbackLabel.style.display = \u0026#34;block\u0026#34;; // Populate the years dynamically // (the months are always the same, therefore hardcoded) populateYears(); } function populateYears() { // Get the current year as a number const date = new Date(); const year = date.getFullYear(); // Make this year, and the 100 years before it available in the year \u0026lt;select\u0026gt; for (let i = 0; i \u0026lt;= 100; i++) { const option = document.createElement(\u0026#34;option\u0026#34;); option.textContent = year - i; yearSelect.appendChild(option); } } :::\n::: {#sect11 .notecard .note} Note: Remember that some years have 53 weeks in them (see Weeks per year{target=\u0026quot;_blank\u0026quot;})! You'll need to take this into consideration when developing production apps. ::: :::\nTechnical summary # ::: section-content\nValue A string representing a month and year, or empty. Events change and input Supported common attributes autocomplete, list, readonly, and step. IDL attributes value DOM interface HTMLInputElement\nMethods select(), stepDown(), stepUp(). Implicit ARIA Role no corresponding role ::: Specifications # ::: _table # Specification # HTML Standard\n[# month-state-(type=month)]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android month 20 12 No No 11 No 4.4 25 18 14 Yes 1.5\nThe input type is recognized, but there is no month-specific control. See [bug 200416](https://webkit.org/b/200416). :::\nSee also # ::: section-content\nThe generic \u0026lt;input\u0026gt; element and the interface used to manipulate it, HTMLInputElement Date and time formats used in HTML Date and Time picker tutorial \u0026lt;input type=\u0026quot;datetime-local\u0026quot;\u0026gt;, \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt;, \u0026lt;input type=\u0026quot;time\u0026quot;\u0026gt;, and \u0026lt;input type=\u0026quot;week\u0026quot;\u0026gt; Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/month{._attribution-link} :::\n"},{"id":121,"href":"/docs/references/languages/html/element/input/number/","title":"Number","section":"HTML","content":" \u0026lt;input type=\u0026quot;number\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type number are used to let the user enter a number. They include built-in validation to reject non-numerical entries.\nThe browser may opt to provide stepper arrows to let the user increase and decrease the value using their mouse or by tapping with a fingertip. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;number\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Number of tentacles (10-100):\n\u0026lt;input type=\u0026quot;number\u0026quot; id=\u0026quot;tentacles\u0026quot; name=\u0026quot;tentacles\u0026quot; min=\u0026quot;10\u0026quot; max=\u0026quot;100\u0026quot; /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput, label { margin: 0.4rem 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nOn browsers that don't support inputs of type number, a number input falls back to type text. :::\nValue # ::: section-content A number representing the value of the number entered into the input. You can set a default value for the input by including a number inside the value attribute, like so:\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;number\u0026#34; type=\u0026#34;number\u0026#34; value=\u0026#34;42\u0026#34; /\u0026gt; :::\n::: {#sect1 .code-example} ::: iframe ::: ::: :::\nAdditional attributes # ::: section-content In addition to the attributes commonly supported by all \u0026lt;input\u0026gt; types, inputs of type number support these attributes. :::\nlist # ::: section-content The values of the list attribute is the id of a \u0026lt;datalist\u0026gt; element located in the same document. The \u0026lt;datalist\u0026gt; provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the type are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value. :::\nmax # ::: section-content The maximum value to accept for this input. If the value entered into the element exceeds this, the element fails constraint validation. If the value of the max attribute isn't a number, then the element has no maximum value.\nThis value must be greater than or equal to the value of the min attribute. :::\nmin # ::: section-content The minimum value to accept for this input. If the value of the element is less than this, the element fails constraint validation. If a value is specified for min that isn't a valid number, the input has no minimum value.\nThis value must be less than or equal to the value of the max attribute. :::\nplaceholder # ::: section-content The placeholder attribute is a string that provides a brief hint to the user as to what kind of information is expected in the field. It should be a word or short phrase that demonstrates the expected type of data, rather than an explanatory message. The text must not include carriage returns or line feeds.\nIf the control's content has one directionality ( LTR or RTL) but needs to present the placeholder in the opposite directionality, you can use Unicode bidirectional algorithm formatting characters to override directionality within the placeholder; see How to use Unicode controls for bidi text{target=\u0026quot;_blank\u0026quot;} for more information.\n::: {#sect2 .notecard .note} Note: Avoid using the placeholder attribute if you can. It is not as semantically useful as other ways to explain your form, and can cause unexpected technical issues with your content. See \u0026lt;input\u0026gt; labels for more information. ::: :::\nreadonly # ::: section-content A Boolean attribute which, if present, means this field cannot be edited by the user. Its value can, however, still be changed by JavaScript code directly setting the HTMLInputElement value property.\n::: {#sect3 .notecard .note} Note: Because a read-only field cannot have a value, required does not have any effect on inputs with the readonly attribute also specified. ::: :::\nstep # ::: section-content The step attribute is a number that specifies the granularity that the value must adhere to, or the special value any, which is described below. Only values which are equal to the basis for stepping ( min if specified, value otherwise, and an appropriate default value if neither of those is provided) are valid.\nA string value of any means that no stepping is implied, and any value is allowed (barring other constraints, such as min and max).\n::: {#sect4 .notecard .note} Note: When the data entered by the user doesn't adhere to the stepping configuration, the user agent may round to the nearest valid value, preferring numbers in the positive direction when there are two equally close options. :::\nThe default stepping value for number inputs is 1, allowing only integers to be entered\u0026mdash;unless the stepping base is not an integer. :::\nUsing number inputs # ::: section-content The number input type should only be used for incremental numbers, especially when spinbutton incrementing and decrementing are helpful to user experience. The number input type is not appropriate for values that happen to only consist of numbers but aren't strictly speaking a number, such as postal codes in many countries or credit card numbers. For non-numeric inputs, consider using a different input type, such as \u0026lt;input type=\u0026quot;tel\u0026quot;\u0026gt; or other \u0026lt;input\u0026gt; type with the inputmode attribute:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;text\u0026#34; inputmode=\u0026#34;numeric\u0026#34; pattern=\u0026#34;\\d*\u0026#34; /\u0026gt; :::\n\u0026lt;input type=\u0026quot;number\u0026quot;\u0026gt; elements can help simplify your work when building the user interface and logic for entering numbers into a form. When you create a number input with the proper type value, number, you get automatic validation that the entered text is a number, and usually a set of up and down buttons to step the value up and down.\n::: {#sect5 .notecard .warning} Warning: Logically, you should not be able to enter characters inside a number input other than numbers. Some browsers allow invalid characters, others do not; see Firefox bug 1398528{target=\u0026quot;_blank\u0026quot;}. :::\n::: {#sect6 .notecard .note} Note: A user can tinker with your HTML behind the scenes, so your site must not use simple client-side validation for any security purposes. You must verify on the server side any transaction in which the provided value may have security implications of any kind. :::\nMobile browsers further help with the user experience by showing a special keyboard more suited for entering numbers when the user tries to enter a value. :::\nA simple number input # ::: section-content In its most basic form, a number input can be implemented like this:\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;ticketNum\u0026#34;\u0026gt;Number of tickets you would like to buy:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;ticketNum\u0026#34; type=\u0026#34;number\u0026#34; name=\u0026#34;ticketNum\u0026#34; value=\u0026#34;0\u0026#34; /\u0026gt; :::\n::: {#sect7 .code-example} ::: iframe ::: :::\nA number input is considered valid when empty and when a single number is entered, but is otherwise invalid. If the required attribute is used, the input is no longer considered valid when empty.\n::: {#sect8 .notecard .note} Note: Any number is an acceptable value, as long as it is a valid floating point number{target=\u0026quot;_blank\u0026quot;} (that is, not NaN or Infinity). ::: :::\nPlaceholders # ::: section-content Sometimes it's helpful to offer an in-context hint as to what form the input data should take. This can be especially important if the page design doesn't offer descriptive labels for each \u0026lt;input\u0026gt;. This is where placeholders come in. A placeholder is a value most commonly used to provide a hint as to the format the input should take value. It is displayed inside the edit box when the element's value is \u0026quot;\u0026quot;. Once data is entered into the box, the placeholder disappears; if the box is emptied, the placeholder reappears.\nHere, we have an number input with the placeholder \u0026quot;Multiple of 10\u0026quot;. Note how the placeholder disappears and reappears as you manipulate the contents of the edit field.\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;number\u0026#34; placeholder=\u0026#34;Multiple of 10\u0026#34; /\u0026gt; :::\n::: {#sect9 .code-example} ::: iframe ::: ::: :::\nControlling step size # ::: section-content By default, the up and down buttons provided for you to step the number up and down will step the value up and down by 1. You can change this by providing a step attribute, which takes as its value a number specifying the step amount. Our above example contains a placeholder saying that the value should be a multiple of 10, so it makes sense to add a step value of 10:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;number\u0026#34; placeholder=\u0026#34;multiple of 10\u0026#34; step=\u0026#34;10\u0026#34; /\u0026gt; :::\n::: {#sect10 .code-example} ::: iframe ::: :::\nIn this example, you should find that the up and down step arrows will increase and decrease the value by 10 each time, not 1. You can still manually enter a number that's not a multiple of 10, but it will be considered invalid. :::\nSpecifying minimum and maximum values # ::: section-content You can use the min and max attributes to specify a minimum and maximum value that the field can have. For example, let's give our example a minimum of 0, and a maximum of 100:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;number\u0026#34; placeholder=\u0026#34;multiple of 10\u0026#34; step=\u0026#34;10\u0026#34; min=\u0026#34;0\u0026#34; max=\u0026#34;100\u0026#34; /\u0026gt; :::\n::: {#sect11 .code-example} ::: iframe ::: :::\nIn this updated version, you should find that the up and down step buttons will not allow you to go below 0 or above 100. You can still manually enter a number outside these bounds, but it will be considered invalid. :::\nAllowing decimal values # ::: section-content One issue with number inputs is that their step size is 1 by default. If you try to enter a number with a decimal (such as \u0026quot;1.0\u0026quot;), it will be considered invalid. If you want to enter a value that requires decimals, you'll need to reflect this in the step value (e.g. step=\u0026quot;0.01\u0026quot; to allow decimals to two decimal places). Here's a simple example:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;number\u0026#34; placeholder=\u0026#34;1.0\u0026#34; step=\u0026#34;0.01\u0026#34; min=\u0026#34;0\u0026#34; max=\u0026#34;10\u0026#34; /\u0026gt; :::\n::: {#sect12 .code-example} ::: iframe ::: :::\nSee that this example allows any value between 0.0 and 10.0, with decimals to two places. For example, \u0026quot;9.52\u0026quot; is valid, but \u0026quot;9.521\u0026quot; is not. :::\nControlling input size # ::: section-content \u0026lt;input\u0026gt; elements of type number don't support form sizing attributes such as size. You'll have to resort to CSS to change the size of these controls.\nFor example, to adjust the width of the input to be only as wide as is needed to enter a three-digit number, we can change our HTML to include an id and to shorten our placeholder since the field will be too narrow for the text we have been using so far:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;number\u0026#34; placeholder=\u0026#34;x10\u0026#34; step=\u0026#34;10\u0026#34; min=\u0026#34;0\u0026#34; max=\u0026#34;100\u0026#34; id=\u0026#34;number\u0026#34; /\u0026gt; :::\nThen we add some CSS to narrow the width of the element with the id selector #number:\n::: code-example [css]{.language-name}\n#number { width: 3em; } :::\nThe result looks like this:\n::: {#sect13 .code-example} ::: iframe ::: ::: :::\nOffering suggested values # ::: section-content You can provide a list of default options from which the user can select by specifying the list attribute, which contains as its value the id of a \u0026lt;datalist\u0026gt;, which in turn contains one \u0026lt;option\u0026gt; element per suggested value. Each option's value is the corresponding suggested value for the number entry box.\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;ticketNum\u0026#34; type=\u0026#34;number\u0026#34; name=\u0026#34;ticketNum\u0026#34; list=\u0026#34;defaultNumbers\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;datalist id=\u0026#34;defaultNumbers\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;10045678\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;103421\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;11111111\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;12345678\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;12999922\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\n::: {#sect14 .code-example} ::: iframe ::: ::: :::\nValidation # ::: section-content We have already mentioned a number of validation features of number inputs, but let's review them now:\n\u0026lt;input type=\u0026quot;number\u0026quot;\u0026gt; elements automatically invalidate any entry that isn't a number (or empty, unless required is specified). You can use the required attribute to make an empty entry invalid. (In other words, the input must be filled in.) You can use the step attribute to constrain valid values to a certain set of steps (e.g., multiples of 10). You can use the min and max attributes to constrain valid values to lower and upper bounds. The following example exhibits all of the above features, as well as using some CSS to display valid and invalid icons, depending on the input's value:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;balloons\u0026#34;\u0026gt;Number of balloons to order (multiples of 10):\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;balloons\u0026#34; type=\u0026#34;number\u0026#34; name=\u0026#34;balloons\u0026#34; step=\u0026#34;10\u0026#34; min=\u0026#34;0\u0026#34; max=\u0026#34;100\u0026#34; required /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect15 .code-example} ::: iframe ::: :::\nTry submitting the form with different invalid values entered \u0026mdash; e.g., no value; a value below 0 or above 100; a value that is not a multiple of 10; or a non-numerical value \u0026mdash; and see how the error messages the browser gives you differ with different ones.\nThe CSS applied to this example is as follows:\n::: code-example [css]{.language-name}\ndiv { margin-bottom: 10px; } input:invalid + span::after { content: \u0026#34;✖\u0026#34;; padding-left: 5px; } input:valid + span::after { content: \u0026#34;✓\u0026#34;; padding-left: 5px; } :::\nHere we use the :invalid and :valid pseudo classes to display an appropriate invalid or valid icon as generated content on the adjacent \u0026lt;span\u0026gt; element, as a visual indicator of validity.\nWe put it on a separate \u0026lt;span\u0026gt; element for added flexibility. Some browsers don't display generated content very effectively on some types of form inputs. (Read, for example, the section on \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt; validation.)\n::: {#sect16 .notecard .warning} Warning: HTML form validation is not a substitute for server-side scripts that ensure that the entered data is in the proper format!\nIt's far too easy for someone to make adjustments to the HTML that allow them to bypass the validation, or to remove it entirely. It's also possible for someone to bypass your HTML and submit the data directly to your server.\nIf your server-side code fails to validate the data it receives, disaster could strike when improperly-formatted data is submitted (or data which is too large, is of the wrong type, and so forth). ::: :::\nPattern validation # ::: section-content \u0026lt;input type=\u0026quot;number\u0026quot;\u0026gt; elements do not support use of the pattern attribute for making entered values conform to a specific regex pattern.\nThe rationale for this is that number inputs won't be valid if they contain anything except numbers, and you can constrain the minimum and maximum number of valid digits using the min and max attributes (as explained above). :::\nExamples # ::: section-content We've already covered the fact that by default, the increment is 1, and you can use the step attribute to allow decimal inputs. Let's take a closer look.\nIn the following example is a form for entering the user's height. It defaults to accepting a height in meters, but you can click the relevant button to change the form to accept feet and inches instead. The input for the height in meters accepts decimals to two places.\n::: {#sect17 .code-example} ::: iframe ::: :::\nThe HTML looks like this:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;div class=\u0026#34;metersInputGroup\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;meters\u0026#34;\u0026gt;Enter your height — meters:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;meters\u0026#34; type=\u0026#34;number\u0026#34; name=\u0026#34;meters\u0026#34; step=\u0026#34;0.01\u0026#34; min=\u0026#34;0\u0026#34; placeholder=\u0026#34;e.g. 1.78\u0026#34; required /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;div class=\u0026#34;feetInputGroup\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt; \u0026lt;span\u0026gt;Enter your height — \u0026lt;/span\u0026gt; \u0026lt;label for=\u0026#34;feet\u0026#34;\u0026gt;feet:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;feet\u0026#34; type=\u0026#34;number\u0026#34; name=\u0026#34;feet\u0026#34; min=\u0026#34;0\u0026#34; step=\u0026#34;1\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;label for=\u0026#34;inches\u0026#34;\u0026gt;inches:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;inches\u0026#34; type=\u0026#34;number\u0026#34; name=\u0026#34;inches\u0026#34; min=\u0026#34;0\u0026#34; max=\u0026#34;11\u0026#34; step=\u0026#34;1\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; class=\u0026#34;meters\u0026#34; value=\u0026#34;Enter height in feet and inches\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit form\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\nYou'll see that we are using many of the attributes we've already looked at in the article earlier on. Since we want to accept a meter value in centimeters, we've set the step value to 0.01, so that values like 1.78 are not seen as invalid. We've also provided a placeholder for that input.\nWe've hidden the feet and inches inputs initially using style=\u0026quot;display: none;\u0026quot;, so that meters is the default entry type.\nNow, onto the CSS. This looks very similar to the validation styling we saw before; nothing remarkable here.\n::: code-example [css]{.language-name}\ndiv { margin-bottom: 10px; position: relative; } input[type=\u0026#34;number\u0026#34;] { width: 100px; } input + span { padding-right: 30px; } input:invalid + span::after { position: absolute; content: \u0026#34;✖\u0026#34;; padding-left: 5px; } input:valid + span::after { position: absolute; content: \u0026#34;✓\u0026#34;; padding-left: 5px; } :::\nAnd finally, the JavaScript:\n::: code-example [js]{.language-name}\nconst metersInputGroup = document.querySelector(\u0026#34;.metersInputGroup\u0026#34;); const feetInputGroup = document.querySelector(\u0026#34;.feetInputGroup\u0026#34;); const metersInput = document.querySelector(\u0026#34;#meters\u0026#34;); const feetInput = document.querySelector(\u0026#34;#feet\u0026#34;); const inchesInput = document.querySelector(\u0026#34;#inches\u0026#34;); const switchBtn = document.querySelector(\u0026#39;input[type=\u0026#34;button\u0026#34;]\u0026#39;); switchBtn.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { if (switchBtn.getAttribute(\u0026#34;class\u0026#34;) === \u0026#34;meters\u0026#34;) { switchBtn.setAttribute(\u0026#34;class\u0026#34;, \u0026#34;feet\u0026#34;); switchBtn.value = \u0026#34;Enter height in meters\u0026#34;; metersInputGroup.style.display = \u0026#34;none\u0026#34;; feetInputGroup.style.display = \u0026#34;block\u0026#34;; feetInput.setAttribute(\u0026#34;required\u0026#34;, \u0026#34;\u0026#34;); inchesInput.setAttribute(\u0026#34;required\u0026#34;, \u0026#34;\u0026#34;); metersInput.removeAttribute(\u0026#34;required\u0026#34;); metersInput.value = \u0026#34;\u0026#34;; } else { switchBtn.setAttribute(\u0026#34;class\u0026#34;, \u0026#34;meters\u0026#34;); switchBtn.value = \u0026#34;Enter height in feet and inches\u0026#34;; metersInputGroup.style.display = \u0026#34;block\u0026#34;; feetInputGroup.style.display = \u0026#34;none\u0026#34;; feetInput.removeAttribute(\u0026#34;required\u0026#34;); inchesInput.removeAttribute(\u0026#34;required\u0026#34;); metersInput.setAttribute(\u0026#34;required\u0026#34;, \u0026#34;\u0026#34;); feetInput.value = \u0026#34;\u0026#34;; inchesInput.value = \u0026#34;\u0026#34;; } }); :::\nAfter declaring a few variables, an event listener is added to the button to control the switching mechanism. This is pretty simple, mostly involving changing over the button's class and \u0026lt;label\u0026gt;, and updating the display values of the two sets of inputs when the button is pressed.\n(Note that we're not converting back and forth between meters and feet/inches here, which a real-life web application would probably do.)\n::: {#sect18 .notecard .note} Note: When the user clicks the button, the required attribute(s) are removed from the input(s) we are hiding, and empty the value attribute(s). This is so the form can be submitted if both input sets aren't filled in. It also ensures that the form won't submit data that the user didn't mean to.\nIf you didn't do this, you'd have to fill in both feet/inches and meters to submit the form! ::: :::\nAccessibility # ::: section-content The implicit role for the \u0026lt;input type=\u0026quot;number\u0026quot;\u0026gt; element is spinbutton. If spinbutton is not an important feature for your form control, consider not using type=\u0026quot;number\u0026quot;. Instead, use inputmode=\u0026quot;numeric\u0026quot; along with a pattern attribute that limits the characters to numbers and associated characters. With \u0026lt;input type=\u0026quot;number\u0026quot;\u0026gt;, there is a risk of users accidentally incrementing a number when they're trying to do something else. Additionally, if users try to enter something that's not a number, there's no explicit feedback about what they're doing wrong.\nAlso consider using the autocomplete attribute to help users complete forms more quickly and with fewer chances of errors. For example, to enable autofill on a zip code field, set autocomplete=\u0026quot;postal-code\u0026quot;. :::\nTechnical summary # ::: section-content\nValue A Number representing a number, or empty Events change and input Supported common attributes autocomplete, list, placeholder, readonly IDL attributes list, value, valueAsNumber DOM interface HTMLInputElement\nMethods select(), stepUp(), stepDown() Implicit ARIA Role spinbutton ::: Specifications # ::: _table # Specification # HTML Standard\n[# number-state-(type=number)]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet number 7 12 29 10 15 5.1 4.4 18 29 14 5 1.0 :::\nSee also # ::: section-content\nHTML forms guide \u0026lt;input\u0026gt; \u0026lt;input type=\u0026quot;tel\u0026quot;\u0026gt; Compatibility of CSS properties Article: Why Gov.UK changed the input type for numbers{target=\u0026quot;_blank\u0026quot;} ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number{._attribution-link} :::\n"},{"id":122,"href":"/docs/references/languages/html/element/input/password/","title":"Password","section":"HTML","content":" \u0026lt;input type=\u0026quot;password\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type password provide a way for the user to securely enter a password.\nThe element is presented as a one-line plain text editor control in which the text is obscured so that it cannot be read, usually by replacing each character with a symbol such as the asterisk (\u0026quot;*\u0026quot;) or a dot (\u0026quot;•\u0026quot;). This character will vary depending on the user agent and operating system. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;password\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor}\n\u0026lt;label for=\u0026quot;username\u0026quot;\u0026gt;Username:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; id=\u0026quot;username\u0026quot; name=\u0026quot;username\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;pass\u0026quot;\u0026gt;Password (8 characters minimum):\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;password\u0026quot; id=\u0026quot;pass\u0026quot; name=\u0026quot;password\u0026quot; minlength=\u0026quot;8\u0026quot; required /\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;Sign in\u0026quot; /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; }\ninput[type='submit'], label { margin-top: 1rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe precise behavior of the entry process may vary from browser to browser. Some browsers display the typed character for a moment before obscuring it, while others allow the user to toggle the display of plain-text on and off. Both approaches help a user check that they entered the intended password, which can be particularly difficult on mobile devices.\n::: {#sect1 .notecard .note} Note: Any forms involving sensitive information like passwords (such as login forms) should be served over HTTPS. Many browsers now implement mechanisms to warn against insecure login forms; see Insecure passwords. ::: :::\nValue # ::: section-content The value attribute contains a string whose value is the current contents of the text editing control being used to enter the password. If the user hasn't entered anything yet, this value is an empty string (\u0026quot;\u0026quot;). If the required property is specified, then the password edit box must contain a value other than an empty string to be valid.\nIf the pattern attribute is specified, the content of a password control is only considered valid if the value passes validation; see Validation for more information.\n::: {#sect2 .notecard .note} Note: The line feed (U+000A) and carriage return (U+000D) characters are not permitted in a password value. When setting the value of a password control, line feed and carriage return characters are stripped out of the value. ::: :::\nAdditional attributes # ::: section-content In addition to the attributes that operate on all \u0026lt;input\u0026gt; elements regardless of their type, password field inputs support the following attributes. :::\nmaxlength # ::: section-content The maximum string length (measured in UTF-16 code units) that the user can enter into the password field. This must be an integer value of 0 or higher. If no maxlength is specified, or an invalid value is specified, the password field has no maximum length. This value must also be greater than or equal to the value of minlength.\nThe input will fail constraint validation if the length of the text entered into the field is greater than maxlength UTF-16 code units long. :::\nminlength # ::: section-content The minimum string length (measured in UTF-16 code units) that the user can enter into the password entry field. This must be a non-negative integer value smaller than or equal to the value specified by maxlength. If no minlength is specified, or an invalid value is specified, the password input has no minimum length.\nThe input will fail constraint validation if the length of the text entered into the field is fewer than minlength UTF-16 code units long. :::\npattern # ::: section-content The pattern attribute, when specified, is a regular expression that the input's value must match for the value to pass constraint validation. It must be a valid JavaScript regular expression, as used by the RegExp type, and as documented in our guide on regular expressions; the 'u' flag is specified when compiling the regular expression, so that the pattern is treated as a sequence of Unicode code points, instead of as ASCII. No forward slashes should be specified around the pattern text.\nIf the specified pattern is not specified or is invalid, no regular expression is applied and this attribute is ignored completely.\n::: {#sect3 .notecard .note} Note: Use the title attribute to specify text that most browsers will display as a tooltip to explain what the requirements are to match the pattern. You should also include other explanatory text nearby. :::\nUse of a pattern is strongly recommended for password inputs, in order to help ensure that valid passwords using a wide assortment of character classes are selected and used by your users. With a pattern, you can mandate case rules, require the use of some number of digits and/or punctuation characters, and so forth. See the section Validation for details and an example. :::\nplaceholder # ::: section-content The placeholder attribute is a string that provides a brief hint to the user as to what kind of information is expected in the field. It should be a word or short phrase that demonstrates the expected type of data, rather than an explanatory message. The text must not include carriage returns or line feeds.\nIf the control's content has one directionality ( LTR or RTL) but needs to present the placeholder in the opposite directionality, you can use Unicode bidirectional algorithm formatting characters to override directionality within the placeholder; see How to use Unicode controls for bidi text{target=\u0026quot;_blank\u0026quot;} for more information.\n::: {#sect4 .notecard .note} Note: Avoid using the placeholder attribute if you can. It is not as semantically useful as other ways to explain your form, and can cause unexpected technical issues with your content. See \u0026lt;input\u0026gt; labels for more information. ::: :::\nreadonly # ::: section-content A Boolean attribute which, if present, means this field cannot be edited by the user. Its value can, however, still be changed from JavaScript code that directly sets the value of the HTMLInputElement.value property.\n::: {#sect5 .notecard .note} Note: Because a read-only field cannot have a value, required does not have any effect on inputs with the readonly attribute also specified. ::: :::\nsize # ::: section-content The size attribute is a numeric value indicating how many characters wide the input field should be. The value must be a number greater than zero, and the default value is 20. Since character widths vary, this may or may not be exact and should not be relied upon to be so; the resulting input may be narrower or wider than the specified number of characters, depending on the characters and the font ( font settings in use).\nThis does not set a limit on how many characters the user can enter into the field. It only specifies approximately how many can be seen at a time. To set an upper limit on the length of the input data, use the maxlength attribute. :::\nUsing password inputs # ::: section-content Password input boxes generally work just like other textual input boxes; the main difference is the obscuring of the content to prevent people near the user from reading the password. :::\nA simple password input # ::: section-content Here we see the most basic password input, with a label established using the \u0026lt;label\u0026gt; element.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;userPassword\u0026#34;\u0026gt;Password: \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;userPassword\u0026#34; type=\u0026#34;password\u0026#34; /\u0026gt; :::\n::: {#sect6 .code-example} ::: iframe ::: ::: :::\nAllowing autocomplete # ::: section-content To allow the user's password manager to automatically enter the password, specify the autocomplete attribute. For passwords, this should typically be one of the following:\non Allow the browser or a password manager to automatically fill out the password field. This isn't as informative as using either current-password or new-password.\noff Don't allow the browser or password manager to automatically fill out the password field. Note that some software ignores this value, since it's typically harmful to users' ability to maintain safe password practices.\ncurrent-password Allow the browser or password manager to enter the current password for the site. This provides more information than on does, since it lets the browser or password manager automatically enter currently-known password for the site in the field, but not to suggest a new one.\nnew-password Allow the browser or password manager to automatically enter a new password for the site; this is used on \u0026quot;change your password\u0026quot; and \u0026quot;new user\u0026quot; forms, on the field asking the user for a new password. The new password may be generated in a variety of ways, depending on the password manager in use. It may fill in a new suggested password, or it might show the user an interface for creating one.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;userPassword\u0026#34;\u0026gt;Password:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;userPassword\u0026#34; type=\u0026#34;password\u0026#34; autocomplete=\u0026#34;current-password\u0026#34; /\u0026gt; :::\n::: {#sect7 .code-example} ::: iframe ::: ::: :::\nMaking the password mandatory # ::: section-content To tell the user's browser that the password field must have a valid value before the form can be submitted, specify the Boolean required attribute.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;userPassword\u0026#34;\u0026gt;Password: \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;userPassword\u0026#34; type=\u0026#34;password\u0026#34; required /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34; /\u0026gt; :::\n::: {#sect8 .code-example} ::: iframe ::: ::: :::\nSpecifying an input mode # ::: section-content If your recommended (or required) password syntax rules would benefit from an alternate text entry interface than the standard keyboard, you can use the inputmode attribute to request a specific one. The most obvious use case for this is if the password is required to be numeric (such as a PIN). Mobile devices with virtual keyboards, for example, may opt to switch to a numeric keypad layout instead of a full keyboard, to make entering the password easier. If the PIN is for one-time use, set the autocomplete attribute to either off or one-time-code to suggest that it's not saved.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;pin\u0026#34;\u0026gt;PIN: \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;pin\u0026#34; type=\u0026#34;password\u0026#34; inputmode=\u0026#34;numeric\u0026#34; /\u0026gt; :::\n::: {#sect9 .code-example} ::: iframe ::: ::: :::\nSetting length requirements # ::: section-content As usual, you can use the minlength and maxlength attributes to establish minimum and maximum acceptable lengths for the password. This example expands on the previous one by specifying that the user's PIN must be at least four and no more than eight digits. The size attribute is used to ensure that the password entry control is eight characters wide.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;pin\u0026#34;\u0026gt;PIN:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;pin\u0026#34; type=\u0026#34;password\u0026#34; inputmode=\u0026#34;numeric\u0026#34; minlength=\u0026#34;4\u0026#34; maxlength=\u0026#34;8\u0026#34; size=\u0026#34;8\u0026#34; /\u0026gt; :::\n::: {#sect10 .code-example} ::: iframe ::: ::: :::\nSelecting text # ::: section-content As with other textual entry controls, you can use the select() method to select all the text in the password field.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;userPassword\u0026#34;\u0026gt;Password: \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;userPassword\u0026#34; type=\u0026#34;password\u0026#34; size=\u0026#34;12\u0026#34; /\u0026gt; \u0026lt;button id=\u0026#34;selectAll\u0026#34;\u0026gt;Select All\u0026lt;/button\u0026gt; :::\nJavaScript # ::: code-example [js]{.language-name}\ndocument.getElementById(\u0026#34;selectAll\u0026#34;).onclick = () =\u0026gt; { document.getElementById(\u0026#34;userPassword\u0026#34;).select(); }; :::\nResult # ::: {#sect11 .code-example} ::: iframe ::: :::\nYou can also use [selectionStart]{.page-not-created} and [selectionEnd]{.page-not-created} to get (or set) what range of characters in the control are currently selected, and [selectionDirection]{.page-not-created} to know which direction selection occurred in (or will be extended in, depending on your platform; see its documentation for an explanation). However, given that the text is obscured, the usefulness of these is somewhat limited. :::\nValidation # ::: section-content If your application has character set restrictions or any other requirement for the actual content of the entered password, you can use the pattern attribute to establish a regular expression to be used to automatically ensure that your passwords meet those requirements.\nIn this example, only values consisting of at least four and no more than eight hexadecimal digits are valid.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;hexId\u0026#34;\u0026gt;Hex ID: \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;hexId\u0026#34; type=\u0026#34;password\u0026#34; pattern=\u0026#34;[0-9a-fA-F]{4,8}\u0026#34; title=\u0026#34;Enter an ID consisting of 4-8 hexadecimal digits\u0026#34; autocomplete=\u0026#34;new-password\u0026#34; /\u0026gt; :::\n::: {#sect12 .code-example} ::: iframe ::: ::: :::\nExamples # Requesting a Social Security number # ::: section-content This example only accepts input which matches the format for a valid United States Social Security Number{target=\u0026quot;_blank\u0026quot;}. These numbers, used for tax and identification purposes in the US, are in the form \u0026quot;123-45-6789\u0026quot;. Assorted rules for what values are permitted in each group exist as well.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;ssn\u0026#34;\u0026gt;SSN:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;ssn\u0026#34; inputmode=\u0026#34;numeric\u0026#34; minlength=\u0026#34;9\u0026#34; maxlength=\u0026#34;12\u0026#34; pattern=\u0026#34;(?!000)([0-6]\\d{2}|7([0-6]\\d|7[012]))([ -])?(?!00)\\d\\d\\3(?!0000)\\d{4}\u0026#34; required autocomplete=\u0026#34;off\u0026#34; /\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;label for=\u0026#34;ssn\u0026#34;\u0026gt;Value:\u0026lt;/label\u0026gt; \u0026lt;span id=\u0026#34;current\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; :::\nThis uses a pattern which limits the entered value to strings representing legal Social Security numbers. Obviously, this regexp doesn't guarantee a valid SSN (since we don't have access to the Social Security Administration's database), but it does ensure the number could be one; it generally avoids values that cannot be valid. In addition, it allows the three groups of digits to be separated by a space, a dash (\u0026quot;-\u0026quot;), or nothing.\nThe inputmode is set to numeric to encourage devices with virtual keyboards to switch to a numeric keypad layout for easier entry. The minlength and maxlength attributes are set to 9 and 12, respectively, to require that the value be at least nine and no more than 12 characters (the former without separating characters between the groups of digits and the latter with them). The required attribute is used to indicate that this control must have a value. Finally, autocomplete is set to off to avoid password managers and session restore features trying to set its value, since this isn't a password at all.\nJavaScript # This is just some simple code to display the entered SSN onscreen so you can see it. Obviously this defeats the purpose of a password field, but it's helpful for experimenting with the pattern.\n::: code-example [js]{.language-name}\nconst ssn = document.getElementById(\u0026#34;ssn\u0026#34;); const current = document.getElementById(\u0026#34;current\u0026#34;); ssn.oninput = (event) =\u0026gt; { current.textContent = ssn.value; }; :::\nResult # ::: {#sect13 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nValue A string representing a password, or empty Events change and input Supported Common Attributes autocomplete, inputmode, maxlength, minlength, pattern, placeholder, readonly, required, and size IDL attributes selectionStart, selectionEnd, selectionDirection, and value DOM interface HTMLInputElement\nMethods select(), setRangeText(), and setSelectionRange() Implicit ARIA Role no corresponding role ::: Specifications # ::: _table # Specification # HTML Standard\n[# password-state-(type=password)]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet password 1 12 1 2 2 1 4.4 18 4 14 1 1.0 insecure_login_handling No No 52 No No No No No 52 No No No :::\nSee also # ::: section-content\nCompatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/password{._attribution-link} :::\n"},{"id":123,"href":"/docs/references/languages/html/element/input/radio/","title":"Radio","section":"HTML","content":" \u0026lt;input type=\u0026quot;radio\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type radio are generally used in radio groups\u0026mdash;collections of radio buttons describing a set of related options.\nOnly one radio button in a given group can be selected at the same time. Radio buttons are typically rendered as small circles, which are filled or highlighted when selected. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;radio\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Select a maintenance drone:\n\u0026lt;input type=\u0026quot;radio\u0026quot; id=\u0026quot;huey\u0026quot; name=\u0026quot;drone\u0026quot; value=\u0026quot;huey\u0026quot; checked /\u0026gt; \u0026lt;label for=\u0026quot;huey\u0026quot;\u0026gt;Huey\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;radio\u0026quot; id=\u0026quot;dewey\u0026quot; name=\u0026quot;drone\u0026quot; value=\u0026quot;dewey\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;dewey\u0026quot;\u0026gt;Dewey\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;radio\u0026quot; id=\u0026quot;louie\u0026quot; name=\u0026quot;drone\u0026quot; value=\u0026quot;louie\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;louie\u0026quot;\u0026gt;Louie\u0026lt;/label\u0026gt; \u0026lt;/fieldset\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p, label { font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput { margin: 0.4rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThey are called radio buttons because they look and operate in a similar manner to the push buttons on old-fashioned radios, such as the one shown below.\n![Shows what radio buttons looked like in the olden days.] height=\u0026ldquo;400\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;}\n::: {#sect1 .notecard .note} Note: Checkboxes are similar to radio buttons, but with an important distinction: radio buttons are designed for selecting one value out of a set, whereas checkboxes let you turn individual values on and off. Where multiple controls exist, radio buttons allow one to be selected out of them all, whereas checkboxes allow multiple values to be selected. ::: :::\nValue # ::: section-content The value attribute is a string containing the radio button's value. The value is never shown to the user by their user agent. Instead, it's used to identify which radio button in a group is selected. :::\nDefining a radio group # ::: section-content A radio group is defined by giving each of radio buttons in the group the same name. Once a radio group is established, selecting any radio button in that group automatically deselects any currently-selected radio button in the same group.\nYou can have as many radio groups on a page as you like, as long as each has its own unique name.\nFor example, if your form needs to ask the user for their preferred contact method, you might create three radio buttons, each with the name property set to contact but one with the value email, one with the value phone, and one with the value mail. The user never sees the value or the name (unless you expressly add code to display it).\nThe resulting HTML looks like this:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Please select your preferred contact method:\u0026lt;/legend\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;contactChoice1\u0026#34; name=\u0026#34;contact\u0026#34; value=\u0026#34;email\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;contactChoice1\u0026#34;\u0026gt;Email\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;contactChoice2\u0026#34; name=\u0026#34;contact\u0026#34; value=\u0026#34;phone\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;contactChoice2\u0026#34;\u0026gt;Phone\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;contactChoice3\u0026#34; name=\u0026#34;contact\u0026#34; value=\u0026#34;mail\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;contactChoice3\u0026#34;\u0026gt;Mail\u0026lt;/label\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; :::\nHere you see the three radio buttons, each with the name set to contact and each with a unique value that uniquely identifies that individual radio button within the group. They each also have a unique id, which is used by the \u0026lt;label\u0026gt; element's for attribute to associate the labels with the radio buttons.\nYou can try out this example here:\n::: {#sect2 .code-example} ::: iframe ::: ::: :::\nData representation of a radio group # ::: section-content When the above form is submitted with a radio button selected, the form's data includes an entry in the form contact=value. For example, if the user clicks on the \u0026quot;Phone\u0026quot; radio button then submits the form, the form's data will include the line contact=phone.\nIf you omit the value attribute in the HTML, the submitted form data assigns the value on to the group. In this scenario, if the user clicked on the \u0026quot;Phone\u0026quot; option and submitted the form, the resulting form data would be contact=on, which isn't helpful. So don't forget to set your value attributes!\n::: {#sect3 .notecard .note} Note: If no radio button is selected when the form is submitted, the radio group is not included in the submitted form data at all, since there is no value to report. :::\nIt's fairly uncommon to actually want to allow the form to be submitted without any of the radio buttons in a group selected, so it is usually wise to have one default to the checked state. See Selecting a radio button by default below.\nLet's add a bit of code to our example so we can examine the data generated by this form. The HTML is revised to add a \u0026lt;pre\u0026gt; block to output the form data into:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Please select your preferred contact method:\u0026lt;/legend\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;contactChoice1\u0026#34; name=\u0026#34;contact\u0026#34; value=\u0026#34;email\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;contactChoice1\u0026#34;\u0026gt;Email\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;contactChoice2\u0026#34; name=\u0026#34;contact\u0026#34; value=\u0026#34;phone\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;contactChoice2\u0026#34;\u0026gt;Phone\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;contactChoice3\u0026#34; name=\u0026#34;contact\u0026#34; value=\u0026#34;mail\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;contactChoice3\u0026#34;\u0026gt;Mail\u0026lt;/label\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;pre id=\u0026#34;log\u0026#34;\u0026gt;\u0026lt;/pre\u0026gt; :::\nThen we add some JavaScript to set up an event listener on the submit event, which is sent when the user clicks the \u0026quot;Submit\u0026quot; button:\n::: code-example [js]{.language-name}\nconst form = document.querySelector(\u0026#34;form\u0026#34;); const log = document.querySelector(\u0026#34;#log\u0026#34;); form.addEventListener( \u0026#34;submit\u0026#34;, (event) =\u0026gt; { const data = new FormData(form); let output = \u0026#34;\u0026#34;; for (const entry of data) { output = `${output}${entry[0]}=${entry[1]}\\r`; } log.innerText = output; event.preventDefault(); }, false, ); :::\nTry this example out and see how there's never more than one result for the contact group.\n::: {#sect4 .code-example} ::: iframe ::: ::: :::\nAdditional attributes # ::: section-content In addition to the common attributes shared by all \u0026lt;input\u0026gt; elements, radio inputs support the following attributes.\nchecked A Boolean attribute which, if present, indicates that this radio button is the default selected one in the group.\nUnlike other browsers, Firefox by default persists the dynamic checked state{target=\u0026quot;_blank\u0026quot;} of an \u0026lt;input\u0026gt; across page loads. Use the autocomplete attribute to control this feature.\nvalue The value attribute is one which all \u0026lt;input\u0026gt;s share; however, it serves a special purpose for inputs of type radio: when a form is submitted, only radio buttons which are currently checked are submitted to the server, and the reported value is the value of the value attribute. If the value is not otherwise specified, it is the string on by default. This is demonstrated in the section Value above.\nrequired The required attribute is one which most \u0026lt;input\u0026gt;s share. If any radio button in a same-named group of radio buttons has the required attribute, a radio button in that group must be checked, although it doesn't have to be the one with the attribute applied. :::\nUsing radio inputs # ::: section-content We already covered the fundamentals of radio buttons above. Let's now look at the other common radio-button-related features and techniques you may need to know about. :::\nSelecting a radio button by default # ::: section-content To make a radio button selected by default, you include checked attribute, as shown in this revised version of the previous example:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Please select your preferred contact method:\u0026lt;/legend\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;contactChoice1\u0026#34; name=\u0026#34;contact\u0026#34; value=\u0026#34;email\u0026#34; checked /\u0026gt; \u0026lt;label for=\u0026#34;contactChoice1\u0026#34;\u0026gt;Email\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;contactChoice2\u0026#34; name=\u0026#34;contact\u0026#34; value=\u0026#34;phone\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;contactChoice2\u0026#34;\u0026gt;Phone\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;contactChoice3\u0026#34; name=\u0026#34;contact\u0026#34; value=\u0026#34;mail\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;contactChoice3\u0026#34;\u0026gt;Mail\u0026lt;/label\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect5 .code-example} ::: iframe ::: :::\nIn this case, the first radio button is now selected by default.\n::: {#sect6 .notecard .note} Note: If you put the checked attribute on more than one radio button, later instances will override earlier ones; that is, the last checked radio button will be the one that is selected. This is because only one radio button in a group can ever be selected at once, and the user agent automatically deselects others each time a new one is marked as checked. ::: :::\nProviding a bigger hit area for your radio buttons # ::: section-content In the above examples, you may have noticed that you can select a radio button by clicking on its associated \u0026lt;label\u0026gt; element, as well as on the radio button itself. This is a really useful feature of HTML form labels that makes it easier for users to click the option they want, especially on small-screen devices like smartphones.\nBeyond accessibility, this is another good reason to properly set up \u0026lt;label\u0026gt; elements on your forms. :::\nValidation # ::: section-content Radio buttons don't participate in constraint validation; they have no real value to be constrained. :::\nStyling radio inputs # ::: section-content The following example shows a slightly more thorough version of the example we've seen throughout the article, with some additional styling, and with better semantics established through use of specialized elements. The HTML looks like this:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Please select your preferred contact method:\u0026lt;/legend\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;contactChoice1\u0026#34; name=\u0026#34;contact\u0026#34; value=\u0026#34;email\u0026#34; checked /\u0026gt; \u0026lt;label for=\u0026#34;contactChoice1\u0026#34;\u0026gt;Email\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;contactChoice2\u0026#34; name=\u0026#34;contact\u0026#34; value=\u0026#34;phone\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;contactChoice2\u0026#34;\u0026gt;Phone\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;contactChoice3\u0026#34; name=\u0026#34;contact\u0026#34; value=\u0026#34;mail\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;contactChoice3\u0026#34;\u0026gt;Mail\u0026lt;/label\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; :::\nThe CSS involved in this example is a bit more significant:\n::: code-example [css]{.language-name}\nhtml { font-family: sans-serif; } div:first-of-type { display: flex; align-items: flex-start; margin-bottom: 5px; } label { margin-right: 15px; line-height: 32px; } input { appearance: none; border-radius: 50%; width: 16px; height: 16px; border: 2px solid #999; transition: 0.2s all linear; margin-right: 5px; position: relative; top: 4px; } input:checked { border: 6px solid black; } button, legend { color: white; background-color: black; padding: 5px 10px; border-radius: 0; border: 0; font-size: 14px; } button:hover, button:focus { color: #999; } button:active { background-color: white; color: black; outline: 1px solid black; } :::\nMost notable here is the use of the appearance property (with prefixes needed to support some browsers). By default, radio buttons (and checkboxes) are styled with the operating system's native styles for those controls. By specifying appearance: none, you can remove the native styling altogether, and create your own styles for them. Here we've used a border along with border-radius and a transition to create a nice animating radio selection. Notice also how the :checked pseudo-class is used to specify the styles for the radio button's appearance when selected.\n::: {#sect7 .notecard .note} Note: If you wish to use the appearance property, you should test it very carefully. Although it is supported in most modern browsers, its implementation varies widely. In older browsers, even the keyword none does not have the same effect across different browsers, and some do not support it at all. The differences are smaller in the newest browsers. :::\n::: {#sect8 .code-example} ::: iframe ::: :::\nNotice that when clicking on a radio button, there's a nice, smooth fade out/in effect as the two buttons change state. In addition, the style and coloring of the legend and submit button are customized to have strong contrast. This might not be a look you'd want in a real web application, but it definitely shows off the possibilities. :::\nTechnical summary # ::: section-content\nValue A string representing the value of the radio button. Events change and input Supported common attributes checked, value and required IDL attributes checked and value DOM interface HTMLInputElement\nMethods select() Implicit ARIA Role radio ::: Specifications # ::: _table # Specification # HTML Standard\n[# radio-button-state-(type=radio)]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet radio 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 :::\nSee also # ::: section-content\n\u0026lt;input\u0026gt; and the HTMLInputElement interface that implements it. RadioNodeList: the interface that describes a list of radio buttons Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio{._attribution-link} :::\n"},{"id":124,"href":"/docs/references/languages/html/element/input/range/","title":"Range","section":"HTML","content":" \u0026lt;input type=\u0026quot;range\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type range let the user specify a numeric value which must be no less than a given value, and no more than another given value. The precise value, however, is not considered important. This is typically represented using a slider or dial control rather than a text entry box like the number input type.\nBecause this kind of widget is imprecise, it should only be used if the control's exact value isn't important. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;range\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Audio settings:\n\u0026lt;input type=\u0026quot;range\u0026quot; id=\u0026quot;volume\u0026quot; name=\u0026quot;volume\u0026quot; min=\u0026quot;0\u0026quot; max=\u0026quot;11\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;volume\u0026quot;\u0026gt;Volume\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;range\u0026quot; id=\u0026quot;cowbell\u0026quot; name=\u0026quot;cowbell\u0026quot; min=\u0026quot;0\u0026quot; max=\u0026quot;100\u0026quot; value=\u0026quot;90\u0026quot; step=\u0026quot;10\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;cowbell\u0026quot;\u0026gt;Cowbell\u0026lt;/label\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p, label { font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput { margin: 0.4rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nIf the user's browser doesn't support type range, it will fall back and treat it as a text input. :::\nValidation # ::: section-content There is no pattern validation available; however, the following forms of automatic validation are performed:\nIf the value is set to something which can't be converted into a valid floating-point number, validation fails because the input is suffering from a bad input. The value won't be less than min. The default is 0. The value won't be greater than max. The default is 100. The value will be a multiple of step. The default is 1. ::: Value # ::: section-content The value attribute contains a string which contains a string representation of the selected number. The value is never an empty string (\u0026quot;\u0026quot;). The default value is halfway between the specified minimum and maximum\u0026mdash;unless the maximum is actually less than the minimum, in which case the default is set to the value of the min attribute. The algorithm for determining the default value is:\n::: code-example [js]{.language-name}\ndefaultValue = rangeElem.max \u0026lt; rangeElem.min ? rangeElem.min : rangeElem.min + (rangeElem.max - rangeElem.min) / 2; :::\nIf an attempt is made to set the value lower than the minimum, it is set to the minimum. Similarly, an attempt to set the value higher than the maximum results in it being set to the maximum. :::\nAdditional attributes # ::: section-content In addition to the attributes shared by all \u0026lt;input\u0026gt; elements, range inputs offer the following attributes. :::\nlist # ::: section-content The value of the list attribute is the id of a \u0026lt;datalist\u0026gt; element located in the same document. The \u0026lt;datalist\u0026gt; provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the type are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value.\nSee the adding tick marks below for an example of how the options on a range are denoted in supported browsers. :::\nmax # ::: section-content The greatest value in the range of permitted values. If the value entered into the element exceeds this, the element fails constraint validation. If the value of the max attribute isn't a number, then the element has no maximum value.\nThis value must be greater than or equal to the value of the min attribute. See the HTML max attribute. :::\nmin # ::: section-content The lowest value in the range of permitted values. If the value of the element is less than this, the element fails constraint validation. If a value is specified for min that isn't a valid number, the input has no minimum value.\nThis value must be less than or equal to the value of the max attribute. See the HTML min attribute.\n::: {#sect1 .notecard .note} Note: If the min and max values are equal or the max value is lower than the min value the user will not be able to interact with the range. ::: :::\nstep # ::: section-content The step attribute is a number that specifies the granularity that the value must adhere to. Only values that match the specified stepping interval ( min if specified, value otherwise, or an appropriate default value if neither of those is provided) are valid.\nThe step attribute can also be set to the any string value. This step value means that no stepping interval is implied and any value is allowed in the specified range (barring other constraints, such as min and max). See the Setting step to the any value example for how this works in supported browsers.\n::: {#sect2 .notecard .note} Note: When the value entered by a user doesn't adhere to the stepping configuration, the user agent may round off the value to the nearest valid value, preferring to round numbers up when there are two equally close options. :::\nThe default stepping value for range inputs is 1, allowing only integers to be entered, unless the stepping base is not an integer; for example, if you set min to -10 and value to 1.5, then a step of 1 will allow only values such as 1.5, 2.5, 3.5,\u0026hellip; in the positive direction and -0.5, -1.5, -2.5,\u0026hellip; in the negative direction. See the HTML step attribute. :::\nNon-standard Attributes # orient # ::: section-content Similar to the -moz-orient non-standard CSS property impacting the \u0026lt;progress\u0026gt; and \u0026lt;meter\u0026gt; elements, the orient attribute defines the orientation of the range slider. Values include horizontal, meaning the range is rendered horizontally, and vertical, where the range is rendered vertically.\n::: {#sect3 .notecard .note} Note: The following input attributes do not apply to the input range: accept, alt, checked, dirname, formaction, formenctype, formmethod, formnovalidate, formtarget, height, maxlength, minlength, multiple, pattern, placeholder, readonly, required, size, and src. Any of these attributes, if included, will be ignored. ::: :::\nExamples # ::: section-content While the number type lets users enter a number with optional constraints forcing their value to be between a minimum and a maximum value, it does require that they enter a specific value. The range input type lets you ask the user for a value in cases where the user may not even care\u0026mdash;or know\u0026mdash;what the specific numeric value selected is.\nA few examples of situations in which range inputs are commonly used:\nAudio controls such as volume and balance, or filter controls. Color configuration controls such as color channels, transparency, brightness, etc. Game configuration controls such as difficulty, visibility distance, world size, and so forth. Password length for a password manager's generated passwords. As a rule, if the user is more likely to be interested in the percentage of the distance between minimum and maximum values than the actual number itself, a range input is a great candidate. For example, in the case of a home stereo volume control, users typically think \u0026quot;set volume at halfway to maximum\u0026quot; instead of \u0026quot;set volume to 0.5\u0026quot;. :::\nSpecifying the minimum and maximum # ::: section-content By default, the minimum is 0 and the maximum is 100. If that's not what you want, you can easily specify different bounds by changing the values of the min and/or max attributes. These can be any floating-point value.\nFor example, to ask the user for a value between -10 and 10, you can use:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;range\u0026#34; min=\u0026#34;-10\u0026#34; max=\u0026#34;10\u0026#34; /\u0026gt; :::\n::: {#sect4 .code-example} ::: iframe ::: ::: :::\nSetting the value's granularity # ::: section-content By default, the granularity is 1, meaning the value is always an integer. To control the granularity, you can change the step attribute. For example, If you need a value to be halfway between 5 and 10, you should set the value of step to 0.5:\nSetting the step attribute # ::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;range\u0026#34; min=\u0026#34;5\u0026#34; max=\u0026#34;10\u0026#34; step=\u0026#34;0.5\u0026#34; /\u0026gt; :::\n::: {#sect5 .code-example} ::: iframe ::: :::\nSetting step to \u0026quot;any\u0026quot; # If you want to accept any value regardless of how many decimal places it extends to, you can specify a value of any for the step attribute:\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;pi_input\u0026#34; type=\u0026#34;range\u0026#34; min=\u0026#34;0\u0026#34; max=\u0026#34;3.14\u0026#34; step=\u0026#34;any\u0026#34; /\u0026gt; \u0026lt;p\u0026gt;Value: \u0026lt;output id=\u0026#34;value\u0026#34;\u0026gt;\u0026lt;/output\u0026gt;\u0026lt;/p\u0026gt; :::\nJavaScript # ::: code-example [js]{.language-name}\nconst value = document.querySelector(\u0026#34;#value\u0026#34;); const input = document.querySelector(\u0026#34;#pi_input\u0026#34;); value.textContent = input.value; input.addEventListener(\u0026#34;input\u0026#34;, (event) =\u0026gt; { value.textContent = event.target.value; }); :::\n::: {#sect6 .code-example} ::: iframe ::: :::\nThis example lets the user select any value between 0 and π without any restriction on the fractional part of the value selected. JavaScript is used to show how the value changes as the user interacts with the range. :::\nAdding tick marks # ::: section-content To add tick marks to a range control, include the list attribute, giving it the id of a \u0026lt;datalist\u0026gt; element which defines a series of tick marks on the control. Each point is represented using an \u0026lt;option\u0026gt; element with its value set to the range's value at which a mark should be drawn.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;temp\u0026#34;\u0026gt;Choose a comfortable temperature:\u0026lt;/label\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input type=\u0026#34;range\u0026#34; id=\u0026#34;temp\u0026#34; name=\u0026#34;temp\u0026#34; list=\u0026#34;markers\u0026#34; /\u0026gt; \u0026lt;datalist id=\u0026#34;markers\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;25\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;50\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;75\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;100\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\nResult # ::: {#sect7 .code-example} ::: iframe ::: ::: :::\nUsing the same datalist for multiple range controls # ::: section-content To help you from repeating code you can reuse that same \u0026lt;datalist\u0026gt; for multiple \u0026lt;input type=\u0026quot;range\u0026quot;\u0026gt; elements, and other \u0026lt;input\u0026gt; types.\n::: {#sect8 .notecard .note} Note: If you also want to show the labels as in the example below then you would need a datalist for each range input. :::\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;temp1\u0026#34;\u0026gt;Temperature for room 1:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;range\u0026#34; id=\u0026#34;temp1\u0026#34; name=\u0026#34;temp1\u0026#34; list=\u0026#34;values\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;temp2\u0026#34;\u0026gt;Temperature for room 2:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;range\u0026#34; id=\u0026#34;temp2\u0026#34; name=\u0026#34;temp2\u0026#34; list=\u0026#34;values\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;temp3\u0026#34;\u0026gt;Temperature for room 3:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;range\u0026#34; id=\u0026#34;temp3\u0026#34; name=\u0026#34;temp3\u0026#34; list=\u0026#34;values\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;datalist id=\u0026#34;values\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;0\u0026#34; label=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;25\u0026#34; label=\u0026#34;25\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;50\u0026#34; label=\u0026#34;50\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;75\u0026#34; label=\u0026#34;75\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;100\u0026#34; label=\u0026#34;100\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\nResult # ::: {#sect9 .code-example} ::: iframe ::: ::: :::\nAdding labels # ::: section-content You can label tick marks by giving the \u0026lt;option\u0026gt; elements label attributes. However, the label content will not be displayed by default. You can use CSS to show the labels and to position them correctly. Here's one way you could do this.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;tempB\u0026#34;\u0026gt;Choose a comfortable temperature:\u0026lt;/label\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input type=\u0026#34;range\u0026#34; id=\u0026#34;tempB\u0026#34; name=\u0026#34;temp\u0026#34; list=\u0026#34;values\u0026#34; /\u0026gt; \u0026lt;datalist id=\u0026#34;values\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;0\u0026#34; label=\u0026#34;very cold!\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;25\u0026#34; label=\u0026#34;cool\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;50\u0026#34; label=\u0026#34;medium\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;75\u0026#34; label=\u0026#34;getting warm!\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;100\u0026#34; label=\u0026#34;hot!\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\nCSS # ::: code-example [css]{.language-name}\ndatalist { display: flex; flex-direction: column; justify-content: space-between; writing-mode: vertical-lr; width: 200px; } option { padding: 0; } input[type=\u0026#34;range\u0026#34;] { width: 200px; margin: 0; } :::\nResult # ::: {#sect10 .code-example} ::: iframe ::: ::: :::\nCreating vertical range controls # ::: section-content By default, browsers render range inputs as sliders with the knob sliding left and right.\nTo create a vertical range, wherein the knob slides up and down, set the CSS appearance property to slider-vertical and include the non-standard orient attribute for Firefox.\nHorizontal range control # Consider this range control:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;range\u0026#34; id=\u0026#34;volume\u0026#34; min=\u0026#34;0\u0026#34; max=\u0026#34;11\u0026#34; value=\u0026#34;7\u0026#34; step=\u0026#34;1\u0026#34; /\u0026gt; :::\n::: {#sect11 .code-example} ::: iframe ::: :::\nThis control is horizontal (at least on most if not all major browsers; others might vary).\nUsing the appearance property # The appearance property has a non-standard value of slider-vertical that, well, makes sliders vertical.\nWe use the same HTML as in the previous examples:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;range\u0026#34; min=\u0026#34;0\u0026#34; max=\u0026#34;11\u0026#34; value=\u0026#34;7\u0026#34; step=\u0026#34;1\u0026#34; /\u0026gt; :::\nWe target just the inputs with a type of range:\n::: code-example [css]{.language-name}\ninput[type=\u0026#34;range\u0026#34;] { appearance: slider-vertical; } :::\n::: {#sect12 .code-example} ::: iframe ::: :::\nUsing the orient attribute # In Firefox only, there is a non-standard orient property.\nUse similar HTML as in the previous examples, we add the attribute with a value of vertical:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;range\u0026#34; min=\u0026#34;0\u0026#34; max=\u0026#34;11\u0026#34; value=\u0026#34;7\u0026#34; step=\u0026#34;1\u0026#34; orient=\u0026#34;vertical\u0026#34; /\u0026gt; :::\n::: {#sect13 .code-example} ::: iframe ::: :::\nwriting-mode: bt-lr # The writing-mode property should generally not be used to alter text direction for internationalization or localization purposes, but can be used for special effects.\nWe use the same HTML as in the previous examples:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;range\u0026#34; min=\u0026#34;0\u0026#34; max=\u0026#34;11\u0026#34; value=\u0026#34;7\u0026#34; step=\u0026#34;1\u0026#34; /\u0026gt; :::\nWe target just the inputs with a type of range, changing the writing mode from the default to bt-lr, or bottom-to-top and left-to-right:\n::: code-example [css]{.language-name}\ninput[type=\u0026#34;range\u0026#34;] { writing-mode: bt-lr; } :::\n::: {#sect14 .code-example} ::: iframe ::: :::\nPutting it all together # As each of the above examples works in different browsers, you can put all of them in a single example to make it work cross browser:\nWe keep the orient attribute with a value of vertical for Firefox:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;range\u0026#34; min=\u0026#34;0\u0026#34; max=\u0026#34;11\u0026#34; value=\u0026#34;7\u0026#34; step=\u0026#34;1\u0026#34; orient=\u0026#34;vertical\u0026#34; /\u0026gt; :::\nWe target just the inputs with a type of range and orient set to vertical, changing the writing-mode from the default to bt-lr, or bottom-to-top and left-to-right, for pre-Blink versions of Edge, and add appearance: slider-vertical which is supported in Blink and Webkit browsers:\n::: code-example [css]{.language-name}\ninput[type=\u0026#34;range\u0026#34;][orient=\u0026#34;vertical\u0026#34;] { writing-mode: bt-lr; appearance: slider-vertical; } :::\n::: {#sect15 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nValue A string containing the string representation of the selected numeric value; use valueAsNumber to get the value as a number. Events change and input Supported common attributes autocomplete, list, max, min, and step IDL attributes list, value, and valueAsNumber DOM interface HTMLInputElement\nMethods stepDown() and stepUp() Implicit ARIA Role slider ::: Specifications # ::: _table # Specification # HTML Standard\n[# range-state-(type=range)]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox Opera Android Safari on IOS Samsung Internet for Android range 4 12 23 10 11 3.1 4.4 57 52 11 5 7.0\n2--4.4 Pre-Chromium Android WebView recognizes the `range` type, but doesn\\'t implement a range-specific control. tick_marks Yes ≤79 109 No Yes 12.1 Yes Yes 109 Yes 12.2 Yes\nvertical_orientation Yes 12 No 10 Yes Yes Yes Yes No Yes Yes Yes\nThe slider can be oriented vertically The slider can be The slider can be The slider can be oriented vertically The slider can be oriented vertically The slider can be oriented vertically The slider can be oriented vertically The slider can be oriented vertically The slider can be oriented vertically The slider can be oriented vertically by setting the non-standard oriented vertically by oriented vertically by by setting the non-standard by setting the non-standard by setting the non-standard by setting the non-standard by setting the non-standard by setting the non-standard by setting the non-standard `-webkit-appearance: slider-vertical` setting the setting the `-webkit-appearance: slider-vertical` `-webkit-appearance: slider-vertical` `-webkit-appearance: slider-vertical` `-webkit-appearance: slider-vertical` `-webkit-appearance: slider-vertical` `-webkit-appearance: slider-vertical` `-webkit-appearance: slider-vertical` style on the `input` element. You `writing-mode: bt-lr` `writing-mode: bt-lr` style on the `input` element. You style on the `input` element. You style on the `input` element. You style on the `input` element. You style on the `input` element. You style on the `input` element. You style on the `input` element. You shouldn\\'t use this, since it\\'s style on the `input` style on the `input` shouldn\\'t use this, since it\\'s shouldn\\'t use this, since it\\'s shouldn\\'t use this, since it\\'s shouldn\\'t use this, since it\\'s shouldn\\'t use this, since it\\'s shouldn\\'t use this, since it\\'s shouldn\\'t use this, since it\\'s proprietary, unless you include element. element. proprietary, unless you include proprietary, unless you include proprietary, unless you include proprietary, unless you include proprietary, unless you include proprietary, unless you include proprietary, unless you include appropriate fallbacks for users of appropriate fallbacks for users of appropriate fallbacks for users of appropriate fallbacks for users of appropriate fallbacks for users of appropriate fallbacks for users of appropriate fallbacks for users of appropriate fallbacks for users of other browsers. other browsers. other browsers. other browsers. other browsers. other browsers. other browsers. other browsers. :::\nSee also # ::: section-content\nHTML Forms \u0026lt;input\u0026gt; and the HTMLInputElement interface it's based upon \u0026lt;input type=\u0026quot;number\u0026quot;\u0026gt; validityState.rangeOverflow and validityState.rangeUnderflow Controlling multiple parameters with ConstantSourceNode Styling the range element{target=\u0026quot;_blank\u0026quot;} Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range{._attribution-link} :::\n"},{"id":125,"href":"/docs/references/languages/html/element/input/reset/","title":"Reset","section":"HTML","content":" \u0026lt;input type=\u0026quot;reset\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type reset are rendered as buttons, with a default click event handler that resets all inputs in the form to their initial values. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;reset\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} User ID: \u0026lt;input type=\u0026quot;reset\u0026quot; value=\u0026quot;Reset\u0026quot; /\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;Submit\u0026quot; /\u0026gt; \u0026lt;/form\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} .controls { padding-top: 1rem; display: grid; grid-template-rows: repeat(3, 1fr); grid-template-columns: 1fr 2fr; gap: 0.7rem; }\nlabel { font-size: 0.8rem; justify-self: end; } input[type='reset'], input[type='submit'] { width: 5rem; justify-self: end; } input[type='reset'] { grid-column: 2; grid-row: 2; } input[type='submit'] { grid-column: 2; grid-row: 3; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\n::: {#sect1 .notecard .note} Note: You should usually avoid including reset buttons in your forms. They're rarely useful, and are instead more likely to frustrate users who click them by mistake (often while trying to click the submit button). ::: :::\nValue # ::: section-content An \u0026lt;input type=\u0026quot;reset\u0026quot;\u0026gt; element's value attribute contains a string that is used as the button's label. Buttons such as reset don't have a value otherwise. :::\nSetting the value attribute # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;reset\u0026#34; value=\u0026#34;Reset the form\u0026#34; /\u0026gt; :::\n::: {#sect2 .code-example} ::: iframe ::: ::: :::\nOmitting the value attribute # ::: section-content If you don't specify a value, you get a button with the default label (typically \u0026quot;Reset,\u0026quot; but this will vary depending on the user agent):\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;reset\u0026#34; /\u0026gt; :::\n::: {#sect3 .code-example} ::: iframe ::: ::: :::\nUsing reset buttons # ::: section-content \u0026lt;input type=\u0026quot;reset\u0026quot;\u0026gt; buttons are used to reset forms. If you want to create a custom button and then customize the behavior using JavaScript, you need to use \u0026lt;input type=\u0026quot;button\u0026quot;\u0026gt;, or better still, a \u0026lt;button\u0026gt; element. :::\nA simple reset button # ::: section-content We'll begin by creating a simple reset button:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;example\u0026#34;\u0026gt;Type in some sample text\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;example\u0026#34; type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;reset\u0026#34; value=\u0026#34;Reset the form\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\nThis renders like so:\n::: {#sect4 .code-example} ::: iframe ::: :::\nTry entering some text into the text field, and then pressing the reset button. :::\nAdding a reset keyboard shortcut # ::: section-content To add a keyboard shortcut to a reset button \u0026mdash; just as you would with any \u0026lt;input\u0026gt; for which it makes sense \u0026mdash; you use the accesskey global attribute.\nIn this example, [r]{.kbd} is specified as the access key (you'll need to press [r]{.kbd} plus the particular modifier keys for your browser/OS combination; see accesskey for a useful list of those).\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;example\u0026#34;\u0026gt;Type in some sample text\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;example\u0026#34; type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;reset\u0026#34; value=\u0026#34;Reset the form\u0026#34; accesskey=\u0026#34;r\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect5 .code-example} ::: iframe ::: :::\nThe problem with the above example is that there's no way for the user to know what the access key is! This is especially true since the modifiers are typically non-standard to avoid conflicts. When building a site, be sure to provide this information in a way that doesn't interfere with the site design (for example by providing an easily accessible link that points to information on what the site access keys are). Adding a tooltip to the button (using the title attribute) can also help, although it's not a complete solution for accessibility purposes. :::\nDisabling and enabling a reset button # ::: section-content To disable a reset button, specify the disabled attribute on it, like so:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;reset\u0026#34; value=\u0026#34;Disabled\u0026#34; disabled /\u0026gt; :::\nYou can enable and disable buttons at run time by setting disabled to true or false; in JavaScript this looks like btn.disabled = true or btn.disabled = false.\n::: {#sect6 .notecard .note} Note: See the \u0026lt;input type=\u0026quot;button\u0026quot;\u0026gt; page for more ideas about enabling and disabling buttons. ::: :::\nValidation # ::: section-content Buttons don't participate in constraint validation; they have no real value to be constrained. :::\nExamples # ::: section-content We've included simple examples above. There isn't really anything more to say about reset buttons. :::\nTechnical summary # ::: section-content\nValue A string used as the button's label Events click Supported common attributes type and value IDL attributes value DOM interface HTMLInputElement\nMethods None Implicit ARIA Role button ::: Specifications # ::: _table # Specification # HTML Standard\n[# reset-button-state-(type=reset)]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari Samsung Explorer Android Android Android on IOS Internet reset 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nUnlike other browsers, Firefox by default [persists the dynamic disabled Unlike other browsers, Firefox by default [persists the dynamic disabled state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) of a `\u0026lt;button\u0026gt;` across page loads. Use the of a `\u0026lt;button\u0026gt;` across page loads. Use the [`autocomplete`](https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete) attribute to control this [`autocomplete`](https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete) attribute to control this feature. feature. :::\nSee also # ::: section-content\n\u0026lt;input\u0026gt; and the HTMLInputElement interface which implements it. Forms and buttons HTML forms The \u0026lt;button\u0026gt; element Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/reset{._attribution-link} :::\n"},{"id":126,"href":"/docs/references/languages/html/element/input/search/","title":"Search","section":"HTML","content":" \u0026lt;input type=\u0026quot;search\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type search are text fields designed for the user to enter search queries into. These are functionally identical to text inputs, but may be styled differently by the user agent. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;search\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Search the site: \u0026lt;button\u0026gt;Search\u0026lt;/button\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput, label { margin: 0.4rem 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nValue # ::: section-content The value attribute contains a string representing the value contained in the search field. You can retrieve this using the HTMLInputElement.value property in JavaScript.\n::: code-example [js]{.language-name}\nsearchTerms = mySearch.value; :::\nIf no validation constraints are in place for the input (see Validation for more details), the value can be any text string or an empty string (\u0026quot;\u0026quot;). :::\nAdditional attributes # ::: section-content In addition to the attributes that operate on all \u0026lt;input\u0026gt; elements regardless of their type, search field inputs support the following attributes. :::\nlist # ::: section-content The values of the list attribute is the id of a \u0026lt;datalist\u0026gt; element located in the same document. The \u0026lt;datalist\u0026gt; provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the type are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value. :::\nmaxlength # ::: section-content The maximum string length (measured in UTF-16 code units) that the user can enter into the search field. This must be an integer value of 0 or higher. If no maxlength is specified, or an invalid value is specified, the search field has no maximum length. This value must also be greater than or equal to the value of minlength.\nThe input will fail constraint validation if the length of the text entered into the field is greater than maxlength UTF-16 code units long. :::\nminlength # ::: section-content The minimum string length (measured in UTF-16 code units) that the user can enter into the search field. This must be a non-negative integer value smaller than or equal to the value specified by maxlength. If no minlength is specified, or an invalid value is specified, the search input has no minimum length.\nThe search field will fail constraint validation if the length of the text entered into the field is fewer than minlength UTF-16 code units long. :::\npattern # ::: section-content The pattern attribute, when specified, is a regular expression that the input's value must match for the value to pass constraint validation. It must be a valid JavaScript regular expression, as used by the RegExp type, and as documented in our guide on regular expressions; the 'u' flag is specified when compiling the regular expression so that the pattern is treated as a sequence of Unicode code points, instead of as ASCII. No forward slashes should be specified around the pattern text.\nIf the specified pattern is not specified or is invalid, no regular expression is applied and this attribute is ignored completely.\n::: {#sect1 .notecard .note} Note: Use the title attribute to specify text that most browsers will display as a tooltip to explain what the requirements are to match the pattern. You should also include other explanatory text nearby. :::\nSee the section Specifying a pattern for details and an example. :::\nplaceholder # ::: section-content The placeholder attribute is a string that provides a brief hint to the user as to what kind of information is expected in the field. It should be a word or short phrase that demonstrates the expected type of data, rather than an explanatory message. The text must not include carriage returns or line feeds.\nIf the control's content has one directionality ( LTR or RTL) but needs to present the placeholder in the opposite directionality, you can use Unicode bidirectional algorithm formatting characters to override directionality within the placeholder; see How to use Unicode controls for bidi text{target=\u0026quot;_blank\u0026quot;} for more information.\n::: {#sect2 .notecard .note} Note: Avoid using the placeholder attribute if you can. It is not as semantically useful as other ways to explain your form, and can cause unexpected technical issues with your content. See \u0026lt;input\u0026gt; labels for more information. ::: :::\nreadonly # ::: section-content A Boolean attribute which, if present, means this field cannot be edited by the user. Its value can, however, still be changed by JavaScript code directly setting the HTMLInputElement value property.\n::: {#sect3 .notecard .note} Note: Because a read-only field cannot have a value, required does not have any effect on inputs with the readonly attribute also specified. ::: :::\nsize # ::: section-content The size attribute is a numeric value indicating how many characters wide the input field should be. The value must be a number greater than zero, and the default value is 20. Since character widths vary, this may or may not be exact and should not be relied upon to be so; the resulting input may be narrower or wider than the specified number of characters, depending on the characters and the font ( font settings in use).\nThis does not set a limit on how many characters the user can enter into the field. It only specifies approximately how many can be seen at a time. To set an upper limit on the length of the input data, use the maxlength attribute. :::\nspellcheck # ::: section-content spellcheck is a global attribute which is used to indicate whether to enable spell checking for an element. It can be used on any editable content, but here we consider specifics related to the use of spellcheck on \u0026lt;input\u0026gt; elements. The permitted values for spellcheck are:\nfalse Disable spell checking for this element.\ntrue Enable spell checking for this element.\n\u0026quot;\u0026quot; (empty string) or no value Follow the element's default behavior for spell checking. This may be based upon a parent's spellcheck setting or other factors.\nAn input field can have spell checking enabled if it doesn't have the readonly attribute set and is not disabled.\nThe value returned by reading spellcheck may not reflect the actual state of spell checking within a control, if the user agent's preferences override the setting. :::\nNon-standard attributes # ::: section-content The following non-standard attributes are available to search input fields. As a general rule, you should avoid using them unless it can't be helped. :::\nautocorrect # ::: section-content A Safari extension, the autocorrect attribute is a string which indicates whether to activate automatic correction while the user is editing this field. Permitted values are:\non Enable automatic correction of typos, as well as processing of text substitutions if any are configured.\noff Disable automatic correction and text substitutions. :::\nincremental # ::: section-content The Boolean attribute incremental is a WebKit and Blink extension (so supported by Safari, Opera, Chrome, etc.) which, if present, tells the user agent to process the input as a live search. As the user edits the value of the field, the user agent sends search events to the HTMLInputElement object representing the search box. This allows your code to update the search results in real time as the user edits the search.\nIf incremental is not specified, the search event is only sent when the user explicitly initiates a search (such as by pressing the [Enter]{.kbd} or [Return]{.kbd} key while editing the field).\nThe search event is rate-limited so that it is not sent more frequently than an implementation-defined interval. :::\nmozactionhint [Deprecated]{.visually-hidden} # ::: section-content A Mozilla extension, which provides a hint as to what sort of action will be taken if the user presses the [Enter]{.kbd} or [Return]{.kbd} key while editing the field.\nDeprecated: Use enterkeyhint instead. :::\nresults # ::: section-content The results attribute\u0026mdash;supported only by Safari\u0026mdash;is a numeric value that lets you override the maximum number of entries to be displayed in the \u0026lt;input\u0026gt; element's natively-provided drop-down menu of previous search queries.\nThe value must be a non-negative decimal number. If not provided, or an invalid value is given, the browser's default maximum number of entries is used. :::\nUsing search inputs # ::: section-content \u0026lt;input\u0026gt; elements of type search are very similar to those of type text, except that they are specifically intended for handling search terms. They are basically equivalent in behavior, but user agents may choose to style them differently by default (and, of course, sites may use stylesheets to apply custom styles to them). :::\nBasic example # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;search\u0026#34; id=\u0026#34;mySearch\u0026#34; name=\u0026#34;q\u0026#34; /\u0026gt; \u0026lt;button\u0026gt;Search\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nThis renders like so:\n::: {#sect4 .code-example} ::: iframe ::: :::\nq is the most common name given to search inputs, although it's not mandatory. When submitted, the data name/value pair sent to the server will be q=searchterm.\n::: {#sect5 .notecard .note} Note: You must remember to set a name for your input, otherwise nothing will be submitted. ::: :::\nDifferences between search and text types # ::: section-content The main basic differences come in the way browsers handle them. The first thing to note is that some browsers show a cross icon that can be clicked on to remove the search term instantly if desired, in Chrome this action is also triggered when pressing escape. The following screenshot comes from Chrome:\n![Focused search input, with focus ring, with the text 'cats'. There is an x icon in the input abutting the right side.] height=\u0026ldquo;31\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;}\nIn addition, modern browsers also tend to automatically store search terms previously entered across domains, which then come up as autocomplete options when subsequent searches are performed in search inputs on that domain. This helps users who tend to do searches on the same or similar search queries over time. This screenshot is from Firefox:\n![An input in error state with a red focus ring. The user has entered the letter 'h'. A pop-up selection list is open directly under the input box with two options: hello and hermansje.] height=\u0026ldquo;83\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;}At this point, let's look at some useful techniques you can apply to your search forms. :::\nSetting placeholders # ::: section-content You can provide a useful placeholder inside your search input that could give a hint on what to do using the placeholder attribute. Look at the following example:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;search\u0026#34; id=\u0026#34;mySearch\u0026#34; name=\u0026#34;q\u0026#34; placeholder=\u0026#34;Search the site…\u0026#34; /\u0026gt; \u0026lt;button\u0026gt;Search\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nYou can see how the placeholder is rendered below:\n::: {#sect6 .code-example} ::: iframe ::: ::: :::\nSearch form labels and accessibility # ::: section-content One problem with search forms is their accessibility; a common design practice is not to provide a label for the search field (although there might be a magnifying glass icon or similar), as the purpose of a search form is normally fairly obvious for sighted users due to placement ( this example shows a typical pattern{target=\u0026quot;_blank\u0026quot;}).\nThis could, however, cause confusion for screen reader users, since they will not have any verbal indication of what the search input is. One way around this that won't impact on your visual design is to use WAI-ARIA features:\nA role attribute of value search on the \u0026lt;form\u0026gt; element will cause screen readers to announce that the form is a search form. If that isn't enough, you can use an aria-label attribute on the \u0026lt;input\u0026gt; itself. This should be a descriptive text label that will be read out by the screen reader; it's used as a non-visual equivalent to \u0026lt;label\u0026gt;. Let's have a look at an example:\n::: code-example [html]{.language-name}\n\u0026lt;form role=\u0026#34;search\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;search\u0026#34; id=\u0026#34;mySearch\u0026#34; name=\u0026#34;q\u0026#34; placeholder=\u0026#34;Search the site…\u0026#34; aria-label=\u0026#34;Search through site content\u0026#34; /\u0026gt; \u0026lt;button\u0026gt;Search\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nYou can see how this is rendered below:\n::: {#sect7 .code-example} ::: iframe ::: :::\nThere is no visual difference from the previous example, but screen reader users have way more information available to them.\n::: {#sect8 .notecard .note} Note: See Signposts/Landmarks for more information about such accessibility features. ::: :::\nPhysical input element size # ::: section-content The physical size of the input box can be controlled using the size attribute. With it, you can specify the number of characters the input box can display at a time. In this example, for instance, the search box is 30 characters wide:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;search\u0026#34; id=\u0026#34;mySearch\u0026#34; name=\u0026#34;q\u0026#34; placeholder=\u0026#34;Search the site…\u0026#34; size=\u0026#34;30\u0026#34; /\u0026gt; \u0026lt;button\u0026gt;Search\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nThe result is this wider input box:\n::: {#sect9 .code-example} ::: iframe ::: ::: :::\nValidation # ::: section-content \u0026lt;input\u0026gt; elements of type search have the same validation features available to them as regular text inputs. It is less likely that you'd want to use validation features in general for search boxes. In many cases, users should just be allowed to search for anything, but there are a few cases to consider, such as searches against data of a known format.\n::: {#sect10 .notecard .note} Note: HTML form validation is not a substitute for scripts that ensure that the entered data is in the proper format. It's far too easy for someone to make adjustments to the HTML that allow them to bypass the validation, or to remove it entirely. It's also possible for someone to bypass your HTML entirely and submit the data directly to your server. If your server-side code fails to validate the data it receives, disaster could strike when improperly-formatted data (or data which is too large, is of the wrong type, and so forth) is entered into your database. ::: :::\nA note on styling # ::: section-content There are useful pseudo-classes available for styling valid/invalid form elements: :valid and :invalid. In this section, we'll use the following CSS, which will place a check (tick) next to inputs containing valid values, and a cross next to inputs containing invalid values.\n::: code-example [css]{.language-name}\ninput:invalid ~ span::after { content: \u0026#34;✖\u0026#34;; padding-left: 5px; position: absolute; } input:valid ~ span::after { content: \u0026#34;✓\u0026#34;; padding-left: 5px; position: absolute; } :::\nThe technique also requires a \u0026lt;span\u0026gt; element to be placed after the form element, which acts as a holder for the icons. This was necessary because some input types on some browsers don't display icons placed directly after them very well. :::\nMaking input required # ::: section-content You can use the required attribute as an easy way of making entering a value required before form submission is allowed:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;search\u0026#34; id=\u0026#34;mySearch\u0026#34; name=\u0026#34;q\u0026#34; placeholder=\u0026#34;Search the site…\u0026#34; required /\u0026gt; \u0026lt;button\u0026gt;Search\u0026lt;/button\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/form\u0026gt; :::\nThis renders like so:\n::: {#sect11 .code-example} ::: iframe ::: :::\nIn addition, if you try to submit the form with no search term entered into it, the browser will show a message. The following example is from Firefox:\n![form field with attached message that says Please fill out this field] height=\u0026ldquo;114\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;}\nDifferent messages will be shown when you try to submit the form with different types of invalid data contained inside the inputs; see the below examples. :::\nInput value length # ::: section-content You can specify a minimum length, in characters, for the entered value using the minlength attribute; similarly, use maxlength to set the maximum length of the entered value.\nThe example below requires that the entered value be 4\u0026ndash;8 characters in length.\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;mySearch\u0026#34;\u0026gt;Search for user\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;search\u0026#34; id=\u0026#34;mySearch\u0026#34; name=\u0026#34;q\u0026#34; placeholder=\u0026#34;User IDs are 4–8 characters in length\u0026#34; required size=\u0026#34;30\u0026#34; minlength=\u0026#34;4\u0026#34; maxlength=\u0026#34;8\u0026#34; /\u0026gt; \u0026lt;button\u0026gt;Search\u0026lt;/button\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/form\u0026gt; :::\nThis renders like so:\n::: {#sect12 .code-example} ::: iframe ::: :::\nIf you try to submit the form with less than 4 characters, you'll be given an appropriate error message (which differs between browsers). If you try to go beyond 8 characters in length, the browser won't let you. :::\nSpecifying a pattern # ::: section-content You can use the pattern attribute to specify a regular expression that the inputted value must follow to be considered valid (see Validating against a regular expression for a simple crash course).\nLet's look at an example. Say we wanted to provide a product ID search form, and the IDs were all codes of two letters followed by four numbers. The following example covers it:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;mySearch\u0026#34;\u0026gt;Search for product by ID:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;search\u0026#34; id=\u0026#34;mySearch\u0026#34; name=\u0026#34;q\u0026#34; placeholder=\u0026#34;two letters followed by four numbers\u0026#34; required size=\u0026#34;30\u0026#34; pattern=\u0026#34;[A-z]{2}[0-9]{4}\u0026#34; /\u0026gt; \u0026lt;button\u0026gt;Search\u0026lt;/button\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/form\u0026gt; :::\nThis renders like so:\n::: {#sect13 .code-example} ::: iframe ::: ::: :::\nExamples # ::: section-content You can see a good example of a search form used in context at our website-aria-roles{target=\u0026quot;_blank\u0026quot;} example ( see it live{target=\u0026quot;_blank\u0026quot;}). :::\nTechnical summary # ::: section-content\nValue A string representing the value contained in the search field. Events change and input Supported Common Attributes autocomplete, list, maxlength, minlength, pattern, placeholder, required, size. IDL attributes value DOM interface HTMLInputElement\nMethods select(), setRangeText(), setSelectionRange(). Implicit ARIA Role with no list attribute: searchbox with list attribute: combobox ::: Specifications # ::: _table # Specification # HTML Standard\n[# text-(type=text)-state-and-search-state-(type=search)]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet search 5 12 4 10 10.6 5 4.4 18 4 14 4.2 1.0 :::\nSee also # ::: section-content\nHTML Forms \u0026lt;input\u0026gt; and the HTMLInputElement interface it's based upon \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt; Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search{._attribution-link} :::\n"},{"id":127,"href":"/docs/references/languages/html/element/input/submit/","title":"Submit","section":"HTML","content":" \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type submit are rendered as buttons. When the click event occurs (typically because the user clicked the button), the user agent attempts to submit the form to the server. :::\nValue # ::: section-content An \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt; element's value attribute contains a string which is displayed as the button's label. Buttons do not have a true value otherwise. :::\nSetting the value attribute # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Send Request\u0026#34; /\u0026gt; :::\n::: {#sect1 .code-example} ::: iframe ::: ::: :::\nOmitting the value attribute # ::: section-content If you don't specify a value, the button will have a default label, chosen by the user agent. This label is likely to be something along the lines of \u0026quot;Submit\u0026quot; or \u0026quot;Submit Query.\u0026quot; Here's an example of a submit button with a default label in your browser:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; :::\n::: {#sect2 .code-example} ::: iframe ::: ::: :::\nAdditional attributes # ::: section-content In addition to the attributes shared by all \u0026lt;input\u0026gt; elements, submit button inputs support the following attributes. :::\nformaction # ::: section-content A string indicating the URL to which to submit the data. This takes precedence over the action attribute on the \u0026lt;form\u0026gt; element that owns the \u0026lt;input\u0026gt;.\nThis attribute is also available on \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; and \u0026lt;button\u0026gt; elements. :::\nformenctype # ::: section-content A string that identifies the encoding method to use when submitting the form data to the server. There are three permitted values:\napplication/x-www-form-urlencoded This, the default value, sends the form data as a string after URL encoding{target=\u0026quot;_blank\u0026quot;} the text using an algorithm such as encodeURI().\nmultipart/form-data Uses the FormData API to manage the data, allowing for files to be submitted to the server. You must use this encoding type if your form includes any \u0026lt;input\u0026gt; elements of type file ( \u0026lt;input type=\u0026quot;file\u0026quot;\u0026gt;).\ntext/plain Plain text; mostly useful only for debugging, so you can easily see the data that's to be submitted.\nIf specified, the value of the formenctype attribute overrides the owning form's action attribute.\nThis attribute is also available on \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; and \u0026lt;button\u0026gt; elements. :::\nformmethod # ::: section-content A string indicating the HTTP method to use when submitting the form's data; this value overrides any method attribute given on the owning form. Permitted values are:\nget A URL is constructed by starting with the URL given by the formaction or action attribute, appending a question mark (\u0026quot;?\u0026quot;) character, then appending the form's data, encoded as described by formenctype or the form's enctype attribute. This URL is then sent to the server using an HTTP get request. This method works well for simple forms that contain only ASCII characters and have no side effects. This is the default value.\npost The form's data is included in the body of the request that is sent to the URL given by the formaction or action attribute using an HTTP post method. This method supports complex data and file attachments.\ndialog This method is used to indicate that the button closes the dialog with which the input is associated, and does not transmit the form data at all.\nThis attribute is also available on \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; and \u0026lt;button\u0026gt; elements. :::\nformnovalidate # ::: section-content A Boolean attribute which, if present, specifies that the form should not be validated before submission to the server. This overrides the value of the novalidate attribute on the element's owning form.\nThis attribute is also available on \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; and \u0026lt;button\u0026gt; elements. :::\nformtarget # ::: section-content A string which specifies a name or keyword that indicates where to display the response received after submitting the form. The string must be the name of a browsing context (that is, a tab, window, or \u0026lt;iframe\u0026gt;). A value specified here overrides any target given by the target attribute on the \u0026lt;form\u0026gt; that owns this input.\nIn addition to the actual names of tabs, windows, or inline frames, there are a few special keywords that can be used:\n_self Loads the response into the same browsing context as the one that contains the form. This will replace the current document with the received data. This is the default value used if none is specified.\n_blank Loads the response into a new, unnamed, browsing context. This is typically a new tab in the same window as the current document, but may differ depending on the configuration of the user agent.\n_parent Loads the response into the parent browsing context of the current one. If there is no parent context, this behaves the same as _self.\n_top Loads the response into the top-level browsing context; this is the browsing context that is the topmost ancestor of the current context. If the current context is the topmost context, this behaves the same as _self.\nThis attribute is also available on \u0026lt;input type=\u0026quot;image\u0026quot;\u0026gt; and \u0026lt;button\u0026gt; elements. :::\nUsing submit buttons # ::: section-content \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt; buttons are used to submit forms. If you want to create a custom button and then customize the behavior using JavaScript, you need to use \u0026lt;input type=\u0026quot;button\u0026quot;\u0026gt;, or better still, a \u0026lt;button\u0026gt; element.\nIf you choose to use \u0026lt;button\u0026gt; elements to create the buttons in your form, keep this in mind: If the \u0026lt;button\u0026gt; is inside a \u0026lt;form\u0026gt;, that button will be treated as the \u0026quot;submit\u0026quot; button. So you should be in the habit of expressly specifying which button is the submit button. :::\nA simple submit button # ::: section-content We'll begin by creating a form with a simple submit button:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;example\u0026#34;\u0026gt;Let\u0026#39;s submit some text\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;example\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Send\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\nThis renders like so:\n::: {#sect3 .code-example} ::: iframe ::: :::\nTry entering some text into the text field, and then submitting the form.\nUpon submitting, the data name/value pair gets sent to the server. In this instance, the string will be text=usertext, where \u0026quot;usertext\u0026quot; is the text entered by the user, encoded to preserve special characters. Where and how the data is submitted depends on the configuration of the \u0026lt;form\u0026gt;; see Sending form data for more details. :::\nAdding a keyboard shortcut to a submit button # ::: section-content Keyboard shortcuts, also known as access keys and keyboard equivalents, let the user trigger a button using a key or combination of keys on the keyboard. To add a keyboard shortcut to a submit button \u0026mdash; just as you would with any \u0026lt;input\u0026gt; for which it makes sense \u0026mdash; you use the accesskey global attribute.\nIn this example, [s]{.kbd} is specified as the access key (you'll need to press [s]{.kbd} plus the particular modifier keys for your browser/OS combination). In order to avoid conflicts with the user agent's own keyboard shortcuts, different modifier keys are used for access keys than for other shortcuts on the host computer. See accesskey for further details.\nHere's the previous example with the [s]{.kbd} access key added:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;example\u0026#34;\u0026gt;Let\u0026#39;s submit some text\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;example\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Send\u0026#34; accesskey=\u0026#34;s\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\nFor example, in Firefox for Mac, pressing [Control]{.kbd}-[Option]{.kbd}-[S]{.kbd} triggers the Send button, while Chrome on Windows uses [Alt]{.kbd}+[S]{.kbd}.\n::: {#sect4 .code-example} ::: iframe ::: :::\nThe problem with the above example is that the user will not know what the access key is! This is especially true since the modifiers are typically non-standard to avoid conflicts. When building a site, be sure to provide this information in a way that doesn't interfere with the site design (for example by providing an easily accessible link that points to information on what the site access keys are). Adding a tooltip to the button (using the title attribute) can also help, although it's not a complete solution for accessibility purposes. :::\nDisabling and enabling a submit button # ::: section-content To disable a submit button, specify the disabled attribute on it, like so:\n::: code-example [html]{.language-name}\n\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Send\u0026#34; disabled /\u0026gt; :::\nYou can enable and disable buttons at run time by setting disabled to true or false; in JavaScript this looks like btn.disabled = true or btn.disabled = false.\n::: {#sect5 .notecard .note} Note: See the \u0026lt;input type=\u0026quot;button\u0026quot;\u0026gt; page for more ideas about enabling and disabling buttons. ::: :::\nValidation # ::: section-content Submit buttons don't participate in constraint validation; they have no real value to be constrained. :::\nExamples # ::: section-content We've included simple examples above. There isn't really anything more to say about submit buttons. There's a reason this kind of control is sometimes called a \u0026quot;simple button.\u0026quot; :::\nTechnical Summary # ::: section-content\nValue A string used as the button's label Events click Supported common attributes type and value IDL attributes value DOM interface HTMLInputElement\nMethods None Implicit ARIA Role button ::: Specifications # ::: _table # Specification # HTML Standard\n[# submit-button-state-(type=submit)]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari Samsung Explorer Android Android Android on IOS Internet submit 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\nUnlike other browsers, Firefox by default [persists the dynamic disabled Unlike other browsers, Firefox by default [persists the dynamic disabled state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) of a `\u0026lt;button\u0026gt;` across page loads. Use the of a `\u0026lt;button\u0026gt;` across page loads. Use the [`autocomplete`](https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete) attribute to control this [`autocomplete`](https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete) attribute to control this feature. feature. :::\nSee also # ::: section-content\n\u0026lt;input\u0026gt; and the HTMLInputElement interface which implements it. Forms and buttons HTML forms The \u0026lt;button\u0026gt; element Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/submit{._attribution-link} :::\n"},{"id":128,"href":"/docs/references/languages/html/element/input/tel/","title":"Tel","section":"HTML","content":" \u0026lt;input type=\u0026quot;tel\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type tel are used to let the user enter and edit a telephone number. Unlike \u0026lt;input type=\u0026quot;email\u0026quot;\u0026gt; and \u0026lt;input type=\u0026quot;url\u0026quot;\u0026gt;, the input value is not automatically validated to a particular format before the form can be submitted, because formats for telephone numbers vary so much around the world. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;tel\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Enter your phone number:\n\u0026lt;input type=\u0026quot;tel\u0026quot; id=\u0026quot;phone\u0026quot; name=\u0026quot;phone\u0026quot; pattern=\u0026quot;[0-9]{3}-[0-9]{3}-[0-9]{4}\u0026quot; required /\u0026gt; \u0026lt;small\u0026gt;Format: 123-456-7890\u0026lt;/small\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput, label { margin: 0.4rem 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nDespite the fact that inputs of type tel are functionally identical to standard text inputs, they do serve useful purposes; the most quickly apparent of these is that mobile browsers \u0026mdash; especially on mobile phones \u0026mdash; may opt to present a custom keypad optimized for entering phone numbers. Using a specific input type for telephone numbers also makes adding custom validation and handling of phone numbers more convenient.\n::: {#sect1 .notecard .note} Note: Browsers that don't support type tel fall back to being a standard text input. ::: :::\nValue # ::: section-content The \u0026lt;input\u0026gt; element's value attribute contains a string that either represents a telephone number or is an empty string (\u0026quot;\u0026quot;). :::\nAdditional attributes # ::: section-content In addition to the attributes that operate on all \u0026lt;input\u0026gt; elements regardless of their type, telephone number inputs support the following attributes. :::\nlist # ::: section-content The values of the list attribute is the id of a \u0026lt;datalist\u0026gt; element located in the same document. The \u0026lt;datalist\u0026gt; provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the type are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value. :::\nmaxlength # ::: section-content The maximum string length (measured in UTF-16 code units) that the user can enter into the telephone number field. This must be an integer value of 0 or higher. If no maxlength is specified, or an invalid value is specified, the telephone number field has no maximum length. This value must also be greater than or equal to the value of minlength.\nThe input will fail constraint validation if the length of the text entered into the field is greater than maxlength UTF-16 code units long. :::\nminlength # ::: section-content The minimum string length (measured in UTF-16 code units) that the user can enter into the telephone number field. This must be a non-negative integer value smaller than or equal to the value specified by maxlength. If no minlength is specified, or an invalid value is specified, the telephone number input has no minimum length.\nThe telephone number field will fail constraint validation if the length of the text entered into the field is fewer than minlength UTF-16 code units long. :::\npattern # ::: section-content The pattern attribute, when specified, is a regular expression that the input's value must match for the value to pass constraint validation. It must be a valid JavaScript regular expression, as used by the RegExp type, and as documented in our guide on regular expressions; the 'u' flag is specified when compiling the regular expression so that the pattern is treated as a sequence of Unicode code points, instead of as ASCII. No forward slashes should be specified around the pattern text.\nIf the specified pattern is not specified or is invalid, no regular expression is applied and this attribute is ignored completely.\n::: {#sect2 .notecard .note} Note: Use the title attribute to specify text that most browsers will display as a tooltip to explain what the requirements are to match the pattern. You should also include other explanatory text nearby. :::\nSee Pattern validation below for details and an example. :::\nplaceholder # ::: section-content The placeholder attribute is a string that provides a brief hint to the user as to what kind of information is expected in the field. It should be a word or short phrase that demonstrates the expected type of data, rather than an explanatory message. The text must not include carriage returns or line feeds.\nIf the control's content has one directionality ( LTR or RTL) but needs to present the placeholder in the opposite directionality, you can use Unicode bidirectional algorithm formatting characters to override directionality within the placeholder; see How to use Unicode controls for bidi text{target=\u0026quot;_blank\u0026quot;} for more information.\n::: {#sect3 .notecard .note} Note: Avoid using the placeholder attribute if you can. It is not as semantically useful as other ways to explain your form, and can cause unexpected technical issues with your content. See \u0026lt;input\u0026gt; labels for more information. ::: :::\nreadonly # ::: section-content A Boolean attribute which, if present, means this field cannot be edited by the user. Its value can, however, still be changed by JavaScript code directly setting the HTMLInputElement value property.\n::: {#sect4 .notecard .note} Note: Because a read-only field cannot have a value, required does not have any effect on inputs with the readonly attribute also specified. ::: :::\nsize # ::: section-content The size attribute is a numeric value indicating how many characters wide the input field should be. The value must be a number greater than zero, and the default value is 20. Since character widths vary, this may or may not be exact and should not be relied upon to be so; the resulting input may be narrower or wider than the specified number of characters, depending on the characters and the font ( font settings in use).\nThis does not set a limit on how many characters the user can enter into the field. It only specifies approximately how many can be seen at a time. To set an upper limit on the length of the input data, use the maxlength attribute. :::\nNon-standard attributes # ::: section-content The following non-standard attributes are available to telephone number input fields. As a general rule, you should avoid using them unless it can't be helped. :::\nautocorrect # ::: section-content A Safari extension, the autocorrect attribute is a string which indicates whether to activate automatic correction while the user is editing this field. Permitted values are:\non Enable automatic correction of typos, as well as processing of text substitutions if any are configured.\noff Disable automatic correction and text substitutions. :::\nmozactionhint [Deprecated]{.visually-hidden} # ::: section-content A Mozilla extension, which provides a hint as to what sort of action will be taken if the user presses the [Enter]{.kbd} or [Return]{.kbd} key while editing the field.\nDeprecated: Use enterkeyhint instead. :::\nUsing tel inputs # ::: section-content Telephone numbers are a very commonly collected type of data on the web. When creating any kind of registration or e-commerce site, for example, you will likely need to ask the user for a telephone number, whether for business purposes or for emergency contact purposes. Given how commonly-entered phone numbers are, it's unfortunate that a \u0026quot;one size fits all\u0026quot; solution for validating phone numbers is not practical.\nFortunately, you can consider the requirements of your own site and implement an appropriate level of validation yourself. See Validation, below, for details. :::\nCustom keyboards # ::: section-content One of the main advantages of \u0026lt;input type=\u0026quot;tel\u0026quot;\u0026gt; is that it causes mobile browsers to display a special keyboard for entering phone numbers. For example, here's what the keypads look like on a couple of devices.\nFirefox for Android WebKit iOS (Safari/Chrome/Firefox) ::: A simple tel input # ::: section-content In its most basic form, a tel input can be implemented like this:\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;telNo\u0026#34;\u0026gt;Phone number:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;telNo\u0026#34; name=\u0026#34;telNo\u0026#34; type=\u0026#34;tel\u0026#34; /\u0026gt; :::\n::: {#sect5 .code-example} ::: iframe ::: :::\nThere is nothing magical going on here. When submitted to the server, the above input's data would be represented as, for example, telNo=+12125553151. :::\nPlaceholders # ::: section-content Sometimes it's helpful to offer an in-context hint as to what form the input data should take. This can be especially important if the page design doesn't offer descriptive labels for each \u0026lt;input\u0026gt;. This is where placeholders come in. A placeholder is a value that demonstrates the form the value should take by presenting an example of a valid value, which is displayed inside the edit box when the element's value is \u0026quot;\u0026quot;. Once data is entered into the box, the placeholder disappears; if the box is emptied, the placeholder reappears.\nHere, we have an tel input with the placeholder 123-4567-8901. Note how the placeholder disappears and reappears as you manipulate the contents of the edit field.\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;telNo\u0026#34; name=\u0026#34;telNo\u0026#34; type=\u0026#34;tel\u0026#34; placeholder=\u0026#34;123-4567-8901\u0026#34; /\u0026gt; :::\n::: {#sect6 .code-example} ::: iframe ::: ::: :::\nControlling the input size # ::: section-content You can control not only the physical length of the input box, but also the minimum and maximum lengths allowed for the input text itself.\nPhysical input element size # The physical size of the input box can be controlled using the size attribute. With it, you can specify the number of characters the input box can display at a time. In this example, for instance, the tel edit box is 20 characters wide:\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;telNo\u0026#34; name=\u0026#34;telNo\u0026#34; type=\u0026#34;tel\u0026#34; size=\u0026#34;20\u0026#34; /\u0026gt; :::\n::: {#sect7 .code-example} ::: iframe ::: :::\nElement value length # The size is separate from the length limitation on the entered telephone number. You can specify a minimum length, in characters, for the entered telephone number using the minlength attribute; similarly, use maxlength to set the maximum length of the entered telephone number.\nThe example below creates a 20-character wide telephone number entry box, requiring that the contents be no shorter than 9 characters and no longer than 14 characters.\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;telNo\u0026#34; name=\u0026#34;telNo\u0026#34; type=\u0026#34;tel\u0026#34; size=\u0026#34;20\u0026#34; minlength=\u0026#34;9\u0026#34; maxlength=\u0026#34;14\u0026#34; /\u0026gt; :::\n::: {#sect8 .code-example} ::: iframe ::: :::\n::: {#sect9 .notecard .note} Note: The above attributes do affect Validation \u0026mdash; the above example's inputs will count as invalid if the length of the value is less than 9 characters, or more than 14. Most browser won't even let you enter a value over the max length. ::: :::\nProviding default options # ::: section-content\nProviding a single default using the value attribute # As always, you can provide a default value for an tel input box by setting its value attribute:\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;telNo\u0026#34; name=\u0026#34;telNo\u0026#34; type=\u0026#34;tel\u0026#34; value=\u0026#34;333-4444-4444\u0026#34; /\u0026gt; :::\n::: {#sect10 .code-example} ::: iframe ::: :::\nOffering suggested values # Taking it a step further, you can provide a list of default phone number values from which the user can select. To do this, use the list attribute. This doesn't limit the user to those options, but does allow them to select commonly-used telephone numbers more quickly. This also offers hints to autocomplete. The list attribute specifies the ID of a \u0026lt;datalist\u0026gt; element, which in turn contains one \u0026lt;option\u0026gt; element per suggested value; each option's value is the corresponding suggested value for the telephone number entry box.\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;telNo\u0026#34;\u0026gt;Phone number: \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;telNo\u0026#34; name=\u0026#34;telNo\u0026#34; type=\u0026#34;tel\u0026#34; list=\u0026#34;defaultTels\u0026#34; /\u0026gt; \u0026lt;datalist id=\u0026#34;defaultTels\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;111-1111-1111\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;122-2222-2222\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;333-3333-3333\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;344-4444-4444\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\n::: {#sect11 .code-example} ::: iframe ::: :::\nWith the \u0026lt;datalist\u0026gt; element and its \u0026lt;option\u0026gt;s in place, the browser will offer the specified values as potential values for the phone number; this is typically presented as a popup or drop-down menu containing the suggestions. While the specific user experience may vary from one browser to another, typically clicking in the edit box presents a drop-down of the suggested phone numbers. Then, as the user types, the list is adjusted to show only filtered matching values. Each typed character narrows down the list until the user makes a selection or types a custom value.\nHere's a screenshot of what that might look like:\n![An input box has focus with a blue focus ring. The input has a drop-down menu showing four phone numbers the user can select.] height=\u0026ldquo;150\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;} :::\nValidation # ::: section-content As we've touched on before, it's quite difficult to provide a one-size-fits-all client-side validation solution for phone numbers. So what can we do? Let's consider some options.\n::: {#sect12 .notecard .warning} Warning: HTML form validation is not a substitute for server-side scripts that ensure the entered data is in the proper format before it is allowed into the database. It's far too easy for someone to make adjustments to the HTML that allow them to bypass the validation, or to remove it entirely. It's also possible for someone to bypass your HTML entirely and submit the data directly to your server. If your server-side code fails to validate the data it receives, disaster could strike when improperly-formatted data (or data which is too large, is of the wrong type, and so forth) is entered into your database. ::: :::\nMaking telephone numbers required # ::: section-content You can make it so that an empty input is invalid and won't be submitted to the server using the required attribute. For example, let's use this HTML:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;telNo\u0026#34;\u0026gt;Enter a telephone number (required): \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;telNo\u0026#34; name=\u0026#34;telNo\u0026#34; type=\u0026#34;tel\u0026#34; required /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nAnd let's include the following CSS to highlight valid entries with a checkmark and invalid entries with a cross:\n::: code-example [css]{.language-name}\ndiv { margin-bottom: 10px; position: relative; } input[type=\u0026#34;number\u0026#34;] { width: 100px; } input + span { padding-right: 30px; } input:invalid + span::after { position: absolute; content: \u0026#34;✖\u0026#34;; padding-left: 5px; color: #8b0000; } input:valid + span::after { position: absolute; content: \u0026#34;✓\u0026#34;; padding-left: 5px; color: #009000; } :::\nThe output looks like this:\n::: {#sect13 .code-example} ::: iframe ::: ::: :::\nPattern validation # ::: section-content If you want to further restrict entered numbers so they also have to conform to a specific pattern, you can use the pattern attribute, which takes as its value a regular expression that entered values have to match.\nIn this example we'll use the same CSS as before, but our HTML is changed to look like this:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;telNo\u0026#34;\u0026gt; Enter a telephone number (in the form xxx-xxx-xxxx): \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;telNo\u0026#34; name=\u0026#34;telNo\u0026#34; type=\u0026#34;tel\u0026#34; required pattern=\u0026#34;[0-9]{3}-[0-9]{3}-[0-9]{4}\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect14 .code-example} ::: iframe ::: :::\nNotice how the entered value is reported as invalid unless the pattern xxx-xxx-xxxx is matched; for instance, 41-323-421 won't be accepted. Neither will 800-MDN-ROCKS. However, 865-555-6502 will be accepted. This particular pattern is obviously only useful for certain locales \u0026mdash; in a real application you'd probably have to vary the pattern used depending on the locale of the user. :::\nExamples # ::: section-content In this example, we present a simple interface with a \u0026lt;select\u0026gt; element that lets the user choose which country they're in, and a set of \u0026lt;input type=\u0026quot;tel\u0026quot;\u0026gt; elements to let them enter each part of their phone number; there is no reason why you can't have multiple tel inputs.\nEach input has a placeholder attribute to show a hint to sighted users about what to enter into it, a pattern to enforce a specific number of characters for the desired section, and an aria-label attribute to contain a hint to be read out to screen reader users about what to enter into it.\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;country\u0026#34;\u0026gt;Choose your country:\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;country\u0026#34; name=\u0026#34;country\u0026#34;\u0026gt; \u0026lt;option\u0026gt;UK\u0026lt;/option\u0026gt; \u0026lt;option selected\u0026gt;US\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Germany\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;p\u0026gt;Enter your telephone number:\u0026lt;/p\u0026gt; \u0026lt;span class=\u0026#34;areaDiv\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;areaNo\u0026#34; name=\u0026#34;areaNo\u0026#34; type=\u0026#34;tel\u0026#34; required placeholder=\u0026#34;Area code\u0026#34; pattern=\u0026#34;[0-9]{3}\u0026#34; aria-label=\u0026#34;Area code\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;number1Div\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;number1\u0026#34; name=\u0026#34;number1\u0026#34; type=\u0026#34;tel\u0026#34; required placeholder=\u0026#34;First part\u0026#34; pattern=\u0026#34;[0-9]{3}\u0026#34; aria-label=\u0026#34;First part of number\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;number2Div\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;number2\u0026#34; name=\u0026#34;number2\u0026#34; type=\u0026#34;tel\u0026#34; required placeholder=\u0026#34;Second part\u0026#34; pattern=\u0026#34;[0-9]{4}\u0026#34; aria-label=\u0026#34;Second part of number\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nThe JavaScript is relatively simple \u0026mdash; it contains an onchange event handler that, when the \u0026lt;select\u0026gt; value is changed, updates the \u0026lt;input\u0026gt; element's pattern, placeholder, and aria-label to suit the format of telephone numbers in that country/territory.\n::: code-example [js]{.language-name}\nconst selectElem = document.querySelector(\u0026#34;select\u0026#34;); const inputElems = document.querySelectorAll(\u0026#34;input\u0026#34;); selectElem.onchange = () =\u0026gt; { for (let i = 0; i \u0026lt; inputElems.length; i++) { inputElems[i].value = \u0026#34;\u0026#34;; } if (selectElem.value === \u0026#34;US\u0026#34;) { inputElems[2].parentNode.style.display = \u0026#34;inline\u0026#34;; inputElems[0].placeholder = \u0026#34;Area code\u0026#34;; inputElems[0].pattern = \u0026#34;[0-9]{3}\u0026#34;; inputElems[1].placeholder = \u0026#34;First part\u0026#34;; inputElems[1].pattern = \u0026#34;[0-9]{3}\u0026#34;; inputElems[1].setAttribute(\u0026#34;aria-label\u0026#34;, \u0026#34;First part of number\u0026#34;); inputElems[2].placeholder = \u0026#34;Second part\u0026#34;; inputElems[2].pattern = \u0026#34;[0-9]{4}\u0026#34;; inputElems[2].setAttribute(\u0026#34;aria-label\u0026#34;, \u0026#34;Second part of number\u0026#34;); } else if (selectElem.value === \u0026#34;UK\u0026#34;) { inputElems[2].parentNode.style.display = \u0026#34;none\u0026#34;; inputElems[0].placeholder = \u0026#34;Area code\u0026#34;; inputElems[0].pattern = \u0026#34;[0-9]{3,6}\u0026#34;; inputElems[1].placeholder = \u0026#34;Local number\u0026#34;; inputElems[1].pattern = \u0026#34;[0-9]{4,8}\u0026#34;; inputElems[1].setAttribute(\u0026#34;aria-label\u0026#34;, \u0026#34;Local number\u0026#34;); } else if (selectElem.value === \u0026#34;Germany\u0026#34;) { inputElems[2].parentNode.style.display = \u0026#34;inline\u0026#34;; inputElems[0].placeholder = \u0026#34;Area code\u0026#34;; inputElems[0].pattern = \u0026#34;[0-9]{3,5}\u0026#34;; inputElems[1].placeholder = \u0026#34;First part\u0026#34;; inputElems[1].pattern = \u0026#34;[0-9]{2,4}\u0026#34;; inputElems[1].setAttribute(\u0026#34;aria-label\u0026#34;, \u0026#34;First part of number\u0026#34;); inputElems[2].placeholder = \u0026#34;Second part\u0026#34;; inputElems[2].pattern = \u0026#34;[0-9]{4}\u0026#34;; inputElems[2].setAttribute(\u0026#34;aria-label\u0026#34;, \u0026#34;Second part of number\u0026#34;); } }; :::\nThe example looks like this:\n::: {#sect15 .code-example} ::: iframe ::: :::\nThis is an interesting idea, which goes to show a potential solution to the problem of dealing with international phone numbers. You would have to extend the example of course to provide the correct pattern for potentially every country, which would be a lot of work, and there would still be no foolproof guarantee that the users would enter their numbers correctly.\nIt makes you wonder if it is worth going to all this trouble on the client-side, when you could just let the user enter their number in whatever format they wanted on the client-side and then validate and sanitize it on the server. But this choice is yours to make. :::\nTechnical Summary # ::: section-content\nValue A string representing a telephone number, or empty Events change and input Supported common attributes autocomplete, list, maxlength, minlength, pattern, placeholder, readonly, and size IDL attributes list, selectionStart, selectionEnd, selectionDirection, and value DOM interface HTMLInputElement\nMethods select(), setRangeText(), setSelectionRange() Implicit ARIA Role with no list attribute: textbox with list attribute: combobox ::: Specifications # ::: _table # Specification # HTML Standard\n[# telephone-state-(type=tel)]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android tel 3 12 Yes 10 11 4 ≤37 18 Yes 11 3 1.0\nThe field The field type doesn\\'t type doesn\\'t demonstrate demonstrate any special any special behavior. behavior. :::\nSee also # ::: section-content\nHTML forms guide \u0026lt;input\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;email\u0026quot;\u0026gt; Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/tel{._attribution-link} :::\n"},{"id":129,"href":"/docs/references/languages/html/element/input/text/","title":"Text","section":"HTML","content":" \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type text create basic single-line text fields. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Name (4 to 8 characters):\n\u0026lt;input type=\u0026quot;text\u0026quot; id=\u0026quot;name\u0026quot; name=\u0026quot;name\u0026quot; required minlength=\u0026quot;4\u0026quot; maxlength=\u0026quot;8\u0026quot; size=\u0026quot;10\u0026quot; /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput, label { margin: 0.4rem 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nValue # ::: section-content The value attribute is a string that contains the current value of the text entered into the text field. You can retrieve this using the HTMLInputElement value property in JavaScript.\n::: code-example [js]{.language-name}\nlet theText = myTextInput.value; :::\nIf no validation constraints are in place for the input (see Validation for more details), the value may be an empty string (\u0026quot;\u0026quot;). :::\nAdditional attributes # ::: section-content In addition to the attributes that operate on all \u0026lt;input\u0026gt; elements regardless of their type, text inputs support the following attributes. :::\nlist # ::: section-content The values of the list attribute is the id of a \u0026lt;datalist\u0026gt; element located in the same document. The \u0026lt;datalist\u0026gt; provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the type are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value. :::\nmaxlength # ::: section-content The maximum string length (measured in UTF-16 code units) that the user can enter into the text input. This must be an integer value of 0 or higher. If no maxlength is specified, or an invalid value is specified, the text input has no maximum length. This value must also be greater than or equal to the value of minlength.\nThe input will fail constraint validation if the length of the text value of the field is greater than maxlength UTF-16 code units long. Constraint validation is only applied when the value is changed by the user. :::\nminlength # ::: section-content The minimum string length (measured in UTF-16 code units) that the user can enter into the text input. This must be a non-negative integer value smaller than or equal to the value specified by maxlength. If no minlength is specified, or an invalid value is specified, the text input has no minimum length.\nThe input will fail constraint validation if the length of the text entered into the field is fewer than minlength UTF-16 code units long. Constraint validation is only applied when the value is changed by the user. :::\npattern # ::: section-content The pattern attribute, when specified, is a regular expression that the input's value must match for the value to pass constraint validation. It must be a valid JavaScript regular expression, as used by the RegExp type, and as documented in our guide on regular expressions; the 'u' flag is specified when compiling the regular expression so that the pattern is treated as a sequence of Unicode code points, instead of as ASCII. No forward slashes should be specified around the pattern text.\nIf the specified pattern is not specified or is invalid, no regular expression is applied and this attribute is ignored completely.\n::: {#sect1 .notecard .note} Note: Use the title attribute to specify text that most browsers will display as a tooltip to explain what the requirements are to match the pattern. You should also include other explanatory text nearby. :::\nSee Specifying a pattern for further details and an example. :::\nplaceholder # ::: section-content The placeholder attribute is a string that provides a brief hint to the user as to what kind of information is expected in the field. It should be a word or short phrase that demonstrates the expected type of data, rather than an explanatory message. The text must not include carriage returns or line feeds.\nIf the control's content has one directionality ( LTR or RTL) but needs to present the placeholder in the opposite directionality, you can use Unicode bidirectional algorithm formatting characters to override directionality within the placeholder; see How to use Unicode controls for bidi text{target=\u0026quot;_blank\u0026quot;} for more information.\n::: {#sect2 .notecard .note} Note: Avoid using the placeholder attribute if you can. It is not as semantically useful as other ways to explain your form, and can cause unexpected technical issues with your content. See \u0026lt;input\u0026gt; accessibility concerns for more information. ::: :::\nreadonly # ::: section-content A Boolean attribute which, if present, means this field cannot be edited by the user. Its value can, however, still be changed by JavaScript code directly setting the HTMLInputElement value property.\n::: {#sect3 .notecard .note} Note: Because a read-only field cannot have a value, required does not have any effect on inputs with the readonly attribute also specified. ::: :::\nsize # ::: section-content The size attribute is a numeric value indicating how many characters wide the input field should be. The value must be a number greater than zero, and the default value is 20. Since character widths vary, this may or may not be exact and should not be relied upon to be so; the resulting input may be narrower or wider than the specified number of characters, depending on the characters and the font ( font settings in use).\nThis does not set a limit on how many characters the user can enter into the field. It only specifies approximately how many can be seen at a time. To set an upper limit on the length of the input data, use the maxlength attribute. :::\nspellcheck # ::: section-content spellcheck is a global attribute which is used to indicate whether to enable spell checking for an element. It can be used on any editable content, but here we consider specifics related to the use of spellcheck on \u0026lt;input\u0026gt; elements. The permitted values for spellcheck are:\nfalse Disable spell checking for this element.\ntrue Enable spell checking for this element.\n\u0026quot;\u0026quot; (empty string) or no value Follow the element's default behavior for spell checking. This may be based upon a parent's spellcheck setting or other factors.\nAn input field can have spell checking enabled if it doesn't have the readonly attribute set and is not disabled.\nThe value returned by reading spellcheck may not reflect the actual state of spell checking within a control, if the user agent's preferences override the setting. :::\nNon-standard attributes # ::: section-content The following non-standard attributes are also available on some browsers. As a general rule, you should avoid using them unless it can't be helped. :::\nautocorrect # ::: section-content A Safari extension, the autocorrect attribute is a string which indicates whether to activate automatic correction while the user is editing this field. Permitted values are:\non Enable automatic correction of typos, as well as processing of text substitutions if any are configured.\noff Disable automatic correction and text substitutions. :::\nmozactionhint [Deprecated]{.visually-hidden} # ::: section-content A Mozilla extension, which provides a hint as to what sort of action will be taken if the user presses the [Enter]{.kbd} or [Return]{.kbd} key while editing the field.\nDeprecated: Use enterkeyhint instead. :::\nUsing text inputs # ::: section-content \u0026lt;input\u0026gt; elements of type text create basic, single-line inputs. You should use them anywhere you want the user to enter a single-line value and there isn't a more specific input type available for collecting that value (for example, if it's a date, URL, email, or search term, you've got better options available). :::\nBasic example # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;uname\u0026#34;\u0026gt;Choose a username: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;uname\u0026#34; name=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nThis renders like so:\n::: {#sect5 .code-example} ::: iframe ::: :::\nWhen submitted, the data name/value pair sent to the server will be name=Chris (if \u0026quot;Chris\u0026quot; was entered as the input value before submission). You must remember to include name attribute on the \u0026lt;input\u0026gt; element, otherwise the text field's value won't be included with the submitted data. :::\nSetting placeholders # ::: section-content You can provide a useful placeholder inside your text input that can provide a hint as to what to enter by including using the placeholder attribute. Look at the following example:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;uname\u0026#34;\u0026gt;Choose a username: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;uname\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;Lower case, all one word\u0026#34; /\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nYou can see how the placeholder is rendered below:\n::: {#sect6 .code-example} ::: iframe ::: :::\nThe placeholder is typically rendered in a lighter color than the element's foreground color, and automatically vanishes when the user begins to enter text into the field (or whenever the field has a value set programmatically by setting its value attribute). :::\nPhysical input element size # ::: section-content The physical size of the input box can be controlled using the size attribute. With it, you can specify the number of characters the text input can display at a time. This affects the width of the element, letting you specify the width in terms of characters rather than pixels. In this example, for instance, the input is 30 characters wide:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;uname\u0026#34;\u0026gt;Choose a username: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;uname\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;Lower case, all one word\u0026#34; size=\u0026#34;30\u0026#34; /\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect7 .code-example} ::: iframe ::: ::: :::\nValidation # ::: section-content \u0026lt;input\u0026gt; elements of type text have no automatic validation applied to them (since a basic text input needs to be capable of accepting any arbitrary string), but there are some client-side validation options available, which we'll discuss below.\n::: {#sect8 .notecard .note} Note: HTML form validation is not a substitute for server-scripts that ensure the entered data is in the proper format. It's far too easy for someone to make adjustments to the HTML that allow them to bypass the validation, or to remove it entirely. It's also possible for someone to bypass your HTML entirely and submit the data directly to your server. If your server-side code fails to validate the data it receives, disaster could strike when improperly-formatted data (or data which is too large, is of the wrong type, and so forth) is entered into your database. ::: :::\nA note on styling # ::: section-content There are useful pseudo-classes available for styling form elements to help the user see when their values are valid or invalid. These are :valid and :invalid. In this section, we'll use the following CSS, which will place a check (tick) mark next to inputs containing valid values, and a cross (X) next to inputs containing invalid values.\n::: code-example [css]{.language-name}\ndiv { margin-bottom: 10px; position: relative; } input + span { padding-right: 30px; } input:invalid + span::after { position: absolute; content: \u0026#34;✖\u0026#34;; padding-left: 5px; } input:valid + span::after { position: absolute; content: \u0026#34;✓\u0026#34;; padding-left: 5px; } :::\nThe technique also requires a \u0026lt;span\u0026gt; element to be placed after the form element, which acts as a holder for the icons. This was necessary because some input types on some browsers don't display icons placed directly after them very well. :::\nMaking input required # ::: section-content You can use the required attribute as an easy way of making entering a value required before form submission is allowed:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;uname\u0026#34;\u0026gt;Choose a username: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;uname\u0026#34; name=\u0026#34;name\u0026#34; required /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nThis renders like so:\n::: {#sect9 .code-example} ::: iframe ::: :::\nIf you try to submit the form with no search term entered into it, the browser will show an error message. :::\nInput value length # ::: section-content You can specify a minimum length (in characters) for the entered value using the minlength attribute; similarly, use maxlength to set the maximum length of the entered value, in characters.\nThe example below requires that the entered value be 4\u0026ndash;8 characters in length.\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;uname\u0026#34;\u0026gt;Choose a username: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;uname\u0026#34; name=\u0026#34;name\u0026#34; required size=\u0026#34;10\u0026#34; placeholder=\u0026#34;Username\u0026#34; minlength=\u0026#34;4\u0026#34; maxlength=\u0026#34;8\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nThis renders like so:\n::: {#sect10 .code-example} ::: iframe ::: :::\nIf you try to submit the form with less than 4 characters, you'll be given an appropriate error message (which differs between browsers). If you try to enter more than 8 characters, the browser won't let you.\n::: {#sect11 .notecard .note} Note: If you specify a minlength but do not specify required, the input is considered valid, since the user is not required to specify a value. ::: :::\nSpecifying a pattern # ::: section-content You can use the pattern attribute to specify a regular expression that the inputted value must match in order to be considered valid (see Validating against a regular expression for a simple crash course on using regular expressions to validate inputs).\nThe example below restricts the value to 4-8 characters and requires that it contain only lower-case letters.\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;uname\u0026#34;\u0026gt;Choose a username: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;uname\u0026#34; name=\u0026#34;name\u0026#34; required size=\u0026#34;45\u0026#34; pattern=\u0026#34;[a-z]{4,8}\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;p\u0026gt;Usernames must be lowercase and 4-8 characters in length.\u0026lt;/p\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\nThis renders like so:\n::: {#sect12 .code-example} ::: iframe ::: ::: :::\nExamples # ::: section-content You can see good examples of text inputs used in context in our Your first HTML form and How to structure an HTML form articles. :::\nTechnical summary # ::: section-content\nValue A string representing the text contained in the text field. Events change and input Supported Common Attributes autocomplete, list, maxlength, minlength, pattern, placeholder, readonly, required and size IDL attributes list, value DOM interface HTMLInputElement\nMethods select(), setRangeText() and setSelectionRange(). Implicit ARIA Role with no list attribute: textbox with list attribute: combobox ::: Specifications # ::: _table # Specification # HTML Standard\n[# text-(type=text)-state-and-search-state-(type=search)]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet text 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 :::\nSee also # ::: section-content\nHTML Forms \u0026lt;input\u0026gt; and the HTMLInputElement interface it's based upon. \u0026lt;input type=\u0026quot;search\u0026quot;\u0026gt; \u0026lt;textarea\u0026gt;: Multi-line text input Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text{._attribution-link} :::\n"},{"id":130,"href":"/docs/references/languages/html/element/input/time/","title":"Time","section":"HTML","content":" \u0026lt;input type=\u0026quot;time\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type time create input fields designed to let the user easily enter a time (hours and minutes, and optionally seconds).\nThe control's user interface varies from browser to browser; see Browser compatibility for further details. In unsupported browsers, the control degrades gracefully to \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt;. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;time\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Choose a time for your meeting:\n\u0026lt;input type=\u0026quot;time\u0026quot; id=\u0026quot;appt\u0026quot; name=\u0026quot;appt\u0026quot; min=\u0026quot;09:00\u0026quot; max=\u0026quot;18:00\u0026quot; required /\u0026gt; \u0026lt;small\u0026gt;Office hours are 9am to 6pm\u0026lt;/small\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput, label { margin: 0.4rem 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAppearance # Chrome and Opera # ::: section-content In Chrome/Opera the time control is simple, with slots to enter hours and minutes in 12 or 24-hour format depending on operating system locale, and up and down arrows to increment and decrement the currently selected component. In some versions, an \u0026quot;X\u0026quot; button is provided to clear the control's value.\n![12-hour Chrome time input] height=\u0026ldquo;62\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;} 12-hour\n![24-hour Chrome time input] height=\u0026ldquo;31\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;} 24-hour :::\nFirefox # ::: section-content Firefox's time control is very similar to Chrome's, except that it doesn't have the up and down arrows. It also uses a 12- or 24-hour format for inputting times, based on system locale. An \u0026quot;X\u0026quot; button is provided to clear the control's value.\n![12-hour Firefox time input] height=\u0026ldquo;29\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;} 12-hour\n![24-hour Firefox time input] height=\u0026ldquo;29\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;} 24-hour :::\nEdge # ::: section-content The Edge time control is somewhat more elaborate, opening up an hour and minute picker with sliding reels. It, like Chrome, uses a 12- or 24-hour format for inputting times, based on system locale:\n![12-hour Edge time input] height=\u0026ldquo;482\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;} 12-hour\n![24-hour Edge time input] height=\u0026ldquo;491\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;} 24-hour :::\nValue # ::: section-content A string containing the value of the time entered into the input. :::\nSetting the value attribute # ::: section-content You can set a default value for the input by including a valid time in the value attribute when creating the \u0026lt;input\u0026gt; element, like so:\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;appt-time\u0026#34;\u0026gt;Choose an appointment time: \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;appt-time\u0026#34; type=\u0026#34;time\u0026#34; name=\u0026#34;appt-time\u0026#34; value=\u0026#34;13:30\u0026#34; /\u0026gt; :::\n::: {#sect1 .code-example} ::: iframe ::: ::: :::\nSetting the value using JavaScript # ::: section-content You can also get and set the time value in JavaScript using the HTMLInputElement value property, for example:\n::: code-example [js]{.language-name}\nconst timeControl = document.querySelector(\u0026#39;input[type=\u0026#34;time\u0026#34;]\u0026#39;); timeControl.value = \u0026#34;15:30\u0026#34;; ::: :::\nTime value format # ::: section-content The value of the time input is always in 24-hour format that includes leading zeros: hh:mm, regardless of the input format, which is likely to be selected based on the user's locale (or by the user agent). If the time includes seconds (see Using the step attribute), the format is always hh:mm:ss. You can learn more about the format of the time value used by this input type in Time strings.\nIn this example, you can see the time input's value by entering a time and seeing how it changes afterward.\nFirst, a look at the HTML. This is simple enough, with the label and input as we've seen before, but with the addition of a \u0026lt;p\u0026gt; element with a \u0026lt;span\u0026gt; to display the value of the time input:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;startTime\u0026#34;\u0026gt;Start time: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;time\u0026#34; id=\u0026#34;startTime\u0026#34; /\u0026gt; \u0026lt;p\u0026gt; Value of the \u0026lt;code\u0026gt;time\u0026lt;/code\u0026gt; input: \u0026lt;code\u0026gt; \u0026#34;\u0026lt;span id=\u0026#34;value\u0026#34;\u0026gt;n/a\u0026lt;/span\u0026gt;\u0026#34;\u0026lt;/code\u0026gt;. \u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt; :::\nThe JavaScript code adds code to the time input to watch for the input event, which is triggered every time the contents of an input element change. When this happens, the contents of the \u0026lt;span\u0026gt; are replaced with the new value of the input element.\n::: code-example [js]{.language-name}\nconst startTime = document.getElementById(\u0026#34;startTime\u0026#34;); const valueSpan = document.getElementById(\u0026#34;value\u0026#34;); startTime.addEventListener( \u0026#34;input\u0026#34;, () =\u0026gt; { valueSpan.innerText = startTime.value; }, false, ); :::\n::: {#sect2 .code-example} ::: iframe ::: :::\nWhen a form including a time input is submitted, the value is encoded before being included in the form's data. The form's data entry for a time input will always be in the form name=hh%3Amm, or name=hh%3Amm%3Ass if seconds are included (see Using the step attribute). :::\nAdditional attributes # ::: section-content In addition to the attributes common to all \u0026lt;input\u0026gt; elements, time inputs offer the following attributes.\n::: {#sect3 .notecard .note} Note: Unlike many data types, time values have a periodic domain, meaning that the values reach the highest possible value, then wrap back around to the beginning again. For example, specifying a min of 14:00 and a max of 2:00 means that the permitted time values start at 2:00 PM, run through midnight to the next day, ending at 2:00 AM. See more in the making min and max cross midnight section of this article. ::: :::\nlist # ::: section-content The values of the list attribute is the id of a \u0026lt;datalist\u0026gt; element located in the same document. The \u0026lt;datalist\u0026gt; provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the type are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value. :::\nmax # ::: section-content A string indicating the latest time to accept, specified in the same time value format as described above. If the specified string isn't a valid time, no maximum value is set. :::\nmin # ::: section-content A string specifying the earliest time to accept, given in the time value format described previously. If the value specified isn't a valid time string, no minimum value is set. :::\nreadonly # ::: section-content A Boolean attribute which, if present, means this field cannot be edited by the user. Its value can, however, still be changed by JavaScript code directly setting the HTMLInputElement value property.\n::: {#sect4 .notecard .note} Note: Because a read-only field cannot have a value, required does not have any effect on inputs with the readonly attribute also specified. ::: :::\nstep # ::: section-content The step attribute is a number that specifies the granularity that the value must adhere to, or the special value any, which is described below. Only values which are equal to the basis for stepping ( min if specified, value otherwise, and an appropriate default value if neither of those is provided) are valid.\nA string value of any means that no stepping is implied, and any value is allowed (barring other constraints, such as min and max).\n::: {#sect5 .notecard .note} Note: When the data entered by the user doesn't adhere to the stepping configuration, the user agent may round to the nearest valid value, preferring numbers in the positive direction when there are two equally close options. :::\nFor time inputs, the value of step is given in seconds, with a scaling factor of 1000 (since the underlying numeric value is in milliseconds). The default value of step is 60, indicating 60 seconds (or 1 minute, or 60,000 milliseconds).\nAt this time, it's unclear what a value of any means for step when used with time inputs. This will be updated as soon as that information is determined. :::\nUsing time inputs # Basic uses of time # ::: section-content The simplest use of \u0026lt;input type=\u0026quot;time\u0026quot;\u0026gt; involves a basic \u0026lt;input\u0026gt; and \u0026lt;label\u0026gt; element combination, as seen below:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;appt-time\u0026#34;\u0026gt;Choose an appointment time: \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;appt-time\u0026#34; type=\u0026#34;time\u0026#34; name=\u0026#34;appt-time\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect6 .code-example} ::: iframe ::: ::: :::\nControlling input size # ::: section-content \u0026lt;input type=\u0026quot;time\u0026quot;\u0026gt; doesn't support form sizing attributes such as size, since times are always about the same number of characters long. You'll have to resort to CSS for sizing needs. :::\nUsing the step attribute # ::: section-content You can use the step attribute to vary the amount of time jumped whenever the time is incremented or decremented (for example, so the time moves by 10 minutes at a time when clicking the little arrow widgets).\n::: {#sect7 .notecard .note} Note: This property has some strange effects across browsers, so is not completely reliable. :::\nIt takes an integer value that equates to the number of seconds you want to increment by; the default value is 60 seconds, or one minute. If you specify a value of less than 60 seconds (1 minute), the time input will show a seconds input area alongside the hours and minutes:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;appt-time\u0026#34;\u0026gt;Choose an appointment time: \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;appt-time\u0026#34; type=\u0026#34;time\u0026#34; name=\u0026#34;appt-time\u0026#34; step=\u0026#34;2\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect8 .code-example} ::: iframe ::: :::\nIn Chrome and Opera, which are the only browsers to show up/down iteration arrows, clicking the arrows changes the seconds value by two seconds, but doesn't affect the hours or minutes. Minutes (or hours) can only be used for stepping when you specify a number of minutes (or hours) in seconds, such as 120 for 2 minutes, or 7200 for 2 hours).\nIn Firefox, there are no arrows, so the step value isn't used. However, providing it does add the seconds input area adjacent to the minutes section.\nThe steps value seems to have no effect in Edge.\n::: {#sect9 .notecard .note} Note: Using step seems to cause validation to not work properly (as seen in the next section). ::: :::\nValidation # ::: section-content By default, \u0026lt;input type=\u0026quot;time\u0026quot;\u0026gt; does not apply any validation to entered values, other than the user agent's interface generally not allowing you to enter anything other than a time value. This is helpful (assuming the time input is fully supported by the user agent), but you can't entirely rely on the value to be a proper time string, since it might be an empty string (\u0026quot;\u0026quot;), which is allowed. It's also possible for the value to look roughly like a valid time but not be correct, such as 25:05. :::\nSetting maximum and minimum times # ::: section-content You can use the min and max attributes to restrict the valid times that can be chosen by the user. In the following example we are setting a minimum time of 12:00 and a maximum time of 18:00:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;appt-time\u0026#34;\u0026gt; Choose an appointment time (opening hours 12:00 to 18:00): \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;appt-time\u0026#34; type=\u0026#34;time\u0026#34; name=\u0026#34;appt-time\u0026#34; min=\u0026#34;12:00\u0026#34; max=\u0026#34;18:00\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect10 .code-example} ::: iframe ::: :::\nHere's the CSS used in the above example. Here we make use of the :valid and :invalid CSS properties to style the input based on whether the current value is valid. We had to put the icons on a \u0026lt;span\u0026gt; next to the input, not on the input itself, because in Chrome the generated content is placed inside the form control, and can't be styled or shown effectively.\n::: code-example [css]{.language-name}\ndiv { margin-bottom: 10px; position: relative; } input[type=\u0026#34;number\u0026#34;] { width: 100px; } input + span { padding-right: 30px; } input:invalid + span::after { position: absolute; content: \u0026#34;✖\u0026#34;; padding-left: 5px; } input:valid + span::after { position: absolute; content: \u0026#34;✓\u0026#34;; padding-left: 5px; } :::\nThe result here is that:\nOnly times between 12:00 and 18:00 will be seen as valid; times outside that range will be denoted as invalid. Depending on what browser you're using, you might find that times outside the specified range might not even be selectable in the time picker (e.g. Edge). Making min and max cross midnight # By setting a min attribute greater than the max attribute, the valid time range will wrap around midnight to produce a valid time range which crosses midnight. This functionality is not supported by any other input types. While this feature is in the HTML spec{target=\u0026quot;_blank\u0026quot;}, it is not yet universally supported. Chrome-based browsers support it starting in version 82 and Firefox added it in version 76. Safari as of version 14.1 does not support this. Be prepared for this situation to arise:\n::: code-example [js]{.language-name}\nconst input = document.createElement(\u0026#34;input\u0026#34;); input.type = \u0026#34;time\u0026#34;; input.min = \u0026#34;23:00\u0026#34;; input.max = \u0026#34;01:00\u0026#34;; input.value = \u0026#34;23:59\u0026#34;; if (input.validity.valid \u0026amp;\u0026amp; input.type === \u0026#34;time\u0026#34;) { // \u0026lt;input type=time\u0026gt; reversed range supported } else { // \u0026lt;input type=time\u0026gt; reversed range unsupported } ::: :::\nMaking times required # ::: section-content In addition, you can use the required attribute to make filling in the time mandatory. As a result, supporting browsers will display an error if you try to submit a time that is outside the set bounds, or an empty time field.\nLet's look at an example; here we've set minimum and maximum times, and also made the field required:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;appt-time\u0026#34;\u0026gt; Choose an appointment time (opening hours 12:00 to 18:00): \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;appt-time\u0026#34; type=\u0026#34;time\u0026#34; name=\u0026#34;appt-time\u0026#34; min=\u0026#34;12:00\u0026#34; max=\u0026#34;18:00\u0026#34; required /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit form\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\nIf you try to submit the form with an incomplete time (or with a time outside the set bounds), the browser displays an error. Try playing with the example now:\n::: {#sect11 .code-example} ::: iframe ::: :::\n::: {#sect12 .notecard .warning} Warning: HTML form validation is not a substitute for scripts that ensure that the entered data is in the proper format. It's far too easy for someone to make adjustments to the HTML that allow them to bypass the validation, or to remove it entirely. It's also possible for someone to bypass your HTML entirely and submit the data directly to your server. If your server-side code fails to validate the data it receives, disaster could strike when improperly-formatted data is submitted (or data which is too large, of the wrong type, and so forth). ::: :::\nHandling browser support # ::: section-content As mentioned, older versions of Safari and a few other, less common, browsers don't support time inputs natively. In general, otherwise, support is good \u0026mdash; especially on mobile platforms, which tend to have very nice user interfaces for specifying a time value. For example, the time picker on Chrome for Android looks like this:\n![Phone screen showing modal dialog with 10:21 as a header. The 10 is fully opaque. The 21 is not. The main area has a circle with the numbers 1 - 12 in a ring, and the number 13 -24 on an inner ring. The number 10 is highlighted with a blue circle. The buttons at the bottom are clear, cancel, and set.] height=\u0026ldquo;640\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;}\nBrowsers that don't support time inputs gracefully degrade to a text input, but this creates problems both in terms of consistency of user interface (the presented control will be different), and data handling.\nThe second problem is the more serious; as mentioned previously, time inputs' values are always normalized to the format hh:mm or hh:mm:ss. With a text input, on the other hand, by default the browser has no idea of what format the time should be in, and there are multiple ways in which people write times, such as:\n3.00 pm 3:00pm 15:00 3 o'clock in the afternoon etc. One way around this is to put a pattern attribute on your time input. Even though the time input doesn't use it, the text input fallback will. For example, try viewing the following demo in a browser that doesn't support time inputs:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;appt-time\u0026#34;\u0026gt; Choose an appointment time (opening hours 12:00 to 18:00): \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;appt-time\u0026#34; type=\u0026#34;time\u0026#34; name=\u0026#34;appt-time\u0026#34; min=\u0026#34;12:00\u0026#34; max=\u0026#34;18:00\u0026#34; required pattern=\u0026#34;[0-9]{2}:[0-9]{2}\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit form\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect13 .code-example} ::: iframe ::: :::\nIf you try submitting it, you'll see that non-supporting browsers now display an error message (and highlight the input as invalid) if your entry doesn't match the pattern nn:nn, where n is a number from 0 to 9. Of course, this doesn't stop people from entering invalid times, or incorrectly formatted times that follow the pattern.\nThen there's the problem of the user having no idea exactly what format the time is expected to be in.\nThe best way to deal with times in forms in a cross-browser way, for the time being, is to get the user to enter the hours and minutes (and seconds if required) in separate controls ( \u0026lt;select\u0026gt; elements are popular; see below for an example), or use JavaScript libraries such as the jQuery timepicker plugin{target=\u0026quot;_blank\u0026quot;}. :::\nExamples # ::: section-content In this example, we create two sets of interface elements for choosing times: a native picker created with \u0026lt;input type=\u0026quot;time\u0026quot;\u0026gt;, and a set of two \u0026lt;select\u0026gt; elements for choosing hours/minutes in older browsers that don't support the native input.\n::: {#sect14 .code-example} ::: iframe ::: :::\nThe HTML looks like so:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;div class=\u0026#34;nativeTimePicker\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;appt-time\u0026#34;\u0026gt; Choose an appointment time (opening hours 12:00 to 18:00): \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;appt-time\u0026#34; type=\u0026#34;time\u0026#34; name=\u0026#34;appt-time\u0026#34; min=\u0026#34;12:00\u0026#34; max=\u0026#34;18:00\u0026#34; required /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;p class=\u0026#34;fallbackLabel\u0026#34;\u0026gt; Choose an appointment time (opening hours 12:00 to 18:00): \u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;fallbackTimePicker\u0026#34;\u0026gt; \u0026lt;span\u0026gt; \u0026lt;label for=\u0026#34;hour\u0026#34;\u0026gt;Hour:\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;hour\u0026#34; name=\u0026#34;hour\u0026#34;\u0026gt;\u0026lt;/select\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; \u0026lt;label for=\u0026#34;minute\u0026#34;\u0026gt;Minute:\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;minute\u0026#34; name=\u0026#34;minute\u0026#34;\u0026gt;\u0026lt;/select\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/form\u0026gt; :::\nThe hour and minutes values for their \u0026lt;select\u0026gt; elements are dynamically generated.\nThe other part of the code that may be of interest is the feature detection code \u0026mdash; to detect whether the browser supports \u0026lt;input type=\u0026quot;time\u0026quot;\u0026gt;, we create a new \u0026lt;input\u0026gt; element, try setting its type to time, then immediately check what its type is set to \u0026mdash; non-supporting browsers will return text, because the time type falls back to type text. If \u0026lt;input type=\u0026quot;time\u0026quot;\u0026gt; is not supported, we hide the native picker and show the fallback picker UI ( \u0026lt;select\u0026gt;s) instead.\n::: code-example [js]{.language-name}\n// Define variables const nativePicker = document.querySelector(\u0026#34;.nativeTimePicker\u0026#34;); const fallbackPicker = document.querySelector(\u0026#34;.fallbackTimePicker\u0026#34;); const fallbackLabel = document.querySelector(\u0026#34;.fallbackLabel\u0026#34;); const hourSelect = document.querySelector(\u0026#34;#hour\u0026#34;); const minuteSelect = document.querySelector(\u0026#34;#minute\u0026#34;); // Hide fallback initially fallbackPicker.style.display = \u0026#34;none\u0026#34;; fallbackLabel.style.display = \u0026#34;none\u0026#34;; // Test whether a new time input falls back to a text input or not const test = document.createElement(\u0026#34;input\u0026#34;); try { test.type = \u0026#34;time\u0026#34;; } catch (e) { console.log(e.description); } // If it does, run the code inside the if () {} block if (test.type === \u0026#34;text\u0026#34;) { // Hide the native picker and show the fallback nativePicker.style.display = \u0026#34;none\u0026#34;; fallbackPicker.style.display = \u0026#34;block\u0026#34;; fallbackLabel.style.display = \u0026#34;block\u0026#34;; // Populate the hours and minutes dynamically populateHours(); populateMinutes(); } function populateHours() { // Populate the hours \u0026lt;select\u0026gt; with the 6 open hours of the day for (let i = 12; i \u0026lt;= 18; i++) { const option = document.createElement(\u0026#34;option\u0026#34;); option.textContent = i; hourSelect.appendChild(option); } } function populateMinutes() { // populate the minutes \u0026lt;select\u0026gt; with the 60 hours of each minute for (let i = 0; i \u0026lt;= 59; i++) { const option = document.createElement(\u0026#34;option\u0026#34;); option.textContent = i \u0026lt; 10 ? `0${i}` : i; minuteSelect.appendChild(option); } } // make it so that if the hour is 18, the minutes value is set to 00 // — you can\u0026#39;t select times past 18:00 function setMinutesToZero() { if (hourSelect.value === \u0026#34;18\u0026#34;) { minuteSelect.value = \u0026#34;00\u0026#34;; } } hourSelect.onchange = setMinutesToZero; minuteSelect.onchange = setMinutesToZero; ::: :::\nTechnical Summary # ::: section-content\nValue A string representing a time, or empty. Events change and input Supported common attributes autocomplete, list, readonly, and step IDL attributes value, valueAsDate, valueAsNumber, and list. DOM interface HTMLInputElement\nMethods select(), stepDown(), and stepUp(). Implicit ARIA Role no corresponding role ::: Specifications # ::: _table # Specification # HTML Standard\n[# time-state-(type=time)]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet time 20 12 57 No 10 14.1 4.4 25 57 10.1 5 1.5 :::\nSee also # ::: section-content\nThe generic \u0026lt;input\u0026gt; element and the interface used to manipulate it, HTMLInputElement Date and time formats used in HTML Date and Time picker tutorial \u0026lt;input type=\u0026quot;datetime-local\u0026quot;\u0026gt;, \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt;, \u0026lt;input type=\u0026quot;week\u0026quot;\u0026gt;, and \u0026lt;input type=\u0026quot;month\u0026quot;\u0026gt; Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time{._attribution-link} :::\n"},{"id":131,"href":"/docs/references/languages/html/element/input/url/","title":"URL","section":"HTML","content":" \u0026lt;input type=\u0026quot;url\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type url are used to let the user enter and edit a URL. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;url\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Enter an https:// URL: ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput, label { margin: 0.4rem 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe input value is automatically validated to ensure that it's either empty or a properly-formatted URL before the form can be submitted. The :valid and :invalid CSS pseudo-classes are automatically applied as appropriate to visually denote whether the current value of the field is a valid URL or not.\nOn browsers that don't support inputs of type url, a url input falls back to being a standard text input. :::\nValue # ::: section-content The \u0026lt;input\u0026gt; element's value attribute contains a string which is automatically validated as conforming to URL syntax. More specifically, there are two possible value formats that will pass validation:\nAn empty string (\u0026quot;\u0026quot;) indicating that the user did not enter a value or that the value was removed. A single properly-formed absolute URL. This doesn't necessarily mean the URL address exists, but it is at least formatted correctly. In simple terms, this means urlscheme://restofurl. See Validation for details on how URLs are validated to ensure that they're formatted properly. :::\nAdditional attributes # ::: section-content In addition to the attributes that operate on all \u0026lt;input\u0026gt; elements regardless of their type, url inputs support the following attributes. :::\nlist # ::: section-content The values of the list attribute is the id of a \u0026lt;datalist\u0026gt; element located in the same document. The \u0026lt;datalist\u0026gt; provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the type are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value. :::\nmaxlength # ::: section-content The maximum string length (measured in UTF-16 code units) that the user can enter into the url input. This must be an integer value of 0 or higher. If no maxlength is specified, or an invalid value is specified, the url input has no maximum length. This value must also be greater than or equal to the value of minlength.\nThe input will fail constraint validation if the length of the text value of the field is greater than maxlength UTF-16 code units long. Constraint validation is only applied when the value is changed by the user. :::\nminlength # ::: section-content The minimum string length (measured in UTF-16 code units) that the user can enter into the url input. This must be a non-negative integer value smaller than or equal to the value specified by maxlength. If no minlength is specified, or an invalid value is specified, the url input has no minimum length.\nThe input will fail constraint validation if the length of the text entered into the field is fewer than minlength UTF-16 code units long. Constraint validation is only applied when the value is changed by the user. :::\npattern # ::: section-content The pattern attribute, when specified, is a regular expression that the input's value must match for the value to pass constraint validation. It must be a valid JavaScript regular expression, as used by the RegExp type, and as documented in our guide on regular expressions; the 'u' flag is specified when compiling the regular expression so that the pattern is treated as a sequence of Unicode code points, instead of as ASCII. No forward slashes should be specified around the pattern text.\nIf the specified pattern is not specified or is invalid, no regular expression is applied and this attribute is ignored completely.\n::: {#sect1 .notecard .note} Note: Use the title attribute to specify text that most browsers will display as a tooltip to explain what the requirements are to match the pattern. You should also include other explanatory text nearby. :::\nSee the section Pattern validation for details and an example. :::\nplaceholder # ::: section-content The placeholder attribute is a string that provides a brief hint to the user as to what kind of information is expected in the field. It should be a word or short phrase that demonstrates the expected type of data, rather than an explanatory message. The text must not include carriage returns or line feeds.\nIf the control's content has one directionality ( LTR or RTL) but needs to present the placeholder in the opposite directionality, you can use Unicode bidirectional algorithm formatting characters to override directionality within the placeholder; see How to use Unicode controls for bidi text{target=\u0026quot;_blank\u0026quot;} for more information.\n::: {#sect2 .notecard .note} Note: Avoid using the placeholder attribute if you can. It is not as semantically useful as other ways to explain your form, and can cause unexpected technical issues with your content. See \u0026lt;input\u0026gt; labels for more information. ::: :::\nreadonly # ::: section-content A Boolean attribute which, if present, means this field cannot be edited by the user. Its value can, however, still be changed by JavaScript code directly setting the HTMLInputElement value property.\n::: {#sect3 .notecard .note} Note: Because a read-only field cannot have a value, required does not have any effect on inputs with the readonly attribute also specified. ::: :::\nsize # ::: section-content The size attribute is a numeric value indicating how many characters wide the input field should be. The value must be a number greater than zero, and the default value is 20. Since character widths vary, this may or may not be exact and should not be relied upon to be so; the resulting input may be narrower or wider than the specified number of characters, depending on the characters and the font ( font settings in use).\nThis does not set a limit on how many characters the user can enter into the field. It only specifies approximately how many can be seen at a time. To set an upper limit on the length of the input data, use the maxlength attribute. :::\nspellcheck # ::: section-content spellcheck is a global attribute which is used to indicate whether to enable spell checking for an element. It can be used on any editable content, but here we consider specifics related to the use of spellcheck on \u0026lt;input\u0026gt; elements. The permitted values for spellcheck are:\nfalse Disable spell checking for this element.\ntrue Enable spell checking for this element.\n\u0026quot;\u0026quot; (empty string) or no value Follow the element's default behavior for spell checking. This may be based upon a parent's spellcheck setting or other factors.\nAn input field can have spell checking enabled if it doesn't have the readonly attribute set and is not disabled.\nThe value returned by reading spellcheck may not reflect the actual state of spell checking within a control, if the user agent's preferences override the setting. :::\nNon-standard attributes # ::: section-content The following non-standard attributes are also available on some browsers. As a general rule, you should avoid using them unless it can't be helped. :::\nautocorrect # ::: section-content A Safari extension, the autocorrect attribute is a string which indicates whether to activate automatic correction while the user is editing this field. Permitted values are:\non Enable automatic correction of typos, as well as processing of text substitutions if any are configured.\noff Disable automatic correction and text substitutions. :::\nmozactionhint [Deprecated]{.visually-hidden} # ::: section-content A Mozilla extension, which provides a hint as to what sort of action will be taken if the user presses the [Enter]{.kbd} or [Return]{.kbd} key while editing the field.\nDeprecated: Use enterkeyhint instead. :::\nUsing URL inputs # ::: section-content When you create a URL input with the proper type value, url, you get automatic validation that the entered text is at least in the correct form to potentially be a legitimate URL. This can help avoid cases in which the user mistypes their website's address, or provides an invalid one.\nIt's important, however, to note that this is not enough to ensure that the specified text is a URL which actually exists, corresponds to the user of the site, or is acceptable in any other way. It ensures that the value of the field is properly formatted to be a URL.\n::: {#sect4 .notecard .note} Note: A user can tinker with your HTML behind the scenes, so your site must not use this validation for any security purposes. You must verify the URL on the server-side of any transaction in which the provided text may have any security implications of any kind. ::: :::\nA simple URL input # ::: section-content Currently, all browsers which implement this element implement it as a standard text input field with basic validation features. In its most basic form, a URL input can be implemented like this:\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;myURL\u0026#34; name=\u0026#34;myURL\u0026#34; type=\u0026#34;url\u0026#34; /\u0026gt; :::\n::: {#sect5 .code-example} ::: iframe ::: :::\nNotice that it's considered valid when empty and when a single validly-formatted URL address is entered, but is otherwise not considered valid. By adding the required attribute, only properly-formed URLs are allowed; the input is no longer considered valid when empty.\nThere is nothing magical going on here. Submitting this form would cause the following data to be sent to the server: myURL=http%3A%2F%2Fwww.example.com. Note how characters are escaped as necessary. :::\nPlaceholders # ::: section-content Sometimes it's helpful to offer an in-context hint as to what form the input data should take. This can be especially important if the page design doesn't offer descriptive labels for each \u0026lt;input\u0026gt;. This is where placeholders come in. A placeholder is a value that demonstrates the form the value should take by presenting an example of a valid value, which is displayed inside the edit box when the element's value is \u0026quot;\u0026quot;. Once data is entered into the box, the placeholder disappears; if the box is emptied, the placeholder reappears.\nHere, we have a url input with the placeholder http://www.example.com. Note how the placeholder disappears and reappears as you manipulate the contents of the edit field.\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;myURL\u0026#34; name=\u0026#34;myURL\u0026#34; type=\u0026#34;url\u0026#34; placeholder=\u0026#34;http://www.example.com\u0026#34; /\u0026gt; :::\n::: {#sect6 .code-example} ::: iframe ::: ::: :::\nControlling the input size # ::: section-content You can control not only the physical length of the input box, but also the minimum and maximum lengths allowed for the input text itself.\nPhysical input element size # The physical size of the input box can be controlled using the size attribute. With it, you can specify the number of characters the input box can display at a time. In this example, for instance, the url edit box is 30 characters wide:\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;myURL\u0026#34; name=\u0026#34;myURL\u0026#34; type=\u0026#34;url\u0026#34; size=\u0026#34;30\u0026#34; /\u0026gt; :::\n::: {#sect7 .code-example} ::: iframe ::: :::\nElement value length # The size is separate from the length limitation on the entered URL itself. You can specify a minimum length, in characters, for the entered URL using the minlength attribute; similarly, use maxlength to set the maximum length of the entered URL. If maxLength exceeds size, the input box's contents will scroll as needed to show the current selection or insertion point as the content is manipulated.\nThe example below creates a 30-character wide URL address entry box, requiring that the contents be no shorter than 10 characters and no longer than 80 characters.\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;myURL\u0026#34; name=\u0026#34;myURL\u0026#34; type=\u0026#34;url\u0026#34; size=\u0026#34;30\u0026#34; minlength=\u0026#34;10\u0026#34; maxlength=\u0026#34;80\u0026#34; /\u0026gt; :::\n::: {#sect8 .code-example} ::: iframe ::: :::\n::: {#sect9 .notecard .note} Note: These attributes also affect validation; a value shorter or longer than the specified minimum/maximum lengths will be classified as invalid; in addition most browsers will refuse to let the user enter a value longer than the specified maximum length. ::: :::\nProviding default options # ::: section-content\nProviding a single default using the value attribute # As always, you can provide a default value for a url input box by setting its value attribute:\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;myURL\u0026#34; name=\u0026#34;myURL\u0026#34; type=\u0026#34;url\u0026#34; value=\u0026#34;http://www.example.com\u0026#34; /\u0026gt; :::\n::: {#sect10 .code-example} ::: iframe ::: :::\nOffering suggested values # Taking it a step further, you can provide a list of default options from which the user can select by specifying the list attribute. This doesn't limit the user to those options, but does allow them to select commonly-used URLs more quickly. This also offers hints to autocomplete. The list attribute specifies the ID of a \u0026lt;datalist\u0026gt;, which in turn contains one \u0026lt;option\u0026gt; element per suggested value; each option's value is the corresponding suggested value for the URL entry box.\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;myURL\u0026#34; name=\u0026#34;myURL\u0026#34; type=\u0026#34;url\u0026#34; list=\u0026#34;defaultURLs\u0026#34; /\u0026gt; \u0026lt;datalist id=\u0026#34;defaultURLs\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;https://developer.mozilla.org/\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;http://www.google.com/\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;http://www.microsoft.com/\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;https://www.mozilla.org/\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;http://w3.org/\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\n::: {#sect11 .code-example} ::: iframe ::: :::\nWith the \u0026lt;datalist\u0026gt; element and its \u0026lt;option\u0026gt;s in place, the browser will offer the specified values as potential values for the URL; this is typically presented as a popup or drop-down menu containing the suggestions. While the specific user experience may vary from one browser to another, typically clicking in the edit box presents a drop-down of the suggested URLs. Then, as the user types, the list is adjusted to show only matching values. Each typed character narrows down the list until the user makes a selection or types a custom value.\nUsing labels for suggested values # You can opt to include the label attribute on one or all of your \u0026lt;option\u0026gt; elements to provide textual labels. Some browsers may display only the labels, while others may display both the label and the URL.\n::: code-example [html]{.language-name}\n\u0026lt;input id=\u0026#34;myURL\u0026#34; name=\u0026#34;myURL\u0026#34; type=\u0026#34;url\u0026#34; list=\u0026#34;defaultURLs\u0026#34; /\u0026gt; \u0026lt;datalist id=\u0026#34;defaultURLs\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;https://developer.mozilla.org/\u0026#34; label=\u0026#34;MDN Web Docs\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;http://www.google.com/\u0026#34; label=\u0026#34;Google\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;http://www.microsoft.com/\u0026#34; label=\u0026#34;Microsoft\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;https://www.mozilla.org/\u0026#34; label=\u0026#34;Mozilla\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;http://w3.org/\u0026#34; label=\u0026#34;W3C\u0026#34;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; :::\n::: {#sect12 .code-example} ::: iframe ::: ::: :::\nValidation # ::: section-content There are two levels of content validation available for url inputs. First, there's the standard level of validation offered to all \u0026lt;input\u0026gt;s, which automatically ensures that the contents meet the requirements to be a valid URL. But there's also the option to add additional filtering to ensure that your own specialized needs are met, if you have any.\n::: {#sect13 .notecard .warning} Warning: HTML form validation is not a substitute for scripts that ensure that the entered data is in the proper format. It's far too easy for someone to make adjustments to the HTML that allow them to bypass the validation, or to remove it entirely. It's also possible for someone to bypass your HTML entirely and submit the data directly to your server. If your server-side code fails to validate the data it receives, disaster could strike when improperly-formatted data (or data which is too large, is of the wrong type, and so forth) is entered into your database. ::: :::\nBasic validation # ::: section-content Browsers that support the url input type automatically provide validation to ensure that only text that matches the standard format for URLs is entered into the input box.\nThe syntax of a URL is fairly intricate. It's defined by WHATWG's URL Living Standard{target=\u0026quot;_blank\u0026quot;} and is described for newcomers in our article What is a URL? :::\nMaking a URL required # ::: section-content As mentioned earlier, to make a URL entry required before the form can be submitted (you can't leave the field blank), you just need to include the required attribute on the input.\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;input id=\u0026#34;myURL\u0026#34; name=\u0026#34;myURL\u0026#34; type=\u0026#34;url\u0026#34; required /\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect14 .code-example} ::: iframe ::: :::\nTry submitting the above form with no value entered to see what happens. :::\nPattern validation # ::: section-content If you need the entered URL to be restricted further than just \u0026quot;any string that looks like a URL,\u0026quot; you can use the pattern attribute to specify a regular expression the value must match for the value to be valid.\nFor example, let's say you're building a support page for employees of Myco, Inc. which will let them contact their IT department for help if one of their pages has a problem. In our simplified form, the user needs to enter the URL of the page that has a problem, and a message describing what is wrong. But we want the URL to only successfully validate if the entered URL is in a Myco domain.\nSince inputs of type url validate against both the standard URL validation and the specified pattern, you can implement this easily. Let's see how:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;myURL\u0026#34;\u0026gt;Enter the problem website address:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;myURL\u0026#34; name=\u0026#34;myURL\u0026#34; type=\u0026#34;url\u0026#34; required pattern=\u0026#34;.*\\.myco\\..*\u0026#34; title=\u0026#34;The URL must be in a Myco domain\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;label for=\u0026#34;myComment\u0026#34;\u0026gt;What is the problem?\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;myComment\u0026#34; name=\u0026#34;myComment\u0026#34; type=\u0026#34;text\u0026#34; required /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect15 .code-example} ::: iframe ::: :::\nFirst of all, the required attribute is specified, making it mandatory that a valid URL be provided.\nSecond, in the url input we set pattern to \u0026quot;.*\\.myco\\..*\u0026quot;. This simple regular expression requests a string that has any number of characters, followed by a dot, followed by \u0026quot;myco\u0026quot;, followed by a dot, followed by any number of characters. And because the browser runs both the standard URL filter and our custom pattern against the specified text, we wind up with a validation which says \u0026quot;make sure this is a valid URL, and also in a Myco domain.\u0026quot;\nThis isn't perfect, but it is good enough for this simple demo's requirements.\nIt's advisable to use the title attribute along with pattern. If you do, the title must describe the pattern; it should explain what format the data should take on, rather than any other information. That's because the title may be displayed or spoken as part of a validation error message. For example, the browser might present the message \u0026quot;The entered text doesn't match the required pattern.\u0026quot; followed by your specified title. If your title is something like \u0026quot;URL\u0026quot;, the result would be the message \u0026quot;The entered text doesn't match the required pattern. URL\u0026quot;, which is not a good user experience.\nThat's why, instead, we specify the string \u0026quot;The URL must be in a myco domain\u0026quot;. By doing that, the resulting full error message might be something like \u0026quot;The entered text doesn't match the required pattern. The URL should be in a myco domain.\u0026quot;\n::: {#sect16 .notecard .note} Note: If you run into trouble while writing your validation regular expressions and they're not working properly, check your browser's console; there may be helpful error messages there to aid you in solving the problem. ::: :::\nExamples # ::: section-content There's not much else to say about url type inputs; check the Pattern validation and Using URL inputs sections for numerous examples.\nYou can also find our pattern validation example on GitHub{target=\u0026quot;_blank\u0026quot;} (see it running live also{target=\u0026quot;_blank\u0026quot;}). :::\nTechnical summary # ::: section-content\nValue A string representing a URL, or empty Events change and input Supported Common Attributes autocomplete, list, maxlength, minlength, pattern, placeholder, readonly, required and size IDL attributes list, value, selectionEnd, selectionDirection DOM interface HTMLInputElement\nMethods select(), setRangeText() and setSelectionRange(). Implicit ARIA Role with no list attribute: textbox with list attribute: combobox ::: Specifications # ::: _table # Specification # HTML Standard\n[# url-state-(type=url)]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet url 1 12 1 10 11 1 4.4 18 4 14 1 1.0 :::\nSee also # ::: section-content\nHTML forms guide \u0026lt;input\u0026gt; \u0026lt;input type=\u0026quot;tel\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;email\u0026quot;\u0026gt; Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/url{._attribution-link} :::\n"},{"id":132,"href":"/docs/references/languages/html/element/input/week/","title":"Week","section":"HTML","content":" \u0026lt;input type=\u0026quot;week\u0026quot;\u0026gt; # ::: section-content \u0026lt;input\u0026gt; elements of type week create input fields allowing easy entry of a year plus the ISO 8601 week number{target=\u0026quot;_blank\u0026quot;} during that year (i.e., week 1 to 52 or 53{target=\u0026quot;_blank\u0026quot;}). :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;input type=\u0026quot;week\u0026quot;\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Choose a week in May or June:\n\u0026lt;input type=\u0026quot;week\u0026quot; name=\u0026quot;week\u0026quot; id=\u0026quot;camp-week\u0026quot; min=\u0026quot;2018-W18\u0026quot; max=\u0026quot;2018-W26\u0026quot; required /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\ninput, label { margin: 0.4rem 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # {.icon-clear} clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe control's user interface varies from browser to browser; cross-browser support is currently a bit limited, with only Chrome/Opera and Microsoft Edge supporting it at this time. In non-supporting browsers, the control degrades gracefully to function identically to \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt;.\n{width=\u0026ldquo;320\u0026rdquo; height=\u0026ldquo;235\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;} :::\nValue # ::: section-content A string representing the value of the week/year entered into the input. The format of the date and time value used by this input type is described in Week strings.\nYou can set a default value for the input by including a value inside the value attribute, like so:\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;week\u0026#34;\u0026gt;What week would you like to start?\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;week\u0026#34; type=\u0026#34;week\u0026#34; name=\u0026#34;week\u0026#34; value=\u0026#34;2017-W01\u0026#34; /\u0026gt; :::\n::: {#sect1 .code-example} ::: iframe ::: :::\nOne thing to note is that the displayed format may differ from the actual value, which is always formatted yyyy-Www. When the above value is submitted to the server, for example, browsers may display it as Week 01, 2017, but the submitted value will always look like week=2017-W01.\nYou can also get and set the value in JavaScript using the input element's [value]{.page-not-created} property, for example:\n::: code-example [js]{.language-name}\nconst weekControl = document.querySelector(\u0026#39;input[type=\u0026#34;week\u0026#34;]\u0026#39;); weekControl.value = \u0026#34;2017-W45\u0026#34;; ::: :::\nAdditional attributes # ::: section-content In addition to the attributes common to \u0026lt;input\u0026gt; elements, week inputs offer the following attributes. :::\nmax # ::: section-content The latest (time-wise) year and week number, in the string format discussed in the Value section above, to accept. If the value entered into the element exceeds this, the element fails constraint validation. If the value of the max attribute isn't a valid week string, then the element has no maximum value.\nThis value must be greater than or equal to the year and week specified by the min attribute. :::\nmin # ::: section-content The earliest year and week to accept. If the value of the element is less than this, the element fails constraint validation. If a value is specified for min that isn't a valid week string, the input has no minimum value.\nThis value must be less than or equal to the value of the max attribute. :::\nreadonly # ::: section-content A Boolean attribute which, if present, means this field cannot be edited by the user. Its value can, however, still be changed by JavaScript code directly setting the HTMLInputElement value property.\n::: {#sect2 .notecard .note} Note: Because a read-only field cannot have a value, required does not have any effect on inputs with the readonly attribute also specified. ::: :::\nstep # ::: section-content The step attribute is a number that specifies the granularity that the value must adhere to, or the special value any, which is described below. Only values which are equal to the basis for stepping ( min if specified, value otherwise, and an appropriate default value if neither of those is provided) are valid.\nA string value of any means that no stepping is implied, and any value is allowed (barring other constraints, such as min and max).\n::: {#sect3 .notecard .note} Note: When the data entered by the user doesn't adhere to the stepping configuration, the user agent may round to the nearest valid value, preferring numbers in the positive direction when there are two equally close options. :::\nFor week inputs, the value of step is given in weeks, with a scaling factor of 604,800,000 (since the underlying numeric value is in milliseconds). The default value of step is 1, indicating 1week. The default stepping base is -259,200,000, which is the beginning of the first week of 1970 (\u0026quot;1970-W01\u0026quot;).\nAt this time, it's unclear what a value of \u0026quot;any\u0026quot; means for step when used with week inputs. This will be updated as soon as that information is determined. :::\nUsing week inputs # ::: section-content Week inputs sound convenient at first glance, since they provide an easy UI for choosing weeks, and they normalize the data format sent to the server, regardless of the user's browser or locale. However, there are issues with \u0026lt;input type=\u0026quot;week\u0026quot;\u0026gt; because browser support is not guaranteed across all browsers.\nWe'll look at basic and more complex uses of \u0026lt;input type=\u0026quot;week\u0026quot;\u0026gt;, then offer advice on mitigating the browser support issue later on (see Handling browser support). :::\nBasic uses of week # ::: section-content The simplest use of \u0026lt;input type=\u0026quot;week\u0026quot;\u0026gt; involves a basic \u0026lt;input\u0026gt; and \u0026lt;label\u0026gt; element combination, as seen below:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;week\u0026#34;\u0026gt;What week would you like to start?\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;week\u0026#34; type=\u0026#34;week\u0026#34; name=\u0026#34;week\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect4 .code-example} ::: iframe ::: ::: :::\nControlling input size # ::: section-content \u0026lt;input type=\u0026quot;week\u0026quot;\u0026gt; doesn't support form sizing attributes such as size. You'll have to resort to CSS for sizing needs. :::\nUsing the step attribute # ::: section-content You should be able to use the step attribute to vary the number of weeks jumped whenever they are incremented or decremented, however it doesn't seem to have any effect on supporting browsers. :::\nValidation # ::: section-content By default, \u0026lt;input type=\u0026quot;week\u0026quot;\u0026gt; does not apply any validation to entered values. The UI implementations generally don't let you specify anything that isn't a valid week/year, which is helpful, but it's still possible to submit with the field empty, and you might want to restrict the range of choosable weeks. :::\nSetting maximum and minimum weeks # ::: section-content You can use the min and max attributes to restrict the valid weeks that can be chosen by the user. In the following example we are setting a minimum value of Week 01, 2017 and a maximum value of Week 52, 2017:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;week\u0026#34;\u0026gt;What week would you like to start?\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;week\u0026#34; type=\u0026#34;week\u0026#34; name=\u0026#34;week\u0026#34; min=\u0026#34;2017-W01\u0026#34; max=\u0026#34;2017-W52\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/form\u0026gt; :::\n::: {#sect5 .code-example} ::: iframe ::: :::\nHere's the CSS used in the above example. Here we make use of the :valid and :invalid CSS properties to style the input based on whether the current value is valid. We had to put the icons on a \u0026lt;span\u0026gt; next to the input, not on the input itself, because in Chrome the generated content is placed inside the form control, and can't be styled or shown effectively.\n::: code-example [css]{.language-name}\ndiv { margin-bottom: 10px; position: relative; } input[type=\u0026#34;number\u0026#34;] { width: 100px; } input + span { padding-right: 30px; } input:invalid + span::after { position: absolute; content: \u0026#34;✖\u0026#34;; padding-left: 5px; } input:valid + span::after { position: absolute; content: \u0026#34;✓\u0026#34;; padding-left: 5px; } :::\nThe result here is that only weeks between W01 and W52 in 2017 will be seen as valid and be selectable in supporting browsers. :::\nMaking week values required # ::: section-content In addition you can use the required attribute to make filling in the week mandatory. As a result, supporting browsers will display an error if you try to submit an empty week field.\nLet's look at an example; here we've set minimum and maximum weeks, and also made the field required:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;label for=\u0026#34;week\u0026#34;\u0026gt;What week would you like to start?\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;week\u0026#34; type=\u0026#34;week\u0026#34; name=\u0026#34;week\u0026#34; min=\u0026#34;2017-W01\u0026#34; max=\u0026#34;2017-W52\u0026#34; required /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit form\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; :::\nIf you try to submit the form with no value, the browser displays an error. Try playing with the example now:\n::: {#sect6 .code-example} ::: iframe ::: :::\nHere is a screenshot for those of you who aren't using a supporting browser:\n{width=\u0026ldquo;473\u0026rdquo; height=\u0026ldquo;85\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;}\n::: {#sect7 .notecard .warning} Warning: HTML form validation is not a substitute for scripts that ensure that the entered data is in the proper format. It's far too easy for someone to make adjustments to the HTML that allow them to bypass the validation, or to remove it entirely. It's also possible for someone to bypass your HTML entirely and submit the data directly to your server. If your server-side code fails to validate the data it receives, disaster could strike when improperly-formatted data is submitted (or data which is too large, of the wrong type, and so forth). ::: :::\nHandling browser support # ::: section-content As mentioned above, the major problem with using week inputs right now is browser support: Safari and Firefox don't support it on desktop, and old versions of IE don't support it.\nMobile platforms such as Android and iOS make perfect use of such input types, providing specialist UI controls that make it really easy to select values in a touchscreen environment. For example, the week picker on Chrome for Android looks like this:\n{width=\u0026ldquo;360\u0026rdquo; height=\u0026ldquo;640\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;}\nNon-supporting browsers gracefully degrade to a text input, but this creates problems both in terms of consistency of user interface (the presented control will be different), and data handling.\nThe second problem is the more serious. As mentioned earlier, with a week input the actual value is always normalized to the format yyyy-Www. When the browser falls back to a generic text input, there's nothing to guide the user toward correctly formatting the input (and it's certainly not intuitive). There are multiple ways in which people could write week values; for example:\nWeek 1 2017 Jan 2-8 2017 2017-W01 etc. The best way to deal with week/years in forms in a cross-browser way at the moment is to get the user to enter the week number and year in separate controls ( \u0026lt;select\u0026gt; elements being popular; see below for an example), or use JavaScript libraries such as jQuery date picker{target=\u0026quot;_blank\u0026quot;}. :::\nExamples # ::: section-content In this example we create two sets of UI elements for choosing weeks: a native picker created using \u0026lt;input type=\u0026quot;week\u0026quot;\u0026gt;, and a set of two \u0026lt;select\u0026gt; elements for choosing weeks/years in older browsers that don't support the week input type.\n::: {#sect8 .code-example} ::: iframe ::: :::\nThe HTML looks like so:\n::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;div class=\u0026#34;nativeWeekPicker\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;week\u0026#34;\u0026gt;What week would you like to start?\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;week\u0026#34; type=\u0026#34;week\u0026#34; name=\u0026#34;week\u0026#34; min=\u0026#34;2017-W01\u0026#34; max=\u0026#34;2018-W52\u0026#34; required /\u0026gt; \u0026lt;span class=\u0026#34;validity\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;p class=\u0026#34;fallbackLabel\u0026#34;\u0026gt;What week would you like to start?\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;fallbackWeekPicker\u0026#34;\u0026gt; \u0026lt;span\u0026gt; \u0026lt;label for=\u0026#34;week\u0026#34;\u0026gt;Week:\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;fallbackWeek\u0026#34; name=\u0026#34;week\u0026#34;\u0026gt;\u0026lt;/select\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; \u0026lt;label for=\u0026#34;year\u0026#34;\u0026gt;Year:\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;year\u0026#34; name=\u0026#34;year\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;2017\u0026#34; selected\u0026gt;2017\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;2018\u0026#34;\u0026gt;2018\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/form\u0026gt; :::\nThe week values are dynamically generated by the JavaScript code below.\nThe other part of the code that may be of interest is the feature detection code. To detect whether the browser supports \u0026lt;input type=\u0026quot;week\u0026quot;\u0026gt;, we create a new \u0026lt;input\u0026gt; element, try setting its type to week, then immediately check what its type is set to. Non-supporting browsers will return text, because the week type falls back to type text. If \u0026lt;input type=\u0026quot;week\u0026quot;\u0026gt; is not supported, we hide the native picker and show the fallback picker UI ( \u0026lt;select\u0026gt;s) instead.\n::: code-example [js]{.language-name}\n// Get UI elements const nativePicker = document.querySelector(\u0026#34;.nativeWeekPicker\u0026#34;); const fallbackPicker = document.querySelector(\u0026#34;.fallbackWeekPicker\u0026#34;); const fallbackLabel = document.querySelector(\u0026#34;.fallbackLabel\u0026#34;); const yearSelect = document.querySelector(\u0026#34;#year\u0026#34;); const weekSelect = document.querySelector(\u0026#34;#fallbackWeek\u0026#34;); // Hide fallback initially fallbackPicker.style.display = \u0026#34;none\u0026#34;; fallbackLabel.style.display = \u0026#34;none\u0026#34;; // Test whether a new date input falls back to a text input or not const test = document.createElement(\u0026#34;input\u0026#34;); try { test.type = \u0026#34;week\u0026#34;; } catch (e) { console.log(e.description); } // If it does, run the code inside the if () {} block if (test.type === \u0026#34;text\u0026#34;) { // Hide the native picker and show the fallback nativePicker.style.display = \u0026#34;none\u0026#34;; fallbackPicker.style.display = \u0026#34;block\u0026#34;; fallbackLabel.style.display = \u0026#34;block\u0026#34;; // populate the weeks dynamically populateWeeks(); } function populateWeeks() { // Populate the week select with 52 weeks for (let i = 1; i \u0026lt;= 52; i++) { const option = document.createElement(\u0026#34;option\u0026#34;); option.textContent = i \u0026lt; 10 ? `0${i}` : i; weekSelect.appendChild(option); } } :::\n::: {#sect9 .notecard .note} Note: Remember that some years have 53 weeks in them (see Weeks per year{target=\u0026quot;_blank\u0026quot;})! You'll need to take this into consideration when developing production apps. ::: :::\nTechnical summary # ::: section-content\nValue A string representing a week and year, or empty Events change and input Supported common attributes autocomplete, list, readonly, and step IDL attributes value, valueAsDate, valueAsNumber, and list. DOM interface HTMLInputElement\nMethods select(), stepDown(), and stepUp() Implicit ARIA Role no corresponding role ::: Specifications # ::: _table # Specification # HTML Standard\n[# week-state-(type=week)]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet week 20 12 No No 11 No 4.4 25 18 14 No 1.5 :::\nSee also # ::: section-content\nThe generic \u0026lt;input\u0026gt; element and the interface used to manipulate it, HTMLInputElement Date and time formats used in HTML \u0026lt;input type=\u0026quot;datetime-local\u0026quot;\u0026gt;, \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt;, \u0026lt;input type=\u0026quot;time\u0026quot;\u0026gt;, and \u0026lt;input type=\u0026quot;month\u0026quot;\u0026gt; Compatibility of CSS properties ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/week{._attribution-link} :::\n"},{"id":133,"href":"/docs/references/languages/html/element/ins/","title":"Ins","section":"HTML","content":" \u0026lt;ins\u0026gt;: The Inserted Text element # ::: section-content The \u0026lt;ins\u0026gt; HTML element represents a range of text that has been added to a document. You can use the \u0026lt;del\u0026gt; element to similarly represent a range of text that has been deleted from the document. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;ins\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} “You\u0026rsquo;re late!”\n“I apologize for the delay.”\n“A wizard is never late …”\n::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} del, ins { display: block; text-decoration: none; position: relative; }\ndel { background-color: #fbb; } ins { background-color: #d4fcbc; } del::before, ins::before { position: absolute; left: 0.5rem; font-family: monospace; } del::before { content: '−'; } ins::before { content: '+'; } p { margin: 0 1.8rem 0; font-family: Georgia, serif; font-size: 1rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nContent categories Phrasing content, flow content. Permitted content Transparent. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role insertion Permitted ARIA roles Any DOM interface HTMLModElement ::: Attributes # ::: section-content This element includes the global attributes.\ncite This attribute defines the URI of a resource that explains the change, such as a link to meeting minutes or a ticket in a troubleshooting system.\ndatetime This attribute indicates the time and date of the change and must be a valid date with an optional time string. If the value cannot be parsed as a date with an optional time string, the element does not have an associated timestamp. For the format of the string without a time, see Format of a valid date string. The format of the string if it includes both date and time is covered in Format of a valid local date and time string. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;ins\u0026gt;This text has been inserted\u0026lt;/ins\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # ::: section-content The presence of the \u0026lt;ins\u0026gt; element is not announced by most screen reading technology in its default configuration. It can be made to be announced by using the CSS content property, along with the ::before and ::after pseudo-elements.\n::: code-example [css]{.language-name}\nins::before, ins::after { clip-path: inset(100%); clip: rect(1px, 1px, 1px, 1px); height: 1px; overflow: hidden; position: absolute; white-space: nowrap; width: 1px; } ins::before { content: \u0026#34; [insertion start] \u0026#34;; } ins::after { content: \u0026#34; [insertion end] \u0026#34;; } :::\nSome people who use screen readers deliberately disable announcing content that creates extra verbosity. Because of this, it is important to not abuse this technique and only apply it in situations where not knowing content has been inserted would adversely affect understanding.\nShort note on making your mark (more accessible) | The Paciello Group{target=\u0026quot;_blank\u0026quot;} Tweaking Text Level Styles | Adrian Roselli{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-ins-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet ins 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 cite 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 datetime 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 :::\nSee also # ::: section-content\n\u0026lt;del\u0026gt; element for marking deletion into a document ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins{._attribution-link} :::\n"},{"id":134,"href":"/docs/references/languages/html/element/kbd/","title":"Kbd","section":"HTML","content":" \u0026lt;kbd\u0026gt;: The Keyboard Input element # ::: section-content The \u0026lt;kbd\u0026gt; HTML element represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the user agent defaults to rendering the contents of a \u0026lt;kbd\u0026gt; element using its default monospace font, although this is not mandated by the HTML standard. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;kbd\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Please press Ctrl + Shift + R to re-render an MDN page.\n::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} kbd { background-color: #eee; border-radius: 3px; border: 1px solid #b4b4b4; box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2), 0 2px 0 0 rgba(255, 255, 255, 0.7) inset; color: #333; display: inline-block; font-size: 0.85em; font-weight: 700; line-height: 1; padding: 2px 4px; white-space: nowrap; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\n\u0026lt;kbd\u0026gt; may be nested in various combinations with the \u0026lt;samp\u0026gt; (Sample Output) element to represent various forms of input or output based on visual cues. :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content Other elements can be used in tandem with \u0026lt;kbd\u0026gt; to represent more specific scenarios:\nNesting a \u0026lt;kbd\u0026gt; element within another \u0026lt;kbd\u0026gt; element represents an actual key or other unit of input as a portion of a larger input. See Representing keystrokes within an input below. Nesting a \u0026lt;kbd\u0026gt; element inside a \u0026lt;samp\u0026gt; element represents input that has been echoed back to the user by the system. See Echoed input, below, for an example. Nesting a \u0026lt;samp\u0026gt; element inside a \u0026lt;kbd\u0026gt; element, on the other hand, represents input which is based on text presented by the system, such as the names of menus and menu items, or the names of buttons displayed on the screen. See the example under Representing onscreen input options below. ::: {#sect1 .notecard .note} Note: You can define a custom style to override the browser's default font selection for the \u0026lt;kbd\u0026gt; element, although the user's preferences may potentially override your CSS. ::: :::\nExamples # Basic example # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; Use the command \u0026lt;kbd\u0026gt;help mycommand\u0026lt;/kbd\u0026gt; to view documentation for the command \u0026#34;mycommand\u0026#34;. \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nRepresenting keystrokes within an input # ::: section-content To describe an input comprised of multiple keystrokes, you can nest multiple \u0026lt;kbd\u0026gt; elements, with an outer \u0026lt;kbd\u0026gt; element representing the overall input and each individual keystroke or component of the input enclosed within its own \u0026lt;kbd\u0026gt;.\nUnstyled # First, let's look at what this looks like as just plain HTML.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; You can also create a new document using the \u0026lt;kbd\u0026gt;\u0026lt;kbd\u0026gt;Ctrl\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;N\u0026lt;/kbd\u0026gt;\u0026lt;/kbd\u0026gt; keyboard shortcut. \u0026lt;/p\u0026gt; :::\nThis wraps the entire key sequence in an outer \u0026lt;kbd\u0026gt; element, then each individual key within its own, in order to denote the components of the sequence.\n::: {#sect3 .notecard .note} Note: You don't need to do all this wrapping; you can choose to simplify it by leaving out the external \u0026lt;kbd\u0026gt; element. In other words, simplifying this to just \u0026lt;kbd\u0026gt;Ctrl\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;N\u0026lt;/kbd\u0026gt; would be perfectly valid.\nNote: Depending on your style sheet, though, you may find it useful to do this kind of nesting. :::\nResult # The output looks like this without a style sheet applied:\n::: {#sect4 .code-example} ::: iframe ::: :::\nWith custom styles # We can make more sense of this by adding some CSS:\nCSS # We add a new selector for nested \u0026lt;kbd\u0026gt; elements, kbd\u0026gt;kbd, which we can apply when rendering keyboard keys:\n::: code-example [css]{.language-name}\nkbd \u0026gt; kbd { border-radius: 3px; padding: 1px 2px 0; border: 1px solid black; } :::\nHTML # Then we update the HTML to use this class on the keys in the output to be presented:\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; You can also create a new document by pressing the \u0026lt;kbd\u0026gt;\u0026lt;kbd\u0026gt;Ctrl\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;N\u0026lt;/kbd\u0026gt;\u0026lt;/kbd\u0026gt; shortcut. \u0026lt;/p\u0026gt; :::\nResult # The result is just what we want!\n::: {#sect5 .code-example} ::: iframe ::: ::: :::\nEchoed input # ::: section-content Nesting a \u0026lt;kbd\u0026gt; element inside a \u0026lt;samp\u0026gt; element represents input that has been echoed back to the user by the system.\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; If a syntax error occurs, the tool will output the initial command you typed for your review: \u0026lt;/p\u0026gt; \u0026lt;blockquote\u0026gt; \u0026lt;samp\u0026gt;\u0026lt;kbd\u0026gt;custom-git ad my-new-file.cpp\u0026lt;/kbd\u0026gt;\u0026lt;/samp\u0026gt; \u0026lt;/blockquote\u0026gt; :::\nResult # ::: {#sect6 .code-example} ::: iframe ::: ::: :::\nRepresenting onscreen input options # ::: section-content Nesting a \u0026lt;samp\u0026gt; element inside a \u0026lt;kbd\u0026gt; element represents input which is based on text presented by the system, such as the names of menus and menu items, or the names of buttons displayed on the screen.\nFor example, you can explain how to choose the \u0026quot;New Document\u0026quot; option in the \u0026quot;File\u0026quot; menu using HTML that looks like this:\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; To create a new file, choose the \u0026lt;kbd\u0026gt;\u0026lt;kbd\u0026gt;\u0026lt;samp\u0026gt;File\u0026lt;/samp\u0026gt;\u0026lt;/kbd\u0026gt; ⇒\u0026lt;kbd\u0026gt;\u0026lt;samp\u0026gt;New Document\u0026lt;/samp\u0026gt;\u0026lt;/kbd\u0026gt;\u0026lt;/kbd\u0026gt; menu option. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Don\u0026#39;t forget to click the \u0026lt;kbd\u0026gt;\u0026lt;samp\u0026gt;OK\u0026lt;/samp\u0026gt;\u0026lt;/kbd\u0026gt; button to confirm once you\u0026#39;ve entered the name of the new file. \u0026lt;/p\u0026gt; :::\nThis does some interesting nesting. For the menu option description, the entire input is enclosed in a \u0026lt;kbd\u0026gt; element. Then, inside that, both the menu and menu item names are contained within both \u0026lt;kbd\u0026gt; and \u0026lt;samp\u0026gt;, indicating an input which is selected from a screen widget.\nResult # ::: {#sect7 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role No corresponding role Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-kbd-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android kbd 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nBefore Firefox 4, creating a \\\u0026lt;kbd\\\u0026gt; element incorrectly resulted in an `HTMLSpanElement` object, instead of the expected `HTMLElement`. :::\nSee also # ::: section-content\n\u0026lt;code\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd{._attribution-link} :::\n"},{"id":135,"href":"/docs/references/languages/html/element/label/","title":"Label","section":"HTML","content":" \u0026lt;label\u0026gt;: The Label element # ::: section-content The \u0026lt;label\u0026gt; HTML element represents a caption for an item in a user interface. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;label\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Do you like cheese? \u0026lt;div class=\u0026quot;preference\u0026quot;\u0026gt; \u0026lt;label for=\u0026quot;peas\u0026quot;\u0026gt;Do you like peas?\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;checkbox\u0026quot; name=\u0026quot;peas\u0026quot; id=\u0026quot;peas\u0026quot; /\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} .preference { display: flex; justify-content: space-between; width: 60%; margin: 0.5rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nAssociating a \u0026lt;label\u0026gt; with a form control, such as \u0026lt;input\u0026gt; or \u0026lt;textarea\u0026gt; offers some major advantages:\nThe label text is not only visually associated with its corresponding text input; it is programmatically associated with it too. This means that, for example, a screen reader will read out the label when the user is focused on the form input, making it easier for an assistive technology user to understand what data should be entered. When a user clicks or touches/taps a label, the browser passes the focus to its associated input (the resulting event is also raised for the input). That increased hit area for focusing the input provides an advantage to anyone trying to activate it \u0026mdash; including those using a touch-screen device. To explicitly associate a \u0026lt;label\u0026gt; element with an \u0026lt;input\u0026gt; element, you first need to add the id attribute to the \u0026lt;input\u0026gt; element. Next, you add the for attribute to the \u0026lt;label\u0026gt; element, where the value of for is the same as the id in the \u0026lt;input\u0026gt; element.\nAlternatively, you can nest the \u0026lt;input\u0026gt; directly inside the \u0026lt;label\u0026gt;, in which case the for and id attributes are not needed because the association is implicit:\n::: code-example [html]{.language-name}\n\u0026lt;label\u0026gt; Do you like peas? \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;peas\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; :::\nThe form control that a label is labeling is called the labeled control of the label element. Multiple labels can be associated with the same form control:\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;username\u0026#34;\u0026gt;Enter your username:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;username\u0026#34; name=\u0026#34;username\u0026#34; type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;username\u0026#34;\u0026gt;Forgot your username?\u0026lt;/label\u0026gt; :::\nElements that can be associated with a \u0026lt;label\u0026gt; element include \u0026lt;button\u0026gt;, \u0026lt;input\u0026gt; (except for type=\u0026quot;hidden\u0026quot;), \u0026lt;meter\u0026gt;, \u0026lt;output\u0026gt;, \u0026lt;progress\u0026gt;, \u0026lt;select\u0026gt; and \u0026lt;textarea\u0026gt;. :::\nAttributes # ::: section-content This element includes the global attributes.\nfor The value of the for attribute must be a single id for a labelable form-related element in the same document as the \u0026lt;label\u0026gt; element. So, any given label element can be associated with only one form control.\n::: {#sect1 .notecard .note} Note: To programmatically set the for attribute, use htmlFor. :::\nThe first element in the document with an id attribute matching the value of the for attribute is the labeled control for this label element \u0026mdash; if the element with that id is actually a labelable element{target=\u0026quot;_blank\u0026quot;}. If it is not a labelable element, then the for attribute has no effect. If there are other elements that also match the id value, later in the document, they are not considered.\nMultiple label elements can be given the same value for their for attribute; doing so causes the associated form control (the form control that for value references) to have multiple labels.\n::: {#sect2 .notecard .note} Note: A \u0026lt;label\u0026gt; element can have both a for attribute and a contained control element, as long as the for attribute points to the contained control element. ::: :::\nStyling with CSS # ::: section-content There are no special styling considerations for \u0026lt;label\u0026gt; elements \u0026mdash; structurally they are simple inline elements, and so can be styled in much the same way as a \u0026lt;span\u0026gt; or \u0026lt;a\u0026gt; element. You can apply styling to them in any way you want, as long as you don't cause the text to become difficult to read. :::\nExamples # Defining an implicit label # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;label\u0026gt;Click me \u0026lt;input type=\u0026#34;text\u0026#34; /\u0026gt;\u0026lt;/label\u0026gt; :::\n::: {#sect3 .code-example} ::: iframe ::: ::: :::\nDefining an explicit label with the \u0026quot;for\u0026quot; attribute # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;username\u0026#34;\u0026gt;Click me to focus on the input field\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;username\u0026#34; /\u0026gt; :::\n::: {#sect4 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # Interactive content # ::: section-content Don't place interactive elements such as anchors or buttons inside a label. Doing so makes it difficult for people to activate the form input associated with the label.\nDon't do this:\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;tac\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;tac\u0026#34; type=\u0026#34;checkbox\u0026#34; name=\u0026#34;terms-and-conditions\u0026#34; /\u0026gt; I agree to the \u0026lt;a href=\u0026#34;terms-and-conditions.html\u0026#34;\u0026gt;Terms and Conditions\u0026lt;/a\u0026gt; \u0026lt;/label\u0026gt; :::\nPrefer this:\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;tac\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;tac\u0026#34; type=\u0026#34;checkbox\u0026#34; name=\u0026#34;terms-and-conditions\u0026#34; /\u0026gt; I agree to the Terms and Conditions \u0026lt;/label\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a href=\u0026#34;terms-and-conditions.html\u0026#34;\u0026gt;Read our Terms and Conditions\u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; ::: :::\nHeadings # ::: section-content Placing heading elements within a \u0026lt;label\u0026gt; interferes with many kinds of assistive technology, because headings are commonly used as a navigation aid. If the label's text needs to be adjusted visually, use CSS classes applied to the \u0026lt;label\u0026gt; element instead.\nIf a form, or a section of a form needs a title, use the \u0026lt;legend\u0026gt; element placed within a \u0026lt;fieldset\u0026gt;.\nDon't do this:\n::: code-example [html]{.language-name}\n\u0026lt;label for=\u0026#34;your-name\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Your name\u0026lt;/h3\u0026gt; \u0026lt;input id=\u0026#34;your-name\u0026#34; name=\u0026#34;your-name\u0026#34; type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; :::\nPrefer this:\n::: code-example [html]{.language-name}\n\u0026lt;label class=\u0026#34;large-label\u0026#34; for=\u0026#34;your-name\u0026#34;\u0026gt; Your name \u0026lt;input id=\u0026#34;your-name\u0026#34; name=\u0026#34;your-name\u0026#34; type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; ::: :::\nButtons # ::: section-content An \u0026lt;input\u0026gt; element with a type=\u0026quot;button\u0026quot; declaration and a valid value attribute does not need a label associated with it. Doing so may actually interfere with how assistive technology parses the button input. The same applies for the \u0026lt;button\u0026gt; element. :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, interactive content, form-associated element, palpable content. Permitted content Phrasing content, but no descendant label elements. No labelable elements other than the labeled control are allowed. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLLabelElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-label-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet label 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 for 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/label{._attribution-link} :::\n"},{"id":136,"href":"/docs/references/languages/html/element/legend/","title":"Legend","section":"HTML","content":" \u0026lt;legend\u0026gt;: The Field Set Legend element # ::: section-content The \u0026lt;legend\u0026gt; HTML element represents a caption for the content of its parent \u0026lt;fieldset\u0026gt;. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;legend\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Choose your favorite monster\n\u0026lt;input type=\u0026quot;radio\u0026quot; id=\u0026quot;kraken\u0026quot; name=\u0026quot;monster\u0026quot; value=\u0026quot;K\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;kraken\u0026quot;\u0026gt;Kraken\u0026lt;/label\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input type=\u0026quot;radio\u0026quot; id=\u0026quot;sasquatch\u0026quot; name=\u0026quot;monster\u0026quot; value=\u0026quot;S\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;sasquatch\u0026quot;\u0026gt;Sasquatch\u0026lt;/label\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input type=\u0026quot;radio\u0026quot; id=\u0026quot;mothman\u0026quot; name=\u0026quot;monster\u0026quot; value=\u0026quot;M\u0026quot; /\u0026gt; \u0026lt;label for=\u0026quot;mothman\u0026quot;\u0026gt;Mothman\u0026lt;/label\u0026gt; \u0026lt;/fieldset\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} legend { background-color: #000; color: #fff; padding: 3px 6px; }\ninput { margin: 0.4rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nExamples # ::: section-content See \u0026lt;form\u0026gt; for examples on \u0026lt;legend\u0026gt;. :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content Phrasing content and headings (h1–h6 elements). Tag omission None, both the starting and ending tag are mandatory. Permitted parents A \u0026lt;fieldset\u0026gt; whose first child is this \u0026lt;legend\u0026gt; element Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLLegendElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-legend-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet legend 1 12 1 6 ≤12.1 3 4.4 18 4 ≤12.1 1 1.0 align 1 12 1 6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 :::\nSee also # ::: section-content\nARIA: Form role ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend{._attribution-link} :::\n"},{"id":137,"href":"/docs/references/languages/html/element/li/","title":"Li","section":"HTML","content":" \u0026lt;li\u0026gt;: The List Item element # ::: section-content The \u0026lt;li\u0026gt; HTML element is used to represent an item in a list. It must be contained in a parent element: an ordered list ( \u0026lt;ol\u0026gt;), an unordered list ( \u0026lt;ul\u0026gt;), or a menu ( \u0026lt;menu\u0026gt;). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;li\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Apollo astronauts:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Neil Armstrong\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Alan Bean\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Peter Conrad\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Edgar Mitchell\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Alan Shepard\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p, li { font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; }\np { font-weight: bold; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element includes the global attributes.\nvalue This integer attribute indicates the current ordinal value of the list item as defined by the \u0026lt;ol\u0026gt; element. The only allowed value for this attribute is a number, even if the list is displayed with Roman numerals or letters. List items that follow this one continue numbering from the value set. The value attribute has no meaning for unordered lists ( \u0026lt;ul\u0026gt;) or for menus ( \u0026lt;menu\u0026gt;).\ntype [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} This character attribute indicates the numbering type:\na: lowercase letters A: uppercase letters i: lowercase Roman numerals I: uppercase Roman numerals 1: numbers This type overrides the one used by its parent \u0026lt;ol\u0026gt; element, if any.\n::: {#sect1 .notecard .note} Note: This attribute has been deprecated; use the CSS list-style-type property instead. ::: :::\nExamples # ::: section-content For more detailed examples, see the \u0026lt;ol\u0026gt; and \u0026lt;ul\u0026gt; pages. :::\nOrdered list # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;first item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;third item\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nOrdered list with a custom value # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;ol type=\u0026#34;I\u0026#34;\u0026gt; \u0026lt;li value=\u0026#34;3\u0026#34;\u0026gt;third item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;fourth item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;fifth item\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nUnordered list # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;first item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;third item\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content Flow content. Tag omission The end tag can be omitted if the list item is immediately followed by another \u0026lt;li\u0026gt; element, or if there is no more content in its parent element. Permitted parents An \u0026lt;ul\u0026gt;, \u0026lt;ol\u0026gt;, or \u0026lt;menu\u0026gt; element. Though not a conforming usage, the obsolete \u0026lt;dir\u0026gt; can also be a parent. Implicit ARIA role listitem when child of an ol, ul or menu Permitted ARIA roles menuitem, menuitemcheckbox, menuitemradio, option, none, presentation, radio, separator, tab, treeitem DOM interface HTMLLIElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-li-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet li 1 12 1 5.5 ≤12.1 3 4.4 18 4 ≤12.1 1 1.0 type 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 value 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 :::\nSee also # ::: section-content\nOther list-related HTML Elements: \u0026lt;ul\u0026gt;, \u0026lt;ol\u0026gt;, \u0026lt;menu\u0026gt;, and the obsolete \u0026lt;dir\u0026gt;; CSS properties that may be specially useful to style the \u0026lt;li\u0026gt; element: the list-style property, to choose the way the ordinal is displayed, CSS counters, to handle complex nested lists, the margin property, to control the indent of the list item. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/li{._attribution-link} :::\n"},{"id":138,"href":"/docs/references/languages/html/element/link/","title":"Link","section":"HTML","content":" \u0026lt;link\u0026gt;: The External Resource Link element # ::: section-content The \u0026lt;link\u0026gt; HTML element specifies relationships between the current document and an external resource. This element is most commonly used to link to stylesheets, but is also used to establish site icons (both \u0026quot;favicon\u0026quot; style icons and icons for the home screen and apps on mobile devices) among other things. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;link\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} \u0026lt;p\u0026gt;This text will be red as defined in the external stylesheet.\u0026lt;/p\u0026gt; \u0026lt;p style=\u0026quot;color: blue\u0026quot;\u0026gt;The \u0026lt;code\u0026gt;style\u0026lt;/code\u0026gt; attribute can override it, though.\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nTo link an external stylesheet, you'd include a \u0026lt;link\u0026gt; element inside your \u0026lt;head\u0026gt; like this:\n::: code-example [html]{.language-name}\n\u0026lt;link href=\u0026#34;main.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; :::\nThis simple example provides the path to the stylesheet inside an href attribute, and a rel attribute with a value of stylesheet. The rel stands for \u0026quot;relationship\u0026quot;, and is one of the key features of the \u0026lt;link\u0026gt; element \u0026mdash; the value denotes how the item being linked to is related to the containing document.\nThere are a number of other common types you'll come across. For example, a link to the site's favicon:\n::: code-example [html]{.language-name}\n\u0026lt;link rel=\u0026#34;icon\u0026#34; href=\u0026#34;favicon.ico\u0026#34; /\u0026gt; :::\nThere are a number of other icon rel values, mainly used to indicate special icon types for use on various mobile platforms, e.g.:\n::: code-example [html]{.language-name}\n\u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;114x114\u0026#34; href=\u0026#34;apple-icon-114.png\u0026#34; type=\u0026#34;image/png\u0026#34; /\u0026gt; :::\nThe sizes attribute indicates the icon size, while the type contains the MIME type of the resource being linked. These provide useful hints to allow the browser to choose the most appropriate icon available.\nYou can also provide a media type or query inside a media attribute; this resource will then only be loaded if the media condition is true. For example:\n::: code-example [html]{.language-name}\n\u0026lt;link href=\u0026#34;print.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;print\u0026#34; /\u0026gt; \u0026lt;link href=\u0026#34;mobile.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;screen and (max-width: 600px)\u0026#34; /\u0026gt; :::\nSome interesting new performance and security features have been added to the \u0026lt;link\u0026gt; element too. Take this example:\n::: code-example [html]{.language-name}\n\u0026lt;link rel=\u0026#34;preload\u0026#34; href=\u0026#34;myFont.woff2\u0026#34; as=\u0026#34;font\u0026#34; type=\u0026#34;font/woff2\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; /\u0026gt; :::\nA rel value of preload indicates that the browser should preload this resource (see rel=\u0026quot;preload\u0026quot; for more details), with the as attribute indicating the specific class of content being fetched. The crossorigin attribute indicates whether the resource should be fetched with a CORS request.\nOther usage notes:\nA \u0026lt;link\u0026gt; element can occur either in the \u0026lt;head\u0026gt; or \u0026lt;body\u0026gt; element, depending on whether it has a link type{target=\u0026quot;_blank\u0026quot;} that is body-ok. For example, the stylesheet link type is body-ok, and therefore \u0026lt;link rel=\u0026quot;stylesheet\u0026quot;\u0026gt; is permitted in the body. However, this isn't a good practice to follow; it makes more sense to separate your \u0026lt;link\u0026gt; elements from your body content, putting them in the \u0026lt;head\u0026gt;. When using \u0026lt;link\u0026gt; to establish a favicon for a site, and your site uses a Content Security Policy (CSP) to enhance its security, the policy applies to the favicon. If you encounter problems with the favicon not loading, verify that the Content-Security-Policy header's img-src directive is not preventing access to it. The HTML and XHTML specifications define event handlers for the \u0026lt;link\u0026gt; element, but it is unclear how they would be used. Under XHTML 1.0, void elements such as \u0026lt;link\u0026gt; require a trailing slash: \u0026lt;link /\u0026gt;. WebTV supports the use of the value next for rel to preload the next page in a document series. ::: Attributes # ::: section-content This element includes the global attributes.\nas This attribute is required when rel=\u0026quot;preload\u0026quot; has been set on the \u0026lt;link\u0026gt; element, optional when rel=\u0026quot;modulepreload\u0026quot; has been set, and otherwise should not be used. It specifies the type of content being loaded by the \u0026lt;link\u0026gt;, which is necessary for request matching, application of correct content security policy, and setting of correct Accept request header.\nFurthermore, rel=\u0026quot;preload\u0026quot; uses this as a signal for request prioritization. The table below lists the valid values for this attribute and the elements or resources they apply to.\nValue Applies To audio \u0026lt;audio\u0026gt; elements document \u0026lt;iframe\u0026gt; and \u0026lt;frame\u0026gt; elements embed \u0026lt;embed\u0026gt; elements fetch fetch, XHR\nNote: This value also requires \u0026lt;link\u0026gt; to contain the crossorigin attribute, see CORS-enabled fetches.\nfont CSS @font-face image \u0026lt;img\u0026gt; and \u0026lt;picture\u0026gt; elements with srcset or imageset attributes, SVG \u0026lt;image\u0026gt; elements, CSS *-image rules object \u0026lt;object\u0026gt; elements script \u0026lt;script\u0026gt; elements, Worker importScripts style \u0026lt;link rel=stylesheet\u0026gt; elements, CSS @import track \u0026lt;track\u0026gt; elements video \u0026lt;video\u0026gt; elements worker Worker, SharedWorker blocking [Experimental]{.visually-hidden} This attribute explicitly indicates that certain operations should be blocked on the fetching of an external resource. The operations that are to be blocked must be a space-separated list of blocking attributes listed below.\nrender: The rendering of content on the screen is blocked. crossorigin This enumerated attribute indicates whether CORS must be used when fetching the resource. CORS-enabled images can be reused in the \u0026lt;canvas\u0026gt; element without being tainted. The allowed values are:\nanonymous A cross-origin request (i.e. with an Origin HTTP header) is performed, but no credential is sent (i.e. no cookie, X.509 certificate, or HTTP Basic authentication). If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin HTTP header) the resource will be tainted and its usage restricted.\nuse-credentials A cross-origin request (i.e. with an Origin HTTP header) is performed along with a credential sent (i.e. a cookie, certificate, and/or HTTP Basic authentication is performed). If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials HTTP header), the resource will be tainted and its usage restricted.\nIf the attribute is not present, the resource is fetched without a CORS request (i.e. without sending the Origin HTTP header), preventing its non-tainted usage. If invalid, it is handled as if the enumerated keyword anonymous was used. See CORS settings attributes for additional information.\ndisabled [Non-standard]{.visually-hidden} For rel=\u0026quot;stylesheet\u0026quot; only, the disabled Boolean attribute indicates whether the described stylesheet should be loaded and applied to the document. If disabled is specified in the HTML when it is loaded, the stylesheet will not be loaded during page load. Instead, the stylesheet will be loaded on-demand, if and when the disabled attribute is changed to false or removed.\nSetting the disabled property in the DOM causes the stylesheet to be removed from the document's Document.styleSheets list.\nfetchpriority [Experimental]{.visually-hidden} Provides a hint of the relative priority to use when fetching a preloaded resource. Allowed values:\nhigh Signals a high-priority fetch relative to other resources of the same type.\nlow Signals a low-priority fetch relative to other resources of the same type.\nauto Default: Signals automatic determination of fetch priority relative to other resources of the same type.\nhref This attribute specifies the URL of the linked resource. A URL can be absolute or relative.\nhreflang This attribute indicates the language of the linked resource. It is purely advisory. Allowed values are specified by RFC 5646: Tags for Identifying Languages (also known as BCP 47){target=\u0026quot;_blank\u0026quot;}. Use this attribute only if the href attribute is present.\nimagesizes For rel=\u0026quot;preload\u0026quot; and as=\u0026quot;image\u0026quot; only, the imagesizes attribute is a sizes attribute{target=\u0026quot;_blank\u0026quot;} that indicates to preload the appropriate resource used by an img element with corresponding values for its srcset and sizes attributes.\nimagesrcset For rel=\u0026quot;preload\u0026quot; and as=\u0026quot;image\u0026quot; only, the imagesrcset attribute is a sourceset attribute{target=\u0026quot;_blank\u0026quot;} that indicates to preload the appropriate resource used by an img element with corresponding values for its srcset and sizes attributes.\nintegrity Contains inline metadata \u0026mdash; a base64-encoded cryptographic hash of the resource (file) you're telling the browser to fetch. The browser can use this to verify that the fetched resource has been delivered free of unexpected manipulation. See Subresource Integrity.\nmedia This attribute specifies the media that the linked resource applies to. Its value must be a media type / media query. This attribute is mainly useful when linking to external stylesheets \u0026mdash; it allows the user agent to pick the best adapted one for the device it runs on.\n::: {#sect2 .notecard .note} Note:\nIn HTML 4, this can only be a simple white-space-separated list of media description literals, i.e., media types and groups, where defined and allowed as values for this attribute, such as print, screen, aural, braille. HTML5 extended this to any kind of media queries, which are a superset of the allowed values of HTML 4. Browsers not supporting CSS Media Queries won't necessarily recognize the adequate link; do not forget to set fallback links, the restricted set of media queries defined in HTML 4. ::: referrerpolicy A string indicating which referrer to use when fetching the resource:\nno-referrer means that the Referer header will not be sent. no-referrer-when-downgrade means that no Referer header will be sent when navigating to an origin without TLS (HTTPS). This is a user agent's default behavior, if no policy is otherwise specified. origin means that the referrer will be the origin of the page, which is roughly the scheme, the host, and the port. origin-when-cross-origin means that navigating to other origins will be limited to the scheme, the host, and the port, while navigating on the same origin will include the referrer's path. unsafe-url means that the referrer will include the origin and the path (but not the fragment, password, or username). This case is unsafe because it can leak origins and paths from TLS-protected resources to insecure origins. rel This attribute names a relationship of the linked document to the current document. The attribute must be a space-separated list of link type values.\nsizes [Experimental]{.visually-hidden} This attribute defines the sizes of the icons for visual media contained in the resource. It must be present only if the rel contains a value of icon or a non-standard type such as Apple's apple-touch-icon. It may have the following values:\nany, meaning that the icon can be scaled to any size as it is in a vector format, like image/svg+xml. a white-space separated list of sizes, each in the format \u0026lt;width in pixels\u0026gt;x\u0026lt;height in pixels\u0026gt; or \u0026lt;width in pixels\u0026gt;X\u0026lt;height in pixels\u0026gt;. Each of these sizes must be contained in the resource. ::: {#sect3 .notecard .note} Note: Most icon formats are only able to store one single icon; therefore, most of the time, the sizes attribute contains only one entry. MS's ICO format does, as well as Apple's ICNS. ICO is more ubiquitous, so you should use this format if cross-browser support is a concern (especially for old IE versions). :::\ntitle The title attribute has special semantics on the \u0026lt;link\u0026gt; element. When used on a \u0026lt;link rel=\u0026quot;stylesheet\u0026quot;\u0026gt; it defines a default or an alternate stylesheet.\ntype This attribute is used to define the type of the content linked to. The value of the attribute should be a MIME type such as text/html, text/css, and so on. The common use of this attribute is to define the type of stylesheet being referenced (such as text/css), but given that CSS is the only stylesheet language used on the web, not only is it possible to omit the type attribute, but is actually now recommended practice. It is also used on rel=\u0026quot;preload\u0026quot; link types, to make sure the browser only downloads file types that it supports. :::\nNon-standard attributes # ::: section-content\nmethods [Non-standard]{.visually-hidden} [Deprecated]{.visually-hidden} The value of this attribute provides information about the functions that might be performed on an object. The values generally are given by the HTTP protocol when it is used, but it might (for similar reasons as for the title attribute) be useful to include advisory information in advance in the link. For example, the browser might choose a different rendering of a link as a function of the methods specified; something that is searchable might get a different icon, or an outside link might render with an indication of leaving the current site. This attribute is not well understood nor supported, even by the defining browser, Internet Explorer 4.\ntarget [Deprecated]{.visually-hidden} Defines the frame or window name that has the defined linking relationship or that will show the rendering of any linked resource. :::\nObsolete attributes # ::: section-content\ncharset [Deprecated]{.visually-hidden} This attribute defines the character encoding of the linked resource. The value is a space- and/or comma-delimited list of character sets as defined in RFC 2045{target=\u0026quot;_blank\u0026quot;}. The default value is iso-8859-1.\n::: {#sect4 .notecard .note} Note: To produce the same effect as this obsolete attribute, use the Content-Type HTTP header on the linked resource. :::\nrev [Deprecated]{.visually-hidden} The value of this attribute shows the relationship of the current document to the linked document, as defined by the href attribute. The attribute thus defines the reverse relationship compared to the value of the rel attribute. Link type values for the attribute are similar to the possible values for rel.\n::: {#sect5 .notecard .note} Note: Instead of rev, you should use the rel attribute with the opposite link type value. For example, to establish the reverse link for made, specify author. Also, this attribute doesn't stand for \u0026quot;revision\u0026quot; and must not be used with a version number, even though many sites misuse it in this way. ::: :::\nExamples # Including a stylesheet # ::: section-content To include a stylesheet in a page, use the following syntax:\n::: code-example [html]{.language-name}\n\u0026lt;link href=\u0026#34;style.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; ::: :::\nProviding alternative stylesheets # ::: section-content You can also specify alternative style sheets.\nThe user can choose which style sheet to use by choosing it from the View \u0026gt; Page Style menu. This provides a way for users to see multiple versions of a page.\n::: code-example [html]{.language-name}\n\u0026lt;link href=\u0026#34;default.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; title=\u0026#34;Default Style\u0026#34; /\u0026gt; \u0026lt;link href=\u0026#34;fancy.css\u0026#34; rel=\u0026#34;alternate stylesheet\u0026#34; title=\u0026#34;Fancy\u0026#34; /\u0026gt; \u0026lt;link href=\u0026#34;basic.css\u0026#34; rel=\u0026#34;alternate stylesheet\u0026#34; title=\u0026#34;Basic\u0026#34; /\u0026gt; ::: :::\nProviding icons for different usage contexts # ::: section-content You can include links to several icons on the same page, and the browser will choose which one works best for its particular context using the rel and sizes values as hints.\n::: code-example [html]{.language-name}\n\u0026lt;!-- third-generation iPad with high-resolution Retina display: --\u0026gt; \u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;144x144\u0026#34; href=\u0026#34;favicon144.png\u0026#34; /\u0026gt; \u0026lt;!-- iPhone with high-resolution Retina display: --\u0026gt; \u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;114x114\u0026#34; href=\u0026#34;favicon114.png\u0026#34; /\u0026gt; \u0026lt;!-- first- and second-generation iPad: --\u0026gt; \u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;72x72\u0026#34; href=\u0026#34;favicon72.png\u0026#34; /\u0026gt; \u0026lt;!-- non-Retina iPhone, iPod Touch, and Android 2.1+ devices: --\u0026gt; \u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; href=\u0026#34;favicon57.png\u0026#34; /\u0026gt; \u0026lt;!-- basic favicon --\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; href=\u0026#34;favicon32.png\u0026#34; /\u0026gt; ::: :::\nConditionally loading resources with media queries # ::: section-content You can provide a media type or query inside a media attribute; this resource will then only be loaded if the media condition is true. For example:\n::: code-example [html]{.language-name}\n\u0026lt;link href=\u0026#34;print.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;print\u0026#34; /\u0026gt; \u0026lt;link href=\u0026#34;mobile.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;all\u0026#34; /\u0026gt; \u0026lt;link href=\u0026#34;desktop.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;screen and (min-width: 600px)\u0026#34; /\u0026gt; \u0026lt;link href=\u0026#34;highres.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;screen and (min-resolution: 300dpi)\u0026#34; /\u0026gt; ::: :::\nStylesheet load events # ::: section-content You can determine when a style sheet has been loaded by watching for a load event to fire on it; similarly, you can detect if an error has occurred while processing a style sheet by watching for an error event:\n::: code-example [html]{.language-name}\n\u0026lt;script\u0026gt; const stylesheet = document.querySelector(\u0026#34;#my-stylesheet\u0026#34;); stylesheet.onload = () =\u0026gt; { // Do something interesting; the sheet has been loaded }; stylesheet.onerror = () =\u0026gt; { console.log(\u0026#34;An error occurred loading the stylesheet!\u0026#34;); }; \u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;mystylesheet.css\u0026#34; id=\u0026#34;my-stylesheet\u0026#34; /\u0026gt; :::\n::: {#sect6 .notecard .note} Note: The load event fires once the stylesheet and all of its imported content has been loaded and parsed, and immediately before the styles start being applied to the content. ::: :::\nPreload examples # ::: section-content You can find a number of \u0026lt;link rel=\u0026quot;preload\u0026quot;\u0026gt; examples in Preloading content with rel=\u0026quot;preload\u0026quot;. :::\nBlocking rendering till a resource is fetched # ::: section-content You can include render token inside a blocking attribute; the rendering of the page will be blocked till the resource is fetched. For example:\n::: code-example [html]{.language-name}\n\u0026lt;link blocking=\u0026#34;render\u0026#34; href=\u0026#34;critical-font.woff2\u0026#34; as=\u0026#34;font\u0026#34; /\u0026gt; ::: :::\nTechnical summary # ::: section-content\nContent categories Metadata content. If itemprop is present: Flow content and phrasing content. Permitted content None; it is a void element. Tag omission As it is a void element, the start tag must be present and the end tag must not be present Permitted parents Any element that accepts metadata elements. If itemprop is present: any element that accepts phrasing content. Implicit ARIA role link with href attribute Permitted ARIA roles No role permitted DOM interface HTMLLinkElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-link-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Android Chrome Android Firefox for Opera Android Safari Samsung Internet Explorer Android on IOS link 1 12 1 Yes ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\nblocking 105 105 No No 91 No 105 105 No 72 No 20.0\ncharset 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\ncrossorigin 34 17 18 No 21 10 37 34 18 21 10 2.0\nBefore Firefox Before Firefox 83, 83, `crossorigin` `crossorigin` is not is not supported for supported for `rel=\u0026quot;icon\u0026quot;`. `rel=\u0026quot;icon\u0026quot;`. disabled 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\nIn Chrome and other Since Edge 79, adding the In Chrome and other In Chrome and other In Chrome and other In Chrome and other In Samsung Internet and Blink-based browsers, `disabled` attribute Blink-based browsers, Blink-based browsers, Blink-based browsers, Blink-based browsers, other Blink-based adding the `disabled` using JavaScript does not adding the `disabled` adding the `disabled` adding the `disabled` adding the `disabled` browsers, adding the attribute using remove the stylesheet attribute using attribute using attribute using attribute using `disabled` attribute JavaScript does not from JavaScript does not JavaScript does not JavaScript does not JavaScript does not using JavaScript does not remove the stylesheet `document.styleSheets`. remove the stylesheet remove the stylesheet remove the stylesheet remove the stylesheet remove the stylesheet from from from from from from `document.styleSheets`. `document.styleSheets`. `document.styleSheets`. `document.styleSheets`. `document.styleSheets`. `document.styleSheets`. fetchpriority 101 101 No No No preview 101 101 No 70 No 19.0\nhref 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\nhreflang 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\nimagesizes 73 79 78 No 60 No 73 73 79 52 No 11.0\nimagesrcset 73 79 78 No 60 No 73 73 79 52 No 11.0\nintegrity 45 17 43 No 32 11.1 45 45 43 32 11.3 5.0\nmedia 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\nmethods No 12\u0026ndash;79 No 4 No No No No No No No No\nreferrerpolicy 51 79 50 No 38 14 51 51 50 41 14 7.2\nrel 1 12 1 Yes 9 1 4.4 18 4 10.1 1 1.0\nrev 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\nsizes ≤80 80 ≤72 No 67 6 80 80 79 57 6 13.0\ntarget 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\ntitle 1 12 1 Yes Yes ≤4 Yes Yes 4 Yes ≤3.2 Yes\ntype 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 # :::\nSee also # ::: section-content\nLink HTTP header The integrity attribute{target=\u0026quot;_blank\u0026quot;} on 150daysofhtml.com (2021) ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link{._attribution-link} :::\n"},{"id":139,"href":"/docs/references/languages/html/element/main/","title":"Main","section":"HTML","content":" \u0026lt;main\u0026gt; # ::: section-content The \u0026lt;main\u0026gt; HTML element represents the dominant content of the \u0026lt;body\u0026gt; of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;main\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Gecko facts\n\u0026lt;main\u0026gt; \u0026lt;p\u0026gt; Geckos are a group of usually small, usually nocturnal lizards. They are found on every continent except Australia. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Many species of gecko have adhesive toe pads which enable them to climb walls and even windows.\u0026lt;/p\u0026gt; \u0026lt;/main\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} header { font: bold calc(0.025 * (100vw)) Arial, sans-serif; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nA document mustn't have more than one \u0026lt;main\u0026gt; element that doesn't have the hidden attribute specified.\nContent categories Flow content, palpable content. Permitted content Flow content. Tag omission None; both the starting and ending tags are mandatory. Permitted parents Where flow content is expected, but only if it is a hierarchically correct main element. Implicit ARIA role main Permitted ARIA roles No role permitted DOM interface HTMLElement ::: Attributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content The content of a \u0026lt;main\u0026gt; element should be unique to the document. Content that is repeated across a set of documents or document sections such as sidebars, navigation links, copyright information, site logos, and search forms shouldn't be included unless the search form is the main function of the page.\n\u0026lt;main\u0026gt; doesn't contribute to the document's outline; that is, unlike elements such as \u0026lt;body\u0026gt;, headings such as h2, and such, \u0026lt;main\u0026gt; doesn't affect the DOM's concept of the structure of the page. It's strictly informative. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;!-- other content --\u0026gt; \u0026lt;main\u0026gt; \u0026lt;h1\u0026gt;Apples\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;The apple is the pomaceous fruit of the apple tree.\u0026lt;/p\u0026gt; \u0026lt;article\u0026gt; \u0026lt;h2\u0026gt;Red Delicious\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt; These bright red apples are the most common found in many supermarkets. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;…\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;…\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;article\u0026gt; \u0026lt;h2\u0026gt;Granny Smith\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;These juicy, green apples make a great filling for apple pies.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;…\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;…\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;!-- other content --\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # Landmark # ::: section-content The \u0026lt;main\u0026gt; element behaves like a main landmark role. Landmarks can be used by assistive technology to quickly identify and navigate to large sections of the document. Prefer using the \u0026lt;main\u0026gt; element over declaring role=\u0026quot;main\u0026quot;, unless there are legacy browser support concerns. :::\nSkip navigation # ::: section-content Skip navigation, also known as \u0026quot;skipnav\u0026quot;, is a technique that allows an assistive technology user to quickly bypass large sections of repeated content (main navigation, info banners, etc.). This lets the user access the main content of the page faster.\nAdding an id attribute to the \u0026lt;main\u0026gt; element lets it be a target of a skip navigation link.\n::: code-example [html]{.language-name}\n\u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;#main-content\u0026#34;\u0026gt;Skip to main content\u0026lt;/a\u0026gt; \u0026lt;!-- navigation and header content --\u0026gt; \u0026lt;main id=\u0026#34;main-content\u0026#34;\u0026gt; \u0026lt;!-- main page content --\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/body\u0026gt; :::\nWebAIM: \u0026quot;Skip Navigation\u0026quot; Links{target=\u0026quot;_blank\u0026quot;} ::: Reader mode # ::: section-content Browser reader mode functionality looks for the presence of the \u0026lt;main\u0026gt; element, as well as heading and content sectioning elements when converting content into a specialized reader view.\nBuilding websites for Safari Reader Mode and other reading apps.{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-main-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet main 26 12 21 No 16 7 4.4 26 21 14 7 1.5 :::\nSee also # ::: section-content\nBasic structural elements: \u0026lt;html\u0026gt;, \u0026lt;head\u0026gt;, \u0026lt;body\u0026gt; Section-related elements: \u0026lt;article\u0026gt;, \u0026lt;aside\u0026gt;, \u0026lt;footer\u0026gt;, \u0026lt;header\u0026gt;, or \u0026lt;nav\u0026gt; ARIA: Main role ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/main{._attribution-link} :::\n"},{"id":140,"href":"/docs/references/languages/html/element/map/","title":"Map","section":"HTML","content":" \u0026lt;map\u0026gt;: The Image Map element # ::: section-content The \u0026lt;map\u0026gt; HTML element is used with \u0026lt;area\u0026gt; elements to define an image map (a clickable link area). :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;map\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} img { display: block; margin: 0 auto; width: 260px; height: 232px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element includes the global attributes.\nname The name attribute gives the map a name so that it can be referenced. The attribute must be present and must have a non-empty value with no space characters. The value of the name attribute must not be equal to the value of the name attribute of another \u0026lt;map\u0026gt; element in the same document. If the id attribute is also specified, both attributes must have the same value. :::\nExamples # Image map with two areas # ::: section-content Click the left-hand parrot for JavaScript, or the right-hand parrot for CSS.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;!-- Photo by Juliana e Mariana Amorim on Unsplash --\u0026gt; \u0026lt;map name=\u0026#34;primary\u0026#34;\u0026gt; \u0026lt;area shape=\u0026#34;circle\u0026#34; coords=\u0026#34;75,75,75\u0026#34; href=\u0026#34;https://developer.mozilla.org/docs/Web/JavaScript\u0026#34; target=\u0026#34;_blank\u0026#34; alt=\u0026#34;JavaScript\u0026#34; /\u0026gt; \u0026lt;area shape=\u0026#34;circle\u0026#34; coords=\u0026#34;275,75,75\u0026#34; href=\u0026#34;https://developer.mozilla.org/docs/Web/CSS\u0026#34; target=\u0026#34;_blank\u0026#34; alt=\u0026#34;CSS\u0026#34; /\u0026gt; \u0026lt;/map\u0026gt; \u0026lt;img usemap=\u0026#34;#primary\u0026#34; src=\u0026#34;parrots.jpg\u0026#34; alt=\u0026#34;350 x 150 picture of two parrots\u0026#34; /\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Any transparent element. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLMapElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-map-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android map 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\n\\[\\\u0026quot;Before Firefox 5, in Quirks Mode, empty maps were no longer skipped over in favor of non-empty ones when matching.\\\u0026quot;, \\\u0026quot;Before Firefox 17, the default styling of the `\u0026lt;map\u0026gt;` HTML element was `display: block;`. This is now `display: inline;` and matches the behavior of the other browsers. It was already the case in Quirks Mode.\\\u0026quot;\\] name 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 # :::\nSee also # ::: section-content\n\u0026lt;a\u0026gt; \u0026lt;area\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/map{._attribution-link} :::\n"},{"id":141,"href":"/docs/references/languages/html/element/mark/","title":"Mark","section":"HTML","content":" \u0026lt;mark\u0026gt;: The Mark Text element # ::: section-content The \u0026lt;mark\u0026gt; HTML element represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;mark\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Search results for \u0026ldquo;salamander\u0026rdquo;:\n\u0026lt;hr /\u0026gt; \u0026lt;p\u0026gt;Several species of \u0026lt;mark\u0026gt;salamander\u0026lt;/mark\u0026gt; inhabit the temperate rainforest of the Pacific Northwest.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Most \u0026lt;mark\u0026gt;salamander\u0026lt;/mark\u0026gt;s are nocturnal, and hunt for insects, worms, and other small creatures.\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} /* stylelint-disable-next-line block-no-empty */ mark { } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content Typical use cases for \u0026lt;mark\u0026gt; include:\nWhen used in a quotation ( \u0026lt;q\u0026gt;) or block quote ( \u0026lt;blockquote\u0026gt;), it generally indicates text which is of special interest but is not marked in the original source material, or material which needs special scrutiny even though the original author didn't think it was of particular importance. Think of this like using a highlighter pen in a book to mark passages that you find of interest. Otherwise, \u0026lt;mark\u0026gt; indicates a portion of the document's content which is likely to be relevant to the user's current activity. This might be used, for example, to indicate the words that matched a search operation. Don't use \u0026lt;mark\u0026gt; for syntax highlighting purposes; instead, use the \u0026lt;span\u0026gt; element with appropriate CSS applied to it. ::: {#sect1 .notecard .note} Note: Don't confuse \u0026lt;mark\u0026gt; with the \u0026lt;strong\u0026gt; element; \u0026lt;mark\u0026gt; is used to denote content which has a degree of relevance, while \u0026lt;strong\u0026gt; indicates spans of text of importance. ::: :::\nExamples # Marking text of interest # ::: section-content In this first example, a \u0026lt;mark\u0026gt; element is used to mark some text within a quote which is of particular interest to the user.\n::: code-example [html]{.language-name}\n\u0026lt;blockquote\u0026gt; It is a period of civil war. Rebel spaceships, striking from a hidden base, have won their first victory against the evil Galactic Empire. During the battle, \u0026lt;mark\u0026gt;Rebel spies managed to steal secret plans\u0026lt;/mark\u0026gt; to the Empire\u0026#39;s ultimate weapon, the DEATH STAR, an armored space station with enough power to destroy an entire planet. \u0026lt;/blockquote\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nIdentifying context-sensitive passages # ::: section-content This example demonstrates using \u0026lt;mark\u0026gt; to mark search results within a passage.\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; It is a dark time for the Rebellion. Although the Death Star has been destroyed, \u0026lt;mark class=\u0026#34;match\u0026#34;\u0026gt;Imperial\u0026lt;/mark\u0026gt; troops have driven the Rebel forces from their hidden base and pursued them across the galaxy. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Evading the dreaded \u0026lt;mark class=\u0026#34;match\u0026#34;\u0026gt;Imperial\u0026lt;/mark\u0026gt; Starfleet, a group of freedom fighters led by Luke Skywalker has established a new secret base on the remote ice world of Hoth. \u0026lt;/p\u0026gt; :::\nTo help distinguish the use of \u0026lt;mark\u0026gt; for search results from other potential usage, this example applies the custom class \u0026quot;match\u0026quot; to each match.\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # ::: section-content The presence of the mark element is not announced by most screen reading technology in its default configuration. It can be made to be announced by using the CSS content property, along with the ::before and ::after pseudo-elements.\n::: code-example [css]{.language-name}\nmark::before, mark::after { clip-path: inset(100%); clip: rect(1px, 1px, 1px, 1px); height: 1px; overflow: hidden; position: absolute; white-space: nowrap; width: 1px; } mark::before { content: \u0026#34; [highlight start] \u0026#34;; } mark::after { content: \u0026#34; [highlight end] \u0026#34;; } :::\nSome people who use screen readers deliberately disable announcing content that creates extra verbosity. Because of this, it is important to not abuse this technique and only apply it in situations where not knowing content has been highlighted would adversely affect understanding.\nShort note on making your mark (more accessible) | The Paciello Group{target=\u0026quot;_blank\u0026quot;} Tweaking Text Level Styles | Adrian Roselli{target=\u0026quot;_blank\u0026quot;} ::: Technical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role No corresponding role Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-mark-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet mark 7 12 4 9 11 5.1 4.4 18 4 14 5 1.0 :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark{._attribution-link} :::\n"},{"id":142,"href":"/docs/references/languages/html/element/marquee/","title":"Marquee","section":"HTML","content":" \u0026lt;marquee\u0026gt;: The Marquee element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;marquee\u0026gt; HTML element is used to insert a scrolling area of text. You can control what happens when the text reaches the edges of its content area using its attributes. :::\nAttributes # ::: section-content\nbehavior [Deprecated]{.visually-hidden} Sets how the text is scrolled within the marquee. Possible values are scroll, slide and alternate. If no value is specified, the default value is scroll.\nbgcolor [Deprecated]{.visually-hidden} Sets the background color through color name or hexadecimal value.\ndirection [Deprecated]{.visually-hidden} Sets the direction of the scrolling within the marquee. Possible values are left, right, up and down. If no value is specified, the default value is left.\nheight [Deprecated]{.visually-hidden} Sets the height in pixels or percentage value.\nhspace [Deprecated]{.visually-hidden} Sets the horizontal margin\nloop [Deprecated]{.visually-hidden} Sets the number of times the marquee will scroll. If no value is specified, the default value is −1, which means the marquee will scroll continuously.\nscrollamount [Deprecated]{.visually-hidden} Sets the amount of scrolling at each interval in pixels. The default value is 6.\nscrolldelay [Deprecated]{.visually-hidden} Sets the interval between each scroll movement in milliseconds. The default value is 85. Note that any value smaller than 60 is ignored and the value 60 is used instead unless truespeed is specified.\ntruespeed [Deprecated]{.visually-hidden} By default, scrolldelay values lower than 60 are ignored. If truespeed is present, those values are not ignored.\nvspace [Deprecated]{.visually-hidden} Sets the vertical margin in pixels or percentage value.\nwidth [Deprecated]{.visually-hidden} Sets the width in pixels or percentage value. :::\nEvent handlers # ::: section-content\nonbounce Fires when the marquee has reached the end of its scroll position. It can only fire when the behavior attribute is set to alternate.\nonfinish Fires when the marquee has finished the amount of scrolling that is set by the loop attribute. It can only fire when the loop attribute is set to some number that is greater than 0.\nonstart Fires when the marquee starts scrolling. :::\nMethods # ::: section-content\nstart() Starts scrolling of the marquee.\nstop() Stops scrolling of the marquee. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;marquee\u0026gt;This text will scroll from right to left\u0026lt;/marquee\u0026gt; \u0026lt;marquee direction=\u0026#34;up\u0026#34;\u0026gt;This text will scroll from bottom to top\u0026lt;/marquee\u0026gt; \u0026lt;marquee direction=\u0026#34;down\u0026#34; width=\u0026#34;250\u0026#34; height=\u0026#34;200\u0026#34; behavior=\u0026#34;alternate\u0026#34; style=\u0026#34;border:solid\u0026#34;\u0026gt; \u0026lt;marquee behavior=\u0026#34;alternate\u0026#34;\u0026gt; This text will bounce \u0026lt;/marquee\u0026gt; \u0026lt;/marquee\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nDOM interface HTMLMarqueeElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-marquee-element-2]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Opera Safari Samsung Explorer Android Android Android Android on IOS Internet marquee 1 12 65 2 7.2 1.2 4.4 18 65 10.1 1 1.0\n1 4 Implements the Implements the `HTMLDivElement` `HTMLDivElement` interface. interface. behavior 1 12 1 2 7.2 1.2 4.4 18 4 10.1 1 1.0\nbgcolor 1 12 1 2 7.2 1.2 4.4 18 4 10.1 1 1.0\ndirection 1 12 1 2 7.2 1.2 4.4 18 4 10.1 1 1.0\nheight 1 12 1 2 7.2 1.2 4.4 18 4 10.1 1 1.0\nhspace 1 12 3 5.5 15 1.2 4.4 18 4 14 1 1.0\nloop 1 12 3 5.5 15 1.2 4.4 18 4 14 1 1.0\nscrollamount 1 12 1 2 7.2 1.2 4.4 18 4 10.1 1 1.0\nscrolldelay 1 12 1 2 7.2 1.2 4.4 18 4 10.1 1 1.0\ntruespeed 1 12 3 4 15 1.2 4.4 18 4 14 1 1.0\nvspace 1 12 3 5.5 15 1.2 4.4 18 4 14 1 1.0\nwidth 1 12 1 2 7.2 1.2 4.4 18 4 10.1 1 1.0 # :::\nSee also # ::: section-content\nHTMLMarqueeElement ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee{._attribution-link} :::\n"},{"id":143,"href":"/docs/references/languages/html/element/menu/","title":"Menu","section":"HTML","content":" \u0026lt;menu\u0026gt;: The Menu element # ::: section-content The \u0026lt;menu\u0026gt; HTML element is described in the HTML specification as a semantic alternative to \u0026lt;ul\u0026gt;, but treated by browsers (and exposed through the accessibility tree) as no different than \u0026lt;ul\u0026gt;. It represents an unordered list of items (which are represented by \u0026lt;li\u0026gt; elements). :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;menu\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} NASA’s Webb Delivers Deepest Infrared Image of Universe Yet Save for later Share this news ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} .news { background-color: bisque; padding: 1em; border: solid thin black; }\nmenu { list-style-type: none; display: flex; padding: 0; margin-bottom: 0; gap: 1em; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content The \u0026lt;menu\u0026gt; and \u0026lt;ul\u0026gt; elements both represent an unordered list of items. The key difference is that \u0026lt;ul\u0026gt; primarily contains items for display, while \u0026lt;menu\u0026gt; was intended for interactive items. The related \u0026lt;menuitem\u0026gt; element has been deprecated.\n::: {#sect1 .notecard .note} Note: In early versions of the HTML specification, the \u0026lt;menu\u0026gt; element had an additional use case as a context menu. This functionality is considered obsolete and is not in the specification. ::: :::\nExamples # Toolbar # ::: section-content In this example, a \u0026lt;menu\u0026gt; is used to create a toolbar for an editing application.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;menu\u0026gt; \u0026lt;li\u0026gt;\u0026lt;button onclick=\u0026#34;copy()\u0026#34;\u0026gt;Copy\u0026lt;/button\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;button onclick=\u0026#34;cut()\u0026#34;\u0026gt;Cut\u0026lt;/button\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;button onclick=\u0026#34;paste()\u0026#34;\u0026gt;Paste\u0026lt;/button\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/menu\u0026gt; :::\nNote that this is functionally no different from:\n::: code-example [html]{.language-name}\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;button onclick=\u0026#34;copy()\u0026#34;\u0026gt;Copy\u0026lt;/button\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;button onclick=\u0026#34;cut()\u0026#34;\u0026gt;Cut\u0026lt;/button\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;button onclick=\u0026#34;paste()\u0026#34;\u0026gt;Paste\u0026lt;/button\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; :::\nCSS # ::: code-example [css]{.language-name}\nmenu, ul { display: flex; list-style: none; padding: 0; width: 400px; } li { flex-grow: 1; } button { width: 100%; } :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content. If the element's children include at least one \u0026lt;li\u0026gt; element: Palpable content.\nPermitted content Zero or more occurrences of \u0026lt;li\u0026gt;, \u0026lt;script\u0026gt;, and \u0026lt;template\u0026gt;.\nTag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Implicit ARIA role list Permitted ARIA roles directory, group, listbox, menu, menubar, none, presentation, radiogroup, tablist, toolbar or tree DOM interface HTMLMenuElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-menu-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Opera Safari Samsung Explorer Android Android Android Android on IOS Internet menu 1 12 1 6 ≤12.1 3 4.4 18 4 ≤12.1 1 1.0\nhr_separator No No 51\u0026ndash;85 No No No No No 51\u0026ndash;85 No No No\nlabel No No 8\u0026ndash;85 No No No No No 8\u0026ndash;85 No No No\nNested menus are not supported. type_menu No ≤18\u0026ndash;79 8\u0026ndash;85 No No No No No 8\u0026ndash;85 No No No\nNested menus are not supported. :::\nSee also # ::: section-content\nOther list-related HTML Elements: \u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt;, and \u0026lt;li\u0026gt;. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu{._attribution-link} :::\n"},{"id":144,"href":"/docs/references/languages/html/element/menuitem/","title":"Menuitem","section":"HTML","content":" \u0026lt;menuitem\u0026gt; # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\n::: {#sect2 .notecard .nonstandard} Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future. :::\nThe \u0026lt;menuitem\u0026gt; HTML element represents a command that a user is able to invoke through a popup menu. This includes context menus, as well as menus that might be attached to a menu button.\nA command can either be defined explicitly, with a textual label and optional icon to describe its appearance, or alternatively as an indirect command whose behavior is defined by a separate element. Commands can also optionally include a checkbox or be grouped to share radio buttons. (Menu items for indirect commands gain checkboxes or radio buttons when defined against elements \u0026lt;input type=\u0026quot;checkbox\u0026quot;\u0026gt; and \u0026lt;input type=\u0026quot;radio\u0026quot;\u0026gt;.) :::\nAttributes # ::: section-content This element includes the global attributes; in particular title can be used to describe the command, or provide usage hints.\nchecked [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} Boolean attribute which indicates whether the command is selected. May only be used when the type attribute is checkbox or radio.\ncommand [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} Specifies the ID of a separate element, indicating a command to be invoked indirectly. May not be used within a menu item that also includes the attributes checked, disabled, icon, label, radiogroup or type.\ndefault [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} This Boolean attribute indicates use of the same command as the menu's subject element (such as a button or input).\ndisabled [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} Boolean attribute which indicates that the command is not available in the current state. Note that disabled is distinct from hidden; the disabled attribute is appropriate in any context where a change in circumstances might render the command relevant.\nicon [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} Image URL, used to provide a picture to represent the command.\nlabel The name of the command as shown to the user. Required when a command attribute is not present.\nradiogroup [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} This attribute specifies the name of a group of commands to be toggled as radio buttons when selected. May only be used where the type attribute is radio.\ntype [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} This attribute indicates the kind of command, and can be one of three values.\ncommand: A regular command with an associated action. This is the missing value default. checkbox: Represents a command that can be toggled between two different states. radio: Represent one selection from a group of commands that can be toggled as radio buttons. ::: Examples # HTML # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;!-- A element with a context menu --\u0026gt; \u0026lt;div contextmenu=\u0026#34;popup-menu\u0026#34;\u0026gt;Right-click to see the adjusted context menu \u0026lt;menu type=\u0026#34;context\u0026#34; id=\u0026#34;popup-menu\u0026#34;\u0026gt; \u0026lt;menuitem type=\u0026#34;checkbox\u0026#34; checked\u0026gt;Checkbox\u0026lt;/menuitem\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;menuitem type=\u0026#34;command\u0026#34; label=\u0026#34;This command does nothing\u0026#34; icon=\u0026#34;favicon-192x192.png\u0026#34;\u0026gt; Commands don\u0026#39;t render their contents. \u0026lt;/menuitem\u0026gt; \u0026lt;menuitem type=\u0026#34;command\u0026#34; label=\u0026#34;This command has javascript\u0026#34; onclick=\u0026#34;alert(\u0026#39;command clicked\u0026#39;)\u0026#34;\u0026gt; Commands don\u0026#39;t render their contents. \u0026lt;/menuitem\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;menuitem type=\u0026#34;radio\u0026#34; radiogroup=\u0026#34;group1\u0026#34;\u0026gt;Radio Button 1\u0026lt;/menuitem\u0026gt; \u0026lt;menuitem type=\u0026#34;radio\u0026#34; radiogroup=\u0026#34;group1\u0026#34;\u0026gt;Radio Button 2\u0026lt;/menuitem\u0026gt; \u0026lt;/menu\u0026gt; ::: :::\nCSS # ::: section-content ::: code-example [css]{.language-name}\ndiv { width: 300px; height: 80px; background-color: lightgreen; } ::: :::\nResult # ::: section-content ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content None; it is a void element. Tag omission Must have a start tag and must not have an end tag. Permitted parents The \u0026lt;menu\u0026gt; element, where that element is in the popup menu state. (If specified, the type attribute of the \u0026lt;menu\u0026gt; element must be popup; if missing, the parent element of the \u0026lt;menu\u0026gt; must itself be a \u0026lt;menu\u0026gt; in the popup menu state.) Permitted ARIA roles None DOM interface HTMLMenuItemElement ::: Specifications # ::: section-content Not part of any current specifications. :::\nBrowser compatibility # See also # ::: section-content\nHTML context menus in Firefox (Screencast and Code){target=\u0026quot;_blank\u0026quot;} ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/menuitem{._attribution-link} :::\n"},{"id":145,"href":"/docs/references/languages/html/element/meta/","title":"Meta","section":"HTML","content":" \u0026lt;meta\u0026gt;: The metadata element # ::: section-content The \u0026lt;meta\u0026gt; HTML element represents metadata that cannot be represented by other HTML meta-related elements, like \u0026lt;base\u0026gt;, \u0026lt;link\u0026gt;, \u0026lt;script\u0026gt;, \u0026lt;style\u0026gt; or \u0026lt;title\u0026gt;.\nContent categories Metadata content. If the itemprop attribute is present: flow content, phrasing content. Permitted content None; it is a void element. Tag omission As it is a void element, the start tag must be present and the end tag must not be present. Permitted parents \u0026lt;meta charset\u0026gt;, \u0026lt;meta http-equiv\u0026gt;: a \u0026lt;head\u0026gt; element. If the http-equiv is not an encoding declaration, it can also be inside a \u0026lt;noscript\u0026gt; element, itself inside a \u0026lt;head\u0026gt; element. \u0026lt;meta name\u0026gt;: any element that accepts metadata content. \u0026lt;meta itemprop\u0026gt;: any element that accepts metadata content or flow content. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLMetaElement The type of metadata provided by the \u0026lt;meta\u0026gt; element can be one of the following:\nIf the name attribute is set, the \u0026lt;meta\u0026gt; element provides document-level metadata, applying to the whole page. If the http-equiv attribute is set, the \u0026lt;meta\u0026gt; element is a pragma directive, providing information equivalent to what can be given by a similarly-named HTTP header. If the charset attribute is set, the \u0026lt;meta\u0026gt; element is a charset declaration, giving the character encoding in which the document is encoded. If the itemprop attribute is set, the \u0026lt;meta\u0026gt; element provides user-defined metadata. ::: Attributes # ::: section-content This element includes the global attributes.\n::: {#sect1 .notecard .note} Note: the attribute name has a specific meaning for the \u0026lt;meta\u0026gt; element, and the itemprop attribute must not be set on the same \u0026lt;meta\u0026gt; element that has any existing name, http-equiv or charset attributes. :::\ncharset This attribute declares the document's character encoding. If the attribute is present, its value must be an ASCII case-insensitive match for the string \u0026quot;utf-8\u0026quot;, because UTF-8 is the only valid encoding for HTML5 documents. \u0026lt;meta\u0026gt; elements which declare a character encoding must be located entirely within the first 1024 bytes of the document.\ncontent This attribute contains the value for the http-equiv or name attribute, depending on which is used.\nhttp-equiv Defines a pragma directive. The attribute is named http-equiv(alent) because all the allowed values are names of particular HTTP headers:\ncontent-security-policy Allows page authors to define a content policy for the current page. Content policies mostly specify allowed server origins and script endpoints which help guard against cross-site scripting attacks.\ncontent-type Declares the MIME type and the document's character encoding. The content attribute must have the value \u0026quot;text/html; charset=utf-8\u0026quot; if specified. This is equivalent to a \u0026lt;meta\u0026gt; element with the charset attribute specified and carries the same restriction on placement within the document. Note: Can only be used in documents served with a text/html \u0026mdash; not in documents served with an XML MIME type.\ndefault-style Sets the name of the default CSS style sheet set.\nx-ua-compatible If specified, the content attribute must have the value \u0026quot;IE=edge\u0026quot;. User agents are required to ignore this pragma.\nrefresh This instruction specifies:\nThe number of seconds until the page should be reloaded - only if the content attribute contains a non-negative integer. The number of seconds until the page should redirect to another - only if the content attribute contains a non-negative integer followed by the string ';url=', and a valid URL. ::: {#sect2 .notecard .warning} Warning:\nPages set with a refresh value run the risk of having the time interval being too short. People navigating with the aid of assistive technology such as a screen reader may be unable to read through and understand the page's content before being automatically redirected. The abrupt, unannounced updating of the page content may also be disorienting for people experiencing low vision conditions.\nMDN Understanding WCAG, Guideline 2.2 explanations MDN Understanding WCAG, Guideline 3.2 explanations Understanding Success Criterion 2.2.1 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} Understanding Success Criterion 2.2.4 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} Understanding Success Criterion 3.2.5 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} ::: name The name and content attributes can be used together to provide document metadata in terms of name-value pairs, with the name attribute giving the metadata name, and the content attribute giving the value.\nSee standard metadata names for details about the set of standard metadata names defined in the HTML specification. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;!-- Redirect page after 3 seconds --\u0026gt; \u0026lt;meta http-equiv=\u0026#34;refresh\u0026#34; content=\u0026#34;3;url=https://www.mozilla.org\u0026#34; /\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-meta-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet meta 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 charset 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 content 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 http-equiv 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 name 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0 :::\nSee also # ::: section-content\nStandard metadata names Learn: \u0026lt;meta\u0026gt; The viewport meta tag ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta{._attribution-link} :::\n"},{"id":146,"href":"/docs/references/languages/html/element/meta/name/","title":"Name","section":"HTML","content":" Standard metadata names # ::: section-content The \u0026lt;meta\u0026gt; element can be used to provide document metadata in terms of name-value pairs, with the name attribute giving the metadata name, and the content attribute giving the value. :::\nStandard metadata names defined in the HTML specification # ::: section-content The HTML specification defines the following set of standard metadata names:\napplication-name: the name of the application running in the web page.\n::: {#sect1 .notecard .note} Note:\nBrowsers may use this to identify the application. It is different from the \u0026lt;title\u0026gt; element, which usually contain the application name, but may also contain information like the document name or a status. Simple web pages shouldn't define an application-name. ::: author: the name of the document's author.\ndescription: a short and accurate summary of the content of the page. Several browsers, like Firefox and Opera, use this as the default description of bookmarked pages.\ngenerator: the identifier of the software that generated the page.\nkeywords: words relevant to the page's content separated by commas.\nreferrer: controls the HTTP Referer header of requests sent from the document:\nValues for the content attribute of \u0026lt;meta name=\"referrer\"\u0026gt; no-referrer Do not send a HTTP Referer header. origin Send the origin of the document. no-referrer-when-downgrade Send the full URL when the destination is at least as secure as the current page (HTTP(S)→HTTPS), but send no referrer when it's less secure (HTTPS→HTTP). This is the default behavior. origin-when-cross-origin Send the full URL (stripped of parameters) for same-origin requests, but only send the origin for other cases. same-origin Send the full URL (stripped of parameters) for same-origin requests. Cross-origin requests will contain no referrer header. strict-origin Send the origin when the destination is at least as secure as the current page (HTTP(S)→HTTPS), but send no referrer when it's less secure (HTTPS→HTTP). strict-origin-when-cross-origin Send the full URL (stripped of parameters) for same-origin requests. Send the origin when the destination is at least as secure as the current page (HTTP(S)→HTTPS). Otherwise, send no referrer. unsafe-URL Send the full URL (stripped of parameters) for same-origin or cross-origin requests. ::: {#sect2 .notecard .note} Note:\nDynamically inserting \u0026lt;meta name=\u0026quot;referrer\u0026quot;\u0026gt; (with document.write() or appendChild()) makes the referrer behavior unpredictable. When several conflicting policies are defined, the no-referrer policy is applied. ::: theme-color: indicates a suggested color that user agents should use to customize the display of the page or of the surrounding user interface. The content attribute contains a valid CSS \u0026lt;color\u0026gt;. The media attribute with a valid media query list can be included to set the media the theme color metadata applies to.\ncolor-scheme: specifies one or more color schemes with which the document is compatible. The browser will use this information in tandem with the user's browser or device settings to determine what colors to use for everything from background and foregrounds to form controls and scrollbars. The primary use for \u0026lt;meta name=\u0026quot;color-scheme\u0026quot;\u0026gt; is to indicate compatibility with\u0026mdash;and order of preference for\u0026mdash;light and dark color modes. The value of the content property for color-scheme may be one of the following:\nnormal The document is unaware of color schemes and should be rendered using the default color palette.\n[light | dark]+ One or more color schemes supported by the document. Specifying the same color scheme more than once has the same effect as specifying it only once. Indicating multiple color schemes indicates that the first scheme is preferred by the document, but that the second specified scheme is acceptable if the user prefers it.\nonly light Indicates that the document only supports light mode, with a light background and dark foreground colors. By specification, only dark is not valid, because forcing a document to render in dark mode when it isn't truly compatible with it can result in unreadable content; all major browsers default to light mode if not otherwise configured.\nFor example, to indicate that a document prefers dark mode but does render functionally in light mode as well:\n::: code-example [html]{.language-name}\n\u0026lt;meta name=\u0026#34;color-scheme\u0026#34; content=\u0026#34;dark light\u0026#34; /\u0026gt; :::\nThis works at the document level in the same way that the CSS color-scheme property lets individual elements specify their preferred and accepted color schemes. Your styles can adapt to the current color scheme using the prefers-color-scheme CSS media feature. :::\nStandard metadata names defined in other specifications # ::: section-content The CSS Device Adaptation specification defines the following metadata name:\nviewport: gives hints about the size of the initial size of the viewport.\nValues for the content of \u0026lt;meta name=\"viewport\"\u0026gt; Value Possible subvalues Description width A positive integer number, or the text device-width Defines the pixel width of the viewport that you want the website to be rendered at. height A positive integer, or the text device-height Defines the height of the viewport. Not used by any browser. initial-scale A positive number between 0.0 and 10.0 Defines the ratio between the device width (device-width in portrait mode or device-height in landscape mode) and the viewport size. maximum-scale A positive number between 0.0 and 10.0 Defines the maximum amount to zoom in. It must be greater or equal to the minimum-scale or the behavior is undefined. Browser settings can ignore this rule and iOS10+ ignores it by default. minimum-scale A positive number between 0.0 and 10.0 Defines the minimum zoom level. It must be smaller or equal to the maximum-scale or the behavior is undefined. Browser settings can ignore this rule and iOS10+ ignores it by default. user-scalable yes or no If set to no, the user is not able to zoom in the webpage. The default is yes. Browser settings can ignore this rule, and iOS10+ ignores it by default. viewport-fit auto, contain or cover The auto value doesn't affect the initial layout viewport, and the whole web page is viewable.\nThe contain value means that the viewport is scaled to fit the largest rectangle inscribed within the display.\nThe cover value means that the viewport is scaled to fill the device display. It is highly recommended to make use of the safe area inset variables to ensure that important content doesn't end up outside the display.\n::: {#sect4 .notecard .warning} Warning:\nDisabling zooming capabilities by setting user-scalable to a value of no prevents people experiencing low vision conditions from being able to read and understand page content.\nMDN Understanding WCAG, Guideline 1.4 explanations Understanding Success Criterion 1.4.4 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} ::: ::: Other metadata names # ::: section-content The WHATWG Wiki MetaExtensions page{target=\u0026quot;_blank\u0026quot;} contains a large set of non-standard metadata names that have not been formally accepted yet; however, some of the names included there are already used quite commonly in practice \u0026mdash; including the following:\ncreator: the name of the creator of the document, such as an organization or institution. If there are more than one, several \u0026lt;meta\u0026gt; elements should be used.\ngooglebot, a synonym of robots, is only followed by Googlebot (the indexing crawler for Google).\npublisher: the name of the document's publisher.\nrobots: the behavior that cooperative crawlers, or \u0026quot;robots\u0026quot;, should use with the page. It is a comma-separated list of the values below:\nValue Description Used by index Allows the robot to index the page (default). All noindex Requests the robot to not index the page. All follow Allows the robot to follow the links on the page (default). All nofollow Requests the robot to not follow the links on the page. All all Equivalent to index, follow Google none Equivalent to noindex, nofollow Google noarchive Requests the search engine not to cache the page content. Google, Yahoo, Bing nosnippet Prevents displaying any description of the page in search engine results. Google, Bing noimageindex Requests this page not to appear as the referring page of an indexed image. Google nocache Synonym of noarchive. Bing ::: {#sect5 .notecard .note} Note:\nOnly cooperative robots follow these rules. Do not expect to prevent email harvesters with them. The robot still needs to access the page in order to read these rules. To prevent bandwidth consumption, use a robots.txt file. If you want to remove a page, noindex will work, but only after the robot visits the page again. Ensure that the robots.txt file is not preventing revisits. Some values are mutually exclusive, like index and noindex, or follow and nofollow. In these cases the robot's behavior is undefined and may vary between them. Some crawler robots, like Google, Yahoo and Bing, support the same values for the HTTP header X-Robots-Tag; this allows non-HTML documents like images to use these rules. ::: ::: Specifications # ::: _table # Specification # HTML Standard\n[# standard-metadata-names]{.small}\nReferrer Policy\n[# referrer-policy-delivery-meta]{.small} # :::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Explorer Opera Safari WebView Chrome Firefox for Opera Safari Samsung Android Android Android Android on IOS Internet name 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\ncolor-scheme 81 81 96 No 68 12.1 81 81 96 No 12.2 13.0\nreferrer 17 79 36 11 15 11.1 37 18 36 No 12 1.0\nUntil Chrome The Browsers initially supported an [early Until Opera Until Chrome Until Chrome The Until Samsung 46, `content` `referrer` draft](https://wiki.whatwg.org/wiki/Meta_referrer) 46, `content` 46, `content` 46, `content` `referrer` Internet 5.0, values value of the specification which can only use a meta tag values values values value `content` weren\\'t wasn\\'t and is only compatible with the `origin` value from weren\\'t weren\\'t weren\\'t wasn\\'t values constrained taken into the new spec. constrained constrained constrained taken into weren\\'t to the values account when to the values to the values to the values account when constrained listed in the navigation listed in the listed in the listed in the navigation to the values spec. was spec. spec. spec. was listed in the happening happening spec. via the via the context menu context menu or middle or middle click until click until Firefox 39. Firefox 39. scheme 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\ntheme-color 73 79 No No No 15 No 80 No No 15 6.2\nChrome uses Edge uses the Chrome for the color color only on Android does only on installed not use the installed progressive color on progressive web apps. devices with web apps. native dark mode enabled. 39--72 Chrome reports support, but does not actually use the color anywhere. :::\nSee also # ::: section-content\nViewport \u0026lt;meta\u0026gt; tag Metadata: the \u0026lt;meta\u0026gt; element in What's in the head? Metadata in HTML ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name{._attribution-link} :::\n"},{"id":147,"href":"/docs/references/languages/html/element/meta/name/theme-color/","title":"Theme Color","section":"HTML","content":" theme-color # ::: section-content The theme-color value for the name attribute of the \u0026lt;meta\u0026gt; element indicates a suggested color that user agents should use to customize the display of the page or of the surrounding user interface. If specified, the content attribute must contain a valid CSS \u0026lt;color\u0026gt;. :::\nExample # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;meta name=\u0026#34;theme-color\u0026#34; content=\u0026#34;#4285f4\u0026#34; /\u0026gt; :::\nThe following image shows the effect that the \u0026lt;meta\u0026gt; element above will have on a document displayed in Chrome running on an Android mobile device.\n![Image showing the effect of using theme-color](Image showing the effect of using.png){width=\u0026ldquo;894\u0026rdquo; height=\u0026ldquo;686\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;}\nImage credit: from Icons \u0026amp; Browser Colors{target=\u0026quot;_blank\u0026quot;}, created and shared by Google and used according to terms described in the Creative Commons 4.0 Attribution License{target=\u0026quot;_blank\u0026quot;}.\nYou can provide a media type or query inside the media attribute; the color will then only be set if the media condition is true. For example:\n::: code-example [html]{.language-name}\n\u0026lt;meta name=\u0026#34;theme-color\u0026#34; media=\u0026#34;(prefers-color-scheme: light)\u0026#34; content=\u0026#34;cyan\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;theme-color\u0026#34; media=\u0026#34;(prefers-color-scheme: dark)\u0026#34; content=\u0026#34;black\u0026#34; /\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# meta-theme-color]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android theme-color 73 79 No No No 15 No 80 No No 15 6.2\nChrome uses Edge uses the Chrome for the color color only on Android only on installed does not installed progressive use the progressive web apps. color on web apps. devices with 39--72 native dark mode Chrome enabled. reports support, but does not actually use the color anywhere. :::\nSee also # ::: section-content\ncolor-scheme CSS property prefers-color-scheme media query ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name/theme-color{._attribution-link} :::\n"},{"id":148,"href":"/docs/references/languages/html/element/meter/","title":"Meter","section":"HTML","content":" \u0026lt;meter\u0026gt;: The HTML Meter element # ::: section-content The \u0026lt;meter\u0026gt; HTML element represents either a scalar value within a known range or a fractional value. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;meter\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Fuel level:\n\u0026lt;meter id=\u0026quot;fuel\u0026quot; min=\u0026quot;0\u0026quot; max=\u0026quot;100\u0026quot; low=\u0026quot;33\u0026quot; high=\u0026quot;66\u0026quot; optimum=\u0026quot;80\u0026quot; value=\u0026quot;50\u0026quot;\u0026gt;at 50/100\u0026lt;/meter\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { padding-right: 10px; font-size: 1rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nContent categories Flow content, phrasing content, labelable content, palpable content. Permitted content Phrasing content, but there must be no \u0026lt;meter\u0026gt; element among its descendants. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role meter Permitted ARIA roles No role permitted DOM interface HTMLMeterElement ::: Attributes # ::: section-content This element includes the global attributes.\nvalue The current numeric value. This must be between the minimum and maximum values (min attribute and max attribute) if they are specified. If unspecified or malformed, the value is 0. If specified, but not within the range given by the min attribute and max attribute, the value is equal to the nearest end of the range.\n::: {#sect1 .notecard .note} Note: Unless the value attribute is between 0 and 1 (inclusive), the min and max attributes should define the range so that the value attribute's value is within it. :::\nmin The lower numeric bound of the measured range. This must be less than the maximum value (max attribute), if specified. If unspecified, the minimum value is 0.\nmax The upper numeric bound of the measured range. This must be greater than the minimum value (min attribute), if specified. If unspecified, the maximum value is 1.\nlow The upper numeric bound of the low end of the measured range. This must be greater than the minimum value (min attribute), and it also must be less than the high value and maximum value (high attribute and max attribute, respectively), if any are specified. If unspecified, or if less than the minimum value, the low value is equal to the minimum value.\nhigh The lower numeric bound of the high end of the measured range. This must be less than the maximum value (max attribute), and it also must be greater than the low value and minimum value (low attribute and min attribute, respectively), if any are specified. If unspecified, or if greater than the maximum value, the high value is equal to the maximum value.\noptimum This attribute indicates the optimal numeric value. It must be within the range (as defined by the min attribute and max attribute). When used with the low attribute and high attribute, it gives an indication where along the range is considered preferable. For example, if it is between the min attribute and the low attribute, then the lower range is considered preferred. The browser may color the meter's bar differently depending on whether the value is less than or equal to the optimum value.\nform This optional attribute is used to explicitly set a \u0026lt;form\u0026gt; owner for the \u0026lt;meter\u0026gt; element. If omitted, the \u0026lt;meter\u0026gt; is associated with its ancestor \u0026lt;form\u0026gt; element or the form association set by the form attribute on another ancestor element, such as on a \u0026lt;fieldset\u0026gt;, if any. If included, the value must be the id of a \u0026lt;form\u0026gt; in the same tree. :::\nExamples # Simple example # ::: section-content\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; Heat the oven to \u0026lt;meter min=\u0026#34;200\u0026#34; max=\u0026#34;500\u0026#34; value=\u0026#34;350\u0026#34;\u0026gt;350 degrees\u0026lt;/meter\u0026gt;. \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: :::\nOn Google Chrome, the resulting meter looks like this:\n{width=\u0026ldquo;504\u0026rdquo; height=\u0026ldquo;74\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;} :::\nHigh and Low range example # ::: section-content Note that in this example the min attribute is omitted. This is allowed, as it will default to 0.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; He got a \u0026lt;meter low=\u0026#34;69\u0026#34; high=\u0026#34;80\u0026#34; max=\u0026#34;100\u0026#34; value=\u0026#34;84\u0026#34;\u0026gt;B\u0026lt;/meter\u0026gt; on the exam. \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: :::\nOn Google Chrome, the resulting meter looks like this:\n{width=\u0026ldquo;498\u0026rdquo; height=\u0026ldquo;70\u0026rdquo; loading=\u0026ldquo;lazy\u0026rdquo;} :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-meter-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet meter 6 ≤18 16 No 11 6 No 18 16 11 10.3 1.0 form 6 ≤18 16 No 11 6 No 18 16 11 10.3 1.0 high 6 ≤18 16 No 11 6 No 18 16 11 10.3 1.0 low 6 ≤18 16 No 11 6 No 18 16 11 10.3 1.0 max 6 ≤18 16 No 11 6 No 18 16 11 10.3 1.0 min 6 ≤18 16 No 11 6 No 18 16 11 10.3 1.0 optimum 6 ≤18 16 No 11 6 No 18 16 11 10.3 1.0 value 6 ≤18 16 No 11 6 No 18 16 11 10.3 1.0 :::\nSee also # ::: section-content\n\u0026lt;progress\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter{._attribution-link} :::\n"},{"id":149,"href":"/docs/references/languages/html/element/nav/","title":"Nav","section":"HTML","content":" \u0026lt;nav\u0026gt;: The Navigation Section element # ::: section-content The \u0026lt;nav\u0026gt; HTML element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;nav\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Bikes BMX Jump Bike 3000 \u0026lt;h1\u0026gt;Jump Bike 3000\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; This BMX bike is a solid step into the pro world. It looks as legit as it rides and is built to polish your skills. \u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} nav { border-bottom: 1px solid black; }\n.crumbs ol { list-style-type: none; padding-left: 0; } .crumb { display: inline-block; } .crumb a::after { display: inline-block; color: #000; content: '\u0026gt;'; font-size: 80%; font-weight: bold; padding: 0 3px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nContent categories Flow content, sectioning content, palpable content. Permitted content Flow content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Implicit ARIA role navigation Permitted ARIA roles No role permitted DOM interface HTMLElement ::: Attributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content\nIt's not necessary for all links to be contained in a \u0026lt;nav\u0026gt; element. \u0026lt;nav\u0026gt; is intended only for a major block of navigation links; typically the \u0026lt;footer\u0026gt; element often has a list of links that don't need to be in a \u0026lt;nav\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} element. A document may have several \u0026lt;nav\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} elements, for example, one for site navigation and one for intra-page navigation. aria-labelledby can be used in such case to promote accessibility, see example. User agents, such as screen readers targeting disabled users, can use this element to determine whether to omit the initial rendering of navigation-only content. ::: Examples # ::: section-content In this example, a \u0026lt;nav\u0026gt; block is used to contain an unordered list ( \u0026lt;ul\u0026gt;) of links. With appropriate CSS, this can be presented as a sidebar, navigation bar, or drop-down menu.\n::: code-example [html]{.language-name}\n\u0026lt;nav class=\u0026#34;menu\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; :::\nThe semantics of the nav element is that of providing links. However a nav element doesn't have to contain a list, it can contain other kinds of content as well. In this navigation block, links are provided in prose:\n::: code-example [html]{.language-name}\n\u0026lt;nav\u0026gt; \u0026lt;h2\u0026gt;Navigation\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt; You are on my home page. To the north lies \u0026lt;a href=\u0026#34;/blog\u0026#34;\u0026gt;my blog\u0026lt;/a\u0026gt;, from whence the sounds of battle can be heard. To the east you can see a large mountain, upon which many \u0026lt;a href=\u0026#34;/school\u0026#34;\u0026gt;school papers\u0026lt;/a\u0026gt; are littered. Far up this mountain you can spy a little figure who appears to be me, desperately scribbling a \u0026lt;a href=\u0026#34;/school/thesis\u0026#34;\u0026gt;thesis\u0026lt;/a\u0026gt;. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; To the west are several exits. One fun-looking exit is labeled \u0026lt;a href=\u0026#34;https://games.example.com/\u0026#34;\u0026gt;\u0026#34;games\u0026#34;\u0026lt;/a\u0026gt;. Another more boring-looking exit is labeled \u0026lt;a href=\u0026#34;https://isp.example.net/\u0026#34;\u0026gt;ISP™\u0026lt;/a\u0026gt;. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; To the south lies a dark and dank \u0026lt;a href=\u0026#34;/about\u0026#34;\u0026gt;contacts page\u0026lt;/a\u0026gt;. Cobwebs cover its disused entrance, and at one point you see a rat run quickly out of the page. \u0026lt;/p\u0026gt; \u0026lt;/nav\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-nav-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet nav 5 12 4 9 11.1 5 4.4 18 4 11.1 4.2 1.0 :::\nSee also # ::: section-content\nOther section-related elements: \u0026lt;body\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;section\u0026gt;, \u0026lt;aside\u0026gt;, h1, h2, h3, h4, h5, h6, \u0026lt;hgroup\u0026gt;, \u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt;, \u0026lt;address\u0026gt;; Sections and outlines of an HTML document. ARIA: Navigation role ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav{._attribution-link} :::\n"},{"id":150,"href":"/docs/references/languages/html/element/nobr/","title":"Nobr","section":"HTML","content":" \u0026lt;nobr\u0026gt;: The Non-Breaking Text element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;nobr\u0026gt; HTML element prevents the text it contains from automatically wrapping across multiple lines, potentially resulting in the user having to scroll horizontally to see the entire width of the text.\n::: {#sect2 .notecard .warning} Warning: Although this element is widely supported, it was never standard HTML, so you shouldn't use it. Instead, use the CSS property white-space like this: :::\n::: code-example [html]{.language-name}\n\u0026lt;span style=\u0026#34;white-space: nowrap;\u0026#34;\u0026gt;Long line with no breaks\u0026lt;/span\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# nobr]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet nobr 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nwhite-space overflow ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/nobr{._attribution-link} :::\n"},{"id":151,"href":"/docs/references/languages/html/element/noembed/","title":"Noembed","section":"HTML","content":" \u0026lt;noembed\u0026gt;: The Embed Fallback element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;noembed\u0026gt; HTML element is an obsolete, non-standard way to provide alternative, or \u0026quot;fallback\u0026quot;, content for browsers that do not support the \u0026lt;embed\u0026gt; element or do not support the type of embedded content an author wishes to use. This element was deprecated in HTML 4.01 and above in favor of placing fallback content between the opening and closing tags of an \u0026lt;object\u0026gt; element.\n::: {#sect2 .notecard .note} Note: While this element currently still works in many browsers, it is obsolete and should not be used. Use \u0026lt;object\u0026gt; instead, with fallback content between the opening and closing tags of the element. ::: :::\nExamples # ::: section-content The message inside \u0026lt;noembed\u0026gt; tag will appear only when your browser does not support \u0026lt;embed\u0026gt; tag. :::\nShow an alternative content # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;embed type=\u0026#34;vide/webm\u0026#34; src=\u0026#34;/media/examples/flower.mp4\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;200\u0026#34;\u0026gt; \u0026lt;noembed\u0026gt; \u0026lt;h1\u0026gt;Alternative content\u0026lt;/h1\u0026gt; \u0026lt;/noembed\u0026gt; \u0026lt;/embed\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# noembed]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet noembed 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/noembed{._attribution-link} :::\n"},{"id":152,"href":"/docs/references/languages/html/element/noframes/","title":"Noframes","section":"HTML","content":" \u0026lt;noframes\u0026gt;: The Frame Fallback element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;noframes\u0026gt; HTML element provides content to be presented in browsers that don't support (or have disabled support for) the \u0026lt;frame\u0026gt; element. Although most commonly-used browsers support frames, there are exceptions, including certain special-use browsers including some mobile browsers, as well as text-mode browsers.\nA \u0026lt;noframes\u0026gt; element can contain any HTML elements that are allowed within the body of an HTML document, except for the \u0026lt;frameset\u0026gt; and \u0026lt;frame\u0026gt; elements, since using frames when they aren't supported doesn't make sense.\n\u0026lt;noframes\u0026gt; can be used to present a message explaining that the user's browser doesn't support frames, but ideally should be used to present an alternate form of the site that doesn't use frames but still offers the same or similar functionality.\n::: {#sect2 .notecard .note} Note: This element is obsolete and shouldn't be used, since the \u0026lt;frame\u0026gt; and \u0026lt;frameset\u0026gt; elements are also obsolete. When frames are needed at all, they should be presented using the \u0026lt;iframe\u0026gt; element. ::: :::\nAttributes # ::: section-content Like all other HTML elements, this element supports the global attributes. It has no other attributes available. :::\nExample # ::: section-content In this example, we see a frameset with two frames. In addition, \u0026lt;noframes\u0026gt; is used to present an explanatory message if the user agent doesn't support frames.\n::: code-example [html]{.language-name}\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en-US\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- Document metadata goes here --\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;frameset rows=\u0026#34;45%, 55%\u0026#34;\u0026gt; \u0026lt;frame src=\u0026#34;https://developer.mozilla.org/en/HTML/Element/frameset\u0026#34; /\u0026gt; \u0026lt;frame src=\u0026#34;https://developer.mozilla.org/en/HTML/Element/frame\u0026#34; /\u0026gt; \u0026lt;noframes\u0026gt; \u0026lt;p\u0026gt; It seems your browser does not support frames or is configured to not allow them. \u0026lt;/p\u0026gt; \u0026lt;/noframes\u0026gt; \u0026lt;/frameset\u0026gt; \u0026lt;/html\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# noframes]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet noframes 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 :::\nSee also # ::: section-content\n\u0026lt;frameset\u0026gt; \u0026lt;frame\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/noframes{._attribution-link} :::\n"},{"id":153,"href":"/docs/references/languages/html/element/noscript/","title":"Noscript","section":"HTML","content":" \u0026lt;noscript\u0026gt;: The Noscript element # ::: section-content The \u0026lt;noscript\u0026gt; HTML element defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser.\nContent categories Metadata content, flow content, phrasing content. Permitted content When scripting is disabled and when it is a descendant of the \u0026lt;head\u0026gt; element: in any order, zero or more \u0026lt;link\u0026gt; elements, zero or more \u0026lt;style\u0026gt; elements, and zero or more \u0026lt;meta\u0026gt; elements.\nWhen scripting is disabled and when it isn't a descendant of the \u0026lt;head\u0026gt; element: any transparent content, but no \u0026lt;noscript\u0026gt; element must be among its descendants.\nOtherwise: flow content or phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content, if there are no ancestor \u0026lt;noscript\u0026gt; element, or in a \u0026lt;head\u0026gt; element (but only for an HTML document), here again if there are no ancestor \u0026lt;noscript\u0026gt; element. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLElement ::: Attributes # ::: section-content This element only includes the global attributes. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;noscript\u0026gt; \u0026lt;!-- anchor linking to external file --\u0026gt; \u0026lt;a href=\u0026#34;https://www.mozilla.org/\u0026#34;\u0026gt;External Link\u0026lt;/a\u0026gt; \u0026lt;/noscript\u0026gt; \u0026lt;p\u0026gt;Rocks!\u0026lt;/p\u0026gt; ::: :::\nResult with scripting enabled # ::: section-content Rocks! :::\nResult with scripting disabled # ::: section-content External Link{target=\u0026quot;_blank\u0026quot;}\nRocks! :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-noscript-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet noscript 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript{._attribution-link} :::\n"},{"id":154,"href":"/docs/references/languages/html/element/object/","title":"Object","section":"HTML","content":" \u0026lt;object\u0026gt;: The External Object element # ::: section-content The \u0026lt;object\u0026gt; HTML element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;object\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element includes the global attributes.\narchive [Deprecated]{.visually-hidden} A space-separated list of URIs for archives of resources for the object.\nborder [Deprecated]{.visually-hidden} The width of a border around the control, in pixels.\nclassid [Deprecated]{.visually-hidden} The URI of the object's implementation. It can be used together with, or in place of, the data attribute.\ncodebase [Deprecated]{.visually-hidden} The base path used to resolve relative URIs specified by classid, data, or archive. If not specified, the default is the base URI of the current document.\ncodetype [Deprecated]{.visually-hidden} The content type of the data specified by classid.\ndata The address of the resource as a valid URL. At least one of data and type must be defined.\ndeclare [Deprecated]{.visually-hidden} The presence of this Boolean attribute makes this element a declaration only. The object must be instantiated by a subsequent \u0026lt;object\u0026gt; element. Repeat the \u0026lt;object\u0026gt; element completely each time the resource is reused.\nform The form element, if any, that the object element is associated with (its form owner). The value of the attribute must be an ID of a \u0026lt;form\u0026gt; element in the same document.\nheight The height of the displayed resource, in CSS pixels{target=\u0026quot;_blank\u0026quot;}. \u0026mdash; (Absolute values only. NO percentages{target=\u0026quot;_blank\u0026quot;})\nname The name of valid browsing context (HTML5), or the name of the control (HTML 4).\nstandby [Deprecated]{.visually-hidden} A message that the browser can show while loading the object's implementation and data.\ntype The content type of the resource specified by data. At least one of data and type must be defined.\nusemap A hash-name reference to a \u0026lt;map\u0026gt; element; that is a '#' followed by the value of a name of a map element.\nwidth The width of the display resource, in CSS pixels{target=\u0026quot;_blank\u0026quot;}. \u0026mdash; (Absolute values only. NO percentages{target=\u0026quot;_blank\u0026quot;}) :::\nExamples # Embed a video # ::: section-content\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;object type=\u0026#34;video/mp4\u0026#34; data=\u0026#34;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm\u0026#34; width=\u0026#34;600\u0026#34; height=\u0026#34;140\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;path/image.jpg\u0026#34; alt=\u0026#34;useful image description\u0026#34; /\u0026gt; \u0026lt;/object\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: :::\nIf the video in the example fails to load, the user will be provided with an image as fallback content. The \u0026lt;img\u0026gt; tag is used to display an image. We include the src attribute set to the path to the image we want to embed. We also include the alt attribute, which provides the image with an accessible name. If the image also fails to load, the content of the alt attribute will be displayed. :::\nTechnical summary # ::: section-content\nContent categories Flow content; phrasing content; embedded content, palpable content; if the element has a usemap attribute, interactive content; listed, submittable form-associated element. Permitted content zero or more \u0026lt;param\u0026gt; elements, then transparent. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts embedded content. Implicit ARIA role No corresponding role Permitted ARIA roles application, document, img DOM interface HTMLObjectElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-object-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet object 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 archive 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 border 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 classid Yes 12 1 Yes Yes Yes Yes Yes 4 Yes Yes Yes codebase 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 codetype 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 data 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 declare 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 form 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 height 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 name 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 standby 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 tabindex 1 12 1 Yes 15 3.1 4.4 18 4 14 2 1.0 type 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 usemap 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 width 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 :::\nSee also # ::: section-content\n\u0026lt;embed\u0026gt; \u0026lt;param\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/object{._attribution-link} :::\n"},{"id":155,"href":"/docs/references/languages/html/element/ol/","title":"Ol","section":"HTML","content":" \u0026lt;ol\u0026gt;: The Ordered List element # ::: section-content The \u0026lt;ol\u0026gt; HTML element represents an ordered list of items \u0026mdash; typically rendered as a numbered list. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;ol\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Mix flour, baking powder, sugar, and salt. In another bowl, mix eggs, milk, and oil. Stir both mixtures together. Fill muffin tray 3/4 full. Bake for 20 minutes. ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} li { font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; margin-bottom: 0.5rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element also accepts the global attributes.\nreversed This Boolean attribute specifies that the list's items are in reverse order. Items will be numbered from high to low.\nstart An integer to start counting from for the list items. Always an Arabic numeral (1, 2, 3, etc.), even when the numbering type is letters or Roman numerals. For example, to start numbering elements from the letter \u0026quot;d\u0026quot; or the Roman numeral \u0026quot;iv,\u0026quot; use start=\u0026quot;4\u0026quot;.\ntype Sets the numbering type:\na for lowercase letters A for uppercase letters i for lowercase Roman numerals I for uppercase Roman numerals 1 for numbers (default) The specified type is used for the entire list unless a different type attribute is used on an enclosed \u0026lt;li\u0026gt; element.\n::: {#sect1 .notecard .note} Note: Unless the type of the list number matters (like legal or technical documents where items are referenced by their number/letter), use the CSS list-style-type property instead. ::: :::\nUsage notes # ::: section-content Typically, ordered list items display with a preceding marker, such as a number or letter.\nThe \u0026lt;ol\u0026gt; and \u0026lt;ul\u0026gt; elements may nest as deeply as desired, alternating between \u0026lt;ol\u0026gt; and \u0026lt;ul\u0026gt; however you like.\nThe \u0026lt;ol\u0026gt; and \u0026lt;ul\u0026gt; elements both represent a list of items. The difference is with the \u0026lt;ol\u0026gt; element, the order is meaningful. For example:\nSteps in a recipe Turn-by-turn directions The list of ingredients in decreasing proportion on nutrition information labels To determine which list to use, try changing the order of the list items; if the meaning changes, use the \u0026lt;ol\u0026gt; element \u0026mdash; otherwise you can use \u0026lt;ul\u0026gt;. :::\nExamples # Simple example # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Fee\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Fi\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Fo\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Fum\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nUsing Roman Numeral type # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;ol type=\u0026#34;i\u0026#34;\u0026gt; \u0026lt;li\u0026gt;Introduction\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;List of Grievances\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Conclusion\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nUsing the start attribute # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;Finishing places of contestants not in the winners\u0026#39; circle:\u0026lt;/p\u0026gt; \u0026lt;ol start=\u0026#34;4\u0026#34;\u0026gt; \u0026lt;li\u0026gt;Speedwalk Stu\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Saunterin\u0026#39; Sam\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Slowpoke Rodriguez\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: ::: :::\nNesting lists # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;first item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; second item \u0026lt;!-- closing \u0026lt;/li\u0026gt; tag is not here! --\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;second item first subitem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second item second subitem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second item third subitem\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- Here\u0026#39;s the closing \u0026lt;/li\u0026gt; tag --\u0026gt; \u0026lt;li\u0026gt;third item\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; :::\nResult # ::: {#sect5 .code-example} ::: iframe ::: ::: :::\nUnordered list inside ordered list # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;first item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; second item \u0026lt;!-- closing \u0026lt;/li\u0026gt; tag is not here! --\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;second item first subitem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second item second subitem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second item third subitem\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- Here\u0026#39;s the closing \u0026lt;/li\u0026gt; tag --\u0026gt; \u0026lt;li\u0026gt;third item\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; :::\nResult # ::: {#sect6 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, and if the \u0026lt;ol\u0026gt; element's children include at least one \u0026lt;li\u0026gt; element, palpable content. Permitted content Zero or more \u0026lt;li\u0026gt;, \u0026lt;script\u0026gt; and \u0026lt;template\u0026gt; elements. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Implicit ARIA role list Permitted ARIA roles directory, group, listbox, menu, menubar, none, presentation, radiogroup, tablist, toolbar, tree DOM interface HTMLOListElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-ol-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet ol 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 compact 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 reversed 18 ≤79 18 No 15 6 4.4 18 18 14 6 1.0 start 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 type 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nOther list-related HTML Elements: \u0026lt;ul\u0026gt;, \u0026lt;li\u0026gt;, \u0026lt;menu\u0026gt; CSS properties that may be specially useful to style the \u0026lt;ol\u0026gt; element: the list-style property, to choose the way the ordinal displays CSS counters, to handle complex nested lists the line-height property, to simulate the deprecated compact attribute the margin property, to control the list indentation ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol{._attribution-link} :::\n"},{"id":156,"href":"/docs/references/languages/html/element/optgroup/","title":"Optgroup","section":"HTML","content":" \u0026lt;optgroup\u0026gt;: The Option Group element # ::: section-content The \u0026lt;optgroup\u0026gt; HTML element creates a grouping of options within a \u0026lt;select\u0026gt; element. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;optgroup\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Choose a dinosaur: Tyrannosaurus Velociraptor Deinonychus Diplodocus Saltasaurus Apatosaurus ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { display: block; margin-bottom: 10px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\n::: {#sect1 .notecard .note} Note: Optgroup elements may not be nested. ::: :::\nAttributes # ::: section-content This element includes the global attributes.\ndisabled If this Boolean attribute is set, none of the items in this option group is selectable. Often browsers grey out such control and it won't receive any browsing events, like mouse clicks or focus-related ones.\nlabel The name of the group of options, which the browser can use when labeling the options in the user interface. This attribute is mandatory if this element is used. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;select\u0026gt; \u0026lt;optgroup label=\u0026#34;Group 1\u0026#34;\u0026gt; \u0026lt;option\u0026gt;Option 1.1\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;optgroup label=\u0026#34;Group 2\u0026#34;\u0026gt; \u0026lt;option\u0026gt;Option 2.1\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Option 2.2\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;optgroup label=\u0026#34;Group 3\u0026#34; disabled\u0026gt; \u0026lt;option\u0026gt;Option 3.1\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Option 3.2\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Option 3.3\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;/select\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content Zero or more \u0026lt;option\u0026gt; elements. Tag omission The start tag is mandatory. The end tag is optional if this element is immediately followed by another \u0026lt;optgroup\u0026gt; element, or if the parent element has no more content. Permitted parents A \u0026lt;select\u0026gt; element. Implicit ARIA role group Permitted ARIA roles No role permitted DOM interface HTMLOptGroupElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-optgroup-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet optgroup 1 12 1 5.5 15 ≤4 4.4 18 4 14 ≤3.2 1.0 disabled 1 12 1 8 15 ≤4 4.4 18 4 14 ≤3.2 1.0 label 1 12 1 5.5 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nOther form-related elements: \u0026lt;form\u0026gt;, \u0026lt;legend\u0026gt;, \u0026lt;label\u0026gt;, \u0026lt;button\u0026gt;, \u0026lt;select\u0026gt;, \u0026lt;datalist\u0026gt;, \u0026lt;option\u0026gt;, \u0026lt;fieldset\u0026gt;, \u0026lt;textarea\u0026gt;, \u0026lt;input\u0026gt;, \u0026lt;output\u0026gt;, \u0026lt;progress\u0026gt; and \u0026lt;meter\u0026gt;. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup{._attribution-link} :::\n"},{"id":157,"href":"/docs/references/languages/html/element/option/","title":"Option","section":"HTML","content":" \u0026lt;option\u0026gt;: The HTML Option element # ::: section-content The \u0026lt;option\u0026gt; HTML element is used to define an item contained in a \u0026lt;select\u0026gt;, an \u0026lt;optgroup\u0026gt;, or a \u0026lt;datalist\u0026gt; element. As such, \u0026lt;option\u0026gt; can represent menu items in popups and other lists of items in an HTML document. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;option\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Choose a pet:\n\u0026lt;select id=\u0026quot;pet-select\u0026quot;\u0026gt; \u0026lt;option value=\u0026quot;\u0026quot;\u0026gt;--Please choose an option--\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;dog\u0026quot;\u0026gt;Dog\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;cat\u0026quot;\u0026gt;Cat\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;hamster\u0026quot;\u0026gt;Hamster\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;parrot\u0026quot;\u0026gt;Parrot\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;spider\u0026quot;\u0026gt;Spider\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;goldfish\u0026quot;\u0026gt;Goldfish\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { font-family: sans-serif; font-size: 1rem; padding-right: 10px; }\nselect { font-size: 0.9rem; padding: 2px 5px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element includes the global attributes.\ndisabled If this Boolean attribute is set, this option is not checkable. Often browsers grey out such control and it won't receive any browsing event, like mouse clicks or focus-related ones. If this attribute is not set, the element can still be disabled if one of its ancestors is a disabled \u0026lt;optgroup\u0026gt; element.\nlabel This attribute is text for the label indicating the meaning of the option. If the label attribute isn't defined, its value is that of the element text content.\nselected If present, this Boolean attribute indicates that the option is initially selected. If the \u0026lt;option\u0026gt; element is the descendant of a \u0026lt;select\u0026gt; element whose multiple attribute is not set, only one single \u0026lt;option\u0026gt; of this \u0026lt;select\u0026gt; element may have the selected attribute.\nvalue The content of this attribute represents the value to be submitted with the form, should this option be selected. If this attribute is omitted, the value is taken from the text content of the option element. :::\nStyling with CSS # ::: section-content Styling the \u0026lt;option\u0026gt; element is highly limited. Options don't inherit the font set on the parent. In Firefox, only color and background-color can be set, however in Chrome and Safari it's not possible to set any properties. You can find more details about styling in our guide to advanced form styling. :::\nExamples # ::: section-content See \u0026lt;select\u0026gt; for examples. :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content Text, possibly with escaped characters (like \u0026amp;eacute;). Tag omission The start tag is mandatory. The end tag is optional if this element is immediately followed by another \u0026lt;option\u0026gt; element or an \u0026lt;optgroup\u0026gt;, or if the parent element has no more content. Permitted parents A \u0026lt;select\u0026gt;, an \u0026lt;optgroup\u0026gt; or a \u0026lt;datalist\u0026gt; element. Implicit ARIA role option Permitted ARIA roles No role permitted DOM interface HTMLOptionElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-option-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari Samsung Explorer Android Android Android on IOS Internet option 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\ndisabled 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nlabel 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\n\\[\\\u0026quot;Before 77, Firefox didn\\'t display the value of the `label` Before 77, Firefox didn\\'t display attribute as option text if element\\'s content was empty. See the value of the `label` attribute [bug 40545](https://bugzil.la/40545).\\\u0026quot;, \\\u0026quot;Historically, Firefox as option text if element\\'s has allowed keyboard and mouse events to bubble up from the content was empty. See [bug `\u0026lt;option\u0026gt;` element to the parent `\u0026lt;select\u0026gt;` element, although 40545](https://bugzil.la/40545). this behavior is inconsistent across many browsers. For better Web compatibility (and for technical reasons), they will not bubble up when Firefox is in multi-process mode and the `\u0026lt;select\u0026gt;` element is displayed as a drop-down list. The behavior is unchanged if the `\u0026lt;select\u0026gt;` is presented inline and it has either the `multiple` attribute defined or a `size` attribute set to more than `1`. Rather than watching `\u0026lt;option\u0026gt;` elements for events, you should watch for [change](https://developer.mozilla.org/docs/Web/Events/change) events on `\u0026lt;select\u0026gt;`. See [bug 1090602](https://bugzil.la/1090602) for details.\\\u0026quot;, \\\u0026quot;When Mozilla introduced dedicated content threads to Firefox (through the Electrolysis, or e10s, project), support for styling `\u0026lt;option\u0026gt;` elements was removed temporarily. Starting in Firefox 54, you can apply foreground and background colors to `\u0026lt;option\u0026gt;` elements again, using the `color` and `background-color` CSS properties. See [bug 910022](https://bugzil.la/910022) for more information. Note that this is still disabled in Linux due to lack of contrast (see [bug 1338283](https://bugzil.la/1338283) for progress on this).\\\u0026quot;\\] selected 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nvalue 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 # :::\nSee also # ::: section-content\nOther form-related elements: \u0026lt;form\u0026gt;, \u0026lt;legend\u0026gt;, \u0026lt;label\u0026gt;, \u0026lt;button\u0026gt;, \u0026lt;select\u0026gt;, \u0026lt;datalist\u0026gt;, \u0026lt;optgroup\u0026gt;, \u0026lt;fieldset\u0026gt;, \u0026lt;textarea\u0026gt;, \u0026lt;input\u0026gt;, \u0026lt;output\u0026gt;, \u0026lt;progress\u0026gt; and \u0026lt;meter\u0026gt;. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/option{._attribution-link} :::\n"},{"id":158,"href":"/docs/references/languages/html/element/output/","title":"Output","section":"HTML","content":" \u0026lt;output\u0026gt;: The Output element # ::: section-content The \u0026lt;output\u0026gt; HTML element is a container element into which a site or app can inject the results of a calculation or the outcome of a user action. :::\nAttributes # ::: section-content This element includes the global attributes.\nfor A space-separated list of other elements' ids, indicating that those elements contributed input values to (or otherwise affected) the calculation.\nform The \u0026lt;form\u0026gt; element to associate the output with (its form owner). The value of this attribute must be the id of a \u0026lt;form\u0026gt; in the same document. (If this attribute is not set, the \u0026lt;output\u0026gt; is associated with its ancestor \u0026lt;form\u0026gt; element, if any.)\nThis attribute lets you associate \u0026lt;output\u0026gt; elements to \u0026lt;form\u0026gt;s anywhere in the document, not just inside a \u0026lt;form\u0026gt;. It can also override an ancestor \u0026lt;form\u0026gt; element.\nname The element's name. Used in the form.elements API.\nThe \u0026lt;output\u0026gt; value, name, and contents are NOT submitted during form submission. :::\nExamples # ::: section-content In the following example, the form provides a slider whose value can range between 0 and 100, and an \u0026lt;input\u0026gt; element into which you can enter a second number. The two numbers are added together, and the result is displayed in the \u0026lt;output\u0026gt; element each time the value of any of the controls changes.\n::: code-example [html]{.language-name}\n\u0026lt;form oninput=\u0026#34;result.value=parseInt(a.value)+parseInt(b.value)\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;range\u0026#34; id=\u0026#34;b\u0026#34; name=\u0026#34;b\u0026#34; value=\u0026#34;50\u0026#34; /\u0026gt; + \u0026lt;input type=\u0026#34;number\u0026#34; id=\u0026#34;a\u0026#34; name=\u0026#34;a\u0026#34; value=\u0026#34;10\u0026#34; /\u0026gt; = \u0026lt;output name=\u0026#34;result\u0026#34; for=\u0026#34;a b\u0026#34;\u0026gt;60\u0026lt;/output\u0026gt; \u0026lt;/form\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nAccessibility Concerns # ::: section-content Many browsers implement this element as an aria-live region. Assistive technology will thereby announce the results of UI interactions posted inside it without requiring that focus is switched away from the controls that produce those results. :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, listed, labelable, resettable form-associated element, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role status Permitted ARIA roles Any DOM interface HTMLOutputElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-output-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet output 10 ≤18 4 No 11 7 4.4 18 4 11 7 1.0 for 10 ≤18 4 No 11 7 4.4 18 4 11 7 1.0 form 10 ≤18 4 No 11 7 4.4 18 4 11 7 1.0 name 10 ≤18 4 No 11 7 4.4 18 4 11 7 1.0 :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/output{._attribution-link} :::\n"},{"id":159,"href":"/docs/references/languages/html/element/p/","title":"P","section":"HTML","content":" \u0026lt;p\u0026gt;: The Paragraph element # ::: section-content The \u0026lt;p\u0026gt; HTML element represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields.\nParagraphs are block-level elements, and notably will automatically close if another block-level element is parsed before the closing \u0026lt;/p\u0026gt; tag. See \u0026quot;Tag omission\u0026quot; below. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;p\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Geckos are a group of usually small, usually nocturnal lizards. They are found on every continent except Antarctica. \u0026lt;p\u0026gt;Some species live in houses where they hunt insects attracted by artificial light.\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p { margin: 10px 0; padding: 5px; border: 1px solid #999; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nContent categories Flow content, palpable content. Permitted content Phrasing content. Tag omission The start tag is required. The end tag may be omitted if the \u0026lt;p\u0026gt; element is immediately followed by an \u0026lt;address\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;aside\u0026gt;, \u0026lt;blockquote\u0026gt;, \u0026lt;details\u0026gt;, \u0026lt;div\u0026gt;, \u0026lt;dl\u0026gt;, \u0026lt;fieldset\u0026gt;, \u0026lt;figcaption\u0026gt;, \u0026lt;figure\u0026gt;, \u0026lt;footer\u0026gt;, \u0026lt;form\u0026gt;, h1, h2, h3, h4, h5, h6, \u0026lt;header\u0026gt;, \u0026lt;hgroup\u0026gt;, \u0026lt;hr\u0026gt;, \u0026lt;main\u0026gt;, \u0026lt;menu\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;ol\u0026gt;, \u0026lt;pre\u0026gt;, \u0026lt;search\u0026gt;, \u0026lt;section\u0026gt;, \u0026lt;table\u0026gt;, \u0026lt;ul\u0026gt; or another \u0026lt;p\u0026gt; element, or if there is no more content in the parent element and the parent element is not an \u0026lt;a\u0026gt;, \u0026lt;audio\u0026gt;, \u0026lt;del\u0026gt;, \u0026lt;ins\u0026gt;, \u0026lt;map\u0026gt;, \u0026lt;noscript\u0026gt; or \u0026lt;video\u0026gt; element, or an autonomous custom element. Permitted parents Any element that accepts flow content. Implicit ARIA role paragraph Permitted ARIA roles Any DOM interface HTMLParagraphElement ::: Attributes # ::: section-content This element only includes the global attributes.\n::: {#sect1 .notecard .note} Note: The align attribute on \u0026lt;p\u0026gt; tags is obsolete and shouldn't be used. ::: :::\nExamples # HTML # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; This is the first paragraph of text. This is the first paragraph of text. This is the first paragraph of text. This is the first paragraph of text. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; This is the second paragraph. This is the second paragraph. This is the second paragraph. This is the second paragraph. \u0026lt;/p\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nStyling paragraphs # ::: section-content By default, browsers separate paragraphs with a single blank line. Alternate separation methods, such as first-line indentation, can be achieved with CSS: :::\nHTML # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; Separating paragraphs with blank lines is easiest for readers to scan, but they can also be separated by indenting their first lines. This is often used to take up less space, such as to save paper in print. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Writing that is intended to be edited, such as school papers and rough drafts, uses both blank lines and indentation for separation. In finished works, combining both is considered redundant and amateurish. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; In very old writing, paragraphs were separated with a special character: ¶, the \u0026lt;i\u0026gt;pilcrow\u0026lt;/i\u0026gt;. Nowadays, this is considered claustrophobic and hard to read. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; How hard to read? See for yourself: \u0026lt;button data-toggle-text=\u0026#34;Oh no! Switch back!\u0026#34;\u0026gt; Use pilcrow for paragraphs \u0026lt;/button\u0026gt; \u0026lt;/p\u0026gt; ::: :::\nCSS # ::: section-content ::: code-example [css]{.language-name}\np { margin: 0; text-indent: 3ch; } p.pilcrow { text-indent: 0; display: inline; } p.pilcrow + p.pilcrow::before { content: \u0026#34; ¶ \u0026#34;; } ::: :::\nJavaScript # ::: section-content ::: code-example [js]{.language-name}\ndocument.querySelector(\u0026#34;button\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, (event) =\u0026gt; { document.querySelectorAll(\u0026#34;p\u0026#34;).forEach((paragraph) =\u0026gt; { paragraph.classList.toggle(\u0026#34;pilcrow\u0026#34;); }); [event.target.innerText, event.target.dataset.toggleText] = [ event.target.dataset.toggleText, event.target.innerText, ]; }); ::: :::\nResult # ::: section-content ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # ::: section-content Breaking up content into paragraphs helps make a page more accessible. Screen-readers and other assistive technology provide shortcuts to let their users skip to the next or previous paragraph, letting them skim content like how white space lets visual users skip around.\nUsing empty \u0026lt;p\u0026gt; elements to add space between paragraphs is problematic for people who navigate with screen-reading technology. Screen readers may announce the paragraph's presence, but not any content contained within it \u0026mdash; because there is none. This can confuse and frustrate the person using the screen reader.\nIf extra space is desired, use CSS properties like margin to create the effect:\n::: code-example [css]{.language-name}\np { margin-bottom: 2em; /* increase white space after a paragraph */ } ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-p-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet p 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 :::\nSee also # ::: section-content\n\u0026lt;hr\u0026gt; \u0026lt;br\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/p{._attribution-link} :::\n"},{"id":160,"href":"/docs/references/languages/html/element/param/","title":"Param","section":"HTML","content":" \u0026lt;param\u0026gt;: The Object Parameter element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;param\u0026gt; HTML element defines parameters for an \u0026lt;object\u0026gt; element. :::\nAttributes # ::: section-content This element includes the global attributes.\nname [Deprecated]{.visually-hidden} Name of the parameter.\nvalue [Deprecated]{.visually-hidden} Specifies the value of the parameter.\ntype [Deprecated]{.visually-hidden} Only used if the valuetype is set to ref. Specifies the MIME type of values found at the URI specified by value.\nvaluetype [Deprecated]{.visually-hidden} Specifies the type of the value attribute. Possible values are:\ndata: Default value. The value is passed to the object's implementation as a string. ref: The value is a URI to a resource where run-time values are stored. object: An ID of another \u0026lt;object\u0026gt; in the same document. ::: Technical summary # ::: section-content\nContent categories None. Permitted content None; it is a void element. Tag omission As it is a void element, the start tag must be present and the end tag must not be present. Permitted parents An \u0026lt;object\u0026gt; before any flow content. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLParamElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-param-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet param 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 name 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 type 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 value 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 valuetype 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\n\u0026lt;object\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/param{._attribution-link} :::\n"},{"id":161,"href":"/docs/references/languages/html/element/picture/","title":"Picture","section":"HTML","content":" \u0026lt;picture\u0026gt;: The Picture element # ::: section-content The \u0026lt;picture\u0026gt; HTML element contains zero or more \u0026lt;source\u0026gt; elements and one \u0026lt;img\u0026gt; element to offer alternative versions of an image for different display/device scenarios.\nThe browser will consider each child \u0026lt;source\u0026gt; element and choose the best match among them. If no matches are found\u0026mdash;or the browser doesn't support the \u0026lt;picture\u0026gt; element\u0026mdash;the URL of the \u0026lt;img\u0026gt; element's src attribute is selected. The selected image is then presented in the space occupied by the \u0026lt;img\u0026gt; element. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;picture\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} \u0026lt;picture\u0026gt; \u0026lt;source srcset=\u0026quot;/media/cc0-images/surfer-240-200.jpg\u0026quot; media=\u0026quot;(orientation: portrait)\u0026quot; /\u0026gt; \u0026lt;img src=\u0026quot;/media/cc0-images/painted-hand-298-332.jpg\u0026quot; alt=\u0026quot;\u0026quot; /\u0026gt; \u0026lt;/picture\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nTo decide which URL to load, the user agent examines each \u0026lt;source\u0026gt;'s srcset, media, and type attributes to select a compatible image that best matches the current layout and capabilities of the display device.\nThe \u0026lt;img\u0026gt; element serves two purposes:\nIt describes the size and other attributes of the image and its presentation. It provides a fallback in case none of the offered \u0026lt;source\u0026gt; elements are able to provide a usable image. Common use cases for \u0026lt;picture\u0026gt;:\nArt direction. Cropping or modifying images for different media conditions (for example, loading a simpler version of an image which has too many details, on smaller displays).\nOffering alternative image formats, for cases where certain formats are not supported.\n::: {#sect1 .notecard .note} Note: For example, newer formats like AVIF or WEBP have many advantages, but might not be supported by the browser. A list of supported image formats can be found in: Image file type and format guide. :::\nSaving bandwidth and speeding page load times by loading the most appropriate image for the viewer's display.\nIf providing higher-density versions of an image for high-DPI (Retina) display, use srcset on the \u0026lt;img\u0026gt; element instead. This lets browsers opt for lower-density versions in data-saving modes, and you don't have to write explicit media conditions.\nContent categories Flow content, phrasing content, embedded content Permitted content Zero or more \u0026lt;source\u0026gt; elements, followed by one \u0026lt;img\u0026gt; element, optionally intermixed with script-supporting elements. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that allows embedded content. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLPictureElement ::: Attributes # ::: section-content This element includes only global attributes. :::\nUsage notes # ::: section-content You can use the object-position property to adjust the positioning of the image within the element's frame, and the object-fit property to control how the image is resized to fit within the frame.\n::: {#sect2 .notecard .note} Note: Use these properties on the child \u0026lt;img\u0026gt; element, not the \u0026lt;picture\u0026gt; element. ::: :::\nExamples # ::: section-content These examples demonstrate how different attributes of the \u0026lt;source\u0026gt; element change the selection of the image inside \u0026lt;picture\u0026gt;. :::\nThe media attribute # ::: section-content The media attribute specifies a media condition (similar to a media query) that the user agent will evaluate for each \u0026lt;source\u0026gt; element.\nIf the \u0026lt;source\u0026gt;'s media condition evaluates to false, the browser skips it and evaluates the next element inside \u0026lt;picture\u0026gt;.\n::: code-example [html]{.language-name}\n\u0026lt;picture\u0026gt; \u0026lt;source srcset=\u0026#34;mdn-logo-wide.png\u0026#34; media=\u0026#34;(min-width: 600px)\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;mdn-logo-narrow.png\u0026#34; alt=\u0026#34;MDN\u0026#34; /\u0026gt; \u0026lt;/picture\u0026gt; ::: :::\nThe srcset attribute # ::: section-content The srcset attribute is used to offer a list of possible images based on size or the display's pixel density.\nIt is composed of a comma-separated list of image descriptors. Each image descriptor is composed of a URL of the image, and either:\na width descriptor, followed by a w (such as 300w); OR a pixel density descriptor, followed by an x (such as 2x) to serve a high-res image for high-DPI screens. Make sure to note that:\nwidth and pixel density descriptors should not be used together a missing pixel density descriptor implies 1x duplicate descriptor values are not allowed (2x \u0026amp; 2x, 100w \u0026amp; 100w) The following example illustrates the usage of srcset attribute with the \u0026lt;source\u0026gt; element to specify a high-density and standard-resolution image:\n::: code-example [html]{.language-name}\n\u0026lt;picture\u0026gt; \u0026lt;source srcset=\u0026#34;logo.png, logo-1.5x.png 1.5x\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;logo.png\u0026#34; alt=\u0026#34;MDN Web Docs logo\u0026#34; height=\u0026#34;320\u0026#34; width=\u0026#34;320\u0026#34; /\u0026gt; \u0026lt;/picture\u0026gt; :::\nThe srcset attribute can also be used on the \u0026lt;img\u0026gt; element without needing the \u0026lt;picture\u0026gt; element. The following example demonstrates how to use the srcset attribute to specify standard-resolution and high-density images, respectively:\n::: code-example [html]{.language-name}\n\u0026lt;img srcset=\u0026#34;logo.png, logo-2x.png 2x\u0026#34; src=\u0026#34;logo.png\u0026#34; height=\u0026#34;320\u0026#34; width=\u0026#34;320\u0026#34; alt=\u0026#34;MDN Web Docs logo\u0026#34; /\u0026gt; :::\nThe sizes attribute is not mandatory when using srcset, but it is recommended to use it in order to provide additional information to the browser to help it select the best image source.\nWithout sizes, the browser will use the default size of the image as specified by its dimensions in pixels. This may not be the best fit for all devices, especially if the image is displayed on different screen sizes or in different contexts.\nPlease note that sizes will have its effect only if width dimension descriptors are provided with srcset instead of pixel ratio values (200w instead of 2x for example). For more information on using srcset, see the Responsive images documentation. :::\nThe type attribute # ::: section-content The type attribute specifies a MIME type for the resource URL(s) in the \u0026lt;source\u0026gt; element's srcset attribute. If the user agent does not support the given type, the \u0026lt;source\u0026gt; element is skipped.\n::: code-example [html]{.language-name}\n\u0026lt;picture\u0026gt; \u0026lt;source srcset=\u0026#34;photo.avif\u0026#34; type=\u0026#34;image/avif\u0026#34; /\u0026gt; \u0026lt;source srcset=\u0026#34;photo.webp\u0026#34; type=\u0026#34;image/webp\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;photo.jpg\u0026#34; alt=\u0026#34;photo\u0026#34; /\u0026gt; \u0026lt;/picture\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-picture-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet picture 38 13 38 No 25 9.1 38 38 38 25 9.3 3.0 :::\nSee also # ::: section-content\n\u0026lt;img\u0026gt; element \u0026lt;source\u0026gt; element Positioning and sizing the picture within its frame: object-position and object-fit Image file type and format guide ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture{._attribution-link} :::\n"},{"id":162,"href":"/docs/references/languages/html/element/plaintext/","title":"Plaintext","section":"HTML","content":" \u0026lt;plaintext\u0026gt;: The Plain Text element (Deprecated) # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;plaintext\u0026gt; HTML element renders everything following the start tag as raw text, ignoring any following HTML. There is no closing tag, since everything after it is considered raw text.\n::: {#sect2 .notecard .warning} Warning: Do not use this element.\n\u0026lt;plaintext\u0026gt; is deprecated since HTML 2, and not all browsers implemented it. Browsers that did implement it didn't do so consistently. \u0026lt;plaintext\u0026gt; is obsolete; browsers that accept it may instead treat it as a \u0026lt;pre\u0026gt; element that still interprets HTML within. If \u0026lt;plaintext\u0026gt; is the first element on the page (other than any non-displayed elements, like \u0026lt;head\u0026gt;), do not use HTML at all. Instead serve a text file with the text/plain MIME-type. Instead of \u0026lt;plaintext\u0026gt;, use the \u0026lt;pre\u0026gt; element or, if semantically accurate (such as for inline text), the \u0026lt;code\u0026gt; element. Escape any \u0026lt;, \u0026gt; and \u0026amp; characters, to prevent browsers inadvertently parsing content the element content as HTML. A monospaced font can be applied to any HTML element via a CSS font-family style with the monospace generic value. ::: ::: Attributes # ::: section-content This element has no other attributes than the global attributes common to all elements. :::\nDOM interface # ::: section-content This element implements the HTMLElement interface. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# plaintext]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android plaintext 1 12 4 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\n1--4 Before Firefox 4, this element implemented the `HTMLSpanElement` interface instead of the standard `HTMLElement` interface. :::\nSee also # ::: section-content\nThe \u0026lt;pre\u0026gt; and \u0026lt;code\u0026gt; elements, which should be used instead. The \u0026lt;xmp\u0026gt; element, also obsolete, similar to \u0026lt;plaintext\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;}. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/plaintext{._attribution-link} :::\n"},{"id":163,"href":"/docs/references/languages/html/element/portal/","title":"Portal","section":"HTML","content":" \u0026lt;portal\u0026gt;: The Portal element # ::: section-content ::: {#sect1 .notecard .experimental} Experimental: This is an experimental technology\nCheck the Browser compatibility table carefully before using this in production. :::\nThe \u0026lt;portal\u0026gt; HTML element enables the embedding of another HTML page into the current one for the purposes of allowing smoother navigation into new pages.\nA \u0026lt;portal\u0026gt; is similar to an \u0026lt;iframe\u0026gt;. An \u0026lt;iframe\u0026gt; allows a separate browsing context to be embedded. However, the embedded content of a \u0026lt;portal\u0026gt; is more limited than that of an \u0026lt;iframe\u0026gt;. It cannot be interacted with, and therefore is not suitable for embedding widgets into a document. Instead, the \u0026lt;portal\u0026gt; acts as a preview of the content of another page. It can be navigated into therefore allowing for seamless transition to the embedded content. :::\nAttributes # ::: section-content This element includes the global attributes.\nreferrerpolicy Sets the referrer policy to use when requesting the page at the URL given as the value of the src attribute.\nsrc The URL of the page to embed. :::\nExamples # Basic example # ::: section-content The following example will embed the contents of https://example.com as a preview.\n::: code-example [html]{.language-name}\n\u0026lt;portal id=\u0026#34;exampleportal\u0026#34; src=\u0026#34;https://example.com/\u0026#34;\u0026gt;\u0026lt;/portal\u0026gt; ::: :::\nAccessibility concerns # ::: section-content The preview displayed by a \u0026lt;portal\u0026gt; is not interactive, therefore does not receive input events or focus. Therefore the embedded contents of the portal are not exposed as elements in the accessibility tree. The portal can be navigated to and activated like a button, the default behavior when clicking on the portal is to activate it.\nPortals are given a default label which is the title of the embedded page. If no title is present the visible text in the preview is concatenated to create a label. The aria-label attribute can be used to override this.\nPortals used for prerendering only should be hidden with the hidden HTML attribute or the CSS display property with a value of none.\nWhen using animations during portal activation the prefers-reduced-motion media feature should be respected. :::\nTechnical summary # ::: section-content\nImplicit ARIA role button DOM interface HTMLPortalElement ::: Specifications # ::: _table # Specification # Portals\n[# the-portal-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet portal 85 90 No No 73 No ? 85 No No No No :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/portal{._attribution-link} :::\n"},{"id":164,"href":"/docs/references/languages/html/element/pre/","title":"Pre","section":"HTML","content":" \u0026lt;pre\u0026gt;: The Preformatted Text element # ::: section-content The \u0026lt;pre\u0026gt; HTML element represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or monospaced{target=\u0026quot;_blank\u0026quot;}, font. Whitespace inside this element is displayed as written. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;pre\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} L TE A A C V R A DOU LOU REUSE QUE TU PORTES ET QUI T' ORNE O CI VILISÉ OTE- TU VEUX LA BIEN SI RESPI RER - Apollinaire ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} pre { font-size: 0.7rem; margin: 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nIf you have to display reserved characters such as \u0026lt;, \u0026gt;, \u0026amp;, and \u0026quot; within the \u0026lt;pre\u0026gt; tag, the characters must be escaped using their respective HTML entity. :::\nAttributes # ::: section-content This element only includes the global attributes.\ncols [Non-standard]{.visually-hidden} [Deprecated]{.visually-hidden} Contains the preferred count of characters that a line should have. It was a non-standard synonym of width. To achieve such an effect, use CSS width instead.\nwidth [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} Contains the preferred count of characters that a line should have. Though technically still implemented, this attribute has no visual effect; to achieve such an effect, use CSS width instead.\nwrap [Non-standard]{.visually-hidden} [Deprecated]{.visually-hidden} Is a hint indicating how the overflow must happen. In modern browser this hint is ignored and no visual effect results in its present; to achieve such an effect, use CSS white-space instead. :::\nAccessibility concerns # ::: section-content It is important to provide an alternate description for any images or diagrams created using preformatted text. The alternate description should clearly and concisely describe the image or diagram's content.\nPeople experiencing low vision conditions and browsing with the aid of assistive technology such as a screen reader may not understand what the preformatted text characters are representing when they are read out in sequence.\nA combination of the \u0026lt;figure\u0026gt; and \u0026lt;figcaption\u0026gt; elements, supplemented by the ARIA role and aria-label attributes on the pre element allow the preformatted ASCII art to be announced as an image with alternative text, and the figcaption serving as the image's caption. :::\nExample # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;figure\u0026gt; \u0026lt;pre role=\u0026#34;img\u0026#34; aria-label=\u0026#34;ASCII COW\u0026#34;\u0026gt; ___________________________ \u0026amp;lt; I\u0026#39;m an expert in my field. \u0026amp;gt; --------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || \u0026lt;/pre\u0026gt; \u0026lt;figcaption id=\u0026#34;cow-caption\u0026#34;\u0026gt; A cow saying, \u0026#34;I\u0026#39;m an expert in my field.\u0026#34; The cow is illustrated using preformatted text characters. \u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; :::\nMDN Understanding WCAG, Guideline 1.1 explanations H86: Providing text alternatives for ASCII art, emoticons, and leetspeak | W3C Techniques for WCAG 2.0{target=\u0026quot;_blank\u0026quot;} ::: Examples # Basic example # ::: section-content\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;Using CSS to change the font color is easy.\u0026lt;/p\u0026gt; \u0026lt;pre\u0026gt; body { color: red; } \u0026lt;/pre\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nEscaping reserved characters # ::: section-content\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;pre\u0026gt; let i = 5; if (i \u0026amp;lt; 10 \u0026amp;amp;\u0026amp;amp; i \u0026amp;gt; 0) return \u0026amp;quot;Single Digit Number\u0026amp;quot; \u0026lt;/pre\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Implicit ARIA role generic Permitted ARIA roles Any DOM interface HTMLPreElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-pre-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Opera Safari on Samsung Explorer Android Android Android Android IOS Internet pre 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\ncols No No 1\u0026ndash;29 No No No No No 4\u0026ndash;29 No No No\nwidth 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nSpecifying Specifying Since Specifying Specifying Specifying Specifying Specifying Since Specifying Specifying Specifying the `width` the `width` Firefox 29, the `width` the `width` the `width` the `width` the `width` Firefox 29, the `width` the `width` the `width` attribute attribute specifying attribute attribute attribute attribute attribute specifying attribute attribute attribute has no has no the `width` has no has no has no has no has no the `width` has no has no has no layout layout attribute layout layout layout layout layout attribute layout layout layout effect. effect. has no effect. effect. effect. effect. effect. has no effect. effect. effect. layout layout effect. effect. wrap 16 79 1 No 15 6 4.4 18 4 14 6 1.0 # :::\nSee also # ::: section-content\nCSS: white-space, word-break HTML Entity Related element: \u0026lt;code\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre{._attribution-link} :::\n"},{"id":165,"href":"/docs/references/languages/html/element/progress/","title":"Progress","section":"HTML","content":" \u0026lt;progress\u0026gt;: The Progress Indicator element # ::: section-content The \u0026lt;progress\u0026gt; HTML element displays an indicator showing the completion progress of a task, typically displayed as a progress bar. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;progress\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} File progress:\n\u0026lt;progress id=\u0026quot;file\u0026quot; max=\u0026quot;100\u0026quot; value=\u0026quot;70\u0026quot;\u0026gt;70%\u0026lt;/progress\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { padding-right: 10px; font-size: 1rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nContent categories Flow content, phrasing content, labelable content, palpable content. Permitted content Phrasing content, but there must be no \u0026lt;progress\u0026gt; element among its descendants. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role progressbar Permitted ARIA roles No role permitted DOM interface HTMLProgressElement ::: Attributes # ::: section-content This element includes the global attributes.\nmax This attribute describes how much work the task indicated by the progress element requires. The max attribute, if present, must have a value greater than 0 and be a valid floating point number. The default value is 1.\nvalue This attribute specifies how much of the task that has been completed. It must be a valid floating point number between 0 and max, or between 0 and 1 if max is omitted. If there is no value attribute, the progress bar is indeterminate; this indicates that an activity is ongoing with no indication of how long it is expected to take.\n::: {#sect1 .notecard .note} Note: Unlike the \u0026lt;meter\u0026gt; element, the minimum value is always 0, and the min attribute is not allowed for the \u0026lt;progress\u0026gt; element. :::\n::: {#sect2 .notecard .note} Note: The :indeterminate pseudo-class can be used to match against indeterminate progress bars. To change the progress bar to indeterminate after giving it a value you must remove the value attribute with element.removeAttribute('value'). ::: :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;progress value=\u0026#34;70\u0026#34; max=\u0026#34;100\u0026#34;\u0026gt;70 %\u0026lt;/progress\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nAccessibility Concerns # Labelling # ::: section-content In most cases you should provide an accessible label when using \u0026lt;progress\u0026gt;. While you can use the standard ARIA labelling attributes aria-labelledby or aria-label as you would for any element with role=\u0026quot;progressbar\u0026quot;, when using \u0026lt;progress\u0026gt; you can alternatively use the \u0026lt;label\u0026gt; element.\n::: {#sect4 .notecard .note} Note: Text placed between the element's tags is not an accessible label, it is only recommended as a fallback for old browsers that do not support this element. :::\nExamples # ::: code-example [html]{.language-name}\n\u0026lt;label\u0026gt; Uploading Document: \u0026lt;progress value=\u0026#34;70\u0026#34; max=\u0026#34;100\u0026#34;\u0026gt;70 %\u0026lt;/progress\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;!-- OR --\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;label for=\u0026#34;progress-bar\u0026#34;\u0026gt;Uploading Document\u0026lt;/label\u0026gt; \u0026lt;progress id=\u0026#34;progress-bar\u0026#34; value=\u0026#34;70\u0026#34; max=\u0026#34;100\u0026#34;\u0026gt;70 %\u0026lt;/progress\u0026gt; :::\nResult # ::: {#sect5 .code-example} ::: iframe ::: ::: :::\nDescribing a particular region # ::: section-content If the \u0026lt;progress\u0026gt; element is describing the loading progress of a section of a page, use aria-describedby to point to the status, and set aria-busy=\u0026quot;true\u0026quot; on the section that is being updated, removing the aria-busy attribute when it has finished loading.\nExamples # ::: code-example [html]{.language-name}\n\u0026lt;div aria-busy=\u0026#34;true\u0026#34; aria-describedby=\u0026#34;progress-bar\u0026#34;\u0026gt; \u0026lt;!-- content is for this region is loading --\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;progress id=\u0026#34;progress-bar\u0026#34; aria-label=\u0026#34;Content loading…\u0026#34;\u0026gt;\u0026lt;/progress\u0026gt; :::\nResult # ::: {#sect6 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-progress-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari on IOS Samsung Explorer Android Android Android Internet progress 6 12 6 10 11 6 4.4 18 6 11 7 1.0\n\\[\\\u0026quot;Before Firefox 14, \\[\\\u0026quot;Before Firefox 14, Safari on iOS the `\u0026lt;progress\u0026gt;` the `\u0026lt;progress\u0026gt;` does not element was incorrectly element was incorrectly support classified as a form classified as a form indeterminate element, and therefore element, and therefore progress bars had a `form` attribute. had a `form` attribute. (they are This has been fixed.\\\u0026quot;, This has been fixed.\\\u0026quot;, rendered like \\\u0026quot;Firefox provides the \\\u0026quot;Firefox provides the 0%-completed `::-moz-progress-bar` `::-moz-progress-bar` progress bars). pseudo-element, which pseudo-element, which lets you style the part lets you style the part of the interior of the of the interior of the progress bar progress bar representing the amount representing the amount of work completed so of work completed so far.\\\u0026quot;\\] far.\\\u0026quot;\\] max 6 12 6 10 11 6 4.4 18 6 11 7 1.0\nvalue 6 12 6 10 11 6 4.4 18 6 11 7 1.0 # :::\nSee also # ::: section-content\n\u0026lt;meter\u0026gt; :indeterminate -moz-orient ::-moz-progress-bar ::-webkit-progress-bar ::-webkit-progress-value ::-webkit-progress-inner-element ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress{._attribution-link} :::\n"},{"id":166,"href":"/docs/references/languages/html/element/q/","title":"Q","section":"HTML","content":" \u0026lt;q\u0026gt;: The Inline Quotation element # ::: section-content The \u0026lt;q\u0026gt; HTML element indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the \u0026lt;blockquote\u0026gt; element. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;q\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} When Dave asks HAL to open the pod bay door, HAL answers: I\u0026rsquo;m sorry, Dave. I\u0026rsquo;m afraid I can\u0026rsquo;t do that. ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} q { font-style: italic; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element includes the global attributes.\ncite The value of this attribute is a URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; According to Mozilla\u0026#39;s website, \u0026lt;q cite=\u0026#34;https://www.mozilla.org/en-US/about/history/details/\u0026#34;\u0026gt; Firefox 1.0 was released in 2004 and became a big success. \u0026lt;/q\u0026gt; \u0026lt;/p\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role generic Permitted ARIA roles Any DOM interface HTMLQuoteElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-q-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet q 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 :::\nSee also # ::: section-content\nThe \u0026lt;blockquote\u0026gt; element for long quotations. The \u0026lt;cite\u0026gt; element for source citations. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/q{._attribution-link} :::\n"},{"id":167,"href":"/docs/references/languages/html/element/rb/","title":"Rb","section":"HTML","content":" \u0026lt;rb\u0026gt;: The Ruby Base element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;rb\u0026gt; HTML element is used to delimit the base text component of a \u0026lt;ruby\u0026gt; annotation, i.e. the text that is being annotated. One \u0026lt;rb\u0026gt; element should wrap each separate atomic segment of the base text. :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content\nRuby annotations are for showing pronunciation of East Asian characters, like using Japanese furigana or Taiwanese bopomofo characters. The \u0026lt;rb\u0026gt; element is used to separate out each segment of the ruby base text. Even though \u0026lt;rb\u0026gt; is not a void element, it is common to just include the opening tag of each element in the source code, so that the ruby markup is less complex and easier to read. The browser can then fill in the full element in the rendered version. You need to include one \u0026lt;rt\u0026gt; element for each base segment/\u0026lt;rb\u0026gt; element that you want to annotate. ::: Examples # Using rb # ::: section-content In this example, we provide an annotation for the original character equivalent of \u0026quot;Kanji\u0026quot;:\n::: code-example [html]{.language-name}\n\u0026lt;ruby\u0026gt; \u0026lt;rb\u0026gt;漢\u0026lt;/rb\u0026gt;\u0026lt;rb\u0026gt;字 \u0026lt;/rb\u0026gt;\u0026lt;rp\u0026gt;(\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;kan\u0026lt;/rt\u0026gt;\u0026lt;rt\u0026gt;ji\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;)\u0026lt;/rp\u0026gt; \u0026lt;/ruby\u0026gt; :::\nNote how we've included two \u0026lt;rb\u0026gt; elements, to delimit the two separate parts of the ruby base text. The annotation on the other hand is delimited by two \u0026lt;rt\u0026gt; elements.\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nSeparate annotations # ::: section-content Note that we could also write this example with the two base text parts annotated completely separately. In this case we don't need to include \u0026lt;rb\u0026gt; elements:\n::: code-example [html]{.language-name}\n\u0026lt;ruby\u0026gt; 漢 \u0026lt;rp\u0026gt;(\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;Kan\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;)\u0026lt;/rp\u0026gt; 字 \u0026lt;rp\u0026gt;(\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;ji\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;)\u0026lt;/rp\u0026gt; \u0026lt;/ruby\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: :::\nSee the article about the \u0026lt;ruby\u0026gt; element for further examples. :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content As a child of a \u0026lt;ruby\u0026gt; element. Tag omission The end tag can be omitted if the element is immediately followed by an \u0026lt;rt\u0026gt;, \u0026lt;rtc\u0026gt;, or \u0026lt;rp\u0026gt; element or another \u0026lt;rb\u0026gt; element, or if there is no more content in the parent element. Permitted parents A \u0026lt;ruby\u0026gt; element. Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# rb]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari on Samsung Explorer Android Android for Android IOS Internet Android rb 5 79 38 5 15 5 4.4 18 38 14 4.2 1.0\nBlink has Blink has Blink has Safari has Blink has Blink has Blink has Safari has Blink has support for support for support for support for support for support for support for support for support for parsing the parsing the parsing the parsing the parsing the parsing the parsing the parsing the parsing the `rb` `rb` `rb` `rb` `rb` `rb` `rb` `rb` `rb` element, element, element, element, element, element, element, element, element, but not for but not for but not for but not for but not for but not for but not for but not for but not for rendering rendering rendering rendering rendering rendering rendering rendering rendering `rb` `rb` `rb` `rb` `rb` `rb` `rb` `rb` `rb` content as content as content as content as content as content as content as content as content as expected. expected. expected. expected. expected. expected. expected. expected. expected. :::\nSee also # ::: section-content\n\u0026lt;ruby\u0026gt; \u0026lt;rt\u0026gt; \u0026lt;rp\u0026gt; \u0026lt;rtc\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/rb{._attribution-link} :::\n"},{"id":168,"href":"/docs/references/languages/html/element/rp/","title":"Rp","section":"HTML","content":" \u0026lt;rp\u0026gt;: The Ruby Fallback Parenthesis element # ::: section-content The \u0026lt;rp\u0026gt; HTML element is used to provide fall-back parentheses for browsers that do not support display of ruby annotations using the \u0026lt;ruby\u0026gt; element. One \u0026lt;rp\u0026gt; element should enclose each of the opening and closing parentheses that wrap the \u0026lt;rt\u0026gt; element that contains the annotation's text. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;rp\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} 漢 (kan) 字 (ji) ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ruby { font-size: 2em; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content\nRuby annotations are for showing pronunciation of East Asian characters, like using Japanese furigana or Taiwanese bopomofo characters. The \u0026lt;rp\u0026gt; element is used in the case of lack of \u0026lt;ruby\u0026gt; element support; the \u0026lt;rp\u0026gt; content provides what should be displayed in order to indicate the presence of a ruby annotation, usually parentheses. ::: Examples # Using ruby annotations # ::: section-content This example uses ruby annotations to display the Romaji{target=\u0026quot;_blank\u0026quot;} equivalents for each character.\n::: code-example [html]{.language-name}\n\u0026lt;ruby\u0026gt; 漢 \u0026lt;rp\u0026gt;(\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;Kan\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;)\u0026lt;/rp\u0026gt; 字 \u0026lt;rp\u0026gt;(\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;ji\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;)\u0026lt;/rp\u0026gt; \u0026lt;/ruby\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: :::\nSee the article about the \u0026lt;ruby\u0026gt; element for further examples. :::\nWithout ruby support # ::: section-content If your browser does not support ruby annotations, the result looks like this instead:\n::: {#sect2 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content Text Tag omission The end tag can be omitted if the element is immediately followed by an \u0026lt;rt\u0026gt; or another \u0026lt;rp\u0026gt; element, or if there is no more content in the parent element. Permitted parents A \u0026lt;ruby\u0026gt; element. \u0026lt;rp\u0026gt; must be positioned immediately before or after an \u0026lt;rt\u0026gt; element. Implicit ARIA role No corresponding role Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-rp-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet rp 5 79 38 5 15 5 4.4 18 38 14 4.2 1.0 :::\nSee also # ::: section-content\n\u0026lt;ruby\u0026gt; \u0026lt;rt\u0026gt; \u0026lt;rb\u0026gt; \u0026lt;rtc\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp{._attribution-link} :::\n"},{"id":169,"href":"/docs/references/languages/html/element/rt/","title":"Rt","section":"HTML","content":" \u0026lt;rt\u0026gt;: The Ruby Text element # ::: section-content The \u0026lt;rt\u0026gt; HTML element specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The \u0026lt;rt\u0026gt; element must always be contained within a \u0026lt;ruby\u0026gt; element. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;rt\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} 漢 (kan) 字 (ji) ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ruby { font-size: 2em; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nSee the article about the \u0026lt;ruby\u0026gt; element for more examples. :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nExamples # Using ruby annotations # ::: section-content This simple example provides Romaji transliteration for the kanji characters within the \u0026lt;ruby\u0026gt; element:\n::: code-example [html]{.language-name}\n\u0026lt;ruby\u0026gt; 漢 \u0026lt;rt\u0026gt;Kan\u0026lt;/rt\u0026gt; 字 \u0026lt;rt\u0026gt;ji\u0026lt;/rt\u0026gt; \u0026lt;/ruby\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content Phrasing content. Tag omission The end tag may be omitted if the \u0026lt;rt\u0026gt; element is immediately followed by an \u0026lt;rt\u0026gt; or \u0026lt;rp\u0026gt; element, or if there is no more content in the parent element Permitted parents A \u0026lt;ruby\u0026gt; element. Implicit ARIA role No corresponding role Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-rt-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet rt 5 79 38 5 15 5 4.4 18 38 14 4.2 1.0 :::\nSee also # ::: section-content\n\u0026lt;ruby\u0026gt; \u0026lt;rp\u0026gt; \u0026lt;rb\u0026gt; \u0026lt;rtc\u0026gt; text-transform: full-size-kana ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt{._attribution-link} :::\n"},{"id":170,"href":"/docs/references/languages/html/element/rtc/","title":"Rtc","section":"HTML","content":" \u0026lt;rtc\u0026gt;: The Ruby Text Container element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;rtc\u0026gt; HTML element embraces semantic annotations of characters presented in a ruby of \u0026lt;rb\u0026gt; elements used inside of \u0026lt;ruby\u0026gt; element. \u0026lt;rb\u0026gt; elements can have both pronunciation ( \u0026lt;rt\u0026gt;) and semantic ( \u0026lt;rtc\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;}) annotations. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;rtc\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} 馬(mǎ) 來(lái) 西(xī) 亞(yà) (Malaysia) ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ruby { font-size: 2em; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;div class=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;ruby\u0026gt; \u0026lt;rtc\u0026gt; \u0026lt;rb\u0026gt;旧\u0026lt;/rb\u0026gt;\u0026lt;rt\u0026gt;jiù\u0026lt;/rt\u0026gt; \u0026lt;rb\u0026gt;金\u0026lt;/rb\u0026gt;\u0026lt;rt\u0026gt;jīn\u0026lt;/rt\u0026gt; \u0026lt;rb\u0026gt;山\u0026lt;/rb\u0026gt;\u0026lt;rt\u0026gt;shān\u0026lt;/rt\u0026gt; \u0026lt;/rtc\u0026gt; \u0026lt;rtc\u0026gt;San Francisco\u0026lt;/rtc\u0026gt; \u0026lt;/ruby\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content Phrasing content or \u0026lt;rt\u0026gt; elements. Tag omission The closing tag can be omitted if it is immediately followed by a \u0026lt;rb\u0026gt;, \u0026lt;rtc\u0026gt; or \u0026lt;rt\u0026gt; element opening tag or by its parent closing tag. Permitted parents A \u0026lt;ruby\u0026gt; element. Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# rtc]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet rtc ≤80 80 33 No 67 ≤13.1 80 80 33 57 ≤13.4 13.0 :::\nSee also # ::: section-content\n\u0026lt;ruby\u0026gt; \u0026lt;rp\u0026gt; \u0026lt;rb\u0026gt; \u0026lt;rt\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/rtc{._attribution-link} :::\n"},{"id":171,"href":"/docs/references/languages/html/element/ruby/","title":"Ruby","section":"HTML","content":" \u0026lt;ruby\u0026gt;: The Ruby Annotation element # ::: section-content The \u0026lt;ruby\u0026gt; HTML element represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common.\nThe term ruby originated as a unit of measurement used by typesetters{target=\u0026quot;_blank\u0026quot;}, representing the smallest size that text can be printed on newsprint while remaining legible. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;ruby\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} 明日 (Ashita) ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ruby { font-size: 2em; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role No corresponding role Permitted ARIA roles Any DOM interface HTMLElement ::: Attributes # ::: section-content This element only includes the global attributes. :::\nExamples # Example 1: Character # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;ruby\u0026gt; 漢 \u0026lt;rp\u0026gt;(\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;Kan\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;)\u0026lt;/rp\u0026gt; 字 \u0026lt;rp\u0026gt;(\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;ji\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;)\u0026lt;/rp\u0026gt; \u0026lt;/ruby\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nExample 2: Word # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;ruby\u0026gt; 明日 \u0026lt;rp\u0026gt;(\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;Ashita\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;)\u0026lt;/rp\u0026gt; \u0026lt;/ruby\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-ruby-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet ruby 5 12 38 5 15 5 4.4 18 38 14 4.2 1.0 :::\nSee also # ::: section-content\n\u0026lt;rt\u0026gt; \u0026lt;rp\u0026gt; \u0026lt;rb\u0026gt; \u0026lt;rtc\u0026gt; text-transform: full-size-kana ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby{._attribution-link} :::\n"},{"id":172,"href":"/docs/references/languages/html/element/s/","title":"S","section":"HTML","content":" \u0026lt;s\u0026gt;: The Strikethrough element # ::: section-content The \u0026lt;s\u0026gt; HTML element renders text with a strikethrough, or a line through it. Use the \u0026lt;s\u0026gt; element to represent things that are no longer relevant or no longer accurate. However, \u0026lt;s\u0026gt; is not appropriate when indicating document edits; for that, use the \u0026lt;del\u0026gt; and \u0026lt;ins\u0026gt; elements, as appropriate. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;s\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} There will be a few tickets available at the box office tonight.\n\u0026lt;p\u0026gt;SOLD OUT!\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} /* stylelint-disable-next-line block-no-empty */ s { } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nContent categories Phrasing content, flow content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role deletion Permitted ARIA roles Any DOM interface HTMLElement ::: Attributes # ::: section-content This element only includes the global attributes. :::\nExamples # ::: section-content ::: code-example [css]{.language-name}\n.sold-out { text-decoration: line-through; } :::\n::: code-example [html]{.language-name}\n\u0026lt;s\u0026gt;Today\u0026#39;s Special: Salmon\u0026lt;/s\u0026gt; SOLD OUT\u0026lt;br /\u0026gt; \u0026lt;span class=\u0026#34;sold-out\u0026#34;\u0026gt;Today\u0026#39;s Special: Salmon\u0026lt;/span\u0026gt; SOLD OUT ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # ::: section-content The presence of the s element is not announced by most screen reading technology in its default configuration. It can be made to be announced by using the CSS content property, along with the ::before and ::after pseudo-elements.\n::: code-example [css]{.language-name}\ns::before, s::after { clip-path: inset(100%); clip: rect(1px, 1px, 1px, 1px); height: 1px; overflow: hidden; position: absolute; white-space: nowrap; width: 1px; } s::before { content: \u0026#34; [start of stricken text] \u0026#34;; } s::after { content: \u0026#34; [end of stricken text] \u0026#34;; } :::\nSome people who use screen readers deliberately disable announcing content that creates extra verbosity. Because of this, it is important to not abuse this technique and only apply it in situations where not knowing content has been struck out would adversely affect understanding.\nShort note on making your mark (more accessible) | The Paciello Group{target=\u0026quot;_blank\u0026quot;} Tweaking Text Level Styles | Adrian Roselli{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-s-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android s 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nBefore Firefox 4, this element implemented the `HTMLSpanElement` interface instead of the standard `HTMLElement` interface. :::\nSee also # ::: section-content\nThe \u0026lt;strike\u0026gt; element, alter ego of the \u0026lt;s\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} element, is obsolete and should not be used on websites anymore. The \u0026lt;del\u0026gt; element is to be used instead if the data has been deleted. The CSS text-decoration-line property is to be used to achieve the former visual aspect of the \u0026lt;s\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} element. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/s{._attribution-link} :::\n"},{"id":173,"href":"/docs/references/languages/html/element/samp/","title":"Samp","section":"HTML","content":" \u0026lt;samp\u0026gt;: The Sample Output element # ::: section-content The \u0026lt;samp\u0026gt; HTML element is used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser's default monospaced font (such as Courier{target=\u0026quot;_blank\u0026quot;} or Lucida Console). :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;samp\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} I was trying to boot my computer, but I got this hilarious message:\n\u0026lt;p\u0026gt; \u0026lt;samp\u0026gt;Keyboard not found \u0026lt;br /\u0026gt;Press F1 to continue\u0026lt;/samp\u0026gt; \u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} samp { font-weight: bold; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content You can use a CSS rule to override the browser's default font face for the \u0026lt;samp\u0026gt; element; however, it's possible that the browser's preferences may take precedence over any CSS you specify.\nThe CSS to override the default font face would look like this:\n::: code-example [css]{.language-name}\nsamp { font-family: \u0026#34;Courier\u0026#34;; } :::\n::: {#sect1 .notecard .note} Note: If you need an element which will serve as a container for output generated by your website or app's JavaScript code, you should instead use the \u0026lt;output\u0026gt; element. ::: :::\nExamples # Basic example # ::: section-content In this simple example, a paragraph includes an example of the output of a program.\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; When the process is complete, the utility will output the text \u0026lt;samp\u0026gt;Scan complete. Found \u0026lt;em\u0026gt;N\u0026lt;/em\u0026gt; results.\u0026lt;/samp\u0026gt; You can then proceed to the next step. \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nSample output including user input # ::: section-content You can nest the \u0026lt;kbd\u0026gt; element within a \u0026lt;samp\u0026gt; block to present an example that includes text entered by the user. For example, consider this text presenting a transcript of a Linux (or macOS) console session:\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;pre\u0026gt; \u0026lt;samp\u0026gt;\u0026lt;span class=\u0026#34;prompt\u0026#34;\u0026gt;mike@interwebz:~$\u0026lt;/span\u0026gt; \u0026lt;kbd\u0026gt;md5 -s \u0026#34;Hello world\u0026#34;\u0026lt;/kbd\u0026gt; MD5 (\u0026#34;Hello world\u0026#34;) = 3e25960a79dbc69b674cd4ec67a72c62 \u0026lt;span class=\u0026#34;prompt\u0026#34;\u0026gt;mike@interwebz:~$\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;cursor\u0026#34;\u0026gt;█\u0026lt;/span\u0026gt;\u0026lt;/samp\u0026gt;\u0026lt;/pre\u0026gt; :::\nNote the use of \u0026lt;span\u0026gt; to allow customization of the appearance of specific portions of the sample text such as the shell prompts and the cursor. Note also the use of \u0026lt;kbd\u0026gt; to represent the command the user entered at the prompt in the sample text.\nCSS # The CSS that achieves the appearance we want is:\n::: code-example [css]{.language-name}\n.prompt { color: #b00; } samp \u0026gt; kbd { font-weight: bold; } .cursor { color: #00b; } :::\nThis gives the prompt and cursor fairly subtle colorization and emboldens the keyboard input within the sample text.\nResult # The resulting output is this:\n::: {#sect3 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role generic Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-samp-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet samp 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nRelated elements: \u0026lt;kbd\u0026gt;, \u0026lt;code\u0026gt;, \u0026lt;pre\u0026gt; The \u0026lt;output\u0026gt; element: a container for script-generated output ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp{._attribution-link} :::\n"},{"id":174,"href":"/docs/references/languages/html/element/script/","title":"Script","section":"HTML","content":" \u0026lt;script\u0026gt;: The Script element # ::: section-content The \u0026lt;script\u0026gt; HTML element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The \u0026lt;script\u0026gt; element can also be used with other languages, such as WebGL's GLSL shader programming language and JSON.\nContent categories Metadata content, Flow content, Phrasing content. Permitted content Dynamic script such as text/javascript. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts metadata content, or any element that accepts phrasing content. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLScriptElement ::: Attributes # ::: section-content This element includes the global attributes.\nasync For classic scripts, if the async attribute is present, then the classic script will be fetched in parallel to parsing and evaluated as soon as it is available.\nFor module scripts, if the async attribute is present then the scripts and all their dependencies will be fetched in parallel to parsing and evaluated as soon as they are available.\nThis attribute allows the elimination of parser-blocking JavaScript where the browser would have to load and evaluate scripts before continuing to parse. defer has a similar effect in this case.\nThis is a boolean attribute: the presence of a boolean attribute on an element represents the true value, and the absence of the attribute represents the false value.\nSee Browser compatibility for notes on browser support. See also Async scripts for asm.js.\nblocking [Experimental]{.visually-hidden} This attribute explicitly indicates that certain operations should be blocked on the fetching of the script. The operations that are to be blocked must be a space-separated list of blocking attributes listed below.\nrender: The rendering of content on the screen is blocked. crossorigin Normal script elements pass minimal information to the window.onerror for scripts which do not pass the standard CORS checks. To allow error logging for sites which use a separate domain for static media, use this attribute. See CORS settings attributes for a more descriptive explanation of its valid arguments.\ndefer This Boolean attribute is set to indicate to a browser that the script is meant to be executed after the document has been parsed, but before firing DOMContentLoaded.\nScripts with the defer attribute will prevent the DOMContentLoaded event from firing until the script has loaded and finished evaluating.\n::: {#sect1 .notecard .warning} Warning: This attribute must not be used if the src attribute is absent (i.e. for inline scripts), in this case it would have no effect.\nThe defer attribute has no effect on module scripts \u0026mdash; they defer by default. :::\nScripts with the defer attribute will execute in the order in which they appear in the document.\nThis attribute allows the elimination of parser-blocking JavaScript where the browser would have to load and evaluate scripts before continuing to parse. async has a similar effect in this case.\nfetchpriority [Experimental]{.visually-hidden} Provides a hint of the relative priority to use when fetching an external script. Allowed values:\nhigh Signals a high-priority fetch relative to other external scripts.\nlow Signals a low-priority fetch relative to other external scripts.\nauto Default: Signals automatic determination of fetch priority relative to other external scripts.\nintegrity This attribute contains inline metadata that a user agent can use to verify that a fetched resource has been delivered free of unexpected manipulation. See Subresource Integrity.\nnomodule This Boolean attribute is set to indicate that the script should not be executed in browsers that support ES modules \u0026mdash; in effect, this can be used to serve fallback scripts to older browsers that do not support modular JavaScript code.\nnonce A cryptographic nonce (number used once) to allow scripts in a script-src Content-Security-Policy. The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource's policy is otherwise trivial.\nreferrerpolicy Indicates which referrer to send when fetching the script, or resources fetched by the script:\nno-referrer: The Referer header will not be sent. no-referrer-when-downgrade: The Referer header will not be sent to origins without TLS ( HTTPS). origin: The sent referrer will be limited to the origin of the referring page: its scheme, host, and port. origin-when-cross-origin: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path. same-origin: A referrer will be sent for same origin, but cross-origin requests will contain no referrer information. strict-origin: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP). strict-origin-when-cross-origin (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP). unsafe-url: The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins. ::: {#sect2 .notecard .note} Note: An empty string value (\u0026quot;\u0026quot;) is both the default value, and a fallback value if referrerpolicy is not supported. If referrerpolicy is not explicitly specified on the \u0026lt;script\u0026gt; element, it will adopt a higher-level referrer policy, i.e. one set on the whole document or domain. If a higher-level policy is not available, the empty string is treated as being equivalent to strict-origin-when-cross-origin. :::\nsrc This attribute specifies the URI of an external script; this can be used as an alternative to embedding a script directly within a document.\ntype This attribute indicates the type of script represented. The value of this attribute will be one of the following:\nAttribute is not set (default), an empty string, or a JavaScript MIME type Indicates that the script is a \u0026quot;classic script\u0026quot;, containing JavaScript code. Authors are encouraged to omit the attribute if the script refers to JavaScript code rather than specify a MIME type. JavaScript MIME types are listed in the IANA media types specification.\nimportmap This value indicates that the body of the element contains an import map. The import map is a JSON object that developers can use to control how the browser resolves module specifiers when importing JavaScript modules.\nmodule This value causes the code to be treated as a JavaScript module. The processing of the script contents is deferred. The charset and defer attributes have no effect. For information on using module, see our JavaScript modules guide. Unlike classic scripts, module scripts require the use of the CORS protocol for cross-origin fetching.\nspeculationrules [Experimental]{.visually-hidden} This value indicates that the body of the element contains speculation rules. Speculation rules take the form of a JSON object that determine what resources should be prefetched or prerendered by the browser. This is part of the speculation rules API.\nAny other value The embedded content is treated as a data block, and won't be processed by the browser. Developers must use a valid MIME type that is not a JavaScript MIME type to denote data blocks. All of the other attributes will be ignored, including the src attribute. :::\nDeprecated attributes # ::: section-content\ncharset [Deprecated]{.visually-hidden} If present, its value must be an ASCII case-insensitive match for \u0026quot;utf-8\u0026quot;. It's unnecessary to specify the charset attribute, because documents must use UTF-8, and the script element inherits its character encoding from the document.\nlanguage [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} Like the type attribute, this attribute identifies the scripting language in use. Unlike the type attribute, however, this attribute's possible values were never standardized. The type attribute should be used instead. :::\nNotes # ::: section-content Scripts without async, defer or type=\u0026quot;module\u0026quot; attributes, as well as inline scripts without the type=\u0026quot;module\u0026quot; attribute, are fetched and executed immediately before the browser continues to parse the page.\nThe script should be served with the text/javascript MIME type, but browsers are lenient and only block them if the script is served with an image type (image/*), a video type (video/*), an audio type (audio/*), or text/csv. If the script is blocked, an error event is sent to the element; otherwise, a load event is sent. :::\nExamples # Basic usage # ::: section-content These examples show how to import (an external) script using the \u0026lt;script\u0026gt; element.\n::: code-example [html]{.language-name}\n\u0026lt;script src=\u0026#34;javascript.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; :::\nAnd the following examples show how to put (an inline) script inside the \u0026lt;script\u0026gt; element.\n::: code-example [html]{.language-name}\n\u0026lt;script\u0026gt; alert(\u0026#34;Hello World!\u0026#34;); \u0026lt;/script\u0026gt; ::: :::\nModule fallback # ::: section-content Browsers that support the module value for the type attribute ignore any script with a nomodule attribute. That enables you to use module scripts while providing nomodule-marked fallback scripts for non-supporting browsers.\n::: code-example [html]{.language-name}\n\u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;main.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script nomodule src=\u0026#34;fallback.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ::: :::\nImporting modules with importmap # ::: section-content When importing modules in scripts, if you don't use the type=importmap feature, then each module must be imported using a module specifier that is either an absolute or relative URL. In the example below, the first module specifier (\u0026quot;./shapes/square.js\u0026quot;) resolves relative to the base URL of the document, while the second is an absolute URL.\n::: code-example [js]{.language-name}\nimport { name as squareName, draw } from \u0026#34;./shapes/square.js\u0026#34;; import { name as circleName } from \u0026#34;https://example.com/shapes/circle.js\u0026#34;; :::\nAn import map allows you to provide a mapping that, if matched, can replace the text in the module specifier. The import map below defines keys square and circle that can be used as aliases for the module specifiers shown above.\n::: code-example [html]{.language-name}\n\u0026lt;script type=\u0026#34;importmap\u0026#34;\u0026gt; { \u0026#34;imports\u0026#34;: { \u0026#34;square\u0026#34;: \u0026#34;./shapes/square.js\u0026#34;, \u0026#34;circle\u0026#34;: \u0026#34;https://example.com/shapes/circle.js\u0026#34; } } \u0026lt;/script\u0026gt; :::\nThis allows us to import modules using names in the module specifier (rather than absolute or relative URLs).\n::: code-example [js]{.language-name}\nimport { name as squareName, draw } from \u0026#34;square\u0026#34;; import { name as circleName } from \u0026#34;circle\u0026#34;; :::\nFor more examples of what you can do with import maps, see the Importing modules using import maps section in the JavaScript modules guide. :::\nEmbedding data in HTML # ::: section-content You can also use the \u0026lt;script\u0026gt; element to embed data in HTML with server-side rendering by specifying a valid non-JavaScript MIME type in the type attribute.\n::: code-example [html]{.language-name}\n\u0026lt;!-- Generated by the server --\u0026gt; \u0026lt;script id=\u0026#34;data\u0026#34; type=\u0026#34;application/json\u0026#34;\u0026gt; { \u0026#34;userId\u0026#34;: 1234, \u0026#34;userName\u0026#34;: \u0026#34;Maria Cruz\u0026#34;, \u0026#34;memberSince\u0026#34;: \u0026#34;2000-01-01T00:00:00.000Z\u0026#34; } \u0026lt;/script\u0026gt; \u0026lt;!-- Static --\u0026gt; \u0026lt;script\u0026gt; const userInfo = JSON.parse(document.getElementById(\u0026#34;data\u0026#34;).text); console.log(\u0026#34;User information: %o\u0026#34;, userInfo); \u0026lt;/script\u0026gt; ::: :::\nBlocking rendering till a script is fetched and executed # ::: section-content You can include render token inside a blocking attribute; the rendering of the page will be blocked till the script is fetched and executed. In the example below, we block rendering on an async script, so that the script doesn't block parsing but is guaranteed to be evaluated before rendering starts.\n::: code-example [html]{.language-name}\n\u0026lt;script blocking=\u0026#34;render\u0026#34; async src=\u0026#34;async-script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-script-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Android Chrome Android Firefox Opera Android Safari on IOS Samsung Internet Explorer for Android script 1 12 1 Yes ≤12.1 3 4.4 18 4 ≤12.1 2 1.0\nStarting in Firefox 4, inserting \\\u0026lt;script\\\u0026gt; elements that have been created by calling `document.createElement(\u0026quot;script\u0026quot;)` no longer enforces execution in insertion order. This change lets Firefox properly abide by the specification. To make script-inserted external scripts execute in their insertion order, set `.async=false` on them. async 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nattributionsrc 117 117 No No 103 No 117 117 No No No No\nblocking 105 105 No No 91 No 105 105 No 72 No 20.0\ncrossorigin 19 14 14 No 12 6 4.4 25 14 12 6 1.5\nThe `crossorigin` attribute was The `crossorigin` attribute was implemented in WebKit in WebKit [bug implemented in WebKit in WebKit [bug 81438](https://webkit.org/b/81438). 81438](https://webkit.org/b/81438). defer 1 12 3.5 10 15 3 4.4 18 4 14 2 1.0\nChrome does not defer scripts with Since Firefox 3.6, the `defer` Before version Opera does not defer scripts with the Chrome does not defer scripts with Chrome does not defer scripts with Opera does not defer scripts with the Samsung Internet does not defer the `defer` attribute when the page attribute is ignored on scripts that 10, Internet `defer` attribute when the page is the `defer` attribute when the page the `defer` attribute when the page `defer` attribute when the page is scripts with the `defer` attribute is served as XHTML don\\'t have the `src` attribute. Explorer served as XHTML is served as XHTML is served as XHTML served as XHTML when the page is served as XHTML (`application/xhtml+xml`) - [Chromium However, in Firefox 3.5 even inline implemented (`application/xhtml+xml`) - [Chromium (`application/xhtml+xml`) - [Chromium (`application/xhtml+xml`) - [Chromium (`application/xhtml+xml`) - [Chromium (`application/xhtml+xml`) - [Chromium Issue scripts are deferred if the `defer` `defer` by a Issue Issue Issue Issue Issue #611136](https://crbug.com/611136), attribute is set. proprietary #611136](https://crbug.com/611136), #611136](https://crbug.com/611136), #611136](https://crbug.com/611136), #611136](https://crbug.com/611136), #611136](https://crbug.com/611136), [Chromium Issue specification. [Chromium Issue [Chromium Issue [Chromium Issue [Chromium Issue [Chromium Issue #874749](https://crbug.com/874749) Since version 10 #874749](https://crbug.com/874749) #874749](https://crbug.com/874749) #874749](https://crbug.com/874749) #874749](https://crbug.com/874749) #874749](https://crbug.com/874749) it conforms to the W3C specification. fetchpriority 101 101 No No No preview 101 101 No 70 No 19.0\nintegrity 45 17 43 No 32 11.1 45 45 43 No 11.3 5.0\nlanguage 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nnomodule 61 16 60 No 48 11 61 61 60 45 11 8.0\nreferrerpolicy 70 ≤79 65 No 57 14 70 70 65 No 14 10.0\nsrc 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\ntext 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\ntype 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 # :::\nSee also # ::: section-content\ndocument.currentScript Flavio Copes' article on loading JavaScript efficiently and explaining the differences between async and defer{target=\u0026quot;_blank\u0026quot;} JavaScript modules guide ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script{._attribution-link} :::\n"},{"id":175,"href":"/docs/references/languages/html/element/script/type/","title":"Type","section":"HTML","content":" \u0026lt;script\u0026gt;: type attribute # ::: section-content The type attribute of the \u0026lt;script\u0026gt; element indicates the type of script represented by the element: a classic script, an import map, a JavaScript module, speculation rules, or a data block. :::\nValue # ::: section-content The value of this attribute indicates the type of data represented by the script, and will be one of the following:\nAttribute is not set (default), an empty string, or a JavaScript MIME type Indicates that the script is a \u0026quot;classic script\u0026quot;, containing JavaScript code. Authors are encouraged to omit the attribute if the script refers to JavaScript code rather than specify a MIME type. JavaScript MIME types are listed in the IANA media types specification.\nimportmap This value indicates that the body of the element contains an import map. The import map is a JSON object that developers can use to control how the browser resolves module specifiers when importing JavaScript modules.\nmodule This value causes the code to be treated as a JavaScript module. The processing of the script contents is deferred. The charset and defer attributes have no effect. For information on using module, see our JavaScript modules guide. Unlike classic scripts, module scripts require the use of the CORS protocol for cross-origin fetching.\nspeculationrules [Experimental]{.visually-hidden} This value indicates that the body of the element contains speculation rules. Speculation rules take the form of a JSON object that determine what resources should be prefetched or prerendered by the browser. This is part of the speculation rules API.\nAny other value The embedded content is treated as a data block, and won't be processed by the browser. Developers must use a valid MIME type that is not a JavaScript MIME type to denote data blocks. All of the other attributes will be ignored, including the src attribute.\n::: {#sect1 .notecard .note} Note: In earlier browsers, the type identified the scripting language of the embedded or imported (via the src attribute) code. ::: :::\nSpecifications # ::: {.notecard .warning} No specification found\nNo specification data found for html.elements.script.type.\nCheck for problems with this page or contribute a missing spec_url to mdn/browser-compat-data. Also make sure the specification is included in w3c/browser-specs. :::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Android Chrome Android Firefox Opera Android Safari on IOS Samsung Internet Explorer for Android type 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nimportmap 89 89 108 No 75 16.4 89 89 108 63 16.4 15.0\nmodule 61 79 60 No 48 10.1 61 61 60 45 10.3 8.0\nModule scripts without the `async` Module scripts without the `async` Module scripts without the `async` Module scripts do not load Module scripts without the `async` Module scripts without the `async` Module scripts without the `async` Module scripts do not load Module scripts without the `async` attribute do not load when the page attribute do not load when the page attribute do not load when the page when the page is served as attribute do not load when the page attribute do not load when the page attribute do not load when the page when the page is served as attribute do not load when the page is served as XHTML is served as XHTML is served as XHTML XHTML is served as XHTML is served as XHTML is served as XHTML XHTML is served as XHTML (`application/xhtml+xml`). See [bug (`application/xhtml+xml`). See [bug (`application/xhtml+xml`). See [bug (`application/xhtml+xml`). (`application/xhtml+xml`). See [bug (`application/xhtml+xml`). See [bug (`application/xhtml+xml`). See [bug (`application/xhtml+xml`). (`application/xhtml+xml`). See [bug 717643](https://crbug.com/717643). 717643](https://crbug.com/717643). 717643](https://crbug.com/717643). 717643](https://crbug.com/717643). 717643](https://crbug.com/717643). 717643](https://crbug.com/717643). 717643](https://crbug.com/717643). 16--79 speculationrules 109 109 No No 95 No 109 109 No 74 No 21.0\n105 105 91 103 103 71 20.0 Initial support included same-origin Initial support included same-origin Initial support included same-origin Initial support included same-origin Initial support included same-origin Initial support included same-origin Initial support included same-origin prerendering only. prerendering only. prerendering only. prerendering only. prerendering only. prerendering only. prerendering only. :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type{._attribution-link} :::\n"},{"id":176,"href":"/docs/references/languages/html/element/script/type/importmap/","title":"Importmap","section":"HTML","content":" \u0026lt;script type=\u0026quot;importmap\u0026quot;\u0026gt; # ::: section-content The importmap value of the type attribute of the \u0026lt;script\u0026gt; element indicates that the body of the element contains an import map.\nAn import map is a JSON object that allows developers to control how the browser resolves module specifiers when importing JavaScript modules. It provides a mapping between the text used as the module specifier in an import statement or import() operator, and the corresponding value that will replace the text when resolving the specifier. The JSON object must conform to the Import map JSON representation format.\nAn import map is used to resolve module specifiers in static and dynamic imports, and therefore must be declared and processed before any \u0026lt;script\u0026gt; elements that import modules using specifiers declared in the map. Note that the import map applies only to module specifiers in the import statement or import() operator; it does not apply to the path specified in the src attribute of a \u0026lt;script\u0026gt; element.\nFor more information, see the Importing modules using import maps section in the JavaScript modules guide. :::\nSyntax # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;script type=\u0026#34;importmap\u0026#34;\u0026gt; // JSON object defining import \u0026lt;/script\u0026gt; :::\nThe src, async, nomodule, defer, crossorigin, integrity, and referrerpolicy attributes must not be specified.\nOnly the first import map in the document with an inline definition is processed; any additional import maps and external import maps are ignored. :::\nExceptions # ::: section-content\nTypeError The import map definition is not a JSON object, the importmap key is defined but its value is not a JSON object, or the scopes key is defined but its value is not a JSON object.\nBrowsers generate console warnings for other cases where the import map JSON does not conform to the import map schema.\nAn error event is fired at script elements with type=\u0026quot;importmap\u0026quot; that are not processed. This might occur, for example, if module loading has already started when an import map is processed, or if multiple import maps are defined in the page. :::\nDescription # ::: section-content When importing a JavaScript module, both the import statement and import() operator have a \u0026quot;module specifier\u0026quot; that indicates the module to be imported. A browser must be able to resolve this specifier to an absolute URL in order to import the module.\nFor example, the following statements import elements from the module specifier \u0026quot;./modules/shapes/square.js\u0026quot;, which is a path relative to the base URL of the document, and the module specifier \u0026quot;https://example.com/shapes/circle.js\u0026quot;, which is an absolute URL.\n::: code-example [js]{.language-name}\nimport { name as squareName, draw } from \u0026#34;./modules/shapes/square.js\u0026#34;; import { name as circleName } from \u0026#34;https://example.com/shapes/circle.js\u0026#34;; :::\nImport maps allow developers to specify (almost) any text they want in the module specifier; the map provides a corresponding value that will replace the text when the module specifier is resolved. :::\nBare modules # ::: section-content The import map below defines an imports key that has a \u0026quot;module specifier map\u0026quot; with properties square and circle.\n::: code-example [html]{.language-name}\n\u0026lt;script type=\u0026#34;importmap\u0026#34;\u0026gt; { \u0026#34;imports\u0026#34;: { \u0026#34;square\u0026#34;: \u0026#34;./module/shapes/square.js\u0026#34;, \u0026#34;circle\u0026#34;: \u0026#34;https://example.com/shapes/circle.js\u0026#34; } } \u0026lt;/script\u0026gt; :::\nWith this import map we can import the same modules as above, but using \u0026quot;bare modules\u0026quot; in our module specifiers:\n::: code-example [js]{.language-name}\nimport { name as squareName, draw } from \u0026#34;square\u0026#34;; import { name as circleName } from \u0026#34;circle\u0026#34;; ::: :::\nMapping path prefixes # ::: section-content A module specifier map key can also be used to remap a path prefix in a module specifier. Note that in this case the property and mapped path must both have a trailing forward slash (/).\n::: code-example [html]{.language-name}\n\u0026lt;script type=\u0026#34;importmap\u0026#34;\u0026gt; { \u0026#34;imports\u0026#34;: { \u0026#34;shapes/\u0026#34;: \u0026#34;./module/shapes/\u0026#34;, \u0026#34;othershapes/\u0026#34;: \u0026#34;https://example.com/modules/shapes/\u0026#34; } } \u0026lt;/script\u0026gt; :::\nWe could then import a circle module as shown.\n::: code-example [js]{.language-name}\nimport { name as circleName } from \u0026#34;shapes/circle.js\u0026#34;; ::: :::\nPaths in the module specifier map key # ::: section-content Module specifier keys do not have to be single word names (\u0026quot;bare names\u0026quot;). They can also contain or end with path separators, or be absolute URLs, or be relative URL paths that start with /, ./, or ../.\n::: code-example [json]{.language-name}\n{ \u0026#34;imports\u0026#34;: { \u0026#34;modules/shapes/\u0026#34;: \u0026#34;./module/src/shapes/\u0026#34;, \u0026#34;modules/square\u0026#34;: \u0026#34;./module/src/other/shapes/square.js\u0026#34;, \u0026#34;https://example.com/modules/square.js\u0026#34;: \u0026#34;./module/src/other/shapes/square.js\u0026#34;, \u0026#34;../modules/shapes/\u0026#34;: \u0026#34;/modules/shapes/\u0026#34; } } :::\nIf there are several module specifier keys in a module specifier map that might match, then the most specific key will be selected (i.e. the one with the longer path/value).\nA module specifier of ./foo/../js/app.js would be resolved to ./js/app.js before matching. This means that a module specifier key of ./js/app.js would match the module specifier even though they are not exactly the same. :::\nScoped module specifier maps # ::: section-content You can use the scopes key to provide mappings that are only used if the script importing the module contains a particular URL path. If the URL of the loading script matches the supplied path, the mapping associated with the scope will be used. This allows different versions of the module to be used depending on what code is doing the importing.\nFor example, the map below will only use the scoped map if the loading module has a URL that includes the path: \u0026quot;/modules/customshapes/\u0026quot;.\n::: code-example [html]{.language-name}\n\u0026lt;script type=\u0026#34;importmap\u0026#34;\u0026gt; { \u0026#34;imports\u0026#34;: { \u0026#34;square\u0026#34;: \u0026#34;./module/shapes/square.js\u0026#34; }, \u0026#34;scopes\u0026#34;: { \u0026#34;/modules/customshapes/\u0026#34;: { \u0026#34;square\u0026#34;: \u0026#34;https://example.com/modules/shapes/square.js\u0026#34; } } } \u0026lt;/script\u0026gt; :::\nIf multiple scopes match the referrer URL, then the most specific scope path is used (the scope key name with the longest name). The browser falls back to the next most specific scoped path if there is no matching specifier, and so on, eventually falling back to the module specifier map in the imports key. :::\nImport map JSON representation # ::: section-content The following is a \u0026quot;formal\u0026quot; definition of the import map JSON representation.\nThe import map must be a valid JSON object that can define at most two optional keys: imports and scopes. Each key's value must be an object, which may be empty.\nimports [Optional]{.badge .inline .optional} The value is a module specifier map, which provides the mappings between module specifier text that might appear in an import statement or import() operator, and the text that will replace it when the specifier is resolved.\nThis is the fallback map that is searched for matching module specifiers if no scopes path URLs match, or if module specifier maps in matching scopes paths do not contain a key that matches the module specifier.\n\u0026lt;module specifier map\u0026gt; A \u0026quot;module specifier map\u0026quot; is a valid JSON object where the keys are text that may be present in the module specifier when importing a module, and the corresponding values are the URLs or paths that will replace this text when the module specifier is resolved to an address.\nThe module specifier map JSON object has the following requirements:\nNone of the keys may be empty. All of the values must be strings, defining either a valid absolute URL or a valid URL string that starts with /, ./, or ../. If a key ends with /, then the corresponding value must also end with /. A key with a trailing / can be used as a prefix for when mapping (or remapping) modules addresses. The object properties' ordering is irrelevant: if multiple keys can match the module specifier, the most specific key is used (in other words, a specifier \u0026quot;olive/branch/\u0026quot; would match before \u0026quot;olive/\u0026quot;). scopes [Optional]{.badge .inline .optional} Scopes define path-specific module specifier maps, allowing the choice of map to depend on the path of the code importing the module.\nThe scopes object is a valid JSON object where each property is a \u0026lt;scope key\u0026gt;, which is an URL path, with a corresponding value that is a \u0026lt;module specifier map\u0026gt;.\nIf the URL of a script importing a module matches a \u0026lt;scope key\u0026gt; path, then the \u0026lt;module specifier map\u0026gt; value associated with the key is checked for matching specifiers first. If there are multiple matching scope keys, then the value associated with the most specific/nested scope paths are checked for matching module specifiers first. The fallback module specifier map in imports is used if there are no matching module specifier keys in any of the matching scoped module specifier maps.\nNote that the scope does not change how an address is resolved; relative addresses are always resolved to the import map base URL. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# import-map]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet importmap 89 89 108 No 75 16.4 89 89 108 63 16.4 15.0 :::\nSee also # ::: section-content\nJavaScript modules \u0026gt; Importing modules using import maps The type attribute of HTML \u0026lt;script\u0026gt; elements import statement import() operator ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap{._attribution-link} :::\n"},{"id":177,"href":"/docs/references/languages/html/element/script/type/speculationrules/","title":"Speculationrules","section":"HTML","content":" \u0026lt;script type=\u0026quot;speculationrules\u0026quot;\u0026gt; # ::: section-content The speculationrules value of the type attribute of the \u0026lt;script\u0026gt; element indicates that the body of the element contains speculation rules.\nSpeculation rules take the form of a JSON structure that determine what resources should be prefetched or prerendered by the browser. This is part of the Speculation Rules API. :::\nSyntax # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;script type=\u0026#34;speculationrules\u0026#34;\u0026gt; // JSON object defining rules \u0026lt;/script\u0026gt; :::\n::: {#sect1 .notecard .note} Note: The src, async, nomodule, defer, crossorigin, integrity, and referrerpolicy attributes must not be specified. ::: :::\nExceptions # ::: section-content\nTypeError The speculation rules definition is not a valid JSON object. :::\nDescription # ::: section-content A \u0026lt;script type=\u0026quot;speculationrules\u0026quot;\u0026gt; element must contain a valid JSON structure that defines speculation rules. The following examples show separate prefetch and prerender rules:\n::: code-example [html]{.language-name}\n\u0026lt;script type=\u0026#34;speculationrules\u0026#34;\u0026gt; { \u0026#34;prefetch\u0026#34;: [ { \u0026#34;source\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;urls\u0026#34;: [\u0026#34;next.html\u0026#34;, \u0026#34;next2.html\u0026#34;], \u0026#34;requires\u0026#34;: [\u0026#34;anonymous-client-ip-when-cross-origin\u0026#34;], \u0026#34;referrer_policy\u0026#34;: \u0026#34;no-referrer\u0026#34; } ] } \u0026lt;/script\u0026gt; :::\n::: code-example [html]{.language-name}\n\u0026lt;script type=\u0026#34;speculationrules\u0026#34;\u0026gt; { \u0026#34;prerender\u0026#34;: [ { \u0026#34;source\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;urls\u0026#34;: [\u0026#34;next3.html\u0026#34;, \u0026#34;next4.html\u0026#34;] } ] } \u0026lt;/script\u0026gt; ::: :::\nSpeculation rules JSON representation # ::: section-content The JSON structure contains one or more fields at the top level, each one representing an action to define speculation rules for. At present the supported actions are:\n\u0026quot;prefetch\u0026quot; [Optional]{.badge .inline .optional} Rules for potential future navigations that should have their associated document response body downloaded, leading to significant performance improvements when those documents are navigated to. Note that none of the subresources referenced by the page are downloaded.\n\u0026quot;prerender\u0026quot; [Optional]{.badge .inline .optional} Rules for potential future navigations that should have their associated documents fully downloaded, rendered, and loaded into an invisible tab. This includes loading all subresources, running all JavaScript, and even loading subresources and performing data fetches started by JavaScript. When those documents are navigated to, navigations will be instant, leading to major performance improvements.\n::: {#sect2 .notecard .note} Note: Consult the Speculation Rules API main page for full details on how to use prefetch and prerender effectively. :::\nEach action field contains an array, which in turn contains one or more objects. Each object contains a single rule defining a set of URLs and related parameters.\nSpecifically, each object can contain the following properties:\n\u0026quot;source\u0026quot; A string representing the source of the URLs to which the rule applies. Possible values are:\n\u0026quot;list\u0026quot; Denotes that the URLs will come from a specific list.\n\u0026quot;urls\u0026quot; An array of strings representing the list of URLs to apply the rule to. These can be absolute or relative URLs. Relative URLs will be parsed relative to the document base URL (if inline in a document) or relative to the external resource URL (if externally fetched).\n\u0026quot;requires\u0026quot; [Optional]{.badge .inline .optional} An array of strings representing capabilities of the browser parsing the rule, which must be available if the rule is to be applied to the specified URLs.\n::: {#sect3 .notecard .warning} Warning: Prefetches will automatically fail in browsers that cannot meet a specified requirement, even if they support the Speculation Rules API. :::\nPossible values are:\n\u0026quot;anonymous-client-ip-when-cross-origin\u0026quot; \u0026quot;prefetch\u0026quot;-only. Specifies that the rule matches only if the user agent can prevent the client IP address from being visible to the origin server if a cross-origin prefetch request is issued. Exactly how this works is dependent on browser implementation specifics. For example:\nChrome's implementation hides the IP address using a Google-owned proxy, therefore by default it only works for Google-controlled referrers (since in that case, sending the URLs of the destination to Google is not an additional privacy leak). When used on a non-Google-owned site, rules that include this will only match for users that turn on \u0026quot;Enhanced preloading\u0026quot; in chrome://settings/preloading. Other Chromium-based browsers will have to provide their own solutions. Thorough testing in all target browsers is advised. A future Safari implementation may possibly use something along the lines of iCloud Private Relay{target=\u0026quot;_blank\u0026quot;}. A future Firefox implementation might use something based on the Mozilla VPN{target=\u0026quot;_blank\u0026quot;} product. \u0026quot;referrer_policy\u0026quot; [Optional]{.badge .inline .optional} A string representing a specific referrer policy string to use when requesting the URLs specified in the rule \u0026mdash; see Referrer-Policy for possible values. The purpose of this is to allow the referring page to set a stricter policy specifically for the speculative request than the policy the page already has set (either by default, or by using Referrer-Policy). A laxer policy set in the speculation rules will not override a stricter policy set on the referring page.\n::: {#sect4 .notecard .note} Note: As speculation rules use a \u0026lt;script\u0026gt; element, they need to be explicitly allowed in the Content-Security-Policy script-src directive if the site includes it. This is done by adding the \u0026quot;inline-speculation-rules\u0026quot; value along with a hash- or nonce-source. ::: :::\nFurther examples # ::: section-content The earlier examples showed separate speculation rules defined for prefetch and prerender. It is possible to define both in a single set of rules:\n::: code-example [html]{.language-name}\n\u0026lt;script type=\u0026#34;speculationrules\u0026#34;\u0026gt; { \u0026#34;prefetch\u0026#34;: [ { \u0026#34;source\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;urls\u0026#34;: [\u0026#34;next.html\u0026#34;, \u0026#34;next2.html\u0026#34;], \u0026#34;requires\u0026#34;: [\u0026#34;anonymous-client-ip-when-cross-origin\u0026#34;], \u0026#34;referrer_policy\u0026#34;: \u0026#34;no-referrer\u0026#34; } ], \u0026#34;prerender\u0026#34;: [ { \u0026#34;source\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;urls\u0026#34;: [\u0026#34;next3.html\u0026#34;, \u0026#34;next4.html\u0026#34;] } ] } \u0026lt;/script\u0026gt; :::\nIt is also allowable to include multiple sets of rules in a single HTML file:\n::: code-example [html]{.language-name}\n\u0026lt;script type=\u0026#34;speculationrules\u0026#34;\u0026gt; { \u0026#34;prefetch\u0026#34;: [ { \u0026#34;source\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;urls\u0026#34;: [\u0026#34;next.html\u0026#34;, \u0026#34;next2.html\u0026#34;], \u0026#34;requires\u0026#34;: [\u0026#34;anonymous-client-ip-when-cross-origin\u0026#34;], \u0026#34;referrer_policy\u0026#34;: \u0026#34;no-referrer\u0026#34; } ] } \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;speculationrules\u0026#34;\u0026gt; { \u0026#34;prerender\u0026#34;: [ { \u0026#34;source\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;urls\u0026#34;: [\u0026#34;next3.html\u0026#34;, \u0026#34;next4.html\u0026#34;] } ] } \u0026lt;/script\u0026gt; :::\nAnd multiple rules in a single result set:\n::: code-example [js]{.language-name}\n\u0026lt;script type=\u0026#34;speculationrules\u0026#34;\u0026gt; { \u0026#34;prerender\u0026#34;: [ { \u0026#34;source\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;urls\u0026#34;: [\u0026#34;one.html\u0026#34;] }, { \u0026#34;source\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;urls\u0026#34;: [\u0026#34;two.html\u0026#34;] } ] } \u0026lt;/script\u0026gt; ::: :::\nDynamic rule insertion # ::: section-content Below is an example that feature detects speculation rules and, if supported, dynamically adds a prerender speculation rule via JavaScript:\n::: code-example [js]{.language-name}\nif ( HTMLScriptElement.supports \u0026amp;\u0026amp; HTMLScriptElement.supports(\u0026#34;speculationrules\u0026#34;) ) { const specScript = document.createElement(\u0026#34;script\u0026#34;); specScript.type = \u0026#34;speculationrules\u0026#34;; const specRules = { prerender: [ { source: \u0026#34;list\u0026#34;, urls: [\u0026#34;/next.html\u0026#34;], }, ], }; specScript.textContent = JSON.stringify(specRules); console.log(\u0026#34;added speculation rules to: next.html\u0026#34;); document.body.append(specScript); } :::\nYou can see this in action in this prerender demos{target=\u0026quot;_blank\u0026quot;} page. :::\nSpecifications # ::: _table # Specification # Speculation Rules\n[# speculation-rules-script]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Android Firefox Opera Android Safari Samsung Explorer Android for on IOS Internet Android speculationrules 109 109 No No 95 No 109 109 No 74 No 21.0\n105 105 91 103 103 71 20.0 Initial Initial Initial Initial Initial Initial Initial support support support support support support support included included included included included included included same-origin same-origin same-origin same-origin same-origin same-origin same-origin prerendering prerendering prerendering prerendering prerendering prerendering prerendering only. only. only. only. only. only. only. prefetch 110 110 No No 96 No 103 103 No 71 No 20.0\nprerender 105 105 No No 91 No 103 103 No 71 No 20.0\nreferrer_policy 111 111 No No 97 No 111 111 No No No 22.0\nrequires 110 110 No No 96 No 103 103 No 71 No 20.0 # :::\nSee also # ::: section-content\nPrerender pages in Chrome for instant page navigations{target=\u0026quot;_blank\u0026quot;} on developer.chrome.com (2023) Speculative loading Speculation Rules API ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/speculationrules{._attribution-link} :::\n"},{"id":178,"href":"/docs/references/languages/html/element/search/","title":"Search","section":"HTML","content":" \u0026lt;search\u0026gt;: The generic search element # ::: section-content The \u0026lt;search\u0026gt; HTML element is a container representing the parts of the document or application with form controls or other content related to performing a search or filtering operation. The \u0026lt;search\u0026gt; element semantically identifies the purpose of the element's contents as having search or filtering capabilities. The search or filtering functionality can be for the website or application, the current web page or document, or the entire Internet or subsection thereof. :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content The \u0026lt;search\u0026gt; element is not for presenting search results. Rather, search or filtered results should be presented as part of the main content of that web page. That said, suggestions and links that are part of \u0026quot;quick search\u0026quot; functionality within the search or filtering functionality are appropriately nested within the contents of the \u0026lt;search\u0026gt; element as they are search features. :::\nAccessibility # ::: section-content The \u0026lt;search\u0026gt; element defines a search landmark. This removes the need for adding role=search to a \u0026lt;form\u0026gt; element. :::\nExamples # Header search form # ::: section-content This example demonstrates the use of \u0026lt;search\u0026gt; as the container for a search within a website header to perform a simple site-wide search. The \u0026lt;search\u0026gt; is a semantic container for the \u0026lt;form\u0026gt; that submits the user-entered search query to a server.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Movie website\u0026lt;/h1\u0026gt; \u0026lt;search\u0026gt; \u0026lt;form action=\u0026#34;./search/\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;movie\u0026#34;\u0026gt;Find a Movie\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;search\u0026#34; id=\u0026#34;movie\u0026#34; name=\u0026#34;q\u0026#34; /\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Search\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/search\u0026gt; \u0026lt;/header\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nWeb app search # ::: section-content This example demonstrates potential DOM content when dynamically including JavaScript search functionality in a web application. When search functionality is implemented entirely with JavaScript, if no form is submitted, neither a \u0026lt;form\u0026gt; element nor a submit \u0026lt;button\u0026gt; is required. For semantics, the \u0026lt;search\u0026gt; element is included to contain the search and filtering capabilities.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;search\u0026gt; \u0026lt;label\u0026gt; Find and filter your query \u0026lt;input type=\u0026#34;search\u0026#34; id=\u0026#34;query\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;exact-only\u0026#34; /\u0026gt; Exact matches only \u0026lt;/label\u0026gt; \u0026lt;section\u0026gt; \u0026lt;h3\u0026gt;Results:\u0026lt;/h3\u0026gt; \u0026lt;ul id=\u0026#34;results\u0026#34;\u0026gt; \u0026lt;!-- search result content --\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;output id=\u0026#34;no-results\u0026#34;\u0026gt; \u0026lt;!-- no results content --\u0026gt; \u0026lt;/output\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/search\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: :::\n::: {#sect3 .notecard .note} Note: Remember that some users don't have JavaScript, and none of your users have JavaScript running until the JavaScript is successfully downloaded, parsed, and executed, ensure your users can access the content of your site with JavaScript disabled. ::: :::\nMultiple searches # ::: section-content This example demonstrates a page with two search features. The first is a global site search located on the header. The second is a search and filter based on the page context, in our example a car search.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Car rental agency\u0026lt;/h1\u0026gt; \u0026lt;search title=\u0026#34;Website\u0026#34;\u0026gt;...\u0026lt;/search\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;main\u0026gt; \u0026lt;h2\u0026gt;Cars available for rent\u0026lt;/h2\u0026gt; \u0026lt;search title=\u0026#34;Cars\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Filter results\u0026lt;/h3\u0026gt; ... \u0026lt;/search\u0026gt; \u0026lt;article\u0026gt; \u0026lt;!-- search result content --\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/body\u0026gt; :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, palpable content. Permitted content Flow content. Tag omission None, both the starting and ending tag are mandatory. Implicit ARIA role search Permitted ARIA roles form, group, none, presentation, region, search DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-search-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet search 118 118 118 No 104 17 118 118 118 No 17 No :::\nSee also # ::: section-content\nOther search-related elements: \u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt;, \u0026lt;aside\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;form\u0026gt; ARIA: Search role ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/search{._attribution-link} :::\n"},{"id":179,"href":"/docs/references/languages/html/element/section/","title":"Section","section":"HTML","content":" \u0026lt;section\u0026gt;: The Generic Section element # ::: section-content The \u0026lt;section\u0026gt; HTML element represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;section\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Choosing an Apple Introduction This document provides a guide to help with the important task of choosing the correct Apple.\n\u0026lt;section\u0026gt; \u0026lt;h2\u0026gt;Criteria\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt; There are many different criteria to be considered when choosing an Apple — size, color, firmness, sweetness, tartness... \u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} h1, h2 { margin: 0; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content As mentioned above, \u0026lt;section\u0026gt; is a generic sectioning element, and should only be used if there isn't a more specific element to represent it. As an example, a navigation menu should be wrapped in a \u0026lt;nav\u0026gt; element, but a list of search results or a map display and its controls don't have specific elements, and could be put inside a \u0026lt;section\u0026gt;.\nAlso consider these cases:\nIf the contents of the element represent a standalone, atomic unit of content that makes sense syndicated as a standalone piece (e.g. a blog post or blog comment, or a newspaper article), the \u0026lt;article\u0026gt; element would be a better choice. If the contents represent useful tangential information that works alongside the main content, but is not directly part of it (like related links, or an author bio), use an \u0026lt;aside\u0026gt;. If the contents represent the main content area of a document, use \u0026lt;main\u0026gt;. If you are only using the element as a styling wrapper, use a `` instead. To reiterate, each \u0026lt;section\u0026gt; should be identified, typically by including a heading ( h1 - h6 element) as a child of the \u0026lt;section\u0026gt; element, wherever possible. See below for examples of where you might see a \u0026lt;section\u0026gt; without a heading. :::\nExamples # Simple usage example # ::: section-content\nBefore # ::: code-example [html]{.language-name}\n\u0026lt;h2\u0026gt;Heading\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Bunch of awesome content\u0026lt;/p\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: :::\nAfter # ::: code-example [html]{.language-name}\n\u0026lt;section\u0026gt; \u0026lt;h2\u0026gt;Heading\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Bunch of awesome content\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nUsing a section without a heading # ::: section-content Circumstances where you might see \u0026lt;section\u0026gt; used without a heading are typically found in web application/UI sections rather than in traditional document structures. In a document, it doesn't really make any sense to have a separate section of content without a heading to describe its contents. Such headings are useful for all readers, but particularly useful for users of assistive technologies like screen readers, and they are also good for SEO.\nConsider however a secondary navigation mechanism. If the global navigation is already wrapped in a \u0026lt;nav\u0026gt; element, you could conceivably wrap a previous/next menu in a \u0026lt;section\u0026gt;:\n::: code-example [html]{.language-name}\n\u0026lt;section\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Previous article\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Next article\u0026lt;/a\u0026gt; \u0026lt;/section\u0026gt; :::\nOr what about some kind of button bar for controlling your app? This might not necessarily want a heading, but it is still a distinct section of the document:\n::: code-example [html]{.language-name}\n\u0026lt;section\u0026gt; \u0026lt;button class=\u0026#34;reply\u0026#34;\u0026gt;Reply\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;reply-all\u0026#34;\u0026gt;Reply to all\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;fwd\u0026#34;\u0026gt;Forward\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;del\u0026#34;\u0026gt;Delete\u0026lt;/button\u0026gt; \u0026lt;/section\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: :::\nDepending on the content, including a heading could also be good for SEO, so it is an option to consider. :::\nTechnical summary # ::: section-content\nContent categories Flow content, Sectioning content, palpable content. Permitted content Flow content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Note that a \u0026lt;section\u0026gt; element must not be a descendant of an \u0026lt;address\u0026gt; element. Implicit ARIA role region if the element has an accessible name, otherwise generic Permitted ARIA roles alert, alertdialog, application, banner, complementary, contentinfo, dialog, document, feed, log, main, marquee, navigation, none, note, presentation, search, status, tabpanel DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-section-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet section 5 12 4 9 11.1 5 4.4 18 4 11.1 4.2 1.0 :::\nSee also # ::: section-content\nOther section-related elements: \u0026lt;body\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;aside\u0026gt;, h1, h2, h3, h4, h5, h6, \u0026lt;hgroup\u0026gt;, \u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt;, \u0026lt;address\u0026gt; Using HTML sections and outlines ARIA: Region role Why You Should Choose HTML5 article Over section{target=\u0026quot;_blank\u0026quot;}, by Bruce Lawson ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/section{._attribution-link} :::\n"},{"id":180,"href":"/docs/references/languages/html/element/select/","title":"Select","section":"HTML","content":" \u0026lt;select\u0026gt;: The HTML Select element # ::: section-content The \u0026lt;select\u0026gt; HTML element represents a control that provides a menu of options. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;select\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Choose a pet:\n\u0026lt;select name=\u0026quot;pets\u0026quot; id=\u0026quot;pet-select\u0026quot;\u0026gt; \u0026lt;option value=\u0026quot;\u0026quot;\u0026gt;--Please choose an option--\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;dog\u0026quot;\u0026gt;Dog\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;cat\u0026quot;\u0026gt;Cat\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;hamster\u0026quot;\u0026gt;Hamster\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;parrot\u0026quot;\u0026gt;Parrot\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;spider\u0026quot;\u0026gt;Spider\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;goldfish\u0026quot;\u0026gt;Goldfish\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label { font-family: sans-serif; font-size: 1rem; padding-right: 10px; }\nselect { font-size: 0.9rem; padding: 2px 5px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe above example shows typical \u0026lt;select\u0026gt; usage. It is given an id attribute to enable it to be associated with a \u0026lt;label\u0026gt; for accessibility purposes, as well as a name attribute to represent the name of the associated data point submitted to the server. Each menu option is defined by an \u0026lt;option\u0026gt; element nested inside the \u0026lt;select\u0026gt;.\nEach \u0026lt;option\u0026gt; element should have a value attribute containing the data value to submit to the server when that option is selected. If no value attribute is included, the value defaults to the text contained inside the element. You can include a selected attribute on an \u0026lt;option\u0026gt; element to make it selected by default when the page first loads.\nThe \u0026lt;select\u0026gt; element has some unique attributes you can use to control it, such as multiple to specify whether multiple options can be selected, and size to specify how many options should be shown at once. It also accepts most of the general form input attributes such as required, disabled, autofocus, etc.\nYou can further nest \u0026lt;option\u0026gt; elements inside \u0026lt;optgroup\u0026gt; elements to create separate groups of options inside the dropdown.\nFor further examples, see The native form widgets: Drop-down content. :::\nAttributes # ::: section-content This element includes the global attributes.\nautocomplete A string providing a hint for a user agent's autocomplete feature. See The HTML autocomplete attribute for a complete list of values and details on how to use autocomplete.\nautofocus This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form element in a document can have the autofocus attribute.\ndisabled This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example \u0026lt;fieldset\u0026gt;; if there is no containing element with the disabled attribute set, then the control is enabled.\nform The \u0026lt;form\u0026gt; element to associate the \u0026lt;select\u0026gt; with (its form owner). The value of this attribute must be the id of a \u0026lt;form\u0026gt; in the same document. (If this attribute is not set, the \u0026lt;select\u0026gt; is associated with its ancestor \u0026lt;form\u0026gt; element, if any.)\nThis attribute lets you associate \u0026lt;select\u0026gt; elements to \u0026lt;form\u0026gt;s anywhere in the document, not just inside a \u0026lt;form\u0026gt;. It can also override an ancestor \u0026lt;form\u0026gt; element.\nmultiple This Boolean attribute indicates that multiple options can be selected in the list. If it is not specified, then only one option can be selected at a time. When multiple is specified, most browsers will show a scrolling list box instead of a single line dropdown.\nname This attribute is used to specify the name of the control.\nrequired A Boolean attribute indicating that an option with a non-empty string value must be selected.\nsize If the control is presented as a scrolling list box (e.g. when multiple is specified), this attribute represents the number of rows in the list that should be visible at one time. Browsers are not required to present a select element as a scrolled list box. The default value is 0.\n::: {#sect1 .notecard .note} Note: According to the HTML specification, the default value for size should be 1; however, in practice, this has been found to break some websites, and no other browser currently does that, so Mozilla has opted to continue to return 0 for the time being with Firefox. ::: :::\nUsage notes # Selecting multiple options # ::: section-content On a desktop computer, there are a number of ways to select multiple options in a \u0026lt;select\u0026gt; element with a multiple attribute:\nMouse users can hold the [Ctrl]{.kbd}, [Command]{.kbd}, or [Shift]{.kbd} keys (depending on what makes sense for your operating system) and then click multiple options to select/deselect them.\n::: {#sect2 .notecard .warning} Warning: The mechanism for selecting multiple non-contiguous items via the keyboard described below currently only seems to work in Firefox.\nOn macOS, the [Ctrl]{.kbd} + [Up]{.kbd} and [Ctrl]{.kbd} + [Down]{.kbd} shortcuts conflict with the OS default shortcuts for Mission Control and Application windows, so you'll have to turn these off before it will work. :::\nKeyboard users can select multiple contiguous items by:\nFocusing on the \u0026lt;select\u0026gt; element (e.g. using [Tab]{.kbd} ). Selecting an item at the top or bottom of the range they want to select using the [Up]{.kbd} and [Down]{.kbd} cursor keys to go up and down the options. Holding down the [Shift]{.kbd} key and then using the [Up]{.kbd} and [Down]{.kbd} cursor keys to increase or decrease the range of items selected. Keyboard users can select multiple non-contiguous items by:\nFocusing on the \u0026lt;select\u0026gt; element (e.g. using [Tab]{.kbd} ). Holding down the [Ctrl]{.kbd} key then using the [Up]{.kbd} and [Down]{.kbd} cursor keys to change the \u0026quot;focused\u0026quot; select option, i.e. the one that will be selected if you choose to do so. The \u0026quot;focused\u0026quot; select option is highlighted with a dotted outline, in the same way as a keyboard-focused link. Pressing [Space]{.kbd} to select/deselect \u0026quot;focused\u0026quot; select options. ::: Styling with CSS # ::: section-content The \u0026lt;select\u0026gt; element is notoriously difficult to style productively with CSS. You can affect certain aspects like any element \u0026mdash; for example, manipulating the box model, the displayed font, etc., and you can use the appearance property to remove the default system appearance.\nHowever, these properties don't produce a consistent result across browsers, and it is hard to do things like line different types of form element up with one another in a column. The \u0026lt;select\u0026gt; element's internal structure is complex, and hard to control. If you want to get full control, you should consider using a library with good facilities for styling form widgets, or try rolling your own dropdown menu using non-semantic elements, JavaScript, and WAI-ARIA to provide semantics.\nFor more useful information on styling \u0026lt;select\u0026gt;, see:\nStyling HTML forms Advanced styling for HTML forms Also see the \u0026quot;Customizing select styles\u0026quot; example below for an example of you could attempt a simple \u0026lt;select\u0026gt; styling. :::\nExamples # Basic select # ::: section-content The following example creates a very simple dropdown menu, the second option of which is selected by default.\n::: code-example [html]{.language-name}\n\u0026lt;!-- The second value will be selected initially --\u0026gt; \u0026lt;select name=\u0026#34;choice\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;first\u0026#34;\u0026gt;First Value\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;second\u0026#34; selected\u0026gt;Second Value\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;third\u0026#34;\u0026gt;Third Value\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nAdvanced select with multiple features # ::: section-content The follow example is more complex, showing off more features you can use on a \u0026lt;select\u0026gt; element:\n::: code-example [html]{.language-name}\n\u0026lt;label\u0026gt; Please choose one or more pets: \u0026lt;select name=\u0026#34;pets\u0026#34; multiple size=\u0026#34;4\u0026#34;\u0026gt; \u0026lt;optgroup label=\u0026#34;4-legged pets\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;dog\u0026#34;\u0026gt;Dog\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;cat\u0026#34;\u0026gt;Cat\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;hamster\u0026#34; disabled\u0026gt;Hamster\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;optgroup label=\u0026#34;Flying pets\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;parrot\u0026#34;\u0026gt;Parrot\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;macaw\u0026#34;\u0026gt;Macaw\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;albatross\u0026#34;\u0026gt;Albatross\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/label\u0026gt; :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: :::\nYou'll see that:\nMultiple options are selectable because we've included the multiple attribute. The size attribute causes only 4 lines to display at a time; you can scroll to view all the options. We've included \u0026lt;optgroup\u0026gt; elements to divide the options up into different groups. This is a purely visual grouping, its visualization generally consists of the group name being bolded, and the options being indented. The \u0026quot;Hamster\u0026quot; option includes a disabled attribute and therefore can't be selected at all. ::: Customizing select styles # ::: section-content This example shows how you could use some CSS and JavaScript to provide extensive custom styling for a \u0026lt;select\u0026gt; box.\nThis example basically:\nClones the \u0026lt;select\u0026gt;'s context (the \u0026lt;option\u0026gt; elements) in a parent wrapper and reimplements the standard expected behavior using additional HTML elements and JavaScript. This includes basic tab behavior to provide keyboard accessibility. Maps some standards native attributes to data-attributes of the new elements in order to manage state and CSS. ::: {#sect5 .notecard .note} Note: Not all native features are supported, it's a Proof of Concept. IT starts from standard HTML but the same results can be achieved starting from JSON data, custom HTML, or other solutions. :::\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;form\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Standard controls\u0026lt;/legend\u0026gt; \u0026lt;select name=\u0026#34;1A\u0026#34; id=\u0026#34;select\u0026#34; autocomplete=\u0026#34;off\u0026#34; required\u0026gt; \u0026lt;option\u0026gt;Carrots\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Peas\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Beans\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Pneumonoultramicroscopicsilicovolcanoconiosis\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;fieldset id=\u0026#34;custom\u0026#34;\u0026gt; \u0026lt;legend\u0026gt;Custom controls\u0026lt;/legend\u0026gt; \u0026lt;select name=\u0026#34;2A\u0026#34; id=\u0026#34;select\u0026#34; autocomplete=\u0026#34;off\u0026#34; required\u0026gt; \u0026lt;option\u0026gt;Carrots\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Peas\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Beans\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Pneumonoultramicroscopicsilicovolcanoconiosis\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; :::\nCSS # ::: code-example [css]{.language-name}\nbody { font-family: Cambria, Cochin, Georgia, Times, \u0026#34;Times New Roman\u0026#34;, serif; } .select:focus { border-color: blue; } html body form fieldset#custom div.select[data-multiple] div.header { display: none; } html body form fieldset#custom div.select div.header { content: \u0026#34;↓\u0026#34;; display: flex; flex: 1; align-items: center; padding: 0; position: relative; width: auto; box-sizing: border-box; border-width: 1px; border-style: inherit; border-color: inherit; border-radius: inherit; } html body form fieldset#custom div.select div.header::after { content: \u0026#34;↓\u0026#34;; align-self: stretch; display: flex; align-content: center; justify-content: center; justify-items: center; align-items: center; padding: 0.5em; } html body form fieldset#custom div.select div.header:hover::after { background-color: blue; } .select .header select { appearance: none; font-family: inherit; font-size: inherit; padding: 0; border-width: 0; width: 100%; flex: 1; display: none; } .select .header select optgroup { display: none; } .select select div.option { display: none; } html body form fieldset#custom div.select { user-select: none; box-sizing: border-box; position: relative; border-radius: 4px; border-style: solid; border-width: 0; border-color: gray; width: auto; display: inline-block; } html body form fieldset#custom div.select:focus, html body form fieldset#custom div.select:hover { border-color: blue; } html body form fieldset#custom div.select[data-open] { border-bottom-left-radius: 0; border-bottom-right-radius: 0; } html body form fieldset#custom div.select[data-open] datalist { display: initial; } html body form fieldset#custom div.select datalist { appearance: none; position: absolute; border-style: solid; border-width: 1px; border-color: gray; left: 0; display: none; width: 100%; box-sizing: border-box; z-index: 2; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; } html body form fieldset#custom div.select datalist div.option { background-color: white; margin-bottom: 1px; cursor: pointer; padding: 0.5em; border-width: 0; } html body form fieldset#custom div.select datalist div.option:hover, html body form fieldset#custom div.select datalist div.option:focus, html body form fieldset#custom div.select datalist div.option:checked { background-color: blue; color: white; } html body form fieldset#custom div.select div.optgroup div.option[data-disabled] { color: gray; } html body form fieldset#custom div.select div.optgroup div.option[data-checked] { background-color: blue; color: white; } html body form fieldset#custom div.select div.optgroup div.label { font-weight: bold; } html body form fieldset#custom div.select div.optgroup div.option div.label { font-weight: normal; padding: 0.25em; } html body form fieldset#custom div.select div.header span { flex: 1; padding: 0.5em; } :::\nJavaScript # ::: code-example [js]{.language-name}\nconst selects = custom.querySelectorAll(\u0026#34;select\u0026#34;); for (const select of selects) { const div = document.createElement(\u0026#34;div\u0026#34;); const header = document.createElement(\u0026#34;div\u0026#34;); const datalist = document.createElement(\u0026#34;datalist\u0026#34;); const optgroups = select.querySelectorAll(\u0026#34;optgroup\u0026#34;); const span = document.createElement(\u0026#34;span\u0026#34;); const options = select.options; const parent = select.parentElement; const multiple = select.hasAttribute(\u0026#34;multiple\u0026#34;); function onclick(e) { const disabled = this.hasAttribute(\u0026#34;data-disabled\u0026#34;); select.value = this.dataset.value; span.innerText = this.dataset.label; if (disabled) return; if (multiple) { if (e.shiftKey) { const checked = this.hasAttribute(\u0026#34;data-checked\u0026#34;); if (checked) { this.removeAttribute(\u0026#34;data-checked\u0026#34;); } else { this.setAttribute(\u0026#34;data-checked\u0026#34;, \u0026#34;\u0026#34;); } } else { const options = div.querySelectorAll(\u0026#34;.option\u0026#34;); for (let i = 0; i \u0026lt; options.length; i++) { const option = options[i]; option.removeAttribute(\u0026#34;data-checked\u0026#34;); } this.setAttribute(\u0026#34;data-checked\u0026#34;, \u0026#34;\u0026#34;); } } } function onkeyup(e) { e.preventDefault(); e.stopPropagation(); if (e.keyCode === 13) { this.click(); } } div.classList.add(\u0026#34;select\u0026#34;); header.classList.add(\u0026#34;header\u0026#34;); div.tabIndex = 1; select.tabIndex = -1; span.innerText = select.label; header.appendChild(span); for (const attribute of select.attributes) { div.dataset[attribute.name] = attribute.value; } for (let i = 0; i \u0026lt; options.length; i++) { const option = document.createElement(\u0026#34;div\u0026#34;); const label = document.createElement(\u0026#34;div\u0026#34;); const o = options[i]; for (const attribute of o.attributes) { option.dataset[attribute.name] = attribute.value; } option.classList.add(\u0026#34;option\u0026#34;); label.classList.add(\u0026#34;label\u0026#34;); label.innerText = o.label; option.dataset.value = o.value; option.dataset.label = o.label; option.onclick = onclick; option.onkeyup = onkeyup; option.tabIndex = i + 1; option.appendChild(label); datalist.appendChild(option); } div.appendChild(header); for (const o of optgroups) { const optgroup = document.createElement(\u0026#34;div\u0026#34;); const label = document.createElement(\u0026#34;div\u0026#34;); const options = o.querySelectorAll(\u0026#34;option\u0026#34;); Object.assign(optgroup, o); optgroup.classList.add(\u0026#34;optgroup\u0026#34;); label.classList.add(\u0026#34;label\u0026#34;); label.innerText = o.label; optgroup.appendChild(label); div.appendChild(optgroup); for (const o of options) { const option = document.createElement(\u0026#34;div\u0026#34;); const label = document.createElement(\u0026#34;div\u0026#34;); for (const attribute of o.attributes) { option.dataset[attribute.name] = attribute.value; } option.classList.add(\u0026#34;option\u0026#34;); label.classList.add(\u0026#34;label\u0026#34;); label.innerText = o.label; option.tabIndex = i + 1; option.dataset.value = o.value; option.dataset.label = o.label; option.onclick = onclick; option.onkeyup = onkeyup; option.tabIndex = i + 1; option.appendChild(label); optgroup.appendChild(option); } } div.onclick = (e) =\u0026gt; { e.preventDefault(); }; parent.insertBefore(div, select); header.appendChild(select); div.appendChild(datalist); datalist.style.top = `${header.offsetTop + header.offsetHeight}px`; div.onclick = (e) =\u0026gt; { if (!multiple) { const open = div.hasAttribute(\u0026#34;data-open\u0026#34;); e.stopPropagation(); if (open) { div.removeAttribute(\u0026#34;data-open\u0026#34;); } else { div.setAttribute(\u0026#34;data-open\u0026#34;, \u0026#34;\u0026#34;); } } }; div.onkeyup = (event) =\u0026gt; { event.preventDefault(); if (event.keyCode === 13) { div.click(); } }; document.addEventListener(\u0026#34;click\u0026#34;, (e) =\u0026gt; { if (div.hasAttribute(\u0026#34;data-open\u0026#34;)) { div.removeAttribute(\u0026#34;data-open\u0026#34;); } }); const width = Math.max( ...Array.from(options).map((e) =\u0026gt; { span.innerText = e.label; return div.offsetWidth; }), ); console.log(width); div.style.width = `${width}px`; } document.forms[0].onsubmit = (e) =\u0026gt; { const data = new FormData(this); e.preventDefault(); submit.innerText = JSON.stringify([...data.entries()]); }; :::\nResult # ::: iframe Standard controls Carrots Peas Beans Pneumonoultramicroscopicsilicovolcanoconiosis\nCustom controls Carrots Peas Beans Pneumonoultramicroscopicsilicovolcanoconiosis ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, interactive content, listed, labelable, resettable, and submittable form-associated element Permitted content Zero or more \u0026lt;option\u0026gt; or \u0026lt;optgroup\u0026gt; elements. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role combobox with no multiple attribute and no size attribute greater than 1, otherwise listbox Permitted ARIA roles menu with no multiple attribute and no size attribute greater than 1, otherwise no role permitted DOM interface HTMLSelectElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-select-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Android Chrome Android Firefox for Android Opera Safari on IOS Samsung Internet Explorer Android select 1 12 1 Yes 2 1 ≤37 18 4 10.1 1 1.0\n`border-radius` on Historically, Firefox has allowed `border-radius` on \\[\\\u0026quot;In the Browser app `border-radius` on Firefox for Android, by `border-radius` on `border-radius` on `\u0026lt;select\u0026gt;` elements is keyboard and mouse events to bubble `\u0026lt;select\u0026gt;` elements is for Android 4.1 (and `\u0026lt;select\u0026gt;` elements is default, sets a `\u0026lt;select\u0026gt;` elements is `\u0026lt;select\u0026gt;` elements is ignored unless up from the `\u0026lt;option\u0026gt;` element to the ignored unless possibly later ignored unless `background-image` gradient ignored unless ignored unless `-webkit-appearance` parent `\u0026lt;select\u0026gt;` element, although `-webkit-appearance` versions), there is a `-webkit-appearance` on all `\u0026lt;select multiple\u0026gt;` `-webkit-appearance` `-webkit-appearance` is overridden to an this behavior is inconsistent across is overridden to an bug where the menu is overridden to an elements. This can be is overridden to an is overridden to an appropriate value. many browsers. For better Web appropriate value. indicator triangle on appropriate value. disabled using appropriate value. appropriate value. compatibility (and for technical the side of a `background-image: none`. reasons), when Firefox is in `\u0026lt;select\u0026gt;` will not be multi-process mode the `\u0026lt;select\u0026gt;` displayed if a element is displayed as a drop-down `background`, list. The behavior is unchanged if `border`, or the `\u0026lt;select\u0026gt;` is presented inline `border-radius` style and it has either the multiple is applied to the attribute defined or a size attribute `\u0026lt;select\u0026gt;`.\\\u0026quot;, set to more than 1. Rather than \\\u0026quot;`border-radius` on watching `\u0026lt;option\u0026gt;` elements for `\u0026lt;select\u0026gt;` elements is events, you should watch for change ignored unless events on `\u0026lt;select\u0026gt;`. See [bug `-webkit-appearance` 1090602](https://bugzil.la/1090602) is overridden to an for details. appropriate value.\\\u0026quot;\\] disabled 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nform 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nmultiple 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nname 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nrequired 10 12 4 10 15 5.1 4.4 18 4 14 5 1.0\nsize 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 # :::\nSee also # ::: section-content\nEvents fired by \u0026lt;select\u0026gt;: change, input The \u0026lt;option\u0026gt; element The \u0026lt;optgroup\u0026gt; element ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/select{._attribution-link} :::\n"},{"id":181,"href":"/docs/references/languages/html/element/slot/","title":"Slot","section":"HTML","content":" \u0026lt;slot\u0026gt;: The Web Component Slot element # ::: section-content The \u0026lt;slot\u0026gt; HTML element\u0026mdash;part of the Web Components technology suite\u0026mdash;is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together. :::\nAttributes # ::: section-content This element includes the global attributes.\nname The slot's name.\nA named slot is a \u0026lt;slot\u0026gt; element with a name attribute. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;template id=\u0026#34;element-details-template\u0026#34;\u0026gt; \u0026lt;style\u0026gt; details { font-family: \u0026#34;Open Sans Light\u0026#34;, Helvetica, Arial, sans-serif; } .name { font-weight: bold; color: #217ac0; font-size: 120%; } h4 { margin: 10px 0 -8px 0; background: #217ac0; color: white; padding: 2px 6px; border: 1px solid #cee9f9; border-radius: 4px; } .attributes { margin-left: 22px; font-size: 90%; } .attributes p { margin-left: 16px; font-style: italic; } \u0026lt;/style\u0026gt; \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt; \u0026lt;code class=\u0026#34;name\u0026#34;\u0026gt; \u0026amp;lt;\u0026lt;slot name=\u0026#34;element-name\u0026#34;\u0026gt;NEED NAME\u0026lt;/slot\u0026gt;\u0026amp;gt; \u0026lt;/code\u0026gt; \u0026lt;span class=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;description\u0026#34;\u0026gt;NEED DESCRIPTION\u0026lt;/slot\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/summary\u0026gt; \u0026lt;div class=\u0026#34;attributes\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;Attributes\u0026lt;/h4\u0026gt; \u0026lt;slot name=\u0026#34;attributes\u0026#34;\u0026gt;\u0026lt;p\u0026gt;None\u0026lt;/p\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;/template\u0026gt; :::\n::: {#sect1 .notecard .note} Note: You can see this complete example in action at element-details{target=\u0026quot;_blank\u0026quot;} (see it running live{target=\u0026quot;_blank\u0026quot;}). In addition, you can find an explanation at Using templates and slots. ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content Permitted content Transparent Events slotchange Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLSlotElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-slot-element]{.small}\nDOM Standard\n[# shadow-tree-slots]{.small} # :::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet slot 53 79 63 No 40 10 53 53 63 41 10 6.0 name 53 79 63 No 40 10 53 53 63 41 10 6.0 :::\nSee also # ::: section-content\nHTML \u0026lt;template\u0026gt; element HTML slot attribute CSS ::slotted pseudo-element CSS scoping module ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot{._attribution-link} :::\n"},{"id":182,"href":"/docs/references/languages/html/element/small/","title":"Small","section":"HTML","content":" \u0026lt;small\u0026gt;: the side comment element # ::: section-content The \u0026lt;small\u0026gt; HTML element represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font-size smaller, such as from small to x-small. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;small\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} MDN Web Docs is a learning platform for Web technologies and the software that powers the Web.\n\u0026lt;hr /\u0026gt; \u0026lt;p\u0026gt;\u0026lt;small\u0026gt;The content is licensed under a Creative Commons Attribution-ShareAlike 2.5 Generic License.\u0026lt;/small\u0026gt;\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} small { font-size: 0.7em; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nExamples # Basic usage # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; This is the first sentence. \u0026lt;small\u0026gt;This whole sentence is in small letters.\u0026lt;/small\u0026gt; \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nCSS alternative # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; This is the first sentence. \u0026lt;span style=\u0026#34;font-size:0.8em\u0026#34;\u0026gt;This whole sentence is in small letters.\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nNotes # ::: section-content Although the \u0026lt;small\u0026gt; element, like the \u0026lt;b\u0026gt; and \u0026lt;i\u0026gt; elements, may be perceived to violate the principle of separation between structure and presentation, all three are valid in HTML. Authors are encouraged to use their best judgement when determining whether to use \u0026lt;small\u0026gt; or CSS. :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content Permitted content Phrasing content Tag omission None; must have both a start tag and an end tag. Permitted parents Any element that accepts phrasing content, or any element that accepts flow content. Implicit ARIA role generic Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-small-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet small 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\n\u0026lt;b\u0026gt; \u0026lt;sub\u0026gt; and \u0026lt;sup\u0026gt; \u0026lt;font\u0026gt; \u0026lt;style\u0026gt; HTML 4.01 Specification: Font Styles{target=\u0026quot;_blank\u0026quot;} ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/small{._attribution-link} :::\n"},{"id":183,"href":"/docs/references/languages/html/element/source/","title":"Source","section":"HTML","content":" \u0026lt;source\u0026gt;: The Media or Image Source element # ::: section-content The \u0026lt;source\u0026gt; HTML element specifies multiple media resources for the \u0026lt;picture\u0026gt;, the \u0026lt;audio\u0026gt; element, or the \u0026lt;video\u0026gt; element. It is a void element, meaning that it has no content and does not have a closing tag. It is commonly used to offer the same media content in multiple file formats in order to provide compatibility with a broad range of browsers given their differing support for image file formats and media file formats. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;source\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Download the WEBM or MP4 video. ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nContent categories None. Permitted content None; it is a void element. Tag omission It must have a start tag, but must not have an end tag. Permitted parents A media element—\u0026lt;audio\u0026gt; or \u0026lt;video\u0026gt;—and it must be placed before any flow content or \u0026lt;track\u0026gt; element. A \u0026lt;picture\u0026gt; element, and it must be placed before the \u0026lt;img\u0026gt; element. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLSourceElement ::: Attributes # ::: section-content This element includes the global attributes.\ntype The MIME media type of the image or other media type, optionally with a codecs parameter.\nsrc Required if the source element's parent is an \u0026lt;audio\u0026gt; and \u0026lt;video\u0026gt; element, but not allowed if the source element's parent is a \u0026lt;picture\u0026gt; element.\nAddress of the media resource.\nsrcset Required if the source element's parent is a \u0026lt;picture\u0026gt; element, but not allowed if the source element's parent is an \u0026lt;audio\u0026gt; or \u0026lt;video\u0026gt; element.\nA list of one or more strings, separated by commas, indicating a set of possible images represented by the source for the browser to use. Each string is composed of:\nOne URL specifying an image. A width descriptor, which consists of a string containing a positive integer directly followed by \u0026quot;w\u0026quot;, such as 300w. The default value, if missing, is the infinity. A pixel density descriptor, that is a positive floating number directly followed by \u0026quot;x\u0026quot;. The default value, if missing, is 1x. Each string in the list must have at least a width descriptor or a pixel density descriptor to be valid. The two types of descriptors should not be mixed together and only one should be used consistently throughout the list. Among the list, the value of each descriptor must be unique. The browser chooses the most adequate image to display at a given point of time. If the sizes attribute is present, then a width descriptor must be specified for each string. If the browser does not support srcset, then src will be used for the default source.\nsizes Allowed if the source element's parent is a \u0026lt;picture\u0026gt; element, but not allowed if the source element's parent is an \u0026lt;audio\u0026gt; or \u0026lt;video\u0026gt; element.\nA list of source sizes that describes the final rendered width of the image represented by the source. Each source size consists of a comma-separated list of media condition-length pairs. Before laying the page out, the browser uses this information to determine which image is defined in srcset to use. Please note that sizes will have its effect only if width dimension descriptors are provided with srcset instead of pixel ratio values (200w instead of 2x for example).\nmedia Media query of the resource's intended media.\nheight Allowed if the source element's parent is a \u0026lt;picture\u0026gt; element, but not allowed if the source element's parent is an \u0026lt;audio\u0026gt; or \u0026lt;video\u0026gt; element.\nThe intrinsic height of the image, in pixels. Must be an integer without a unit.\nwidth Allowed if the source element's parent is a \u0026lt;picture\u0026gt; element, but not allowed if the source element's parent is an \u0026lt;audio\u0026gt; or \u0026lt;video\u0026gt; element.\nThe intrinsic width of the image in pixels. Must be an integer without a unit.\nIf the type attribute isn't specified, the media's type is retrieved from the server and checked to see if the user agent can handle it; if it can't be rendered, the next \u0026lt;source\u0026gt; is checked. If the type attribute is specified, it's compared against the types the user agent can present, and if it's not recognized, the server doesn't even get queried; instead, the next \u0026lt;source\u0026gt; element is checked at once.\nWhen used in the context of a \u0026lt;picture\u0026gt; element, the browser will fall back to using the image specified by the \u0026lt;picture\u0026gt; element's \u0026lt;img\u0026gt; child if it is unable to find a suitable image to use after examining every provided \u0026lt;source\u0026gt;. :::\nUsage notes # ::: section-content The \u0026lt;source\u0026gt; element is a void element, which means that it not only has no content but also has no closing tag. That is, you never use \u0026quot;\u0026lt;/source\u0026gt;\u0026quot; in your HTML.\nFor information about image formats supported by web browsers and guidance on selecting appropriate formats to use, see our Image file type and format guide on the web. For details on the video and audio media types you can use, see the Guide to media types formats used on the web. :::\nExamples # Video with type attribute example # ::: section-content This example demonstrates how to offer a video in WebM format for users whose browsers support WebM format, Ogg format for users whose browsers support Ogg format, and a QuickTime format video for users whose browsers support that. If the audio or video element is not supported by the browser, a notice is displayed instead. If the browser supports the element but does not support any of the specified formats, an error event is raised and the default media controls (if enabled) will indicate an error. Be sure to reference our guide to media types and formats on the web for details on what media file formats you can use and how well they're supported by browsers.\n::: code-example [html]{.language-name}\n\u0026lt;video controls\u0026gt; \u0026lt;source src=\u0026#34;foo.webm\u0026#34; type=\u0026#34;video/webm\u0026#34; /\u0026gt; \u0026lt;source src=\u0026#34;foo.ogg\u0026#34; type=\u0026#34;video/ogg\u0026#34; /\u0026gt; \u0026lt;source src=\u0026#34;foo.mov\u0026#34; type=\u0026#34;video/quicktime\u0026#34; /\u0026gt; I\u0026#39;m sorry; your browser doesn\u0026#39;t support HTML video. \u0026lt;/video\u0026gt; ::: :::\nVideo with media attribute example # ::: section-content This example demonstrates how to offer an alternate source file for viewports at or above a certain width. When a user's browsing environment meets the specified media condition, the associated \u0026lt;source\u0026gt; element is chosen, and the contents of its src attribute are requested and rendered. If the media condition does not match, the user agent will move on to the next \u0026lt;source\u0026gt; in the source order. The second source option in the below code has no media condition, so will be selected for all other browsing contexts.\n::: code-example [html]{.language-name}\n\u0026lt;video controls\u0026gt; \u0026lt;source src=\u0026#34;foo-large.webm\u0026#34; media=\u0026#34;(min-width: 800px)\u0026#34; /\u0026gt; \u0026lt;source src=\u0026#34;foo.webm\u0026#34; /\u0026gt; I\u0026#39;m sorry; your browser doesn\u0026#39;t support HTML video. \u0026lt;/video\u0026gt; :::\nFor more examples, the learning area article Video and audio content is a great resource. :::\nPicture example # ::: section-content In this example, two \u0026lt;source\u0026gt; elements are included within the \u0026lt;picture\u0026gt;, providing versions of an image to use when the available space exceeds certain widths. If the available width is less than the smallest of these widths, the user agent will fall back to the image given by the \u0026lt;img\u0026gt; element.\n::: code-example [html]{.language-name}\n\u0026lt;picture\u0026gt; \u0026lt;source srcset=\u0026#34;mdn-logo-wide.png\u0026#34; media=\u0026#34;(min-width: 800px)\u0026#34; /\u0026gt; \u0026lt;source srcset=\u0026#34;mdn-logo-medium.png\u0026#34; media=\u0026#34;(min-width: 600px)\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;mdn-logo-narrow.png\u0026#34; alt=\u0026#34;MDN Web Docs\u0026#34; /\u0026gt; \u0026lt;/picture\u0026gt; :::\nWith the \u0026lt;picture\u0026gt; element, you must always include an \u0026lt;img\u0026gt; with a fallback image, with an alt attribute to ensure accessibility (unless the image is an irrelevant background decorative image). :::\nPicture with height \u0026amp; width attributes example # ::: section-content In this example, three \u0026lt;source\u0026gt; elements with height and width attributes are included in a \u0026lt;picture\u0026gt; element. A media query allows the browser to select an image to display with the height and width attributes based on the viewport size.\n::: code-example [html]{.language-name}\n\u0026lt;picture\u0026gt; \u0026lt;source srcset=\u0026#34;landscape.png\u0026#34; media=\u0026#34;(min-width: 1000px)\u0026#34; width=\u0026#34;1000\u0026#34; height=\u0026#34;400\u0026#34; /\u0026gt; \u0026lt;source srcset=\u0026#34;square.png\u0026#34; media=\u0026#34;(min-width: 800px)\u0026#34; width=\u0026#34;800\u0026#34; height=\u0026#34;800\u0026#34; /\u0026gt; \u0026lt;source srcset=\u0026#34;portrait.png\u0026#34; media=\u0026#34;(min-width: 600px)\u0026#34; width=\u0026#34;600\u0026#34; height=\u0026#34;800\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;fallback.png\u0026#34; alt=\u0026#34;Image used when the browser does not support the sources\u0026#34; width=\u0026#34;500\u0026#34; height=\u0026#34;400\u0026#34; /\u0026gt; \u0026lt;/picture\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-source-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Android Firefox for Android Opera Android Safari Samsung Explorer Android on IOS Internet source 3 12 3.5 9 15 3.1 4.4 18 4 14 2 1.0\nUntil Firefox 15, Firefox picked Until Firefox 15, Firefox picked the first source element that has a the first source element that has a type matching the MIME-type of a type matching the MIME-type of a supported media format; see [bug supported media format; see [bug 449363](https://bugzil.la/449363) 449363](https://bugzil.la/449363) for details. for details. height 90 90 108 9 76 15 90 90 108 64 15 15.0\nmedia 3 12 15 9 15 3.1 4.4 18 15 14 2 1.0\nsizes 38 ≤18 38 No 25 9.1 38 38 38 25 9.3 3.0\n34--38 21--25 37--38 34--38 21--25 2.0--3.0 Supports a Supports a Supports a Supports a Supports a Supports a subset of the subset of the subset of the subset of the subset of the subset of the syntax for syntax for syntax for syntax for syntax for syntax for resolution resolution resolution resolution resolution resolution switching switching switching switching switching switching (using the `x` (using the `x` (using the `x` (using the `x` (using the `x` (using the `x` descriptor), descriptor), descriptor), descriptor), descriptor), descriptor), but not the but not the but not the but not the but not the but not the full syntax full syntax full syntax full syntax full syntax full syntax that can be that can be that can be that can be that can be that can be used with used with used with used with used with used with `sizes` (using `sizes` (using `sizes` (using `sizes` (using `sizes` (using `sizes` (using the `w` the `w` the `w` the `w` the `w` the `w` descriptor). descriptor). descriptor). descriptor). descriptor). descriptor). src 3 12 3.5 9 15 3.1 4.4 18 4 14 2 1.0\nsrcset 38 ≤18 38 No 25 9.1 38 38 38 25 9.3 3.0\n34--38 21--25 37--38 34--38 21--25 2.0--3.0 Supports a Supports a Supports a Supports a Supports a Supports a subset of the subset of the subset of the subset of the subset of the subset of the syntax for syntax for syntax for syntax for syntax for syntax for resolution resolution resolution resolution resolution resolution switching switching switching switching switching switching (using the `x` (using the `x` (using the `x` (using the `x` (using the `x` (using the `x` descriptor), descriptor), descriptor), descriptor), descriptor), descriptor), but not the but not the but not the but not the but not the but not the full syntax full syntax full syntax full syntax full syntax full syntax that can be that can be that can be that can be that can be that can be used with used with used with used with used with used with `sizes` (using `sizes` (using `sizes` (using `sizes` (using `sizes` (using `sizes` (using the `w` the `w` the `w` the `w` the `w` the `w` descriptor). descriptor). descriptor). descriptor). descriptor). descriptor). type 3 12 3.5 9 15 3.1 4.4 18 4 14 2 1.0\nwidth 90 90 108 9 76 15 90 90 108 64 15 15.0 # :::\nSee also # ::: section-content\nGuide to media types and formats on the web Image file type and format guide \u0026lt;picture\u0026gt; element \u0026lt;audio\u0026gt; element \u0026lt;video\u0026gt; element Web Performance ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/source{._attribution-link} :::\n"},{"id":184,"href":"/docs/references/languages/html/element/span/","title":"Span","section":"HTML","content":" \u0026lt;span\u0026gt;: The Content Span element # ::: section-content The \u0026lt;span\u0026gt; HTML element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. It should be used only when no other semantic element is appropriate. \u0026lt;span\u0026gt; is very much like a ](div) element, but [ is a block-level element whereas a \u0026lt;span\u0026gt; is an inline-level element. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;span\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Add the basil, pine nuts and garlic to a blender and blend into a paste. \u0026lt;p\u0026gt;Gradually add the \u0026lt;span class=\u0026quot;ingredient\u0026quot;\u0026gt;olive oil\u0026lt;/span\u0026gt; while running the blender slowly.\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} span.ingredient { color: #f00; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nExample # Example 1 # ::: section-content\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;\u0026lt;span\u0026gt;Some text\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nExample 2 # ::: section-content\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;li\u0026gt; \u0026lt;span\u0026gt; \u0026lt;a href=\u0026#34;portfolio.html\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;See my portfolio\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; :::\nCSS # ::: code-example [css]{.language-name}\nli span { background: gold; } :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content, or any element that accepts flow content. Implicit ARIA role No corresponding role Permitted ARIA roles Any DOM interface HTMLSpanElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-span-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet span 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 :::\nSee also # ::: section-content\nHTML `` element ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/span{._attribution-link} :::\n"},{"id":185,"href":"/docs/references/languages/html/element/strike/","title":"Strike","section":"HTML","content":" \u0026lt;strike\u0026gt; # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;strike\u0026gt; HTML element places a strikethrough (horizontal line) over text.\n::: {#sect2 .notecard .warning} Warning: This element is deprecated in HTML 4 and XHTML 1, and obsoleted in the HTML Living Standard{target=\u0026quot;_blank\u0026quot;}. If semantically appropriate, i.e., if it represents deleted content, use \u0026lt;del\u0026gt; instead. In all other cases use \u0026lt;s\u0026gt;. ::: :::\nAttributes # ::: section-content This element includes the global attributes. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026amp;lt;strike\u0026amp;gt;: \u0026lt;strike\u0026gt;Today\u0026#39;s Special: Salmon\u0026lt;/strike\u0026gt; SOLD OUT\u0026lt;br /\u0026gt; \u0026amp;lt;s\u0026amp;gt;: \u0026lt;s\u0026gt;Today\u0026#39;s Special: Salmon\u0026lt;/s\u0026gt; SOLD OUT ::: :::\nResult # ::: section-content ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nDOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# strike]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari Samsung Explorer Android Android Android on IOS Internet strike 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nBefore Firefox 4, Before Firefox 4, this element this element implemented the implemented the `HTMLSpanElement` `HTMLSpanElement` interface instead interface instead of the standard of the standard `HTMLElement` `HTMLElement` interface. interface. :::\nSee also # ::: section-content\nThe \u0026lt;s\u0026gt; element. The \u0026lt;del\u0026gt; element should be used if the data has been deleted. The CSS text-decoration property can be used to style text with a strikethrough. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike{._attribution-link} :::\n"},{"id":186,"href":"/docs/references/languages/html/element/strong/","title":"Strong","section":"HTML","content":" \u0026lt;strong\u0026gt;: The Strong Importance element # ::: section-content The \u0026lt;strong\u0026gt; HTML element indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;strong\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} \u0026hellip; the most important rule, the rule you can never forget, no matter how much he cries, no matter how much he begs: never feed him after midnight. ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p { font-size: 1rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content The \u0026lt;strong\u0026gt; element is for content that is of \u0026quot;strong importance,\u0026quot; including things of great seriousness or urgency (such as warnings). This could be a sentence that is of great importance to the whole page, or you could merely try to point out that some words are of greater importance compared to nearby content.\nTypically this element is rendered by default using a bold font weight. However, it should not be used to apply bold styling; use the CSS font-weight property for that purpose. Use the \u0026lt;b\u0026gt; element to draw attention to certain text without indicating a higher level of importance. Use the \u0026lt;em\u0026gt; element to mark text that has stress emphasis.\nAnother accepted use for \u0026lt;strong\u0026gt; is to denote the labels of paragraphs which represent notes or warnings within the text of a page. :::\n\u0026lt;b\u0026gt; vs. \u0026lt;strong\u0026gt; # ::: section-content It is often confusing to new developers why there are so many ways to express the same thing on a rendered website. \u0026lt;b\u0026gt; and \u0026lt;strong\u0026gt; are perhaps one of the most common sources of confusion, causing developers to ask \u0026quot;Should I use \u0026lt;b\u0026gt; or \u0026lt;strong\u0026gt;? Don't they both do the same thing?\u0026quot;\nNot exactly. The \u0026lt;strong\u0026gt; element is for content that is of greater importance, while the \u0026lt;b\u0026gt; element is used to draw attention to text without indicating that it's more important.\nIt may help to realize that both are valid and semantic elements in HTML and that it's a coincidence that they both have the same default styling (boldface) in most browsers (although some older browsers actually underline \u0026lt;strong\u0026gt;). Each element is meant to be used in certain types of scenarios, and if you want to bold text for decoration, you should instead actually use the CSS font-weight property.\nThe intended meaning or purpose of the enclosed text should be what determines which element you use. Communicating meaning is what semantics are all about. :::\n\u0026lt;em\u0026gt; vs. \u0026lt;strong\u0026gt; # ::: section-content Adding to the confusion is the fact that while HTML 4 defined \u0026lt;strong\u0026gt; as indicating a stronger emphasis, HTML 5 defines \u0026lt;strong\u0026gt; as representing \u0026quot;strong importance for its contents.\u0026quot; This is an important distinction to make.\nWhile \u0026lt;em\u0026gt; is used to change the meaning of a sentence as spoken emphasis does (\u0026quot;I love carrots\u0026quot; vs. \u0026quot;I love carrots\u0026quot;), \u0026lt;strong\u0026gt; is used to give portions of a sentence added importance (e.g., \u0026quot;Warning! This is very dangerous.\u0026quot;) Both \u0026lt;strong\u0026gt; and \u0026lt;em\u0026gt; can be nested to increase the relative degree of importance or stress emphasis, respectively. :::\nExamples # Basic example # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; Before proceeding, \u0026lt;strong\u0026gt;make sure you put on your safety goggles\u0026lt;/strong\u0026gt;. \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nLabeling warnings # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; \u0026lt;strong\u0026gt;Important:\u0026lt;/strong\u0026gt; Before proceeding, make sure you add plenty of butter. \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None; must have both a start tag and an end tag. Permitted parents Any element that accepts phrasing content, or any element that accepts flow content. Implicit ARIA role strong Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-strong-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android strong 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nBefore Firefox 4, creating a `\u0026lt;strong\u0026gt;` element incorrectly resulted in an `HTMLSpanElement` object, instead of the expected `HTMLElement`. :::\nSee also # ::: section-content\nThe \u0026lt;b\u0026gt; element The \u0026lt;em\u0026gt; element The font-weight property ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong{._attribution-link} :::\n"},{"id":187,"href":"/docs/references/languages/html/element/style/","title":"Style","section":"HTML","content":" \u0026lt;style\u0026gt;: The Style Information element # ::: section-content The \u0026lt;style\u0026gt; HTML element contains style information for a document, or part of a document. It contains CSS, which is applied to the contents of the document containing the \u0026lt;style\u0026gt; element. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;style\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} \u0026lt;p\u0026gt;This text will be green. Inline styles take precedence over CSS included externally.\u0026lt;/p\u0026gt; \u0026lt;p style=\u0026quot;color: blue\u0026quot;\u0026gt;The \u0026lt;code\u0026gt;style\u0026lt;/code\u0026gt; attribute can override it, though.\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p { color: #f00; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe \u0026lt;style\u0026gt; element must be included inside the \u0026lt;head\u0026gt; of the document. In general, it is better to put your styles in external stylesheets and apply them using \u0026lt;link\u0026gt; elements.\nIf you include multiple \u0026lt;style\u0026gt; and \u0026lt;link\u0026gt; elements in your document, they will be applied to the DOM in the order they are included in the document \u0026mdash; make sure you include them in the correct order, to avoid unexpected cascade issues.\nIn the same manner as \u0026lt;link\u0026gt; elements, \u0026lt;style\u0026gt; elements can include media attributes that contain media queries, allowing you to selectively apply internal stylesheets to your document depending on media features such as viewport width. :::\nAttributes # ::: section-content This element includes the global attributes.\nblocking [Experimental]{.visually-hidden} This attribute explicitly indicates that certain operations should be blocked on the fetching of critical subresources. @import-ed stylesheets are generally considered as critical subresources, whereas background-image and fonts are not.\nrender: The rendering of content on the screen is blocked. media This attribute defines which media the style should be applied to. Its value is a media query, which defaults to all if the attribute is missing.\nnonce A cryptographic nonce (number used once) used to allow inline styles in a style-src Content-Security-Policy. The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource's policy is otherwise trivial.\ntitle This attribute specifies alternative style sheet sets. :::\nDeprecated attributes # ::: section-content\ntype [Deprecated]{.visually-hidden} This attribute should not be provided: if it is, the only permitted values are the empty string or a case-insensitive match for text/css. :::\nExamples # A simple stylesheet # ::: section-content In the following example, we apply a very simple stylesheet to a document:\n::: code-example [html]{.language-name}\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en-US\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Test page\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; p { color: red; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;This is my paragraph.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nMultiple style elements # ::: section-content In this example we've included two \u0026lt;style\u0026gt; elements \u0026mdash; notice how the conflicting declarations in the later \u0026lt;style\u0026gt; element override those in the earlier one, if they have equal specificity.\n::: code-example [html]{.language-name}\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en-US\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Test page\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; p { color: white; background-color: blue; padding: 5px; border: 1px solid black; } \u0026lt;/style\u0026gt; \u0026lt;style\u0026gt; p { color: blue; background-color: yellow; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;This is my paragraph.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nIncluding a media query # ::: section-content In this example we build on the previous one, including a media attribute on the second \u0026lt;style\u0026gt; element so it is only applied when the viewport is less than 500px in width.\n::: code-example [html]{.language-name}\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en-US\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Test page\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; p { color: white; background-color: blue; padding: 5px; border: 1px solid black; } \u0026lt;/style\u0026gt; \u0026lt;style media=\u0026#34;all and (max-width: 500px)\u0026#34;\u0026gt; p { color: blue; background-color: yellow; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;This is my paragraph.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Metadata content, and if the scoped attribute is present: flow content. Permitted content Text content matching the type attribute, that is text/css. Tag omission Neither tag is omissible. Permitted parents Any element that accepts metadata content. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLStyleElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-style-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android style 1 12 1 3 3.5 1 4.4 18 4 10.1 1 1.0\nblocking 105 105 No No 91 No 105 105 No 72 No 20.0\nmedia 1 12 1 3 3.5 1 4.4 18 4 10.1 1 1.0\ntitle 1 12 1 3 3.5 1 4.4 18 4 10.1 1 1.0\ntype 1 12 1 3 3.5 1 4.4 18 4 10.1 1 1.0\nBefore 75, Firefox accepted any CSS media (MIME) type, with optional parameters. Starting in 75, this has been restricted to the string \\'text/css\\', per the spec. :::\nSee also # ::: section-content\nThe \u0026lt;link\u0026gt; element, which allows us to apply external stylesheets to a document. Alternative Style Sheets ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/style{._attribution-link} :::\n"},{"id":188,"href":"/docs/references/languages/html/element/sub/","title":"Sub","section":"HTML","content":" \u0026lt;sub\u0026gt;: The Subscript element # ::: section-content The \u0026lt;sub\u0026gt; HTML element specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;sub\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Almost every developer\u0026rsquo;s favorite molecule is C8H10N4O2, also known as \u0026ldquo;caffeine.\u0026rdquo; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p { font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content The \u0026lt;sub\u0026gt; element should be used only for typographical reasons\u0026mdash;that is, to change the position of the text to comply with typographical conventions or standards, rather than solely for presentation or appearance purposes.\nFor example, using \u0026lt;sub\u0026gt; to style the name of a company which uses altered baselines in their wordmark{target=\u0026quot;_blank\u0026quot;} would not be appropriate; instead, CSS should be used. For example, you could use the vertical-align property with a declaration like vertical-align: sub or, to more precisely control the baseline shift, vertical-align: -25%.\nAppropriate use cases for \u0026lt;sub\u0026gt; include (but aren't necessarily limited to):\nMarking up footnote numbers. See Footnote numbers for an example. Marking up the subscript in mathematical variable numbers (although you may also consider using a MathML formula for this). See Variable subscripts. Denoting the number of atoms of a given element within a chemical formula (such as every developer's best friend, C ~8~ H ~10~ N ~4~ O ~2~ , otherwise known as \u0026quot;caffeine\u0026quot;). See Chemical formulas. ::: Examples # Footnote numbers # ::: section-content Traditional footnotes are denoted using numbers which are rendered in subscript. This is a common use case for \u0026lt;sub\u0026gt;:\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; According to the computations by Nakamura, Johnson, and Mason\u0026lt;sub\u0026gt;1\u0026lt;/sub\u0026gt; this will result in the complete annihilation of both particles. \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nVariable subscripts # ::: section-content In mathematics, families of variables related to the same concept (such as distances along the same axis) are represented using the same variable name with a subscript following. For example:\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; The horizontal coordinates\u0026#39; positions along the X-axis are represented as \u0026lt;var\u0026gt;x\u0026lt;sub\u0026gt;1\u0026lt;/sub\u0026gt;\u0026lt;/var\u0026gt; … \u0026lt;var\u0026gt;x\u0026lt;sub\u0026gt;n\u0026lt;/sub\u0026gt;\u0026lt;/var\u0026gt;. \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nChemical formulas # ::: section-content When writing a chemical formula, such as H~2~0, the number of atoms of a given element within the described molecule is represented using a subscripted number; in the case of water, the subscripted \u0026quot;2\u0026quot; indicates that there are two atoms of hydrogen in the molecule.\nAnother example:\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; Almost every developer\u0026#39;s favorite molecule is C\u0026lt;sub\u0026gt;8\u0026lt;/sub\u0026gt;H\u0026lt;sub\u0026gt;10\u0026lt;/sub\u0026gt;N\u0026lt;sub\u0026gt;4\u0026lt;/sub\u0026gt;O\u0026lt;sub\u0026gt;2\u0026lt;/sub\u0026gt;, which is commonly known as \u0026#34;caffeine.\u0026#34; \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role subscript Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-sub-and-sup-elements]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet sub 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nThe \u0026lt;sup\u0026gt; HTML element that produces superscript. Note that you cannot use sup and sub both at the same time: you need to use MathML to produce both a superscript directly above a subscript next to the chemical symbol of an element, representing its atomic number and its nuclear number. The \u0026lt;msub\u0026gt;, \u0026lt;msup\u0026gt;, and \u0026lt;msubsup\u0026gt; MathML elements. The CSS vertical-align property. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub{._attribution-link} :::\n"},{"id":189,"href":"/docs/references/languages/html/element/summary/","title":"Summary","section":"HTML","content":" \u0026lt;summary\u0026gt;: The Disclosure Summary element # ::: section-content The \u0026lt;summary\u0026gt; HTML element specifies a summary, caption, or legend for a \u0026lt;details\u0026gt; element's disclosure box. Clicking the \u0026lt;summary\u0026gt; element toggles the state of the parent \u0026lt;details\u0026gt; element open and closed. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;summary\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} I have keys but no doors. I have space but no room. You can enter but can’t leave. What am I? A keyboard. ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} details { border: 1px solid #aaa; border-radius: 4px; padding: 0.5em 0.5em 0; }\nsummary { font-weight: bold; margin: -0.5em -0.5em 0; padding: 0.5em; } details[open] { padding: 0.5em; } details[open] summary { border-bottom: 1px solid #aaa; margin-bottom: 0.5em; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content The \u0026lt;summary\u0026gt; element's contents can be any heading content, plain text, or HTML that can be used within a paragraph.\nA \u0026lt;summary\u0026gt; element may only be used as the first child of a \u0026lt;details\u0026gt; element. When the user clicks on the summary, the parent \u0026lt;details\u0026gt; element is toggled open or closed, and then a toggle event is sent to the \u0026lt;details\u0026gt; element, which can be used to let you know when this state change occurs. :::\nDefault label text # ::: section-content If a \u0026lt;details\u0026gt; element's first child is not a \u0026lt;summary\u0026gt; element, the user agent will use a default string (typically \u0026quot;Details\u0026quot;) as the label for the disclosure box. :::\nDefault style # ::: section-content Per the HTML specification, the default style for \u0026lt;summary\u0026gt; elements includes display: list-item. This makes it possible to change or remove the icon displayed as the disclosure widget next to the label from the default, which is typically a triangle.\nYou can also change the style to display: block to remove the disclosure triangle.\nSee the Browser compatibility section for details, as not all browsers support full functionality of this element yet.\nFor Webkit-based browsers, such as Safari, it is possible to control the icon display through the non-standard CSS pseudo-element ::-webkit-details-marker. To remove the disclosure triangle, use summary::-webkit-details-marker { display: none }. :::\nExamples # ::: section-content Below are some examples showing \u0026lt;summary\u0026gt; in use. You can find more examples in the documentation for the \u0026lt;details\u0026gt; element. :::\nBasic example # ::: section-content A simple example showing the use of \u0026lt;summary\u0026gt; in a \u0026lt;details\u0026gt; element:\n::: code-example [html]{.language-name}\n\u0026lt;details open\u0026gt; \u0026lt;summary\u0026gt;Overview\u0026lt;/summary\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Cash on hand: $500.00\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Current invoice: $75.30\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Due date: 5/6/19\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/details\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nSummaries as headings # ::: section-content You can use heading elements in \u0026lt;summary\u0026gt;, like this:\n::: code-example [html]{.language-name}\n\u0026lt;details open\u0026gt; \u0026lt;summary\u0026gt;\u0026lt;h4\u0026gt;Overview\u0026lt;/h4\u0026gt;\u0026lt;/summary\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Cash on hand: $500.00\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Current invoice: $75.30\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Due date: 5/6/19\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/details\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: :::\nThis currently has some spacing issues that could be addressed using CSS.\n::: {#sect3 .notecard .warning} Warning: Because the \u0026lt;summary\u0026gt; element has a default role of button (which strips all roles from child elements), this example will not work for users of assistive technologies such as screen readers. The \u0026lt;h4\u0026gt; will have its role removed and thus will not be treated as a heading for these users. ::: :::\nHTML in summaries # ::: section-content This example adds some semantics to the \u0026lt;summary\u0026gt; element to indicate the label as important:\n::: code-example [html]{.language-name}\n\u0026lt;details open\u0026gt; \u0026lt;summary\u0026gt;\u0026lt;strong\u0026gt;Overview\u0026lt;/strong\u0026gt;\u0026lt;/summary\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Cash on hand: $500.00\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Current invoice: $75.30\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Due date: 5/6/19\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/details\u0026gt; :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nPermitted content Phrasing content or one element of Heading content Tag omission None; both the start tag and the end tag are mandatory. Permitted parents The \u0026lt;details\u0026gt; element. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-summary-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet summary 12 79 49 No 15 6 4 18 49 14 6 1.0 display_list_item 89 89 49 No 75 No 89 89 49 63 No 15.0 :::\nSee also # ::: section-content\n\u0026lt;details\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary{._attribution-link} :::\n"},{"id":190,"href":"/docs/references/languages/html/element/sup/","title":"Sup","section":"HTML","content":" \u0026lt;sup\u0026gt;: The Superscript element # ::: section-content The \u0026lt;sup\u0026gt; HTML element specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;sup\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} The Pythagorean theorem is often expressed as the following equation:\n\u0026lt;p\u0026gt; \u0026lt;var\u0026gt;a\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt;\u0026lt;/var\u0026gt; + \u0026lt;var\u0026gt;b\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt;\u0026lt;/var\u0026gt; = \u0026lt;var\u0026gt;c\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt;\u0026lt;/var\u0026gt; \u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p { font: 1rem \u0026lsquo;Fira Sans\u0026rsquo;, sans-serif; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content The \u0026lt;sup\u0026gt; element should only be used for typographical reasons\u0026mdash;that is, to change the position of the text to comply with typographical conventions or standards, rather than solely for presentation or appearance purposes.\nFor example, to style the wordmark{target=\u0026quot;_blank\u0026quot;} of a business or product which uses a raised baseline should be done using CSS (most likely vertical-align) rather than \u0026lt;sup\u0026gt;. This would be done using, for example, vertical-align: super or, to shift the baseline up 50%, vertical-align: 50%.\nAppropriate use cases for \u0026lt;sup\u0026gt; include (but aren't necessarily limited to):\nDisplaying exponents, such as \u0026quot;x ^3^ .\u0026quot; It may be worth considering the use of MathML for these, especially in more complex cases. See Exponents under Examples below. Displaying superior lettering{target=\u0026quot;_blank\u0026quot;}, which is used in some languages when rendering certain abbreviations. For example, in French, the word \u0026quot;mademoiselle\u0026quot; can be abbreviated \u0026quot;M ^lle^ \u0026quot;); this is an acceptable use case. See Superior lettering for examples. Representing ordinal numbers, such as \u0026quot;4 ^th^ \u0026quot; instead of \u0026quot;fourth.\u0026quot; See Ordinal numbers for examples. ::: Examples # Exponents # ::: section-content Exponents, or powers of a number, are among the most common uses of superscripted text. For example:\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; One of the most common equations in all of physics is \u0026lt;var\u0026gt;E\u0026lt;/var\u0026gt;=\u0026lt;var\u0026gt;m\u0026lt;/var \u0026gt;\u0026lt;var\u0026gt;c\u0026lt;/var\u0026gt;\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt;. \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nSuperior lettering # ::: section-content Superior lettering is not technically the same thing as superscript. However, it is common to use \u0026lt;sup\u0026gt; to present superior lettering in HTML. Among the most common uses of superior lettering is the presentation of certain abbreviations in French:\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;Robert a présenté son rapport à M\u0026lt;sup\u0026gt;lle\u0026lt;/sup\u0026gt; Bernard.\u0026lt;/p\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nOrdinal numbers # ::: section-content Ordinal numbers, such as \u0026quot;fourth\u0026quot; in English or \u0026quot;quinto\u0026quot; in Spanish may be abbreviated using numerals and language-specific text rendered in superscript:\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; The ordinal number \u0026#34;fifth\u0026#34; can be abbreviated in various languages as follows: \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;English: 5\u0026lt;sup\u0026gt;th\u0026lt;/sup\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;French: 5\u0026lt;sup\u0026gt;ème\u0026lt;/sup\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role superscript Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-sub-and-sup-elements]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet sup 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nThe \u0026lt;sub\u0026gt; HTML element that produces subscripts. Note that you cannot use sub and sup at the same time: you need to use MathML to produce both a superscript and a subscript next to the chemical symbol of an element, representing its atomic number and its nuclear number. The \u0026lt;msub\u0026gt;, \u0026lt;msup\u0026gt;, and \u0026lt;msubsup\u0026gt; MathML elements. The CSS vertical-align property. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup{._attribution-link} :::\n"},{"id":191,"href":"/docs/references/languages/html/element/table/","title":"Table","section":"HTML","content":" \u0026lt;table\u0026gt;: The Table element # ::: section-content The \u0026lt;table\u0026gt; HTML element represents tabular data \u0026mdash; that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;table\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} The table header The table body with two columns ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} table, td { border: 1px solid #333; }\nthead, tfoot { background-color: #333; color: #fff; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nContent categories Flow content Permitted content In this order: an optional \u0026lt;caption\u0026gt; element, zero or more \u0026lt;colgroup\u0026gt; elements, an optional \u0026lt;thead\u0026gt; element, either one of the following: zero or more \u0026lt;tbody\u0026gt; elements one or more \u0026lt;tr\u0026gt; elements an optional \u0026lt;tfoot\u0026gt; element Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content Implicit ARIA role table Permitted ARIA roles Any DOM interface HTMLTableElement ::: Attributes # ::: section-content This element includes the global attributes. :::\nDeprecated attributes # ::: section-content\nalign [Deprecated]{.visually-hidden} This enumerated attribute indicates how the table must be aligned inside the containing document. It may have the following values:\nleft: the table is displayed on the left side of the document; center: the table is displayed in the center of the document; right: the table is displayed on the right side of the document. Set margin-left and margin-right to achieve an effect that is similar to the align attribute:\nleft: margin-right: auto; margin-left: 0; center: margin-right: auto; margin-left: auto; right: margin-right: 0; margin-left: auto; bgcolor [Deprecated]{.visually-hidden} The background color of the table. It is a 6-digit hexadecimal RGB code, prefixed by a '#'. One of the predefined color keywords can also be used.\nTo achieve a similar effect, use the CSS background-color property.\nborder [Deprecated]{.visually-hidden} This integer attribute defines, in pixels, the size of the frame surrounding the table. If set to 0, the frame attribute is set to void.\nTo achieve a similar effect, use the CSS border shorthand property.\ncellpadding [Deprecated]{.visually-hidden} This attribute defines the space between the content of a cell and its border, displayed or not. If the cellpadding's length is defined in pixels, this pixel-sized space will be applied to all four sides of the cell's content. If the length is defined using a percentage value, the content will be centered and the total vertical space (top and bottom) will represent this value. The same is true for the total horizontal space (left and right).\nTo achieve a similar effect, apply the border-collapse property to the \u0026lt;table\u0026gt; element, with its value set to collapse, and the padding property to the \u0026lt;td\u0026gt; elements.\ncellspacing [Deprecated]{.visually-hidden} This attribute defines the size of the space between two cells in a percentage value or pixels. The attribute is applied both horizontally and vertically, to the space between the top of the table and the cells of the first row, the left of the table and the first column, the right of the table and the last column and the bottom of the table and the last row.\nTo achieve a similar effect, apply the border-spacing property to the \u0026lt;table\u0026gt; element. border-spacing does not have any effect if border-collapse is set to collapse.\nframe [Deprecated]{.visually-hidden} This enumerated attribute defines which side of the frame surrounding the table must be displayed.\nTo achieve a similar effect, use the border-style and border-width properties.\nrules [Deprecated]{.visually-hidden} This enumerated attribute defines where rules, i.e. lines, should appear in a table. It can have the following values:\nnone, which indicates that no rules will be displayed; it is the default value; groups, which will cause the rules to be displayed between row groups (defined by the \u0026lt;thead\u0026gt;, \u0026lt;tbody\u0026gt; and \u0026lt;tfoot\u0026gt; elements) and between column groups (defined by the \u0026lt;col\u0026gt; and \u0026lt;colgroup\u0026gt; elements) only; rows, which will cause the rules to be displayed between rows; cols, which will cause the rules to be displayed between columns; all, which will cause the rules to be displayed between rows and columns. To achieve a similar effect, apply the border property to the appropriate \u0026lt;thead\u0026gt;, \u0026lt;tbody\u0026gt;, \u0026lt;tfoot\u0026gt;, \u0026lt;col\u0026gt;, or \u0026lt;colgroup\u0026gt; elements.\nsummary [Deprecated]{.visually-hidden} This attribute defines an alternative text that summarizes the content of the table. Use the \u0026lt;caption\u0026gt; element instead.\nwidth [Deprecated]{.visually-hidden} This attribute defines the width of the table. Use the CSS width property instead.\n::: {#sect1 .notecard .note} Note: While no HTML specification includes height as a \u0026lt;table\u0026gt; attribute, some browsers support a non-standard interpretation of height. The unitless value sets a minimum absolute height in pixels. If set as a percent value, the minimum table height will be relative to the height of the parent container. ::: :::\nExamples # Simple table # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;John\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Doe\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Jane\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Doe\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nFurther simple examples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;Simple table with header\u0026lt;/p\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;First name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Last name\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;John\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Doe\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Jane\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Doe\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt;Table with thead, tfoot, and tbody\u0026lt;/p\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Header content 1\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Header content 2\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Body content 1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Body content 2\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tfoot\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Footer content 1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Footer content 2\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tfoot\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt;Table with colgroup\u0026lt;/p\u0026gt; \u0026lt;table\u0026gt; \u0026lt;colgroup span=\u0026#34;4\u0026#34;\u0026gt;\u0026lt;/colgroup\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Countries\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Capitals\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Population\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Language\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;USA\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Washington, D.C.\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;309 million\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;English\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Sweden\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Stockholm\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;9 million\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Swedish\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt;Table with colgroup and col\u0026lt;/p\u0026gt; \u0026lt;table\u0026gt; \u0026lt;colgroup\u0026gt; \u0026lt;col style=\u0026#34;background-color: #0f0\u0026#34; /\u0026gt; \u0026lt;col span=\u0026#34;2\u0026#34; /\u0026gt; \u0026lt;/colgroup\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Lime\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Lemon\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Orange\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Green\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Yellow\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Orange\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt;Simple table with caption\u0026lt;/p\u0026gt; \u0026lt;table\u0026gt; \u0026lt;caption\u0026gt; Awesome caption \u0026lt;/caption\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Awesome data\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nTable sorting # ::: section-content\nSorting table rows # There are no native methods for sorting the rows ( \u0026lt;tr\u0026gt; elements) of an HTML table. But using Array.prototype.slice(), Array.prototype.sort(), Node.removeChild(), and Node.appendChild(), you can implement your own sort() function to sort an HTMLCollection of \u0026lt;tr\u0026gt; elements.\nIn the below example, you can see such an example. We are attaching it to the \u0026lt;tbody\u0026gt; element so that it sorts the table cells in order of increasing value, and updates the display to suit.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;table\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; :::\nJavaScript # ::: code-example [js]{.language-name}\nHTMLTableSectionElement.prototype.sort = function (cb) { Array.from(this.rows) .sort(cb) .forEach((e) =\u0026gt; this.appendChild(this.removeChild(e))); }; document .querySelector(\u0026#34;table\u0026#34;) .tBodies[0].sort((a, b) =\u0026gt; a.textContent.localeCompare(b.textContent)); :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: :::\nSorting rows with a click on the th element # The following example adds an event handler to every \u0026lt;th\u0026gt; element of every \u0026lt;table\u0026gt; in the document; it sorts all the \u0026lt;tbody\u0026gt;'s rows, basing the sorting on the td cells contained in the rows.\n::: {#sect5 .notecard .note} Note: This solution assumes that the \u0026lt;td\u0026gt; elements are populated by raw text with no descendant elements. :::\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Numbers\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Letters\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;A\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;B\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;C\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; :::\nJavaScript # ::: code-example [js]{.language-name}\nconst allTables = document.querySelectorAll(\u0026#34;table\u0026#34;); for (const table of allTables) { const tBody = table.tBodies[0]; const rows = Array.from(tBody.rows); const headerCells = table.tHead.rows[0].cells; for (const th of headerCells) { const cellIndex = th.cellIndex; th.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { rows.sort((tr1, tr2) =\u0026gt; { const tr1Text = tr1.cells[cellIndex].textContent; const tr2Text = tr2.cells[cellIndex].textContent; return tr1Text.localeCompare(tr2Text); }); tBody.append(...rows); }); } } :::\nResult # ::: {#sect6 .code-example} ::: iframe ::: ::: :::\nDisplaying large tables in small spaces # ::: section-content A common issue with tables on the web is that they don't natively work very well on small screens when the amount of content is large, and the way to make them scrollable isn't obvious, especially when the markup may come from a CMS and cannot be modified to have a wrapper.\nThis example provides one way to display tables in small spaces. We've hidden the HTML content as it is very large, and there is nothing remarkable about it. The CSS is more useful to inspect in this example.\nWhen looking at these styles you'll notice that table's display property has been set to block. While this allows scrolling, the table loses some of its integrity, and table cells try to become as small as possible. To mitigate this issue we've set white-space to nowrap on the \u0026lt;tbody\u0026gt;. However, we don't do this for the \u0026lt;thead\u0026gt; to avoid long titles forcing columns to be wider than they need to be to display the data.\nTo keep the table headers on the page while scrolling down we've set position to sticky on the \u0026lt;th\u0026gt; elements. Note that we have not set border-collapse to collapse, as if we do the header cannot be separated correctly from the rest of the table.\n::: code-example [css]{.language-name}\ntable, th, td { border: 1px solid; } table { width: 100%; max-width: 400px; height: 240px; margin: 0 auto; display: block; overflow-x: auto; border-spacing: 0; } tbody { white-space: nowrap; } th, td { padding: 5px 10px; border-top-width: 0; border-left-width: 0; } th { position: sticky; top: 0; background: #fff; vertical-align: bottom; } th:last-child, td:last-child { border-right-width: 0; } tr:last-child td { border-bottom-width: 0; } :::\nResult # ::: {#sect7 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # Captions # ::: section-content By supplying a \u0026lt;caption\u0026gt; element whose value clearly and concisely describes the table's purpose, it helps the people decide if they need to read the rest of the table content or skip over it.\nThis helps people navigating with the aid of assistive technology such as a screen reader, people experiencing low vision conditions, and people with cognitive concerns.\nMDN Adding a caption to your table with \u0026lt;caption\u0026gt; Caption \u0026amp; Summary • Tables • W3C WAI Web Accessibility Tutorials{target=\u0026quot;_blank\u0026quot;} ::: Scoping rows and columns # ::: section-content The scope attribute on header elements is redundant in simple contexts, because scope is inferred. However, some assistive technologies may fail to draw correct inferences, so specifying header scope may improve user experiences. In complex tables, scope can be specified to provide necessary information about the cells related to a header.\nExamples # ::: code-example [html]{.language-name}\n\u0026lt;table\u0026gt; \u0026lt;caption\u0026gt; Color names and values \u0026lt;/caption\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;HEX\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;HSLa\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;RGBa\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;row\u0026#34;\u0026gt;Teal\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;\u0026lt;code\u0026gt;#51F6F6\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;code\u0026gt;hsl(180 90% 64% / 1)\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;code\u0026gt;rgb(81 246 246 / 1)\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;row\u0026#34;\u0026gt;Goldenrod\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;\u0026lt;code\u0026gt;#F6BC57\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;code\u0026gt;hsl(38 90% 65% / 1)\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;code\u0026gt;rgba(246 188 87 / 1)\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; :::\nResult # ::: {#sect8 .code-example} ::: iframe ::: :::\nProviding a declaration of scope=\u0026quot;col\u0026quot; on a \u0026lt;th\u0026gt; element will help describe that the cell is at the top of a column. Providing a declaration of scope=\u0026quot;row\u0026quot; on a \u0026lt;th\u0026gt; element will help describe that the cell is the first in a row.\nMDN Tables for visually impaired users Tables with two headers • Tables • W3C WAI Web Accessibility Tutorials{target=\u0026quot;_blank\u0026quot;} Tables with irregular headers • Tables • W3C WAI Web Accessibility Tutorials{target=\u0026quot;_blank\u0026quot;} H63: Using the scope attribute to associate header cells and data cells in data tables | W3C Techniques for WCAG 2.0{target=\u0026quot;_blank\u0026quot;} ::: Complicated tables # ::: section-content Assistive technology such as screen readers may have difficulty parsing tables that are so complex that header cells can't be associated in a strictly horizontal or vertical way. This is typically indicated by the presence of the colspan and rowspan attributes.\nIdeally, consider alternate ways to present the table's content, including breaking it apart into a collection of smaller, related tables that don't have to rely on using the colspan and rowspan attributes. In addition to helping people who use assistive technology understand the table's content, this may also benefit people with cognitive concerns who may have difficulty understanding the associations the table layout is describing.\nIf the table cannot be broken apart, use a combination of the id and headers attributes to programmatically associate each table cell with the header(s) the cell is associated with.\nMDN Tables for visually impaired users Tables with multi-level headers • Tables • W3C WAI Web Accessibility Tutorials{target=\u0026quot;_blank\u0026quot;} H43: Using id and headers attributes to associate data cells with header cells in data tables | Techniques for W3C WCAG 2.0{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-table-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet table 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 align 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 bgcolor 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 border 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 cellpadding 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 cellspacing 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 frame 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 rules 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 summary 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 width 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 :::\nSee also # ::: section-content\nHTML data table tutorial CSS properties that may be especially useful to style the \u0026lt;table\u0026gt; element: width to control the width of the table; border, border-style, border-color, border-width, border-collapse, border-spacing to control the aspect of cell borders, rules, and frame; margin and padding to style the individual cell content; text-align and vertical-align to define the alignment of text and cell content. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/table{._attribution-link} :::\n"},{"id":192,"href":"/docs/references/languages/html/element/tbody/","title":"Tbody","section":"HTML","content":" \u0026lt;tbody\u0026gt;: The Table Body element # ::: section-content The \u0026lt;tbody\u0026gt; HTML element encapsulates a set of table rows ( \u0026lt;tr\u0026gt; elements), indicating that they comprise the body of the table ( \u0026lt;table\u0026gt;). :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;tbody\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-taller .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Council budget (in £) 2018 Items Expenditure Donuts 3,000 Stationery 18,000 ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} thead, tfoot { background-color: #3f87a6; color: #fff; }\ntbody { background-color: #e4f0f5; } caption { padding: 10px; caption-side: bottom; } table { border-collapse: collapse; border: 2px solid rgb(200, 200, 200); letter-spacing: 1px; font-family: sans-serif; font-size: 0.8rem; } td, th { border: 1px solid rgb(190, 190, 190); padding: 5px 10px; } td { text-align: center; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe \u0026lt;tbody\u0026gt; element, along with its related \u0026lt;thead\u0026gt; and \u0026lt;tfoot\u0026gt; elements, provide useful semantic information that can be used when rendering for either screen or printer.\nContent categories None. Permitted content Zero or more \u0026lt;tr\u0026gt; elements. Tag omission A \u0026lt;tbody\u0026gt; element's start tag can be omitted if the first thing inside the \u0026lt;tbody\u0026gt; element is a \u0026lt;tr\u0026gt; element, and if the element is not immediately preceded by a \u0026lt;tbody\u0026gt;, \u0026lt;thead\u0026gt;, or \u0026lt;tfoot\u0026gt; element whose end tag has been omitted. (It can't be omitted if the element is empty.) A \u0026lt;tbody\u0026gt; element's end tag can be omitted if the \u0026lt;tbody\u0026gt; element is immediately followed by a \u0026lt;tbody\u0026gt; or \u0026lt;tfoot\u0026gt; element, or if there is no more content in the parent element. Permitted parents Within the required parent \u0026lt;table\u0026gt; element, the \u0026lt;tbody\u0026gt; element can be added after a \u0026lt;caption\u0026gt;, \u0026lt;colgroup\u0026gt;, and a \u0026lt;thead\u0026gt; element. Implicit ARIA role rowgroup Permitted ARIA roles Any DOM interface HTMLTableSectionElement ::: Attributes # ::: section-content This element includes the global attributes. :::\nDeprecated attributes # ::: section-content\nalign [Deprecated]{.visually-hidden} This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:\nleft, aligning the content to the left of the cell center, centering the content in the cell right, aligning the content to the right of the cell justify, inserting spaces into the textual content so that the content is justified in the cell char, aligning the textual content on a special character with a minimal offset, defined by the char and charoff attributes. If this attribute is not set, the left value is assumed.\nAs this attribute is deprecated, use the CSS text-align property instead.\n::: {#sect1 .notecard .note} Note: The equivalent text-align property for the align=\u0026quot;char\u0026quot; is not implemented in any browsers yet. See the text-align's browser compatibility section for the \u0026lt;string\u0026gt; value. :::\nbgcolor [Deprecated]{.visually-hidden} The background color of the table. It is a 6-digit hexadecimal RGB code, prefixed by a '#'. One of the predefined color keywords can also be used.\nAs this attribute is deprecated, use the CSS background-color property instead.\nchar [Deprecated]{.visually-hidden} This attribute is used to set the character to align the cells in a column on. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.\ncharoff [Deprecated]{.visually-hidden} This attribute is used to indicate the number of characters to offset the column data from the alignment characters specified by the char attribute.\nvalign [Deprecated]{.visually-hidden} This attribute specifies the vertical alignment of the text within each row of cells of the table header. Possible values for this attribute are:\nbaseline, which will put the text as close to the bottom of the cell as it is possible, but align it on the baseline{target=\u0026quot;_blank\u0026quot;} of the characters instead of the bottom of them. If characters are all of the size, this has the same effect as bottom. bottom, which will put the text as close to the bottom of the cell as it is possible; middle, which will center the text in the cell; and top, which will put the text as close to the top of the cell as it is possible. As this attribute is deprecated, use the CSS vertical-align property instead. :::\nUsage notes # ::: section-content\nIf the table includes a \u0026lt;thead\u0026gt; block (to semantically identify a row of column headers), the \u0026lt;tbody\u0026gt; block must come after it. If \u0026lt;tr\u0026gt; elements are specified outside an existing \u0026lt;tbody\u0026gt; element, as direct children of the \u0026lt;table\u0026gt;, these elements will be encapsulated by a separate \u0026lt;tbody\u0026gt; element generated by the browser. When printing a document, the \u0026lt;thead\u0026gt; and \u0026lt;tfoot\u0026gt; elements specify information that may be the same\u0026mdash;or at least very similar\u0026mdash;on every page of a multipage table, while the \u0026lt;tbody\u0026gt; element's contents generally will differ from page to page. When a table is presented in a screen context (such as a window) which is not large enough to display the entire table, the user agent may let the user scroll the contents of the \u0026lt;thead\u0026gt;, \u0026lt;tbody\u0026gt;, \u0026lt;tfoot\u0026gt;, and \u0026lt;caption\u0026gt; blocks separately from one another for the same parent table. You may use more than one \u0026lt;tbody\u0026gt; per table as long as they are all consecutive. This lets you divide the rows in large tables into sections, each of which may be separately formatted if so desired. If not marked up to be consecutive elements, browsers will correct this author error, ensuring any \u0026lt;thead\u0026gt; and \u0026lt;tfoot\u0026gt; elements are rendered as the first and last elements of the table, respectively. ::: Examples # ::: section-content Below are some examples showing the use of the \u0026lt;tbody\u0026gt; element. For more examples of this element, see the examples for \u0026lt;table\u0026gt;. :::\nBasic example # ::: section-content In this relatively simple example, we create a table containing information about a group of students with a \u0026lt;thead\u0026gt; and a \u0026lt;tbody\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;}, with a number of rows in the body.\nHTML # The table's HTML is shown here. Note that all the body cells including information about students are contained within a single \u0026lt;tbody\u0026gt; element.\n::: code-example [html]{.language-name}\n\u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Student ID\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Major\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3741255\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Jones, Martha\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Computer Science\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3971244\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Nim, Victor\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Russian Literature\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;4100332\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Petrov, Alexandra\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Astrophysics\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; :::\nCSS # The CSS to style our table is shown next.\n::: code-example [css]{.language-name}\ntable { border: 2px solid #555; border-collapse: collapse; font: 16px \u0026#34;Lucida Grande\u0026#34;, \u0026#34;Helvetica\u0026#34;, \u0026#34;Arial\u0026#34;, sans-serif; } :::\nFirst, the table's overall style attributes are set, configuring the thickness, style, and color of the table's exterior borders and using border-collapse to ensure that the border lines are shared among adjacent cells rather than each having its own borders with space in between. font is used to establish an initial font for the table.\n::: code-example [css]{.language-name}\nth, td { border: 1px solid #bbb; padding: 2px 8px 0; text-align: left; } :::\nThen the style is set for the majority of the cells in the table, including all data cells but also those styles shared between our \u0026lt;td\u0026gt; and \u0026lt;th\u0026gt; cells. The cells are given a light gray outline which is a single pixel thick, padding is adjusted, and all cells are left-aligned using text-align\n::: code-example [css]{.language-name}\nthead \u0026gt; tr \u0026gt; th { background-color: #cce; font-size: 18px; border-bottom: 2px solid #999; } :::\nFinally, header cells contained within the \u0026lt;thead\u0026gt; element are given additional styling. They use a darker background-color, a larger font size, and a thicker, darker bottom border than the other cell borders.\nResult # The resulting table looks like this:\n::: {#sect2 .code-example} ::: iframe ::: ::: :::\nMultiple bodies # ::: section-content You can create row groupings within a table by using multiple \u0026lt;tbody\u0026gt; elements. Each may potentially have its own header row or rows; however, there can be only one \u0026lt;thead\u0026gt; per table! Because of that, you need to use a \u0026lt;tr\u0026gt; filled with \u0026lt;th\u0026gt; elements to create headers within each \u0026lt;tbody\u0026gt;. Let's see how that's done.\nLet's take the previous example, add some more students to the list, and update the table so that instead of listing each student's major on every row, the students are grouped by major, with heading rows for each major.\nResult # First, the resulting table, so you know what we're building:\n::: {#sect3 .code-example} ::: iframe ::: :::\nHTML # The revised HTML looks like this:\n::: code-example [html]{.language-name}\n\u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Student ID\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th colspan=\u0026#34;2\u0026#34;\u0026gt;Computer Science\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3741255\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Jones, Martha\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;4077830\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Pierce, Benjamin\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;5151701\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Kirk, James\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th colspan=\u0026#34;2\u0026#34;\u0026gt;Russian Literature\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3971244\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Nim, Victor\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th colspan=\u0026#34;2\u0026#34;\u0026gt;Astrophysics\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;4100332\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Petrov, Alexandra\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;8892377\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Toyota, Hiroko\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; :::\nNotice that each major is placed in a separate \u0026lt;tbody\u0026gt; block, the first row of which contains a single \u0026lt;th\u0026gt; element with a colspan attribute that spans the entire width of the table. That heading lists the name of the major contained within the \u0026lt;tbody\u0026gt;.\nThen each remaining row in each major's \u0026lt;tbody\u0026gt; consists of two cells: the first for the student's ID and the second for their name.\nCSS # Most of the CSS is unchanged. We do, however, add a slightly more subtle style for header cells contained directly within a \u0026lt;tbody\u0026gt; (as opposed to those which reside in a \u0026lt;thead\u0026gt;). This is used for the headers indicating each table section's corresponding major.\n::: code-example [css]{.language-name}\ntbody \u0026gt; tr \u0026gt; th { background-color: #dde; border-bottom: 1.5px solid #bbb; font-weight: normal; } ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-tbody-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet tbody 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 align 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 bgcolor 1 12 1 Yes ≤15 1 4.4 18 4 ≤14 1 1.0 char 1 12 No Yes 15 ≤4 4.4 18 No 14 ≤3.2 1.0 charoff 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 valign 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 :::\nSee also # ::: section-content\nCSS properties and pseudo-classes that may be specially useful to style the \u0026lt;tbody\u0026gt; element: the :nth-child pseudo-class to set the alignment on the cells of the column; the text-align property to align all cells content on the same character, like '.'. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody{._attribution-link} :::\n"},{"id":193,"href":"/docs/references/languages/html/element/td/","title":"Td","section":"HTML","content":" \u0026lt;td\u0026gt;: The Table Data Cell element # ::: section-content The \u0026lt;td\u0026gt; HTML element defines a cell of a table that contains data. It participates in the table model. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;td\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-taller .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Alien football stars Player Gloobles Za\u0026rsquo;taak TR-7 7 4,569 Khiresh Odo 7 7,223 Mia Oolong 9 6,219 ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} td, th { border: 1px solid rgb(190, 190, 190); padding: 10px; }\ntd { text-align: center; } tr:nth-child(even) { background-color: #eee; } th[scope='col'] { background-color: #696969; color: #fff; } th[scope='row'] { background-color: #d7d9f2; } caption { padding: 10px; caption-side: bottom; } table { border-collapse: collapse; border: 2px solid rgb(200, 200, 200); letter-spacing: 1px; font-family: sans-serif; font-size: 0.8rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element includes the global attributes.\ncolspan This attribute contains a non-negative integer value that indicates for how many columns the cell extends. Its default value is 1. Values higher than 1000 will be considered as incorrect and will be set to the default value (1).\nheaders This attribute contains a list of space-separated strings, each corresponding to the id attribute of the \u0026lt;th\u0026gt; elements that apply to this element.\nrowspan This attribute contains a non-negative integer value that indicates for how many rows the cell extends. Its default value is 1; if its value is set to 0, it extends until the end of the table section ( \u0026lt;thead\u0026gt;, \u0026lt;tbody\u0026gt;, \u0026lt;tfoot\u0026gt;, even if implicitly defined), that the cell belongs to. Values higher than 65534 are clipped down to 65534. :::\nDeprecated attributes # ::: section-content\nabbr [Deprecated]{.visually-hidden} This attribute contains a short abbreviated description of the cell's content. Some user-agents, such as speech readers, may present this description before the content itself.\n::: {#sect1 .notecard .note} Note: Do not use this attribute as it is obsolete in the latest standard. Alternatively, you can put the abbreviated description inside the cell and place the long content in the title attribute. :::\nalign [Deprecated]{.visually-hidden} This enumerated attribute specifies how the cell content's horizontal alignment will be handled. Possible values are:\nleft: The content is aligned to the left of the cell. center: The content is centered in the cell. right: The content is aligned to the right of the cell. justify (with text only): The content is stretched out inside the cell so that it covers its entire width. char (with text only): The content is aligned to a character inside the \u0026lt;th\u0026gt; element with minimal offset. This character is defined by the char and charoff attributes. The default value when this attribute is not specified is left.\n::: {#sect2 .notecard .note} Note:\nTo achieve the same effect as the left, center, right or justify values, apply the CSS text-align property to the element. To achieve the same effect as the char value, give the text-align property the same value you would use for the char. ::: axis [Deprecated]{.visually-hidden} This attribute contains a list of space-separated strings. Each string is the id of a group of cells that this header applies to.\nbgcolor [Deprecated]{.visually-hidden} This attribute defines the background color of each cell in a column. It is a 6-digit hexadecimal RGB code, prefixed by a '#'. One of the predefined color keywords can also be used.\nTo achieve a similar effect, use the CSS background-color property.\nchar [Deprecated]{.visually-hidden} The content in the cell element is aligned to a character. Typical values include a period (.) to align numbers or monetary values. If align is not set to char, this attribute is ignored.\ncharoff [Deprecated]{.visually-hidden} This attribute is used to shift column data to the right of the character specified by the char attribute. Its value specifies the length of this shift.\nheight [Deprecated]{.visually-hidden} This attribute is used to define a recommended cell height. Use the CSS height property instead.\nscope [Deprecated]{.visually-hidden} This enumerated attribute defines the cells that the header (defined in the \u0026lt;th\u0026gt;) element relates to. Only use this attribute with the \u0026lt;th\u0026gt; element to define the row or column for which it is a header.\nvalign [Deprecated]{.visually-hidden} This attribute specifies how a text is vertically aligned inside a cell. Possible values for this attribute are:\nbaseline: Positions the text near the bottom of the cell and aligns it with the baseline{target=\u0026quot;_blank\u0026quot;} of the characters instead of the bottom. If characters don't descend below the baseline, the baseline value achieves the same effect as bottom. bottom: Positions the text near the bottom of the cell. middle: Centers the text in the cell. and top: Positions the text near the top of the cell. To achieve a similar effect, use the CSS vertical-align property.\nwidth [Deprecated]{.visually-hidden} This attribute is used to define a recommended cell width. Use the CSS width property instead. :::\nExamples # ::: section-content See \u0026lt;table\u0026gt; for examples on \u0026lt;td\u0026gt;. :::\nTechnical summary # ::: section-content\nContent categories Sectioning root. Permitted content Flow content. Tag omission The start tag is mandatory.\nThe end tag may be omitted, if it is immediately followed by a \u0026lt;th\u0026gt; or \u0026lt;td\u0026gt; element or if there are no more data in its parent element. Permitted parents A \u0026lt;tr\u0026gt; element. Implicit ARIA role cell if a descendant of a \u0026lt;table\u0026gt; element Permitted ARIA roles Any DOM interface HTMLTableCellElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-td-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet td 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 abbr 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 align 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 axis 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 bgcolor 1 12 1 Yes ≤15 1 4.4 18 4 ≤14 1 1.0 char 1 12 No Yes 15 ≤4 4.4 18 No 14 ≤3.2 1.0 charoff 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 colspan 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 headers 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 rowspan 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 scope 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 valign 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 width 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/td{._attribution-link} :::\n"},{"id":194,"href":"/docs/references/languages/html/element/template/","title":"Template","section":"HTML","content":" \u0026lt;template\u0026gt;: The Content Template element # ::: section-content The \u0026lt;template\u0026gt; HTML element is a mechanism for holding HTML that is not to be rendered immediately when a page is loaded but may be instantiated subsequently during runtime using JavaScript.\nThink of a template as a content fragment that is being stored for subsequent use in the document. While the parser does process the contents of the \u0026lt;template\u0026gt; element while loading the page, it does so only to ensure that those contents are valid; the element's contents are not rendered, however. :::\nAttributes # ::: section-content The only standard attributes that the \u0026lt;template\u0026gt; element supports are the global attributes.\nIn Chromium-based browsers, the \u0026lt;template\u0026gt; element also supports a non-standard shadowrootmode attribute{target=\u0026quot;_blank\u0026quot;}, as part of an experimental \u0026quot;Declarative Shadow DOM\u0026quot;{target=\u0026quot;_blank\u0026quot;} proposal. In supporting browsers, a \u0026lt;template\u0026gt; element with the shadowrootmode attribute is detected by the HTML parser and immediately applied as the shadow root of its parent element. shadowrootmode can take a value of open or closed; these are equivalent to the open and closed values of the Element.attachShadow() mode option.\nAlso, the corresponding HTMLTemplateElement interface includes a standard content property (without an equivalent content/markup attribute). This content property is read-only and holds a DocumentFragment that contains the DOM subtree represented by the template. Be careful when using the content property because the returned DocumentFragment can exhibit unexpected behavior. For more details, see the Avoiding DocumentFragment pitfalls section below. :::\nExamples # ::: section-content First we start with the HTML portion of the example.\n::: code-example [html]{.language-name}\n\u0026lt;table id=\u0026#34;producttable\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;UPC_Code\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Product_Name\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;!-- existing data could optionally be included here --\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;template id=\u0026#34;productrow\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;record\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/template\u0026gt; :::\nFirst, we have a table into which we will later insert content using JavaScript code. Then comes the template, which describes the structure of an HTML fragment representing a single table row.\nNow that the table has been created and the template defined, we use JavaScript to insert rows into the table, with each row being constructed using the template as its basis.\n::: code-example [js]{.language-name}\n// Test to see if the browser supports the HTML template element by checking // for the presence of the template element\u0026#39;s content attribute. if (\u0026#34;content\u0026#34; in document.createElement(\u0026#34;template\u0026#34;)) { // Instantiate the table with the existing HTML tbody // and the row with the template const tbody = document.querySelector(\u0026#34;tbody\u0026#34;); const template = document.querySelector(\u0026#34;#productrow\u0026#34;); // Clone the new row and insert it into the table const clone = template.content.cloneNode(true); let td = clone.querySelectorAll(\u0026#34;td\u0026#34;); td[0].textContent = \u0026#34;1235646565\u0026#34;; td[1].textContent = \u0026#34;Stuff\u0026#34;; tbody.appendChild(clone); // Clone the new row and insert it into the table const clone2 = template.content.cloneNode(true); td = clone2.querySelectorAll(\u0026#34;td\u0026#34;); td[0].textContent = \u0026#34;0384928528\u0026#34;; td[1].textContent = \u0026#34;Acme Kidney Beans 2\u0026#34;; tbody.appendChild(clone2); } else { // Find another way to add the rows to the table because // the HTML template element is not supported. } :::\nThe result is the original HTML table, with two new rows appended to it via JavaScript:\n::: {#sect1 .code-example} ::: iframe ::: ::: :::\nAvoiding DocumentFragment pitfalls # ::: section-content When a DocumentFragment value is passed, Node.appendChild and similar methods move only the child nodes of that value into the target node. Therefore, it is usually preferable to attach event handlers to the children of a DocumentFragment, rather than to the DocumentFragment itself.\nConsider the following HTML and JavaScript: :::\nHTML # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;div id=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;template id=\u0026#34;template\u0026#34;\u0026gt; Click me \u0026lt;/template\u0026gt; ::: :::\nJavaScript # ::: section-content ::: code-example [js]{.language-name}\nconst container = document.getElementById(\u0026#34;container\u0026#34;); const template = document.getElementById(\u0026#34;template\u0026#34;); function clickHandler(event) { event.target.append(\u0026#34; — Clicked this div\u0026#34;); } const firstClone = template.content.cloneNode(true); firstClone.addEventListener(\u0026#34;click\u0026#34;, clickHandler); container.appendChild(firstClone); const secondClone = template.content.cloneNode(true); secondClone.children[0].addEventListener(\u0026#34;click\u0026#34;, clickHandler); container.appendChild(secondClone); ::: :::\nResult # ::: section-content Since firstClone is a DocumentFragment, only its children are added to container when appendChild is called; the event handlers of firstClone are not copied. In contrast, because an event handler is added to the first child node of secondClone, the event handler is copied when appendChild is called, and clicking on it works as one would expect.\n::: {#sect2 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Metadata content, flow content, phrasing content, script-supporting element Permitted content No restrictions Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts metadata content, phrasing content, or script-supporting elements. Also allowed as a child of a \u0026lt;colgroup\u0026gt; element that does not have a span attribute. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLTemplateElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-template-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet template 26 13 22 No 15 8 Yes 26 22 14 8 1.5 shadowrootmode 11190\u0026ndash;111 11190\u0026ndash;111 No No 9776\u0026ndash;97 16.4 11190\u0026ndash;111 11190\u0026ndash;111 No 64 16.4 22.015.0\u0026ndash;22.0 :::\nSee also # ::: section-content\nWeb components: \u0026lt;slot\u0026gt; (and historical: \u0026lt;shadow\u0026gt;) Using templates and slots CSS scoping module ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/template{._attribution-link} :::\n"},{"id":195,"href":"/docs/references/languages/html/element/textarea/","title":"Textarea","section":"HTML","content":" \u0026lt;textarea\u0026gt;: The Textarea element # ::: section-content The \u0026lt;textarea\u0026gt; HTML element represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example a comment on a review or feedback form. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;textarea\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Tell us your story:\n\u0026lt;textarea id=\u0026quot;story\u0026quot; name=\u0026quot;story\u0026quot; rows=\u0026quot;5\u0026quot; cols=\u0026quot;33\u0026quot;\u0026gt; It was a dark and stormy night... \u0026lt;/textarea\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} label, textarea { font-size: 0.8rem; letter-spacing: 1px; }\ntextarea { padding: 10px; max-width: 100%; line-height: 1.5; border-radius: 5px; border: 1px solid #ccc; box-shadow: 1px 1px 1px #999; } label { display: block; margin-bottom: 10px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe above example demonstrates a number of features of \u0026lt;textarea\u0026gt;:\nAn id attribute to allow the \u0026lt;textarea\u0026gt; to be associated with a \u0026lt;label\u0026gt; element for accessibility purposes A name attribute to set the name of the associated data point submitted to the server when the form is submitted. rows and cols attributes to allow you to specify an exact size for the \u0026lt;textarea\u0026gt; to take. Setting these is a good idea for consistency, as browser defaults can differ. Default content entered between the opening and closing tags. \u0026lt;textarea\u0026gt; does not support the value attribute. The \u0026lt;textarea\u0026gt; element also accepts several attributes common to form \u0026lt;input\u0026gt;s, such as autocomplete, autofocus, disabled, placeholder, readonly, and required. :::\nAttributes # ::: section-content This element includes the global attributes.\nautocomplete This attribute indicates whether the value of the control can be automatically completed by the browser. Possible values are:\noff: The user must explicitly enter a value into this field for every use, or the document provides its own auto-completion method; the browser does not automatically complete the entry. on: The browser can automatically complete the value based on values that the user has entered during previous uses. If the autocomplete attribute is not specified on a \u0026lt;textarea\u0026gt; element, then the browser uses the autocomplete attribute value of the \u0026lt;textarea\u0026gt; element's form owner. The form owner is either the \u0026lt;form\u0026gt; element that this \u0026lt;textarea\u0026gt; element is a descendant of or the form element whose id is specified by the form attribute of the input element. For more information, see the autocomplete attribute in \u0026lt;form\u0026gt;.\nautocorrect [Non-standard]{.visually-hidden} A string which indicates whether to activate automatic spelling correction and processing of text substitutions (if any are configured) while the user is editing this textarea. Permitted values are:\non Enable automatic spelling correction and text substitutions.\noff Disable automatic spelling correction and text substitutions.\nautofocus This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form-associated element in a document can have this attribute specified.\ncols The visible width of the text control, in average character widths. If it is specified, it must be a positive integer. If it is not specified, the default value is 20.\ndirname This attribute is used to indicate the text directionality of the element contents similar to the dirname attribute of the \u0026lt;input\u0026gt; element. For more information, see the dirname attribute.\ndisabled This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example \u0026lt;fieldset\u0026gt;; if there is no containing element when the disabled attribute is set, the control is enabled.\nform The form element that the \u0026lt;textarea\u0026gt; element is associated with (its \u0026quot;form owner\u0026quot;). The value of the attribute must be the id of a form element in the same document. If this attribute is not specified, the \u0026lt;textarea\u0026gt; element must be a descendant of a form element. This attribute enables you to place \u0026lt;textarea\u0026gt; elements anywhere within a document, not just as descendants of form elements.\nmaxlength The maximum string length (measured in UTF-16 code units) that the user can enter. If this value isn't specified, the user can enter an unlimited number of characters.\nminlength The minimum string length (measured in UTF-16 code units) required that the user should enter.\nname The name of the control.\nplaceholder A hint to the user of what can be entered in the control. Carriage returns or line-feeds within the placeholder text must be treated as line breaks when rendering the hint.\n::: {#sect1 .notecard .note} Note: Placeholders should only be used to show an example of the type of data that should be entered into a form; they are not a substitute for a proper \u0026lt;label\u0026gt; element tied to the input. See \u0026lt;input\u0026gt; labels for a full explanation. :::\nreadonly This Boolean attribute indicates that the user cannot modify the value of the control. Unlike the disabled attribute, the readonly attribute does not prevent the user from clicking or selecting in the control. The value of a read-only control is still submitted with the form.\nrequired This attribute specifies that the user must fill in a value before submitting a form.\nrows The number of visible text lines for the control. If it is specified, it must be a positive integer. If it is not specified, the default value is 2.\nspellcheck Specifies whether the \u0026lt;textarea\u0026gt; is subject to spell checking by the underlying browser/OS. The value can be:\ntrue: Indicates that the element needs to have its spelling and grammar checked. default : Indicates that the element is to act according to a default behavior, possibly based on the parent element's own spellcheck value. false : Indicates that the element should not be spell checked. wrap Indicates how the control should wrap the value for form submission. Possible values are:\nhard: The browser automatically inserts line breaks (CR+LF) so that each line is no longer than the width of the control; the cols attribute must be specified for this to take effect soft: The browser ensures that all line breaks in the entered value are a CR+LF pair, but no additional line breaks are added to the value. off [Non-standard]{.visually-hidden} : Like soft but changes appearance to white-space: pre so line segments exceeding cols are not wrapped and the \u0026lt;textarea\u0026gt; becomes horizontally scrollable. If this attribute is not specified, soft is its default value. :::\nStyling with CSS # ::: section-content \u0026lt;textarea\u0026gt; is a replaced element \u0026mdash; it has intrinsic dimensions, like a raster image. By default, its display value is inline-block. Compared to other form elements it is relatively easy to style, with its box model, fonts, color scheme, etc. being easily manipulable using regular CSS.\nStyling HTML forms provides some useful tips on styling \u0026lt;textarea\u0026gt;s. :::\nBaseline inconsistency # ::: section-content The HTML specification doesn't define where the baseline of a \u0026lt;textarea\u0026gt; is, so different browsers set it to different positions. For Gecko, the \u0026lt;textarea\u0026gt; baseline is set on the baseline of the first line of the textarea, on another browser it may be set on the bottom of the \u0026lt;textarea\u0026gt; box. Don't use vertical-align: baseline on it; the behavior is unpredictable. :::\nControlling whether a textarea is resizable # ::: section-content In most browsers, \u0026lt;textarea\u0026gt;s are resizable \u0026mdash; you'll notice the drag handle in the right-hand corner, which can be used to alter the size of the element on the page. This is controlled by the resize CSS property \u0026mdash; resizing is enabled by default, but you can explicitly disable it using a resize value of none:\n::: code-example [css]{.language-name}\ntextarea { resize: none; } ::: :::\nStyling valid and invalid values # ::: section-content Valid and invalid values of a \u0026lt;textarea\u0026gt; element (e.g. those within, and outside the bounds set by minlength, maxlength, or required) can be highlighted using the :valid and :invalid pseudo-classes. For example, to give your textarea a different border depending on whether it is valid or invalid:\n::: code-example [css]{.language-name}\ntextarea:invalid { border: 2px dashed red; } textarea:valid { border: 2px solid lime; } ::: :::\nExamples # Basic example # ::: section-content The following example shows a very simple textarea, with a set numbers of rows and columns and some default content.\n::: code-example [html]{.language-name}\n\u0026lt;textarea name=\u0026#34;textarea\u0026#34; rows=\u0026#34;10\u0026#34; cols=\u0026#34;50\u0026#34;\u0026gt;Write something here\u0026lt;/textarea\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nExample using \u0026quot;minlength\u0026quot; and \u0026quot;maxlength\u0026quot; # ::: section-content This example has a minimum and maximum number of characters \u0026mdash; of 10 and 20 respectively. Try it and see.\n::: code-example [html]{.language-name}\n\u0026lt;textarea name=\u0026#34;textarea\u0026#34; rows=\u0026#34;5\u0026#34; cols=\u0026#34;30\u0026#34; minlength=\u0026#34;10\u0026#34; maxlength=\u0026#34;20\u0026#34;\u0026gt; Write something here… \u0026lt;/textarea\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: :::\nNote that minlength doesn't stop the user from removing characters so that the number entered goes past the minimum, but it does make the value entered into the \u0026lt;textarea\u0026gt; invalid. Also note that even if you have a minlength value set (3, for example), an empty \u0026lt;textarea\u0026gt; is still considered valid unless you also have the required attribute set. :::\nExample using \u0026quot;placeholder\u0026quot; # ::: section-content This example has a placeholder set. Notice how it disappears when you start typing into the box.\n::: code-example [html]{.language-name}\n\u0026lt;textarea name=\u0026#34;textarea\u0026#34; rows=\u0026#34;5\u0026#34; cols=\u0026#34;30\u0026#34; placeholder=\u0026#34;Comment text.\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: :::\n::: {#sect5 .notecard .note} Note: Placeholders should only be used to show an example of the type of data that should be entered into a form; they are not a substitute for a proper \u0026lt;label\u0026gt; element tied to the input. See \u0026lt;input\u0026gt; labels for a full explanation. ::: :::\nDisabled and readonly # ::: section-content This example shows two \u0026lt;textarea\u0026gt;s \u0026mdash; one of which is disabled, and one of which is readonly. Have a play with both and you'll see the difference in behavior \u0026mdash; the disabled element is not selectable in any way (and its value is not submitted), whereas the readonly element is selectable and its contents copyable (and its value is submitted); you just can't edit the contents.\n::: {#sect6 .notecard .note} Note: In browsers other than Firefox, such as chrome, the disabled textarea content may be selectable and copyable. :::\n::: code-example [html]{.language-name}\n\u0026lt;textarea name=\u0026#34;textarea\u0026#34; rows=\u0026#34;5\u0026#34; cols=\u0026#34;30\u0026#34; disabled\u0026gt; I am a disabled textarea. \u0026lt;/textarea\u0026gt; \u0026lt;textarea name=\u0026#34;textarea\u0026#34; rows=\u0026#34;5\u0026#34; cols=\u0026#34;30\u0026#34; readonly\u0026gt; I am a read-only textarea. \u0026lt;/textarea\u0026gt; :::\nResult # ::: {#sect7 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, Interactive content, listed, labelable, resettable, and submittable form-associated element. Permitted content Text Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role textbox Permitted ARIA roles No role permitted DOM interface HTMLTextAreaElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-textarea-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari on IOS Samsung Explorer Android Android Android Internet textarea 1 12 1 Yes ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3 1.0\n\\[\\\u0026quot;Before Firefox 6, when a `\u0026lt;textarea\u0026gt;` \\[\\\u0026quot;Before Firefox 6, when a `\u0026lt;textarea\u0026gt;` Unlike other was focused, the insertion point was placed was focused, the insertion point was placed major browsers, at the end of the text by default. Other at the end of the text by default. Other a default style major browsers place the insertion point at major browsers place the insertion point at of the beginning of the text.\\\u0026quot;, \\\u0026quot;A default the beginning of the text.\\\u0026quot;, \\\u0026quot;A default `opacity: 0.4` background-image gradient is applied to all background-image gradient is applied to all is applied to `\u0026lt;textarea\u0026gt;` elements, which can be `\u0026lt;textarea\u0026gt;` elements, which can be disabled disabled using `background-image: none`.\\\u0026quot;, disabled using `background-image: none`.\\\u0026quot;, `\u0026lt;textarea\u0026gt;` \\\u0026quot;Before Firefox 89, manipulating the \\\u0026quot;Before Firefox 89, manipulating the elements. content of `\u0026lt;textarea\u0026gt;` elements using content of `\u0026lt;textarea\u0026gt;` elements using `Document.execCommand()` commands requires `Document.execCommand()` commands requires workarounds (see [bug workarounds (see [bug 1220696](https://bugzil.la/1220696)).\\\u0026quot;\\] 1220696](https://bugzil.la/1220696)).\\\u0026quot;\\] autocomplete 66 79 59 No 53 9.1 66 66 59 47 9.3 9.0\ncols 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\ndirname 17 79 116 No ≤12.1 6 ≤37 18 116 ≤12.1 6 1.0\ndisabled 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\nform 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\nmaxlength 4 12 4 10 ≤12.1 5 ≤37 18 4 ≤12.1 5 1.0\nminlength 40 17 51 No 27 10.1 40 40 51 27 10.3 4.0\nname 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\nplaceholder 4 12 4 10 ≤12.1 5 ≤37 18 4 ≤12.1 5 1.0\nreadonly 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\nrequired 4 12 4 10 ≤12.1 5 ≤37 18 4 ≤12.1 5 1.0\nrows 1 12 1 ≤6 ≤12.1 ≤4 4.4 18 4 ≤12.1 ≤3.2 1.0\nspellcheck 9 12 2 Yes 15 5.1 4.4 18 4 14 5 1.0\nwrap 16 12 4 ≤6 ≤12.1 6 ≤37 18 4 ≤12.1 6 1.0 # :::\nSee also # ::: section-content Other form-related elements:\n\u0026lt;form\u0026gt; \u0026lt;button\u0026gt; \u0026lt;datalist\u0026gt; \u0026lt;legend\u0026gt; \u0026lt;label\u0026gt; \u0026lt;select\u0026gt; \u0026lt;optgroup\u0026gt; \u0026lt;option\u0026gt; \u0026lt;input\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;output\u0026gt; \u0026lt;progress\u0026gt; \u0026lt;meter\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea{._attribution-link} :::\n"},{"id":196,"href":"/docs/references/languages/html/element/tfoot/","title":"Tfoot","section":"HTML","content":" \u0026lt;tfoot\u0026gt;: The Table Foot element # ::: section-content The \u0026lt;tfoot\u0026gt; HTML element defines a set of rows summarizing the columns of the table. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;tfoot\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-taller .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Items Expenditure Donuts 3,000 Stationery 18,000 Totals 21,000 ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} thead, tfoot { background-color: #3f87a6; color: #fff; }\ntbody { background-color: #e4f0f5; } caption { padding: 10px; caption-side: bottom; } table { border-collapse: collapse; border: 2px solid rgb(200, 200, 200); letter-spacing: 1px; font-family: sans-serif; font-size: 0.8rem; } td, th { border: 1px solid rgb(190, 190, 190); padding: 5px 10px; } td { text-align: center; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element includes the global attributes. :::\nDeprecated attributes # ::: section-content The following attributes are deprecated and should not be used. They are documented below for reference when updating existing code and for historical interest only.\nalign [Deprecated]{.visually-hidden} This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:\nleft, aligning the content to the left of the cell center, centering the content in the cell right, aligning the content to the right of the cell justify, inserting spaces into the textual content so that the content is justified in the cell char, aligning the textual content on a special character with a minimal offset, defined by the char and charoff attributes. If this attribute is not set, the left value is assumed.\n::: {#sect1 .notecard .note} Note:\nTo achieve the same effect as the left, center, right or justify values, use the CSS text-align property on it. To achieve the same effect as the char value, in CSS, you can use the value of the char as the value of the text-align property. ::: bgcolor [Deprecated]{.visually-hidden} The background color of the table. It is a 6-digit hexadecimal RGB code, prefixed by a '#'. One of the predefined color keywords can also be used.\nTo achieve a similar effect, use the CSS background-color property.\nchar [Deprecated]{.visually-hidden} This attribute specifies the alignment of the content in a column to a character. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.\ncharoff [Deprecated]{.visually-hidden} This attribute is used to indicate the number of characters to offset the column data from the alignment characters specified by the char attribute.\nvalign [Deprecated]{.visually-hidden} This attribute specifies the vertical alignment of the text within each row of cells of the table footer. Possible values for this attribute are:\nbaseline, which will put the text as close to the bottom of the cell as it is possible, but align it on the baseline{target=\u0026quot;_blank\u0026quot;} of the characters instead of the bottom of them. If characters are all of the size, this has the same effect as bottom. bottom, which will put the text as close to the bottom of the cell as it is possible; middle, which will center the text in the cell; and top, which will put the text as close to the top of the cell as it is possible. ::: {#sect2 .notecard .note} Note: Do not use this attribute as it is obsolete (and not supported) in the latest standard: instead set the CSS vertical-align property on it. ::: :::\nExamples # ::: section-content Please see the \u0026lt;table\u0026gt; page for examples on \u0026lt;tfoot\u0026gt;. :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content Zero or more \u0026lt;tr\u0026gt; elements. Tag omission The start tag is mandatory. The end tag may be omitted if there is no more content in the parent \u0026lt;table\u0026gt; element. Permitted parents A \u0026lt;table\u0026gt; element. The \u0026lt;tfoot\u0026gt; must appear after any \u0026lt;caption\u0026gt;, \u0026lt;colgroup\u0026gt;, \u0026lt;thead\u0026gt;, \u0026lt;tbody\u0026gt;, or \u0026lt;tr\u0026gt; element. Note that this is the requirement in HTML.\nOriginally, in HTML4, the opposite was true: the \u0026lt;tfoot\u0026gt; element could not be placed after any \u0026lt;tbody\u0026gt; or \u0026lt;tr\u0026gt; element. Implicit ARIA role rowgroup Permitted ARIA roles Any DOM interface HTMLTableSectionElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-tfoot-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet tfoot 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 align 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 bgcolor 1 12 1 Yes ≤15 1 4.4 18 4 ≤14 1 1.0 char 1 12 No Yes 15 ≤4 4.4 18 No 14 ≤3.2 1.0 charoff 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 valign 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 :::\nSee also # ::: section-content\nOther table-related HTML Elements: \u0026lt;caption\u0026gt;, \u0026lt;col\u0026gt;, \u0026lt;colgroup\u0026gt;, \u0026lt;table\u0026gt;, \u0026lt;tbody\u0026gt;, \u0026lt;td\u0026gt;, \u0026lt;th\u0026gt;, \u0026lt;thead\u0026gt;, \u0026lt;tr\u0026gt;; CSS properties and pseudo-classes that may be specially useful to style the \u0026lt;tfoot\u0026gt; element: the :nth-child pseudo-class to set the alignment on the cells of the column; the text-align property to align all cells content on the same character, like '.'. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot{._attribution-link} :::\n"},{"id":197,"href":"/docs/references/languages/html/element/th/","title":"Th","section":"HTML","content":" \u0026lt;th\u0026gt;: The Table Header element # ::: section-content The \u0026lt;th\u0026gt; HTML element defines a cell as the header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;th\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-taller .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Alien football stars Player Gloobles Za\u0026rsquo;taak TR-7 7 4,569 Khiresh Odo 7 7,223 Mia Oolong 9 6,219 ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} td, th { border: 1px solid rgb(190, 190, 190); padding: 10px; }\ntd { text-align: center; } tr:nth-child(even) { background-color: #eee; } th[scope='col'] { background-color: #696969; color: #fff; } th[scope='row'] { background-color: #d7d9f2; } caption { padding: 10px; caption-side: bottom; } table { border-collapse: collapse; border: 2px solid rgb(200, 200, 200); letter-spacing: 1px; font-family: sans-serif; font-size: 0.8rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element includes the global attributes.\nabbr This attribute contains a short abbreviated description of the cell's content. Some user-agents, such as speech readers, may present this description before the content itself.\ncolspan This attribute contains a non-negative integer value that indicates for how many columns the cell extends. Its default value is 1. Values higher than 1000 will be considered as incorrect and will be set to the default value (1).\nheaders This attribute contains a list of space-separated strings, each corresponding to the id attribute of the \u0026lt;th\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} elements that apply to this element.\nrowspan This attribute contains a non-negative integer value that indicates for how many rows the cell extends. Its default value is 1; if its value is set to 0, it extends until the end of the table section ( \u0026lt;thead\u0026gt;, \u0026lt;tbody\u0026gt;, \u0026lt;tfoot\u0026gt;, even if implicitly defined), that the cell belongs to. Values higher than 65534 are clipped down to 65534.\nscope This enumerated attribute defines the cells that the header (defined in the \u0026lt;th\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;}) element relates to. It may have the following values:\nrow: The header relates to all cells of the row it belongs to. col: The header relates to all cells of the column it belongs to. rowgroup: The header belongs to a rowgroup and relates to all of its cells. colgroup: The header belongs to a colgroup and relates to all of its cells. If the scope attribute is not specified, or its value is not row, col, or rowgroup, or colgroup, then browsers automatically select the set of cells to which the header cell applies. :::\nDeprecated attributes # ::: section-content\nalign [Deprecated]{.visually-hidden} This enumerated attribute specifies how the cell content's horizontal alignment will be handled. Possible values are:\nleft: The content is aligned to the left of the cell. center: The content is centered in the cell. right: The content is aligned to the right of the cell. justify (with text only): The content is stretched out inside the cell so that it covers its entire width. char (with text only): The content is aligned to a character inside the \u0026lt;th\u0026gt; element with minimal offset. This character is defined by the char and charoff attributes. The default value when this attribute is not specified is left.\n::: {#sect1 .notecard .note} Note: Do not use this attribute as it is obsolete in the latest standard.\nTo achieve the same effect as the left, center, right or justify values, apply the CSS text-align property to the element. To achieve the same effect as the char value, give the text-align property the same value you would use for the char. ::: axis [Deprecated]{.visually-hidden} This attribute contains a list of space-separated strings. Each string is the id of a group of cells that this header applies to.\n::: {#sect2 .notecard .note} Note: Do not use this attribute as it is obsolete in the latest standard: use the scope attribute instead. :::\nbgcolor [Deprecated]{.visually-hidden} This attribute defines the background color of each cell in a column. It consists of a 6-digit hexadecimal code as defined in sRGB{target=\u0026quot;_blank\u0026quot;} and is prefixed by '#'.\nchar [Deprecated]{.visually-hidden} The content in the cell element is aligned to a character. Typical values include a period (.) to align numbers or monetary values. If align is not set to char, this attribute is ignored.\n::: {#sect3 .notecard .note} Note: Do not use this attribute as it is obsolete in the latest standard. To achieve the same effect, you can specify the character as the first value of the text-align property. :::\ncharoff [Deprecated]{.visually-hidden} This attribute is used to shift column data to the right of the character specified by the char attribute. Its value specifies the length of this shift.\n::: {#sect4 .notecard .note} Note: Do not use this attribute as it is obsolete in the latest standard. :::\nheight [Deprecated]{.visually-hidden} This attribute is used to define a recommended cell height.\n::: {#sect5 .notecard .note} Note: Do not use this attribute as it is obsolete in the latest standard: use the CSS height property instead. :::\nvalign [Deprecated]{.visually-hidden} This attribute specifies how a text is vertically aligned inside a cell. Possible values for this attribute are:\nbaseline: Positions the text near the bottom of the cell and aligns it with the baseline{target=\u0026quot;_blank\u0026quot;} of the characters instead of the bottom. If characters don't descend below the baseline, the baseline value achieves the same effect as bottom. bottom: Positions the text near the bottom of the cell. middle: Centers the text in the cell. and top: Positions the text near the top of the cell. ::: {#sect6 .notecard .note} Note: Do not use this attribute as it is obsolete in the latest standard: use the CSS vertical-align property instead. :::\nwidth [Deprecated]{.visually-hidden} This attribute is used to define a recommended cell width. Additional space can be added with the cellspacing and cellpadding properties and the width of the \u0026lt;col\u0026gt; element can also create extra width. But, if a column's width is too narrow to show a particular cell properly, it will be widened when displayed.\n::: {#sect7 .notecard .note} Note: Do not use this attribute as it is obsolete in the latest standard: use the CSS width property instead. ::: :::\nExamples # ::: section-content See \u0026lt;table\u0026gt; for examples on \u0026lt;th\u0026gt;. :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content Flow content, but with no header, footer, sectioning content, or heading content descendants. Tag omission The start tag is mandatory.\nThe end tag may be omitted, if it is immediately followed by a \u0026lt;th\u0026gt; or \u0026lt;td\u0026gt; element or if there are no more data in its parent element. Permitted parents A \u0026lt;tr\u0026gt; element. Implicit ARIA role columnheader or rowheader Permitted ARIA roles Any DOM interface HTMLTableCellElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-th-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet th 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 abbr 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 align 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 axis 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 bgcolor 1 12 1 Yes ≤15 1 4.4 18 4 ≤14 1 1.0 char 1 12 No Yes 15 ≤4 4.4 18 No 14 ≤3.2 1.0 charoff 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 colspan 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 headers 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 rowspan 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 scope 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 valign 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 width 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 :::\nSee also # ::: section-content\nOther table-related HTML Elements: \u0026lt;caption\u0026gt;, \u0026lt;col\u0026gt;, \u0026lt;colgroup\u0026gt;, \u0026lt;table\u0026gt;, \u0026lt;tbody\u0026gt;, \u0026lt;td\u0026gt;, \u0026lt;tfoot\u0026gt;, \u0026lt;thead\u0026gt;, \u0026lt;tr\u0026gt;. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/th{._attribution-link} :::\n"},{"id":198,"href":"/docs/references/languages/html/element/thead/","title":"Thead","section":"HTML","content":" \u0026lt;thead\u0026gt;: The Table Head element # ::: section-content The \u0026lt;thead\u0026gt; HTML element defines a set of rows defining the head of the columns of the table. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;thead\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-taller .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Council budget (in £) 2018 Items Expenditure Donuts 3,000 Stationery 18,000 ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} thead, tfoot { background-color: #3f87a6; color: #fff; }\ntbody { background-color: #e4f0f5; } caption { padding: 10px; caption-side: bottom; } table { border-collapse: collapse; border: 2px solid rgb(200, 200, 200); letter-spacing: 1px; font-family: sans-serif; font-size: 0.8rem; } td, th { border: 1px solid rgb(190, 190, 190); padding: 5px 10px; } td { text-align: center; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element includes the global attributes. :::\nDeprecated attributes # ::: section-content\nalign [Deprecated]{.visually-hidden} This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:\nleft, aligning the content to the left of the cell center, centering the content in the cell right, aligning the content to the right of the cell justify, inserting spaces into the textual content so that the content is justified in the cell char, aligning the textual content on a special character with a minimal offset, defined by the char and charoff attributes. If this attribute is not set, the left value is assumed.\n::: {#sect1 .notecard .warning} Warning: Do not use this attribute as it is obsolete (not supported) in the latest standard.\nTo align values, use the CSS text-align property instead. ::: bgcolor [Deprecated]{.visually-hidden} This attribute defines the background color of each column cell. It accepts a 6-digit hexadecimal color or a named color. Alpha transparency is not supported.\n::: {#sect2 .notecard .note} Note: Do not use this attribute, as it is non-standard. The thead element should be styled using the CSS background-color property, which can be applied to any element, including the thead, \u0026lt;tr\u0026gt;, \u0026lt;td\u0026gt; and \u0026lt;th\u0026gt; elements. :::\nchar [Deprecated]{.visually-hidden} This attribute is used to set the character to align the cells in a column on. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.\n::: {#sect3 .notecard .note} Note: Do not use this attribute as it is obsolete (and not supported) in the latest standard. :::\ncharoff [Deprecated]{.visually-hidden} This attribute is used to indicate the number of characters to offset the column data from the alignment characters specified by the char attribute.\n::: {#sect4 .notecard .note} Note: Do not use this attribute as it is obsolete (and not supported) in the latest standard. :::\nvalign [Deprecated]{.visually-hidden} This attribute specifies the vertical alignment of the text within each row of cells of the table header. Possible values for this attribute are:\nbaseline, which will put the text as close to the bottom of the cell as it is possible, but align it on the baseline{target=\u0026quot;_blank\u0026quot;} of the characters instead of the bottom of them. If characters are all of the size, this has the same effect as bottom. bottom, which will put the text as close to the bottom of the cell as it is possible; middle, which will center the text in the cell; top, which will put the text as close to the top of the cell as it is possible. ::: {#sect5 .notecard .note} Note: Do not use this attribute as it is obsolete (and not supported) in the latest standard: instead set the CSS vertical-align property on it. ::: :::\nExamples # ::: section-content See \u0026lt;table\u0026gt; for examples on \u0026lt;thead\u0026gt;. :::\nTechnical summary # ::: section-content\nContent categories None. Permitted content Zero or more \u0026lt;tr\u0026gt; elements. Tag omission The start tag is mandatory. The end tag may be omitted if the \u0026lt;thead\u0026gt; element is immediately followed by a \u0026lt;tbody\u0026gt; or \u0026lt;tfoot\u0026gt; element. Permitted parents A \u0026lt;table\u0026gt; element. The \u0026lt;thead\u0026gt; must appear after any \u0026lt;caption\u0026gt; or \u0026lt;colgroup\u0026gt; element, even implicitly defined, but before any \u0026lt;tbody\u0026gt;, \u0026lt;tfoot\u0026gt; and \u0026lt;tr\u0026gt; element. Implicit ARIA role rowgroup Permitted ARIA roles Any DOM interface HTMLTableSectionElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-thead-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari on IOS Samsung Explorer Android Android for Android Internet Android thead 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0\nBackgrounds applied to Backgrounds applied to `\u0026lt;thead\u0026gt;` elements will `\u0026lt;thead\u0026gt;` elements will be applied to each table be applied to each table cell, rather than the cell, rather than the entire header. To mimic entire header. To mimic the behavior of other the behavior of other browsers, set the browsers, set the `background-attachment` `background-attachment` CSS property to `fixed`. CSS property to `fixed`. align 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0\nbgcolor 1 12 1 Yes ≤15 1 4.4 18 4 ≤14 1 1.0\nchar 1 12 No Yes 15 ≤4 4.4 18 No 14 ≤3.2 1.0\ncharoff 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nvalign 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 # :::\nSee also # ::: section-content\nOther table-related HTML Elements: \u0026lt;caption\u0026gt;, \u0026lt;col\u0026gt;, \u0026lt;colgroup\u0026gt;, \u0026lt;table\u0026gt;, \u0026lt;tbody\u0026gt;, \u0026lt;td\u0026gt;, \u0026lt;tfoot\u0026gt;, \u0026lt;th\u0026gt;, \u0026lt;tr\u0026gt;; CSS properties and pseudo-classes that may be specially useful to style the \u0026lt;thead\u0026gt; element: the :nth-child pseudo-class to set the alignment on the cells of the column; the text-align property to align all cells content on the same character, like '.'. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead{._attribution-link} :::\n"},{"id":199,"href":"/docs/references/languages/html/element/time/","title":"Time","section":"HTML","content":" \u0026lt;time\u0026gt;: The (Date) Time element # ::: section-content The \u0026lt;time\u0026gt; HTML element represents a specific period in time. It may include the datetime attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders.\nIt may represent one of the following:\nA time on a 24-hour clock. A precise date in the Gregorian calendar{target=\u0026quot;_blank\u0026quot;} (with optional time and timezone information). A valid time duration{target=\u0026quot;_blank\u0026quot;}. ::: Try it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;time\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} The Cure will be celebrating their 40th anniversary on July 7 in London\u0026rsquo;s Hyde Park. \u0026lt;p\u0026gt; The concert starts at \u0026lt;time datetime=\u0026quot;20:00\u0026quot;\u0026gt;20:00\u0026lt;/time\u0026gt; and you'll be able to enjoy the band for at least \u0026lt;time datetime=\u0026quot;PT2H30M\u0026quot;\u0026gt;2h 30m\u0026lt;/time\u0026gt;. \u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} time { font-weight: bold; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content Like all other HTML elements, this element supports the global attributes.\ndatetime This attribute indicates the time and/or date of the element and must be in one of the formats described below. :::\nUsage notes # ::: section-content This element is for presenting dates and times in a machine-readable format. For example, this can help a user agent offer to add an event to a user's calendar.\nThis element should not be used for dates prior to the introduction of the Gregorian calendar (due to complications in calculating those dates).\nThe datetime value (the machine-readable value of the datetime) is the value of the element's datetime attribute, which must be in the proper format (see below). If the element does not have a datetime attribute, it must not have any element descendants, and the datetime value is the element's child text content. :::\nValid datetime values # ::: section-content\na valid year string 2011\na valid month string 2011-11\na valid date string 2011-11-18\na valid yearless date string 11-18\na valid week string 2011-W47\na valid time string 14:54\n14:54:39\n14:54:39.929\na valid local date and time string 2011-11-18T14:54:39.929\n2011-11-18 14:54:39.929\na valid global date and time string 2011-11-18T14:54:39.929Z\n2011-11-18T14:54:39.929-0400\n2011-11-18T14:54:39.929-04:00\n2011-11-18 14:54:39.929Z\n2011-11-18 14:54:39.929-0400\n2011-11-18 14:54:39.929-04:00\na valid duration string PT4H18M3S :::\nExamples # Simple example # ::: section-content\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;The concert starts at \u0026lt;time datetime=\u0026#34;2018-07-07T20:00:00\u0026#34;\u0026gt;20:00\u0026lt;/time\u0026gt;.\u0026lt;/p\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\ndatetime example # ::: section-content\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; The concert took place on \u0026lt;time datetime=\u0026#34;2001-05-15T19:00\u0026#34;\u0026gt;May 15\u0026lt;/time\u0026gt;. \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role time Permitted ARIA roles Any DOM interface HTMLTimeElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-time-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet time 62 ≤18 22 No 4911.5\u0026ndash;12 7 62 62 22 4611.5\u0026ndash;12 4 8.0 datetime 62 ≤18 22 No 4911.5\u0026ndash;12 7 62 62 22 4611.5\u0026ndash;12 4 8.0 :::\nSee also # ::: section-content\nThe \u0026lt;data\u0026gt; element, allowing to signal other kind of values. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/time{._attribution-link} :::\n"},{"id":200,"href":"/docs/references/languages/html/element/title/","title":"Title","section":"HTML","content":" \u0026lt;title\u0026gt;: The Document Title element # ::: section-content The \u0026lt;title\u0026gt; HTML element defines the document's title that is shown in a browser's title bar or a page's tab. It only contains text; tags within the element are ignored.\n::: code-example [html]{.language-name}\n\u0026lt;title\u0026gt;Grandma\u0026#39;s Heavy Metal Festival Journal\u0026lt;/title\u0026gt; :::\nContent categories Metadata content. Permitted content Text that is not inter-element whitespace. Tag omission Both opening and closing tags are required. Note that leaving off \u0026lt;/title\u0026gt; should cause the browser to ignore the rest of the page. Permitted parents A \u0026lt;head\u0026gt; element that contains no other \u0026lt;title\u0026gt; element. Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted. DOM interface HTMLTitleElement ::: Attributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content The \u0026lt;title\u0026gt; element is always used within a page's \u0026lt;head\u0026gt; block. :::\nPage titles and SEO # ::: section-content The contents of a page title can have significant implications for search engine optimization ( SEO). In general, a longer, descriptive title performs better than short or generic titles. The content of the title is one of the components used by search engine algorithms to decide the order in which to list pages in search results. Also, the title is the initial \u0026quot;hook\u0026quot; by which you grab the attention of readers glancing at the search results page.\nA few guidelines and tips for composing good titles:\nAvoid one- or two-word titles. Use a descriptive phrase, or a term-definition pairing for glossary or reference-style pages. Search engines typically display about the first 55\u0026ndash;60 characters of a page title. Text beyond that may be lost, so try not to have titles longer than that. If you must use a longer title, make sure the important parts come earlier and that nothing critical is in the part of the title that is likely to be dropped. Don't use \u0026quot;keyword blobs.\u0026quot; If your title is just a list of words, algorithms often reduce your page's position in the search results. Try to make sure your titles are as unique as possible within your own site. Duplicate\u0026mdash;or near-duplicate\u0026mdash;titles can contribute to inaccurate search results. ::: Examples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;title\u0026gt;Awesome interesting stuff\u0026lt;/title\u0026gt; :::\nThis example establishes a page whose title (as displayed at the top of the window or in the window's tab) as \u0026quot;Awesome interesting stuff\u0026quot;. :::\nAccessibility concerns # ::: section-content It is important to provide an accurate and concise title to describe the page's purpose.\nA common navigation technique for users of assistive technology is to read the page title and infer the content the page contains. This is because navigating into a page to determine its content can be a time-consuming and potentially confusing process. Titles should be unique to every page of a website, ideally surfacing the primary purpose of the page first, followed by the name of the website. Following this pattern will help ensure that the primary purpose of the page is announced by a screen reader first. This provides a far better experience than having to listen to the name of a website before the unique page title, for every page a user navigates to in the same website. :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;title\u0026gt;Menu - Blue House Chinese Food - FoodYum: Online takeout today!\u0026lt;/title\u0026gt; :::\nIf a form submission contains errors and the submission re-renders the current page, the title can be used to help make users aware of any errors with their submission. For instance, update the page title value to reflect significant page state changes (such as form validation problems).\n::: code-example [html]{.language-name}\n\u0026lt;title\u0026gt; 2 errors - Your order - Sea Food Store - Food: Online takeout today! \u0026lt;/title\u0026gt; :::\n::: {#sect1 .notecard .note} Note: Presently, dynamically updating a page's title will not be automatically announced by screen readers. If you are going to update the page title to reflect significant changes to a page's state, then the use of ARIA Live Regions may be necessary, as well. :::\nMDN Understanding WCAG, Guideline 2.4 explanations Understanding Success Criterion 2.4.2 | W3C Understanding WCAG 2.1{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-title-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet title 1 12 1 1 15 1 4.4 18 4 14 1 1.0 :::\nSee also # ::: section-content\nSVG \u0026lt;title\u0026gt; element ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/title{._attribution-link} :::\n"},{"id":201,"href":"/docs/references/languages/html/element/tr/","title":"Tr","section":"HTML","content":" \u0026lt;tr\u0026gt;: The Table Row element # ::: section-content The \u0026lt;tr\u0026gt; HTML element defines a row of cells in a table. The row's cells can then be established using a mix of \u0026lt;td\u0026gt; (data cell) and \u0026lt;th\u0026gt; (header cell) elements. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;tr\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-taller .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Alien football stars Player Gloobles Za\u0026rsquo;taak TR-7 7 4,569 Khiresh Odo 7 7,223 Mia Oolong 9 6,219 ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} td, th { border: 1px solid rgb(190, 190, 190); padding: 10px; }\ntd { text-align: center; } tr:nth-child(even) { background-color: #eee; } th[scope='col'] { background-color: #696969; color: #fff; } th[scope='row'] { background-color: #d7d9f2; } caption { padding: 10px; caption-side: bottom; } table { border-collapse: collapse; border: 2px solid rgb(200, 200, 200); letter-spacing: 1px; font-family: sans-serif; font-size: 0.8rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nTo provide additional control over how cells fit into (or span across) columns, both \u0026lt;th\u0026gt; and \u0026lt;td\u0026gt; support the colspan attribute, which lets you specify how many columns wide the cell should be, with the default being 1. Similarly, you can use the rowspan attribute on cells to indicate they should span more than one table row.\nThis can take a little practice to get right when building your tables. We have some examples below, but for more examples and an in-depth tutorial, see the HTML tables series in our Learn web development area, where you'll learn how to use the table elements and their attributes to get just the right layout and formatting for your tabular data. :::\nAttributes # ::: section-content This element includes the global attributes. There are also several deprecated attributes, which you should avoid but may need to know when reading older code. :::\nDeprecated attributes # ::: section-content The following attributes may still be implemented in browsers but are no longer part of the HTML specification and may be missing or may not work as expected. They should be avoided.\nalign [Deprecated]{.visually-hidden} A string which specifies how the cell's context should be aligned horizontally within the cells in the row; this is shorthand for using align on every cell in the row individually. Possible values are:\nleft Align the content of each cell at its left edge.\ncenter Center the contents of each cell between their left and right edges.\nright Align the content of each cell at its right edge.\njustify Widen whitespaces within the text of each cell so that the text fills the full width of each cell (full justification).\nchar Align each cell in the row on a specific character (such that each row in the column that is configured this way will horizontally align its cells on that character). This uses the char and charoff to establish the alignment character (typically \u0026quot;.\u0026quot; or \u0026quot;,\u0026quot; when aligning numerical data) and the number of characters that should follow the alignment character. This alignment type was never widely supported.\nIf no value is expressly set for align, the parent node's value is inherited.\n::: {#sect1 .notecard .note} Note: Instead of using the obsolete align attribute, you should instead use the CSS text-align property to establish left, center, right, or justify alignment for the row's cells. To apply character-based alignment, set the CSS text-align property to the alignment character (such as \u0026quot;.\u0026quot; or \u0026quot;,\u0026quot;). :::\nbgcolor [Deprecated]{.visually-hidden} A string specifying a color to apply to the backgrounds of each of the row's cells. This can be either a hexadecimal #RRGGBB or #RGB value or a color keyword. Omitting the attribute or setting it to null in JavaScript causes the row's cells to inherit the row's parent element's background color.\n::: {#sect2 .notecard .note} Note: The \u0026lt;tr\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} element should be styled using CSS. To give a similar effect as the bgcolor attribute, use the CSS property background-color. :::\nchar [Deprecated]{.visually-hidden} A string that sets the character to align the cells in each row's columns (each row's centering that uses the same character gets aligned with others using the same character. Typical values for this include a period (\u0026quot;.\u0026quot;) or comma (\u0026quot;,\u0026quot;) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.\n::: {#sect3 .notecard .note} Note: This attribute is obsolete and rarely implemented anyway. To achieve the same effect as the char attribute, set the CSS text-align property to the same string you would specify for the char property, such as text-align: \u0026quot;.\u0026quot;. :::\ncharoff [Deprecated]{.visually-hidden} A string indicating the number of characters on the tail end of the column's data should be displayed after the alignment character specified by the char attribute. For example, when displaying money values for currencies that use hundredths of a unit (such as the dollar, which is divided into 100 cents), you would typically specify a value of 2, so that in tandem with char being set to \u0026quot;.\u0026quot;, the values in a column would be cleanly aligned on the decimal points, with the number of cents properly displayed to the right of the decimal point.\n::: {#sect4 .notecard .note} Note: This attribute is obsolete, and was never widely supported anyway. :::\nvalign [Deprecated]{.visually-hidden} A string specifying the vertical alignment of the text within each cell in the row. Possible values for this attribute are:\nbaseline Aligns each cell's content text as closely as possible to the bottom of the cell, handling alignment of different fonts and font sizes by aligning the characters along the baseline{target=\u0026quot;_blank\u0026quot;} of the font(s) used in the row. If all the characters in the row are the same size, the effect is the same as bottom.\nbottom, Draws the text in each of the row's cells as closely as possible to the bottom edge of those cells.\nmiddle Each cell's text is vertically centered.\ntop Each cell's text is drawn as closely as possible to the top edge of the containing cell.\n::: {#sect5 .notecard .note} Note: Don't use the obsolete valign attribute. Instead, add the CSS vertical-align property to the row. ::: :::\nExamples # ::: section-content See \u0026lt;table\u0026gt; for examples on \u0026lt;tr\u0026gt;. :::\nBasic example # ::: section-content This simple example shows a table listing people's names along with various information about membership in a club or service.\nHTML # This HTML demonstrates the most basic structure of a table. There are no groups, no cells that span multiple rows or columns, no captions, and only the most basic styling to create lines around the components of the table for something resembling clarity.\nThere are just four rows (including one header row), each with four columns (including one header column). Not even the table section elements are used; instead, the browser is allowed to determine this automatically. We'll add \u0026lt;thead\u0026gt;, \u0026lt;tbody\u0026gt;, and \u0026lt;tfoot\u0026gt; in the next example.\n::: code-example [html]{.language-name}\n\u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;ID\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Member Since\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Balance\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Margaret Nguyen\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;427311\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;time datetime=\u0026#34;2010-06-03\u0026#34;\u0026gt;June 3, 2010\u0026lt;/time\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;0.00\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Edvard Galinski\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;533175\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;time datetime=\u0026#34;2011-01-13\u0026#34;\u0026gt;January 13, 2011\u0026lt;/time\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;37.00\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Hoshi Nakamura\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;601942\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;time datetime=\u0026#34;2012-07-23\u0026#34;\u0026gt;July 23, 2012\u0026lt;/time\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;15.00\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; :::\nCSS # This simple CSS just adds a solid black border around the table and around each of its cells, including those specified using both \u0026lt;th\u0026gt; and \u0026lt;td\u0026gt;. That way, both header and data cells are easily demarcated.\n::: code-example [css]{.language-name}\ntable { border: 1px solid black; } th, td { border: 1px solid black; } :::\nResult # ::: {#sect6 .code-example} ::: iframe ::: ::: :::\nRow and column spanning # ::: section-content Now, let's introduce another column that shows the date the user's membership ended, along with a super-heading above the \u0026quot;joined\u0026quot; and \u0026quot;canceled\u0026quot; dates called \u0026quot;Membership Dates\u0026quot;. This involves adding both row and column spans to the table, so that the heading cells can wind up in the right places.\nResult # Let's actually look at the output first this time:\n::: {#sect7 .code-example} ::: iframe ::: :::\nNotice how the heading area here is actually two rows, one with \u0026quot;Name\u0026quot;, \u0026quot;ID\u0026quot;, \u0026quot;Membership Dates\u0026quot;, and \u0026quot;Balance\u0026quot; headings, and the other with \u0026quot;Joined\u0026quot; and \u0026quot;Canceled\u0026quot;, which are subheadings below \u0026quot;Membership Dates\u0026quot;. This is accomplished by:\nHaving the first row's \u0026quot;Name\u0026quot;, \u0026quot;ID\u0026quot;, and \u0026quot;Balance\u0026quot; heading cells span two rows using the rowspan attribute, making them each two rows tall. Having the first row's \u0026quot;Membership Dates\u0026quot; heading cell span two columns using the colspan attribute, which causes this heading actually to be two columns wide. Having a second row of \u0026lt;th\u0026gt; elements that contains only the \u0026quot;Joined\u0026quot; and \u0026quot;Canceled\u0026quot; headings. Because the other columns are already occupied by first-row cells that span into the second row, these wind up correctly positioned under the \u0026quot;Membership Dates\u0026quot; heading. HTML # The HTML is similar to the previous example's, except for the addition of the new column in each data row, and the changes to the header. Those changes make the HTML look like this:\n::: code-example [html]{.language-name}\n\u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th rowspan=\u0026#34;2\u0026#34;\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th rowspan=\u0026#34;2\u0026#34;\u0026gt;ID\u0026lt;/th\u0026gt; \u0026lt;th colspan=\u0026#34;2\u0026#34;\u0026gt;Membership Dates\u0026lt;/th\u0026gt; \u0026lt;th rowspan=\u0026#34;2\u0026#34;\u0026gt;Balance\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Joined\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Canceled\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Margaret Nguyen\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;427311\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;time datetime=\u0026#34;2010-06-03\u0026#34;\u0026gt;June 3, 2010\u0026lt;/time\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;n/a\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;0.00\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Edvard Galinski\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;533175\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;time datetime=\u0026#34;2011-01-13\u0026#34;\u0026gt;January 13, 2011\u0026lt;/time\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;time datetime=\u0026#34;2017-04-08\u0026#34;\u0026gt;April 8, 2017\u0026lt;/time\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;37.00\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Hoshi Nakamura\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;601942\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;time datetime=\u0026#34;2012-07-23\u0026#34;\u0026gt;July 23, 2012\u0026lt;/time\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;n/a\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;15.00\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; :::\nThe differences that matter here\u0026mdash;for the purposes of discussing row and column spans\u0026mdash;are in the first few lines of the code above. Note the use of rowspan on to make the \u0026quot;Name\u0026quot;, \u0026quot;ID\u0026quot;, and \u0026quot;Balance\u0026quot; headers occupy two rows instead of just one, and the use of colspan to make the \u0026quot;Membership Dates\u0026quot; header cell span across two columns.\nThe CSS is unchanged from before. :::\nExplicitly specifying table content groups # ::: section-content Before really getting into styling this table, let's take a moment to add row and column groups to help make our CSS easier.\nHTML # The HTML is where the action is here, and the action is pretty simple.\n::: code-example [html]{.language-name}\n\u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th rowspan=\u0026#34;2\u0026#34;\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th rowspan=\u0026#34;2\u0026#34;\u0026gt;ID\u0026lt;/th\u0026gt; \u0026lt;th colspan=\u0026#34;2\u0026#34;\u0026gt;Membership Dates\u0026lt;/th\u0026gt; \u0026lt;th rowspan=\u0026#34;2\u0026#34;\u0026gt;Balance\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Joined\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Canceled\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;row\u0026#34;\u0026gt;Margaret Nguyen\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;427311\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;time datetime=\u0026#34;2010-06-03\u0026#34;\u0026gt;June 3, 2010\u0026lt;/time\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;n/a\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;0.00\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;row\u0026#34;\u0026gt;Edvard Galinski\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;533175\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;time datetime=\u0026#34;2011-01-13\u0026#34;\u0026gt;January 13, 2011\u0026lt;/time\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;time datetime=\u0026#34;2017-04-08\u0026#34;\u0026gt;April 8, 2017\u0026lt;/time\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;37.00\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;row\u0026#34;\u0026gt;Hoshi Nakamura\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;601942\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;time datetime=\u0026#34;2012-07-23\u0026#34;\u0026gt;July 23, 2012\u0026lt;/time\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;n/a\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;15.00\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; :::\nThe differences that matter here\u0026mdash;for the purposes of discussing row and column spans\u0026mdash;are in the first few lines of the code above. Note the use of rowspan on to make the \u0026quot;Name\u0026quot;, \u0026quot;ID\u0026quot;, and \u0026quot;Balance\u0026quot; headers occupy two rows instead of just one, and the use of colspan to make the \u0026quot;Membership Dates\u0026quot; header cell span across two columns.\nOnce again, we haven't touched the CSS.\nResult # The output is entirely unchanged, despite the addition of useful contextual information under the hood:\n::: {#sect8 .code-example} ::: iframe ::: ::: :::\nBasic styling # ::: section-content As is the case with all parts of a table, you can change the appearance of a table row and its contents using CSS. Any styles applied to the \u0026lt;tr\u0026gt; element will affect the cells within the row unless overridden by styles applied to those cells.\nLet's apply a basic style to the table to adjust the typeface being used, and add a background color to the header row.\nResult # Again, let's take a look at the result first.\n::: {#sect9 .code-example} ::: iframe ::: :::\nCSS # This time, the HTML is unchanged, so let's dive right into the CSS.\n::: code-example [css]{.language-name}\ntable { border: 1px solid black; font: 16px \u0026#34;Open Sans\u0026#34;, Helvetica, Arial, sans-serif; } thead \u0026gt; tr { background-color: rgb(228, 240, 245); } th, td { border: 1px solid black; padding: 4px 6px; } :::\nWhile we add a font property to the \u0026lt;table\u0026gt; element here to set a more visually-appealing typeface (or an abominable sans-serif typeface, depending on your personal opinion), the interesting part is the second style here, where we style \u0026lt;tr\u0026gt; elements located within the \u0026lt;thead\u0026gt; so they have a light blue background color. This is a way to quickly apply a background color to all the cells in the heading area at once.\nThis does not affect the style of the \u0026lt;th\u0026gt; elements in the first column, though, where we treat the member names as a row heading. :::\nAdvanced styling # ::: section-content Now we'll go all-out, with styles on rows in the header and body areas both, including alternating row colors, cells with different colors depending on position within a row, and so forth.\nResult # Here's what the final table will look like:\n::: {#sect10 .code-example} ::: iframe ::: :::\nThere is no change to the HTML again. See what proper preparation of your HTML can do for you?\nCSS # The CSS is much more involved this time. It's not complicated, but there's a lot going on. Let's break it down.\nThe table and base styles # ::: code-example [css]{.language-name}\ntable { border: 1px solid black; font: 16px \u0026#34;Open Sans\u0026#34;, Helvetica, Arial, sans-serif; border-spacing: 0; border-collapse: collapse; } :::\nHere we've added the border-spacing and border-collapse properties to eliminate spacing between cells and collapse borders that touch one another to be a single border instead of winding up with double borders.\n::: code-example [css]{.language-name}\nth, td { border: 1px solid black; padding: 4px 6px; } th { vertical-align: bottom; } :::\nAnd here are the default styles for all table cells. Now let's customize!\nThe top header: overall # We're going to look at the top header in two pieces. First, the overall styling of the header:\n::: code-example [css]{.language-name}\nthead \u0026gt; tr { background-color: rgb(228, 240, 245); } thead \u0026gt; tr:nth-of-type(2) { border-bottom: 2px solid black; } :::\nThis sets the background color of all \u0026lt;tr\u0026gt; elements in the table's heading (as specified using \u0026lt;thead\u0026gt;). Then we set the bottom border of the top header to be a two-pixel wide line. Notice, however, that we're using the :nth-of-type selector to apply border-bottom to the second row in the heading. Why? Because the heading is made of two rows that are spanned by some of the cells. That means there are actually two rows there; applying the style to the first row would not give us the expected result.\nThe \u0026quot;Joined\u0026quot; and \u0026quot;Canceled\u0026quot; headers # Let's style these two header cells with green and red hues to represent the \u0026quot;good\u0026quot; of a new member and the \u0026quot;bummer\u0026quot; of a canceled membership.\n::: code-example [css]{.language-name}\nthead \u0026gt; tr:last-of-type \u0026gt; th:nth-of-type(1) { background-color: rgb(225, 255, 225); } thead \u0026gt; tr:last-of-type \u0026gt; th:nth-of-type(2) { background-color: rgb(255, 225, 225); } :::\nHere we dig into the last row of the table's header block and give the first header cell in it (the \u0026quot;Joined\u0026quot; header) a greenish color, and the second header cell in it (the \u0026quot;Canceled\u0026quot; header) a reddish hue.\nColor every body other row differently # It's common to help improve readability of table data by alternating row colors. Let's add a bit of color to every even row:\n::: code-example [css]{.language-name}\ntbody \u0026gt; tr:nth-of-type(even) { background-color: rgb(237, 238, 242); } :::\nGive the left-side header some style # Since we want the first column to stand out as well, we'll add some custom styling here, too.\n::: code-example [css]{.language-name}\ntbody \u0026gt; tr \u0026gt; th:first-of-type { text-align: left; background-color: rgb(225, 229, 244); } :::\nThis styles the first header cell in each row of the table's body with text-align to left-justify the member names, and with a somewhat different background color.\nJustify the balances # Finally, since it's standard practice to right-justify currency values in tables, let's do that here.\n::: code-example [css]{.language-name}\ntbody \u0026gt; tr \u0026gt; td:last-of-type { text-align: right; } :::\nThis just sets the CSS text-align property for the last \u0026lt;td\u0026gt; in each body row to \u0026quot;right\u0026quot;. :::\nTechnical summary # ::: section-content\nContent categories None Permitted content Zero or more \u0026lt;td\u0026gt; and/or \u0026lt;th\u0026gt; elements; script-supporting elements (\u0026lt;script\u0026gt; and \u0026lt;template\u0026gt;) are also allowed Tag omission Start tag is mandatory. End tag may be omitted if the \u0026lt;tr\u0026gt; element is immediately followed by a \u0026lt;tr\u0026gt; element, or if the row is the last element in its parent table group (\u0026lt;thead\u0026gt;, \u0026lt;tbody\u0026gt; or \u0026lt;tfoot\u0026gt;) element Permitted parents \u0026lt;table\u0026gt; (only if the table has no child \u0026lt;tbody\u0026gt; element, and even then only after any \u0026lt;caption\u0026gt;, \u0026lt;colgroup\u0026gt;, and \u0026lt;thead\u0026gt; elements); otherwise, the parent must be \u0026lt;thead\u0026gt;, \u0026lt;tbody\u0026gt; or \u0026lt;tfoot\u0026gt; Implicit ARIA role row Permitted ARIA roles Any DOM interface HTMLTableRowElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-tr-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet tr 1 12 1 Yes ≤12.1 1 4.4 18 4 ≤12.1 1 1.0 align 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 bgcolor 1 12 1 Yes ≤15 1 4.4 18 4 ≤14 1 1.0 char 1 12 No Yes 15 ≤4 4.4 18 No 14 ≤3.2 1.0 charoff 1 12 No Yes 15 ≤4 4.4 18 No 14 ≤3.2 1.0 valign 1 12 No Yes 15 3 4.4 18 No 14 2 1.0 :::\nSee also # ::: section-content\nLearning area: HTML tables: An introduction to using tables, including \u0026lt;tr\u0026gt;. HTMLTableRowElement: the interface on which \u0026lt;tr\u0026gt; is based. Other table-related elements: \u0026lt;table\u0026gt;, \u0026lt;thead\u0026gt;, \u0026lt;tbody\u0026gt;, \u0026lt;tfoot\u0026gt;, \u0026lt;td\u0026gt;, \u0026lt;th\u0026gt;, \u0026lt;caption\u0026gt;, \u0026lt;col\u0026gt;, and \u0026lt;colgroup\u0026gt; ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr{._attribution-link} :::\n"},{"id":202,"href":"/docs/references/languages/html/element/track/","title":"Track","section":"HTML","content":" \u0026lt;track\u0026gt;: The Embed Text Track element # ::: section-content The \u0026lt;track\u0026gt; HTML element is used as a child of the media elements, \u0026lt;audio\u0026gt; and \u0026lt;video\u0026gt;. It lets you specify timed text tracks (or time-based data), for example to automatically handle subtitles. The tracks are formatted in WebVTT format (.vtt files) \u0026mdash; Web Video Text Tracks. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;track\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Download the MP4 video, and subtitles. ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} video { width: 250px; }\nvideo::cue { font-size: 1rem; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nContent categories None Permitted content None; it is a void element. Tag omission As it is a void element, the start tag must be present and the end tag must not be present. Permitted parents A media element, \u0026lt;audio\u0026gt; or \u0026lt;video\u0026gt;.\nImplicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLTrackElement ::: Attributes # ::: section-content This element includes the global attributes.\ndefault This attribute indicates that the track should be enabled unless the user's preferences indicate that another track is more appropriate. This may only be used on one track element per media element.\nkind How the text track is meant to be used. If omitted the default kind is subtitles. If the attribute contains an invalid value, it will use metadata (Versions of Chrome earlier than 52 treated an invalid value as subtitles). The following keywords are allowed:\nsubtitles Subtitles provide translation of content that cannot be understood by the viewer. For example speech or text that is not English in an English language film. Subtitles may contain additional content, usually extra background information. For example the text at the beginning of the Star Wars films, or the date, time, and location of a scene. captions Closed captions provide a transcription and possibly a translation of audio. It may include important non-verbal information such as music cues or sound effects. It may indicate the cue's source (e.g. music, text, character). Suitable for users who are deaf or when the sound is muted. descriptions Textual description of the video content. Suitable for users who are blind or where the video cannot be seen. chapters Chapter titles are intended to be used when the user is navigating the media resource. metadata Tracks used by scripts. Not visible to the user. label A user-readable title of the text track which is used by the browser when listing available text tracks.\nsrc Address of the track (.vtt file). Must be a valid URL. This attribute must be specified and its URL value must have the same origin as the document \u0026mdash; unless the \u0026lt;audio\u0026gt; or \u0026lt;video\u0026gt; parent element of the track element has a crossorigin attribute.\nsrclang Language of the track text data. It must be a valid BCP 47{target=\u0026quot;_blank\u0026quot;} language tag. If the kind attribute is set to subtitles, then srclang must be defined. :::\nUsage notes # Track data types # ::: section-content The type of data that track adds to the media is set in the kind attribute, which can take values of subtitles, captions, descriptions, chapters or metadata. The element points to a source file containing timed text that the browser exposes when the user requests additional data.\nA media element cannot have more than one track with the same kind, srclang, and label. :::\nDetecting cue changes # ::: section-content The underlying TextTrack, indicated by the [track]{.page-not-created} property, receives a cuechange event every time the currently-presented cue is changed. This happens even if the track isn't associated with a media element.\nIf the track is associated with a media element, using the \u0026lt;track\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} element as a child of the \u0026lt;audio\u0026gt; or \u0026lt;video\u0026gt; element, the cuechange event is also sent to the HTMLTrackElement.\n::: code-example [js]{.language-name}\nlet textTrackElem = document.getElementById(\u0026#34;texttrack\u0026#34;); textTrackElem.addEventListener(\u0026#34;cuechange\u0026#34;, (event) =\u0026gt; { let cues = event.target.track.activeCues; }); ::: :::\nExamples # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;video controls poster=\u0026#34;/images/sample.gif\u0026#34;\u0026gt; \u0026lt;source src=\u0026#34;sample.mp4\u0026#34; type=\u0026#34;video/mp4\u0026#34; /\u0026gt; \u0026lt;source src=\u0026#34;sample.ogv\u0026#34; type=\u0026#34;video/ogv\u0026#34; /\u0026gt; \u0026lt;track kind=\u0026#34;captions\u0026#34; src=\u0026#34;sampleCaptions.vtt\u0026#34; srclang=\u0026#34;en\u0026#34; /\u0026gt; \u0026lt;track kind=\u0026#34;descriptions\u0026#34; src=\u0026#34;sampleDescriptions.vtt\u0026#34; srclang=\u0026#34;en\u0026#34; /\u0026gt; \u0026lt;track kind=\u0026#34;chapters\u0026#34; src=\u0026#34;sampleChapters.vtt\u0026#34; srclang=\u0026#34;en\u0026#34; /\u0026gt; \u0026lt;track kind=\u0026#34;subtitles\u0026#34; src=\u0026#34;sampleSubtitles_de.vtt\u0026#34; srclang=\u0026#34;de\u0026#34; /\u0026gt; \u0026lt;track kind=\u0026#34;subtitles\u0026#34; src=\u0026#34;sampleSubtitles_en.vtt\u0026#34; srclang=\u0026#34;en\u0026#34; /\u0026gt; \u0026lt;track kind=\u0026#34;subtitles\u0026#34; src=\u0026#34;sampleSubtitles_ja.vtt\u0026#34; srclang=\u0026#34;ja\u0026#34; /\u0026gt; \u0026lt;track kind=\u0026#34;subtitles\u0026#34; src=\u0026#34;sampleSubtitles_oz.vtt\u0026#34; srclang=\u0026#34;oz\u0026#34; /\u0026gt; \u0026lt;track kind=\u0026#34;metadata\u0026#34; src=\u0026#34;keyStage1.vtt\u0026#34; srclang=\u0026#34;en\u0026#34; label=\u0026#34;Key Stage 1\u0026#34; /\u0026gt; \u0026lt;track kind=\u0026#34;metadata\u0026#34; src=\u0026#34;keyStage2.vtt\u0026#34; srclang=\u0026#34;en\u0026#34; label=\u0026#34;Key Stage 2\u0026#34; /\u0026gt; \u0026lt;track kind=\u0026#34;metadata\u0026#34; src=\u0026#34;keyStage3.vtt\u0026#34; srclang=\u0026#34;en\u0026#34; label=\u0026#34;Key Stage 3\u0026#34; /\u0026gt; \u0026lt;!-- Fallback --\u0026gt; … \u0026lt;/video\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-track-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android track 23 12 31 10 12.1 6 4.4 25 31 12.1 6 1.5\nDoesn\\'t Doesn\\'t Doesn\\'t work for work for work for fullscreen fullscreen fullscreen video. video. video. default 23 12 31 10 12.1 6 4.4 25 31 12.1 6 1.5\nkind 23 12 31 10 12.1 6 4.4 25 31 14 6 1.5\nlabel 23 12 31 10 12.1 6 4.4 25 31 14 6 1.5\nsrc 23 12 31 10 12.1 6 4.4 25 31 14 6 1.5\nsrclang 23 12 31 10 12.1 6 4.4 25 31 14 6 1.5 # :::\nSee also # ::: section-content\nWebVTT text track format HTMLMediaElement.textTracks ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/track{._attribution-link} :::\n"},{"id":203,"href":"/docs/references/languages/html/element/tt/","title":"Tt","section":"HTML","content":" \u0026lt;tt\u0026gt;: The Teletype Text element # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\nThe \u0026lt;tt\u0026gt; HTML element creates inline text which is presented using the user agent's default monospace font face. This element was created for the purpose of rendering text as it would be displayed on a fixed-width display such as a teletype, text-only screen, or line printer.\nThe terms non-proportional, monotype, and monospace are used interchangeably and have the same general meaning: they describe a typeface whose characters are all the same number of pixels wide.\nThis element is obsolete, however. You should use the more semantically helpful \u0026lt;code\u0026gt;, \u0026lt;kbd\u0026gt;, \u0026lt;samp\u0026gt;, or \u0026lt;var\u0026gt; elements for inline text that needs to be presented in monospace type, or the \u0026lt;pre\u0026gt; tag for content that should be presented as a separate block.\n::: {#sect2 .notecard .note} Note: If none of the semantic elements are appropriate for your use case (for example, if you need to show some content in a non-proportional font), you should consider using the \u0026lt;span\u0026gt; element, styling it as desired using CSS. The font-family property is a good place to start. ::: :::\nAttributes # ::: section-content This element only includes the global attributes :::\nExamples # Basic example # ::: section-content This example uses \u0026lt;tt\u0026gt; to show text entered into, and output by, a terminal application.\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; Enter the following at the telnet command prompt: \u0026lt;code\u0026gt;set localecho\u0026lt;/code\u0026gt;\u0026lt;br /\u0026gt; The telnet client should display: \u0026lt;tt\u0026gt;Local Echo is on\u0026lt;/tt\u0026gt; \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nOverriding the default font # ::: section-content You can override the browser's default font\u0026mdash;if the browser permits you to do so, which it isn't required to do\u0026mdash;using CSS:\nCSS # ::: code-example [css]{.language-name}\ntt { font-family: \u0026#34;Lucida Console\u0026#34;, \u0026#34;Menlo\u0026#34;, \u0026#34;Monaco\u0026#34;, \u0026#34;Courier\u0026#34;, monospace; } :::\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; Enter the following at the telnet command prompt: \u0026lt;code\u0026gt;set localecho\u0026lt;/code\u0026gt;\u0026lt;br /\u0026gt; The telnet client should display: \u0026lt;tt\u0026gt;Local Echo is on\u0026lt;/tt\u0026gt; \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: ::: :::\nUsage notes # ::: section-content The \u0026lt;tt\u0026gt; element is, by default, rendered using the browser's default non-proportional font. You can override this using CSS by creating a rule using the tt selector, as seen in the example Overriding the default font above.\n::: {#sect5 .notecard .note} Note: User-configured changes to the default monospace font setting may take precedence over your CSS. :::\nAlthough this element wasn't officially deprecated in HTML 4.01, its use was discouraged in favor of the semantic elements and/or CSS. The \u0026lt;tt\u0026gt; element is obsolete in HTML 5. :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# tt]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari Samsung Explorer Android Android Android on IOS Internet tt 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nBefore Firefox 4, Before Firefox 4, this element this element implemented the implemented the `HTMLSpanElement` `HTMLSpanElement` interface instead interface instead of the standard of the standard `HTMLElement` `HTMLElement` interface. interface. :::\nSee also # ::: section-content\nThe semantic \u0026lt;code\u0026gt;, \u0026lt;var\u0026gt;, \u0026lt;kbd\u0026gt;, and \u0026lt;samp\u0026gt; elements The \u0026lt;pre\u0026gt; element for displaying preformatted text blocks ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt{._attribution-link} :::\n"},{"id":204,"href":"/docs/references/languages/html/element/u/","title":"U","section":"HTML","content":" \u0026lt;u\u0026gt;: The Unarticulated Annotation (Underline) element # ::: section-content The \u0026lt;u\u0026gt; HTML element represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a simple solid underline, but may be altered using CSS.\n::: {#sect1 .notecard .warning} Warning: This element used to be called the \u0026quot;Underline\u0026quot; element in older versions of HTML, and is still sometimes misused in this way. To underline text, you should instead apply a style that includes the CSS text-decoration property set to underline. ::: :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;u\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} You could use this element to highlight speling mistakes, so the writer can corect them.\n::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p { margin: 0; }\nu { text-decoration: #f00 wavy underline; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nSee the Usage notes section for further details on when it's appropriate to use \u0026lt;u\u0026gt; and when it isn't. :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # ::: section-content Along with other pure styling elements, the original HTML Underline (\u0026lt;u\u0026gt;) element was deprecated in HTML 4; however, \u0026lt;u\u0026gt; was restored in HTML 5 with a new, semantic, meaning: to mark text as having some form of non-textual annotation applied.\n::: {#sect2 .notecard .note} Note: Avoid using the \u0026lt;u\u0026gt; element with its default styling (of underlined text) in such a way as to be confused with a hyperlink, which is also underlined by default. ::: :::\nUse cases # ::: section-content Valid use cases for the \u0026lt;u\u0026gt; element include annotating spelling errors, applying a proper name mark{target=\u0026quot;_blank\u0026quot;} to denote proper names in Chinese text, and other forms of annotation.\nYou should not use \u0026lt;u\u0026gt; to underline text for presentation purposes, or to denote titles of books. :::\nOther elements to consider using # ::: section-content In most cases, you should use an element other than \u0026lt;u\u0026gt;, such as:\n\u0026lt;em\u0026gt; to denote stress emphasis \u0026lt;b\u0026gt; to draw attention to text \u0026lt;mark\u0026gt; to mark key words or phrases \u0026lt;strong\u0026gt; to indicate that text has strong importance \u0026lt;cite\u0026gt; to mark the titles of books or other publications \u0026lt;i\u0026gt; to denote technical terms, transliterations, thoughts, or names of vessels in Western texts To provide textual annotations (as opposed to the non-textual annotations created with \u0026lt;u\u0026gt;), use the \u0026lt;ruby\u0026gt; element.\nTo apply an underlined appearance without any semantic meaning, use the text-decoration property's value underline. :::\nExamples # Indicating a spelling error # ::: section-content This example uses the \u0026lt;u\u0026gt; element and some CSS to display a paragraph which includes a misspelled error, with the error indicated in the red wavy underline style which is fairly commonly used for this purpose.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;This paragraph includes a \u0026lt;u class=\u0026#34;spelling\u0026#34;\u0026gt;wrnogly\u0026lt;/u\u0026gt; spelled word.\u0026lt;/p\u0026gt; :::\nIn the HTML, we see the use of \u0026lt;u\u0026gt; with a class, spelling, which is used to indicate the misspelling of the word \u0026quot;wrongly\u0026quot;.\nCSS # ::: code-example [css]{.language-name}\nu.spelling { text-decoration: red wavy underline; } :::\nThis CSS indicates that when the \u0026lt;u\u0026gt; element is styled with the class spelling, it should have a red wavy underline underneath its text. This is a common styling for spelling errors. Another common style can be presented using red dashed underline.\nResult # The result should be familiar to anyone who has used any of the more popular word processors available today.\n::: {#sect3 .code-example} ::: iframe ::: ::: :::\nAvoiding \u0026lt;u\u0026gt; # ::: section-content Most of the time, you actually don't want to use \u0026lt;u\u0026gt;. Here are some examples that show what you should do instead in several cases.\nNon-semantic underlines # To underline text without implying any semantic meaning, use a \u0026lt;span\u0026gt; element with the text-decoration property set to \u0026quot;underline\u0026quot;, as shown below.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;span class=\u0026#34;underline\u0026#34;\u0026gt;Today\u0026#39;s Special\u0026lt;/span\u0026gt; \u0026lt;br /\u0026gt; Chicken Noodle Soup With Carrots :::\nCSS # ::: code-example [css]{.language-name}\n.underline { text-decoration: underline; } :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: :::\nPresenting a book title # Book titles should be presented using the \u0026lt;cite\u0026gt; element instead of \u0026lt;u\u0026gt; or even \u0026lt;i\u0026gt;.\nUsing the cite element # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;The class read \u0026lt;cite\u0026gt;Moby Dick\u0026lt;/cite\u0026gt; in the first term.\u0026lt;/p\u0026gt; :::\n::: {#sect5 .code-example} ::: iframe ::: :::\nStyling the cite element # The default styling for the \u0026lt;cite\u0026gt; element renders the text in italics. You can override that using CSS:\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;The class read \u0026lt;cite\u0026gt;Moby Dick\u0026lt;/cite\u0026gt; in the first term.\u0026lt;/p\u0026gt; :::\n::: code-example [css]{.language-name}\ncite { font-style: normal; text-decoration: underline; } :::\n::: {#sect6 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role generic Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-u-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox Opera Safari Samsung Explorer Android Android for Android on IOS Internet Android u 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nBefore Firefox 4, this element implemented the `HTMLSpanElement` interface instead of the standard `HTMLElement` interface. :::\nSee also # ::: section-content\nThe \u0026lt;span\u0026gt;, \u0026lt;i\u0026gt;, \u0026lt;em\u0026gt;, \u0026lt;b\u0026gt;, and \u0026lt;cite\u0026gt; elements should usually be used instead. The CSS text-decoration property should be used for non-semantic underlining. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/u{._attribution-link} :::\n"},{"id":205,"href":"/docs/references/languages/html/element/ul/","title":"Ul","section":"HTML","content":" \u0026lt;ul\u0026gt;: The Unordered List element # ::: section-content The \u0026lt;ul\u0026gt; HTML element represents an unordered list of items, typically rendered as a bulleted list. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;ul\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Milk Cheese Blue cheese Feta ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} li { list-style-type: circle; }\nli li { list-style-type: square; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element includes the global attributes.\ncompact [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent, and it doesn't work in all browsers.\n::: {#sect1 .notecard .warning} Warning: Do not use this attribute, as it has been deprecated: use CSS instead. To give a similar effect as the compact attribute, the CSS property line-height can be used with a value of 80%. :::\ntype [Deprecated]{.visually-hidden} [Non-standard]{.visually-hidden} This attribute sets the bullet style for the list. The values defined under HTML3.2 and the transitional version of HTML 4.0/4.01 are:\ncircle disc square A fourth bullet type has been defined in the WebTV interface, but not all browsers support it: triangle.\nIf not present and if no CSS list-style-type property applies to the element, the user agent selects a bullet type depending on the nesting level of the list.\n::: {#sect2 .notecard .warning} Warning: Do not use this attribute, as it has been deprecated; use the CSS list-style-type property instead. ::: :::\nUsage notes # ::: section-content\nThe \u0026lt;ul\u0026gt; element is for grouping a collection of items that do not have a numerical ordering, and their order in the list is meaningless. Typically, unordered-list items are displayed with a bullet, which can be of several forms, like a dot, a circle, or a square. The bullet style is not defined in the HTML description of the page, but in its associated CSS, using the list-style-type property. The \u0026lt;ul\u0026gt; and \u0026lt;ol\u0026gt; elements may be nested as deeply as desired. Moreover, the nested lists may alternate between \u0026lt;ol\u0026gt; and \u0026lt;ul\u0026gt; without restriction. The \u0026lt;ol\u0026gt; and \u0026lt;ul\u0026gt; elements both represent a list of items. They differ in that, with the \u0026lt;ol\u0026gt; element, the order is meaningful. To determine which one to use, try changing the order of the list items; if the meaning is changed, the \u0026lt;ol\u0026gt; element should be used, otherwise you can use \u0026lt;ul\u0026gt;. ::: Examples # Simple example # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;first item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;third item\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nNesting a list # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;first item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; second item \u0026lt;!-- Look, the closing \u0026lt;/li\u0026gt; tag is not placed here! --\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;second item first subitem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; second item second subitem \u0026lt;!-- Same for the second nested unordered list! --\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;second item second subitem first sub-subitem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second item second subitem second sub-subitem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second item second subitem third sub-subitem\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- Closing \u0026lt;/li\u0026gt; tag for the li that contains the third unordered list --\u0026gt; \u0026lt;li\u0026gt;second item third subitem\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;!-- Here is the closing \u0026lt;/li\u0026gt; tag --\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;third item\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: ::: :::\nOrdered list inside unordered list # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;first item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; second item \u0026lt;!-- Look, the closing \u0026lt;/li\u0026gt; tag is not placed here! --\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;second item first subitem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second item second subitem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second item third subitem\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;!-- Here is the closing \u0026lt;/li\u0026gt; tag --\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;third item\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; :::\nResult # ::: {#sect5 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, and if the \u0026lt;ul\u0026gt; element's children include at least one \u0026lt;li\u0026gt; element, palpable content. Permitted content Zero or more \u0026lt;li\u0026gt;, \u0026lt;script\u0026gt; and \u0026lt;template\u0026gt; elements. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content. Implicit ARIA role list Permitted ARIA roles directory, group, listbox, menu, menubar, none, presentation, radiogroup, tablist, toolbar, tree DOM Interface HTMLUListElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-ul-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet ul 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 compact 1 12 1 Yes 15 3 4.4 18 4 14 2 1.0 type 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nOther list-related HTML Elements: \u0026lt;ol\u0026gt;, \u0026lt;li\u0026gt;, \u0026lt;menu\u0026gt; CSS properties that may be specially useful to style the \u0026lt;ul\u0026gt; element: the list-style property, to choose the way the ordinal displays. CSS counters, to handle complex nested lists. the line-height property, to simulate the deprecated compact attribute. the margin property, to control the list indentation. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul{._attribution-link} :::\n"},{"id":206,"href":"/docs/references/languages/html/element/var/","title":"Var","section":"HTML","content":" \u0026lt;var\u0026gt;: The Variable element # ::: section-content The \u0026lt;var\u0026gt; HTML element represents the name of a variable in a mathematical expression or a programming context. It's typically presented using an italicized version of the current typeface, although that behavior is browser-dependent. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;var\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} The volume of a box is l × w × h, where l represents the length, w the width and h the height of the box. ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} var { font-weight: bold; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nUsage notes # Related elements # ::: section-content Other elements that are used in contexts in which \u0026lt;var\u0026gt; is commonly used include:\n\u0026lt;code\u0026gt;: The HTML Code element \u0026lt;kbd\u0026gt;: The HTML Keyboard input element \u0026lt;samp\u0026gt;: The HTML Sample Output element If you encounter code that is mistakenly using \u0026lt;var\u0026gt; for style purposes rather than semantic purposes, you should either use a \u0026lt;span\u0026gt; with appropriate CSS or, an appropriate semantic element among the following:\n\u0026lt;em\u0026gt; \u0026lt;i\u0026gt; \u0026lt;q\u0026gt; ::: Default style # ::: section-content Most browsers apply font-style to \u0026quot;italic\u0026quot; when rendering \u0026lt;var\u0026gt;. This can be overridden in CSS, like this:\n::: code-example [css]{.language-name}\nvar { font-style: normal; } ::: :::\nExamples # Basic example # ::: section-content Here's a simple example, using \u0026lt;var\u0026gt; to denote variable names in a mathematical equation.\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt;A simple equation: \u0026lt;var\u0026gt;x\u0026lt;/var\u0026gt; = \u0026lt;var\u0026gt;y\u0026lt;/var\u0026gt; + 2\u0026lt;/p\u0026gt; :::\nResult # ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nOverriding the default style # ::: section-content Using CSS, you can override the default style for the \u0026lt;var\u0026gt; element. In this example, variable names are rendered using bold Courier if it's available, otherwise it falls back to the default monospace font.\nCSS # ::: code-example [css]{.language-name}\nvar { font: bold 15px \u0026#34;Courier\u0026#34;, \u0026#34;Courier New\u0026#34;, monospace; } :::\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; The variables \u0026lt;var\u0026gt;minSpeed\u0026lt;/var\u0026gt; and \u0026lt;var\u0026gt;maxSpeed\u0026lt;/var\u0026gt; control the minimum and maximum speed of the apparatus in revolutions per minute (RPM). \u0026lt;/p\u0026gt; :::\nThis HTML uses \u0026lt;var\u0026gt; to enclose the names of two variables.\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content, palpable content. Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts phrasing content. Implicit ARIA role No corresponding role Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-var-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet var 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/var{._attribution-link} :::\n"},{"id":207,"href":"/docs/references/languages/html/element/video/","title":"Video","section":"HTML","content":" \u0026lt;video\u0026gt;: The Video Embed element # ::: section-content The \u0026lt;video\u0026gt; HTML element embeds a media player which supports video playback into the document. You can use \u0026lt;video\u0026gt; for audio content as well, but the \u0026lt;audio\u0026gt; element may provide a more appropriate user experience. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;video\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} \u0026lt;source src=\u0026quot;/media/cc0-videos/flower.mp4\u0026quot; type=\u0026quot;video/mp4\u0026quot; /\u0026gt; Download the \u0026lt;a href=\u0026quot;/media/cc0-videos/flower.webm\u0026quot;\u0026gt;WEBM\u0026lt;/a\u0026gt; or \u0026lt;a href=\u0026quot;/media/cc0-videos/flower.mp4\u0026quot;\u0026gt;MP4\u0026lt;/a\u0026gt; video. \u0026lt;/video\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe above example shows simple usage of the \u0026lt;video\u0026gt; element. In a similar manner to the \u0026lt;img\u0026gt; element, we include a path to the media we want to display inside the src attribute; we can include other attributes to specify information such as video width and height, whether we want it to autoplay and loop, whether we want to show the browser's default video controls, etc.\nThe content inside the opening and closing \u0026lt;video\u0026gt;\u0026lt;/video\u0026gt; tags is shown as a fallback in browsers that don't support the element. :::\nAttributes # ::: section-content Like all other HTML elements, this element supports the global attributes.\nautoplay A Boolean attribute; if specified, the video automatically begins to play back as soon as it can do so without stopping to finish loading the data.\n::: {#sect1 .notecard .note} Note: Sites that automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control. See our autoplay guide for additional information about how to properly use autoplay. :::\nTo disable video autoplay, autoplay=\u0026quot;false\u0026quot; will not work; the video will autoplay if the attribute is there in the \u0026lt;video\u0026gt; tag at all. To remove autoplay, the attribute needs to be removed altogether.\nIn some browsers (e.g. Chrome 70.0) autoplay doesn't work if no muted attribute is present.\ncontrols If this attribute is present, the browser will offer controls to allow the user to control video playback, including volume, seeking, and pause/resume playback.\ncontrolslist [Experimental]{.visually-hidden} [Non-standard]{.visually-hidden} The controlslist{target=\u0026quot;_blank\u0026quot;} attribute, when specified, helps the browser select what controls to show for the video element whenever the browser shows its own set of controls (that is, when the controls attribute is specified).\nThe allowed values are nodownload, nofullscreen and noremoteplayback.\nUse the disablepictureinpicture attribute if you want to disable the Picture-In-Picture mode (and the control).\ncrossorigin This enumerated attribute indicates whether to use CORS to fetch the related video. CORS-enabled resources can be reused in the \u0026lt;canvas\u0026gt; element without being tainted. The allowed values are:\nanonymous Sends a cross-origin request without a credential. In other words, it sends the Origin: HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin: HTTP header), the resource will be tainted, and its usage restricted.\nuse-credentials Sends a cross-origin request with a credential. In other words, it sends the Origin: HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials: HTTP header), the resource will be tainted and its usage restricted.\nWhen not present, the resource is fetched without a CORS request (i.e. without sending the Origin: HTTP header), preventing its non-tainted use in \u0026lt;canvas\u0026gt; elements. If invalid, it is handled as if the enumerated keyword anonymous was used. See CORS settings attributes for additional information.\ndisablepictureinpicture [Experimental]{.visually-hidden} Prevents the browser from suggesting a Picture-in-Picture context menu or to request Picture-in-Picture automatically in some cases.\ndisableremoteplayback [Experimental]{.visually-hidden} A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.).\nIn Safari, you can use x-webkit-airplay=\u0026quot;deny\u0026quot;{target=\u0026quot;_blank\u0026quot;} as a fallback.\nheight The height of the video's display area, in CSS pixels{target=\u0026quot;_blank\u0026quot;} (absolute values only; no percentages{target=\u0026quot;_blank\u0026quot;}).\nloop A Boolean attribute; if specified, the browser will automatically seek back to the start upon reaching the end of the video.\nmuted A Boolean attribute that indicates the default setting of the audio contained in the video. If set, the audio will be initially silenced. Its default value is false, meaning that the audio will be played when the video is played.\nplaysinline A Boolean attribute indicating that the video is to be played \u0026quot;inline\u0026quot;, that is within the element's playback area. Note that the absence of this attribute does not imply that the video will always be played in fullscreen.\nposter A URL for an image to be shown while the video is downloading. If this attribute isn't specified, nothing is displayed until the first frame is available, then the first frame is shown as the poster frame.\npreload This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience regarding what content is loaded before the video is played. It may have one of the following values:\nnone: Indicates that the video should not be preloaded. metadata: Indicates that only video metadata (e.g. length) is fetched. auto: Indicates that the whole video file can be downloaded, even if the user is not expected to use it. empty string: Synonym of the auto value. The default value is different for each browser. The spec advises it to be set to metadata.\n::: {#sect2 .notecard .note} Note:\nThe autoplay attribute has precedence over preload. If autoplay is specified, the browser would obviously need to start downloading the video for playback. The specification does not force the browser to follow the value of this attribute; it is a mere hint. ::: src The URL of the video to embed. This is optional; you may instead use the \u0026lt;source\u0026gt; element within the video block to specify the video to embed.\nwidth The width of the video's display area, in CSS pixels{target=\u0026quot;_blank\u0026quot;} (absolute values only; no percentages{target=\u0026quot;_blank\u0026quot;}). :::\nEvents # ::: section-content\nEvent Name Fired When audioprocess Deprecated The input buffer of a ScriptProcessorNode is ready to be processed. canplay The browser can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content. canplaythrough The browser estimates it can play the media up to its end without stopping for content buffering. complete The rendering of an OfflineAudioContext is terminated. durationchange The duration attribute has been updated. emptied The media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the load() method is called to reload it. ended Playback has stopped because the end of the media was reached. error An error occurred while fetching the media data, or the type of the resource is not a supported media format. loadeddata The first frame of the media has finished loading. loadedmetadata The metadata has been loaded. loadstart Fired when the browser has started to load the resource. pause Playback has been paused. play Playback has begun. playing Playback is ready to start after having been paused or delayed due to lack of data. progress Fired periodically as the browser loads a resource. ratechange The playback rate has changed. seeked A seek operation completed. seeking A seek operation began. stalled The user agent is trying to fetch media data, but data is unexpectedly not forthcoming. suspend Media data loading has been suspended. timeupdate The time indicated by the currentTime attribute has been updated. volumechange The volume has changed. waiting Playback has stopped because of a temporary lack of data. ::: Usage notes # ::: section-content Browsers don't all support the same video formats; you can provide multiple sources inside nested \u0026lt;source\u0026gt; elements, and the browser will then use the first one it understands.\n::: code-example [html]{.language-name}\n\u0026lt;video controls\u0026gt; \u0026lt;source src=\u0026#34;myVideo.webm\u0026#34; type=\u0026#34;video/webm\u0026#34; /\u0026gt; \u0026lt;source src=\u0026#34;myVideo.mp4\u0026#34; type=\u0026#34;video/mp4\u0026#34; /\u0026gt; \u0026lt;p\u0026gt; Your browser doesn\u0026#39;t support HTML video. Here is a \u0026lt;a href=\u0026#34;myVideo.mp4\u0026#34;\u0026gt;link to the video\u0026lt;/a\u0026gt; instead. \u0026lt;/p\u0026gt; \u0026lt;/video\u0026gt; :::\nWe offer a substantive and thorough guide to media file types and the guide to the codecs supported for video. Also available is a guide to audio codecs that can be used with them.\nOther usage notes:\nIf you don't specify the controls attribute, the video won't include the browser's default controls; you can create your own custom controls using JavaScript and the HTMLMediaElement API. See Creating a cross-browser video player for more details. To allow precise control over your video (and audio) content, HTMLMediaElements fire many different events. In addition to providing controllability, these events let you monitor the progress of both download and playback of the media, as well as the playback state and position. You can use the object-position property to adjust the positioning of the video within the element's frame, and the object-fit property to control how the video's size is adjusted to fit within the frame. To show subtitles/captions along with your video, you can use some JavaScript along with the \u0026lt;track\u0026gt; element and the WebVTT format. See Adding captions and subtitles to HTML video for more information. You can play audio files using a \u0026lt;video\u0026gt; element. This can be useful if, for example, you need to perform audio with a WebVTT transcript, since the \u0026lt;audio\u0026gt; element doesn't allow captions using WebVTT. To test the fallback content on browsers that support the element, you can replace \u0026lt;video\u0026gt; with a non-existing element like \u0026lt;notavideo\u0026gt;. A good general source of information on using HTML \u0026lt;video\u0026gt; is the Video and audio content beginner's tutorial. :::\nStyling with CSS # ::: section-content The \u0026lt;video\u0026gt; element is a replaced element \u0026mdash; its display value is inline by default, but its default width and height in the viewport is defined by the video being embedded.\nThere are no special considerations for styling \u0026lt;video\u0026gt;; a common strategy is to give it a display value of block to make it easier to position, size, etc., and then provide styling and layout information as required. Video player styling basics provides some useful styling techniques. :::\nDetecting track addition and removal # ::: section-content You can detect when tracks are added to and removed from a \u0026lt;video\u0026gt; element using the addtrack and removetrack events. However, these events aren't sent directly to the \u0026lt;video\u0026gt; element itself. Instead, they're sent to the track list object within the \u0026lt;video\u0026gt; element's HTMLMediaElement that corresponds to the type of track that was added to the element:\nHTMLMediaElement.audioTracks An AudioTrackList containing all of the media element's audio tracks. You can add a listener for addtrack to this object to be alerted when new audio tracks are added to the element.\nHTMLMediaElement.videoTracks Add an addtrack listener to this VideoTrackList object to be informed when video tracks are added to the element.\nHTMLMediaElement.textTracks Add an addtrack event listener to this TextTrackList to be notified when new text tracks are added to the element.\nFor example, to detect when audio tracks are added to or removed from a \u0026lt;video\u0026gt; element, you can use code like this:\n::: code-example [js]{.language-name}\nconst elem = document.querySelector(\u0026#34;video\u0026#34;); elem.audioTracks.onaddtrack = (event) =\u0026gt; { trackEditor.addTrack(event.track); }; elem.audioTracks.onremovetrack = (event) =\u0026gt; { trackEditor.removeTrack(event.track); }; :::\nThis code watches for audio tracks to be added to and removed from the element, and calls a hypothetical function on a track editor to register and remove the track from the editor's list of available tracks.\nYou can also use addEventListener() to listen for the addtrack and removetrack events. :::\nServer support for video # ::: section-content If the MIME type for the video is not set correctly on the server, the video may not show or show a gray box containing an X (if JavaScript is enabled).\nIf you use Apache Web Server to serve Ogg Theora videos, you can fix this problem by adding the video file type extensions to \u0026quot;video/ogg\u0026quot; MIME type. The most common video file type extensions are \u0026quot;.ogm\u0026quot;, \u0026quot;.ogv\u0026quot;, or \u0026quot;.ogg\u0026quot;. To do this, edit the \u0026quot;mime.types\u0026quot; file in \u0026quot;/etc/apache\u0026quot; or use the \u0026quot;AddType\u0026quot; configuration directive in httpd.conf.\nAddType video/ogg .ogm AddType video/ogg .ogv AddType video/ogg .ogg If you serve your videos as WebM, you can fix this problem for the Apache Web Server by adding the extension used by your video files (\u0026quot;.webm\u0026quot; is the most common one) to the MIME type \u0026quot;video/webm\u0026quot; via the \u0026quot;mime.types\u0026quot; file in \u0026quot;/etc/apache\u0026quot; or via the \u0026quot;AddType\u0026quot; configuration directive in httpd.conf.\nAddType video/webm .webm Your web host may provide an easy interface to MIME type configuration changes for new technologies until a global update naturally occurs. :::\nExamples # Single source # ::: section-content This example plays a video when activated, providing the user with the browser's default video controls to control playback.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;!-- Simple video example --\u0026gt; \u0026lt;!-- \u0026#39;Big Buck Bunny\u0026#39; licensed under CC 3.0 by the Blender foundation. Hosted by archive.org --\u0026gt; \u0026lt;!-- Poster from peach.blender.org --\u0026gt; \u0026lt;video controls src=\u0026#34;https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4\u0026#34; poster=\u0026#34;https://peach.blender.org/wp-content/uploads/title_anouncement.jpg?x11217\u0026#34; width=\u0026#34;620\u0026#34;\u0026gt; Sorry, your browser doesn\u0026#39;t support embedded videos, but don\u0026#39;t worry, you can \u0026lt;a href=\u0026#34;https://archive.org/details/BigBuckBunny_124\u0026#34;\u0026gt;download it\u0026lt;/a\u0026gt; and watch it with your favorite video player! \u0026lt;/video\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: :::\nUntil the video starts playing, the image provided in the poster attribute is displayed in its place. If the browser doesn't support video playback, the fallback text is displayed. :::\nMultiple sources # ::: section-content This example builds on the last one, offering three different sources for the media; this allows the video to be watched regardless of which video codecs are supported by the browser.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;!-- Using multiple sources as fallbacks for a video tag --\u0026gt; \u0026lt;!-- \u0026#39;Elephants Dream\u0026#39; by Orange Open Movie Project Studio, licensed under CC-3.0, hosted by archive.org --\u0026gt; \u0026lt;!-- Poster hosted by Wikimedia --\u0026gt; \u0026lt;video width=\u0026#34;620\u0026#34; controls poster=\u0026#34;https://upload.wikimedia.org/wikipedia/commons/e/e8/Elephants_Dream_s5_both.jpg\u0026#34;\u0026gt; \u0026lt;source src=\u0026#34;https://archive.org/download/ElephantsDream/ed_hd.ogv\u0026#34; type=\u0026#34;video/ogg\u0026#34; /\u0026gt; \u0026lt;source src=\u0026#34;https://archive.org/download/ElephantsDream/ed_hd.avi\u0026#34; type=\u0026#34;video/avi\u0026#34; /\u0026gt; \u0026lt;source src=\u0026#34;https://archive.org/download/ElephantsDream/ed_1024_512kb.mp4\u0026#34; type=\u0026#34;video/mp4\u0026#34; /\u0026gt; Sorry, your browser doesn\u0026#39;t support embedded videos, but don\u0026#39;t worry, you can \u0026lt;a href=\u0026#34;https://archive.org/download/ElephantsDream/ed_1024_512kb.mp4\u0026#34;\u0026gt; download the MP4 \u0026lt;/a\u0026gt; and watch it with your favorite video player! \u0026lt;/video\u0026gt; :::\nResult # ::: {#sect4 .code-example} ::: iframe ::: :::\nFirst Ogg is tried. If that can't be played, then AVI is tried. Finally, MP4 is tried. A fallback message is displayed if the video element isn't supported, but not if all sources fail.\nSome media file types let you provide more specific information using the codecs parameter as part of the file's type string. A relatively simple example is video/webm; codecs=\u0026quot;vp8, vorbis\u0026quot;, which says that the file is a WebM video using VP8 for its video and Vorbis for audio. :::\nAccessibility concerns # ::: section-content Videos should provide both captions and transcripts that accurately describe its content (see Adding captions and subtitles to HTML video for more information on how to implement these). Captions allow people who are experiencing hearing loss to understand a video's audio content as the video is being played, while transcripts allow people who need additional time to be able to review audio content at a pace and format that is comfortable for them.\nIt's worth noting that while you can caption audio-only media, you can only do so when playing audio in a \u0026lt;video\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} element, since the video region of the element is used to present the captions. This is one of the special scenarios in which it's useful to play audio in a video element.\nIf automatic captioning services are used, it is important to review the generated content to ensure it accurately represents the source video.\nIn addition to spoken dialog, subtitles and transcripts should also identify music and sound effects that communicate important information. This includes emotion and tone:\n14 00:03:14 --\u0026gt; 00:03:18 [Dramatic rock music] 15 00:03:19 --\u0026gt; 00:03:21 [whispering] What\u0026#39;s that off in the distance? 16 00:03:22 --\u0026gt; 00:03:24 It\u0026#39;s… it\u0026#39;s a… 16 00:03:25 --\u0026gt; 00:03:32 [Loud thumping] [Dishes clattering] Captions should not obstruct the main subject of the video. They can be positioned using the align VTT cue setting.\nWeb Video Text Tracks Format (WebVTT) WebAIM: Captions, Transcripts, and Audio Descriptions{target=\u0026quot;_blank\u0026quot;} MDN Understanding WCAG, Guideline 1.2 explanations Understanding Success Criterion 1.2.1 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} Understanding Success Criterion 1.2.2 | W3C Understanding WCAG 2.0{target=\u0026quot;_blank\u0026quot;} ::: Technical summary # ::: section-content\nContent categories Flow content, phrasing content, embedded content. If it has a controls attribute: interactive content and palpable content. Permitted content If the element has a src attribute: zero or more \u0026lt;track\u0026gt; elements, followed by transparent content that contains no media elements–that is no \u0026lt;audio\u0026gt; or \u0026lt;video\u0026gt;.\nElse: zero or more \u0026lt;source\u0026gt; elements, followed by zero or more \u0026lt;track\u0026gt; elements, followed by transparent content that contains no media elements–that is no \u0026lt;audio\u0026gt; or \u0026lt;video\u0026gt;.\nTag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts embedded content. Implicit ARIA role No corresponding role Permitted ARIA roles application DOM interface HTMLVideoElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-video-element]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari on IOS Samsung Explorer Android Android Android Internet video 3 12 3.5 9 10.5 3.1 4.4 18 4 14 3 1.0\naspect_ratio_computed_from_attributes 79 79 71 No 66 14 79 79 79 57 14 12.0\nautoplay 3 12 3.5 9 10.5 3.1 4.4 18 4 14 10 1.0\nOnly available for videos that have [no sound or have the audio track disabled](https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html). controls 3 12 3.5 9 10.5 3.1 4.4 18 4 14 3 1.0\ncrossorigin 33 ≤18 74 No 20 10 4.4.3 33 79 20 10 2.0\n12--74 14--79 With `crossorigin=\u0026quot;use-credentials\u0026quot;`, With `crossorigin=\u0026quot;use-credentials\u0026quot;`, cookies aren\\'t sent during seek. See cookies aren\\'t sent during seek. See [bug [bug 1532722](https://bugzil.la/1532722). 1532722](https://bugzil.la/1532722). height 3 12 3.5 9 10.5 3.1 4.4 18 4 14 3 1.0\nloop 3 12 11 9 10.5 3.1 4.4 18 14 14 6 1.0\nmuted 30 12 11 10 Yes 5 4.4 30 14 18 No 2.0\nposter 3 12 3.6 9 10.5 3.1 4.4 18 4 14 3 1.0\npreload 3 12 4 9 Yes 3.1 Yes Yes 4 Yes 3 Yes\nDefaults to Defaults to Defaults to Defaults to Defaults to Defaults to `metadata` `metadata` `metadata` `metadata` `metadata` `metadata` in Chrome in Opera 51. in Chrome in Chrome in Opera 51. in Samsung 64. 64. 64. Internet 9.0. src 3 12 3.5 9 10.5 3.1 4.4 18 4 14 3 1.0\nwidth 3 12 3.5 9 10.5 3.1 4.4 18 4 14 3 1.0 # :::\nSee also # ::: section-content\nGuide to media types and formats on the web Media container formats (file types) Web video codec guide Web audio codec guide Positioning and sizing the picture within its frame: object-position and object-fit \u0026lt;audio\u0026gt; Using HTML audio and video Manipulating video using canvas Configuring servers for Ogg media ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video{._attribution-link} :::\n"},{"id":208,"href":"/docs/references/languages/html/element/wbr/","title":"Wbr","section":"HTML","content":" \u0026lt;wbr\u0026gt;: The Line Break Opportunity element # ::: section-content The \u0026lt;wbr\u0026gt; HTML element represents a word break opportunity\u0026mdash;a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: \u0026lt;wbr\u0026gt; # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Fernstraßenbauprivatfinanzierungsgesetz\nFernstraßenbauprivatfinanzierungsgesetz\nFernstraßen­bau­privat­finanzierungs­gesetz\n::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} #example-paragraphs { background-color: white; overflow: hidden; resize: horizontal; width: 9rem; border: 2px dashed #999; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nAttributes # ::: section-content This element only includes the global attributes. :::\nNotes # ::: section-content On UTF-8 encoded pages, \u0026lt;wbr\u0026gt; behaves like the U+200B ZERO-WIDTH SPACE code point. In particular, it behaves like a Unicode bidi BN code point, meaning it has no effect on bidi-ordering: \u0026lt;div dir=rtl\u0026gt;123,\u0026lt;wbr\u0026gt;456 displays, when not broken on two lines, 123,456 and not 456,123.\nFor the same reason, the \u0026lt;wbr\u0026gt; element does not introduce a hyphen at the line break point. To make a hyphen appear only at the end of a line, use the soft hyphen character entity (\u0026amp;shy;) instead. :::\nExamples # ::: section-content The Yahoo Style Guide{target=\u0026quot;_blank\u0026quot;} recommends breaking a URL before punctuation{target=\u0026quot;_blank\u0026quot;}, to avoid leaving a punctuation mark at the end of the line, which the reader might mistake for the end of the URL.\n::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; http://this\u0026lt;wbr /\u0026gt;.is\u0026lt;wbr /\u0026gt;.a\u0026lt;wbr /\u0026gt;.really\u0026lt;wbr /\u0026gt;.long\u0026lt;wbr /\u0026gt;.example\u0026lt;wbr /\u0026gt;.com/With\u0026lt;wbr /\u0026gt;/deeper\u0026lt;wbr /\u0026gt;/level\u0026lt;wbr /\u0026gt;/pages\u0026lt;wbr /\u0026gt;/deeper\u0026lt;wbr /\u0026gt;/level\u0026lt;wbr /\u0026gt;/pages\u0026lt;wbr /\u0026gt;/deeper\u0026lt;wbr /\u0026gt;/level\u0026lt;wbr /\u0026gt;/pages\u0026lt;wbr /\u0026gt;/deeper\u0026lt;wbr /\u0026gt;/level\u0026lt;wbr /\u0026gt;/pages\u0026lt;wbr /\u0026gt;/deeper\u0026lt;wbr /\u0026gt;/level\u0026lt;wbr /\u0026gt;/pages \u0026lt;/p\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nTechnical summary # ::: section-content\nContent categories Flow content, phrasing content. Permitted content Empty Tag omission It is a void element; it must have a start tag, but must not have an end tag. Permitted parents Any element that accepts phrasing content. Implicit ARIA role No corresponding role Permitted ARIA roles Any DOM interface HTMLElement ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-wbr-element]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet wbr 1 79 1 5.5\u0026ndash;7 11.6 4 4.4 18 4 12 3.2 1.0 :::\nSee also # ::: section-content\noverflow-wrap word-break hyphens The \u0026lt;br\u0026gt; element ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr{._attribution-link} :::\n"},{"id":209,"href":"/docs/references/languages/html/element/xmp/","title":"Xmp","section":"HTML","content":" \u0026lt;xmp\u0026gt; # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. ::: :::\nSummary # ::: section-content The \u0026lt;xmp\u0026gt; HTML element renders text between the start and end tags without interpreting the HTML in between and using a monospaced font. The HTML2 specification recommended that it should be rendered wide enough to allow 80 characters per line.\n::: {#sect2 .notecard .note} Note: Do not use this element.\nIt has been deprecated since HTML3.2 and was not implemented in a consistent way. It was completely removed from current HTML. Use the \u0026lt;pre\u0026gt; element or, if semantically adequate, the \u0026lt;code\u0026gt; element instead. Note that you will need to escape the '\u0026lt;' character as '\u0026amp;lt;' and the '\u0026amp;' character as '\u0026amp;amp;' to make sure they are not interpreted as markup. A monospaced font can also be obtained on any element, by applying an adequate CSS style using monospace as the generic-font value for the font-family property. ::: ::: Attributes # ::: section-content This element has no other attributes than the global attributes, common to all elements. :::\nDOM interface # ::: section-content This element implements the HTMLElement interface. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# xmp]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari Samsung Explorer Android Android Android on IOS Internet xmp 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nBefore Firefox 4, Before Firefox 4, this element this element implemented the implemented the `HTMLSpanElement` `HTMLSpanElement` interface instead interface instead of the standard of the standard `HTMLElement` `HTMLElement` interface. interface. :::\nSee also # ::: section-content\nThe \u0026lt;pre\u0026gt; and \u0026lt;code\u0026gt; elements to be used instead. The \u0026lt;plaintext\u0026gt; element, similar to \u0026lt;xmp\u0026gt;{aria-current=\u0026ldquo;page\u0026rdquo;} but also obsolete. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/xmp{._attribution-link} :::\n"},{"id":210,"href":"/docs/references/languages/html/global_attributes/","title":"Global Attributes","section":"HTML","content":" Global attributes # ::: section-content Global attributes are attributes common to all HTML elements; they can be used on all elements, though they may have no effect on some elements.\nGlobal attributes may be specified on all HTML elements, even those not specified in the standard. That means that any non-standard elements must still permit these attributes, even though using those elements means that the document is no longer HTML5-compliant. For example, HTML5-compliant browsers hide content marked as \u0026lt;foo hidden\u0026gt;…\u0026lt;/foo\u0026gt;, even though \u0026lt;foo\u0026gt; is not a valid HTML element.\nIn addition to the basic HTML global attributes, the following global attributes also exist:\nxml:lang and xml:base \u0026mdash; these are inherited from the XHTML specifications and deprecated, but kept for compatibility purposes. The ARIA role attribute and the multiple aria-* states and properties, used for ensuring accessibility. The event handler attributes: onabort, onautocomplete, onautocompleteerror, onblur, oncancel, oncanplay, oncanplaythrough, onchange, onclick, onclose, oncontextmenu, oncuechange, ondblclick, ondrag, ondragend, ondragenter, ondragleave, ondragover, ondragstart, ondrop, ondurationchange, onemptied, onended, onerror, onfocus, oninput, oninvalid, onkeydown, onkeypress, onkeyup, onload, onloadeddata, onloadedmetadata, onloadstart, onmousedown, onmouseenter, onmouseleave, onmousemove, onmouseout, onmouseover, onmouseup, onmousewheel, onpause, onplay, onplaying, onprogress, onratechange, onreset, onresize, onscroll, onseeked, onseeking, onselect, onshow, onsort, onstalled, onsubmit, onsuspend, ontimeupdate, ontoggle, onvolumechange, onwaiting. ::: List of global attributes # ::: section-content\naccesskey Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.\nautocapitalize Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:\noff or none, no autocapitalization is applied (all letters default to lowercase) on or sentences, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase words, the first letter of each word defaults to a capital letter; all other letters default to lowercase characters, all letters should default to uppercase autofocus Indicates that an element is to be focused on page load, or as soon as the \u0026lt;dialog\u0026gt; it is part of is displayed. This attribute is a boolean, initially false.\nclass A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the class selectors or functions like the method Document.getElementsByClassName().\ncontenteditable An enumerated attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:\ntrue or the empty string, which indicates that the element must be editable; false, which indicates that the element must not be editable. contextmenu [Deprecated]{.visually-hidden} The id of a \u0026lt;menu\u0026gt; to use as the contextual menu for this element.\ndata-* Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the HTML and its DOM representation that may be used by scripts. All such custom data are available via the HTMLElement interface of the element the attribute is set on. The HTMLElement.dataset property gives access to them.\ndir An enumerated attribute indicating the directionality of the element's text. It can have the following values:\nltr, which means left to right and is to be used for languages that are written from the left to the right (like English); rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic); auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element. draggable An enumerated attribute indicating whether the element can be dragged, using the Drag and Drop API. It can have the following values:\ntrue, which indicates that the element may be dragged false, which indicates that the element may not be dragged. enterkeyhint Hints what action label (or icon) to present for the enter key on virtual keyboards.\nexportparts [Experimental]{.visually-hidden} Used to transitively export shadow parts from a nested shadow tree into a containing light tree.\nhidden An enumerated attribute indicating that the element is not yet, or is no longer, relevant. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.\nid Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).\ninert A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.\ninputmode Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on \u0026lt;input\u0026gt; elements, but is usable on any element while in contenteditable mode.\nis Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see Using custom elements for more details).\n::: {#sect1 .notecard .note} Note: The item* attributes are part of the WHATWG HTML Microdata feature{target=\u0026quot;_blank\u0026quot;}. :::\nitemid The unique, global identifier of an item.\nitemprop Used to add properties to an item. Every HTML element may have an itemprop attribute specified, where an itemprop consists of a name and value pair.\nitemref Properties that are not descendants of an element with the itemscope attribute can be associated with the item using an itemref. It provides a list of element ids (not itemids) with additional properties elsewhere in the document.\nitemscope itemscope (usually) works along with itemtype to specify that the HTML contained in a block is about a particular item. itemscope creates the Item and defines the scope of the itemtype associated with it. itemtype is a valid URL of a vocabulary (such as schema.org{target=\u0026quot;_blank\u0026quot;}) that describes the item and its properties context.\nitemtype Specifies the URL of the vocabulary that will be used to define itemprops (item properties) in the data structure. itemscope is used to set the scope of where in the data structure the vocabulary set by itemtype will be active.\nlang Helps define the language of an element: the language that non-editable elements are in, or the language that editable elements should be written in by the user. The attribute contains one \u0026quot;language tag\u0026quot; (made of hyphen-separated \u0026quot;language subtags\u0026quot;) in the format defined in RFC 5646: Tags for Identifying Languages (also known as BCP 47){target=\u0026quot;_blank\u0026quot;}. xml:lang has priority over it.\nnonce A cryptographic nonce (\u0026quot;number used once\u0026quot;) which can be used by Content Security Policy to determine whether or not a given fetch will be allowed to proceed.\npart A space-separated list of the part names of the element. Part names allows CSS to select and style specific elements in a shadow tree via the ::part pseudo-element.\npopover Used to designate an element as a popover element (see Popover API). Popover elements are hidden via display: none until opened via an invoking/control element (i.e. a \u0026lt;button\u0026gt; or \u0026lt;input type=\u0026quot;button\u0026quot;\u0026gt; with a popovertarget attribute) or a HTMLElement.showPopover() call.\nrole Roles define the semantic meaning of content, allowing screen readers and other tools to present and support interaction with an object in a way that is consistent with user expectations of that type of object. roles are added to HTML elements using role=\u0026quot;role_type\u0026quot;, where role_type is the name of a role in the ARIA specification.\nslot Assigns a slot in a shadow DOM shadow tree to an element: An element with a slot attribute is assigned to the slot created by the \u0026lt;slot\u0026gt; element whose name attribute's value matches that slot attribute's value.\nspellcheck An enumerated attribute defines whether the element may be checked for spelling errors. It may have the following values:\nempty string or true, which indicates that the element should be, if possible, checked for spelling errors; false, which indicates that the element should not be checked for spelling errors. style Contains CSS styling declarations to be applied to the element. Note that it is recommended for styles to be defined in a separate file or files. This attribute and the \u0026lt;style\u0026gt; element have mainly the purpose of allowing for quick styling, for example for testing purposes.\ntabindex An integer attribute indicating if the element can take input focus (is focusable), if it should participate to sequential keyboard navigation, and if so, at what position. It can take several values:\na negative value means that the element should be focusable, but should not be reachable via sequential keyboard navigation; 0 means that the element should be focusable and reachable via sequential keyboard navigation, but its relative order is defined by the platform convention; a positive value means that the element should be focusable and reachable via sequential keyboard navigation; the order in which the elements are focused is the increasing value of the tabindex. If several elements share the same tabindex, their relative order follows their relative positions in the document. title Contains a text representing advisory information related to the element it belongs to. Such information can typically, but not necessarily, be presented to the user as a tooltip.\ntranslate An enumerated attribute that is used to specify whether an element's attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged. It can have the following values:\nempty string or yes, which indicates that the element will be translated. no, which indicates that the element will not be translated. virtualkeyboardpolicy An enumerated attribute used to control the on-screen virtual keyboard behavior on devices such as tablets, mobile phones, or other devices where a hardware keyboard may not be available for elements that also uses the contenteditable attribute.\nauto or an empty string, which automatically shows the virtual keyboard when the element is focused or tapped. manual, which decouples focus and tap on the element from the virtual keyboard's state. ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-accesskey-attribute]{.small}\nHTML Standard\n[# attr-autocapitalize]{.small}\nHTML Standard\n[# attr-fe-autocomplete]{.small}\nHTML Standard\n[# dom-fe-autofocus]{.small}\nHTML Standard\n[# global-attributes:classes-2]{.small}\nHTML Standard\n[# attr-contenteditable]{.small}\nHTML Standard\n[# attr-data-*]{.small}\nHTML Standard\n[# the-dir-attribute]{.small}\nHTML Standard\n[# the-draggable-attribute]{.small}\nHTML Standard\n[# attr-enterkeyhint]{.small}\nCSS Shadow Parts\n[# element-attrdef-html-global-exportparts]{.small}\nHTML Standard\n[# the-hidden-attribute]{.small}\nHTML Standard\n[# global-attributes:the-id-attribute-2]{.small}\nHTML Standard\n[# the-inert-attribute]{.small}\nHTML Standard\n[# attr-inputmode]{.small}\nHTML Standard\n[# attr-is]{.small}\nHTML Standard\n[# attr-itemid]{.small}\nHTML Standard\n[# names:-the-itemprop-attribute]{.small}\nHTML Standard\n[# attr-itemref]{.small}\nHTML Standard\n[# attr-itemscope]{.small}\nHTML Standard\n[# attr-itemtype]{.small}\nHTML Standard\n[# attr-lang]{.small}\nHTML Standard\n[# attr-nonce]{.small}\nCSS Shadow Parts\n[# part-attr]{.small}\nHTML Standard\n[# the-popover-attribute]{.small}\nHTML Standard\n[# attr-popovertarget]{.small}\nHTML Standard\n[# attr-popovertargetaction]{.small}\nHTML Standard\n[# attr-slot]{.small}\nDOM Standard\n[# ref-for-dom-element-slot①]{.small}\nHTML Standard\n[# attr-spellcheck]{.small}\nHTML Standard\n[# the-style-attribute]{.small}\nHTML Standard\n[# attr-tabindex]{.small}\nHTML Standard\n[# the-title-attribute]{.small}\nHTML Standard\n[# attr-translate]{.small}\nVirtualKeyboard API\n[# dom-elementcontenteditable-virtualkeyboardpolicy]{.small} # :::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet Explorer accesskey 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nautocapitalize 43 79 111 No 30 No 43 43 111 30 5 4.0\nautocomplete 14 ≤79 4 No ≤12.1 6 4.4 18 4 ≤12.1 6 1.0\n\\[\\\u0026quot;In Chrome 66, support was added for \\[\\\u0026quot;In Chrome 66, support was added for \\[\\\u0026quot;In Chrome 66, support was added for \\[\\\u0026quot;In Samsung Internet 9.0, support was the `\u0026lt;textarea\u0026gt;` and `\u0026lt;select\u0026gt;` the `\u0026lt;textarea\u0026gt;` and `\u0026lt;select\u0026gt;` the `\u0026lt;textarea\u0026gt;` and `\u0026lt;select\u0026gt;` added for the `\u0026lt;textarea\u0026gt;` and elements.\\\u0026quot;, \\\u0026quot;Originally only supported elements.\\\u0026quot;, \\\u0026quot;Originally only supported elements.\\\u0026quot;, \\\u0026quot;Originally only supported `\u0026lt;select\u0026gt;` elements.\\\u0026quot;, \\\u0026quot;Originally on the `\u0026lt;input\u0026gt;` element.\\\u0026quot;, \\\u0026quot;Chrome on the `\u0026lt;input\u0026gt;` element.\\\u0026quot;, \\\u0026quot;Chrome on the `\u0026lt;input\u0026gt;` element.\\\u0026quot;, \\\u0026quot;Chrome only supported on the `\u0026lt;input\u0026gt;` does not accept `off` as a value. See does not accept `off` as a value. See does not accept `off` as a value. See element.\\\u0026quot;, \\\u0026quot;Samsung Internet does not [bug [bug [bug accept `off` as a value. See [bug 587466](https://crbug.com/587466).\\\u0026quot;\\] 587466](https://crbug.com/587466).\\\u0026quot;\\] 587466](https://crbug.com/587466).\\\u0026quot;\\] 587466](https://crbug.com/587466).\\\u0026quot;\\] autofocus 79 79 1 10 66 4 79 79 4 57 3.2 12.0\n1--79 12--79 Supported for Supported for ≤12.1--66 Supported for ≤37--79 18--79 Supported for the `\u0026lt;button\u0026gt;`, ≤12.1--57 Supported for 1.0--12.0 the the the `\u0026lt;input\u0026gt;`, `\u0026lt;select\u0026gt;`, and `\u0026lt;textarea\u0026gt;` the Supported for the `\u0026lt;button\u0026gt;`, `\u0026lt;input\u0026gt;`, Supported for `\u0026lt;button\u0026gt;`, `\u0026lt;button\u0026gt;`, Supported for `\u0026lt;button\u0026gt;`, Supported for the `\u0026lt;button\u0026gt;`, `\u0026lt;input\u0026gt;`, Supported for the `\u0026lt;button\u0026gt;`, `\u0026lt;input\u0026gt;`, elements. Supported for `\u0026lt;button\u0026gt;`, Supported for the `\u0026lt;button\u0026gt;`, `\u0026lt;input\u0026gt;`, `\u0026lt;select\u0026gt;`, and `\u0026lt;textarea\u0026gt;` elements. the `\u0026lt;input\u0026gt;`, `\u0026lt;input\u0026gt;`, the `\u0026lt;input\u0026gt;`, `\u0026lt;select\u0026gt;`, and `\u0026lt;textarea\u0026gt;` elements. `\u0026lt;select\u0026gt;`, and `\u0026lt;textarea\u0026gt;` elements. the `\u0026lt;input\u0026gt;`, `\u0026lt;select\u0026gt;`, and `\u0026lt;textarea\u0026gt;` elements. `\u0026lt;button\u0026gt;`, `\u0026lt;select\u0026gt;`, `\u0026lt;select\u0026gt;`, `\u0026lt;button\u0026gt;`, `\u0026lt;select\u0026gt;`, `\u0026lt;button\u0026gt;`, `\u0026lt;select\u0026gt;`, `\u0026lt;input\u0026gt;`, and and `\u0026lt;input\u0026gt;`, and `\u0026lt;input\u0026gt;`, and `\u0026lt;select\u0026gt;`, `\u0026lt;textarea\u0026gt;` `\u0026lt;textarea\u0026gt;` `\u0026lt;select\u0026gt;`, `\u0026lt;textarea\u0026gt;` `\u0026lt;select\u0026gt;`, `\u0026lt;textarea\u0026gt;` and elements. elements. and elements. and elements. `\u0026lt;textarea\u0026gt;` `\u0026lt;textarea\u0026gt;` `\u0026lt;textarea\u0026gt;` elements. elements. elements. class 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\ncontenteditable 1 12 3 5.5 9 ≤4 4.4 18 4 14 ≤3.2 1.0\ncontextmenu No No 9\u0026ndash;85 No No No No No 32\u0026ndash;56 No No No\nSupport for the `contextmenu` attribute has been removed from Firefox for Android (See [bug 1424252](https://bugzil.la/1424252)). data_attributes 7 12 6 Yes 15 5.1 4.4 18 6 14 5 1.0\ndir 1 79 1 No 15 ≤4 4.4 18 4 14 ≤3.2 1.0\ndraggable 4 12 2 Yes 12 5 4.4 18 4 14 4.2 1.0\nenterkeyhint 77 79 94 No 66 13.1 77 77 94 57 13.4 12.0\nexportparts 73 79 72 No 60 13.1 73 73 79 ? 13.4 11.0\nhidden 10 12 4 11 15 5.1 4 18 4 14 5 1.0\nid 1 12 32 Yes 15 1 4.4 18 32 14 1 1.0\n1--32 4--32 `id` is a true `id` is a true global attribute only global since Firefox 32. attribute only since Firefox 32. inert 102 102 112 No 88 15.5 102 102 112 70 15.5 19.0\ninputmode 66 79 9517\u0026ndash;23 No 53 No 66 66 79 47 12.2 9.0\nis 67 79 63 No 54 No 67 67 63 48 No 9.0\nitemid Yes 12 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes\nitemprop Yes 12 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes\nitemref Yes 12 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes\nitemscope Yes 12 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes\nitemtype Yes 12 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes\nlang 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\nnonce Yes Yes 31 No Yes Yes Yes Yes 31 Yes Yes Yes\npart 73 79 72 No 60 13.1 73 73 79 52 13.4 11.0\npopover 114 114 114 No 100 17 114 114 No No 17 No\npopovertarget 114 114 114 No 100 17 114 114 No No 17 No\npopovertargetaction 114 114 114 No 100 17 114 114 No No 17 No\nslot 53 ≤79 63 No 40 10 53 53 63 41 10 6.0\nspellcheck 9 12 Yes 11 Yes Yes 47 47 57 37 9.3 5.0\nstyle 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0\ntabindex 1 12 1.5 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\ntitle 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0\ntranslate 19 79 111 No 15 6 4.4 25 111 14 6 1.5\nvirtualkeyboardpolicy 94 94 No No 80 No 94 94 No 66 No 17.0 # :::\nSee also # ::: section-content\nElement interface that allows querying most global attributes. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes{._attribution-link} :::\n"},{"id":211,"href":"/docs/references/languages/html/global_attributes/accesskey/","title":"Accesskey","section":"HTML","content":" accesskey # ::: section-content The accesskey global attribute provides a hint for generating a keyboard shortcut for the current element. The attribute value must consist of a single printable character (which includes accented and other characters that can be generated by the keyboard). :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: accesskey # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} If you need to relax, press the Stress reliever! \u0026lt;button accesskey=\u0026quot;s\u0026quot;\u0026gt;Stress reliever\u0026lt;/button\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\n::: {#sect1 .notecard .note} Note: In the WHATWG spec, it says you can specify multiple space-separated characters, and the browser will use the first one it supports. However, this does not work in most browsers. IE/Edge uses the first one it supports without problems, provided there are no conflicts with other commands. :::\nThe way to activate the accesskey depends on the browser and its platform:\nWindows Linux Mac Firefox Alt + Shift + key Firefox 57+: Control + Option + key or Control + Alt + key Firefox 14-56: Control + Alt + key Firefox 13 or older: Control + key Edge Alt + key Control + Option + key\nor Control + Option + Shift + key n/a Google Chrome Control + Option + key Safari n/a Control + Option + key Opera 15+ Alt + key Control + Alt + key Opera 12 Shift + Esc opens a list of available accesskeys. Choose an item from the list by pressing the key. ::: Accessibility concerns # ::: section-content In addition to poor browser support, there are numerous concerns with the accesskey attribute:\nAn accesskey value can conflict with a system or browser keyboard shortcut, or assistive technology functionality. What may work for one combination of operating system, assistive technology, and browser may not work with other combinations. Certain accesskey values may not be present on certain keyboards, especially when internationalization is a concern. So adapting to specific languages could cause further problems. accesskey values that rely on numbers may be confusing to individuals experiencing cognitive concerns, where the number doesn't have a logical association with the functionality it triggers. Informing the user that accesskeys are present, so that they are aware of the functionality. If the system lacks a method of notifying the user about this feature, the user might accidentally activate accesskeys. Because of these issues, it is generally advised not to use accesskeys for most general-purpose websites and web apps.\nWebAIM: Keyboard Accessibility - Accesskey{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-accesskey-attribute]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet accesskey 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nHTMLElement.accessKey HTMLElement.accessKeyLabel All global attributes. aria-keyshortcuts{target=\u0026quot;_blank\u0026quot;} ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey{._attribution-link} :::\n"},{"id":212,"href":"/docs/references/languages/html/global_attributes/autocapitalize/","title":"Autocapitalize","section":"HTML","content":" autocapitalize # ::: section-content The autocapitalize global attribute is an enumerated attribute that controls whether and how text input is automatically capitalized as it is entered/edited by the user.\nThe attribute must take one of the following values:\noff or none: No autocapitalization is applied (all letters default to lowercase) on or sentences: The first letter of each sentence defaults to a capital letter; all other letters default to lowercase words: The first letter of each word defaults to a capital letter; all other letters default to lowercase characters: All letters should default to uppercase The autocapitalize attribute doesn't affect behavior when typing on a physical keyboard. Instead, it affects the behavior of other input mechanisms, such as virtual keyboards on mobile devices and voice input. The behavior of such mechanisms is that they often assist users by automatically capitalizing the first letter of sentences. The autocapitalize attribute enables authors to override that behavior per-element.\nThe autocapitalize attribute never causes autocapitalization to be enabled for an \u0026lt;input\u0026gt; element with a type attribute whose value is url, email, or password. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-autocapitalize]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet autocapitalize 43 79 111 No 30 No 43 43 111 30 5 4.0 :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize{._attribution-link} :::\n"},{"id":213,"href":"/docs/references/languages/html/global_attributes/autofocus/","title":"Autofocus","section":"HTML","content":" autofocus # ::: section-content The autofocus global attribute is a Boolean attribute indicating that an element should be focused on page load, or when the \u0026lt;dialog\u0026gt; that it is part of is displayed.\n::: code-example [html]{.language-name}\n\u0026lt;input name=\u0026#34;q\u0026#34; autofocus /\u0026gt; :::\nNo more than one element in the document or dialog may have the autofocus attribute. If applied to multiple elements the first one will receive focus.\n::: {#sect1 .notecard .note} Note: The autofocus attribute applies to all elements, not just form controls. For example, it might be used on a contenteditable area. ::: :::\nAccessibility considerations # ::: section-content Automatically focusing a form control can confuse visually-impaired people using screen-reading technology and people with cognitive impairments. When autofocus is assigned, screen-readers \u0026quot;teleport\u0026quot; their user to the form control without warning them beforehand.\nUse careful consideration for accessibility when applying the autofocus attribute. Automatically focusing on a control can cause the page to scroll on load. The focus can also cause dynamic keyboards to display on some touch devices. While a screen reader will announce the label of the form control receiving focus, the screen reader will not announce anything before the label, and the sighted user on a small device will equally miss the context created by the preceding content. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# dom-fe-autofocus]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Android Firefox for Opera Android Safari on IOS Samsung Explorer Android Android Internet autofocus 79 79 1 10 66 4 79 79 4 57 3.2 12.0\n1--79 12--79 Supported for Supported for ≤12.1--66 Supported for ≤37--79 18--79 Supported for ≤12.1--57 Supported for 1.0--12.0 the the the the the Supported for Supported for `\u0026lt;button\u0026gt;`, `\u0026lt;button\u0026gt;`, Supported for `\u0026lt;button\u0026gt;`, Supported for Supported for `\u0026lt;button\u0026gt;`, Supported for `\u0026lt;button\u0026gt;`, Supported for the the `\u0026lt;input\u0026gt;`, `\u0026lt;input\u0026gt;`, the `\u0026lt;input\u0026gt;`, the the `\u0026lt;input\u0026gt;`, the `\u0026lt;input\u0026gt;`, the `\u0026lt;button\u0026gt;`, `\u0026lt;button\u0026gt;`, `\u0026lt;select\u0026gt;`, `\u0026lt;select\u0026gt;`, `\u0026lt;button\u0026gt;`, `\u0026lt;select\u0026gt;`, `\u0026lt;button\u0026gt;`, `\u0026lt;button\u0026gt;`, `\u0026lt;select\u0026gt;`, `\u0026lt;button\u0026gt;`, `\u0026lt;select\u0026gt;`, `\u0026lt;button\u0026gt;`, `\u0026lt;input\u0026gt;`, `\u0026lt;input\u0026gt;`, and and `\u0026lt;input\u0026gt;`, and `\u0026lt;input\u0026gt;`, `\u0026lt;input\u0026gt;`, and `\u0026lt;input\u0026gt;`, and `\u0026lt;input\u0026gt;`, `\u0026lt;select\u0026gt;`, `\u0026lt;select\u0026gt;`, `\u0026lt;textarea\u0026gt;` `\u0026lt;textarea\u0026gt;` `\u0026lt;select\u0026gt;`, `\u0026lt;textarea\u0026gt;` `\u0026lt;select\u0026gt;`, `\u0026lt;select\u0026gt;`, `\u0026lt;textarea\u0026gt;` `\u0026lt;select\u0026gt;`, `\u0026lt;textarea\u0026gt;` `\u0026lt;select\u0026gt;`, and and elements. elements. and elements. and and elements. and elements. and `\u0026lt;textarea\u0026gt;` `\u0026lt;textarea\u0026gt;` `\u0026lt;textarea\u0026gt;` `\u0026lt;textarea\u0026gt;` `\u0026lt;textarea\u0026gt;` `\u0026lt;textarea\u0026gt;` `\u0026lt;textarea\u0026gt;` elements. elements. elements. elements. elements. elements. elements. :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus{._attribution-link} :::\n"},{"id":214,"href":"/docs/references/languages/html/global_attributes/class/","title":"Class","section":"HTML","content":" class # ::: section-content The class global attribute is a space-separated list of the case-sensitive classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the class selectors or functions like the DOM method document.getElementsByClassName. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: class # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Narrator: This is the beginning of the play.\n\u0026lt;p class=\u0026quot;note editorial\u0026quot;\u0026gt;Above point sounds a bit obvious. Remove/rewrite?\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Narrator: I must warn you now folks that this beginning is very exciting.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;note\u0026quot;\u0026gt;[Lights go up and wind blows; Caspian enters stage right]\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} .note { font-style: italic; font-weight: bold; }\n.editorial { background: rgb(255, 0, 0, 0.25); padding: 10px; } .editorial:before { content: 'Editor: '; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThough the specification doesn't put requirements on the name of classes, web developers are encouraged to use names that describe the semantic purpose of the element, rather than the presentation of the element. For example, attribute to describe an attribute rather than italics, although an element of this class may be presented by italics. Semantic names remain logical even if the presentation of the page changes. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# global-attributes:classes-2]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet class 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nAll global attributes. element.className element.classList Introduction to CSS ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class{._attribution-link} :::\n"},{"id":215,"href":"/docs/references/languages/html/global_attributes/contenteditable/","title":"Contenteditable","section":"HTML","content":" contenteditable # ::: section-content The contenteditable global attribute is an enumerated attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: contenteditable # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Edit this content to add your own quote\n\u0026lt;cite contenteditable=\u0026quot;true\u0026quot;\u0026gt;-- Write your own name here\u0026lt;/cite\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} blockquote { background: #eee; border-radius: 5px; margin: 16px 0; }\nblockquote p { padding: 15px; } cite { margin: 16px 32px; font-weight: bold; } blockquote p::before { content: '\\201C'; } blockquote p::after { content: '\\201D'; } [contenteditable='true'] { caret-color: red; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe attribute must take one of the following values:\ntrue or an empty string, which indicates that the element is editable. false, which indicates that the element is not editable. plaintext-only, which indicates that the element's raw text is editable, but rich text formatting is disabled. If the attribute is given without a value, like \u0026lt;label contenteditable\u0026gt;Example Label\u0026lt;/label\u0026gt;, its value is treated as an empty string.\nIf this attribute is missing or its value is invalid, its value is inherited from its parent element: so the element is editable if its parent is editable.\nNote that although its allowed values include true and false, this attribute is an enumerated one and not a Boolean one.\nYou can set the color used to draw the text insertion caret with the CSS caret-color property.\nElements that are made editable, and therefore interactive, by using the contenteditable attribute can be focused. They participate in sequential keyboard navigation. However, elements with the contenteditable attribute nested within other contenteditable elements are not added to the tabbing sequence by default. You can add the nested contenteditable elements to the keyboard navigation sequence by specifying the tabindex value ( tabindex=\u0026quot;0\u0026quot;). :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-contenteditable]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet contenteditable 1 12 3 5.5 9 ≤4 4.4 18 4 14 ≤3.2 1.0 plaintext-only 51 ≤79 No No 38 Yes 51 51 No 41 Yes 5.0 :::\nSee also # ::: section-content\nAll global attributes HTMLElement.contentEditable and HTMLElement.isContentEditable The CSS caret-color property HTMLElement input event ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable{._attribution-link} :::\n"},{"id":216,"href":"/docs/references/languages/html/global_attributes/contextmenu/","title":"Contextmenu","section":"HTML","content":" contextmenu # ::: section-content ::: {#sect1 .notecard .deprecated} Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. :::\n::: {#sect2 .notecard .nonstandard} Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future. :::\nThe contextmenu global attribute is the id of a \u0026lt;menu\u0026gt; to use as the contextual menu for this element.\nA context menu is a menu that appears upon user interaction, such as a right-click. HTML now allows us to customize this menu. Here are some implementation examples, including nested menus. :::\nExample # HTML # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;body contextmenu=\u0026#34;share\u0026#34;\u0026gt; \u0026lt;menu type=\u0026#34;context\u0026#34; id=\u0026#34;share\u0026#34;\u0026gt; \u0026lt;menu label=\u0026#34;share\u0026#34;\u0026gt; \u0026lt;menuitem label=\u0026#34;Twitter\u0026#34; onclick=\u0026#34;shareViaTwitter()\u0026#34;\u0026gt;\u0026lt;/menuitem\u0026gt; \u0026lt;menuitem label=\u0026#34;Facebook\u0026#34; onclick=\u0026#34;shareViaFacebook()\u0026#34;\u0026gt;\u0026lt;/menuitem\u0026gt; \u0026lt;/menu\u0026gt; \u0026lt;/menu\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt; Anywhere in the example you can share the page on Twitter and Facebook using the Share menu from your context menu. \u0026lt;/li\u0026gt; \u0026lt;li contextmenu=\u0026#34;changeFont\u0026#34; id=\u0026#34;fontSizing\u0026#34;\u0026gt; On this specific list element, you can change the size of the text by using the \u0026#34;Increase/Decrease font\u0026#34; actions from your context menu \u0026lt;/li\u0026gt; \u0026lt;menu type=\u0026#34;context\u0026#34; id=\u0026#34;changeFont\u0026#34;\u0026gt; \u0026lt;menuitem label=\u0026#34;Increase Font\u0026#34; onclick=\u0026#34;incFont()\u0026#34;\u0026gt;\u0026lt;/menuitem\u0026gt; \u0026lt;menuitem label=\u0026#34;Decrease Font\u0026#34; onclick=\u0026#34;decFont()\u0026#34;\u0026gt;\u0026lt;/menuitem\u0026gt; \u0026lt;/menu\u0026gt; \u0026lt;li contextmenu=\u0026#34;ChangeImage\u0026#34; id=\u0026#34;changeImage\u0026#34;\u0026gt; On the image below, you can fire the \u0026#34;Change Image\u0026#34; action in your Context Menu.\u0026lt;br /\u0026gt; \u0026lt;img src=\u0026#34;promobutton_mdn5.png\u0026#34; contextmenu=\u0026#34;ChangeImage\u0026#34; id=\u0026#34;promoButton\u0026#34; alt=\u0026#34;Better CSS Docs for a better web\u0026#34; /\u0026gt; \u0026lt;menu type=\u0026#34;context\u0026#34; id=\u0026#34;ChangeImage\u0026#34;\u0026gt; \u0026lt;menuitem label=\u0026#34;Change Image\u0026#34; onclick=\u0026#34;changeImage()\u0026#34;\u0026gt;\u0026lt;/menuitem\u0026gt; \u0026lt;/menu\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/body\u0026gt; ::: :::\nJavaScript # ::: section-content ::: code-example [js]{.language-name}\nfunction shareViaTwitter() { window.open( \u0026#34;https://twitter.com/intent/tweet?text=\u0026#34; + \u0026#34;Hurray! I am learning ContextMenu from MDN via Mozilla\u0026#34;, ); } function shareViaFacebook() { window.open( \u0026#34;https://facebook.com/sharer/sharer.php?u=\u0026#34; + \u0026#34;https://developer.mozilla.org/en/HTML/Element/Using_HTML_context_menus\u0026#34;, ); } function incFont() { document.getElementById(\u0026#34;fontSizing\u0026#34;).style.fontSize = \u0026#34;larger\u0026#34;; } function decFont() { document.getElementById(\u0026#34;fontSizing\u0026#34;).style.fontSize = \u0026#34;smaller\u0026#34;; } function changeImage() { const index = Math.ceil(Math.random() * 39 + 1); document.images[0].src = `${index}.png`; } ::: :::\nResult # ::: section-content ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: section-content The contextmenu attribute is obsolete{target=\u0026quot;_blank\u0026quot;} and will be removed from all browsers. :::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Android Opera Safari Samsung Explorer Android Android Android on IOS Internet contextmenu No No 9\u0026ndash;85 No No No No No 32\u0026ndash;56 No No No\nSupport for the `contextmenu` attribute has been removed from Firefox for Android (See [bug 1424252](https://bugzil.la/1424252)). :::\nSee also # ::: section-content\nAll global attributes ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contextmenu{._attribution-link} :::\n"},{"id":217,"href":"/docs/references/languages/html/global_attributes/data-/","title":"Data *","section":"HTML","content":" data-* # ::: section-content The data-* global attributes form a class of attributes called custom data attributes, that allow proprietary information to be exchanged between the HTML and its DOM representation by scripts. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: data-* # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Secret agents\n\u0026lt;ul\u0026gt; \u0026lt;li data-id=\u0026quot;10784\u0026quot;\u0026gt;Jason Walters, 003: Found dead in \u0026quot;A View to a Kill\u0026quot;.\u0026lt;/li\u0026gt; \u0026lt;li data-id=\u0026quot;97865\u0026quot;\u0026gt;Alex Trevelyan, 006: Agent turned terrorist leader; James' nemesis in \u0026quot;Goldeneye\u0026quot;.\u0026lt;/li\u0026gt; \u0026lt;li data-id=\u0026quot;45732\u0026quot;\u0026gt;James Bond, 007: The main man; shaken but not stirred.\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} h1 { margin: 0; }\nul { margin: 10px 0 0; } li { position: relative; width: 200px; padding-bottom: 10px; } li:after { content: 'Data ID: ' attr(data-id); position: absolute; top: -22px; left: 10px; background: black; color: white; padding: 2px; border: 1px solid #eee; opacity: 0; transition: 0.5s opacity; } li:hover:after { opacity: 1; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nAll such custom data are available via the HTMLElement interface of the element the attribute is set on. The HTMLElement.dataset property gives access to them. The * may be replaced by any name following the production rule of XML names{target=\u0026quot;_blank\u0026quot;} which includes the following recommendations:\nThe name should not start with xml (case-insensitive), as it's reserved for future XML specifications. The name should not contain any colon characters (:), as XML assigns meaning to such names. The name should not contain any capital letters, as XML is all lowercase. These are recommendations. If these naming recommendations are not followed, no errors will occur. The attributes will still be matched using CSS attribute selectors, with the attribute being case insensitive and any attribute value being case-sensitive. Attributes not conforming to these three recommendations will also still be recognized by the JavaScript HTMLElement.dataset property and user-agents will include the attribute in the DOMStringMap containing all the custom data attributes for an HTMLElement.\nIf you plan to use HTMLElement.dataset, the portion of the attribute name following the data- can only include characters allowed in JavaScript property names (and hyphens, which will be removed). The dataset version of the attribute name removes the \u0026quot;data-\u0026quot; prefix and converts the rest of the name from kebab-case to camelCase. For example, element.getAttribute(\u0026quot;data-test\u0026quot;) is equivalent to element.dataset.test and data-test-abc will be accessible as HTMLElement.dataset.testAbc (or by HTMLElement.dataset[\u0026quot;testAbc\u0026quot;]). Avoid non-alphabetic characters following a hyphen, such as data-test-1 or data--test, as they will not be recognized by HTMLElement.dataset. :::\nUsage # ::: section-content By adding data-* attributes, even ordinary HTML elements can become rather complex and powerful program-objects. For example, a space-ship \u0026quot; sprite{target=\u0026quot;_blank\u0026quot;}\u0026quot; in a game could be a simple \u0026lt;img\u0026gt; element with a class attribute and several data-* attributes:\n::: code-example [html]{.language-name}\n\u0026lt;img class=\u0026#34;spaceship cruiserX3\u0026#34; src=\u0026#34;shipX3.png\u0026#34; data-ship-id=\u0026#34;324\u0026#34; data-weapons=\u0026#34;laserI laserII\u0026#34; data-shields=\u0026#34;72%\u0026#34; data-x=\u0026#34;414354\u0026#34; data-y=\u0026#34;85160\u0026#34; data-z=\u0026#34;31940\u0026#34; onclick=\u0026#34;spaceships[this.dataset.shipId].blasted()\u0026#34; /\u0026gt; :::\nFor a more in-depth tutorial about using HTML data attributes, see Using data attributes. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-data-*]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet data-* 7 12 6 Yes 15 5.1 4.4 18 6 14 5 1.0 :::\nSee also # ::: section-content\nAll global attributes. The HTMLElement.dataset property that allows to access and modify these values. Using data attributes ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*{._attribution-link} :::\n"},{"id":218,"href":"/docs/references/languages/html/global_attributes/dir/","title":"Dir","section":"HTML","content":" dir # ::: section-content The dir global attribute is an enumerated attribute that indicates the directionality of the element's text. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: dir # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} This paragraph is in English but incorrectly goes right to left.\nThis paragraph is in English and correctly goes left to right.\n\u0026lt;hr /\u0026gt; \u0026lt;p\u0026gt;هذه الفقرة باللغة العربية ولكن بشكل خاطئ من اليسار إلى اليمين.\u0026lt;/p\u0026gt; \u0026lt;p dir=\u0026quot;auto\u0026quot;\u0026gt;هذه الفقرة باللغة العربية ، لذا يجب الانتقال من اليمين إلى اليسار.\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nIt can have the following values:\nltr, which means left to right and is to be used for languages that are written from the left to the right (like English); rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic); auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then applies that directionality to the whole element. ::: {#sect1 .notecard .note} Note: This attribute is mandatory for the \u0026lt;bdo\u0026gt; element where it has a different semantic meaning.\nThis attribute is not inherited by the \u0026lt;bdi\u0026gt; element. If not set, its value is auto. This attribute can be overridden by the CSS properties direction and unicode-bidi, if a CSS page is active and the element supports these properties. As the directionality of the text is semantically related to its content and not to its presentation, it is recommended that web developers use this attribute instead of the related CSS properties when possible. That way, the text will display correctly even on a browser that doesn't support CSS or has the CSS deactivated. The auto value should be used for data with an unknown directionality, like data coming from user input, eventually stored in a database. ::: ::: {#sect2 .notecard .note} Note: Browsers might allow users to change the directionality of \u0026lt;input\u0026gt; and \u0026lt;textarea\u0026gt;s in order to assist with authoring content. Chrome and Safari provide a directionality option in the contextual menu of input fields while Legacy Edge uses the key combinations [Ctrl]{.kbd} + [Left Shift]{.kbd} and [Ctrl]{.kbd} + [Right Shift]{.kbd}. Firefox uses [Ctrl]{.kbd}/[Cmd]{.kbd} + [Shift]{.kbd} + [X]{.kbd} but does NOT update the dir attribute value. ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-dir-attribute]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet dir 1 79 1 No 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nAll global attributes. HTMLElement.dir that reflects this attribute. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir{._attribution-link} :::\n"},{"id":219,"href":"/docs/references/languages/html/global_attributes/draggable/","title":"Draggable","section":"HTML","content":" draggable # ::: section-content The draggable global attribute is an enumerated attribute that indicates whether the element can be dragged, either with native browser behavior or the HTML Drag and Drop API.\nThe draggable attribute may be applied to elements that strictly fall under the HTML namespace, which means that it cannot be applied to SVGs. For more information about what namespace declarations look like, and what they do, see Namespace crash course.\ndraggable can have the following values:\ntrue: the element can be dragged. false: the element cannot be dragged. ::: {#sect1 .notecard .warning} Warning: This attribute is enumerated and not Boolean. A value of true or false is mandatory, and shorthand like \u0026lt;img draggable\u0026gt; is forbidden. The correct usage is \u0026lt;img draggable=\u0026quot;false\u0026quot;\u0026gt;. :::\nIf this attribute is not set, its default value is auto, which means drag behavior is the default browser behavior: only text selections, images, and links can be dragged. For other elements, the event ondragstart must be set for drag and drop to work, as shown in this comprehensive example. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-draggable-attribute]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet draggable 4 12 2 Yes 12 5 4.4 18 4 14 4.2 1.0 :::\nSee also # ::: section-content\nAll global attributes. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable{._attribution-link} :::\n"},{"id":220,"href":"/docs/references/languages/html/global_attributes/enterkeyhint/","title":"Enterkeyhint","section":"HTML","content":" enterkeyhint # ::: section-content The enterkeyhint global attribute is an enumerated attribute defining what action label (or icon) to present for the enter key on virtual keyboards. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: enterkeyhint # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} \u0026lt;p contenteditable enterkeyhint=\u0026quot;go\u0026quot;\u0026gt;https://example.org\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nDescription # ::: section-content Form controls (such as \u0026lt;textarea\u0026gt; or \u0026lt;input\u0026gt; elements) or elements using contenteditable can specify an inputmode attribute to control what kind of virtual keyboard will be used. To further improve the user's experience, the enter key can be customized specifically by providing an enterkeyhint attribute indicating how the enter key should be labeled (or which icon should be shown). The enter key usually represents what the user should do next; typical actions are: sending text, inserting a new line, or searching.\nIf no enterkeyhint attribute is provided, the user agent might use contextual information from the inputmode, type, or pattern attributes to display a suitable enter key label (or icon). :::\nValues # ::: section-content The enterkeyhint attribute is an enumerated attribute and only accepts the following values:\nValue Description Example label (depends on user agent and user language) enterkeyhint=\"enter\" Typically inserting a new line. ↵ enterkeyhint=\"done\" Typically meaning there is nothing more to input and the input method editor (IME) will be closed. Done enterkeyhint=\"go\" Typically meaning to take the user to the target of the text they typed. Open enterkeyhint=\"next\" Typically taking the user to the next field that will accept text. Next enterkeyhint=\"previous\" Typically taking the user to the previous field that will accept text. Previous enterkeyhint=\"search\" Typically taking the user to the results of searching for the text they have typed. Search enterkeyhint=\"send\" Typically delivering the text to its target. Send ::: Specifications # ::: _table # Specification # HTML Standard\n[# attr-enterkeyhint]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet enterkeyhint 77 79 94 No 66 13.1 77 77 94 57 13.4 12.0 :::\nSee also # ::: section-content\nHTMLElement.enterKeyHint property reflecting this attribute inputmode global attribute contenteditable global attribute type and pattern attributes on \u0026lt;input\u0026gt; elements ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint{._attribution-link} :::\n"},{"id":221,"href":"/docs/references/languages/html/global_attributes/exportparts/","title":"Exportparts","section":"HTML","content":" exportparts # ::: section-content The exportparts global attribute allows you to select and style elements existing in nested shadow trees, by exporting their part names.\nThe shadow tree is an isolated structure where identifiers, classes, and styles cannot be reached by selectors or queries belonging to a regular DOM. To apply a style to an element living in a shadow tree, by CSS rule created outside of it, part global attribute has to be used. It has to be assigned to an element present in Shadow Tree, and its value should be some identifier. Rules present outside of the shadow tree, must use the ::part pseudo-element, containing the same identifier as the argument.\nThe global attribute part makes the element visible on just a single level of depth. When the shadow tree is nested, parts will be visible only to the parent of the shadow tree but not to its ancestor. Exporting parts further down is exactly what exportparts attribute is for.\nAttribute exportparts must be placed on a shadow Host, which is the element to which the shadow tree is attached. The value of the attribute should be a comma-separated list of part names present in the shadow tree and which should be made available via a DOM outside of the current structure. :::\nSpecifications # ::: _table # Specification # CSS Shadow Parts\n[# element-attrdef-html-global-exportparts]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet exportparts 73 79 72 No 60 13.1 73 73 79 ? 13.4 11.0 :::\nSee also # ::: section-content\nAll global attributes. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/exportparts{._attribution-link} :::\n"},{"id":222,"href":"/docs/references/languages/html/global_attributes/hidden/","title":"Hidden","section":"HTML","content":" hidden # ::: section-content The hidden global attribute is an enumerated attribute indicating that the browser should not render the contents of the element. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: hidden # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} This content should be read right now, as it is important. I am so glad you are able to find it!\n\u0026lt;p hidden\u0026gt;This content is not relevant to this page right now, so should not be seen. Nothing to see here. Nada.\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p { background: #ffe8d4; border: 1px solid #f69d3c; padding: 5px; border-radius: 5px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: ::: :::\nDescription # ::: section-content The hidden attribute is used to indicate that the content of an element should not be presented to the user. This attribute can take any one of the following values:\nan empty string the keyword hidden the keyword until-found There are two states associated with the hidden attribute: the hidden state and the hidden until found state.\nAn empty string, or the keyword hidden, set the element to the hidden state. Additionally, invalid values set the element to the hidden state. The keyword until-found sets the element to the hidden until found state. Thus, all the following set the element to the hidden state:\n::: code-example [html]{.language-name}\n\u0026lt;span hidden\u0026gt;I\u0026#39;m hidden\u0026lt;/span\u0026gt; \u0026lt;span hidden=\u0026#34;hidden\u0026#34;\u0026gt;I\u0026#39;m also hidden\u0026lt;/span\u0026gt; \u0026lt;span hidden=\u0026#34;something else\u0026#34;\u0026gt;I\u0026#39;m hidden too!\u0026lt;/span\u0026gt; :::\nThe following sets the element to the hidden until found state:\n::: code-example [html]{.language-name}\n\u0026lt;span hidden=\u0026#34;until-found\u0026#34;\u0026gt;I\u0026#39;m hidden until found\u0026lt;/span\u0026gt; :::\nThe hidden attribute must not be used to hide content just from one presentation. If something is marked hidden, it is hidden from all presentations, including, for instance, screen readers.\nHidden elements shouldn't be linked from non-hidden elements. For example, it would be incorrect to use the href attribute to link to a section marked with the hidden attribute. If the content is not applicable or relevant, then there is no reason to link to it.\nIt would be fine, however, to use the ARIA aria-describedby attribute to refer to descriptions that are themselves hidden. While hiding the descriptions implies that they are not useful on their own, they could be written in such a way that they are useful in the specific context of being referenced from the element that they describe.\nSimilarly, a canvas element with the hidden attribute could be used by a scripted graphics engine as an off-screen buffer, and a form control could refer to a hidden form element using its form attribute.\nElements that are descendants of a hidden element are still active, which means that script elements can still execute and form elements can still submit. :::\nThe hidden state # ::: section-content The hidden state indicates that the element is not currently relevant to the page, or that it is being used to declare content for reuse by other parts of the page and should not be directly presented to the user. The browser will not render elements that are in the hidden state.\nWeb browsers may implement the hidden state using display: none, in which case the element will not participate in page layout. This also means that changing the value of the CSS display property on an element in the hidden state will override the state. For instance, elements styled display: block will be displayed despite the hidden attribute's presence. :::\nThe hidden until found state # ::: section-content In the hidden until found state, the element is hidden but its content will be accessible to the browser's \u0026quot;find in page\u0026quot; feature or to fragment navigation. When these features cause a scroll to an element in a hidden until found subtree, the browser will:\nfire a beforematch event on the hidden element remove the hidden attribute from the element scroll to the element This enables a developer to collapse a section of content, but make it searchable and accessible via fragment navigation.\nNote that browsers typically implement hidden until found using content-visibility: hidden. This means that unlike elements in the hidden state, elements in the hidden until found state will have generated boxes, meaning that:\nthe element will participate in page layout margin, borders, padding, and background for the element will be rendered. Also, the element needs to be affected by layout containment in order to be revealed. This means that if the element in the hidden until found state has a display value of none, contents, or inline, then the element will not be revealed by find in page or fragment navigation. :::\nExamples # Using until-found # ::: section-content In this example we have:\nThree `` elements. The first and the third are not hidden, while the second has hidden=\u0026quot;until-found\u0026quot;and id=\u0026quot;until-found-box\u0026quot; attributes. A link whose target is the \u0026quot;until-found-box\u0026quot; fragment. The hidden until found element has a dotted red border and a gray background.\nWe also have some JavaScript that listens for the beforematch event firing on the hidden until found element. The event handler changes the text content of the box.\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;a href=\u0026#34;#until-found-box\u0026#34;\u0026gt;Go to hidden content\u0026lt;/a\u0026gt; I\u0026#39;m not hidden \u0026lt;div id=\u0026#34;until-found-box\u0026#34; hidden=\u0026#34;until-found\u0026#34;\u0026gt;Hidden until found I\u0026#39;m not hidden :::\nCSS # ::: code-example [css]{.language-name}\ndiv { height: 40px; width: 300px; border: 5px dashed black; margin: 1rem 0; padding: 1rem; font-size: 2rem; } div#until-found-box { color: red; border: 5px dotted red; background-color: lightgray; } :::\nJavaScript # ::: code-example [js]{.language-name}\nconst untilFound = document.querySelector(\u0026#34;#until-found-box\u0026#34;); untilFound.addEventListener( \u0026#34;beforematch\u0026#34;, () =\u0026gt; (untilFound.textContent = \u0026#34;I\u0026#39;ve been revealed!\u0026#34;), ); :::\nResult # Note that although the content of the element is hidden, the element still has a generated box, occupying space in the layout and with background and borders rendered.\nClicking the \u0026quot;Go to hidden content\u0026quot; button navigates to the hidden until found element. The beforematch event fires, the text content is updated, and the element content is displayed.\nTo run the example again, click \u0026quot;Reset\u0026quot;.\n::: {#sect1 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-hidden-attribute]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet hidden 10 12 4 11 15 5.1 4 18 4 14 5 1.0 until-found_value 102 102 No No No No 102 102 No 70 No 19.0 :::\nSee also # ::: section-content\nHTMLElement.hidden All global attributes The aria-hidden attribute The beforematch event ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden{._attribution-link} :::\n"},{"id":223,"href":"/docs/references/languages/html/global_attributes/id/","title":"ID","section":"HTML","content":" id # ::: section-content The id global attribute defines an identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS). :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: id # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} A normal, boring paragraph. Try not to fall asleep.\n\u0026lt;p id=\u0026quot;exciting\u0026quot;\u0026gt;The most exciting paragraph on the page. One of a kind!\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} #exciting { background: linear-gradient(to bottom, #ffe8d4, #f69d3c); border: 1px solid #696969; padding: 10px; border-radius: 10px; box-shadow: 2px 2px 1px black; }\n#exciting:before { content: 'ℹ️'; margin-right: 5px; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\n::: {#sect1 .notecard .warning} Warning: This attribute's value is an opaque string: this means that web authors should not rely on it to convey human-readable information (although having your IDs somewhat human-readable can be useful for code comprehension, e.g. consider ticket-18659 versus r45tgfe-freds\u0026amp;$@). :::\nAn id's value must not contain whitespace (spaces, tabs, etc.). Browsers treat non-conforming IDs that contain whitespace as if the whitespace is part of the ID. In contrast to the class attribute, which allows space-separated values, elements can only have one single ID value.\nTechnically, the value for an id attribute may contain any character, except whitespace characters. However, to avoid inadvertent errors, only ASCII letters, digits, '_', and '-' should be used, and the value for an id attribute should start with a letter.\nFor example, . has a special meaning in CSS (it starts a class selector). While valid, unless you are careful to escape it when used as part of a CSS selector, it won't be recognized as part of the element's id. The same applies to the querySelector() and querySelectorAll() parameters, which use the same selector syntax. It is easy to forget to do this, resulting in bugs in your code that could be hard to detect.\nSimilarly, an id starting with a digit (E.g., 1234-322-678) or a hyphen followed by a digit (E.g., -123), though valid in HTML, may lead to problems when used in CSS, JavaScript, and Web APIs:\nCSS ID selectors accept any CSS identifier. If the id starts with a digit or one hyphen immediately followed by a digit, both the hyphen and digit must be escaped in CSS. For example, while id=\u0026quot;544-383-3388\u0026quot; and id=\u0026quot;-3Pi\u0026quot; are valid in HTML, the id selectors must be escaped. The element with these id values can be targeted in CSS with #\\35 44-383-3388 and #\\2D \\33 pi. Any valid HTML id value is valid as an attribute selector in CSS and JavaScript. The selectors [id=\u0026quot;544-383-3388\u0026quot;] and [id=\u0026quot;-3Pi\u0026quot;] are valid. Document.querySelector() and similar methods using CSS-selector-style queries will not find them unless you escape them. (See this page{target=\u0026quot;_blank\u0026quot;} for an example.) Such an id is not a valid JavaScript identifier. Elements with IDs become global properties{target=\u0026quot;_blank\u0026quot;}, but you cannot use non-identifier global properties as global variables \u0026mdash; 1234 is not a global variable, and you have to use window[1234] instead to get the element with id=\u0026quot;1234\u0026quot;. This is slightly inconvenient as you have to create the variable with an extra step: const element = window[1234]. ::: Specifications # ::: _table # Specification # HTML Standard\n[# global-attributes:the-id-attribute-2]{.small}\n:::\nBrowser compatibility # ::: _table # Desktop Mobile Chrome Edge Firefox Internet Opera Safari WebView Chrome Firefox for Opera Safari Samsung Explorer Android Android Android Android on IOS Internet id 1 12 32 Yes 15 1 4.4 18 32 14 1 1.0\n1--32 4--32 `id` is a `id` is a true global true global attribute attribute only since only since Firefox 32. Firefox 32. :::\nSee also # ::: section-content\nAll global attributes. Element.id that reflects this attribute. The Document.getElementById method. CSS ID selectors. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id{._attribution-link} :::\n"},{"id":224,"href":"/docs/references/languages/html/global_attributes/inert/","title":"Inert","section":"HTML","content":" inert # ::: section-content The inert global attribute is a Boolean attribute indicating that the browser will ignore the element. With the inert attribute, all of the element's flat tree descendants (such as modal \u0026lt;dialog\u0026gt;s) that don't otherwise escape inertness are ignored. The inert attribute also makes the browser ignore input events sent by the user, including focus-related events and events from assistive technologies.\nSpecifically, inert does the following:\nPrevents the click event from being fired when the user clicks on the element. Prevents the focus event from being raised by preventing the element from gaining focus. Hides the element and its content from assistive technologies by excluding them from the accessibility tree. ::: code-example [html]{.language-name}\n\u0026lt;body inert\u0026gt; \u0026lt;!-- content --\u0026gt; \u0026lt;/body\u0026gt; :::\nThe inert attribute can be added to sections of content that should not be interactive. When an element is inert, it along with all of the element's descendants, including normally interactive elements such as links, buttons, and form controls are disabled because they cannot receive focus or be clicked.\nThe inert attribute can also be added to elements that should be offscreen or hidden. An inert element, along with its descendants, gets removed from the tab order and accessibility tree.\n::: {#sect1 .notecard .note} Note: While inert is a global attribute and can be applied to any element, it is generally used for sections of content. To make individual controls \u0026quot;inert\u0026quot;, consider using the disabled attribute, along with CSS :disabled styles, instead. ::: :::\nAccessibility concerns # ::: section-content Use careful consideration for accessibility when applying the inert attribute. By default, there is no visual way to tell whether or not an element or its subtree is inert. As a web developer, it is your responsibility to clearly indicate the content parts that are active and those that are inert.\nWhile providing visual and non-visual cues about content inertness, also remember that the visual viewport may contain only sections of content. Users may be zoomed in to a small section of content, or users may not be able to view the content at all. Inert sections not being obviously inert can lead to frustration and bad user experience. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-inert-attribute]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet inert 102 102 112 No 88 15.5 102 102 112 70 15.5 19.0 :::\nSee also # ::: section-content\nHTML \u0026lt;dialog\u0026gt; element HTMLElement.inert HTML DOM property Introducing inert{target=\u0026quot;_blank\u0026quot;} The \u0026quot;inert\u0026quot; attribute is finally coming to the web{target=\u0026quot;_blank\u0026quot;} ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert{._attribution-link} :::\n"},{"id":225,"href":"/docs/references/languages/html/global_attributes/inputmode/","title":"Inputmode","section":"HTML","content":" inputmode # ::: section-content The inputmode global attribute is an enumerated attribute that hints at the type of data that might be entered by the user while editing the element or its contents. This allows a browser to display an appropriate virtual keyboard.\nIt is used primarily on \u0026lt;input\u0026gt; elements, but is usable on any element in contenteditable mode.\nIt's important to understand that the inputmode attribute doesn't cause any validity requirements to be enforced on input. To require that input conforms to a particular data type, choose an appropriate \u0026lt;input\u0026gt; element type. For specific guidance on choosing \u0026lt;input\u0026gt; types, see the Values section. :::\nValues # ::: section-content The attribute can have any of the following values:\nnone No virtual keyboard. For when the page implements its own keyboard input control.\ntext (default value) Standard input keyboard for the user's current locale.\ndecimal Fractional numeric input keyboard containing the digits and decimal separator for the user's locale (typically [.]{.kbd} or [,]{.kbd}). Devices may or may not show a minus key ([-]{.kbd}).\nnumeric Numeric input keyboard, but only requires the digits 0\u0026ndash;9. Devices may or may not show a minus key.\ntel A telephone keypad input, including the digits 0\u0026ndash;9, the asterisk ([*]{.kbd}), and the pound ([#]{.kbd}) key. Inputs that *require* a telephone number should typically use \u0026lt;input type=\u0026quot;tel\u0026quot;\u0026gt; instead.\nsearch A virtual keyboard optimized for search input. For instance, the return/submit key{target=\u0026quot;_blank\u0026quot;} may be labeled \u0026quot;Search\u0026quot;, along with possible other optimizations. Inputs that require a search query should typically use \u0026lt;input type=\u0026quot;search\u0026quot;\u0026gt; instead.\nemail A virtual keyboard optimized for entering email addresses. Typically includes the [@]{.kbd}character as well as other optimizations. Inputs that require email addresses should typically use \u0026lt;input type=\u0026quot;email\u0026quot;\u0026gt; instead.\nurl A keypad optimized for entering URLs. This may have the [/]{.kbd} key more prominent, for example. Enhanced features could include history access and so on. Inputs that require a URL should typically use \u0026lt;input type=\u0026quot;url\u0026quot;\u0026gt; instead. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-inputmode]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet inputmode 66 79 9517\u0026ndash;23 No 53 No 66 66 79 47 12.2 9.0 :::\nSee also # ::: section-content\nAll global attributes. enterkeyhint global attribute ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode{._attribution-link} :::\n"},{"id":226,"href":"/docs/references/languages/html/global_attributes/is/","title":"Is","section":"HTML","content":" is # ::: section-content The is global attribute allows you to specify that a standard HTML element should behave like a defined custom built-in element (see Using custom elements for more details).\nThis attribute can only be used if the specified custom element name has been successfully defined in the current document, and extends the element type it is being applied to. :::\nExamples # ::: section-content The following code is taken from our word-count-web-component{target=\u0026quot;_blank\u0026quot;} example ( see it live also{target=\u0026quot;_blank\u0026quot;}).\n::: code-example [js]{.language-name}\n// Create a class for the element class WordCount extends HTMLParagraphElement { constructor() { // Always call super first in constructor super(); // Constructor contents omitted for brevity // … } } // Define the new element customElements.define(\u0026#34;word-count\u0026#34;, WordCount, { extends: \u0026#34;p\u0026#34; }); :::\n::: code-example [html]{.language-name}\n\u0026lt;p is=\u0026#34;word-count\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-is]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet is 67 79 63 No 54 No 67 67 63 48 No 9.0 :::\nSee also # ::: section-content\nAll global attributes. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is{._attribution-link} :::\n"},{"id":227,"href":"/docs/references/languages/html/global_attributes/itemid/","title":"Itemid","section":"HTML","content":" itemid # ::: section-content The itemid global attribute provides microdata in the form of a unique, global identifier of an item.\nAn itemid attribute can only be specified for an element that has both itemscope and itemtype attributes. Also, itemid can only be specified on elements that possess an itemscope attribute whose corresponding itemtype refers to or defines a vocabulary that supports global identifiers.\nThe exact meaning of an itemtype's global identifier is provided by the definition of that identifier within the specified vocabulary. The vocabulary defines whether several items with the same global identifier can coexist and, if so, how items with the same identifier are handled.\n::: {#sect1 .notecard .note} Note: The WHATWG definition specifies that an itemid must be a URL. However, the following example correctly illustrates that a URN may also be used. This inconsistency may reflect the incomplete nature of the Microdata specification. ::: :::\nExamples # Representing structured data for a book # ::: section-content This example uses microdata attributes to represent the following structured data:\nitemscope itemtype: itemid https://schema.org/Book: urn:isbn:0-374-22848-5 itemprop title Owls of the Eastern Ice itemprop author Jonathan C Slaght itemprop datePublished 2020-08-04 HTML # ::: code-example [html]{.language-name}\n\u0026lt;dl itemscope itemtype=\u0026#34;https://schema.org/Book\u0026#34; itemid=\u0026#34;urn:isbn:0-374-22848-5\u0026lt;\u0026#34;\u0026gt; \u0026lt;dt\u0026gt;Title\u0026lt;/dt\u0026gt; \u0026lt;dd itemprop=\u0026#34;title\u0026#34;\u0026gt;Owls of the Eastern Ice\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Author\u0026lt;/dt\u0026gt; \u0026lt;dd itemprop=\u0026#34;author\u0026#34;\u0026gt;Jonathan C Slaght\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Publication date\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt; \u0026lt;time itemprop=\u0026#34;datePublished\u0026#34; datetime=\u0026#34;2020-08-04\u0026#34;\u0026gt;August 4 2020\u0026lt;/time\u0026gt; \u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-itemid]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet itemid Yes 12 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes :::\nSee also # ::: section-content\nAll global attributes. Other microdata related global attributes: itemprop itemref itemscope itemtype ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid{._attribution-link} :::\n"},{"id":228,"href":"/docs/references/languages/html/global_attributes/itemprop/","title":"Itemprop","section":"HTML","content":" itemprop # ::: section-content The itemprop global attribute is used to add properties to an item. Every HTML element can have an itemprop attribute specified, and an itemprop consists of a name-value pair. Each name-value pair is called a property, and a group of one or more properties forms an item. Property values are either a string or a URL and can be associated with a very wide range of elements including \u0026lt;audio\u0026gt;, \u0026lt;embed\u0026gt;, \u0026lt;iframe\u0026gt;, \u0026lt;img\u0026gt;, \u0026lt;link\u0026gt;, \u0026lt;object\u0026gt;, \u0026lt;source\u0026gt;, \u0026lt;track\u0026gt;, and \u0026lt;video\u0026gt;. :::\nExamples # ::: section-content The example below shows the source for a set of elements marked up with itemprop attributes, followed by a table showing the resulting structured data. :::\nHTML # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;div itemscope itemtype=\u0026#34;http://schema.org/Movie\u0026#34;\u0026gt; \u0026lt;h1 itemprop=\u0026#34;name\u0026#34;\u0026gt;Avatar\u0026lt;/h1\u0026gt; \u0026lt;span\u0026gt; Director: \u0026lt;span itemprop=\u0026#34;director\u0026#34;\u0026gt;James Cameron\u0026lt;/span\u0026gt; (born August 16, 1954) \u0026lt;/span\u0026gt; \u0026lt;span itemprop=\u0026#34;genre\u0026#34;\u0026gt;Science fiction\u0026lt;/span\u0026gt; \u0026lt;a href=\u0026#34;../movies/avatar-theatrical-trailer.html\u0026#34; itemprop=\u0026#34;trailer\u0026#34;\u0026gt; Trailer \u0026lt;/a\u0026gt; ::: :::\nStructured data # ::: section-content\nItem itemprop name itemprop value itemprop name Avatar itemprop director James Cameron itemprop genre Science fiction itemprop trailer ../movies/avatar-theatrical-trailer.html ::: Properties # ::: section-content Properties have values that are either a string or a URL. When a string value is a URL, it is expressed using the \u0026lt;a\u0026gt; element and its href attribute, the \u0026lt;img\u0026gt; element and its src attribute, or other elements that link to or embed external resources. :::\nThree properties with values that are strings # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;div itemscope\u0026gt; \u0026lt;p\u0026gt;My name is \u0026lt;span itemprop=\u0026#34;name\u0026#34;\u0026gt;Neil\u0026lt;/span\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;My band is called \u0026lt;span itemprop=\u0026#34;band\u0026#34;\u0026gt;Four Parts Water\u0026lt;/span\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;I am \u0026lt;span itemprop=\u0026#34;nationality\u0026#34;\u0026gt;British\u0026lt;/span\u0026gt;.\u0026lt;/p\u0026gt; ::: :::\nOne property, \u0026quot;image\u0026quot;, whose value is a URL # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;div itemscope\u0026gt; \u0026lt;img itemprop=\u0026#34;image\u0026#34; src=\u0026#34;google-logo.png\u0026#34; alt=\u0026#34;Google\u0026#34; /\u0026gt; :::\nWhen a string value can't be easily read and understood by a person (e.g., a long string of numbers and letters), it can be displayed using the value attribute of the data element, with the more easily-understood-by-a human-version given in the element's contents (which is not part of the structured data - see example below). :::\nAn item with a property whose value is a product ID # ::: section-content The ID is not human-friendly, so the product's name is used instead.\n::: code-example [html]{.language-name}\n\u0026lt;h1 itemscope\u0026gt; \u0026lt;data itemprop=\u0026#34;product-id\u0026#34; value=\u0026#34;9678AOU879\u0026#34;\u0026gt;The Instigator 2000\u0026lt;/data\u0026gt; \u0026lt;/h1\u0026gt; :::\nFor numeric data, the meter element and its value attribute can be used. :::\nA meter element # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;div itemscope itemtype=\u0026#34;http://schema.org/Product\u0026#34;\u0026gt; \u0026lt;span itemprop=\u0026#34;name\u0026#34;\u0026gt;Panasonic White 60L Refrigerator\u0026lt;/span\u0026gt; \u0026lt;img src=\u0026#34;panasonic-fridge-60l-white.jpg\u0026#34; alt=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;div itemprop=\u0026#34;aggregateRating\u0026#34; itemscope itemtype=\u0026#34;http://schema.org/AggregateRating\u0026#34;\u0026gt; \u0026lt;meter itemprop=\u0026#34;ratingValue\u0026#34; min=\u0026#34;0\u0026#34; value=\u0026#34;3.5\u0026#34; max=\u0026#34;5\u0026#34;\u0026gt; Rated 3.5/5 \u0026lt;/meter\u0026gt; (based on \u0026lt;span itemprop=\u0026#34;reviewCount\u0026#34;\u0026gt;11\u0026lt;/span\u0026gt; customer reviews) :::\nSimilarly, for date- and time-related data, the time element and its datetime attribute can be used. :::\nAn item with one property, \u0026quot;birthday\u0026quot;, whose value is a date # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;div itemscope\u0026gt; I was born on \u0026lt;time itemprop=\u0026#34;birthday\u0026#34; datetime=\u0026#34;1984-05-10\u0026#34;\u0026gt;May 10th 1984\u0026lt;/time\u0026gt;. :::\nProperties can also be groups of name-value pairs, by putting the itemscope attribute on the element that declares the property. Each value is either a string or a group of name-value pairs (i.e. an item). :::\nAn outer item representing a person, and an inner one representing a band # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;div itemscope\u0026gt; \u0026lt;p\u0026gt;Name: \u0026lt;span itemprop=\u0026#34;name\u0026#34;\u0026gt;Amanda\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Band: \u0026lt;span itemprop=\u0026#34;band\u0026#34; itemscope\u0026gt; \u0026lt;span itemprop=\u0026#34;name\u0026#34;\u0026gt;Jazz Band\u0026lt;/span\u0026gt; (\u0026lt;span itemprop=\u0026#34;size\u0026#34;\u0026gt;12\u0026lt;/span\u0026gt; players) \u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; :::\nThe outer item above has two properties, \u0026quot;name\u0026quot; and \u0026quot;band\u0026quot;. The \u0026quot;name\u0026quot; is \u0026quot;Amanda\u0026quot;, and the \u0026quot;band\u0026quot; is an item in its own right, with two properties, \u0026quot;name\u0026quot; and \u0026quot;size\u0026quot;. The \u0026quot;name\u0026quot; of the band is \u0026quot;Jazz Band\u0026quot;, and the \u0026quot;size\u0026quot; is \u0026quot;12\u0026quot;. The outer item in this example is a top-level microdata item. Items that are not part of others are called top-level microdata items. :::\nAll the properties separated from their items # ::: section-content This example is the same as the previous one, but all the properties are separated from their items.\n::: code-example [html]{.language-name}\n\u0026lt;div itemscope id=\u0026#34;amanda\u0026#34; itemref=\u0026#34;a b\u0026#34;\u0026gt; \u0026lt;p id=\u0026#34;a\u0026#34;\u0026gt;Name: \u0026lt;span itemprop=\u0026#34;name\u0026#34;\u0026gt;Amanda\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;div id=\u0026#34;b\u0026#34; itemprop=\u0026#34;band\u0026#34; itemscope itemref=\u0026#34;c\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;c\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Band: \u0026lt;span itemprop=\u0026#34;name\u0026#34;\u0026gt;Jazz Band\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Size: \u0026lt;span itemprop=\u0026#34;size\u0026#34;\u0026gt;12\u0026lt;/span\u0026gt; players\u0026lt;/p\u0026gt; :::\nThis gives the same result as the previous example. The first item has two properties, \u0026quot;name\u0026quot;, set to \u0026quot;Amanda\u0026quot;, and \u0026quot;band\u0026quot;, set to another item. That second item has two further properties, \u0026quot;name\u0026quot;, set to \u0026quot;Jazz Band\u0026quot;, and \u0026quot;size\u0026quot;, set to \u0026quot;12\u0026quot;.\nAn item can have multiple properties with the same name and different values. :::\nIce cream with two flavors # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;div itemscope\u0026gt; \u0026lt;p\u0026gt;Flavors in my favorite ice cream:\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li itemprop=\u0026#34;flavor\u0026#34;\u0026gt;Lemon sorbet\u0026lt;/li\u0026gt; \u0026lt;li itemprop=\u0026#34;flavor\u0026#34;\u0026gt;Apricot sorbet\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; :::\nThis results in an item with two properties, both with the name \u0026quot;flavor\u0026quot; and having the values \u0026quot;Lemon sorbet\u0026quot; and \u0026quot;Apricot sorbet\u0026quot;.\nAn element introducing a property can also introduce multiple properties at once, to avoid duplication when some of the properties have the same value. :::\nAn item with two properties, \u0026quot;favorite-color\u0026quot; and \u0026quot;favorite-fruit\u0026quot;, both set to the value \u0026quot;orange\u0026quot; # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;div itemscope\u0026gt; \u0026lt;span itemprop=\u0026#34;favorite-color favorite-fruit\u0026#34; \u0026gt;orange \u0026lt;/span\u0026gt; :::\n::: {#sect1 .notecard .note} Note: There is no relationship between the microdata and the content of the document where the microdata is marked up. ::: :::\nSame structured data marked up in two different ways # ::: section-content There is no semantic difference between the following two examples\n::: code-example [html]{.language-name}\n\u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;castle.jpeg\u0026#34; /\u0026gt; \u0026lt;figcaption\u0026gt; \u0026lt;span itemscope\u0026gt;\u0026lt;span itemprop=\u0026#34;name\u0026#34;\u0026gt;The Castle\u0026lt;/span\u0026gt;\u0026lt;/span\u0026gt; (1986) \u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; :::\n::: code-example [html]{.language-name}\n\u0026lt;span itemscope\u0026gt;\u0026lt;meta itemprop=\u0026#34;name\u0026#34; content=\u0026#34;The Castle\u0026#34; /\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;castle.jpeg\u0026#34; /\u0026gt; \u0026lt;figcaption\u0026gt;The Castle (1986)\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; :::\nBoth have a figure with a caption, and both, completely unrelated to the figure, have an item with a name-value pair with the name \u0026quot;name\u0026quot; and the value \u0026quot;The Castle\u0026quot;. The only difference is that if the user drags the figcaption out of the document, the item will be included in the drag-and-drop data. The image associated with the item won't be included. :::\nNames and values # ::: section-content A property is an unordered set of unique tokens that are case-sensitive and represent the name-value pairs. The property value must have at least one token. In the example below, each data cell is a token. :::\nNames examples # ::: section-content\nItem itemprop name itemprop value itemprop country Ireland itemprop Option 2 itemprop https://www.flickr.com/photos/nlireland/6992065114/ Ring of Kerry itemprop img https://www.flickr.com/photos/nlireland/6992065114/ itemprop website flickr itemprop (token) (token) Tokens are either strings or URL's. An item is called a typed item if it is a URL. Otherwise, it is a string. Strings cannot contain a period or a colon (see below).\nIf the item is a typed item it must be either: A defined property name, or A valid URL, which refers to the vocabulary definition, or A valid URL that is used as a proprietary item property name (i.e. one not defined in a public specification), or If the item is not a typed item it must be: A string that contains no \u0026quot;.\u0026quot; (U+002E FULL STOP) characters and no \u0026quot;:\u0026quot; characters (U+003A COLON) and is used as a proprietary item property name (again, one not defined in a public specification). ::: {#sect2 .notecard .note} Note: The rules above disallow \u0026quot;:\u0026quot; characters in non-URL values because otherwise they could not be distinguished from URLs. Values with \u0026quot;.\u0026quot; characters are reserved for future extensions. Space characters are disallowed because otherwise the values would be parsed as multiple tokens. ::: :::\nValues # ::: section-content The property value of a name-value pair is as given for the first matching case in the following list:\nIf the element has an itemscope attribute The value is the item created by the element If the element is a meta element The value is the value of the element's content attribute If the element is an audio, embed, iframe, img, source, track, or video element The value is the resulting URL string that results from parsing the value of the element's src attribute relative to the node document (part of the Microdata DOM API) of the element at the time the attribute is set If the element is an a, area, or link element The value is the resulting URL string that results from parsing the value of the element's href attribute relative to the node document of the element at the time the attribute is set If the element is an object element The value is the resulting URL string that results from parsing the value of the element's data attribute relative to the node document of the element at the time the attribute is set If the element is a data element The value is the value of the element's value attribute If the element is a meter element The value is the value of the element's value attribute If the element is a time element The value is the element's datetime value Otherwise\nThe value is the element's textContent. If a property's value is a URL, the property must be specified using a URL property element. The URL property elements are the a, area, audio, embed, iframe, img, link, object, source, track, and video elements. :::\nName order # ::: section-content Names are unordered relative to each other, but if a particular name has multiple values, they do have a relative order.\nIn the following example, the \u0026quot;a\u0026quot; property has the values \u0026quot;1\u0026quot; and \u0026quot;2\u0026quot;, in that order, but whether the \u0026quot;a\u0026quot; property comes before the \u0026quot;b\u0026quot; property or not is not important.\n::: code-example [html]{.language-name}\n\u0026lt;div itemscope\u0026gt; \u0026lt;p itemprop=\u0026#34;a\u0026#34;\u0026gt;1\u0026lt;/p\u0026gt; \u0026lt;p itemprop=\u0026#34;a\u0026#34;\u0026gt;2\u0026lt;/p\u0026gt; \u0026lt;p itemprop=\u0026#34;b\u0026#34;\u0026gt;test\u0026lt;/p\u0026gt; :::\nHere are several equivalent examples:\n::: code-example [html]{.language-name}\n\u0026lt;div itemscope\u0026gt; \u0026lt;p itemprop=\u0026#34;b\u0026#34;\u0026gt;test\u0026lt;/p\u0026gt; \u0026lt;p itemprop=\u0026#34;a\u0026#34;\u0026gt;1\u0026lt;/p\u0026gt; \u0026lt;p itemprop=\u0026#34;a\u0026#34;\u0026gt;2\u0026lt;/p\u0026gt; :::\n::: code-example [html]{.language-name}\n\u0026lt;div itemscope\u0026gt; \u0026lt;p itemprop=\u0026#34;a\u0026#34;\u0026gt;1\u0026lt;/p\u0026gt; \u0026lt;p itemprop=\u0026#34;b\u0026#34;\u0026gt;test\u0026lt;/p\u0026gt; \u0026lt;p itemprop=\u0026#34;a\u0026#34;\u0026gt;2\u0026lt;/p\u0026gt; :::\n::: code-example [html]{.language-name}\n\u0026lt;div id=\u0026#34;x\u0026#34;\u0026gt; \u0026lt;p itemprop=\u0026#34;a\u0026#34;\u0026gt;1\u0026lt;/p\u0026gt; \u0026lt;div itemscope itemref=\u0026#34;x\u0026#34;\u0026gt; \u0026lt;p itemprop=\u0026#34;b\u0026#34;\u0026gt;test\u0026lt;/p\u0026gt; \u0026lt;p itemprop=\u0026#34;a\u0026#34;\u0026gt;2\u0026lt;/p\u0026gt; ::: :::\nRepresenting structured data for a book # ::: section-content This example uses microdata attributes to represent the following structured data:\nitemscope itemtype: itemid https://schema.org/Book: urn:isbn:0-374-22848-5 itemprop title Owls of the Eastern Ice itemprop author Jonathan C Slaght itemprop datePublished 2020-08-04 HTML # ::: code-example [html]{.language-name}\n\u0026lt;dl itemscope itemtype=\u0026#34;https://schema.org/Book\u0026#34; itemid=\u0026#34;urn:isbn:0-374-22848-5\u0026lt;\u0026#34;\u0026gt; \u0026lt;dt\u0026gt;Title\u0026lt;/dt\u0026gt; \u0026lt;dd itemprop=\u0026#34;title\u0026#34;\u0026gt;Owls of the Eastern Ice\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Author\u0026lt;/dt\u0026gt; \u0026lt;dd itemprop=\u0026#34;author\u0026#34;\u0026gt;Jonathan C Slaght\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Publication date\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt; \u0026lt;time itemprop=\u0026#34;datePublished\u0026#34; datetime=\u0026#34;2020-08-04\u0026#34;\u0026gt;August 4 2020\u0026lt;/time\u0026gt; \u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# names:-the-itemprop-attribute]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet itemprop Yes 12 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes :::\nSee also # ::: section-content\nOther different global attributes Other microdata related global attributes: itemid itemref itemscope itemtype ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop{._attribution-link} :::\n"},{"id":229,"href":"/docs/references/languages/html/global_attributes/itemref/","title":"Itemref","section":"HTML","content":" itemref # ::: section-content Properties that are not descendants of an element with the itemscope attribute can be associated with an item using the global attribute itemref.\nitemref provides a list of element IDs (not itemids) elsewhere in the document, with additional properties\nThe itemref attribute can only be specified on elements that have an itemscope attribute specified.\n::: {#sect1 .notecard .note} Note: The itemref attribute is not part of the microdata data model. It is merely a syntactic construct to aid authors in adding annotations to pages where the data to be annotated does not follow a convenient tree structure. For example, it allows authors to mark up data in a table so that each column defines a separate item while keeping the properties in the cells. ::: :::\nExamples # Representing structured data for a band # ::: section-content This example uses microdata attributes to represent the following structured data (in JSON-LD{target=\u0026quot;_blank\u0026quot;} format):\n::: code-example [json]{.language-name}\n{ \u0026#34;@id\u0026#34;: \u0026#34;amanda\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Amanda\u0026#34;, \u0026#34;band\u0026#34;: { \u0026#34;@id\u0026#34;: \u0026#34;b\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Jazz Band\u0026#34;, \u0026#34;size\u0026#34;: 12 } } :::\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;div itemscope id=\u0026#34;amanda\u0026#34; itemref=\u0026#34;a b\u0026#34;\u0026gt; \u0026lt;p id=\u0026#34;a\u0026#34;\u0026gt;Name: \u0026lt;span itemprop=\u0026#34;name\u0026#34;\u0026gt;Amanda\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;div id=\u0026#34;b\u0026#34; itemprop=\u0026#34;band\u0026#34; itemscope itemref=\u0026#34;c\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;c\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Band: \u0026lt;span itemprop=\u0026#34;name\u0026#34;\u0026gt;Jazz Band\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Size: \u0026lt;span itemprop=\u0026#34;size\u0026#34;\u0026gt;12\u0026lt;/span\u0026gt; players\u0026lt;/p\u0026gt; :::\nResult # ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-itemref]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet itemref Yes 12 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes :::\nSee also # ::: section-content\nOther different global attributes Other microdata related global attributes: itemid itemprop itemscope itemtype ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref{._attribution-link} :::\n"},{"id":230,"href":"/docs/references/languages/html/global_attributes/itemscope/","title":"Itemscope","section":"HTML","content":" itemscope # ::: section-content itemscope is a boolean global attribute that defines the scope of associated metadata. Specifying the itemscope attribute for an element creates a new item, which results in a number of name-value pairs that are associated with the element.\nA related attribute, itemtype, is used to specify the valid URL of a vocabulary (such as schema.org{target=\u0026quot;_blank\u0026quot;}) that describes the item and its properties context. In each of the following examples, the vocabulary is from schema.org{target=\u0026quot;_blank\u0026quot;}.\nEvery HTML element may have an itemscope attribute specified. An itemscope element that does not have an associated itemtype must have an associated itemref.\n::: {#sect1 .notecard .note} Note: Find more about itemtype attributes at https://schema.org/Thing{target=\u0026quot;_blank\u0026quot;} ::: :::\nitemscope id attributes # ::: section-content When you specify the itemscope attribute for an element, a new item is created. The item consists of a group of name-value pairs. For elements with an itemscope attribute and an itemtype attribute, you may also specify an id attribute. You can use the id attribute to set a global identifier for the new item. A global identifier allows the item to relate to other items found on pages across the Web. :::\nExamples # Representing structured data for a movie # ::: section-content The following example specifies the itemtype as \u0026quot; http://schema.org/Movie{target=\u0026quot;_blank\u0026quot;}\u0026quot;, and specifies four related itemprop attributes.\nitemscope Itemtype Movie itemprop (itemprop name) (itemprop value) itemprop director James Cameron itemprop genre Science Fiction itemprop name Avatar itemprop Trailer https://youtu.be/0AY1XIkX7bY ::: code-example [html]{.language-name}\n\u0026lt;div itemscope itemtype=\u0026#34;https://schema.org/Movie\u0026#34;\u0026gt; \u0026lt;h1 itemprop=\u0026#34;name\u0026#34;\u0026gt;Avatar\u0026lt;/h1\u0026gt; \u0026lt;span\u0026gt; Director: \u0026lt;span itemprop=\u0026#34;director\u0026#34;\u0026gt;James Cameron\u0026lt;/span\u0026gt; (born August 16, 1954) \u0026lt;/span\u0026gt; \u0026lt;span itemprop=\u0026#34;genre\u0026#34;\u0026gt;Science fiction\u0026lt;/span\u0026gt; \u0026lt;a href=\u0026#34;https://youtu.be/0AY1XIkX7bY\u0026#34; itemprop=\u0026#34;trailer\u0026#34;\u0026gt;Trailer\u0026lt;/a\u0026gt; ::: :::\nRepresenting structured data for a recipe # ::: section-content There are four itemscope attributes in the following example. Each itemscope attribute sets the scope of its corresponding itemtype attribute. The itemtypes, Recipe, AggregateRating, and NutritionInformation in the following example are part of the schema.org structured data for a recipe, as specified by the first itemtype, http://schema.org/Recipe.\nitemscope itemtype Recipe itemprop name Grandma's Holiday Apple Pie itemprop image https://c1.staticflickr.com/1/30/42759561_8631e2f905_n.jpg itemprop datePublished 2022-11-05 itemprop description This is my grandmother's apple pie recipe. I like to add a dash of nutmeg. itemprop prepTime PT30M itemprop cookTime PT1H itemprop totalTime PT1H30M itemprop recipeYield 1 9\" pie (8 servings) itemprop recipeIngredient Thinly-sliced apples: 6 cups itemprop recipeIngredient White sugar: 3/4 cup itemprop recipeInstructions 1. Cut and peel apples 2. Mix sugar and cinnamon. Use additional sugar for tart apples. itemprop author [Person] itemprop name Carol Smith itemscope itemprop[itemtype] aggregateRating [AggregateRating] itemprop ratingValue 4.0 itemprop reviewCount 35 itemscope itemprop[itemtype] nutrition [NutritionInformation] itemprop servingSize 1 medium slice itemprop calories 250 cal itemprop fatContent 12 g ::: {#sect2 .notecard .note} Note: A handy tool for extracting microdata structures from HTML is Google's Rich Results Testing Tool{target=\u0026quot;_blank\u0026quot;}. Try it on the HTML shown here. :::\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;div itemscope itemtype=\u0026#34;https://schema.org/Recipe\u0026#34;\u0026gt; \u0026lt;h2 itemprop=\u0026#34;name\u0026#34;\u0026gt;Grandma\u0026#39;s Holiday Apple Pie\u0026lt;/h2\u0026gt; \u0026lt;img itemprop=\u0026#34;image\u0026#34; src=\u0026#34;https://c1.staticflickr.com/1/30/42759561_8631e2f905_n.jpg\u0026#34; width=\u0026#34;50\u0026#34; height=\u0026#34;50\u0026#34; /\u0026gt; \u0026lt;p\u0026gt; By \u0026lt;span itemprop=\u0026#34;author\u0026#34; itemscope itemtype=\u0026#34;https://schema.org/Person\u0026#34;\u0026gt; \u0026lt;span itemprop=\u0026#34;name\u0026#34;\u0026gt;Carol Smith\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Published: \u0026lt;time datetime=\u0026#34;2022-11-05\u0026#34; itemprop=\u0026#34;datePublished\u0026#34;\u0026gt; November 5, 20022 \u0026lt;/time\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;span itemprop=\u0026#34;description\u0026#34;\u0026gt; This is my grandmother\u0026#39;s apple pie recipe. I like to add a dash of nutmeg. \u0026lt;/span\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;span itemprop=\u0026#34;aggregateRating\u0026#34; itemscope itemtype=\u0026#34;https://schema.org/AggregateRating\u0026#34;\u0026gt; \u0026lt;span itemprop=\u0026#34;ratingValue\u0026#34;\u0026gt;4.0\u0026lt;/span\u0026gt; stars based on \u0026lt;span itemprop=\u0026#34;reviewCount\u0026#34;\u0026gt;35\u0026lt;/span\u0026gt; reviews \u0026lt;/span\u0026gt; \u0026lt;br /\u0026gt; Prep time: \u0026lt;time datetime=\u0026#34;PT30M\u0026#34; itemprop=\u0026#34;prepTime\u0026#34;\u0026gt;30 min\u0026lt;/time\u0026gt; \u0026lt;br /\u0026gt; Cook time: \u0026lt;time datetime=\u0026#34;PT1H\u0026#34; itemprop=\u0026#34;cookTime\u0026#34;\u0026gt;1 hour\u0026lt;/time\u0026gt; \u0026lt;br /\u0026gt; Total time: \u0026lt;time datetime=\u0026#34;PT1H30M\u0026#34; itemprop=\u0026#34;totalTime\u0026#34;\u0026gt;1 hour 30 min\u0026lt;/time\u0026gt; \u0026lt;br /\u0026gt; Yield: \u0026lt;span itemprop=\u0026#34;recipeYield\u0026#34;\u0026gt;1 9\u0026#34; pie (8 servings)\u0026lt;/span\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;span itemprop=\u0026#34;nutrition\u0026#34; itemscope itemtype=\u0026#34;https://schema.org/NutritionInformation\u0026#34;\u0026gt; Serving size: \u0026lt;span itemprop=\u0026#34;servingSize\u0026#34;\u0026gt;1 medium slice\u0026lt;/span\u0026gt;\u0026lt;br /\u0026gt; Calories per serving: \u0026lt;span itemprop=\u0026#34;calories\u0026#34;\u0026gt;250 cal\u0026lt;/span\u0026gt;\u0026lt;br /\u0026gt; Fat per serving: \u0026lt;span itemprop=\u0026#34;fatContent\u0026#34;\u0026gt;12 g\u0026lt;/span\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;p\u0026gt; Ingredients:\u0026lt;br /\u0026gt; \u0026lt;span itemprop=\u0026#34;recipeIngredient\u0026#34;\u0026gt;Thinly-sliced apples: 6 cups\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span itemprop=\u0026#34;recipeIngredient\u0026#34;\u0026gt;White sugar: 3/4 cup\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt; … \u0026lt;/p\u0026gt; Directions: \u0026lt;br /\u0026gt; \u0026lt;div itemprop=\u0026#34;recipeInstructions\u0026#34;\u0026gt; 1. Cut and peel apples\u0026lt;br /\u0026gt; 2. Mix sugar and cinnamon. Use additional sugar for tart apples. \u0026lt;br /\u0026gt; … :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-itemscope]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet itemscope Yes 12 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes :::\nSee also # ::: section-content\nOther different global attributes Other microdata related global attributes: itemid itemprop itemref itemtype ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope{._attribution-link} :::\n"},{"id":231,"href":"/docs/references/languages/html/global_attributes/itemtype/","title":"Itemtype","section":"HTML","content":" itemtype # ::: section-content The global attribute itemtype specifies the URL of the vocabulary that will be used to define itemprop's (item properties) in the data structure.\nitemscope is used to set the scope of where in the data structure the vocabulary set by itemtype will be active.\nGoogle and other major search engines support the schema.org{target=\u0026quot;_blank\u0026quot;} vocabulary for structured data. This vocabulary defines a standard set of type names and property names. For example, MusicEvent indicates a concert performance, with startDate{target=\u0026quot;_blank\u0026quot;} and location{target=\u0026quot;_blank\u0026quot;} properties specifying the concert's key details. In this case, MusicEvent{target=\u0026quot;_blank\u0026quot;} would be the URL used by itemtype, with startDate and location as itemprop's which MusicEvent{target=\u0026quot;_blank\u0026quot;} defines.\n::: {#sect1 .notecard .note} Note: More about itemtype attributes can be found at https://schema.org/Thing{target=\u0026quot;_blank\u0026quot;} :::\nThe itemtype attribute must have a value that is an unordered set of unique tokens which are case-sensitive, each is a valid and absolute URL, and all defined to use the same vocabulary. The attribute's value must have at least one token. The item types must all be types defined in applicable specifications (such as schema.org{target=\u0026quot;_blank\u0026quot;}), and must all be defined to use the same vocabulary. The itemtype attribute can only be specified on elements which have an itemscope attribute specified. The itemid attribute can only be specified on elements which have both an itemscope attribute and an itemtype attribute specified. They must only be specified on elements with an itemscope attribute, whose itemtype attribute specifies a vocabulary not supporting global identifiers for items, as defined by that vocabulary's specification. The exact meaning of a global identifier is determined by the vocabulary's specification. It is left to such specifications to define whether multiple items of the same global identifier (whether on the same page or different pages) are allowed to exist, and what processing rules for that vocabulary are, with respect to handling the case of multiple items with the same ID. ::: Examples # Representing structured data for a product # ::: section-content This example uses microdata attributes to represent structured data for a product, as follows:\nitemscope itemtype Product (http://schema.org/Product) itemprop name Executive Anvil itemprop image https://pixabay.com/static/uploads/photo/2015/09/05/18/15/suitcase-924605_960_720.png itemprop description Sleeker than ACME's Classic Anvil, the Executive Anvil is perfect for the business traveler looking for something to drop from a height. itemprop mpn 925872 itemprop brand [Thing] itemprop name ACME itemscope itemprop[itemtype] aggregateRating[AggregateRating] itemprop ratingValue 4.4 itemprop reviewCount 89 itemprop offers [Offer] http://schema.org/Offer itemprop priceCurrency USD itemprop price 119.99 itemprop priceValidUntil 2020-11-05 itemprop itemCondition http://schema.org/UsedCondition itemprop availability http://schema.org/InStock itemscope itemprop[itemtype] seller [Organization] http://schema.org/Organization itemprop name Executive Objects ::: {#sect2 .notecard .note} Note: A handy tool for extracting microdata structures from HTML is Google's Structured Data Testing Tool{target=\u0026quot;_blank\u0026quot;}. Try it on the HTML shown here. :::\nHTML # ::: code-example [html]{.language-name}\n\u0026lt;div itemscope itemtype=\u0026#34;http://schema.org/Product\u0026#34;\u0026gt; \u0026lt;span itemprop=\u0026#34;brand\u0026#34;\u0026gt;ACME\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span itemprop=\u0026#34;name\u0026#34;\u0026gt;Executive Anvil\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;img itemprop=\u0026#34;image\u0026#34; src=\u0026#34;https://pixabay.com/static/uploads/photo/2015/09/05/18/15/suitcase-924605_960_720.png\u0026#34; width=\u0026#34;50\u0026#34; height=\u0026#34;50\u0026#34; alt=\u0026#34;Executive Anvil logo\u0026#34; /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;span itemprop=\u0026#34;description\u0026#34;\u0026gt; Sleeker than ACME\u0026#39;s Classic Anvil, the Executive Anvil is perfect for the business traveler looking for something to drop from a height. \u0026lt;br /\u0026gt; \u0026lt;/span\u0026gt; Product #: \u0026lt;span itemprop=\u0026#34;mpn\u0026#34;\u0026gt;925872\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span itemprop=\u0026#34;aggregateRating\u0026#34; itemscope itemtype=\u0026#34;http://schema.org/AggregateRating\u0026#34;\u0026gt; Rating: \u0026lt;span itemprop=\u0026#34;ratingValue\u0026#34;\u0026gt;4.4\u0026lt;/span\u0026gt; stars, based on \u0026lt;span itemprop=\u0026#34;reviewCount\u0026#34;\u0026gt;89 \u0026lt;/span\u0026gt; reviews \u0026lt;/span\u0026gt; \u0026lt;p\u0026gt; \u0026lt;span itemprop=\u0026#34;offers\u0026#34; itemscope itemtype=\u0026#34;http://schema.org/Offer\u0026#34;\u0026gt; Regular price: $179.99\u0026lt;br /\u0026gt; \u0026lt;meta itemprop=\u0026#34;priceCurrency\u0026#34; content=\u0026#34;USD\u0026#34; /\u0026gt; \u0026lt;span itemprop=\u0026#34;price\u0026#34;\u0026gt;Sale price: $119.99\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt; (Sale ends \u0026lt;time itemprop=\u0026#34;priceValidUntil\u0026#34; datetime=\u0026#34;2020-11-05\u0026#34;\u0026gt;5 November!\u0026lt;/time\u0026gt;) \u0026lt;br /\u0026gt; Available from: \u0026lt;span itemprop=\u0026#34;seller\u0026#34; itemscope itemtype=\u0026#34;http://schema.org/Organization\u0026#34;\u0026gt; \u0026lt;span itemprop=\u0026#34;name\u0026#34;\u0026gt;Executive Objects\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; Condition: \u0026lt;link itemprop=\u0026#34;itemCondition\u0026#34; href=\u0026#34;http://schema.org/UsedCondition\u0026#34; /\u0026gt;Previously owned, in excellent condition\u0026lt;br /\u0026gt; \u0026lt;link itemprop=\u0026#34;availability\u0026#34; href=\u0026#34;http://schema.org/InStock\u0026#34; /\u0026gt;In stock! Order now! \u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; :::\nResult # ::: {#sect3 .code-example} ::: iframe ::: ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-itemtype]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet itemtype Yes 12 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes :::\nSee also # ::: section-content\nOther different global attributes Other microdata related global attributes: itemid itemprop itemref itemscope ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype{._attribution-link} :::\n"},{"id":232,"href":"/docs/references/languages/html/global_attributes/lang/","title":"Lang","section":"HTML","content":" lang # ::: section-content The lang global attribute helps define the language of an element: the language that non-editable elements are written in, or the language that the editable elements should be written in by the user. The attribute contains a single \u0026quot;language tag\u0026quot; in the format defined in RFC 5646: Tags for Identifying Languages (also known as BCP 47){target=\u0026quot;_blank\u0026quot;}.\n::: {#sect1 .notecard .note} Note: The default value of lang is unknown, therefore it is recommended to always specify this attribute with the appropriate value. ::: :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: lang # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} This paragraph is English, but the language is not specifically defined.\n\u0026lt;p lang=\u0026quot;en-GB\u0026quot;\u0026gt;This paragraph is defined as British English.\u0026lt;/p\u0026gt; \u0026lt;p lang=\u0026quot;fr\u0026quot;\u0026gt;Ce paragraphe est défini en français.\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p::before { padding-right: 5px; }\n[lang='en-GB']::before { content: '(In British English) '; } [lang='fr']::before { content: '(In French) '; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nIf the attribute value is the empty string (lang=\u0026quot;\u0026quot;), the language is set to unknown; if the language tag is not valid according to BCP47, it is set to invalid.\nEven if the lang attribute is set, it may not be taken into account, as the xml:lang attribute has priority.\nFor the CSS pseudo-class :lang, two invalid language names are different if their names are different. So while :lang(es) matches both lang=\u0026quot;es-ES\u0026quot; and lang=\u0026quot;es-419\u0026quot;, :lang(xyzzy) would not match lang=\u0026quot;xyzzy-Zorp!\u0026quot;. :::\nLanguage tag syntax # ::: section-content The full BCP47 syntax is in-depth enough to mark extremely specific language dialects, but most usage is much simpler.\nA language tag is made of hyphen-separated language subtags, where each subtag indicates a certain property of the language. The 3 most common subtags are:\nLanguage subtag Required. A 2-or-3-character code that defines the basic language, typically written in all lowercase. For example, the language code for English is en, and the code for Badeshi is bdz.\nScript subtag Optional. This subtag defines the writing system used for the language, and is always 4 characters long, with the first letter capitalized. For example, French-in-Braille is fr-Brai and ja-Kana is Japanese written with the Katakana alphabet. If the language is written in a highly typical way, like English in the Latin alphabet, there is no need to use this subtag.\nRegion subtag Optional. This subtag defines a dialect of the base language from a particular location, and is either 2 letters in ALLCAPS matching a country code, or 3 numbers matching a non-country area. For example, es-ES is for Spanish as spoken in Spain, and es-013 is Spanish as spoken in Central America. \u0026quot;International Spanish\u0026quot; would just be es.\nThe script subtag precedes the region subtag if both are present \u0026mdash; ru-Cyrl-BY is Russian, written in the Cyrillic alphabet, as spoken in Belarus.\nTo find the correct subtag codes for a language, try the Language Subtag Lookup{target=\u0026quot;_blank\u0026quot;}. :::\nAccessibility # ::: section-content WCAG Success Criterion 3.1.1 requires that a page language is specified in a way which may be 'programmatically determined' (i.e. via the lang attribute).\nWCAG Success Criterion 3.1.2 requires that pages with parts in different languages have the languages of those parts specified too. Again, the lang attribute is the correct mechanism for this.\nThe purpose of these requirements is primarily to allow assistive technologies such as screen readers to invoke the correct pronunciation.\nFor example, the language menu on this site (MDN) includes a lang attribute for each entry:\n::: code-example [html]{.language-name}\n\u0026lt;div class=\u0026#34;dropdown-container language-menu\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;header-language-menu\u0026#34; type=\u0026#34;button\u0026#34; class=\u0026#34;dropdown-menu-label\u0026#34; aria-haspopup=\u0026#34;true\u0026#34; aria-owns=\u0026#34;language-menu\u0026#34; aria-label=\u0026#34;Current language is English. Choose your preferred language.\u0026#34;\u0026gt; English \u0026lt;span class=\u0026#34;dropdown-arrow-down\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;▼\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;ul id=\u0026#34;language-menu\u0026#34; class=\u0026#34;dropdown-menu-items right show\u0026#34; aria-expanded=\u0026#34;true\u0026#34; role=\u0026#34;menu\u0026#34;\u0026gt; \u0026lt;li lang=\u0026#34;ca\u0026#34; role=\u0026#34;menuitem\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/ca/docs/Web/HTML/Global_attributes/lang\u0026#34; title=\u0026#34;Catalan\u0026#34;\u0026gt; \u0026lt;bdi\u0026gt;Català\u0026lt;/bdi\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li lang=\u0026#34;de\u0026#34; role=\u0026#34;menuitem\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/de/docs/Web/HTML/Globale_Attribute/lang\u0026#34; title=\u0026#34;German\u0026#34;\u0026gt; \u0026lt;bdi\u0026gt;Deutsch\u0026lt;/bdi\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li lang=\u0026#34;es\u0026#34; role=\u0026#34;menuitem\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/es/docs/Web/HTML/Atributos_Globales/lang\u0026#34; title=\u0026#34;Spanish\u0026#34;\u0026gt; \u0026lt;bdi\u0026gt;Español\u0026lt;/bdi\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li lang=\u0026#34;fr\u0026#34; role=\u0026#34;menuitem\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/fr/docs/Web/HTML/Attributs_universels/lang\u0026#34; title=\u0026#34;French\u0026#34;\u0026gt; \u0026lt;bdi\u0026gt;Français\u0026lt;/bdi\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li lang=\u0026#34;ja\u0026#34; role=\u0026#34;menuitem\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/ja/docs/Web/HTML/Global_attributes/lang\u0026#34; title=\u0026#34;Japanese\u0026#34;\u0026gt; \u0026lt;bdi\u0026gt;日本語\u0026lt;/bdi\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li lang=\u0026#34;ko\u0026#34; role=\u0026#34;menuitem\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/ko/docs/Web/HTML/Global_attributes/lang\u0026#34; title=\u0026#34;Korean\u0026#34;\u0026gt; \u0026lt;bdi\u0026gt;한국어\u0026lt;/bdi\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li lang=\u0026#34;pt-BR\u0026#34; role=\u0026#34;menuitem\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/pt-BR/docs/Web/HTML/Global_attributes/lang\u0026#34; title=\u0026#34;Portuguese (Brazilian)\u0026#34;\u0026gt; \u0026lt;bdi\u0026gt;Português (do\u0026amp;nbsp;Brasil)\u0026lt;/bdi\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li lang=\u0026#34;ru\u0026#34; role=\u0026#34;menuitem\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/ru/docs/Web/HTML/Global_attributes/lang\u0026#34; title=\u0026#34;Russian\u0026#34;\u0026gt; \u0026lt;bdi\u0026gt;Русский\u0026lt;/bdi\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li lang=\u0026#34;uk\u0026#34; role=\u0026#34;menuitem\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/uk/docs/Web/HTML/%D0%97%D0%B0%D0%B3%D0%B0%D0%BB%D1%8C%D0%BD%D1%96_%D0%B0%D1%82%D1%80%D0%B8%D0%B1%D1%83%D1%82%D0%B8/lang\u0026#34; title=\u0026#34;Ukrainian\u0026#34;\u0026gt; \u0026lt;bdi\u0026gt;Українська\u0026lt;/bdi\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li lang=\u0026#34;zh-Hans\u0026#34; role=\u0026#34;menuitem\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/zh-CN/docs/Web/HTML/Global_attributes/lang\u0026#34; title=\u0026#34;Chinese (Simplified)\u0026#34;\u0026gt; \u0026lt;bdi\u0026gt;中文 (简体)\u0026lt;/bdi\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;/en-US/docs/Web/HTML/Global_attributes/lang$locales\u0026#34; rel=\u0026#34;nofollow\u0026#34; id=\u0026#34;translations-add\u0026#34;\u0026gt; Add a translation \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-lang]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet lang 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nAll global attributes. Content-Language HTTP Header HTML translate attribute ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang{._attribution-link} :::\n"},{"id":233,"href":"/docs/references/languages/html/global_attributes/nonce/","title":"Nonce","section":"HTML","content":" nonce # ::: section-content The nonce global attribute is a content attribute defining a cryptographic nonce (\u0026quot;number used once\u0026quot;) which can be used by Content Security Policy to determine whether or not a given fetch will be allowed to proceed for a given element. :::\nDescription # ::: section-content The nonce attribute is useful to allowlist specific elements, such as a particular inline script or style elements. It can help you to avoid using the CSP unsafe-inline directive, which would allowlist all inline scripts or styles.\n::: {#sect1 .notecard .note} Note: Only use nonce for cases where you have no way around using unsafe inline script or style contents. If you don't need nonce, don't use it. If your script is static, you could also use a CSP hash instead. (See usage notes on unsafe inline script.) Always try to take full advantage of CSP protections and avoid nonces or unsafe inline scripts whenever possible. ::: :::\nUsing nonce to allowlist a \u0026lt;script\u0026gt; element # ::: section-content There are a few steps involved to allowlist an inline script using the nonce mechanism:\nGenerating values # From your web server, generate a random base64-encoded string of at least 128 bits of data from a cryptographically secure random number generator. Nonces should be generated differently each time the page loads (nonce only once!). For example, in nodejs:\n::: code-example [js]{.language-name}\nconst crypto = require(\u0026#34;crypto\u0026#34;); crypto.randomBytes(16).toString(\u0026#34;base64\u0026#34;); // \u0026#39;8IBTHwOdqNKAWeKl7plt8g==\u0026#39; :::\nAllowlisting inline script # The nonce generated on your backend code should now be used for the inline script that you'd like to allowlist:\n::: code-example [html]{.language-name}\n\u0026lt;script nonce=\u0026#34;8IBTHwOdqNKAWeKl7plt8g==\u0026#34;\u0026gt; // … \u0026lt;/script\u0026gt; :::\nSending a nonce with a CSP header # Finally, you'll need to send the nonce value in a Content-Security-Policy header (prepend nonce-):\n::: code-example [http]{.language-name}\nContent-Security-Policy: script-src \u0026#39;nonce-8IBTHwOdqNKAWeKl7plt8g==\u0026#39; ::: :::\nAccessing nonces and nonce hiding # ::: section-content For security reasons, the nonce content attribute is hidden (an empty string will be returned).\n::: code-example [js]{.language-name}\nscript.getAttribute(\u0026#34;nonce\u0026#34;); // returns empty string :::\nThe nonce property is the only way to access nonces:\n::: code-example [js]{.language-name}\nscript.nonce; // returns nonce value :::\nNonce hiding helps prevent attackers from exfiltrating nonce data via mechanisms that can grab data from content attributes like this:\n::: code-example [css]{.language-name}\nscript[nonce~=\u0026#34;whatever\u0026#34;] { background: url(\u0026#34;https://evil.com/nonce?whatever\u0026#34;); } ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-nonce]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet nonce Yes Yes 31 No Yes Yes Yes Yes 31 Yes Yes Yes nonce_hiding 61 79 75 No 48 No 61 61 79 45 No 8.0 :::\nSee also # ::: section-content\nHTMLElement.nonce Content Security Policy CSP: script-src ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce{._attribution-link} :::\n"},{"id":234,"href":"/docs/references/languages/html/global_attributes/part/","title":"Part","section":"HTML","content":" part # ::: section-content The part global attribute contains a space-separated list of the part names of the element. Part names allows CSS to select and style specific elements in a shadow tree via the ::part pseudo-element.\nSee our Shadow part example{target=\u0026quot;_blank\u0026quot;} for a usage example. :::\nSpecifications # ::: _table # Specification # CSS Shadow Parts\n[# part-attr]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet part 73 79 72 No 60 13.1 73 73 79 52 13.4 11.0 :::\nSee also # ::: section-content\nAll global attributes. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part{._attribution-link} :::\n"},{"id":235,"href":"/docs/references/languages/html/global_attributes/popover/","title":"Popover","section":"HTML","content":" popover # ::: section-content The popover global attribute is used to designate an element as a popover element.\nPopover elements are hidden via display: none until opened via an invoking/control element (i.e. a \u0026lt;button\u0026gt; or \u0026lt;input type=\u0026quot;button\u0026quot;\u0026gt; with a popovertarget attribute) or a HTMLElement.showPopover() call.\nWhen open, popover elements will appear above all other elements in the top layer, and won't be influenced by parent elements' position or overflow styling.\nA popover attribute can have values \u0026quot;auto\u0026quot; (default) or \u0026quot;manual\u0026quot;. Popovers that have the auto state can be \u0026quot;light dismissed\u0026quot; by selecting outside the popover area, and generally only allow one popover to be displayed on-screen at a time. By contrast, manual popovers must always be explicitly hidden, but allow for use cases such as nested popovers in menus.\nFor detailed information on usage, see the Popover API landing page. :::\nExamples # ::: section-content The following will render a button which will open a popover element.\n::: code-example [html]{.language-name}\n\u0026lt;button popovertarget=\u0026#34;my-popover\u0026#34;\u0026gt;Open Popover\u0026lt;/button\u0026gt; \u0026lt;div popover id=\u0026#34;my-popover\u0026#34;\u0026gt;Greetings, one and all! :::\n::: {#sect1 .notecard .note} Note: See our Popover API examples landing page{target=\u0026quot;_blank\u0026quot;} to access the full collection of MDN popover examples. ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-popover-attribute]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet popover 114 114 114 No 100 17 114 114 No No 17 No :::\nSee also # ::: section-content\nPopover API ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover{._attribution-link} :::\n"},{"id":236,"href":"/docs/references/languages/html/global_attributes/slot/","title":"Slot","section":"HTML","content":" slot # ::: section-content The slot global attribute assigns a slot in a shadow DOM shadow tree to an element: An element with a slot attribute is assigned to the slot created by the \u0026lt;slot\u0026gt; element whose name attribute's value matches that slot attribute's value.\nFor examples, see our Using templates and slots guide. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-slot]{.small}\nDOM Standard\n[# ref-for-dom-element-slot①]{.small} # :::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet slot 53 ≤79 63 No 40 10 53 53 63 41 10 6.0 :::\nSee also # ::: section-content\nHTML global attributes HTML \u0026lt;slot\u0026gt; element HTML \u0026lt;template\u0026gt; element CSS ::slotted pseudo-element CSS scoping module Web components ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot{._attribution-link} :::\n"},{"id":237,"href":"/docs/references/languages/html/global_attributes/spellcheck/","title":"Spellcheck","section":"HTML","content":" spellcheck # ::: section-content The spellcheck global attribute is an enumerated attribute that defines whether the element may be checked for spelling errors. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: spellcheck # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} This exampull will be checkd fur spellung when you try to edit it.\n\u0026lt;p contenteditable spellcheck=\u0026quot;false\u0026quot;\u0026gt;This exampull will nut be checkd fur spellung when you try to edit it.\u0026lt;/p\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nIt may have the following values:\nempty string or true, which indicates that the element should be, if possible, checked for spelling errors; false, which indicates that the element should not be checked for spelling errors. If this attribute is not set, its default value is element-type and browser-defined. This default value may also be inherited, which means that the element content will be checked for spelling errors only if its nearest ancestor has a spellcheck state of true.\nThis attribute is merely a hint for the browser: browsers are not required to check for spelling errors. Typically non-editable elements are not checked for spelling errors, even if the spellcheck attribute is set to true and the browser supports spellchecking. :::\nSecurity and privacy concerns # ::: section-content Using spellchecking can have consequences for users' security and privacy. The specification does not regulate how spellchecking is done and the content of the element may be sent to a third party for spellchecking results (see enhanced spellchecking and \u0026quot;spell-jacking\u0026quot;{target=\u0026quot;_blank\u0026quot;}).\nYou should consider setting spellcheck to false for elements that can contain sensitive information. :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-spellcheck]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet spellcheck 9 12 Yes 11 Yes Yes 47 47 57 37 9.3 5.0 :::\nSee also # ::: section-content\nAll global attributes. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck{._attribution-link} :::\n"},{"id":238,"href":"/docs/references/languages/html/global_attributes/style/","title":"Style","section":"HTML","content":" style # ::: section-content The style global attribute contains CSS styling declarations to be applied to the element. Note that it is recommended for styles to be defined in a separate file or files. This attribute and the \u0026lt;style\u0026gt; element have mainly the purpose of allowing for quick styling, for example for testing purposes. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: style # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Well, I am the slime from your video\nOozin\u0026rsquo; along on your livin\u0026rsquo; room floor. ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\n::: {#sect1 .notecard .note} Note: This attribute must not be used to convey semantic information. Even if all styling is removed, a page should remain semantically correct. Typically it shouldn't be used to hide irrelevant information; this should be done using the hidden attribute. ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# the-style-attribute]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet style 1 12 1 Yes 15 1 4.4 18 4 14 1 1.0 :::\nSee also # ::: section-content All global attributes. :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style{._attribution-link} :::\n"},{"id":239,"href":"/docs/references/languages/html/global_attributes/tabindex/","title":"Tabindex","section":"HTML","content":" tabindex # ::: section-content The tabindex global attribute allows developers to make HTML elements focusable, allow or prevent them from being sequentially focusable (usually with the [Tab]{.kbd} key, hence the name) and determine their relative ordering for sequential focus navigation. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: tabindex # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-standard .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Click anywhere in this pane, then try tabbing through the elements.\n\u0026lt;label\u0026gt;First in tab order:\u0026lt;input type=\u0026quot;text\u0026quot; /\u0026gt;\u0026lt;/label\u0026gt; \u0026lt;div tabindex=\u0026quot;0\u0026quot;\u0026gt;Tabbable due to tabindex. Not tabbable: no tabindex. \u0026lt;label\u0026gt;Third in tab order:\u0026lt;input type=\u0026quot;text\u0026quot; /\u0026gt;\u0026lt;/label\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} p { font-style: italic; font-weight: bold; }\ndiv, label { display: block; letter-spacing: 0.5px; margin-bottom: 1rem; } div:focus { font-weight: bold; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nIt accepts an integer as a value, with different results depending on the integer's value:\n::: {#sect1 .notecard .note} Note: If an HTML element renders and has tabindex attribute with any valid integer value, the element can be focused with JavaScript (by calling the focus() method) or visually by clicking with the mouse. The particular tabindex value controls whether the element is tabbable (i.e. reachable via sequential keyboard navigation, usually with the [Tab]{.kbd} key). :::\nA negative value (the exact negative value doesn't actually matter, usually tabindex=\u0026quot;-1\u0026quot;) means that the element is not reachable via sequential keyboard navigation.\n::: {#sect2 .notecard .note} Note: tabindex=\u0026quot;-1\u0026quot; may be useful for elements that should not be navigated to directly using the [Tab]{.kbd} key, but need to have keyboard focus set to them. Examples include an off-screen modal window that should be focused when it comes into view, or a form submission error message that should be immediately focused when an errant form is submitted. :::\ntabindex=\u0026quot;0\u0026quot; means that the element should be focusable in sequential keyboard navigation, after any positive tabindex values. The focus navigation order of these elements is defined by their order in the document source.\nA positive value means the element should be focusable in sequential keyboard navigation, with its order defined by the value of the number. That is, tabindex=\u0026quot;4\u0026quot; is focused before tabindex=\u0026quot;5\u0026quot; and tabindex=\u0026quot;0\u0026quot;, but after tabindex=\u0026quot;3\u0026quot;. If multiple elements share the same positive tabindex value, their order relative to each other follows their position in the document source. The maximum value for tabindex is 32767.\nIf the tabindex attribute is included with no value set, whether the element is focusable is determined by the user agent.\n::: {#sect3 .notecard .warning} Warning: You are recommended to only use 0 and -1 as tabindex values. Avoid using tabindex values greater than 0 and CSS properties that can change the order of focusable HTML elements ( Ordering flex items). Doing so makes it difficult for people who rely on using keyboard for navigation or assistive technology to navigate and operate page content. Instead, write the document with the elements in a logical sequence. :::\nSome focusable HTML elements have a default tabindex value of 0 set under the hood by the user agent. These elements are an \u0026lt;a\u0026gt; or \u0026lt;area\u0026gt; with href attribute, \u0026lt;button\u0026gt;, \u0026lt;frame\u0026gt; [Deprecated]{.visually-hidden} , \u0026lt;iframe\u0026gt;, \u0026lt;input\u0026gt;, \u0026lt;object\u0026gt;, \u0026lt;select\u0026gt;, \u0026lt;textarea\u0026gt;, and SVG \u0026lt;a\u0026gt; element, or a \u0026lt;summary\u0026gt; element that provides summary for a \u0026lt;details\u0026gt; element. Developers shouldn't add the tabindex attribute to these elements unless it changes the default behavior (for example, including a negative value will remove the element from the focus navigation order).\n::: {#sect4 .notecard .warning} Warning: The tabindex attribute must not be used on the \u0026lt;dialog\u0026gt; element. ::: :::\nAccessibility concerns # ::: section-content Avoid using the tabindex attribute in conjunction with non- interactive content to make something intended to be interactive focusable by keyboard input. An example of this would be using a `` element to describe a button, instead of the \u0026lt;button\u0026gt; element.\nInteractive components authored using non-interactive elements are not listed in the accessibility tree. This prevents assistive technology from being able to navigate to and manipulate those components. The content should be semantically described using interactive elements ( \u0026lt;a\u0026gt;, \u0026lt;button\u0026gt;, \u0026lt;details\u0026gt;, \u0026lt;input\u0026gt;, \u0026lt;select\u0026gt;, \u0026lt;textarea\u0026gt;, etc.) instead. These elements have built-in roles and states that communicate status to the accessibility that would otherwise have to be managed by ARIA.\nUsing the tabindex attribute | The Paciello Group{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# attr-tabindex]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet tabindex 1 12 1.5 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 :::\nSee also # ::: section-content\nAll global attributes HTMLElement.tabIndex that reflects this attribute Accessibility problems with tabindex: see Don't Use Tabindex Greater than 0{target=\u0026quot;_blank\u0026quot;} by Adrian Roselli ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex{._attribution-link} :::\n"},{"id":240,"href":"/docs/references/languages/html/global_attributes/title/","title":"Title","section":"HTML","content":" title # ::: section-content The title global attribute contains text representing advisory information related to the element it belongs to. :::\nTry it # ::: section-content ::: iframe ::: {.output-header .border-rounded-top}\nHTML Demo: title # Reset :::\n::: {#warning-no-script .warning-container} ::: warning The interactive example cannot be shown because JavaScript is disabled. ::: :::\n::: {#warning-mathml-not-supported .warning-container .hidden} ::: warning The interactive example cannot be shown because MathML is not supported by your browser. ::: :::\n::: {#editor-container .editor-container .tabbed-shorter .hidden .border-rounded-bottom editor-type=\u0026ldquo;tabbed\u0026rdquo;} ::: {#tab-container .section .tabs} ::: {#tablist .tab-list role=\u0026ldquo;tablist\u0026rdquo;} HTML\nCSS\nJavaScript :::\n::: {#html-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;html\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#html-editor} Use the title attribute on an iframe to clearly identify the content of the iframe to screen readers. \u0026lt;iframe title=\u0026quot;Wikipedia page for the HTML language\u0026quot; src=\u0026quot;https://en.m.wikipedia.org/wiki/HTML\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;iframe title=\u0026quot;Wikipedia page for the CSS language\u0026quot; src=\u0026quot;https://en.m.wikipedia.org/wiki/CSS\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt; ::: :::\n::: {#css-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;css\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#css-editor} iframe { height: 200px; margin-bottom: 24px; width: 100%; } ::: :::\n::: {#js-panel .section .hidden tabindex=\u0026ldquo;0\u0026rdquo; role=\u0026ldquo;tabpanel\u0026rdquo; aria-labelledby=\u0026ldquo;js\u0026rdquo; aria-hidden=\u0026ldquo;true\u0026rdquo;} ::: {#js-editor} ::: ::: :::\n::: {#output .output-container}\nOutput # ::: :::\n::: {.section .console-container .hidden aria-hidden=\u0026ldquo;true\u0026rdquo;}\nConsole Output # ![] clear console\n::: {#console .console} ::: :::\n::: {#html-output .output .editor-tabbed} %html-content% ::: :::\nThe main use of the title attribute is to label \u0026lt;iframe\u0026gt; elements for assistive technology.\nThe title attribute may also be used to label controls in data tables.\nThe title attribute, when added to \u0026lt;link rel=\u0026quot;stylesheet\u0026quot;\u0026gt;, creates an alternate stylesheet. When defining an alternative style sheet with \u0026lt;link rel=\u0026quot;alternate\u0026quot;\u0026gt; the attribute is required and must be set to a non-empty string.\nIf included on the \u0026lt;abbr\u0026gt; opening tag, the title must be a full expansion of the abbreviation or acronym. Instead of using title, when possible, provide an expansion of the abbreviation or acronym in plain text on first use, using the \u0026lt;abbr\u0026gt; to mark up the abbreviation. This enables all users know what name or term the abbreviation or acronym shortens while providing a hint to user agents on how to announce the content.\nWhile title can be used to provide a programmatically associated label for an \u0026lt;input\u0026gt; element, this is not good practice. Use a \u0026lt;label\u0026gt; instead. :::\nMultiline titles # ::: section-content The title attribute may contain several lines. Each U+000A LINE FEED (LF) character represents a line break. Some caution must be taken, as this means the following renders across two lines: :::\nHTML # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;p\u0026gt; Newlines in \u0026lt;code\u0026gt;title\u0026lt;/code\u0026gt; should be taken into account. This \u0026lt;span title=\u0026#34;This is a multiline title\u0026#34;\u0026gt; example span \u0026lt;/span\u0026gt; has a title a attribute with a newline. \u0026lt;/p\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;pre id=\u0026#34;output\u0026#34;\u0026gt;\u0026lt;/pre\u0026gt; ::: :::\nJavaScript # ::: section-content We can query the title attribute and display it in the empty \u0026lt;pre\u0026gt; element as follows:\n::: code-example [js]{.language-name}\nconst span = document.querySelector(\u0026#34;span\u0026#34;); const output = document.querySelector(\u0026#34;#output\u0026#34;); output.textContent = span.title; ::: :::\nResult # ::: section-content ::: {#sect1 .code-example} ::: iframe ::: ::: :::\nTitle attribute inheritance # ::: section-content If an element has no title attribute, then it inherits it from its parent node, which in turn may inherit it from its parent, and so on.\nIf this attribute is set to the empty string, it means its ancestors' titles are irrelevant and shouldn't be used in the tooltip for this element. :::\nHTML # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;div title=\u0026#34;CoolTip\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Hovering here will show \u0026#34;CoolTip\u0026#34;.\u0026lt;/p\u0026gt; \u0026lt;p title=\u0026#34;\u0026#34;\u0026gt;Hovering here will show nothing.\u0026lt;/p\u0026gt; ::: :::\nResult # ::: section-content ::: {#sect2 .code-example} ::: iframe ::: ::: :::\nAccessibility concerns # ::: section-content Use of the title attribute is highly problematic for:\nPeople using touch-only devices People navigating with keyboards People navigating with assistive technology such as screen readers or magnifiers People experiencing fine motor control impairment People with cognitive concerns This is due to inconsistent browser support, compounded by the additional assistive technology parsing of the browser-rendered page. If a tooltip effect is desired, it is better to use a more accessible technique{target=\u0026quot;_blank\u0026quot;} that can be accessed with the above browsing methods.\n3.2.5.1. The title attribute | W3C HTML 5.2: 3. Semantics, structure, and APIs of HTML documents{target=\u0026quot;_blank\u0026quot;} Using the HTML title attribute \u0026ndash; updated | The Paciello Group{target=\u0026quot;_blank\u0026quot;} Tooltips \u0026amp; Toggletips - Inclusive Components{target=\u0026quot;_blank\u0026quot;} The Trials and Tribulations of the Title Attribute - 24 Accessibility{target=\u0026quot;_blank\u0026quot;} ::: Specifications # ::: _table # Specification # HTML Standard\n[# the-title-attribute]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet title 1 12 1 Yes 15 ≤4 4.4 18 4 14 ≤3.2 1.0 multi-line-support Yes 12 Yes Yes Yes Yes Yes Yes Yes No No Yes :::\nSee also # ::: section-content\nAll global attributes. HTMLElement.title that reflects this attribute. ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title{._attribution-link} :::\n"},{"id":241,"href":"/docs/references/languages/html/global_attributes/translate/","title":"Translate","section":"HTML","content":" translate # ::: section-content The translate global attribute is an enumerated attribute that is used to specify whether an element's translatable attribute values and its Text node children should be translated when the page is localized, or whether to leave them unchanged.\nIt can have the following values:\nempty string or yes, which indicates that the element should be translated when the page is localized. no, which indicates that the element must not be translated. Although not all browsers recognize this attribute, it is respected by automatic translation systems such as Google Translate, and may also be respected by tools used by human translators. As such it's important that web authors use this attribute to mark content that should not be translated. :::\nExamples # ::: section-content In this example, the translate attribute is used to ask translation tools not to translate the company's brand name in the footer.\n::: code-example [html]{.language-name}\n\u0026lt;footer\u0026gt; \u0026lt;small\u0026gt;© 2020 \u0026lt;span translate=\u0026#34;no\u0026#34;\u0026gt;BrandName\u0026lt;/span\u0026gt;\u0026lt;/small\u0026gt; \u0026lt;/footer\u0026gt; ::: :::\nSpecifications # ::: _table # Specification # HTML Standard\n[# attr-translate]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet translate 19 79 111 No 15 6 4.4 25 111 14 6 1.5 :::\nSee also # ::: section-content\nAll global attributes. The [HTMLElement.translate]{.page-not-created} property that reflects this attribute. Using HTML's translate attribute{target=\u0026quot;_blank\u0026quot;}. HTML lang attribute ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate{._attribution-link} :::\n"},{"id":242,"href":"/docs/references/languages/html/global_attributes/virtualkeyboardpolicy/","title":"Virtualkeyboardpolicy","section":"HTML","content":" virtualkeyboardpolicy # ::: section-content ::: {#sect1 .notecard .experimental} Experimental: This is an experimental technology\nCheck the Browser compatibility table carefully before using this in production. :::\nThe virtualkeyboardpolicy global attribute is an enumerated attribute. When specified on an element that also uses the contenteditable attribute, it controls the on-screen virtual keyboard behavior on devices such as tablets, mobile phones, or other devices where a hardware keyboard may not be available.\nThe attribute must take one of the following values:\nauto or an empty string, which automatically shows the virtual keyboard when the element is focused or tapped. manual, which decouples focus and tap on the element from the virtual keyboard's state. ::: Specifications # ::: _table # Specification # VirtualKeyboard API\n[# dom-elementcontenteditable-virtualkeyboardpolicy]{.small}\n:::\nBrowser compatibility # ::: _table Desktop Mobile\nChrome Edge Firefox Internet Explorer Opera Safari WebView Android Chrome Android Firefox for Android Opera Android Safari on IOS Samsung Internet virtualkeyboardpolicy 94 94 No No 80 No 94 94 No 66 No 17.0 :::\nSee also # ::: section-content\nAll global attributes HTMLElement.contentEditable and HTMLElement.isContentEditable The VirtualKeyboard API ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy{._attribution-link} :::\n"},{"id":243,"href":"/docs/references/languages/html/microdata/","title":"Microdata","section":"HTML","content":" Microdata # ::: section-content Microdata is part of the WHATWG HTML Standard and is used to nest metadata within existing content on web pages. Search engines and web crawlers can extract and process microdata from a web page and use it to provide a richer browsing experience for users. Search engines benefit greatly from direct access to this structured data because it allows search engines to understand the information on web pages and provide more relevant results to users. Microdata uses a supporting vocabulary to describe an item and name-value pairs to assign values to its properties. Microdata is an attempt to provide a simpler way of annotating HTML elements with machine-readable tags than the similar approaches of using RDFa and classic microformats.\nAt a high level, microdata consists of a group of name-value pairs. The groups are called items, and each name-value pair is a property. Items and properties are represented by regular elements.\nTo create an item, the itemscope attribute is used. To add a property to an item, the itemprop attribute is used on one of the item's descendants. ::: Vocabularies # ::: section-content Google and other major search engines support the Schema.org{target=\u0026quot;_blank\u0026quot;} vocabulary for structured data. This vocabulary defines a standard set of type names and property names, for example, Schema.org Music Event{target=\u0026quot;_blank\u0026quot;} indicates a concert performance, with startDate{target=\u0026quot;_blank\u0026quot;} and location{target=\u0026quot;_blank\u0026quot;} properties to specify the concert's key details. In this case, Schema.org Music Event{target=\u0026quot;_blank\u0026quot;} would be the URL used by itemtype and startDate and location would be itemprop's that Schema.org Music Event{target=\u0026quot;_blank\u0026quot;} defines.\n::: {#sect1 .notecard .note} Note: More about itemtype attributes can be found at https://schema.org/Thing{target=\u0026quot;_blank\u0026quot;}. :::\nMicrodata vocabularies provide the semantics or meaning of an Item. Web developers can design a custom vocabulary or use vocabularies available on the web, such as the widely used schema.org{target=\u0026quot;_blank\u0026quot;} vocabulary. A collection of commonly used markup vocabularies are provided by Schema.org.\nCommonly used vocabularies:\nCreative works: CreativeWork{target=\u0026quot;_blank\u0026quot;}, Book{target=\u0026quot;_blank\u0026quot;}, Movie{target=\u0026quot;_blank\u0026quot;}, MusicRecording{target=\u0026quot;_blank\u0026quot;}, Recipe{target=\u0026quot;_blank\u0026quot;}, TVSeries{target=\u0026quot;_blank\u0026quot;} Embedded non-text objects: AudioObject{target=\u0026quot;_blank\u0026quot;}, ImageObject{target=\u0026quot;_blank\u0026quot;}, VideoObject{target=\u0026quot;_blank\u0026quot;} Event{target=\u0026quot;_blank\u0026quot;} Health and medical types{target=\u0026quot;_blank\u0026quot;}: Notes on the health and medical types under MedicalEntity{target=\u0026quot;_blank\u0026quot;} Organization{target=\u0026quot;_blank\u0026quot;} Person{target=\u0026quot;_blank\u0026quot;} Place{target=\u0026quot;_blank\u0026quot;}, LocalBusiness{target=\u0026quot;_blank\u0026quot;}, Restaurant{target=\u0026quot;_blank\u0026quot;} Product{target=\u0026quot;_blank\u0026quot;}, Offer{target=\u0026quot;_blank\u0026quot;}, AggregateOffer{target=\u0026quot;_blank\u0026quot;} Review{target=\u0026quot;_blank\u0026quot;}, AggregateRating{target=\u0026quot;_blank\u0026quot;} Action{target=\u0026quot;_blank\u0026quot;} Thing{target=\u0026quot;_blank\u0026quot;} Intangible{target=\u0026quot;_blank\u0026quot;} Major search engine operators like Google, Microsoft, and Yahoo! rely on the schema.org{target=\u0026quot;_blank\u0026quot;} vocabulary to improve search results. For some purposes, an ad hoc vocabulary is adequate. For others, a vocabulary will need to be designed. Where possible, authors are encouraged to re-use existing vocabularies, as this makes content re-use easier. :::\nLocalization # ::: section-content In some cases, search engines covering specific regions may provide locally-specific extensions of microdata. For example, Yandex{target=\u0026quot;_blank\u0026quot;}, a major search engine in Russia, supports microformats such as hCard (company contact information), hRecipe (food recipe), hReview (market reviews) and hProduct (product data) and provides its own format for the definition of the terms and encyclopedic articles. This extension was made to solve transliteration problems between the Cyrillic and Latin alphabets. Due to the implementation of additional marking parameters of Schema's vocabulary, the indexation of information in Russian-language web-pages became considerably more successful. :::\nGlobal attributes # ::: section-content itemid \u0026ndash; The unique, global identifier of an item.\nitemprop \u0026ndash; Used to add properties to an item. Every HTML element may have an itemprop attribute specified, where an itemprop consists of a name and value pair.\nitemref \u0026ndash; Properties that are not descendants of an element with the itemscope attribute can be associated with the item using an itemref. itemref provides a list of element ids (not itemids) with additional properties elsewhere in the document.\nitemscope \u0026ndash; The itemscope attribute (usually) works along with itemtype to specify that the HTML contained in a block is about a particular item. The itemscope attribute creates the Item and defines the scope of the itemtype associated with it. The itemtype attribute is a valid URL of a vocabulary (such as schema.org{target=\u0026quot;_blank\u0026quot;}) that describes the item and its properties context.\nitemtype \u0026ndash; Specifies the URL of the vocabulary that will be used to define itemprop's (item properties) in the data structure. The itemscope attribute is used to set the scope of where in the data structure the vocabulary set by itemtype will be active. :::\nExample # HTML # ::: section-content ::: code-example [html]{.language-name}\n\u0026lt;div itemscope itemtype=\u0026#34;https://schema.org/SoftwareApplication\u0026#34;\u0026gt; \u0026lt;span itemprop=\u0026#34;name\u0026#34;\u0026gt;Angry Birds\u0026lt;/span\u0026gt; - REQUIRES \u0026lt;span itemprop=\u0026#34;operatingSystem\u0026#34;\u0026gt;ANDROID\u0026lt;/span\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;link itemprop=\u0026#34;applicationCategory\u0026#34; href=\u0026#34;https://schema.org/GameApplication\u0026#34; /\u0026gt; \u0026lt;div itemprop=\u0026#34;aggregateRating\u0026#34; itemscope itemtype=\u0026#34;https://schema.org/AggregateRating\u0026#34;\u0026gt; RATING: \u0026lt;span itemprop=\u0026#34;ratingValue\u0026#34;\u0026gt;4.6\u0026lt;/span\u0026gt; ( \u0026lt;span itemprop=\u0026#34;ratingCount\u0026#34;\u0026gt;8864\u0026lt;/span\u0026gt; ratings ) \u0026lt;div itemprop=\u0026#34;offers\u0026#34; itemscope itemtype=\u0026#34;https://schema.org/Offer\u0026#34;\u0026gt; Price: $\u0026lt;span itemprop=\u0026#34;price\u0026#34;\u0026gt;1.00\u0026lt;/span\u0026gt; \u0026lt;meta itemprop=\u0026#34;priceCurrency\u0026#34; content=\u0026#34;USD\u0026#34; /\u0026gt; ::: :::\nStructured data # ::: section-content\nitemscope itemtype SoftwareApplication (https://schema.org/SoftwareApplication) itemprop name Angry Birds itemprop operatingSystem ANDROID itemprop applicationCategory GameApplication (https://schema.org/GameApplication) itemscope itemprop[itemtype] aggregateRating [AggregateRating] itemprop ratingValue 4.6 itemprop ratingCount 8864 itemscope itemprop[itemtype] offers [Offer] itemprop price 1.00 itemprop priceCurrency USD ::: Result # ::: section-content ::: {#sect2 .code-example} ::: iframe ::: :::\n::: {#sect3 .notecard .note} Note: A handy tool for extracting microdata structures from HTML is Google's Structured Data Testing Tool{target=\u0026quot;_blank\u0026quot;}. Try it on the HTML shown above. ::: :::\nBrowser compatibility # ::: section-content Supported in Firefox 16. Removed in Firefox 49. :::\nSee also # ::: section-content\nGlobal Attributes ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Microdata{._attribution-link} :::\n"},{"id":244,"href":"/docs/references/languages/html/quirks_mode_and_standards_mode/","title":"Quirks Mode and Standards Mode","section":"HTML","content":" Quirks Mode # ::: section-content In the old days of the web, pages were typically written in two versions: One for Netscape Navigator, and one for Microsoft Internet Explorer. When the web standards were made at W3C, browsers could not just start using them, as doing so would break most existing sites on the web. Browsers therefore introduced two modes to treat new standards compliant sites differently from old legacy sites.\nThere are now three modes used by the layout engines in web browsers: quirks mode, limited-quirks mode, and no-quirks mode. In quirks mode, layout emulates behavior in Navigator 4 and Internet Explorer 5. This is essential in order to support websites that were built before the widespread adoption of web standards. In no-quirks mode, the behavior is (hopefully) the desired behavior described by the modern HTML and CSS specifications. In limited-quirks mode, there are only a very small number of quirks implemented.\nThe limited-quirks and no-quirks modes used to be called \u0026quot;almost-standards\u0026quot; mode and \u0026quot;full standards\u0026quot; mode, respectively. These names have been changed as the behavior is now standardized. :::\nHow do browsers determine which mode to use? # ::: section-content For HTML documents, browsers use a DOCTYPE in the beginning of the document to decide whether to handle it in quirks mode or standards mode. To ensure that your page uses full standards mode, make sure that your page has a DOCTYPE like in this example:\n::: code-example [html]{.language-name}\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Hello World!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::\nThe DOCTYPE shown in the example, \u0026lt;!DOCTYPE html\u0026gt;, is the simplest possible, and the one recommended by current HTML standards. Earlier versions of the HTML standard recommended other variants, but all existing browsers today will use full standards mode for this DOCTYPE, even the dated Internet Explorer 6. There are no valid reasons to use a more complicated DOCTYPE. If you do use another DOCTYPE, you may risk choosing one which triggers almost standards mode or quirks mode.\nMake sure you put the DOCTYPE right at the beginning of your HTML document. Anything before the DOCTYPE, like a comment or an XML declaration will trigger quirks mode in Internet Explorer 9 and older.\nThe only purpose of \u0026lt;!DOCTYPE html\u0026gt; is to activate no-quirks mode. Older versions of HTML standard DOCTYPEs provided additional meaning, but no browser ever used the DOCTYPE for anything other than switching between render modes.\nSee also a detailed description of when different browsers choose various modes{target=\u0026quot;_blank\u0026quot;}. :::\nXHTML # ::: section-content If you serve your page as XHTML using the application/xhtml+xml MIME type in the Content-Type HTTP header, you do not need a DOCTYPE to enable standards mode, as such documents always use 'full standards mode'. Note however that serving your pages as application/xhtml+xml will cause Internet Explorer 8 to show a download dialog box for an unknown format instead of displaying your page, as the first version of Internet Explorer with support for XHTML is Internet Explorer 9.\nIf you serve XHTML-like content using the text/html MIME type, browsers will read it as HTML, and you will need the DOCTYPE to use standards mode. :::\nHow do I see which mode is used? # ::: section-content If the page is rendered in quirks or limited-quirks mode, Firefox will log a warning to the console tab in the developer tools. If this warning is not shown, Firefox is using no-quirks mode.\nThe value of document.compatMode in JavaScript will show whether or not the document is in quirks mode. If its value is \u0026quot;BackCompat\u0026quot;, the document is in quirks mode. If it isn't, it will have value \u0026quot;CSS1Compat\u0026quot;. :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode{._attribution-link} :::\n"},{"id":245,"href":"/docs/references/languages/html/reference/","title":"Reference","section":"HTML","content":" HTML reference # ::: section-content This HTML reference describes all elements and attributes of HTML, including global attributes that apply to all elements.\nHTML element reference This page lists all the HTML elements, which are created using tags.\nHTML attribute reference Elements in HTML have attributes; these are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want.\nGlobal attributes Global attributes are attributes common to all HTML elements; they can be used on all elements, though they may have no effect on some elements.\nContent categories Every HTML element is a member of one or more content categories \u0026mdash; these categories group elements that share common characteristics.\nDate and time formats used in HTML Certain HTML elements allow you to specify dates and/or times as the value or as the value of an attribute. These include the date and time variations of the \u0026lt;input\u0026gt; element as well as the \u0026lt;ins\u0026gt; and \u0026lt;del\u0026gt; elements. :::\n::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Reference{._attribution-link} :::\n"},{"id":246,"href":"/docs/references/languages/html/viewport_meta_tag/","title":"Viewport Meta Tag","section":"HTML","content":" Viewport meta tag # ::: section-content This article describes how to use the \u0026quot;viewport\u0026quot; \u0026lt;meta\u0026gt; tag to control the viewport's size and shape. :::\nBackground # ::: section-content The browser's viewport is the area of the window in which web content can be seen. This is often not the same size as the rendered page, in which case the browser provides scrollbars for the user to scroll around and access all the content.\nSome mobile devices and other narrow screens render pages in a virtual window or viewport, which is usually wider than the screen, and then shrink the rendered result down so it can all be seen at once. Users can then zoom and pan to look more closely at different areas of the page. For example, if a mobile screen has a width of 640px, pages might be rendered with a virtual viewport of 980px, and then it will be shrunk down to fit into the 640px space.\nThis is done because not all pages are optimized for mobile and break (or at least look bad) when rendered at a small viewport width. This virtual viewport is a way to make non-mobile-optimized sites in general look better on narrow screen devices.\nHowever, this mechanism is not so good for pages that are optimized for narrow screens using media queries \u0026mdash; if the virtual viewport is 980px for example, media queries that kick in at 640px or 480px or less will never be used, limiting the effectiveness of such responsive design techniques. The viewport \u0026lt;meta\u0026gt; element mitigates this problem of virtual viewport on narrow screen devices. :::\nViewport basics # ::: section-content A typical mobile-optimized site contains something like the following:\n::: code-example [html]{.language-name}\n\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34; /\u0026gt; :::\nNot all devices are the same width; you should make sure that your pages work well in a large variation of screen sizes and orientations.\nThe basic attributes of the \u0026quot;viewport\u0026quot; \u0026lt;meta\u0026gt; element include:\nwidth Controls the size of the viewport. It can be set to a specific number of pixels like width=600 or to the special value device-width, which is 100vw, or 100% of the viewport width. Minimum: 1. Maximum: 10000. Negative values: ignored.\nheight Controls the size of the viewport. It can be set to a specific number of pixels like height=400 or to the special value device-height, which is 100vh, or 100% of the viewport height. Minimum: 1. Maximum: 10000. Negative values: ignored.\ninitial-scale Controls the zoom level when the page is first loaded. Minimum: 0.1. Maximum: 10. Default: 1. Negative values: ignored.\nminimum-scale Controls how much zoom out is allowed on the page. Minimum: 0.1. Maximum: 10. Default: 0.1. Negative values: ignored.\nmaximum-scale Controls how much zoom in is allowed on the page. Any value less than 3 fails accessibility. Minimum: 0.1. Maximum: 10. Default: 10. Negative values: ignored.\nuser-scalable Controls whether zoom in and zoom out actions are allowed on the page. Valid values: 0, 1, yes, or no. Default: 1, which is the same as yes. Setting the value to 0, which is the same as no, is against Web Content Accessibility Guidelines (WCAG).\ninteractive-widget Specifies the effect that interactive UI widgets, such as a virtual keyboard, have on the page's viewports. Valid values: resizes-visual, resizes-content, or overlays-content. Default: resizes-visual.\n::: {#sect1 .notecard .warning} Warning: Usage of user-scalable=no can cause accessibility issues to users with visual impairments such as low vision. WCAG requires a minimum of 2× scaling; however, the best practice is to enable a 5× zoom. ::: :::\nScreen density # ::: section-content Screen resolutions have risen to the size that individual pixels are indistinguishable by the human eye. For example, smartphones often have small screens with resolutions upwards of 1920\u0026ndash;1080 pixels (≈400dpi). Because of this, many browsers can display their pages in a smaller physical size by translating multiple hardware pixels for each CSS \u0026quot;pixel\u0026quot;. Initially, this caused usability and readability problems on many touch-optimized websites.\nOn high dpi screens, pages with initial-scale=1 will effectively be zoomed by browsers. Their text will be smooth and crisp, but their bitmap images may not take advantage of the full screen resolution. To get sharper images on these screens, web developers may want to design images \u0026ndash; or whole layouts \u0026ndash; at a higher scale than their final size and then scale them down using CSS or viewport properties.\nThe default pixel ratio depends on the display density. On a display with density less than 200dpi, the ratio is 1.0. On displays with density between 200 and 300dpi, the ratio is 1.5. For displays with density over 300dpi, the ratio is the integer floor (density/150dpi). Note that the default ratio is true only when the viewport scale equals 1. Otherwise, the relationship between CSS pixels and device pixels depends on the current zoom level. :::\nViewport width and screen width # ::: section-content Sites can set their viewport to a specific size. For example, the definition \u0026quot;width=320, initial-scale=1\u0026quot; can be used to fit precisely onto a small phone display in portrait mode. This can cause problems when the browser renders a page at a larger size. To fix this, browsers will expand the viewport width if necessary to fill the screen at the requested scale. This is especially useful on large-screen devices.\nFor pages that set an initial or maximum scale, this means the width property actually translates into a minimum viewport width. For example, if your layout needs at least 500 pixels of width then you can use the following markup. When the screen is more than 500 pixels wide, the browser will expand the viewport (rather than zoom in) to fit the screen:\n::: code-example [html]{.language-name}\n\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=500, initial-scale=1\u0026#34; /\u0026gt; :::\nOther attributes that are available are minimum-scale, maximum-scale, and user-scalable. These properties affect the initial scale and width, as well as limiting changes in zoom level. :::\nThe effect of interactive UI widgets # ::: section-content Interactive UI widgets of the browser can influence the size of the page's viewports. The most common such UI widget is a virtual keyboard. To control which resize behavior the browser should use, set the interactive-widget property.\nAllowed values are:\nresizes-visual The visual viewport gets resized by the interactive widget.\nresizes-content The viewport gets resized by the interactive widget.\noverlays-content Neither the viewport nor the visual viewport gets resized by the interactive widget.\nWhen the viewport gets resized, the initial containing block also gets resized, thereby affecting the computed size of viewport units. :::\nCommon viewport sizes for mobile and tablet devices # ::: section-content If you want to know what mobile and tablet devices have which viewport widths, there is a comprehensive list of mobile and tablet viewport sizes here{target=\u0026quot;_blank\u0026quot;}. This gives information such as viewport width on portrait and landscape orientation as well as physical screen size, operating system and the pixel density of the device. :::\nSpecifications # ::: _table # Specification # CSS Viewport Module Level 1\n[# viewport-meta]{.small}\n:::\nSee also # ::: section-content\nArticle: Prepare for viewport resize behavior changes coming to Chrome on Android{target=\u0026quot;_blank\u0026quot;} ::: ::: _attribution © 2005\u0026ndash;2023 MDN contributors.\nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Viewport_meta_tag{._attribution-link} :::\n"},{"id":247,"href":"/docs/references/languages/typescript/","title":"Typescript","section":"Programming Languages","content":" TypeScript Documentation # ::: {.main-content-block .container .handbook-content} ::: {.columns .wide} ::: {.item .raised}\nGet Started # Quick introductions based on your background or preference.\nTS for the New Programmer TypeScript for JS Programmers TS for Java/C# Programmers TS for Functional Programmers TypeScript Tooling in 5 minutes ::: ::: {.item .raised}\nHandbook # A great first read for your daily TS work.\nThe TypeScript Handbook The Basics Everyday Types Narrowing More on Functions Object Types Classes Modules ::: ::: {.item .raised}\nReference # Deep dive reference materials.\nUtility Types Cheat Sheets Decorators Declaration Merging Enums Iterators and Generators JSX Mixins ECMAScript Modules in Node.js Modules Module Resolution Namespaces Namespaces and Modules Symbols Triple-Slash Directives Type Compatibility Type Inference Variable Declaration ::: ::: {.item .raised}\nTutorials # Using TypeScript in several environments.\nASP.NET Core Gulp DOM Manipulation Migrating from JavaScript Using Babel with TypeScript ::: ::: {.item .raised}\nDeclaration Files # Learn how to write declaration files to describe existing JavaScript. Important for DefinitelyTyped contributions.\nIntroduction Declaration Reference Library Structures Do's and Don'ts Deep Dive Publishing Consumption ::: ::: {.item .raised}\nJavaScript # How to use TypeScript-powered JavaScript tooling.\nJS Projects Utilizing TypeScript Type Checking JavaScript Files JSDoc Reference Creating .d.ts Files from .js files ::: ::: {.item .raised}\nProject Configuration # Compiler configuration reference.\nWhat is a tsconfig.json Compiler Options in MSBuild TSConfig Reference tsc CLI Options Project References Integrating with Build Tools Configuring Watch Nightly Builds ::: ::: ::: ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/{._attribution-link} :::\n"},{"id":248,"href":"/docs/references/languages/typescript/asp-net-core/","title":"Asp Net Core","section":"Typescript","content":" ASP.NET Core # Install ASP.NET Core and TypeScript # First, install ASP.NET Core if you need it. This quick-start guide requires Visual Studio 2015 or 2017.\nNext, if your version of Visual Studio does not already have the latest TypeScript, you can install it.\nCreate a new project # Choose File Choose New Project (Ctrl + Shift + N) Search for .NET Core in the project search bar Select ASP.NET Core Web Application and press the Next button ![Vusyal Studio Project Window Screenshot](Visual Studio Project Window.png)\nName your project and solution. After select the Create button ![Visual Studio New Project Window Screenshot](Visual Studio New Project Window.png)\nIn the last window, select the Empty template and press the Create button ![Visual Studio Web Application Screenshot](Visual Studio Web Application.png)\nRun the application and make sure that it works.\nSet up the server # Open Dependencies \u0026gt; Manage NuGet Packages \u0026gt; Browse. Search and install Microsoft.AspNetCore.StaticFiles and Microsoft.TypeScript.MSBuild:\nOpen up your Startup.cs file and edit your Configure function to look like this:\npublic void Configure(IApplicationBuilder app, IHostEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } app.UseDefaultFiles(); app.UseStaticFiles(); } You may need to restart VS for the red squiggly lines below UseDefaultFiles and UseStaticFiles to disappear.\nAdd TypeScript # Next we will add a new folder and call it scripts.\nAdd TypeScript code # Right click on scripts and click New Item. Then choose TypeScript File and name the file app.ts\nAdd example code # Add the following code to the app.ts file.\nfunction sayHello() { const compiler = (document.getElementById(\u0026#34;compiler\u0026#34;) as HTMLInputElement) .value; const framework = (document.getElementById(\u0026#34;framework\u0026#34;) as HTMLInputElement) .value; return `Hello from ${compiler} and ${framework}!`; } Set up the build # Configure the TypeScript compiler\nFirst we need to tell TypeScript how to build. Right click on scripts and click New Item. Then choose TypeScript Configuration File and use the default name of tsconfig.json\nReplace the contents of the tsconfig.json file with:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;noEmitOnError\u0026#34;: true, \u0026#34;noImplicitAny\u0026#34;: true, \u0026#34;sourceMap\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;es6\u0026#34; }, \u0026#34;files\u0026#34;: [\u0026#34;./app.ts\u0026#34;], \u0026#34;compileOnSave\u0026#34;: true } noEmitOnError Do not emit outputs if any errors were reported. noImplicitAny Raise error on expressions and declarations with an implied any type. sourceMap : Generates corresponding .map file. target : Specify ECMAScript target version. Note: \u0026quot;ESNext\u0026quot; targets latest supported\nnoImplicitAny is good idea whenever you\u0026rsquo;re writing new code \u0026mdash; you can make sure that you don\u0026rsquo;t write any untyped code by mistake. \u0026quot;compileOnSave\u0026quot; makes it easy to update your code in a running web app.\nSet up NPM # We need to setup NPM so that JavaScript packages can be downloaded. Right click on the project and select New Item. Then choose NPM Configuration File and use the default name of package.json.\nInside the \u0026quot;devDependencies\u0026quot; section of the package.json file, add gulp and del\n\u0026#34;devDependencies\u0026#34;: { \u0026#34;gulp\u0026#34;: \u0026#34;4.0.2\u0026#34;, \u0026#34;del\u0026#34;: \u0026#34;5.1.0\u0026#34; } Visual Studio should start installing gulp and del as soon as you save the file. If not, right-click package.json and then Restore Packages.\nAfter you should see an npm folder in your solution explorer\nSet up gulp # Right click on the project and click New Item. Then choose JavaScript File and use the name of gulpfile.js\n/// \u0026lt;binding AfterBuild=\u0026#39;default\u0026#39; Clean=\u0026#39;clean\u0026#39; /\u0026gt; /* This file is the main entry point for defining Gulp tasks and using Gulp plugins. Click here to learn more. http://go.microsoft.com/fwlink/?LinkId=518007 */ var gulp = require(\u0026#34;gulp\u0026#34;); var del = require(\u0026#34;del\u0026#34;); var paths = { scripts: [\u0026#34;scripts/**/*.js\u0026#34;, \u0026#34;scripts/**/*.ts\u0026#34;, \u0026#34;scripts/**/*.map\u0026#34;], }; gulp.task(\u0026#34;clean\u0026#34;, function () { return del([\u0026#34;wwwroot/scripts/**/*\u0026#34;]); }); gulp.task(\u0026#34;default\u0026#34;, function (done) { gulp.src(paths.scripts).pipe(gulp.dest(\u0026#34;wwwroot/scripts\u0026#34;)); done(); }); The first line tells Visual Studio to run the task \u0026lsquo;default\u0026rsquo; after the build finishes. It will also run the \u0026lsquo;clean\u0026rsquo; task when you ask Visual Studio to clean the build.\nNow right-click on gulpfile.js and click Task Runner Explorer.\nIf \u0026lsquo;default\u0026rsquo; and \u0026lsquo;clean\u0026rsquo; tasks don\u0026rsquo;t show up, refresh the explorer:\nWrite a HTML page # Right click on the wwwroot folder (if you don\u0026rsquo;t see the folder try building the project) and add a New Item named index.html inside. Use the following code for index.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;scripts/app.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;message\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; Compiler: \u0026lt;input id=\u0026#34;compiler\u0026#34; value=\u0026#34;TypeScript\u0026#34; onkeyup=\u0026#34;document.getElementById(\u0026#39;message\u0026#39;).innerText = sayHello()\u0026#34; /\u0026gt;\u0026lt;br /\u0026gt; Framework: \u0026lt;input id=\u0026#34;framework\u0026#34; value=\u0026#34;ASP.NET\u0026#34; onkeyup=\u0026#34;document.getElementById(\u0026#39;message\u0026#39;).innerText = sayHello()\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Test # Run the project As you type on the boxes you should see the message appear/change! Debug # In Edge, press F12 and click the Debugger tab. Look in the first localhost folder, then scripts/app.ts Put a breakpoint on the line with return. Type in the boxes and confirm that the breakpoint hits in TypeScript code and that inspection works correctly. Congrats you\u0026rsquo;ve built your own .NET Core project with a TypeScript frontend.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/asp-net-core.html{._attribution-link} :::\n"},{"id":249,"href":"/docs/references/languages/typescript/babel-with-typescript/","title":"Babel With Typescript","section":"Typescript","content":" Using Babel with TypeScript # Babel vs tsc for TypeScript # When making a modern JavaScript project, you might ask yourself what is the right way to convert files from TypeScript to JavaScript?\nA lot of the time the answer is \u0026ldquo;it depends\u0026rdquo;, or \u0026ldquo;someone may have decided for you\u0026rdquo; depending on the project. If you are building your project with an existing framework like tsdx, Angular, NestJS or any framework mentioned in the Getting Started then this decision is handled for you.\nHowever, a useful heuristic could be:\nIs your build output mostly the same as your source input files? Use tsc Do you need a build pipeline with multiple potential outputs? Use babel for transpiling and tsc for type checking Babel for transpiling, tsc for types # This is a common pattern for projects with existing build infrastructure which may have been ported from a JavaScript codebase to TypeScript.\nThis technique is a hybrid approach, using Babel\u0026rsquo;s preset-typescript to generate your JS files, and then using TypeScript to do type checking and .d.ts file generation.\nBy using babel\u0026rsquo;s support for TypeScript, you get the ability to work with existing build pipelines and are more likely to have a faster JS emit time because Babel does not type check your code.\nType Checking and d.ts file generation # The downside to using babel is that you don\u0026rsquo;t get type checking during the transition from TS to JS. This can mean that type errors which you miss in your editor could sneak through into production code.\nIn addition to that, Babel cannot create .d.ts files for your TypeScript which can make it harder to work with your project if it is a library.\nTo fix these issues, you would probably want to set up a command to type check your project using TSC. This likely means duplicating some of your babel config into a corresponding tsconfig.json and ensuring these flags are enabled:\n\u0026#34;compilerOptions\u0026#34;: { // Ensure that .d.ts files are created by tsc, but not .js files \u0026#34;declaration\u0026#34;: true, \u0026#34;emitDeclarationOnly\u0026#34;: true, // Ensure that Babel can safely transpile files in the TypeScript project \u0026#34;isolatedModules\u0026#34;: true } For more information on these flags:\nisolatedModules declaration, emitDeclarationOnly ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/babel-with-typescript.html{._attribution-link} :::\n"},{"id":250,"href":"/docs/references/languages/typescript/basic-types/","title":"Basic Types","section":"Typescript","content":" The Basics # Each and every value in JavaScript has a set of behaviors you can observe from running different operations. That sounds abstract, but as a quick example, consider some operations we might run on a variable named message.\n// Accessing the property \u0026#39;toLowerCase\u0026#39; // on \u0026#39;message\u0026#39; and then calling it message.toLowerCase(); // Calling \u0026#39;message\u0026#39; message(); If we break this down, the first runnable line of code accesses a property called toLowerCase and then calls it. The second one tries to call message directly.\nBut assuming we don\u0026rsquo;t know the value of message - and that\u0026rsquo;s pretty common - we can\u0026rsquo;t reliably say what results we\u0026rsquo;ll get from trying to run any of this code. The behavior of each operation depends entirely on what value we had in the first place.\nIs message callable? Does it have a property called toLowerCase on it? If it does, is toLowerCase even callable? If both of these values are callable, what do they return? The answers to these questions are usually things we keep in our heads when we write JavaScript, and we have to hope we got all the details right.\nLet\u0026rsquo;s say message was defined in the following way.\nconst message = \u0026#34;Hello World!\u0026#34;; As you can probably guess, if we try to run message.toLowerCase(), we\u0026rsquo;ll get the same string only in lower-case.\nWhat about that second line of code? If you\u0026rsquo;re familiar with JavaScript, you\u0026rsquo;ll know this fails with an exception:\nTypeError: message is not a function It\u0026rsquo;d be great if we could avoid mistakes like this.\nWhen we run our code, the way that our JavaScript runtime chooses what to do is by figuring out the type of the value - what sorts of behaviors and capabilities it has. That\u0026rsquo;s part of what that TypeError is alluding to - it\u0026rsquo;s saying that the string \u0026quot;Hello World!\u0026quot; cannot be called as a function.\nFor some values, such as the primitives string and number, we can identify their type at runtime using the typeof operator. But for other things like functions, there\u0026rsquo;s no corresponding runtime mechanism to identify their types. For example, consider this function:\nfunction fn(x) { return x.flip(); } We can observe by reading the code that this function will only work if given an object with a callable flip property, but JavaScript doesn\u0026rsquo;t surface this information in a way that we can check while the code is running. The only way in pure JavaScript to tell what fn does with a particular value is to call it and see what happens. This kind of behavior makes it hard to predict what the code will do before it runs, which means it\u0026rsquo;s harder to know what your code is going to do while you\u0026rsquo;re writing it.\nSeen in this way, a type is the concept of describing which values can be passed to fn and which will crash. JavaScript only truly provides dynamic typing - running the code to see what happens.\nThe alternative is to use a static type system to make predictions about what code is expected before it runs.\nStatic type-checking # Think back to that TypeError we got earlier from trying to call a string as a function. Most people don\u0026rsquo;t like to get any sorts of errors when running their code - those are considered bugs! And when we write new code, we try our best to avoid introducing new bugs.\nIf we add just a bit of code, save our file, re-run the code, and immediately see the error, we might be able to isolate the problem quickly; but that\u0026rsquo;s not always the case. We might not have tested the feature thoroughly enough, so we might never actually run into a potential error that would be thrown! Or if we were lucky enough to witness the error, we might have ended up doing large refactorings and adding a lot of different code that we\u0026rsquo;re forced to dig through.\nIdeally, we could have a tool that helps us find these bugs before our code runs. That\u0026rsquo;s what a static type-checker like TypeScript does. Static types systems describe the shapes and behaviors of what our values will be when we run our programs. A type-checker like TypeScript uses that information and tells us when things might be going off the rails.\nconst message = \u0026#34;hello!\u0026#34;; message(); Running that last sample with TypeScript will give us an error message before we run the code in the first place.\nNon-exception Failures # So far we\u0026rsquo;ve been discussing certain things like runtime errors - cases where the JavaScript runtime tells us that it thinks something is nonsensical. Those cases come up because the ECMAScript specification has explicit instructions on how the language should behave when it runs into something unexpected.\nFor example, the specification says that trying to call something that isn\u0026rsquo;t callable should throw an error. Maybe that sounds like \u0026ldquo;obvious behavior\u0026rdquo;, but you could imagine that accessing a property that doesn\u0026rsquo;t exist on an object should throw an error too. Instead, JavaScript gives us different behavior and returns the value undefined:\nconst user = { name: \u0026#34;Daniel\u0026#34;, age: 26, }; user.location; // returns undefined Ultimately, a static type system has to make the call over what code should be flagged as an error in its system, even if it\u0026rsquo;s \u0026ldquo;valid\u0026rdquo; JavaScript that won\u0026rsquo;t immediately throw an error. In TypeScript, the following code produces an error about location not being defined:\nconst user = { name: \u0026#34;Daniel\u0026#34;, age: 26, }; user.location; While sometimes that implies a trade-off in what you can express, the intent is to catch legitimate bugs in our programs. And TypeScript catches a lot of legitimate bugs.\nFor example: typos,\nconst announcement = \u0026#34;Hello World!\u0026#34;; // How quickly can you spot the typos? announcement.toLocaleLowercase(); announcement.toLocalLowerCase(); // We probably meant to write this... announcement.toLocaleLowerCase(); uncalled functions,\nfunction flipCoin() { // Meant to be Math.random() return Math.random \u0026lt; 0.5; } or basic logic errors.\nconst value = Math.random() \u0026lt; 0.5 ? \u0026#34;a\u0026#34; : \u0026#34;b\u0026#34;; if (value !== \u0026#34;a\u0026#34;) { // ... } else if (value === \u0026#34;b\u0026#34;) { // Oops, unreachable } Types for Tooling # TypeScript can catch bugs when we make mistakes in our code. That\u0026rsquo;s great, but TypeScript can also prevent us from making those mistakes in the first place.\nThe type-checker has information to check things like whether we\u0026rsquo;re accessing the right properties on variables and other properties. Once it has that information, it can also start suggesting which properties you might want to use.\nThat means TypeScript can be leveraged for editing code too, and the core type-checker can provide error messages and code completion as you type in the editor. That\u0026rsquo;s part of what people often refer to when they talk about tooling in TypeScript.\nimport express from \u0026#34;express\u0026#34;; const app = express(); app.get(\u0026#34;/\u0026#34;, function (req, res) { res.sen }); app.listen(3000); TypeScript takes tooling seriously, and that goes beyond completions and errors as you type. An editor that supports TypeScript can deliver \u0026ldquo;quick fixes\u0026rdquo; to automatically fix errors, refactorings to easily re-organize code, and useful navigation features for jumping to definitions of a variable, or finding all references to a given variable. All of this is built on top of the type-checker and is fully cross-platform, so it\u0026rsquo;s likely that your favorite editor has TypeScript support available.\ntsc, the TypeScript compiler # We\u0026rsquo;ve been talking about type-checking, but we haven\u0026rsquo;t yet used our type-checker. Let\u0026rsquo;s get acquainted with our new friend tsc, the TypeScript compiler. First we\u0026rsquo;ll need to grab it via npm.\nnpm install -g typescript This installs the TypeScript Compiler tsc globally. You can use npx or similar tools if you\u0026rsquo;d prefer to run tsc from a local node_modules package instead.\nNow let\u0026rsquo;s move to an empty folder and try writing our first TypeScript program: hello.ts:\n// Greets the world. console.log(\u0026#34;Hello world!\u0026#34;); Notice there are no frills here; this \u0026ldquo;hello world\u0026rdquo; program looks identical to what you\u0026rsquo;d write for a \u0026ldquo;hello world\u0026rdquo; program in JavaScript. And now let\u0026rsquo;s type-check it by running the command tsc which was installed for us by the typescript package.\ntsc hello.ts Tada!\nWait, \u0026ldquo;tada\u0026rdquo; what exactly? We ran tsc and nothing happened! Well, there were no type errors, so we didn\u0026rsquo;t get any output in our console since there was nothing to report.\nBut check again - we got some file output instead. If we look in our current directory, we\u0026rsquo;ll see a hello.js file next to hello.ts. That\u0026rsquo;s the output from our hello.ts file after tsc compiles or transforms it into a plain JavaScript file. And if we check the contents, we\u0026rsquo;ll see what TypeScript spits out after it processes a .ts file:\n// Greets the world. console.log(\u0026#34;Hello world!\u0026#34;); In this case, there was very little for TypeScript to transform, so it looks identical to what we wrote. The compiler tries to emit clean readable code that looks like something a person would write. While that\u0026rsquo;s not always so easy, TypeScript indents consistently, is mindful of when our code spans across different lines of code, and tries to keep comments around.\nWhat about if we did introduce a type-checking error? Let\u0026rsquo;s rewrite hello.ts:\n// This is an industrial-grade general-purpose greeter function: function greet(person, date) { console.log(`Hello ${person}, today is ${date}!`); } greet(\u0026#34;Brendan\u0026#34;); If we run tsc hello.ts again, notice that we get an error on the command line!\nExpected 2 arguments, but got 1. TypeScript is telling us we forgot to pass an argument to the greet function, and rightfully so. So far we\u0026rsquo;ve only written standard JavaScript, and yet type-checking was still able to find problems with our code. Thanks TypeScript!\nEmitting with Errors # One thing you might not have noticed from the last example was that our hello.js file changed again. If we open that file up then we\u0026rsquo;ll see that the contents still basically look the same as our input file. That might be a bit surprising given the fact that tsc reported an error about our code, but this is based on one of TypeScript\u0026rsquo;s core values: much of the time, you will know better than TypeScript.\nTo reiterate from earlier, type-checking code limits the sorts of programs you can run, and so there\u0026rsquo;s a tradeoff on what sorts of things a type-checker finds acceptable. Most of the time that\u0026rsquo;s okay, but there are scenarios where those checks get in the way. For example, imagine yourself migrating JavaScript code over to TypeScript and introducing type-checking errors. Eventually you\u0026rsquo;ll get around to cleaning things up for the type-checker, but that original JavaScript code was already working! Why should converting it over to TypeScript stop you from running it?\nSo TypeScript doesn\u0026rsquo;t get in your way. Of course, over time, you may want to be a bit more defensive against mistakes, and make TypeScript act a bit more strictly. In that case, you can use the noEmitOnError compiler option. Try changing your hello.ts file and running tsc with that flag:\ntsc --noEmitOnError hello.ts You\u0026rsquo;ll notice that hello.js never gets updated.\nExplicit Types # Up until now, we haven\u0026rsquo;t told TypeScript what person or date are. Let\u0026rsquo;s edit the code to tell TypeScript that person is a string, and that date should be a Date object. We\u0026rsquo;ll also use the toDateString() method on date.\nfunction greet(person: string, date: Date) { console.log(`Hello ${person}, today is ${date.toDateString()}!`); } What we did was add type annotations on person and date to describe what types of values greet can be called with. You can read that signature as \u0026ldquo;greet takes a person of type string, and a date of type Date\u0026rdquo;.\nWith this, TypeScript can tell us about other cases where greet might have been called incorrectly. For example\u0026hellip;\nfunction greet(person: string, date: Date) { console.log(`Hello ${person}, today is ${date.toDateString()}!`); } greet(\u0026#34;Maddison\u0026#34;, Date()); Huh? TypeScript reported an error on our second argument, but why?\nPerhaps surprisingly, calling Date() in JavaScript returns a string. On the other hand, constructing a Date with new Date() actually gives us what we were expecting.\nAnyway, we can quickly fix up the error:\nfunction greet(person: string, date: Date) { console.log(`Hello ${person}, today is ${date.toDateString()}!`); } greet(\u0026#34;Maddison\u0026#34;, new Date()); Keep in mind, we don\u0026rsquo;t always have to write explicit type annotations. In many cases, TypeScript can even just infer (or \u0026ldquo;figure out\u0026rdquo;) the types for us even if we omit them.\nlet msg = \u0026#34;hello there!\u0026#34;; Even though we didn\u0026rsquo;t tell TypeScript that msg had the type string it was able to figure that out. That\u0026rsquo;s a feature, and it\u0026rsquo;s best not to add annotations when the type system would end up inferring the same type anyway.\nNote: The message bubble inside the previous code sample is what your editor would show if you had hovered over the word.\nErased Types # Let\u0026rsquo;s take a look at what happens when we compile the above function greet with tsc to output JavaScript:\n\u0026#34;use strict\u0026#34;; function greet(person, date) { console.log(\u0026#34;Hello \u0026#34;.concat(person, \u0026#34;, today is \u0026#34;).concat(date.toDateString(), \u0026#34;!\u0026#34;)); } greet(\u0026#34;Maddison\u0026#34;, new Date()); Notice two things here:\nOur person and date parameters no longer have type annotations. Our \u0026ldquo;template string\u0026rdquo; - that string that used backticks (the ` character) - was converted to plain strings with concatenations. More on that second point later, but let\u0026rsquo;s now focus on that first point. Type annotations aren\u0026rsquo;t part of JavaScript (or ECMAScript to be pedantic), so there really aren\u0026rsquo;t any browsers or other runtimes that can just run TypeScript unmodified. That\u0026rsquo;s why TypeScript needs a compiler in the first place - it needs some way to strip out or transform any TypeScript-specific code so that you can run it. Most TypeScript-specific code gets erased away, and likewise, here our type annotations were completely erased.\nRemember: Type annotations never change the runtime behavior of your program.\nDownleveling # One other difference from the above was that our template string was rewritten from\n`Hello ${person}, today is ${date.toDateString()}!`; to\n\u0026#34;Hello \u0026#34;.concat(person, \u0026#34;, today is \u0026#34;).concat(date.toDateString(), \u0026#34;!\u0026#34;); Why did this happen?\nTemplate strings are a feature from a version of ECMAScript called ECMAScript 2015 (a.k.a. ECMAScript 6, ES2015, ES6, etc. - don\u0026rsquo;t ask). TypeScript has the ability to rewrite code from newer versions of ECMAScript to older ones such as ECMAScript 3 or ECMAScript 5 (a.k.a. ES3 and ES5). This process of moving from a newer or \u0026ldquo;higher\u0026rdquo; version of ECMAScript down to an older or \u0026ldquo;lower\u0026rdquo; one is sometimes called downleveling.\nBy default TypeScript targets ES3, an extremely old version of ECMAScript. We could have chosen something a little bit more recent by using the target option. Running with --target es2015 changes TypeScript to target ECMAScript 2015, meaning code should be able to run wherever ECMAScript 2015 is supported. So running tsc --target es2015 hello.ts gives us the following output:\nfunction greet(person, date) { console.log(`Hello ${person}, today is ${date.toDateString()}!`); } greet(\u0026#34;Maddison\u0026#34;, new Date()); While the default target is ES3, the great majority of current browsers support ES2015. Most developers can therefore safely specify ES2015 or above as a target, unless compatibility with certain ancient browsers is important.\nStrictness # Different users come to TypeScript looking for different things in a type-checker. Some people are looking for a more loose opt-in experience which can help validate only some parts of their program, and still have decent tooling. This is the default experience with TypeScript, where types are optional, inference takes the most lenient types, and there\u0026rsquo;s no checking for potentially null/undefined values. Much like how tsc emits in the face of errors, these defaults are put in place to stay out of your way. If you\u0026rsquo;re migrating existing JavaScript, that might be a desirable first step.\nIn contrast, a lot of users prefer to have TypeScript validate as much as it can straight away, and that\u0026rsquo;s why the language provides strictness settings as well. These strictness settings turn static type-checking from a switch (either your code is checked or not) into something closer to a dial. The further you turn this dial up, the more TypeScript will check for you. This can require a little extra work, but generally speaking it pays for itself in the long run, and enables more thorough checks and more accurate tooling. When possible, a new codebase should always turn these strictness checks on.\nTypeScript has several type-checking strictness flags that can be turned on or off, and all of our examples will be written with all of them enabled unless otherwise stated. The strict flag in the CLI, or \u0026quot;strict\u0026quot;: true in a tsconfig.json toggles them all on simultaneously, but we can opt out of them individually. The two biggest ones you should know about are noImplicitAny and strictNullChecks.\nnoImplicitAny # Recall that in some places, TypeScript doesn\u0026rsquo;t try to infer types for us and instead falls back to the most lenient type: any. This isn\u0026rsquo;t the worst thing that can happen - after all, falling back to any is just the plain JavaScript experience anyway.\nHowever, using any often defeats the purpose of using TypeScript in the first place. The more typed your program is, the more validation and tooling you\u0026rsquo;ll get, meaning you\u0026rsquo;ll run into fewer bugs as you code. Turning on the noImplicitAny flag will issue an error on any variables whose type is implicitly inferred as any.\nstrictNullChecks # By default, values like null and undefined are assignable to any other type. This can make writing some code easier, but forgetting to handle null and undefined is the cause of countless bugs in the world - some consider it a billion dollar mistake! The strictNullChecks flag makes handling null and undefined more explicit, and spares us from worrying about whether we forgot to handle null and undefined.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/basic-types.html{._attribution-link} :::\n"},{"id":251,"href":"/docs/references/languages/typescript/classes/","title":"Classes","section":"Typescript","content":" Classes # Background Reading:\nClasses (MDN)\nTypeScript offers full support for the class keyword introduced in ES2015.\nAs with other JavaScript language features, TypeScript adds type annotations and other syntax to allow you to express relationships between classes and other types.\nClass Members # Here\u0026rsquo;s the most basic class - an empty one:\nclass Point {} This class isn\u0026rsquo;t very useful yet, so let\u0026rsquo;s start adding some members.\nFields # A field declaration creates a public writeable property on a class:\nclass Point { x: number; y: number; } const pt = new Point(); pt.x = 0; pt.y = 0; As with other locations, the type annotation is optional, but will be an implicit any if not specified.\nFields can also have initializers; these will run automatically when the class is instantiated:\nclass Point { x = 0; y = 0; } const pt = new Point(); // Prints 0, 0 console.log(`${pt.x}, ${pt.y}`); Just like with const, let, and var, the initializer of a class property will be used to infer its type:\nconst pt = new Point(); pt.x = \u0026#34;0\u0026#34;; --strictPropertyInitialization # The strictPropertyInitialization setting controls whether class fields need to be initialized in the constructor.\nclass BadGreeter { name: string; } class GoodGreeter { name: string; constructor() { this.name = \u0026#34;hello\u0026#34;; } } Note that the field needs to be initialized in the constructor itself. TypeScript does not analyze methods you invoke from the constructor to detect initializations, because a derived class might override those methods and fail to initialize the members.\nIf you intend to definitely initialize a field through means other than the constructor (for example, maybe an external library is filling in part of your class for you), you can use the definite assignment assertion operator, !:\nclass OKGreeter { // Not initialized, but no error name!: string; } readonly # Fields may be prefixed with the readonly modifier. This prevents assignments to the field outside of the constructor.\nclass Greeter { readonly name: string = \u0026#34;world\u0026#34;; constructor(otherName?: string) { if (otherName !== undefined) { this.name = otherName; } } err() { this.name = \u0026#34;not ok\u0026#34;; } } const g = new Greeter(); g.name = \u0026#34;also not ok\u0026#34;; Constructors # Background Reading:\nConstructor (MDN)\\\nClass constructors are very similar to functions. You can add parameters with type annotations, default values, and overloads:\nclass Point { x: number; y: number; // Normal signature with defaults constructor(x = 0, y = 0) { this.x = x; this.y = y; } } class Point { // Overloads constructor(x: number, y: string); constructor(s: string); constructor(xs: any, y?: any) { // TBD } } There are just a few differences between class constructor signatures and function signatures:\nConstructors can\u0026rsquo;t have type parameters - these belong on the outer class declaration, which we\u0026rsquo;ll learn about later Constructors can\u0026rsquo;t have return type annotations - the class instance type is always what\u0026rsquo;s returned Super Calls # Just as in JavaScript, if you have a base class, you\u0026rsquo;ll need to call super(); in your constructor body before using any this. members:\nclass Base { k = 4; } class Derived extends Base { constructor() { // Prints a wrong value in ES5; throws exception in ES6 console.log(this.k); super(); } } Forgetting to call super is an easy mistake to make in JavaScript, but TypeScript will tell you when it\u0026rsquo;s necessary.\nMethods # Background Reading:\nMethod definitions\\\nA function property on a class is called a method. Methods can use all the same type annotations as functions and constructors:\nclass Point { x = 10; y = 10; scale(n: number): void { this.x *= n; this.y *= n; } } Other than the standard type annotations, TypeScript doesn\u0026rsquo;t add anything else new to methods.\nNote that inside a method body, it is still mandatory to access fields and other methods via this.. An unqualified name in a method body will always refer to something in the enclosing scope:\nlet x: number = 0; class C { x: string = \u0026#34;hello\u0026#34;; m() { // This is trying to modify \u0026#39;x\u0026#39; from line 1, not the class property x = \u0026#34;world\u0026#34;; } } Getters / Setters # Classes can also have accessors:\nclass C { _length = 0; get length() { return this._length; } set length(value) { this._length = value; } } Note that a field-backed get/set pair with no extra logic is very rarely useful in JavaScript. It\u0026rsquo;s fine to expose public fields if you don\u0026rsquo;t need to add additional logic during the get/set operations.\nTypeScript has some special inference rules for accessors:\nIf get exists but no set, the property is automatically readonly If the type of the setter parameter is not specified, it is inferred from the return type of the getter Getters and setters must have the same Member Visibility Since TypeScript 4.3, it is possible to have accessors with different types for getting and setting.\nclass Thing { _size = 0; get size(): number { return this._size; } set size(value: string | number | boolean) { let num = Number(value); // Don\u0026#39;t allow NaN, Infinity, etc if (!Number.isFinite(num)) { this._size = 0; return; } this._size = num; } } Index Signatures # Classes can declare index signatures; these work the same as Index Signatures for other object types:\nclass MyClass { [s: string]: boolean | ((s: string) =\u0026gt; boolean); check(s: string) { return this[s] as boolean; } } Because the index signature type needs to also capture the types of methods, it\u0026rsquo;s not easy to usefully use these types. Generally it\u0026rsquo;s better to store indexed data in another place instead of on the class instance itself.\nClass Heritage # Like other languages with object-oriented features, classes in JavaScript can inherit from base classes.\nimplements Clauses # You can use an implements clause to check that a class satisfies a particular interface. An error will be issued if a class fails to correctly implement it:\ninterface Pingable { ping(): void; } class Sonar implements Pingable { ping() { console.log(\u0026#34;ping!\u0026#34;); } } class Ball implements Pingable { pong() { console.log(\u0026#34;pong!\u0026#34;); } } Classes may also implement multiple interfaces, e.g. class C implements A, B {.\nCautions # It\u0026rsquo;s important to understand that an implements clause is only a check that the class can be treated as the interface type. It doesn\u0026rsquo;t change the type of the class or its methods at all. A common source of error is to assume that an implements clause will change the class type - it doesn\u0026rsquo;t!\ninterface Checkable { check(name: string): boolean; } class NameChecker implements Checkable { check(s) { // Notice no error here return s.toLowerCase() === \u0026#34;ok\u0026#34;; } } In this example, we perhaps expected that s\u0026rsquo;s type would be influenced by the name: string parameter of check. It is not - implements clauses don\u0026rsquo;t change how the class body is checked or its type inferred.\nSimilarly, implementing an interface with an optional property doesn\u0026rsquo;t create that property:\ninterface A { x: number; y?: number; } class C implements A { x = 0; } const c = new C(); c.y = 10; extends Clauses # Background Reading:\nextends keyword (MDN)\\\nClasses may extend from a base class. A derived class has all the properties and methods of its base class, and can also define additional members.\nclass Animal { move() { console.log(\u0026#34;Moving along!\u0026#34;); } } class Dog extends Animal { woof(times: number) { for (let i = 0; i \u0026lt; times; i++) { console.log(\u0026#34;woof!\u0026#34;); } } } const d = new Dog(); // Base class method d.move(); // Derived class method d.woof(3); Overriding Methods # Background Reading:\nsuper keyword (MDN)\\\nA derived class can also override a base class field or property. You can use the super. syntax to access base class methods. Note that because JavaScript classes are a simple lookup object, there is no notion of a \u0026ldquo;super field\u0026rdquo;.\nTypeScript enforces that a derived class is always a subtype of its base class.\nFor example, here\u0026rsquo;s a legal way to override a method:\nclass Base { greet() { console.log(\u0026#34;Hello, world!\u0026#34;); } } class Derived extends Base { greet(name?: string) { if (name === undefined) { super.greet(); } else { console.log(`Hello, ${name.toUpperCase()}`); } } } const d = new Derived(); d.greet(); d.greet(\u0026#34;reader\u0026#34;); It\u0026rsquo;s important that a derived class follow its base class contract. Remember that it\u0026rsquo;s very common (and always legal!) to refer to a derived class instance through a base class reference:\n// Alias the derived instance through a base class reference const b: Base = d; // No problem b.greet(); What if Derived didn\u0026rsquo;t follow Base\u0026rsquo;s contract?\nclass Base { greet() { console.log(\u0026#34;Hello, world!\u0026#34;); } } class Derived extends Base { // Make this parameter required greet(name: string) { console.log(`Hello, ${name.toUpperCase()}`); } } If we compiled this code despite the error, this sample would then crash:\nconst b: Base = new Derived(); // Crashes because \u0026#34;name\u0026#34; will be undefined b.greet(); Type-only Field Declarations # When target \u0026gt;= ES2022 or useDefineForClassFields is true, class fields are initialized after the parent class constructor completes, overwriting any value set by the parent class. This can be a problem when you only want to re-declare a more accurate type for an inherited field. To handle these cases, you can write declare to indicate to TypeScript that there should be no runtime effect for this field declaration.\ninterface Animal { dateOfBirth: any; } interface Dog extends Animal { breed: any; } class AnimalHouse { resident: Animal; constructor(animal: Animal) { this.resident = animal; } } class DogHouse extends AnimalHouse { // Does not emit JavaScript code, // only ensures the types are correct declare resident: Dog; constructor(dog: Dog) { super(dog); } } Initialization Order # The order that JavaScript classes initialize can be surprising in some cases. Let\u0026rsquo;s consider this code:\nclass Base { name = \u0026#34;base\u0026#34;; constructor() { console.log(\u0026#34;My name is \u0026#34; + this.name); } } class Derived extends Base { name = \u0026#34;derived\u0026#34;; } // Prints \u0026#34;base\u0026#34;, not \u0026#34;derived\u0026#34; const d = new Derived(); What happened here?\nThe order of class initialization, as defined by JavaScript, is:\nThe base class fields are initialized The base class constructor runs The derived class fields are initialized The derived class constructor runs This means that the base class constructor saw its own value for name during its own constructor, because the derived class field initializations hadn\u0026rsquo;t run yet.\nInheriting Built-in Types # Note: If you don\u0026rsquo;t plan to inherit from built-in types like Array, Error, Map, etc. or your compilation target is explicitly set to ES6/ES2015 or above, you may skip this section\nIn ES2015, constructors which return an object implicitly substitute the value of this for any callers of super(...). It is necessary for generated constructor code to capture any potential return value of super(...) and replace it with this.\nAs a result, subclassing Error, Array, and others may no longer work as expected. This is due to the fact that constructor functions for Error, Array, and the like use ECMAScript 6\u0026rsquo;s new.target to adjust the prototype chain; however, there is no way to ensure a value for new.target when invoking a constructor in ECMAScript 5. Other downlevel compilers generally have the same limitation by default.\nFor a subclass like the following:\nclass MsgError extends Error { constructor(m: string) { super(m); } sayHello() { return \u0026#34;hello \u0026#34; + this.message; } } you may find that:\nmethods may be undefined on objects returned by constructing these subclasses, so calling sayHello will result in an error. instanceof will be broken between instances of the subclass and their instances, so (new MsgError()) instanceof MsgError will return false. As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\nclass MsgError extends Error { constructor(m: string) { super(m); // Set the prototype explicitly. Object.setPrototypeOf(this, MsgError.prototype); } sayHello() { return \u0026#34;hello \u0026#34; + this.message; } } However, any subclass of MsgError will have to manually set the prototype as well. For runtimes that don\u0026rsquo;t support Object.setPrototypeOf, you may instead be able to use __proto__.\nUnfortunately, these workarounds will not work on Internet Explorer 10 and prior. One can manually copy methods from the prototype onto the instance itself (i.e. MsgError.prototype onto this), but the prototype chain itself cannot be fixed.\nMember Visibility # You can use TypeScript to control whether certain methods or properties are visible to code outside the class.\npublic # The default visibility of class members is public. A public member can be accessed anywhere:\nclass Greeter { public greet() { console.log(\u0026#34;hi!\u0026#34;); } } const g = new Greeter(); g.greet(); Because public is already the default visibility modifier, you don\u0026rsquo;t ever need to write it on a class member, but might choose to do so for style/readability reasons.\nprotected # protected members are only visible to subclasses of the class they\u0026rsquo;re declared in.\nclass Greeter { public greet() { console.log(\u0026#34;Hello, \u0026#34; + this.getName()); } protected getName() { return \u0026#34;hi\u0026#34;; } } class SpecialGreeter extends Greeter { public howdy() { // OK to access protected member here console.log(\u0026#34;Howdy, \u0026#34; + this.getName()); } } const g = new SpecialGreeter(); g.greet(); // OK g.getName(); Exposure of protected members # Derived classes need to follow their base class contracts, but may choose to expose a subtype of base class with more capabilities. This includes making protected members public:\nclass Base { protected m = 10; } class Derived extends Base { // No modifier, so default is \u0026#39;public\u0026#39; m = 15; } const d = new Derived(); console.log(d.m); // OK Note that Derived was already able to freely read and write m, so this doesn\u0026rsquo;t meaningfully alter the \u0026ldquo;security\u0026rdquo; of this situation. The main thing to note here is that in the derived class, we need to be careful to repeat the protected modifier if this exposure isn\u0026rsquo;t intentional.\nCross-hierarchy protected access # Different OOP languages disagree about whether it\u0026rsquo;s legal to access a protected member through a base class reference:\nclass Base { protected x: number = 1; } class Derived1 extends Base { protected x: number = 5; } class Derived2 extends Base { f1(other: Derived2) { other.x = 10; } f2(other: Base) { other.x = 10; } } Java, for example, considers this to be legal. On the other hand, C# and C++ chose that this code should be illegal.\nTypeScript sides with C# and C++ here, because accessing x in Derived2 should only be legal from Derived2\u0026rsquo;s subclasses, and Derived1 isn\u0026rsquo;t one of them. Moreover, if accessing x through a Derived1 reference is illegal (which it certainly should be!), then accessing it through a base class reference should never improve the situation.\nSee also Why Can\u0026rsquo;t I Access A Protected Member From A Derived Class? which explains more of C#\u0026rsquo;s reasoning.\nprivate # private is like protected, but doesn\u0026rsquo;t allow access to the member even from subclasses:\nclass Base { private x = 0; } const b = new Base(); // Can\u0026#39;t access from outside the class console.log(b.x); class Derived extends Base { showX() { // Can\u0026#39;t access in subclasses console.log(this.x); } } Because private members aren\u0026rsquo;t visible to derived classes, a derived class can\u0026rsquo;t increase their visibility:\nclass Base { private x = 0; } class Derived extends Base { x = 1; } Cross-instance private access # Different OOP languages disagree about whether different instances of the same class may access each others\u0026rsquo; private members. While languages like Java, C#, C++, Swift, and PHP allow this, Ruby does not.\nTypeScript does allow cross-instance private access:\nclass A { private x = 10; public sameAs(other: A) { // No error return other.x === this.x; } } Caveats # Like other aspects of TypeScript\u0026rsquo;s type system, private and protected are only enforced during type checking.\nThis means that JavaScript runtime constructs like in or simple property lookup can still access a private or protected member:\nclass MySafe { private secretKey = 12345; } // In a JavaScript file... const s = new MySafe(); // Will print 12345 console.log(s.secretKey); private also allows access using bracket notation during type checking. This makes private-declared fields potentially easier to access for things like unit tests, with the drawback that these fields are soft private and don\u0026rsquo;t strictly enforce privacy.\nclass MySafe { private secretKey = 12345; } const s = new MySafe(); // Not allowed during type checking console.log(s.secretKey); // OK console.log(s[\u0026#34;secretKey\u0026#34;]); Unlike TypeScripts\u0026rsquo;s private, JavaScript\u0026rsquo;s private fields (#) remain private after compilation and do not provide the previously mentioned escape hatches like bracket notation access, making them hard private.\nclass Dog { #barkAmount = 0; personality = \u0026#34;happy\u0026#34;; constructor() {} } \u0026#34;use strict\u0026#34;; class Dog { #barkAmount = 0; personality = \u0026#34;happy\u0026#34;; constructor() { } } When compiling to ES2021 or less, TypeScript will use WeakMaps in place of #.\n\u0026#34;use strict\u0026#34;; var _Dog_barkAmount; class Dog { constructor() { _Dog_barkAmount.set(this, 0); this.personality = \u0026#34;happy\u0026#34;; } } _Dog_barkAmount = new WeakMap(); If you need to protect values in your class from malicious actors, you should use mechanisms that offer hard runtime privacy, such as closures, WeakMaps, or private fields. Note that these added privacy checks during runtime could affect performance.\nStatic Members # Background Reading:\nStatic Members (MDN)\\\nClasses may have static members. These members aren\u0026rsquo;t associated with a particular instance of the class. They can be accessed through the class constructor object itself:\nclass MyClass { static x = 0; static printX() { console.log(MyClass.x); } } console.log(MyClass.x); MyClass.printX(); Static members can also use the same public, protected, and private visibility modifiers:\nclass MyClass { private static x = 0; } console.log(MyClass.x); Static members are also inherited:\nclass Base { static getGreeting() { return \u0026#34;Hello world\u0026#34;; } } class Derived extends Base { myGreeting = Derived.getGreeting(); } Special Static Names # It\u0026rsquo;s generally not safe/possible to overwrite properties from the Function prototype. Because classes are themselves functions that can be invoked with new, certain static names can\u0026rsquo;t be used. Function properties like name, length, and call aren\u0026rsquo;t valid to define as static members:\nclass S { static name = \u0026#34;S!\u0026#34;; } Why No Static Classes? # TypeScript (and JavaScript) don\u0026rsquo;t have a construct called static class the same way as, for example, C# does.\nThose constructs only exist because those languages force all data and functions to be inside a class; because that restriction doesn\u0026rsquo;t exist in TypeScript, there\u0026rsquo;s no need for them. A class with only a single instance is typically just represented as a normal object in JavaScript/TypeScript.\nFor example, we don\u0026rsquo;t need a \u0026ldquo;static class\u0026rdquo; syntax in TypeScript because a regular object (or even top-level function) will do the job just as well:\n// Unnecessary \u0026#34;static\u0026#34; class class MyStaticClass { static doSomething() {} } // Preferred (alternative 1) function doSomething() {} // Preferred (alternative 2) const MyHelperObject = { dosomething() {}, }; static Blocks in Classes # Static blocks allow you to write a sequence of statements with their own scope that can access private fields within the containing class. This means that we can write initialization code with all the capabilities of writing statements, no leakage of variables, and full access to our class\u0026rsquo;s internals.\nclass Foo { static #count = 0; get count() { return Foo.#count; } static { try { const lastInstances = loadLastInstances(); Foo.#count += lastInstances.length; } catch {} } } Generic Classes # Classes, much like interfaces, can be generic. When a generic class is instantiated with new, its type parameters are inferred the same way as in a function call:\nclass Box\u0026lt;Type\u0026gt; { contents: Type; constructor(value: Type) { this.contents = value; } } const b = new Box(\u0026#34;hello!\u0026#34;); Classes can use generic constraints and defaults the same way as interfaces.\nType Parameters in Static Members # This code isn\u0026rsquo;t legal, and it may not be obvious why:\nclass Box\u0026lt;Type\u0026gt; { static defaultValue: Type; } Remember that types are always fully erased! At runtime, there\u0026rsquo;s only one Box.defaultValue property slot. This means that setting Box\u0026lt;string\u0026gt;.defaultValue (if that were possible) would also change Box\u0026lt;number\u0026gt;.defaultValue - not good. The static members of a generic class can never refer to the class\u0026rsquo;s type parameters.\nthis at Runtime in Classes # Background Reading:\nthis keyword (MDN)\\\nIt\u0026rsquo;s important to remember that TypeScript doesn\u0026rsquo;t change the runtime behavior of JavaScript, and that JavaScript is somewhat famous for having some peculiar runtime behaviors.\nJavaScript\u0026rsquo;s handling of this is indeed unusual:\nclass MyClass { name = \u0026#34;MyClass\u0026#34;; getName() { return this.name; } } const c = new MyClass(); const obj = { name: \u0026#34;obj\u0026#34;, getName: c.getName, }; // Prints \u0026#34;obj\u0026#34;, not \u0026#34;MyClass\u0026#34; console.log(obj.getName()); Long story short, by default, the value of this inside a function depends on how the function was called. In this example, because the function was called through the obj reference, its value of this was obj rather than the class instance.\nThis is rarely what you want to happen! TypeScript provides some ways to mitigate or prevent this kind of error.\nArrow Functions # Background Reading:\nArrow functions (MDN)\\\nIf you have a function that will often be called in a way that loses its this context, it can make sense to use an arrow function property instead of a method definition:\nclass MyClass { name = \u0026#34;MyClass\u0026#34;; getName = () =\u0026gt; { return this.name; }; } const c = new MyClass(); const g = c.getName; // Prints \u0026#34;MyClass\u0026#34; instead of crashing console.log(g()); This has some trade-offs:\nThe this value is guaranteed to be correct at runtime, even for code not checked with TypeScript This will use more memory, because each class instance will have its own copy of each function defined this way You can\u0026rsquo;t use super.getName in a derived class, because there\u0026rsquo;s no entry in the prototype chain to fetch the base class method from this parameters # In a method or function definition, an initial parameter named this has special meaning in TypeScript. These parameters are erased during compilation:\n// TypeScript input with \u0026#39;this\u0026#39; parameter function fn(this: SomeType, x: number) { /* ... */ } // JavaScript output function fn(x) { /* ... */ } TypeScript checks that calling a function with a this parameter is done so with a correct context. Instead of using an arrow function, we can add a this parameter to method definitions to statically enforce that the method is called correctly:\nclass MyClass { name = \u0026#34;MyClass\u0026#34;; getName(this: MyClass) { return this.name; } } const c = new MyClass(); // OK c.getName(); // Error, would crash const g = c.getName; console.log(g()); This method makes the opposite trade-offs of the arrow function approach:\nJavaScript callers might still use the class method incorrectly without realizing it Only one function per class definition gets allocated, rather than one per class instance Base method definitions can still be called via super. this Types # In classes, a special type called this refers dynamically to the type of the current class. Let\u0026rsquo;s see how this is useful:\nclass Box { contents: string = \u0026#34;\u0026#34;; set(value: string) { this.contents = value; return this; } } Here, TypeScript inferred the return type of set to be this, rather than Box. Now let\u0026rsquo;s make a subclass of Box:\nclass ClearableBox extends Box { clear() { this.contents = \u0026#34;\u0026#34;; } } const a = new ClearableBox(); const b = a.set(\u0026#34;hello\u0026#34;); You can also use this in a parameter type annotation:\nclass Box { content: string = \u0026#34;\u0026#34;; sameAs(other: this) { return other.content === this.content; } } This is different from writing other: Box \u0026mdash; if you have a derived class, its sameAs method will now only accept other instances of that same derived class:\nclass Box { content: string = \u0026#34;\u0026#34;; sameAs(other: this) { return other.content === this.content; } } class DerivedBox extends Box { otherContent: string = \u0026#34;?\u0026#34;; } const base = new Box(); const derived = new DerivedBox(); derived.sameAs(base); this-based type guards # You can use this is Type in the return position for methods in classes and interfaces. When mixed with a type narrowing (e.g. if statements) the type of the target object would be narrowed to the specified Type.\nclass FileSystemObject { isFile(): this is FileRep { return this instanceof FileRep; } isDirectory(): this is Directory { return this instanceof Directory; } isNetworked(): this is Networked \u0026amp; this { return this.networked; } constructor(public path: string, private networked: boolean) {} } class FileRep extends FileSystemObject { constructor(path: string, public content: string) { super(path, false); } } class Directory extends FileSystemObject { children: FileSystemObject[]; } interface Networked { host: string; } const fso: FileSystemObject = new FileRep(\u0026#34;foo/bar.txt\u0026#34;, \u0026#34;foo\u0026#34;); if (fso.isFile()) { fso.content; } else if (fso.isDirectory()) { fso.children; } else if (fso.isNetworked()) { fso.host; } A common use-case for a this-based type guard is to allow for lazy validation of a particular field. For example, this case removes an undefined from the value held inside box when hasValue has been verified to be true:\nclass Box\u0026lt;T\u0026gt; { value?: T; hasValue(): this is { value: T } { return this.value !== undefined; } } const box = new Box(); box.value = \u0026#34;Gameboy\u0026#34;; box.value; if (box.hasValue()) { box.value; } Parameter Properties # TypeScript offers special syntax for turning a constructor parameter into a class property with the same name and value. These are called parameter properties and are created by prefixing a constructor argument with one of the visibility modifiers public, private, protected, or readonly. The resulting field gets those modifier(s):\nclass Params { constructor( public readonly x: number, protected y: number, private z: number ) { // No body necessary } } const a = new Params(1, 2, 3); console.log(a.x); console.log(a.z); Class Expressions # Background Reading:\nClass expressions (MDN)\\\nClass expressions are very similar to class declarations. The only real difference is that class expressions don\u0026rsquo;t need a name, though we can refer to them via whatever identifier they ended up bound to:\nconst someClass = class\u0026lt;Type\u0026gt; { content: Type; constructor(value: Type) { this.content = value; } }; const m = new someClass(\u0026#34;Hello, world\u0026#34;); abstract Classes and Members # Classes, methods, and fields in TypeScript may be abstract.\nAn abstract method or abstract field is one that hasn\u0026rsquo;t had an implementation provided. These members must exist inside an abstract class, which cannot be directly instantiated.\nThe role of abstract classes is to serve as a base class for subclasses which do implement all the abstract members. When a class doesn\u0026rsquo;t have any abstract members, it is said to be concrete.\nLet\u0026rsquo;s look at an example:\nabstract class Base { abstract getName(): string; printName() { console.log(\u0026#34;Hello, \u0026#34; + this.getName()); } } const b = new Base(); We can\u0026rsquo;t instantiate Base with new because it\u0026rsquo;s abstract. Instead, we need to make a derived class and implement the abstract members:\nclass Derived extends Base { getName() { return \u0026#34;world\u0026#34;; } } const d = new Derived(); d.printName(); Notice that if we forget to implement the base class\u0026rsquo;s abstract members, we\u0026rsquo;ll get an error:\nclass Derived extends Base { // forgot to do anything } Abstract Construct Signatures # Sometimes you want to accept some class constructor function that produces an instance of a class which derives from some abstract class.\nFor example, you might want to write this code:\nfunction greet(ctor: typeof Base) { const instance = new ctor(); instance.printName(); } TypeScript is correctly telling you that you\u0026rsquo;re trying to instantiate an abstract class. After all, given the definition of greet, it\u0026rsquo;s perfectly legal to write this code, which would end up constructing an abstract class:\n// Bad! greet(Base); Instead, you want to write a function that accepts something with a construct signature:\nfunction greet(ctor: new () =\u0026gt; Base) { const instance = new ctor(); instance.printName(); } greet(Derived); greet(Base); Now TypeScript correctly tells you about which class constructor functions can be invoked - Derived can because it\u0026rsquo;s concrete, but Base cannot.\nRelationships Between Classes # In most cases, classes in TypeScript are compared structurally, the same as other types.\nFor example, these two classes can be used in place of each other because they\u0026rsquo;re identical:\nclass Point1 { x = 0; y = 0; } class Point2 { x = 0; y = 0; } // OK const p: Point1 = new Point2(); Similarly, subtype relationships between classes exist even if there\u0026rsquo;s no explicit inheritance:\nclass Person { name: string; age: number; } class Employee { name: string; age: number; salary: number; } // OK const p: Person = new Employee(); This sounds straightforward, but there are a few cases that seem stranger than others.\nEmpty classes have no members. In a structural type system, a type with no members is generally a supertype of anything else. So if you write an empty class (don\u0026rsquo;t!), anything can be used in place of it:\nclass Empty {} function fn(x: Empty) { // can\u0026#39;t do anything with \u0026#39;x\u0026#39;, so I won\u0026#39;t } // All OK! fn(window); fn({}); fn(fn); ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/classes.html{._attribution-link} :::\n"},{"id":252,"href":"/docs/references/languages/typescript/compiler-options-in-msbuild/","title":"Compiler Options in Msbuild","section":"Typescript","content":" Compiler Options in MSBuild # Overview # When you have an MSBuild based project which utilizes TypeScript such as an ASP.NET Core project, you can configure TypeScript in two ways. Either via a tsconfig.json or via the project settings.\nUsing a tsconfig.json # We recommend using a tsconfig.json for your project when possible. To add one to an existing project, add a new item to your project which is called a \u0026ldquo;TypeScript JSON Configuration File\u0026rdquo; in modern versions of Visual Studio.\nThe new tsconfig.json will then be used as the source of truth for TypeScript-specific build information like files and configuration. You can learn about how TSConfigs works here and there is a comprehensive reference here.\nUsing Project Settings # You can also define the configuration for TypeScript inside you project\u0026rsquo;s settings. This is done by editing the XML in your .csproj to define PropertyGroups which describe how the build can work:\n\u0026lt;PropertyGroup\u0026gt; \u0026lt;TypeScriptNoEmitOnError\u0026gt;true\u0026lt;/TypeScriptNoEmitOnError\u0026gt; \u0026lt;TypeScriptNoImplicitReturns\u0026gt;true\u0026lt;/TypeScriptNoImplicitReturns\u0026gt; \u0026lt;/PropertyGroup\u0026gt; There is a series of mappings for common TypeScript settings, these are settings which map directly to TypeScript cli options and are used to help you write a more understandable project file. You can use the TSConfig reference to get more information on what values and defaults are for each mapping.\nCLI Mappings # MSBuild Config Name TSC Flag\n\u0026lt;TypeScriptAllowJS\u0026gt; --allowJs Allow JavaScript files to be a part of your program. Use the checkJS option to get errors from these files. \u0026lt;TypeScriptRemoveComments\u0026gt; --removeComments Disable emitting comments. \u0026lt;TypeScriptNoImplicitAny\u0026gt; --noImplicitAny Enable error reporting for expressions and declarations with an implied any type.. \u0026lt;TypeScriptGeneratesDeclarations\u0026gt; --declaration Generate .d.ts files from TypeScript and JavaScript files in your project. \u0026lt;TypeScriptModuleKind\u0026gt; --module Specify what module code is generated. \u0026lt;TypeScriptJSXEmit\u0026gt; --jsx Specify what JSX code is generated. \u0026lt;TypeScriptOutDir\u0026gt; --outDir Specify an output folder for all emitted files. \u0026lt;TypeScriptSourceMap\u0026gt; --sourcemap Create source map files for emitted JavaScript files. \u0026lt;TypeScriptTarget\u0026gt; --target Set the JavaScript language version for emitted JavaScript and include compatible library declarations. \u0026lt;TypeScriptNoResolve\u0026gt; --noResolve Disallow imports, requires or \u0026lt;reference\u0026gt;s from expanding the number of files TypeScript should add to a project. \u0026lt;TypeScriptMapRoot\u0026gt; --mapRoot Specify the location where debugger should locate map files instead of generated locations. \u0026lt;TypeScriptSourceRoot\u0026gt; --sourceRoot Specify the root path for debuggers to find the reference source code. \u0026lt;TypeScriptCharset\u0026gt; --charset No longer supported. In early versions, manually set the text encoding for reading files. \u0026lt;TypeScriptEmitBOM\u0026gt; --emitBOM Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. \u0026lt;TypeScriptNoLib\u0026gt; --noLib Disable including any library files, including the default lib.d.ts. \u0026lt;TypeScriptPreserveConstEnums\u0026gt; --preserveConstEnums Disable erasing const enum declarations in generated code. \u0026lt;TypeScriptSuppressImplicitAnyIndexErrors\u0026gt; --suppressImplicitAnyIndexErrors Suppress noImplicitAny errors when indexing objects that lack index signatures. \u0026lt;TypeScriptNoEmitHelpers\u0026gt; --noEmitHelpers Disable generating custom helper functions like __extends in compiled output. \u0026lt;TypeScriptInlineSourceMap\u0026gt; --inlineSourceMap Include sourcemap files inside the emitted JavaScript. \u0026lt;TypeScriptInlineSources\u0026gt; --inlineSources Include source code in the sourcemaps inside the emitted JavaScript. \u0026lt;TypeScriptNewLine\u0026gt; --newLine Set the newline character for emitting files. \u0026lt;TypeScriptIsolatedModules\u0026gt; --isolatedModules Ensure that each file can be safely transpiled without relying on other imports. \u0026lt;TypeScriptEmitDecoratorMetadata\u0026gt; --emitDecoratorMetadata Emit design-type metadata for decorated declarations in source files. \u0026lt;TypeScriptRootDir\u0026gt; --rootDir Specify the root folder within your source files. \u0026lt;TypeScriptExperimentalDecorators\u0026gt; --experimentalDecorators Enable experimental support for TC39 stage 2 draft decorators. \u0026lt;TypeScriptModuleResolution\u0026gt; --moduleResolution Specify how TypeScript looks up a file from a given module specifier. \u0026lt;TypeScriptSuppressExcessPropertyErrors\u0026gt; --suppressExcessPropertyErrors Disable reporting of excess property errors during the creation of object literals. \u0026lt;TypeScriptReactNamespace\u0026gt; --reactNamespace Specify the object invoked for createElement. This only applies when targeting react JSX emit. \u0026lt;TypeScriptSkipDefaultLibCheck\u0026gt; --skipDefaultLibCheck Skip type checking .d.ts files that are included with TypeScript. \u0026lt;TypeScriptAllowUnusedLabels\u0026gt; --allowUnusedLabels Disable error reporting for unused labels. \u0026lt;TypeScriptNoImplicitReturns\u0026gt; --noImplicitReturns Enable error reporting for codepaths that do not explicitly return in a function. \u0026lt;TypeScriptNoFallthroughCasesInSwitch\u0026gt; --noFallthroughCasesInSwitch Enable error reporting for fallthrough cases in switch statements. \u0026lt;TypeScriptAllowUnreachableCode\u0026gt; --allowUnreachableCode Disable error reporting for unreachable code. \u0026lt;TypeScriptForceConsistentCasingInFileNames\u0026gt; --forceConsistentCasingInFileNames\nEnsure that casing is correct in imports. \u0026lt;TypeScriptAllowSyntheticDefaultImports\u0026gt; --allowSyntheticDefaultImports Allow 'import x from y' when a module doesn't have a default export. \u0026lt;TypeScriptNoImplicitUseStrict\u0026gt; --noImplicitUseStrict Disable adding 'use strict' directives in emitted JavaScript files. \u0026lt;TypeScriptLib\u0026gt; --lib Specify a set of bundled library declaration files that describe the target runtime environment. \u0026lt;TypeScriptBaseUrl\u0026gt; --baseUrl Specify the base directory to resolve non-relative module names. \u0026lt;TypeScriptDeclarationDir\u0026gt; --declarationDir Specify the output directory for generated declaration files. \u0026lt;TypeScriptNoImplicitThis\u0026gt; --noImplicitThis Enable error reporting when this is given the type any. \u0026lt;TypeScriptSkipLibCheck\u0026gt; --skipLibCheck Skip type checking all .d.ts files. \u0026lt;TypeScriptStrictNullChecks\u0026gt; --strictNullChecks When type checking, take into account null and undefined. \u0026lt;TypeScriptNoUnusedLocals\u0026gt; --noUnusedLocals Enable error reporting when a local variables aren't read. \u0026lt;TypeScriptNoUnusedParameters\u0026gt; --noUnusedParameters Raise an error when a function parameter isn't read \u0026lt;TypeScriptAlwaysStrict\u0026gt; --alwaysStrict Ensure 'use strict' is always emitted. \u0026lt;TypeScriptImportHelpers\u0026gt; --importHelpers Allow importing helper functions from tslib once per project, instead of including them per-file. \u0026lt;TypeScriptJSXFactory\u0026gt; --jsxFactory Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' \u0026lt;TypeScriptStripInternal\u0026gt; --stripInternal Disable emitting declarations that have @internal in their JSDoc comments. \u0026lt;TypeScriptCheckJs\u0026gt; --checkJs Enable error reporting in type-checked JavaScript files. \u0026lt;TypeScriptDownlevelIteration\u0026gt; --downlevelIteration Emit more compliant, but verbose and less performant JavaScript for iteration. \u0026lt;TypeScriptStrict\u0026gt; --strict Enable all strict type checking options. \u0026lt;TypeScriptNoStrictGenericChecks\u0026gt; --noStrictGenericChecks Disable strict checking of generic signatures in function types. \u0026lt;TypeScriptPreserveSymlinks\u0026gt; --preserveSymlinks Disable resolving symlinks to their realpath. This correlates to the same flag in node. \u0026lt;TypeScriptStrictFunctionTypes\u0026gt; --strictFunctionTypes When assigning functions, check to ensure parameters and the return values are subtype-compatible. \u0026lt;TypeScriptStrictPropertyInitialization\u0026gt; --strictPropertyInitialization Check for class properties that are declared but not set in the constructor. \u0026lt;TypeScriptESModuleInterop\u0026gt; --esModuleInterop Emit additional JavaScript to ease support for importing CommonJS modules. This enables allowSyntheticDefaultImports for type compatibility. \u0026lt;TypeScriptEmitDeclarationOnly\u0026gt; --emitDeclarationOnly Only output d.ts files and not JavaScript files. \u0026lt;TypeScriptKeyofStringsOnly\u0026gt; --keyofStringsOnly Make keyof only return strings instead of string, numbers or symbols. Legacy option. \u0026lt;TypeScriptUseDefineForClassFields\u0026gt; --useDefineForClassFields Emit ECMAScript-standard-compliant class fields. \u0026lt;TypeScriptDeclarationMap\u0026gt; --declarationMap Create sourcemaps for d.ts files. \u0026lt;TypeScriptResolveJsonModule\u0026gt; --resolveJsonModule Enable importing .json files \u0026lt;TypeScriptStrictBindCallApply\u0026gt; --strictBindCallApply Check that the arguments for bind, call, and apply methods match the original function. \u0026lt;TypeScriptNoEmitOnError\u0026gt; --noEmitOnError Disable emitting files if any type checking errors are reported.\nAdditional Flags # Because the MSBuild system passes arguments directly to the TypeScript CLI, you can use the option TypeScriptAdditionalFlags to provide specific flags which don\u0026rsquo;t have a mapping above.\nFor example, this would turn on noPropertyAccessFromIndexSignature:\n\u0026lt;TypeScriptAdditionalFlags\u0026gt; $(TypeScriptAdditionalFlags) --noPropertyAccessFromIndexSignature\u0026lt;/TypeScriptAdditionalFlags\u0026gt; Debug and Release Builds # You can use PropertyGroup conditions to define different sets of configurations. For example, a common task is stripping comments and sourcemaps in production. In this example, we define a debug and release property group which have different TypeScript configurations:\n\u0026lt;PropertyGroup Condition=\u0026#34;\u0026#39;$(Configuration)\u0026#39; == \u0026#39;Debug\u0026#39;\u0026#34;\u0026gt; \u0026lt;TypeScriptRemoveComments\u0026gt;false\u0026lt;/TypeScriptRemoveComments\u0026gt; \u0026lt;TypeScriptSourceMap\u0026gt;true\u0026lt;/TypeScriptSourceMap\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;PropertyGroup Condition=\u0026#34;\u0026#39;$(Configuration)\u0026#39; == \u0026#39;Release\u0026#39;\u0026#34;\u0026gt; \u0026lt;TypeScriptRemoveComments\u0026gt;true\u0026lt;/TypeScriptRemoveComments\u0026gt; \u0026lt;TypeScriptSourceMap\u0026gt;false\u0026lt;/TypeScriptSourceMap\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;Import Project=\u0026#34;$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.targets\u0026#34; Condition=\u0026#34;Exists(\u0026#39;$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.targets\u0026#39;)\u0026#34; /\u0026gt; ToolsVersion # The value of \u0026lt;TypeScriptToolsVersion\u0026gt;1.7\u0026lt;/TypeScriptToolsVersion\u0026gt; property in the project file identifies the compiler version to use to build (1.7 in this example). This allows a project to build against the same versions of the compiler on different machines.\nIf TypeScriptToolsVersion is not specified, the latest compiler version installed on the machine will be used to build.\nUsers using newer versions of TS, will see a prompt to upgrade their project on first load.\nTypeScriptCompileBlocked # If you are using a different build tool to build your project (e.g. gulp, grunt , etc.) and VS for the development and debugging experience, set \u0026lt;TypeScriptCompileBlocked\u0026gt;true\u0026lt;/TypeScriptCompileBlocked\u0026gt; in your project. This should give you all the editing support, but not the build when you hit F5.\nTypeScriptEnableIncrementalMSBuild (TypeScript 4.2 Beta and later) # By default, MSBuild will attempt to only run the TypeScript compiler when the project\u0026rsquo;s source files have been updated since the last compilation. However, if this behavior is causing issues, such as when TypeScript\u0026rsquo;s incremental option is enabled, set \u0026lt;TypeScriptEnableIncrementalMSBuild\u0026gt;false\u0026lt;/TypeScriptEnableIncrementalMSBuild\u0026gt; to ensure the TypeScript compiler is invoked with every run of MSBuild.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/compiler-options-in-msbuild.html{._attribution-link} :::\n"},{"id":253,"href":"/docs/references/languages/typescript/compiler-options/","title":"Compiler Options","section":"Typescript","content":" tsc CLI Options # Using the CLI # Running tsc locally will compile the closest project defined by a tsconfig.json, or you can compile a set of TypeScript files by passing in a glob of files you want. When input files are specified on the command line, tsconfig.json files are ignored.\n# Run a compile based on a backwards look through the fs for a tsconfig.json tsc # Emit JS for just the index.ts with the compiler defaults tsc index.ts # Emit JS for any .ts files in the folder src, with the default settings tsc src/*.ts # Emit files referenced in with the compiler settings from tsconfig.production.json tsc --project tsconfig.production.json # Emit d.ts files for a js file with showing compiler options which are booleans tsc index.js --declaration --emitDeclarationOnly # Emit a single .js file from two files via compiler options which take string arguments tsc app.ts util.ts --target esnext --outfile index.js Compiler Options # If you\u0026rsquo;re looking for more information about the compiler options in a tsconfig, check out the TSConfig Reference\nCLI Commands # Flag Type\n--all boolean\nShow all compiler options. --generateTrace string Generates an event trace and a list of types. --help boolean\nGives local information for help on the CLI. --init boolean\nInitializes a TypeScript project and creates a tsconfig.json file. --listFilesOnly boolean\nPrint names of files that are part of the compilation and then stop processing. --locale string Set the language of the messaging from TypeScript. This does not affect emit. --project string Compile the project given the path to its configuration file, or to a folder with a 'tsconfig.json'. --showConfig boolean\nPrint the final configuration instead of building. --version boolean\nPrint the compiler's version.\nBuild Options # Flag Type\n--build boolean\nBuild one or more projects and their dependencies, if out of date --clean boolean\nDelete the outputs of all projects. --dry boolean\nShow what would be built (or deleted, if specified with '--clean') --force boolean\nBuild all projects, including those that appear to be up to date. --verbose boolean\nEnable verbose logging.\nWatch Options # Flag Type\n--excludeDirectories list Remove a list of directories from the watch process. --excludeFiles list Remove a list of files from the watch mode's processing. --fallbackPolling fixedinterval, priorityinterval, dynamicpriority, or fixedchunksize Specify what approach the watcher should use if the system runs out of native file watchers. --synchronousWatchDirectory boolean Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively. --watch boolean Watch input files. --watchDirectory usefsevents, fixedpollinginterval, dynamicprioritypolling, or fixedchunksizepolling Specify how directories are watched on systems that lack recursive file-watching functionality. --watchFile fixedpollinginterval, prioritypollinginterval, dynamicprioritypolling, fixedchunksizepolling, usefsevents, or usefseventsonparentdirectory\nSpecify how the TypeScript watch mode works.\nCompiler Flags # Flag Type Default\n--allowArbitraryExtensions boolean false Enable importing files with any extension, provided a declaration file is present. --allowImportingTsExtensions boolean false Allow imports to include TypeScript file extensions. --allowJs boolean false Allow JavaScript files to be a part of your program. Use the checkJS option to get errors from these files. --allowSyntheticDefaultImports boolean true if esModuleInterop is enabled, module is system, or moduleResolution is bundler, false otherwise. Allow 'import x from y' when a module doesn't have a default export. --allowUmdGlobalAccess boolean false Allow accessing UMD globals from modules. --allowUnreachableCode boolean Disable error reporting for unreachable code. --allowUnusedLabels boolean Disable error reporting for unused labels. --alwaysStrict boolean true if strict, false otherwise. Ensure 'use strict' is always emitted. --assumeChangesOnlyAffectDirectDependencies boolean false Have recompiles in projects that use incremental and watch mode assume that changes within a file will only affect files directly depending on it. --baseUrl string Specify the base directory to resolve non-relative module names. --charset string utf8 No longer supported. In early versions, manually set the text encoding for reading files. --checkJs boolean false Enable error reporting in type-checked JavaScript files. --composite boolean false Enable constraints that allow a TypeScript project to be used with project references. --customConditions list Conditions to set in addition to the resolver-specific defaults when resolving imports. --declaration boolean true if composite, false otherwise. Generate .d.ts files from TypeScript and JavaScript files in your project. --declarationDir string Specify the output directory for generated declaration files. --declarationMap boolean false Create sourcemaps for d.ts files. --diagnostics boolean false Output compiler performance information after building. --disableReferencedProjectLoad boolean false Reduce the number of projects loaded automatically by TypeScript. --disableSizeLimit boolean false Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server. --disableSolutionSearching boolean false Opt a project out of multi-project reference checking when editing. --disableSourceOfProjectReferenceRedirect boolean false Disable preferring source files instead of declaration files when referencing composite projects. --downlevelIteration boolean false Emit more compliant, but verbose and less performant JavaScript for iteration. --emitBOM boolean false Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. --emitDeclarationOnly boolean false Only output d.ts files and not JavaScript files. --emitDecoratorMetadata boolean false Emit design-type metadata for decorated declarations in source files. --esModuleInterop boolean true if module is node16 or nodenext, false otherwise. Emit additional JavaScript to ease support for importing CommonJS modules. This enables allowSyntheticDefaultImports for type compatibility. --exactOptionalPropertyTypes boolean false Interpret optional property types as written, rather than adding undefined. --experimentalDecorators boolean false Enable experimental support for TC39 stage 2 draft decorators. --explainFiles boolean false Print files read during the compilation including why it was included. --extendedDiagnostics boolean false Output more detailed compiler performance information after building. --forceConsistentCasingInFileNames boolean true Ensure that casing is correct in imports. --generateCpuProfile string profile.cpuprofile Emit a v8 CPU profile of the compiler run for debugging. --importHelpers boolean false Allow importing helper functions from tslib once per project, instead of including them per-file. --importsNotUsedAsValues remove, preserve, or error remove Specify emit/checking behavior for imports that are only used for types. --incremental boolean true if composite, false otherwise. Save .tsbuildinfo files to allow for incremental compilation of projects. --inlineSourceMap boolean false Include sourcemap files inside the emitted JavaScript. --inlineSources boolean false Include source code in the sourcemaps inside the emitted JavaScript. --isolatedModules boolean false Ensure that each file can be safely transpiled without relying on other imports. --jsx preserve, react, react-native, react-jsx, or react-jsxdev Specify what JSX code is generated. --jsxFactory string React.createElement Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. --jsxFragmentFactory string React.Fragment Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. --jsxImportSource string react Specify module specifier used to import the JSX factory functions when using jsx: react-jsx*. --keyofStringsOnly boolean false Make keyof only return strings instead of string, numbers or symbols. Legacy option. --lib list Specify a set of bundled library declaration files that describe the target runtime environment. --listEmittedFiles boolean false Print the names of emitted files after a compilation. --listFiles boolean false Print all of the files read during the compilation. --mapRoot string Specify the location where debugger should locate map files instead of generated locations. --maxNodeModuleJsDepth number 0 Specify the maximum folder depth used for checking JavaScript files from node_modules. Only applicable with allowJs. --module none, commonjs, amd, umd, system, es6/es2015, es2020, es2022, esnext, node16, or nodenext CommonJS if target is ES3 or ES5, ES6/ES2015 otherwise. Specify what module code is generated. --moduleDetection legacy, auto, or force \u0026quot;auto\u0026quot;: Treat files with imports, exports, import.meta, jsx (with jsx: react-jsx), or esm format (with module: node16+) as modules. Control what method is used to detect the whether a JS file is a module. --moduleResolution classic, node10/node, node16, nodenext, or bundler Classic if module is AMD, UMD, System or ES6/ES2015, Matches if module is node16 or nodenext, Node otherwise. Specify how TypeScript looks up a file from a given module specifier. --moduleSuffixes list List of file name suffixes to search when resolving a module. --newLine crlf or lf Platform specific. Set the newline character for emitting files. --noEmit boolean false Disable emitting files from a compilation. --noEmitHelpers boolean false Disable generating custom helper functions like __extends in compiled output. --noEmitOnError boolean false Disable emitting files if any type checking errors are reported. --noErrorTruncation boolean false Disable truncating types in error messages. --noFallthroughCasesInSwitch boolean false Enable error reporting for fallthrough cases in switch statements. --noImplicitAny boolean true if strict, false otherwise. Enable error reporting for expressions and declarations with an implied any type. --noImplicitOverride boolean false Ensure overriding members in derived classes are marked with an override modifier. --noImplicitReturns boolean false Enable error reporting for codepaths that do not explicitly return in a function. --noImplicitThis boolean true if strict, false otherwise. Enable error reporting when this is given the type any. --noImplicitUseStrict boolean false Disable adding 'use strict' directives in emitted JavaScript files. --noLib boolean false Disable including any library files, including the default lib.d.ts. --noPropertyAccessFromIndexSignature boolean false Enforces using indexed accessors for keys declared using an indexed type. --noResolve boolean false Disallow imports, requires or \u0026lt;reference\u0026gt;s from expanding the number of files TypeScript should add to a project. --noStrictGenericChecks boolean false Disable strict checking of generic signatures in function types. --noUncheckedIndexedAccess boolean false Add undefined to a type when accessed using an index. --noUnusedLocals boolean false Enable error reporting when local variables aren't read. --noUnusedParameters boolean false Raise an error when a function parameter isn't read. --out string Deprecated setting. Use outFile instead. --outDir string Specify an output folder for all emitted files. --outFile string Specify a file that bundles all outputs into one JavaScript file. If declaration is true, also designates a file that bundles all .d.ts output. --paths object Specify a set of entries that re-map imports to additional lookup locations. --plugins list Specify a list of language service plugins to include. --preserveConstEnums boolean true if isolatedModules, false otherwise. Disable erasing const enum declarations in generated code. --preserveSymlinks boolean false Disable resolving symlinks to their realpath. This correlates to the same flag in node. --preserveValueImports boolean false Preserve unused imported values in the JavaScript output that would otherwise be removed. --preserveWatchOutput boolean false Disable wiping the console in watch mode. --pretty boolean true Enable color and formatting in TypeScript's output to make compiler errors easier to read. --reactNamespace string React Specify the object invoked for createElement. This only applies when targeting react JSX emit. --removeComments boolean false Disable emitting comments. --resolveJsonModule boolean false Enable importing .json files. --resolvePackageJsonExports boolean true when 'moduleResolution' is 'node16', 'nodenext', or 'bundler'; otherwise false. Use the package.json 'exports' field when resolving package imports. --resolvePackageJsonImports boolean true when 'moduleResolution' is 'node16', 'nodenext', or 'bundler'; otherwise false. Use the package.json 'imports' field when resolving imports. --rootDir string Computed from the list of input files. Specify the root folder within your source files. --rootDirs list Computed from the list of input files. Allow multiple folders to be treated as one when resolving modules. --skipDefaultLibCheck boolean false Skip type checking .d.ts files that are included with TypeScript. --skipLibCheck boolean false Skip type checking all .d.ts files. --sourceMap boolean false Create source map files for emitted JavaScript files. --sourceRoot string Specify the root path for debuggers to find the reference source code. --strict boolean false Enable all strict type-checking options. --strictBindCallApply boolean true if strict, false otherwise. Check that the arguments for bind, call, and apply methods match the original function. --strictFunctionTypes boolean true if strict, false otherwise. When assigning functions, check to ensure parameters and the return values are subtype-compatible. --strictNullChecks boolean true if strict, false otherwise. When type checking, take into account null and undefined. --strictPropertyInitialization boolean true if strict, false otherwise. Check for class properties that are declared but not set in the constructor. --stripInternal boolean false Disable emitting declarations that have @internal in their JSDoc comments. --suppressExcessPropertyErrors boolean false Disable reporting of excess property errors during the creation of object literals. --suppressImplicitAnyIndexErrors boolean false Suppress noImplicitAny errors when indexing objects that lack index signatures. --target es3, es5, es6/es2015, es2016, es2017, es2018, es2019, es2020, es2021, es2022, or esnext ES3 Set the JavaScript language version for emitted JavaScript and include compatible library declarations. --traceResolution boolean false Log paths used during the moduleResolution process. --tsBuildInfoFile string .tsbuildinfo The file to store .tsbuildinfo incremental build information in. --typeRoots list Specify multiple folders that act like ./node_modules/@types. --types list Specify type package names to be included without being referenced in a source file. --useDefineForClassFields boolean true if target is ES2022 or higher, including ESNext, false otherwise. Emit ECMAScript-standard-compliant class fields. --useUnknownInCatchVariables boolean true if strict, false otherwise. Default catch clause variables as unknown instead of any. --verbatimModuleSyntax boolean false Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting.\nRelated # Every option is fully explained in the TSConfig Reference. Learn how to use a tsconfig.json files. Learn how to work in an MSBuild project. ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/compiler-options.html{._attribution-link} :::\n"},{"id":254,"href":"/docs/references/languages/typescript/conditional-types/","title":"Conditional Types","section":"Typescript","content":" Conditional Types # At the heart of most useful programs, we have to make decisions based on input. JavaScript programs are no different, but given the fact that values can be easily introspected, those decisions are also based on the types of the inputs. Conditional types help describe the relation between the types of inputs and outputs.\ninterface Animal { live(): void; } interface Dog extends Animal { woof(): void; } type Example1 = Dog extends Animal ? number : string; type Example2 = RegExp extends Animal ? number : string; Conditional types take a form that looks a little like conditional expressions (condition ? trueExpression : falseExpression) in JavaScript:\nSomeType extends OtherType ? TrueType : FalseType; When the type on the left of the extends is assignable to the one on the right, then you\u0026rsquo;ll get the type in the first branch (the \u0026ldquo;true\u0026rdquo; branch); otherwise you\u0026rsquo;ll get the type in the latter branch (the \u0026ldquo;false\u0026rdquo; branch).\nFrom the examples above, conditional types might not immediately seem useful - we can tell ourselves whether or not Dog extends Animal and pick number or string! But the power of conditional types comes from using them with generics.\nFor example, let\u0026rsquo;s take the following createLabel function:\ninterface IdLabel { id: number /* some fields */; } interface NameLabel { name: string /* other fields */; } function createLabel(id: number): IdLabel; function createLabel(name: string): NameLabel; function createLabel(nameOrId: string | number): IdLabel | NameLabel; function createLabel(nameOrId: string | number): IdLabel | NameLabel { throw \u0026#34;unimplemented\u0026#34;; } These overloads for createLabel describe a single JavaScript function that makes a choice based on the types of its inputs. Note a few things:\nIf a library has to make the same sort of choice over and over throughout its API, this becomes cumbersome. We have to create three overloads: one for each case when we\u0026rsquo;re sure of the type (one for string and one for number), and one for the most general case (taking a string | number). For every new type createLabel can handle, the number of overloads grows exponentially. Instead, we can encode that logic in a conditional type:\ntype NameOrId\u0026lt;T extends number | string\u0026gt; = T extends number ? IdLabel : NameLabel; We can then use that conditional type to simplify our overloads down to a single function with no overloads.\nfunction createLabel\u0026lt;T extends number | string\u0026gt;(idOrName: T): NameOrId\u0026lt;T\u0026gt; { throw \u0026#34;unimplemented\u0026#34;; } let a = createLabel(\u0026#34;typescript\u0026#34;); let b = createLabel(2.8); let c = createLabel(Math.random() ? \u0026#34;hello\u0026#34; : 42); Conditional Type Constraints # Often, the checks in a conditional type will provide us with some new information. Just like narrowing with type guards can give us a more specific type, the true branch of a conditional type will further constrain generics by the type we check against.\nFor example, let\u0026rsquo;s take the following:\ntype MessageOf\u0026lt;T\u0026gt; = T[\u0026#34;message\u0026#34;]; In this example, TypeScript errors because T isn\u0026rsquo;t known to have a property called message. We could constrain T, and TypeScript would no longer complain:\ntype MessageOf\u0026lt;T extends { message: unknown }\u0026gt; = T[\u0026#34;message\u0026#34;]; interface Email { message: string; } type EmailMessageContents = MessageOf\u0026lt;Email\u0026gt;; However, what if we wanted MessageOf to take any type, and default to something like never if a message property isn\u0026rsquo;t available? We can do this by moving the constraint out and introducing a conditional type:\ntype MessageOf\u0026lt;T\u0026gt; = T extends { message: unknown } ? T[\u0026#34;message\u0026#34;] : never; interface Email { message: string; } interface Dog { bark(): void; } type EmailMessageContents = MessageOf\u0026lt;Email\u0026gt;; type DogMessageContents = MessageOf\u0026lt;Dog\u0026gt;; Within the true branch, TypeScript knows that T will have a message property.\nAs another example, we could also write a type called Flatten that flattens array types to their element types, but leaves them alone otherwise:\ntype Flatten\u0026lt;T\u0026gt; = T extends any[] ? T[number] : T; // Extracts out the element type. type Str = Flatten\u0026lt;string[]\u0026gt;; // Leaves the type alone. type Num = Flatten\u0026lt;number\u0026gt;; When Flatten is given an array type, it uses an indexed access with number to fetch out string[]\u0026rsquo;s element type. Otherwise, it just returns the type it was given.\nInferring Within Conditional Types # We just found ourselves using conditional types to apply constraints and then extract out types. This ends up being such a common operation that conditional types make it easier.\nConditional types provide us with a way to infer from types we compare against in the true branch using the infer keyword. For example, we could have inferred the element type in Flatten instead of fetching it out \u0026ldquo;manually\u0026rdquo; with an indexed access type:\ntype Flatten\u0026lt;Type\u0026gt; = Type extends Array\u0026lt;infer Item\u0026gt; ? Item : Type; Here, we used the infer keyword to declaratively introduce a new generic type variable named Item instead of specifying how to retrieve the element type of Type within the true branch. This frees us from having to think about how to dig through and probing apart the structure of the types we\u0026rsquo;re interested in.\nWe can write some useful helper type aliases using the infer keyword. For example, for simple cases, we can extract the return type out from function types:\ntype GetReturnType\u0026lt;Type\u0026gt; = Type extends (...args: never[]) =\u0026gt; infer Return ? Return : never; type Num = GetReturnType\u0026lt;() =\u0026gt; number\u0026gt;; type Str = GetReturnType\u0026lt;(x: string) =\u0026gt; string\u0026gt;; type Bools = GetReturnType\u0026lt;(a: boolean, b: boolean) =\u0026gt; boolean[]\u0026gt;; When inferring from a type with multiple call signatures (such as the type of an overloaded function), inferences are made from the last signature (which, presumably, is the most permissive catch-all case). It is not possible to perform overload resolution based on a list of argument types.\ndeclare function stringOrNum(x: string): number; declare function stringOrNum(x: number): string; declare function stringOrNum(x: string | number): string | number; type T1 = ReturnType\u0026lt;typeof stringOrNum\u0026gt;; Distributive Conditional Types # When conditional types act on a generic type, they become distributive when given a union type. For example, take the following:\ntype ToArray\u0026lt;Type\u0026gt; = Type extends any ? Type[] : never; If we plug a union type into ToArray, then the conditional type will be applied to each member of that union.\ntype ToArray\u0026lt;Type\u0026gt; = Type extends any ? Type[] : never; type StrArrOrNumArr = ToArray\u0026lt;string | number\u0026gt;; What happens here is that ToArray distributes on:\nstring | number; and maps over each member type of the union, to what is effectively:\nToArray\u0026lt;string\u0026gt; | ToArray\u0026lt;number\u0026gt;; which leaves us with:\nstring[] | number[]; Typically, distributivity is the desired behavior. To avoid that behavior, you can surround each side of the extends keyword with square brackets.\ntype ToArrayNonDist\u0026lt;Type\u0026gt; = [Type] extends [any] ? Type[] : never; // \u0026#39;StrArrOrNumArr\u0026#39; is no longer a union. type StrArrOrNumArr = ToArrayNonDist\u0026lt;string | number\u0026gt;; ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/conditional-types.html{._attribution-link} :::\n"},{"id":255,"href":"/docs/references/languages/typescript/configuring-watch/","title":"Configuring Watch","section":"Typescript","content":" Configuring Watch # As of TypeScript 3.8 and onward, the Typescript compiler exposes configuration which controls how it watches files and directories. Prior to this version, configuration required the use of environment variables which are still available.\nBackground # The --watch implementation of the compiler relies on Node\u0026rsquo;s fs.watch and fs.watchFile. Each of these methods has pros and cons.\nfs.watch relies on file system events to broadcast changes in the watched files and directories. The implementation of this command is OS dependent and unreliable - on many operating systems, it does not work as expected. Additionally, some operating systems limit the number of watches which can exist simultaneously (e.g. some flavors of Linux). Heavy use of fs.watch in large codebases has the potential to exceed these limits and result in undesirable behavior. However, because this implementation relies on an events-based model, CPU use is comparatively light. The compiler typically uses fs.watch to watch directories (e.g. source directories included by compiler configuration files and directories in which module resolution failed, among others). TypeScript uses these to augment potential failures in individual file watchers. However, there is a key limitation of this strategy: recursive watching of directories is supported on Windows and macOS, but not on Linux. This suggested a need for additional strategies for file and directory watching.\nfs.watchFile uses polling and thus costs CPU cycles. However, fs.watchFile is by far the most reliable mechanism available to subscribe to the events from files and directories of interest. Under this strategy, the TypeScript compiler typically uses fs.watchFile to watch source files, config files, and files which appear missing based on reference statements. This means that the degree to which CPU usage will be higher when using fs.watchFile depends directly on number of files watched in the codebase.\nConfiguring file watching using a tsconfig.json # The suggested method of configuring watch behavior is through the new watchOptions section of tsconfig.json. We provide an example configuration below. See the following section for detailed descriptions of the settings available.\n{ // Some typical compiler options \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;es2020\u0026#34;, \u0026#34;moduleResolution\u0026#34;: \u0026#34;node\u0026#34; // ... }, // NEW: Options for file/directory watching \u0026#34;watchOptions\u0026#34;: { // Use native file system events for files and directories \u0026#34;watchFile\u0026#34;: \u0026#34;useFsEvents\u0026#34;, \u0026#34;watchDirectory\u0026#34;: \u0026#34;useFsEvents\u0026#34;, // Poll files for updates more frequently // when they\u0026#39;re updated a lot. \u0026#34;fallbackPolling\u0026#34;: \u0026#34;dynamicPriority\u0026#34;, // Don\u0026#39;t coalesce watch notification \u0026#34;synchronousWatchDirectory\u0026#34;: true, // Finally, two additional settings for reducing the amount of possible // files to track work from these directories \u0026#34;excludeDirectories\u0026#34;: [\u0026#34;**/node_modules\u0026#34;, \u0026#34;_build\u0026#34;], \u0026#34;excludeFiles\u0026#34;: [\u0026#34;build/fileWhichChangesOften.ts\u0026#34;] } } For further details, see the release notes for Typescript 3.8.\nConfiguring file watching using environment variable TSC_WATCHFILE # Option Description\nPriorityPollingInterval Use fs.watchFile, but use different polling intervals for source files, config files and missing files DynamicPriorityPolling Use a dynamic queue where frequently modified files are polled at shorter intervals, and unchanged files are polled less frequently UseFsEvents Use fs.watch. On operating systems that limit the number of active watches, fall back to fs.watchFile when a watcher fails to be created. UseFsEventsWithFallbackDynamicPolling Use fs.watch. On operating systems that limit the number of active watches, fall back to dynamic polling queues (as explained in DynamicPriorityPolling) UseFsEventsOnParentDirectory Use fs.watch on the parent directories of included files (yielding a compromise that results in lower CPU usage than pure fs.watchFile but potentially lower accuracy). default (no value specified) If environment variable TSC_NONPOLLING_WATCHER is set to true, use UseFsEventsOnParentDirectory. Otherwise, watch files using fs.watchFile with 250ms as the timeout for any file.\nConfiguring directory watching using environment variable TSC_WATCHDIRECTORY # For directory watches on platforms which don\u0026rsquo;t natively allow recursive directory watching (i.e. non macOS and Windows operating systems) is supported through recursively creating directory watchers for each child directory using different options selected by TSC_WATCHDIRECTORY.\nNOTE: On platforms which support native recursive directory watching, the value of TSC_WATCHDIRECTORY is ignored.\nOption Description\nRecursiveDirectoryUsingFsWatchFile Use fs.watchFile to watch included directories and child directories. RecursiveDirectoryUsingDynamicPriorityPolling Use a dynamic polling queue to poll changes to included directories and child directories. default (no value specified) Use fs.watch to watch included directories and child directories.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/configuring-watch.html{._attribution-link} :::\n"},{"id":256,"href":"/docs/references/languages/typescript/declaration-files/by-example/","title":"By Example","section":"Declration Files","content":" Declaration Reference # The purpose of this guide is to teach you how to write a high-quality definition file. This guide is structured by showing documentation for some API, along with sample usage of that API, and explaining how to write the corresponding declaration.\nThese examples are ordered in approximately increasing order of complexity.\nObjects with Properties # Documentation\nThe global variable myLib has a function makeGreeting for creating greetings, and a property numberOfGreetings indicating the number of greetings made so far.\nCode\nlet result = myLib.makeGreeting(\u0026#34;hello, world\u0026#34;); console.log(\u0026#34;The computed greeting is:\u0026#34; + result); let count = myLib.numberOfGreetings; Declaration\nUse declare namespace to describe types or values accessed by dotted notation.\ndeclare namespace myLib { function makeGreeting(s: string): string; let numberOfGreetings: number; } Overloaded Functions # Documentation\nThe getWidget function accepts a number and returns a Widget, or accepts a string and returns a Widget array.\nCode\nlet x: Widget = getWidget(43); let arr: Widget[] = getWidget(\u0026#34;all of them\u0026#34;); Declaration\ndeclare function getWidget(n: number): Widget; declare function getWidget(s: string): Widget[]; Reusable Types (Interfaces) # Documentation\nWhen specifying a greeting, you must pass a GreetingSettings object. This object has the following properties:\n1 - greeting: Mandatory string\n2 - duration: Optional length of time (in milliseconds)\n3 - color: Optional string, e.g. \u0026lsquo;#ff00ff\u0026rsquo;\nCode\ngreet({ greeting: \u0026#34;hello world\u0026#34;, duration: 4000 }); Declaration\nUse an interface to define a type with properties.\ninterface GreetingSettings { greeting: string; duration?: number; color?: string; } declare function greet(setting: GreetingSettings): void; Reusable Types (Type Aliases) # Documentation\nAnywhere a greeting is expected, you can provide a string, a function returning a string, or a Greeter instance.\nCode\nfunction getGreeting() { return \u0026#34;howdy\u0026#34;; } class MyGreeter extends Greeter {} greet(\u0026#34;hello\u0026#34;); greet(getGreeting); greet(new MyGreeter()); Declaration\nYou can use a type alias to make a shorthand for a type:\ntype GreetingLike = string | (() =\u0026gt; string) | MyGreeter; declare function greet(g: GreetingLike): void; Organizing Types # Documentation\nThe greeter object can log to a file or display an alert. You can provide LogOptions to .log(...) and alert options to .alert(...)\nCode\nconst g = new Greeter(\u0026#34;Hello\u0026#34;); g.log({ verbose: true }); g.alert({ modal: false, title: \u0026#34;Current Greeting\u0026#34; }); Declaration\nUse namespaces to organize types.\ndeclare namespace GreetingLib { interface LogOptions { verbose?: boolean; } interface AlertOptions { modal: boolean; title?: string; color?: string; } } You can also create nested namespaces in one declaration:\ndeclare namespace GreetingLib.Options { // Refer to via GreetingLib.Options.Log interface Log { verbose?: boolean; } interface Alert { modal: boolean; title?: string; color?: string; } } Classes # Documentation\nYou can create a greeter by instantiating the Greeter object, or create a customized greeter by extending from it.\nCode\nconst myGreeter = new Greeter(\u0026#34;hello, world\u0026#34;); myGreeter.greeting = \u0026#34;howdy\u0026#34;; myGreeter.showGreeting(); class SpecialGreeter extends Greeter { constructor() { super(\u0026#34;Very special greetings\u0026#34;); } } Declaration\nUse declare class to describe a class or class-like object. Classes can have properties and methods as well as a constructor.\ndeclare class Greeter { constructor(greeting: string); greeting: string; showGreeting(): void; } Global Variables # Documentation\nThe global variable foo contains the number of widgets present.\nCode\nconsole.log(\u0026#34;Half the number of widgets is \u0026#34; + foo / 2); Declaration\nUse declare var to declare variables. If the variable is read-only, you can use declare const. You can also use declare let if the variable is block-scoped.\n/** The number of widgets present */ declare var foo: number; Global Functions # Documentation\nYou can call the function greet with a string to show a greeting to the user.\nCode\ngreet(\u0026#34;hello, world\u0026#34;); Declaration\nUse declare function to declare functions.\ndeclare function greet(greeting: string): void; ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/by-example.html{._attribution-link} :::\n"},{"id":257,"href":"/docs/references/languages/typescript/declaration-files/consumption/","title":"Consumption","section":"Declration Files","content":" Consumption # Downloading # Getting type declarations requires no tools apart from npm.\nAs an example, getting the declarations for a library like lodash takes nothing more than the following command\nnpm install --save-dev @types/lodash It is worth noting that if the npm package already includes its declaration file as described in Publishing, downloading the corresponding @types package is not needed.\nConsuming # From there you\u0026rsquo;ll be able to use lodash in your TypeScript code with no fuss. This works for both modules and global code.\nFor example, once you\u0026rsquo;ve npm install-ed your type declarations, you can use imports and write\nimport * as _ from \u0026#34;lodash\u0026#34;; _.padStart(\u0026#34;Hello TypeScript!\u0026#34;, 20, \u0026#34; \u0026#34;); or if you\u0026rsquo;re not using modules, you can just use the global variable _.\n_.padStart(\u0026#34;Hello TypeScript!\u0026#34;, 20, \u0026#34; \u0026#34;); Searching # For the most part, type declaration packages should always have the same name as the package name on npm, but prefixed with @types/, but if you need, you can use the Yarn package search to find the package for your favorite library.\nNote: if the declaration file you are searching for is not present, you can always contribute one back and help out the next developer looking for it. Please see the DefinitelyTyped contribution guidelines page for details.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html{._attribution-link} :::\n"},{"id":258,"href":"/docs/references/languages/typescript/declaration-files/deep-dive/","title":"Deep Dive","section":"Declration Files","content":" Deep Dive # Declaration File Theory: A Deep Dive # Structuring modules to give the exact API shape you want can be tricky. For example, we might want a module that can be invoked with or without new to produce different types, has a variety of named types exposed in a hierarchy, and has some properties on the module object as well.\nBy reading this guide, you\u0026rsquo;ll have the tools to write complex declaration files that expose a friendly API surface. This guide focuses on module (or UMD) libraries because the options here are more varied.\nKey Concepts # You can fully understand how to make any shape of declaration by understanding some key concepts of how TypeScript works.\nTypes # If you\u0026rsquo;re reading this guide, you probably already roughly know what a type in TypeScript is. To be more explicit, though, a type is introduced with:\nA type alias declaration (type sn = number | string;) An interface declaration (interface I { x: number[]; }) A class declaration (class C { }) An enum declaration (enum E { A, B, C }) An import declaration which refers to a type Each of these declaration forms creates a new type name.\nValues # As with types, you probably already understand what a value is. Values are runtime names that we can reference in expressions. For example let x = 5; creates a value called x.\nAgain, being explicit, the following things create values:\nlet, const, and var declarations A namespace or module declaration which contains a value An enum declaration A class declaration An import declaration which refers to a value A function declaration Namespaces # Types can exist in namespaces. For example, if we have the declaration let x: A.B.C, we say that the type C comes from the A.B namespace.\nThis distinction is subtle and important \u0026mdash; here, A.B is not necessarily a type or a value.\nSimple Combinations: One name, multiple meanings # Given a name A, we might find up to three different meanings for A: a type, a value or a namespace. How the name is interpreted depends on the context in which it is used. For example, in the declaration let m: A.A = A;, A is used first as a namespace, then as a type name, then as a value. These meanings might end up referring to entirely different declarations!\nThis may seem confusing, but it\u0026rsquo;s actually very convenient as long as we don\u0026rsquo;t excessively overload things. Let\u0026rsquo;s look at some useful aspects of this combining behavior.\nBuilt-in Combinations # Astute readers will notice that, for example, class appeared in both the type and value lists. The declaration class C { } creates two things: a type C which refers to the instance shape of the class, and a value C which refers to the constructor function of the class. Enum declarations behave similarly.\nUser Combinations # Let\u0026rsquo;s say we wrote a module file foo.d.ts:\nexport var SomeVar: { a: SomeType }; export interface SomeType { count: number; } Then consumed it:\nimport * as foo from \u0026#34;./foo\u0026#34;; let x: foo.SomeType = foo.SomeVar.a; console.log(x.count); This works well enough, but we might imagine that SomeType and SomeVar were very closely related such that you\u0026rsquo;d like them to have the same name. We can use combining to present these two different objects (the value and the type) under the same name Bar:\nexport var Bar: { a: Bar }; export interface Bar { count: number; } This presents a very good opportunity for destructuring in the consuming code:\nimport { Bar } from \u0026#34;./foo\u0026#34;; let x: Bar = Bar.a; console.log(x.count); Again, we\u0026rsquo;ve used Bar as both a type and a value here. Note that we didn\u0026rsquo;t have to declare the Bar value as being of the Bar type \u0026mdash; they\u0026rsquo;re independent.\nAdvanced Combinations # Some kinds of declarations can be combined across multiple declarations. For example, class C { } and interface C { } can co-exist and both contribute properties to the C types.\nThis is legal as long as it does not create a conflict. A general rule of thumb is that values always conflict with other values of the same name unless they are declared as namespaces, types will conflict if they are declared with a type alias declaration (type s = string), and namespaces never conflict.\nLet\u0026rsquo;s see how this can be used.\nAdding using an interface # We can add additional members to an interface with another interface declaration:\ninterface Foo { x: number; } // ... elsewhere ... interface Foo { y: number; } let a: Foo = ...; console.log(a.x + a.y); // OK This also works with classes:\nclass Foo { x: number; } // ... elsewhere ... interface Foo { y: number; } let a: Foo = ...; console.log(a.x + a.y); // OK Note that we cannot add to type aliases (type s = string;) using an interface.\nAdding using a namespace # A namespace declaration can be used to add new types, values, and namespaces in any way which does not create a conflict.\nFor example, we can add a static member to a class:\nclass C {} // ... elsewhere ... namespace C { export let x: number; } let y = C.x; // OK Note that in this example, we added a value to the static side of C (its constructor function). This is because we added a value, and the container for all values is another value (types are contained by namespaces, and namespaces are contained by other namespaces).\nWe could also add a namespaced type to a class:\nclass C {} // ... elsewhere ... namespace C { export interface D {} } let y: C.D; // OK In this example, there wasn\u0026rsquo;t a namespace C until we wrote the namespace declaration for it. The meaning C as a namespace doesn\u0026rsquo;t conflict with the value or type meanings of C created by the class.\nFinally, we could perform many different merges using namespace declarations. This isn\u0026rsquo;t a particularly realistic example, but shows all sorts of interesting behavior:\nnamespace X { export interface Y {} export class Z {} } // ... elsewhere ... namespace X { export var Y: number; export namespace Z { export class C {} } } type X = string; In this example, the first block creates the following name meanings:\nA value X (because the namespace declaration contains a value, Z) A namespace X (because the namespace declaration contains a type, Y) A type Y in the X namespace A type Z in the X namespace (the instance shape of the class) A value Z that is a property of the X value (the constructor function of the class) The second block creates the following name meanings:\nA value Y (of type number) that is a property of the X value A namespace Z A value Z that is a property of the X value A type C in the X.Z namespace A value C that is a property of the X.Z value A type X ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/deep-dive.html{._attribution-link} :::\n"},{"id":259,"href":"/docs/references/languages/typescript/declaration-files/do-s-and-don-ts/","title":"Do S and Don Ts","section":"Declration Files","content":" Do's and Don'ts # General Types # Number, String, Boolean, Symbol and Object # ❌ Don\u0026rsquo;t ever use the types Number, String, Boolean, Symbol, or Object These types refer to non-primitive boxed objects that are almost never used appropriately in JavaScript code.\n/* WRONG */ function reverse(s: String): String; ✅ Do use the types number, string, boolean, and symbol.\n/* OK */ function reverse(s: string): string; Instead of Object, use the non-primitive object type ( added in TypeScript 2.2).\nGenerics # ❌ Don\u0026rsquo;t ever have a generic type which doesn\u0026rsquo;t use its type parameter. See more details in TypeScript FAQ page.\nany # ❌ Don\u0026rsquo;t use any as a type unless you are in the process of migrating a JavaScript project to TypeScript. The compiler effectively treats any as \u0026ldquo;please turn off type checking for this thing\u0026rdquo;. It is similar to putting an @ts-ignore comment around every usage of the variable. This can be very helpful when you are first migrating a JavaScript project to TypeScript as you can set the type for stuff you haven\u0026rsquo;t migrated yet as any, but in a full TypeScript project you are disabling type checking for any parts of your program that use it.\nIn cases where you don\u0026rsquo;t know what type you want to accept, or when you want to accept anything because you will be blindly passing it through without interacting with it, you can use unknown.\nCallback Types # Return Types of Callbacks # ❌ Don\u0026rsquo;t use the return type any for callbacks whose value will be ignored:\n/* WRONG */ function fn(x: () =\u0026gt; any) { x(); } ✅ Do use the return type void for callbacks whose value will be ignored:\n/* OK */ function fn(x: () =\u0026gt; void) { x(); } ❔ Why: Using void is safer because it prevents you from accidentally using the return value of x in an unchecked way:\nfunction fn(x: () =\u0026gt; void) { var k = x(); // oops! meant to do something else k.doSomething(); // error, but would be OK if the return type had been \u0026#39;any\u0026#39; } Optional Parameters in Callbacks # ❌ Don\u0026rsquo;t use optional parameters in callbacks unless you really mean it:\n/* WRONG */ interface Fetcher { getObject(done: (data: unknown, elapsedTime?: number) =\u0026gt; void): void; } This has a very specific meaning: the done callback might be invoked with 1 argument or might be invoked with 2 arguments. The author probably intended to say that the callback might not care about the elapsedTime parameter, but there\u0026rsquo;s no need to make the parameter optional to accomplish this \u0026mdash; it\u0026rsquo;s always legal to provide a callback that accepts fewer arguments.\n✅ Do write callback parameters as non-optional:\n/* OK */ interface Fetcher { getObject(done: (data: unknown, elapsedTime: number) =\u0026gt; void): void; } Overloads and Callbacks # ❌ Don\u0026rsquo;t write separate overloads that differ only on callback arity:\n/* WRONG */ declare function beforeAll(action: () =\u0026gt; void, timeout?: number): void; declare function beforeAll( action: (done: DoneFn) =\u0026gt; void, timeout?: number ): void; ✅ Do write a single overload using the maximum arity:\n/* OK */ declare function beforeAll( action: (done: DoneFn) =\u0026gt; void, timeout?: number ): void; ❔ Why: It\u0026rsquo;s always legal for a callback to disregard a parameter, so there\u0026rsquo;s no need for the shorter overload. Providing a shorter callback first allows incorrectly-typed functions to be passed in because they match the first overload.\nFunction Overloads # Ordering # ❌ Don\u0026rsquo;t put more general overloads before more specific overloads:\n/* WRONG */ declare function fn(x: unknown): unknown; declare function fn(x: HTMLElement): number; declare function fn(x: HTMLDivElement): string; var myElem: HTMLDivElement; var x = fn(myElem); // x: unknown, wat? ✅ Do sort overloads by putting the more general signatures after more specific signatures:\n/* OK */ declare function fn(x: HTMLDivElement): string; declare function fn(x: HTMLElement): number; declare function fn(x: unknown): unknown; var myElem: HTMLDivElement; var x = fn(myElem); // x: string, :) ❔ Why: TypeScript chooses the first matching overload when resolving function calls. When an earlier overload is \u0026ldquo;more general\u0026rdquo; than a later one, the later one is effectively hidden and cannot be called.\nUse Optional Parameters # ❌ Don\u0026rsquo;t write several overloads that differ only in trailing parameters:\n/* WRONG */ interface Example { diff(one: string): number; diff(one: string, two: string): number; diff(one: string, two: string, three: boolean): number; } ✅ Do use optional parameters whenever possible:\n/* OK */ interface Example { diff(one: string, two?: string, three?: boolean): number; } Note that this collapsing should only occur when all overloads have the same return type.\n❔ Why: This is important for two reasons.\nTypeScript resolves signature compatibility by seeing if any signature of the target can be invoked with the arguments of the source, and extraneous arguments are allowed. This code, for example, exposes a bug only when the signature is correctly written using optional parameters:\nfunction fn(x: (a: string, b: number, c: number) =\u0026gt; void) {} var x: Example; // When written with overloads, OK -- used first overload // When written with optionals, correctly an error fn(x.diff); The second reason is when a consumer uses the \u0026ldquo;strict null checking\u0026rdquo; feature of TypeScript. Because unspecified parameters appear as undefined in JavaScript, it\u0026rsquo;s usually fine to pass an explicit undefined to a function with optional arguments. This code, for example, should be OK under strict nulls:\nvar x: Example; // When written with overloads, incorrectly an error because of passing \u0026#39;undefined\u0026#39; to \u0026#39;string\u0026#39; // When written with optionals, correctly OK x.diff(\u0026#34;something\u0026#34;, true ? undefined : \u0026#34;hour\u0026#34;); Use Union Types # ❌ Don\u0026rsquo;t write overloads that differ by type in only one argument position:\n/* WRONG */ interface Moment { utcOffset(): number; utcOffset(b: number): Moment; utcOffset(b: string): Moment; } ✅ Do use union types whenever possible:\n/* OK */ interface Moment { utcOffset(): number; utcOffset(b: number | string): Moment; } Note that we didn\u0026rsquo;t make b optional here because the return types of the signatures differ.\n❔ Why: This is important for people who are \u0026ldquo;passing through\u0026rdquo; a value to your function:\nfunction fn(x: string): Moment; function fn(x: number): Moment; function fn(x: number | string) { // When written with separate overloads, incorrectly an error // When written with union types, correctly OK return moment().utcOffset(x); } ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html{._attribution-link} :::\n"},{"id":260,"href":"/docs/references/languages/typescript/declaration-files/dts-from-js/","title":"Dts From Js","section":"Declration Files","content":" Creating .d.ts Files from .js files # With TypeScript 3.7, TypeScript added support for generating .d.ts files from JavaScript using JSDoc syntax.\nThis set up means you can own the editor experience of TypeScript-powered editors without porting your project to TypeScript, or having to maintain .d.ts files in your codebase. TypeScript supports most JSDoc tags, you can find the reference here.\nSetting up your Project to emit .d.ts files # To add creation of .d.ts files in your project, you will need to do up-to four steps:\nAdd TypeScript to your dev dependencies Add a tsconfig.json to configure TypeScript Run the TypeScript compiler to generate the corresponding d.ts files for JS files (optional) Edit your package.json to reference the types Adding TypeScript # You can learn how to do this in our installation page.\nTSConfig # The TSConfig is a jsonc file which configures both your compiler flags, and declare where to find files. In this case, you will want a file like the following:\n{ // Change this to match your project \u0026#34;include\u0026#34;: [\u0026#34;src/**/*\u0026#34;], \u0026#34;compilerOptions\u0026#34;: { // Tells TypeScript to read JS files, as // normally they are ignored as source files \u0026#34;allowJs\u0026#34;: true, // Generate d.ts files \u0026#34;declaration\u0026#34;: true, // This compiler run should // only output d.ts files \u0026#34;emitDeclarationOnly\u0026#34;: true, // Types should go into this directory. // Removing this would place the .d.ts files // next to the .js files \u0026#34;outDir\u0026#34;: \u0026#34;dist\u0026#34;, // go to js file when using IDE functions like // \u0026#34;Go to Definition\u0026#34; in VSCode \u0026#34;declarationMap\u0026#34;: true } } You can learn more about the options in the tsconfig reference. An alternative to using a TSConfig file is the CLI, this is the same behavior as a CLI command.\nnpx -p typescript tsc src/**/*.js --declaration --allowJs --emitDeclarationOnly --outDir types Run the compiler # You can learn how to do this in our installation page. You want to make sure these files are included in your package if you have the files in your project\u0026rsquo;s .gitignore.\nEditing the package.json # TypeScript replicates the node resolution for modules in a package.json, with an additional step for finding .d.ts files. Roughly, the resolution will first check the optional types field, then the \u0026quot;main\u0026quot; field, and finally will try index.d.ts in the root.\nPackage.json Location of default .d.ts\nNo \u0026ldquo;types\u0026rdquo; field checks \u0026ldquo;main\u0026rdquo;, then index.d.ts \u0026ldquo;types\u0026rdquo;: \u0026ldquo;main.d.ts\u0026rdquo; main.d.ts \u0026ldquo;types\u0026rdquo;: \u0026ldquo;./dist/main.js\u0026rdquo; ./dist/main.d.ts\nIf absent, then \u0026ldquo;main\u0026rdquo; is used\nPackage.json Location of default .d.ts\nNo \u0026ldquo;main\u0026rdquo; field index.d.ts \u0026ldquo;main\u0026rdquo;:\u0026ldquo;index.js\u0026rdquo; index.d.ts \u0026ldquo;main\u0026rdquo;:\u0026quot;./dist/index.js\u0026quot; ./dist/index.d.ts\nTips # If you\u0026rsquo;d like to write tests for your .d.ts files, try tsd.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html{._attribution-link} :::\n"},{"id":261,"href":"/docs/references/languages/typescript/declaration-files/introduction/","title":"Introduction","section":"Declration Files","content":" Introduction # The Declaration Files section is designed to teach you how to write a high-quality TypeScript Declaration File. We need to assume basic familiarity with the TypeScript language in order to get started.\nIf you haven\u0026rsquo;t already, you should read the TypeScript Handbook to familiarize yourself with basic concepts, especially types and modules.\nThe most common case for learning how .d.ts files work is that you\u0026rsquo;re typing an npm package with no types. In that case, you can jump straight to Modules .d.ts.\nThe Declaration Files section is broken down into the following sections.\nWe are often faced with writing a declaration file when we only have examples of the underlying library to guide us. The Declaration Reference section shows many common API patterns and how to write declarations for each of them. This guide is aimed at the TypeScript novice who may not yet be familiar with every language construct in TypeScript.\nThe Library Structures guide helps you understand common library formats and how to write a proper declaration file for each format. If you\u0026rsquo;re editing an existing file, you probably don\u0026rsquo;t need to read this section. Authors of new declaration files are strongly encouraged to read this section to properly understand how the format of the library influences the writing of the declaration file.\nIn the Template section you\u0026rsquo;ll find a number of declaration files that serve as a useful starting point when writing a new file. If you already know what your structure is, see the d.ts Template section in the sidebar.\nMany common mistakes in declaration files can be easily avoided. The Do\u0026rsquo;s and Don\u0026rsquo;ts section identifies common errors, describes how to detect them, and how to fix them. Everyone should read this section to help themselves avoid common mistakes.\nFor seasoned authors interested in the underlying mechanics of how declaration files work, the Deep Dive section explains many advanced concepts in declaration writing, and shows how to leverage these concepts to create cleaner and more intuitive declaration files.\nThe Publishing section explains how to publish your declaration files to an npm package, and shows how to manage your dependent packages.\nFor JavaScript library users, the Consumption section offers a few simple steps to locate and install corresponding declaration files.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html{._attribution-link} :::\n"},{"id":262,"href":"/docs/references/languages/typescript/declaration-files/library-structures/","title":"Library Structures","section":"Declration Files","content":" Library Structures # Broadly speaking, the way you structure your declaration file depends on how the library is consumed. There are many ways of offering a library for consumption in JavaScript, and you\u0026rsquo;ll need to write your declaration file to match it. This guide covers how to identify common library patterns, and how to write declaration files which correspond to that pattern.\nEach type of major library structuring pattern has a corresponding file in the Templates section. You can start with these templates to help you get going faster.\nIdentifying Kinds of Libraries # First, we\u0026rsquo;ll review the kinds of libraries TypeScript declaration files can represent. We\u0026rsquo;ll briefly show how each kind of library is used, how it is written, and list some example libraries from the real world.\nIdentifying the structure of a library is the first step in writing its declaration file. We\u0026rsquo;ll give hints on how to identify structure both based on its usage and its code. Depending on the library\u0026rsquo;s documentation and organization, one might be easier than the other. We recommend using whichever is more comfortable to you.\nWhat should you look for? # Question to ask yourself while looking at a library you are trying to type.\nHow do you obtain the library?\nFor example, can you only get it through npm or only from a CDN?\nHow would you import it?\nDoes it add a global object? Does it use require or import/export statements?\nSmaller samples for different types of libraries # Modular Libraries # Almost every modern Node.js library falls into the module family. These type of libraries only work in a JS environment with a module loader. For example, express only works in Node.js and must be loaded using the CommonJS require function.\nECMAScript 2015 (also known as ES2015, ECMAScript 6, and ES6), CommonJS, and RequireJS have similar notions of importing a module. In JavaScript CommonJS (Node.js), for example, you would write\nvar fs = require(\u0026#34;fs\u0026#34;); In TypeScript or ES6, the import keyword serves the same purpose:\nimport * as fs from \u0026#34;fs\u0026#34;; You\u0026rsquo;ll typically see modular libraries include one of these lines in their documentation:\nvar someLib = require(\u0026#34;someLib\u0026#34;); or\ndefine(..., [\u0026#39;someLib\u0026#39;], function(someLib) { }); As with global modules, you might see these examples in the documentation of a UMD module, so be sure to check the code or documentation.\nIdentifying a Module Library from Code # Modular libraries will typically have at least some of the following:\nUnconditional calls to require or define Declarations like import * as a from 'b'; or export c; Assignments to exports or module.exports They will rarely have:\nAssignments to properties of window or global Templates For Modules # There are four templates available for modules, module.d.ts, module-class.d.ts, module-function.d.ts and module-plugin.d.ts.\nYou should first read module.d.ts for an overview on the way they all work.\nThen use the template module-function.d.ts if your module can be called like a function:\nconst x = require(\u0026#34;foo\u0026#34;); // Note: calling \u0026#39;x\u0026#39; as a function const y = x(42); Use the template module-class.d.ts if your module can be constructed using new:\nconst x = require(\u0026#34;bar\u0026#34;); // Note: using \u0026#39;new\u0026#39; operator on the imported variable const y = new x(\u0026#34;hello\u0026#34;); If you have a module which when imported, makes changes to other modules use template module-plugin.d.ts:\nconst jest = require(\u0026#34;jest\u0026#34;); require(\u0026#34;jest-matchers-files\u0026#34;); Global Libraries # A global library is one that can be accessed from the global scope (i.e. without using any form of import). Many libraries simply expose one or more global variables for use. For example, if you were using jQuery, the $ variable can be used by simply referring to it:\n$(() =\u0026gt; { console.log(\u0026#34;hello!\u0026#34;); }); You\u0026rsquo;ll usually see guidance in the documentation of a global library of how to use the library in an HTML script tag:\n\u0026lt;script src=\u0026#34;http://a.great.cdn.for/someLib.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Today, most popular globally-accessible libraries are actually written as UMD libraries (see below). UMD library documentation is hard to distinguish from global library documentation. Before writing a global declaration file, make sure the library isn\u0026rsquo;t actually UMD.\nIdentifying a Global Library from Code # Global library code is usually extremely simple. A global \u0026ldquo;Hello, world\u0026rdquo; library might look like this:\nfunction createGreeting(s) { return \u0026#34;Hello, \u0026#34; + s; } or like this:\n// Web window.createGreeting = function (s) { return \u0026#34;Hello, \u0026#34; + s; }; // Node global.createGreeting = function (s) { return \u0026#34;Hello, \u0026#34; + s; }; // Potentially any runtime globalThis.createGreeting = function (s) { return \u0026#34;Hello, \u0026#34; + s; }; When looking at the code of a global library, you\u0026rsquo;ll usually see:\nTop-level var statements or function declarations One or more assignments to window.someName Assumptions that DOM primitives like document or window exist You won\u0026rsquo;t see:\nChecks for, or usage of, module loaders like require or define CommonJS/Node.js-style imports of the form var fs = require(\u0026quot;fs\u0026quot;); Calls to define(...) Documentation describing how to require or import the library Examples of Global Libraries # Because it\u0026rsquo;s usually easy to turn a global library into a UMD library, very few popular libraries are still written in the global style. However, libraries that are small and require the DOM (or have no dependencies) may still be global.\nGlobal Library Template # The template file global.d.ts defines an example library myLib. Be sure to read the \u0026ldquo;Preventing Name Conflicts\u0026rdquo; footnote.\nUMD # A UMD module is one that can either be used as module (through an import), or as a global (when run in an environment without a module loader). Many popular libraries, such as Moment.js, are written this way. For example, in Node.js or using RequireJS, you would write:\nimport moment = require(\u0026#34;moment\u0026#34;); console.log(moment.format()); whereas in a vanilla browser environment you would write:\nconsole.log(moment.format()); Identifying a UMD library # UMD modules check for the existence of a module loader environment. This is an easy-to-spot pattern that looks something like this:\n(function (root, factory) { if (typeof define === \u0026#34;function\u0026#34; \u0026amp;\u0026amp; define.amd) { define([\u0026#34;libName\u0026#34;], factory); } else if (typeof module === \u0026#34;object\u0026#34; \u0026amp;\u0026amp; module.exports) { module.exports = factory(require(\u0026#34;libName\u0026#34;)); } else { root.returnExports = factory(root.libName); } }(this, function (b) { If you see tests for typeof define, typeof window, or typeof module in the code of a library, especially at the top of the file, it\u0026rsquo;s almost always a UMD library.\nDocumentation for UMD libraries will also often demonstrate a \u0026ldquo;Using in Node.js\u0026rdquo; example showing require, and a \u0026ldquo;Using in the browser\u0026rdquo; example showing using a \u0026lt;script\u0026gt; tag to load the script.\nExamples of UMD libraries # Most popular libraries are now available as UMD packages. Examples include jQuery, Moment.js, lodash, and many more.\nTemplate # Use the module-plugin.d.ts template.\nConsuming Dependencies # There are several kinds of dependencies your library might have. This section shows how to import them into the declaration file.\nDependencies on Global Libraries # If your library depends on a global library, use a /// \u0026lt;reference types=\u0026quot;...\u0026quot; /\u0026gt; directive:\n/// \u0026lt;reference types=\u0026#34;someLib\u0026#34; /\u0026gt; function getThing(): someLib.thing; Dependencies on Modules # If your library depends on a module, use an import statement:\nimport * as moment from \u0026#34;moment\u0026#34;; function getThing(): moment; Dependencies on UMD libraries # From a Global Library # If your global library depends on a UMD module, use a /// \u0026lt;reference types directive:\n/// \u0026lt;reference types=\u0026#34;moment\u0026#34; /\u0026gt; function getThing(): moment; From a Module or UMD Library # If your module or UMD library depends on a UMD library, use an import statement:\nimport * as someLib from \u0026#34;someLib\u0026#34;; Do not use a /// \u0026lt;reference directive to declare a dependency to a UMD library!\nFootnotes # Preventing Name Conflicts # Note that it\u0026rsquo;s possible to define many types in the global scope when writing a global declaration file. We strongly discourage this as it leads to possible unresolvable name conflicts when many declaration files are in a project.\nA simple rule to follow is to only declare types namespaced by whatever global variable the library defines. For example, if the library defines the global value \u0026lsquo;cats\u0026rsquo;, you should write\ndeclare namespace cats { interface KittySettings {} } But not\n// at top-level interface CatsKittySettings {} This guidance also ensures that the library can be transitioned to UMD without breaking declaration file users.\nThe Impact of ES6 on Module Call Signatures # Many popular libraries, such as Express, expose themselves as a callable function when imported. For example, the typical Express usage looks like this:\nimport exp = require(\u0026#34;express\u0026#34;); var app = exp(); In ES6-compliant module loaders, the top-level object (here imported as exp) can only have properties; the top-level module object can never be callable.\nThe most common solution here is to define a default export for a callable/constructable object; module loaders commonly detect this situation automatically and replace the top-level object with the default export. TypeScript can handle this for you, if you have \u0026quot;esModuleInterop\u0026quot;: true in your tsconfig.json.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/library-structures.html{._attribution-link} :::\n"},{"id":263,"href":"/docs/references/languages/typescript/declaration-files/publishing/","title":"Publishing","section":"Declration Files","content":" Publishing # Now that you have authored a declaration file following the steps of this guide, it is time to publish it to npm. There are two main ways you can publish your declaration files to npm:\nbundling with your npm package publishing to the @types organization on npm. If your types are generated by your source code, publish the types with your source code. Both TypeScript and JavaScript projects can generate types via declaration.\nOtherwise, we recommend submitting the types to DefinitelyTyped, which will publish them to the @types organization on npm.\nIncluding declarations in your npm package # If your package has a main .js file, you will need to indicate the main declaration file in your package.json file as well. Set the types property to point to your bundled declaration file. For example:\n{ \u0026#34;name\u0026#34;: \u0026#34;awesome\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;Vandelay Industries\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;./lib/main.js\u0026#34;, \u0026#34;types\u0026#34;: \u0026#34;./lib/main.d.ts\u0026#34; } Note that the \u0026quot;typings\u0026quot; field is synonymous with types, and could be used as well.\nAlso note that if your main declaration file is named index.d.ts and lives at the root of the package (next to index.js) you do not need to mark the types property, though it is advisable to do so.\nDependencies # All dependencies are managed by npm. Make sure all the declaration packages you depend on are marked appropriately in the \u0026quot;dependencies\u0026quot; section in your package.json. For example, imagine we authored a package that used Browserify and TypeScript.\n{ \u0026#34;name\u0026#34;: \u0026#34;browserify-typescript-extension\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;Vandelay Industries\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;./lib/main.js\u0026#34;, \u0026#34;types\u0026#34;: \u0026#34;./lib/main.d.ts\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;browserify\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;@types/browserify\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;next\u0026#34; } } Here, our package depends on the browserify and typescript packages. browserify does not bundle its declaration files with its npm packages, so we needed to depend on @types/browserify for its declarations. typescript, on the other hand, packages its declaration files, so there was no need for any additional dependencies.\nOur package exposes declarations from each of those, so any user of our browserify-typescript-extension package needs to have these dependencies as well. For that reason, we used \u0026quot;dependencies\u0026quot; and not \u0026quot;devDependencies\u0026quot;, because otherwise our consumers would have needed to manually install those packages. If we had just written a command line application and not expected our package to be used as a library, we might have used devDependencies.\nRed flags # /// \u0026lt;reference path=\u0026quot;...\u0026quot; /\u0026gt; # Don\u0026rsquo;t use /// \u0026lt;reference path=\u0026quot;...\u0026quot; /\u0026gt; in your declaration files.\n/// \u0026lt;reference path=\u0026#34;../typescript/lib/typescriptServices.d.ts\u0026#34; /\u0026gt; .... Do use /// \u0026lt;reference types=\u0026quot;...\u0026quot; /\u0026gt; instead.\n/// \u0026lt;reference types=\u0026#34;typescript\u0026#34; /\u0026gt; .... Make sure to revisit the Consuming dependencies section for more information.\nPackaging dependent declarations # If your type definitions depend on another package:\nDon\u0026rsquo;t combine it with yours, keep each in their own file. Don\u0026rsquo;t copy the declarations in your package either. Do depend on the npm type declaration package if it doesn\u0026rsquo;t package its declaration files. Version selection with typesVersions # When TypeScript opens a package.json file to figure out which files it needs to read, it first looks at a field called typesVersions.\nFolder redirects (using *) # A package.json with a typesVersions field might look like this:\n{ \u0026#34;name\u0026#34;: \u0026#34;package-name\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;types\u0026#34;: \u0026#34;./index.d.ts\u0026#34;, \u0026#34;typesVersions\u0026#34;: { \u0026#34;\u0026gt;=3.1\u0026#34;: { \u0026#34;*\u0026#34;: [\u0026#34;ts3.1/*\u0026#34;] } } } This package.json tells TypeScript to first check the current version of TypeScript. If it\u0026rsquo;s 3.1 or later, TypeScript figures out the path you\u0026rsquo;ve imported relative to the package, and reads from the package\u0026rsquo;s ts3.1 folder.\nThat\u0026rsquo;s what that { \u0026quot;*\u0026quot;: [\u0026quot;ts3.1/*\u0026quot;] } means - if you\u0026rsquo;re familiar with path mapping, it works exactly like that.\nIn the above example, if we\u0026rsquo;re importing from \u0026quot;package-name\u0026quot;, TypeScript will try to resolve from [...]/node_modules/package-name/ts3.1/index.d.ts (and other relevant paths) when running in TypeScript 3.1. If we import from package-name/foo, we\u0026rsquo;ll try to look for [...]/node_modules/package-name/ts3.1/foo.d.ts and [...]/node_modules/package-name/ts3.1/foo/index.d.ts.\nWhat if we\u0026rsquo;re not running in TypeScript 3.1 in this example? Well, if none of the fields in typesVersions get matched, TypeScript falls back to the types field, so here TypeScript 3.0 and earlier will be redirected to [...]/node_modules/package-name/index.d.ts.\nFile redirects # When you want to only change the resolution for a single file at a time, you can tell TypeScript the file to resolve differently by passing in the exact filenames:\n{ \u0026#34;name\u0026#34;: \u0026#34;package-name\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;types\u0026#34;: \u0026#34;./index.d.ts\u0026#34;, \u0026#34;typesVersions\u0026#34;: { \u0026#34;\u0026lt;4.0\u0026#34;: { \u0026#34;index.d.ts\u0026#34;: [\u0026#34;index.v3.d.ts\u0026#34;] } } } On TypeScript 4.0 and above, an import for \u0026quot;package-name\u0026quot; would resolve to ./index.d.ts and for 3.9 and below \u0026quot;./index.v3.d.ts.\nMatching behavior # The way that TypeScript decides on whether a version of the compiler \u0026amp; language matches is by using Node\u0026rsquo;s semver ranges.\nMultiple fields # typesVersions can support multiple fields where each field name is specified by the range to match on.\n{ \u0026#34;name\u0026#34;: \u0026#34;package-name\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;types\u0026#34;: \u0026#34;./index.d.ts\u0026#34;, \u0026#34;typesVersions\u0026#34;: { \u0026#34;\u0026gt;=3.2\u0026#34;: { \u0026#34;*\u0026#34;: [\u0026#34;ts3.2/*\u0026#34;] }, \u0026#34;\u0026gt;=3.1\u0026#34;: { \u0026#34;*\u0026#34;: [\u0026#34;ts3.1/*\u0026#34;] } } } Since ranges have the potential to overlap, determining which redirect applies is order-specific. That means in the above example, even though both the \u0026gt;=3.2 and the \u0026gt;=3.1 matchers support TypeScript 3.2 and above, reversing the order could have different behavior, so the above sample would not be equivalent to the following.\n{ \u0026#34;name\u0026#34;: \u0026#34;package-name\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;types\u0026#34;: \u0026#34;./index.d.ts\u0026#34;, \u0026#34;typesVersions\u0026#34;: { // NOTE: this doesn\u0026#39;t work! \u0026#34;\u0026gt;=3.1\u0026#34;: { \u0026#34;*\u0026#34;: [\u0026#34;ts3.1/*\u0026#34;] }, \u0026#34;\u0026gt;=3.2\u0026#34;: { \u0026#34;*\u0026#34;: [\u0026#34;ts3.2/*\u0026#34;] } } } Publish to # Packages under the @types organization are published automatically from DefinitelyTyped using the types-publisher tool. To get your declarations published as an @types package, please submit a pull request to DefinitelyTyped. You can find more details in the contribution guidelines page.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html{._attribution-link} :::\n"},{"id":264,"href":"/docs/references/languages/typescript/declaration-files/templates/","title":"Templates","section":"Declration Files","content":" Templates # global-modifying-module.d.ts\nglobal-plugin.d.ts global.d.ts module-class.d.ts module-function.d.ts module-plugin.d.ts module.d.ts ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/templates.html{._attribution-link} :::\n"},{"id":265,"href":"/docs/references/languages/typescript/declaration-files/templates/global-d-ts/","title":"Global D Ts","section":"Templates","content":" Global .d.ts # Global Libraries # A global library is one that can be accessed from the global scope (i.e. without using any form of import). Many libraries simply expose one or more global variables for use. For example, if you were using jQuery, the $ variable can be used by simply referring to it:\n$(() =\u0026gt; { console.log(\u0026#34;hello!\u0026#34;); }); You\u0026rsquo;ll usually see guidance in the documentation of a global library of how to use the library in an HTML script tag:\n\u0026lt;script src=\u0026#34;http://a.great.cdn.for/someLib.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Today, most popular globally-accessible libraries are actually written as UMD libraries (see below). UMD library documentation is hard to distinguish from global library documentation. Before writing a global declaration file, make sure the library isn\u0026rsquo;t actually UMD.\nIdentifying a Global Library from Code # Global library code is usually extremely simple. A global \u0026ldquo;Hello, world\u0026rdquo; library might look like this:\nfunction createGreeting(s) { return \u0026#34;Hello, \u0026#34; + s; } or like this:\nwindow.createGreeting = function (s) { return \u0026#34;Hello, \u0026#34; + s; }; When looking at the code of a global library, you\u0026rsquo;ll usually see:\nTop-level var statements or function declarations One or more assignments to window.someName Assumptions that DOM primitives like document or window exist You won\u0026rsquo;t see:\nChecks for, or usage of, module loaders like require or define CommonJS/Node.js-style imports of the form var fs = require(\u0026quot;fs\u0026quot;); Calls to define(...) Documentation describing how to require or import the library Examples of Global Libraries # Because it\u0026rsquo;s usually easy to turn a global library into a UMD library, very few popular libraries are still written in the global style. However, libraries that are small and require the DOM (or have no dependencies) may still be global.\nGlobal Library Template # You can see an example DTS below:\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~] // Project: [~THE PROJECT NAME~] // Definitions by: [~YOUR NAME~] \u0026lt;[~A URL FOR YOU~]\u0026gt; /*~ If this library is callable (e.g. can be invoked as myLib(3)), *~ include those call signatures here. *~ Otherwise, delete this section. */ declare function myLib(a: string): string; declare function myLib(a: number): number; /*~ If you want the name of this library to be a valid type name, *~ you can do so here. *~ *~ For example, this allows us to write \u0026#39;var x: myLib\u0026#39;; *~ Be sure this actually makes sense! If it doesn\u0026#39;t, just *~ delete this declaration and add types inside the namespace below. */ interface myLib { name: string; length: number; extras?: string[]; } /*~ If your library has properties exposed on a global variable, *~ place them here. *~ You should also place types (interfaces and type alias) here. */ declare namespace myLib { //~ We can write \u0026#39;myLib.timeout = 50;\u0026#39; let timeout: number; //~ We can access \u0026#39;myLib.version\u0026#39;, but not change it const version: string; //~ There\u0026#39;s some class we can create via \u0026#39;let c = new myLib.Cat(42)\u0026#39; //~ Or reference e.g. \u0026#39;function f(c: myLib.Cat) { ... } class Cat { constructor(n: number); //~ We can read \u0026#39;c.age\u0026#39; from a \u0026#39;Cat\u0026#39; instance readonly age: number; //~ We can invoke \u0026#39;c.purr()\u0026#39; from a \u0026#39;Cat\u0026#39; instance purr(): void; } //~ We can declare a variable as //~ \u0026#39;var s: myLib.CatSettings = { weight: 5, name: \u0026#34;Maru\u0026#34; };\u0026#39; interface CatSettings { weight: number; name: string; tailLength?: number; } //~ We can write \u0026#39;const v: myLib.VetID = 42;\u0026#39; //~ or \u0026#39;const v: myLib.VetID = \u0026#34;bob\u0026#34;;\u0026#39; type VetID = string | number; //~ We can invoke \u0026#39;myLib.checkCat(c)\u0026#39; or \u0026#39;myLib.checkCat(c, v);\u0026#39; function checkCat(c: Cat, s?: VetID); } ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/templates/global-d-ts.html{._attribution-link} :::\n"},{"id":266,"href":"/docs/references/languages/typescript/declaration-files/templates/global-modifying-module-d-ts/","title":"Global Modifying Module D Ts","section":"Templates","content":" Global: Modifying Module # Global-modifying Modules # A global-modifying module alters existing values in the global scope when they are imported. For example, there might exist a library which adds new members to String.prototype when imported. This pattern is somewhat dangerous due to the possibility of runtime conflicts, but we can still write a declaration file for it.\nIdentifying global-modifying modules # Global-modifying modules are generally easy to identify from their documentation. In general, they\u0026rsquo;re similar to global plugins, but need a require call to activate their effects.\nYou might see documentation like this:\n// \u0026#39;require\u0026#39; call that doesn\u0026#39;t use its return value var unused = require(\u0026#34;magic-string-time\u0026#34;); /* or */ require(\u0026#34;magic-string-time\u0026#34;); var x = \u0026#34;hello, world\u0026#34;; // Creates new methods on built-in types console.log(x.startsWithHello()); var y = [1, 2, 3]; // Creates new methods on built-in types console.log(y.reverseAndSort()); Here is an example\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~] // Project: [~THE PROJECT NAME~] // Definitions by: [~YOUR NAME~] \u0026lt;[~A URL FOR YOU~]\u0026gt; /*~ This is the global-modifying module template file. You should rename it to index.d.ts *~ and place it in a folder with the same name as the module. *~ For example, if you were writing a file for \u0026#34;super-greeter\u0026#34;, this *~ file should be \u0026#39;super-greeter/index.d.ts\u0026#39; */ /*~ Note: If your global-modifying module is callable or constructable, you\u0026#39;ll *~ need to combine the patterns here with those in the module-class or module-function *~ template files */ declare global { /*~ Here, declare things that go in the global namespace, or augment *~ existing declarations in the global namespace */ interface String { fancyFormat(opts: StringFormatOptions): string; } } /*~ If your module exports types or values, write them as usual */ export interface StringFormatOptions { fancinessLevel: number; } /*~ For example, declaring a method on the module (in addition to its global side effects) */ export function doSomething(): void; /*~ If your module exports nothing, you\u0026#39;ll need this line. Otherwise, delete it */ export {}; ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html{._attribution-link} :::\n"},{"id":267,"href":"/docs/references/languages/typescript/declaration-files/templates/global-plugin-d-ts/","title":"Global Plugin D Ts","section":"Templates","content":" Global: Plugin # UMD # A UMD module is one that can either be used as module (through an import), or as a global (when run in an environment without a module loader). Many popular libraries, such as Moment.js, are written this way. For example, in Node.js or using RequireJS, you would write:\nimport moment = require(\u0026#34;moment\u0026#34;); console.log(moment.format()); whereas in a vanilla browser environment you would write:\nconsole.log(moment.format()); Identifying a UMD library # UMD modules check for the existence of a module loader environment. This is an easy-to-spot pattern that looks something like this:\n(function (root, factory) { if (typeof define === \u0026#34;function\u0026#34; \u0026amp;\u0026amp; define.amd) { define([\u0026#34;libName\u0026#34;], factory); } else if (typeof module === \u0026#34;object\u0026#34; \u0026amp;\u0026amp; module.exports) { module.exports = factory(require(\u0026#34;libName\u0026#34;)); } else { root.returnExports = factory(root.libName); } }(this, function (b) { If you see tests for typeof define, typeof window, or typeof module in the code of a library, especially at the top of the file, it\u0026rsquo;s almost always a UMD library.\nDocumentation for UMD libraries will also often demonstrate a \u0026ldquo;Using in Node.js\u0026rdquo; example showing require, and a \u0026ldquo;Using in the browser\u0026rdquo; example showing using a \u0026lt;script\u0026gt; tag to load the script.\nExamples of UMD libraries # Most popular libraries are now available as UMD packages. Examples include jQuery, Moment.js, lodash, and many more.\nTemplate # There are three templates available for modules, module.d.ts, module-class.d.ts and module-function.d.ts.\nUse module-function.d.ts if your module can be called like a function:\nvar x = require(\u0026#34;foo\u0026#34;); // Note: calling \u0026#39;x\u0026#39; as a function var y = x(42); Be sure to read the footnote \u0026ldquo;The Impact of ES6 on Module Call Signatures\u0026rdquo;\nUse module-class.d.ts if your module can be constructed using new:\nvar x = require(\u0026#34;bar\u0026#34;); // Note: using \u0026#39;new\u0026#39; operator on the imported variable var y = new x(\u0026#34;hello\u0026#34;); The same footnote applies to these modules.\nIf your module is not callable or constructable, use the module.d.ts file.\nModule Plugin or UMD Plugin # A module plugin changes the shape of another module (either UMD or module). For example, in Moment.js, moment-range adds a new range method to the moment object.\nFor the purposes of writing a declaration file, you\u0026rsquo;ll write the same code whether the module being changed is a plain module or UMD module.\nTemplate # Use the module-plugin.d.ts template.\nGlobal Plugin # A global plugin is global code that changes the shape of some global. As with global-modifying modules, these raise the possibility of runtime conflict.\nFor example, some libraries add new functions to Array.prototype or String.prototype.\nIdentifying global plugins # Global plugins are generally easy to identify from their documentation.\nYou\u0026rsquo;ll see examples that look like this:\nvar x = \u0026#34;hello, world\u0026#34;; // Creates new methods on built-in types console.log(x.startsWithHello()); var y = [1, 2, 3]; // Creates new methods on built-in types console.log(y.reverseAndSort()); Template # Use the global-plugin.d.ts template.\nGlobal-modifying Modules # A global-modifying module alters existing values in the global scope when they are imported. For example, there might exist a library which adds new members to String.prototype when imported. This pattern is somewhat dangerous due to the possibility of runtime conflicts, but we can still write a declaration file for it.\nIdentifying global-modifying modules # Global-modifying modules are generally easy to identify from their documentation. In general, they\u0026rsquo;re similar to global plugins, but need a require call to activate their effects.\nYou might see documentation like this:\n// \u0026#39;require\u0026#39; call that doesn\u0026#39;t use its return value var unused = require(\u0026#34;magic-string-time\u0026#34;); /* or */ require(\u0026#34;magic-string-time\u0026#34;); var x = \u0026#34;hello, world\u0026#34;; // Creates new methods on built-in types console.log(x.startsWithHello()); var y = [1, 2, 3]; // Creates new methods on built-in types console.log(y.reverseAndSort()); Template # Use the global-modifying-module.d.ts template.\nConsuming Dependencies # There are several kinds of dependencies your library might have. This section shows how to import them into the declaration file.\nDependencies on Global Libraries # If your library depends on a global library, use a /// \u0026lt;reference types=\u0026quot;...\u0026quot; /\u0026gt; directive:\n/// \u0026lt;reference types=\u0026#34;someLib\u0026#34; /\u0026gt; function getThing(): someLib.thing; Dependencies on Modules # If your library depends on a module, use an import statement:\nimport * as moment from \u0026#34;moment\u0026#34;; function getThing(): moment; Dependencies on UMD libraries # From a Global Library # If your global library depends on a UMD module, use a /// \u0026lt;reference types directive:\n/// \u0026lt;reference types=\u0026#34;moment\u0026#34; /\u0026gt; function getThing(): moment; From a Module or UMD Library # If your module or UMD library depends on a UMD library, use an import statement:\nimport * as someLib from \u0026#34;someLib\u0026#34;; Do not use a /// \u0026lt;reference directive to declare a dependency to a UMD library!\nFootnotes # Preventing Name Conflicts # Note that it\u0026rsquo;s possible to define many types in the global scope when writing a global declaration file. We strongly discourage this as it leads to possible unresolvable name conflicts when many declaration files are in a project.\nA simple rule to follow is to only declare types namespaced by whatever global variable the library defines. For example, if the library defines the global value \u0026lsquo;cats\u0026rsquo;, you should write\ndeclare namespace cats { interface KittySettings {} } But not\n// at top-level interface CatsKittySettings {} This guidance also ensures that the library can be transitioned to UMD without breaking declaration file users.\nThe Impact of ES6 on Module Plugins # Some plugins add or modify top-level exports on existing modules. While this is legal in CommonJS and other loaders, ES6 modules are considered immutable and this pattern will not be possible. Because TypeScript is loader-agnostic, there is no compile-time enforcement of this policy, but developers intending to transition to an ES6 module loader should be aware of this.\nThe Impact of ES6 on Module Call Signatures # Many popular libraries, such as Express, expose themselves as a callable function when imported. For example, the typical Express usage looks like this:\nimport exp = require(\u0026#34;express\u0026#34;); var app = exp(); In ES6 module loaders, the top-level object (here imported as exp) can only have properties; the top-level module object is never callable. The most common solution here is to define a default export for a callable/constructable object; some module loader shims will automatically detect this situation and replace the top-level object with the default export.\nLibrary file layout # The layout of your declaration files should mirror the layout of the library.\nA library can consist of multiple modules, such as\nmyLib +---- index.js +---- foo.js +---- bar +---- index.js +---- baz.js These could be imported as\nvar a = require(\u0026#34;myLib\u0026#34;); var b = require(\u0026#34;myLib/foo\u0026#34;); var c = require(\u0026#34;myLib/bar\u0026#34;); var d = require(\u0026#34;myLib/bar/baz\u0026#34;); Your declaration files should thus be\n@types/myLib +---- index.d.ts +---- foo.d.ts +---- bar +---- index.d.ts +---- baz.d.ts // Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~] // Project: [~THE PROJECT NAME~] // Definitions by: [~YOUR NAME~] \u0026lt;[~A URL FOR YOU~]\u0026gt; /*~ This template shows how to write a global plugin. */ /*~ Write a declaration for the original type and add new members. *~ For example, this adds a \u0026#39;toBinaryString\u0026#39; method with overloads to *~ the built-in number type. */ interface Number { toBinaryString(opts?: MyLibrary.BinaryFormatOptions): string; toBinaryString( callback: MyLibrary.BinaryFormatCallback, opts?: MyLibrary.BinaryFormatOptions ): string; } /*~ If you need to declare several types, place them inside a namespace *~ to avoid adding too many things to the global namespace. */ declare namespace MyLibrary { type BinaryFormatCallback = (n: number) =\u0026gt; string; interface BinaryFormatOptions { prefix?: string; padding: number; } } ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/templates/global-plugin-d-ts.html{._attribution-link} :::\n"},{"id":268,"href":"/docs/references/languages/typescript/declaration-files/templates/module-class-d-ts/","title":"Module Class D Ts","section":"Templates","content":" Module: Class # For example, when you want to work with JavaScript code which looks like:\nconst Greeter = require(\u0026#34;super-greeter\u0026#34;); const greeter = new Greeter(); greeter.greet(); To handle both importing via UMD and modules:\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~] // Project: [~THE PROJECT NAME~] // Definitions by: [~YOUR NAME~] \u0026lt;[~A URL FOR YOU~]\u0026gt; /*~ This is the module template file for class modules. *~ You should rename it to index.d.ts and place it in a folder with the same name as the module. *~ For example, if you were writing a file for \u0026#34;super-greeter\u0026#34;, this *~ file should be \u0026#39;super-greeter/index.d.ts\u0026#39; */ // Note that ES6 modules cannot directly export class objects. // This file should be imported using the CommonJS-style: // import x = require(\u0026#39;[~THE MODULE~]\u0026#39;); // // Alternatively, if --allowSyntheticDefaultImports or // --esModuleInterop is turned on, this file can also be // imported as a default import: // import x from \u0026#39;[~THE MODULE~]\u0026#39;; // // Refer to the TypeScript documentation at // https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require // to understand common workarounds for this limitation of ES6 modules. /*~ If this module is a UMD module that exposes a global variable \u0026#39;myClassLib\u0026#39; when *~ loaded outside a module loader environment, declare that global here. *~ Otherwise, delete this declaration. */ export as namespace \u0026#34;super-greeter\u0026#34;; /*~ This declaration specifies that the class constructor function *~ is the exported object from the file */ export = Greeter; /*~ Write your module\u0026#39;s methods and properties in this class */ declare class Greeter { constructor(customGreeting?: string); greet: void; myMethod(opts: MyClass.MyClassMethodOptions): number; } /*~ If you want to expose types from your module as well, you can *~ place them in this block. *~ *~ Note that if you decide to include this namespace, the module can be *~ incorrectly imported as a namespace object, unless *~ --esModuleInterop is turned on: *~ import * as x from \u0026#39;[~THE MODULE~]\u0026#39;; // WRONG! DO NOT DO THIS! */ declare namespace MyClass { export interface MyClassMethodOptions { width?: number; height?: number; } } ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/templates/module-class-d-ts.html{._attribution-link} :::\n"},{"id":269,"href":"/docs/references/languages/typescript/declaration-files/templates/module-d-ts/","title":"Module D Ts","section":"Templates","content":" Modules .d.ts # Comparing JavaScript to an example DTS # Common CommonJS Patterns # A module using CommonJS patterns uses module.exports to describe the exported values. For example, here is a module which exports a function and a numerical constant:\nconst maxInterval = 12; function getArrayLength(arr) { return arr.length; } module.exports = { getArrayLength, maxInterval, }; This can be described by the following .d.ts:\nexport function getArrayLength(arr: any[]): number; export const maxInterval: 12; The TypeScript playground can show you the .d.ts equivalent for JavaScript code. You can try it yourself here.\nThe .d.ts syntax intentionally looks like ES Modules syntax. ES Modules was ratified by TC39 in 2015 as part of ES2015 (ES6), while it has been available via transpilers for a long time, however if you have a JavaScript codebase using ES Modules:\nexport function getArrayLength(arr) { return arr.length; } This would have the following .d.ts equivalent:\nexport function getArrayLength(arr: any[]): number; Default Exports # In CommonJS you can export any value as the default export, for example here is a regular expression module:\nmodule.exports = /hello( world)?/; Which can be described by the following .d.ts:\ndeclare const helloWorld: RegExp; export default helloWorld; Or a number:\nmodule.exports = 3.142; declare const pi: number; export default pi; One style of exporting in CommonJS is to export a function. Because a function is also an object, then extra fields can be added and are included in the export.\nfunction getArrayLength(arr) { return arr.length; } getArrayLength.maxInterval = 12; module.exports = getArrayLength; Which can be described with:\nexport default function getArrayLength(arr: any[]): number; export const maxInterval: 12; Note that using export default in your .d.ts files requires esModuleInterop: true to work. If you can\u0026rsquo;t have esModuleInterop: true in your project, such as when you\u0026rsquo;re submitting a PR to Definitely Typed, you\u0026rsquo;ll have to use the export= syntax instead. This older syntax is harder to use but works everywhere. Here\u0026rsquo;s how the above example would have to be written using export=:\ndeclare function getArrayLength(arr: any[]): number; declare namespace getArrayLength { declare const maxInterval: 12; } export = getArrayLength; See Module: Functions for details of how that works, and the Modules reference page.\nHandling Many Consuming Import # There are many ways to import a module in modern consuming code:\nconst fastify = require(\u0026#34;fastify\u0026#34;); const { fastify } = require(\u0026#34;fastify\u0026#34;); import fastify = require(\u0026#34;fastify\u0026#34;); import * as Fastify from \u0026#34;fastify\u0026#34;; import { fastify, FastifyInstance } from \u0026#34;fastify\u0026#34;; import fastify from \u0026#34;fastify\u0026#34;; import fastify, { FastifyInstance } from \u0026#34;fastify\u0026#34;; Covering all of these cases requires the JavaScript code to actually support all of these patterns. To support many of these patterns, a CommonJS module would need to look something like:\nclass FastifyInstance {} function fastify() { return new FastifyInstance(); } fastify.FastifyInstance = FastifyInstance; // Allows for { fastify } fastify.fastify = fastify; // Allows for strict ES Module support fastify.default = fastify; // Sets the default export module.exports = fastify; Types in Modules # You may want to provide a type for JavaScript code which does not exist\nfunction getArrayMetadata(arr) { return { length: getArrayLength(arr), firstObject: arr[0], }; } module.exports = { getArrayMetadata, }; This can be described with:\nexport type ArrayMetadata = { length: number; firstObject: any | undefined; }; export function getArrayMetadata(arr: any[]): ArrayMetadata; This example is a good case for using generics to provide richer type information:\nexport type ArrayMetadata\u0026lt;ArrType\u0026gt; = { length: number; firstObject: ArrType | undefined; }; export function getArrayMetadata\u0026lt;ArrType\u0026gt;( arr: ArrType[] ): ArrayMetadata\u0026lt;ArrType\u0026gt;; Now the type of the array propagates into the ArrayMetadata type.\nThe types which are exported can then be re-used by consumers of the modules using either import or import type in TypeScript code or JSDoc imports.\nNamespaces in Module Code # Trying to describe the runtime relationship of JavaScript code can be tricky. When the ES Module-like syntax doesn\u0026rsquo;t provide enough tools to describe the exports then you can use namespaces.\nFor example, you may have complex enough types to describe that you choose to namespace them inside your .d.ts:\n// This represents the JavaScript class which would be available at runtime export class API { constructor(baseURL: string); getInfo(opts: API.InfoRequest): API.InfoResponse; } // This namespace is merged with the API class and allows for consumers, and this file // to have types which are nested away in their own sections. declare namespace API { export interface InfoRequest { id: string; } export interface InfoResponse { width: number; height: number; } } To understand how namespaces work in .d.ts files read the .d.ts deep dive.\nOptional Global Usage # You can use export as namespace to declare that your module will be available in the global scope in UMD contexts:\nexport as namespace moduleName; Reference Example # To give you an idea of how all these pieces can come together, here is a reference .d.ts to start with when making a new module\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~] // Project: [~THE PROJECT NAME~] // Definitions by: [~YOUR NAME~] \u0026lt;[~A URL FOR YOU~]\u0026gt; /*~ This is the module template file. You should rename it to index.d.ts *~ and place it in a folder with the same name as the module. *~ For example, if you were writing a file for \u0026#34;super-greeter\u0026#34;, this *~ file should be \u0026#39;super-greeter/index.d.ts\u0026#39; */ /*~ If this module is a UMD module that exposes a global variable \u0026#39;myLib\u0026#39; when *~ loaded outside a module loader environment, declare that global here. *~ Otherwise, delete this declaration. */ export as namespace myLib; /*~ If this module exports functions, declare them like so. */ export function myFunction(a: string): string; export function myOtherFunction(a: number): number; /*~ You can declare types that are available via importing the module */ export interface SomeType { name: string; length: number; extras?: string[]; } /*~ You can declare properties of the module using const, let, or var */ export const myField: number; Library file layout # The layout of your declaration files should mirror the layout of the library.\nA library can consist of multiple modules, such as\nmyLib +---- index.js +---- foo.js +---- bar +---- index.js +---- baz.js These could be imported as\nvar a = require(\u0026#34;myLib\u0026#34;); var b = require(\u0026#34;myLib/foo\u0026#34;); var c = require(\u0026#34;myLib/bar\u0026#34;); var d = require(\u0026#34;myLib/bar/baz\u0026#34;); Your declaration files should thus be\n@types/myLib +---- index.d.ts +---- foo.d.ts +---- bar +---- index.d.ts +---- baz.d.ts Testing your types # If you are planning on submitting these changes to DefinitelyTyped for everyone to also use, then we recommend you:\nCreate a new folder in node_modules/@types/[libname] Create an index.d.ts in that folder, and copy the example in See where your usage of the module breaks, and start to fill out the index.d.ts When you\u0026rsquo;re happy, clone DefinitelyTyped/DefinitelyTyped and follow the instructions in the README. Otherwise\nCreate a new file in the root of your source tree: [libname].d.ts Add declare module \u0026quot;[libname]\u0026quot; { } Add the template inside the braces of the declare module, and see where your usage breaks ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/templates/module-d-ts.html{._attribution-link} :::\n"},{"id":270,"href":"/docs/references/languages/typescript/declaration-files/templates/module-function-d-ts/","title":"Module Function D Ts","section":"Templates","content":" Module: Function # For example, when you want to work with JavaScript code which looks like:\nimport greeter from \u0026#34;super-greeter\u0026#34;; greeter(2); greeter(\u0026#34;Hello world\u0026#34;); To handle both importing via UMD and modules:\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~] // Project: [~THE PROJECT NAME~] // Definitions by: [~YOUR NAME~] \u0026lt;[~A URL FOR YOU~]\u0026gt; /*~ This is the module template file for function modules. *~ You should rename it to index.d.ts and place it in a folder with the same name as the module. *~ For example, if you were writing a file for \u0026#34;super-greeter\u0026#34;, this *~ file should be \u0026#39;super-greeter/index.d.ts\u0026#39; */ // Note that ES6 modules cannot directly export class objects. // This file should be imported using the CommonJS-style: // import x = require(\u0026#39;[~THE MODULE~]\u0026#39;); // // Alternatively, if --allowSyntheticDefaultImports or // --esModuleInterop is turned on, this file can also be // imported as a default import: // import x from \u0026#39;[~THE MODULE~]\u0026#39;; // // Refer to the TypeScript documentation at // https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require // to understand common workarounds for this limitation of ES6 modules. /*~ If this module is a UMD module that exposes a global variable \u0026#39;myFuncLib\u0026#39; when *~ loaded outside a module loader environment, declare that global here. *~ Otherwise, delete this declaration. */ export as namespace myFuncLib; /*~ This declaration specifies that the function *~ is the exported object from the file */ export = Greeter; /*~ This example shows how to have multiple overloads for your function */ declare function Greeter(name: string): Greeter.NamedReturnType; declare function Greeter(length: number): Greeter.LengthReturnType; /*~ If you want to expose types from your module as well, you can *~ place them in this block. Often you will want to describe the *~ shape of the return type of the function; that type should *~ be declared in here, as this example shows. *~ *~ Note that if you decide to include this namespace, the module can be *~ incorrectly imported as a namespace object, unless *~ --esModuleInterop is turned on: *~ import * as x from \u0026#39;[~THE MODULE~]\u0026#39;; // WRONG! DO NOT DO THIS! */ declare namespace Greeter { export interface LengthReturnType { width: number; height: number; } export interface NamedReturnType { firstName: string; lastName: string; } /*~ If the module also has properties, declare them here. For example, *~ this declaration says that this code is legal: *~ import f = require(\u0026#39;super-greeter\u0026#39;); *~ console.log(f.defaultName); */ export const defaultName: string; export let defaultLength: number; } ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/templates/module-function-d-ts.html{._attribution-link} :::\n"},{"id":271,"href":"/docs/references/languages/typescript/declaration-files/templates/module-plugin-d-ts/","title":"Module Plugin D Ts","section":"Templates","content":" Module: Plugin # For example, when you want to work with JavaScript code which extends another library.\nimport { greeter } from \u0026#34;super-greeter\u0026#34;; // Normal Greeter API greeter(2); greeter(\u0026#34;Hello world\u0026#34;); // Now we extend the object with a new function at runtime import \u0026#34;hyper-super-greeter\u0026#34;; greeter.hyperGreet(); The definition for \u0026ldquo;super-greeter\u0026rdquo;:\n/*~ This example shows how to have multiple overloads for your function */ export interface GreeterFunction { (name: string): void (time: number): void } /*~ This example shows how to export a function specified by an interface */ export const greeter: GreeterFunction; We can extend the existing module like the following:\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~] // Project: [~THE PROJECT NAME~] // Definitions by: [~YOUR NAME~] \u0026lt;[~A URL FOR YOU~]\u0026gt; /*~ This is the module plugin template file. You should rename it to index.d.ts *~ and place it in a folder with the same name as the module. *~ For example, if you were writing a file for \u0026#34;super-greeter\u0026#34;, this *~ file should be \u0026#39;super-greeter/index.d.ts\u0026#39; */ /*~ On this line, import the module which this module adds to */ import { greeter } from \u0026#34;super-greeter\u0026#34;; /*~ Here, declare the same module as the one you imported above *~ then we expand the existing declaration of the greeter function */ export module \u0026#34;super-greeter\u0026#34; { export interface GreeterFunction { /** Greets even better! */ hyperGreet(): void; } } This uses declaration merging\nThe Impact of ES6 on Module Plugins # Some plugins add or modify top-level exports on existing modules. While this is legal in CommonJS and other loaders, ES6 modules are considered immutable and this pattern will not be possible. Because TypeScript is loader-agnostic, there is no compile-time enforcement of this policy, but developers intending to transition to an ES6 module loader should be aware of this.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/templates/module-plugin-d-ts.html{._attribution-link} :::\n"},{"id":272,"href":"/docs/references/languages/typescript/declaration-merging/","title":"Declaration Merging","section":"Typescript","content":" Declaration Merging # Introduction # Some of the unique concepts in TypeScript describe the shape of JavaScript objects at the type level. One example that is especially unique to TypeScript is the concept of \u0026lsquo;declaration merging\u0026rsquo;. Understanding this concept will give you an advantage when working with existing JavaScript. It also opens the door to more advanced abstraction concepts.\nFor the purposes of this article, \u0026ldquo;declaration merging\u0026rdquo; means that the compiler merges two separate declarations declared with the same name into a single definition. This merged definition has the features of both of the original declarations. Any number of declarations can be merged; it\u0026rsquo;s not limited to just two declarations.\nBasic Concepts # In TypeScript, a declaration creates entities in at least one of three groups: namespace, type, or value. Namespace-creating declarations create a namespace, which contains names that are accessed using a dotted notation. Type-creating declarations do just that: they create a type that is visible with the declared shape and bound to the given name. Lastly, value-creating declarations create values that are visible in the output JavaScript.\nDeclaration Type Namespace Type Value\nNamespace X X Class X X Enum X X Interface X Type Alias X Function X Variable X\nUnderstanding what is created with each declaration will help you understand what is merged when you perform a declaration merge.\nMerging Interfaces # The simplest, and perhaps most common, type of declaration merging is interface merging. At the most basic level, the merge mechanically joins the members of both declarations into a single interface with the same name.\ninterface Box { height: number; width: number; } interface Box { scale: number; } let box: Box = { height: 5, width: 6, scale: 10 }; Non-function members of the interfaces should be unique. If they are not unique, they must be of the same type. The compiler will issue an error if the interfaces both declare a non-function member of the same name, but of different types.\nFor function members, each function member of the same name is treated as describing an overload of the same function. Of note, too, is that in the case of interface A merging with later interface A, the second interface will have a higher precedence than the first.\nThat is, in the example:\ninterface Cloner { clone(animal: Animal): Animal; } interface Cloner { clone(animal: Sheep): Sheep; } interface Cloner { clone(animal: Dog): Dog; clone(animal: Cat): Cat; } The three interfaces will merge to create a single declaration as so:\ninterface Cloner { clone(animal: Dog): Dog; clone(animal: Cat): Cat; clone(animal: Sheep): Sheep; clone(animal: Animal): Animal; } Notice that the elements of each group maintains the same order, but the groups themselves are merged with later overload sets ordered first.\nOne exception to this rule is specialized signatures. If a signature has a parameter whose type is a single string literal type (e.g. not a union of string literals), then it will be bubbled toward the top of its merged overload list.\nFor instance, the following interfaces will merge together:\ninterface Document { createElement(tagName: any): Element; } interface Document { createElement(tagName: \u0026#34;div\u0026#34;): HTMLDivElement; createElement(tagName: \u0026#34;span\u0026#34;): HTMLSpanElement; } interface Document { createElement(tagName: string): HTMLElement; createElement(tagName: \u0026#34;canvas\u0026#34;): HTMLCanvasElement; } The resulting merged declaration of Document will be the following:\ninterface Document { createElement(tagName: \u0026#34;canvas\u0026#34;): HTMLCanvasElement; createElement(tagName: \u0026#34;div\u0026#34;): HTMLDivElement; createElement(tagName: \u0026#34;span\u0026#34;): HTMLSpanElement; createElement(tagName: string): HTMLElement; createElement(tagName: any): Element; } Merging Namespaces # Similarly to interfaces, namespaces of the same name will also merge their members. Since namespaces create both a namespace and a value, we need to understand how both merge.\nTo merge the namespaces, type definitions from exported interfaces declared in each namespace are themselves merged, forming a single namespace with merged interface definitions inside.\nTo merge the namespace value, at each declaration site, if a namespace already exists with the given name, it is further extended by taking the existing namespace and adding the exported members of the second namespace to the first.\nThe declaration merge of Animals in this example:\nnamespace Animals { export class Zebra {} } namespace Animals { export interface Legged { numberOfLegs: number; } export class Dog {} } is equivalent to:\nnamespace Animals { export interface Legged { numberOfLegs: number; } export class Zebra {} export class Dog {} } This model of namespace merging is a helpful starting place, but we also need to understand what happens with non-exported members. Non-exported members are only visible in the original (un-merged) namespace. This means that after merging, merged members that came from other declarations cannot see non-exported members.\nWe can see this more clearly in this example:\nnamespace Animal { let haveMuscles = true; export function animalsHaveMuscles() { return haveMuscles; } } namespace Animal { export function doAnimalsHaveMuscles() { return haveMuscles; // Error, because haveMuscles is not accessible here } } Because haveMuscles is not exported, only the animalsHaveMuscles function that shares the same un-merged namespace can see the symbol. The doAnimalsHaveMuscles function, even though it\u0026rsquo;s part of the merged Animal namespace can not see this un-exported member.\nMerging Namespaces with Classes, Functions, and Enums # Namespaces are flexible enough to also merge with other types of declarations. To do so, the namespace declaration must follow the declaration it will merge with. The resulting declaration has properties of both declaration types. TypeScript uses this capability to model some of the patterns in JavaScript as well as other programming languages.\nMerging Namespaces with Classes # This gives the user a way of describing inner classes.\nclass Album { label: Album.AlbumLabel; } namespace Album { export class AlbumLabel {} } The visibility rules for merged members is the same as described in the Merging Namespaces section, so we must export the AlbumLabel class for the merged class to see it. The end result is a class managed inside of another class. You can also use namespaces to add more static members to an existing class.\nIn addition to the pattern of inner classes, you may also be familiar with the JavaScript practice of creating a function and then extending the function further by adding properties onto the function. TypeScript uses declaration merging to build up definitions like this in a type-safe way.\nfunction buildLabel(name: string): string { return buildLabel.prefix + name + buildLabel.suffix; } namespace buildLabel { export let suffix = \u0026#34;\u0026#34;; export let prefix = \u0026#34;Hello, \u0026#34;; } console.log(buildLabel(\u0026#34;Sam Smith\u0026#34;)); Similarly, namespaces can be used to extend enums with static members:\nenum Color { red = 1, green = 2, blue = 4, } namespace Color { export function mixColor(colorName: string) { if (colorName == \u0026#34;yellow\u0026#34;) { return Color.red + Color.green; } else if (colorName == \u0026#34;white\u0026#34;) { return Color.red + Color.green + Color.blue; } else if (colorName == \u0026#34;magenta\u0026#34;) { return Color.red + Color.blue; } else if (colorName == \u0026#34;cyan\u0026#34;) { return Color.green + Color.blue; } } } Disallowed Merges # Not all merges are allowed in TypeScript. Currently, classes can not merge with other classes or with variables. For information on mimicking class merging, see the Mixins in TypeScript section.\nModule Augmentation # Although JavaScript modules do not support merging, you can patch existing objects by importing and then updating them. Let\u0026rsquo;s look at a toy Observable example:\n// observable.ts export class Observable\u0026lt;T\u0026gt; { // ... implementation left as an exercise for the reader ... } // map.ts import { Observable } from \u0026#34;./observable\u0026#34;; Observable.prototype.map = function (f) { // ... another exercise for the reader }; This works fine in TypeScript too, but the compiler doesn\u0026rsquo;t know about Observable.prototype.map. You can use module augmentation to tell the compiler about it:\n// observable.ts export class Observable\u0026lt;T\u0026gt; { // ... implementation left as an exercise for the reader ... } // map.ts import { Observable } from \u0026#34;./observable\u0026#34;; declare module \u0026#34;./observable\u0026#34; { interface Observable\u0026lt;T\u0026gt; { map\u0026lt;U\u0026gt;(f: (x: T) =\u0026gt; U): Observable\u0026lt;U\u0026gt;; } } Observable.prototype.map = function (f) { // ... another exercise for the reader }; // consumer.ts import { Observable } from \u0026#34;./observable\u0026#34;; import \u0026#34;./map\u0026#34;; let o: Observable\u0026lt;number\u0026gt;; o.map((x) =\u0026gt; x.toFixed()); The module name is resolved the same way as module specifiers in import/export. See Modules for more information. Then the declarations in an augmentation are merged as if they were declared in the same file as the original.\nHowever, there are two limitations to keep in mind:\nYou can\u0026rsquo;t declare new top-level declarations in the augmentation \u0026mdash; just patches to existing declarations. Default exports also cannot be augmented, only named exports (since you need to augment an export by its exported name, and default is a reserved word - see #14080 for details) Global augmentation # You can also add declarations to the global scope from inside a module:\n// observable.ts export class Observable\u0026lt;T\u0026gt; { // ... still no implementation ... } declare global { interface Array\u0026lt;T\u0026gt; { toObservable(): Observable\u0026lt;T\u0026gt;; } } Array.prototype.toObservable = function () { // ... }; Global augmentations have the same behavior and limits as module augmentations.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/declaration-merging.html{._attribution-link} :::\n"},{"id":273,"href":"/docs/references/languages/typescript/decorators/","title":"Decorators","section":"Typescript","content":" Decorators # Introduction # Further Reading:\nA Complete Guide to TypeScript Decorators\nWith the introduction of Classes in TypeScript and ES6, there now exist certain scenarios that require additional features to support annotating or modifying classes and class members. Decorators provide a way to add both annotations and a meta-programming syntax for class declarations and members. Decorators are a stage 2 proposal for JavaScript and are available as an experimental feature of TypeScript.\nNOTE Decorators are an experimental feature that may change in future releases.\nTo enable experimental support for decorators, you must enable the experimentalDecorators compiler option either on the command line or in your tsconfig.json:\nCommand Line:\ntsc --target ES5 --experimentalDecorators tsconfig.json:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;ES5\u0026#34;, \u0026#34;experimentalDecorators\u0026#34;: true } } Decorators # A Decorator is a special kind of declaration that can be attached to a class declaration, method, accessor, property, or parameter. Decorators use the form @expression, where expression must evaluate to a function that will be called at runtime with information about the decorated declaration.\nFor example, given the decorator @sealed we might write the sealed function as follows:\nfunction sealed(target) { // do something with \u0026#39;target\u0026#39; ... } Decorator Factories # If we want to customize how a decorator is applied to a declaration, we can write a decorator factory. A Decorator Factory is simply a function that returns the expression that will be called by the decorator at runtime.\nWe can write a decorator factory in the following fashion:\nfunction color(value: string) { // this is the decorator factory, it sets up // the returned decorator function return function (target) { // this is the decorator // do something with \u0026#39;target\u0026#39; and \u0026#39;value\u0026#39;... }; } Decorator Composition # Multiple decorators can be applied to a declaration, for example on a single line:\n@f @g x On multiple lines:\n@f @g x When multiple decorators apply to a single declaration, their evaluation is similar to function composition in mathematics. In this model, when composing functions f and g, the resulting composite (f ∘ g)(x) is equivalent to f(g(x)).\nAs such, the following steps are performed when evaluating multiple decorators on a single declaration in TypeScript:\nThe expressions for each decorator are evaluated top-to-bottom. The results are then called as functions from bottom-to-top. If we were to use decorator factories, we can observe this evaluation order with the following example:\nfunction first() { console.log(\u0026#34;first(): factory evaluated\u0026#34;); return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) { console.log(\u0026#34;first(): called\u0026#34;); }; } function second() { console.log(\u0026#34;second(): factory evaluated\u0026#34;); return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) { console.log(\u0026#34;second(): called\u0026#34;); }; } class ExampleClass { @first() @second() method() {} } Which would print this output to the console:\nfirst(): factory evaluated second(): factory evaluated second(): called first(): called Decorator Evaluation # There is a well defined order to how decorators applied to various declarations inside of a class are applied:\nParameter Decorators, followed by Method, Accessor, or Property Decorators are applied for each instance member. Parameter Decorators, followed by Method, Accessor, or Property Decorators are applied for each static member. Parameter Decorators are applied for the constructor. Class Decorators are applied for the class. Class Decorators # A Class Decorator is declared just before a class declaration. The class decorator is applied to the constructor of the class and can be used to observe, modify, or replace a class definition. A class decorator cannot be used in a declaration file, or in any other ambient context (such as on a declare class).\nThe expression for the class decorator will be called as a function at runtime, with the constructor of the decorated class as its only argument.\nIf the class decorator returns a value, it will replace the class declaration with the provided constructor function.\nNOTE Should you choose to return a new constructor function, you must take care to maintain the original prototype. The logic that applies decorators at runtime will not do this for you.\nThe following is an example of a class decorator (@sealed) applied to a BugReport class:\n@sealed class BugReport { type = \u0026#34;report\u0026#34;; title: string; constructor(t: string) { this.title = t; } } We can define the @sealed decorator using the following function declaration:\nfunction sealed(constructor: Function) { Object.seal(constructor); Object.seal(constructor.prototype); } When @sealed is executed, it will seal both the constructor and its prototype, and will therefore prevent any further functionality from being added to or removed from this class during runtime by accessing BugReport.prototype or by defining properties on BugReport itself (note that ES2015 classes are really just syntactic sugar to prototype-based constructor functions). This decorator does not prevent classes from sub-classing BugReport.\nNext we have an example of how to override the constructor to set new defaults.\nfunction reportableClassDecorator\u0026lt;T extends { new (...args: any[]): {} }\u0026gt;(constructor: T) { return class extends constructor { reportingURL = \u0026#34;http://www...\u0026#34;; }; } @reportableClassDecorator class BugReport { type = \u0026#34;report\u0026#34;; title: string; constructor(t: string) { this.title = t; } } const bug = new BugReport(\u0026#34;Needs dark mode\u0026#34;); console.log(bug.title); // Prints \u0026#34;Needs dark mode\u0026#34; console.log(bug.type); // Prints \u0026#34;report\u0026#34; // Note that the decorator _does not_ change the TypeScript type // and so the new property `reportingURL` is not known // to the type system: bug.reportingURL; Method Decorators # A Method Decorator is declared just before a method declaration. The decorator is applied to the Property Descriptor for the method, and can be used to observe, modify, or replace a method definition. A method decorator cannot be used in a declaration file, on an overload, or in any other ambient context (such as in a declare class).\nThe expression for the method decorator will be called as a function at runtime, with the following three arguments:\nEither the constructor function of the class for a static member, or the prototype of the class for an instance member. The name of the member. The Property Descriptor for the member. NOTE The Property Descriptor will be undefined if your script target is less than ES5.\nIf the method decorator returns a value, it will be used as the Property Descriptor for the method.\nNOTE The return value is ignored if your script target is less than ES5.\nThe following is an example of a method decorator (@enumerable) applied to a method on the Greeter class:\nclass Greeter { greeting: string; constructor(message: string) { this.greeting = message; } @enumerable(false) greet() { return \u0026#34;Hello, \u0026#34; + this.greeting; } } We can define the @enumerable decorator using the following function declaration:\nfunction enumerable(value: boolean) { return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) { descriptor.enumerable = value; }; } The @enumerable(false) decorator here is a decorator factory. When the @enumerable(false) decorator is called, it modifies the enumerable property of the property descriptor.\nAccessor Decorators # An Accessor Decorator is declared just before an accessor declaration. The accessor decorator is applied to the Property Descriptor for the accessor and can be used to observe, modify, or replace an accessor\u0026rsquo;s definitions. An accessor decorator cannot be used in a declaration file, or in any other ambient context (such as in a declare class).\nNOTE TypeScript disallows decorating both the get and set accessor for a single member. Instead, all decorators for the member must be applied to the first accessor specified in document order. This is because decorators apply to a Property Descriptor, which combines both the get and set accessor, not each declaration separately.\nThe expression for the accessor decorator will be called as a function at runtime, with the following three arguments:\nEither the constructor function of the class for a static member, or the prototype of the class for an instance member. The name of the member. The Property Descriptor for the member. NOTE The Property Descriptor will be undefined if your script target is less than ES5.\nIf the accessor decorator returns a value, it will be used as the Property Descriptor for the member.\nNOTE The return value is ignored if your script target is less than ES5.\nThe following is an example of an accessor decorator (@configurable) applied to a member of the Point class:\nclass Point { private _x: number; private _y: number; constructor(x: number, y: number) { this._x = x; this._y = y; } @configurable(false) get x() { return this._x; } @configurable(false) get y() { return this._y; } } We can define the @configurable decorator using the following function declaration:\nfunction configurable(value: boolean) { return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) { descriptor.configurable = value; }; } Property Decorators # A Property Decorator is declared just before a property declaration. A property decorator cannot be used in a declaration file, or in any other ambient context (such as in a declare class).\nThe expression for the property decorator will be called as a function at runtime, with the following two arguments:\nEither the constructor function of the class for a static member, or the prototype of the class for an instance member. The name of the member. NOTE A Property Descriptor is not provided as an argument to a property decorator due to how property decorators are initialized in TypeScript. This is because there is currently no mechanism to describe an instance property when defining members of a prototype, and no way to observe or modify the initializer for a property. The return value is ignored too. As such, a property decorator can only be used to observe that a property of a specific name has been declared for a class.\nWe can use this information to record metadata about the property, as in the following example:\nclass Greeter { @format(\u0026#34;Hello, %s\u0026#34;) greeting: string; constructor(message: string) { this.greeting = message; } greet() { let formatString = getFormat(this, \u0026#34;greeting\u0026#34;); return formatString.replace(\u0026#34;%s\u0026#34;, this.greeting); } } We can then define the @format decorator and getFormat functions using the following function declarations:\nimport \u0026#34;reflect-metadata\u0026#34;; const formatMetadataKey = Symbol(\u0026#34;format\u0026#34;); function format(formatString: string) { return Reflect.metadata(formatMetadataKey, formatString); } function getFormat(target: any, propertyKey: string) { return Reflect.getMetadata(formatMetadataKey, target, propertyKey); } The @format(\u0026quot;Hello, %s\u0026quot;) decorator here is a decorator factory. When @format(\u0026quot;Hello, %s\u0026quot;) is called, it adds a metadata entry for the property using the Reflect.metadata function from the reflect-metadata library. When getFormat is called, it reads the metadata value for the format.\nNOTE This example requires the reflect-metadata library. See Metadata for more information about the reflect-metadata library.\nParameter Decorators # A Parameter Decorator is declared just before a parameter declaration. The parameter decorator is applied to the function for a class constructor or method declaration. A parameter decorator cannot be used in a declaration file, an overload, or in any other ambient context (such as in a declare class).\nThe expression for the parameter decorator will be called as a function at runtime, with the following three arguments:\nEither the constructor function of the class for a static member, or the prototype of the class for an instance member. The name of the member. The ordinal index of the parameter in the function\u0026rsquo;s parameter list. NOTE A parameter decorator can only be used to observe that a parameter has been declared on a method.\nThe return value of the parameter decorator is ignored.\nThe following is an example of a parameter decorator (@required) applied to parameter of a member of the BugReport class:\nclass BugReport { type = \u0026#34;report\u0026#34;; title: string; constructor(t: string) { this.title = t; } @validate print(@required verbose: boolean) { if (verbose) { return `type: ${this.type}\\ntitle: ${this.title}`; } else { return this.title; } } } We can then define the @required and @validate decorators using the following function declarations:\nimport \u0026#34;reflect-metadata\u0026#34;; const requiredMetadataKey = Symbol(\u0026#34;required\u0026#34;); function required(target: Object, propertyKey: string | symbol, parameterIndex: number) { let existingRequiredParameters: number[] = Reflect.getOwnMetadata(requiredMetadataKey, target, propertyKey) || []; existingRequiredParameters.push(parameterIndex); Reflect.defineMetadata( requiredMetadataKey, existingRequiredParameters, target, propertyKey); } function validate(target: any, propertyName: string, descriptor: TypedPropertyDescriptor\u0026lt;Function\u0026gt;) { let method = descriptor.value!; descriptor.value = function () { let requiredParameters: number[] = Reflect.getOwnMetadata(requiredMetadataKey, target, propertyName); if (requiredParameters) { for (let parameterIndex of requiredParameters) { if (parameterIndex \u0026gt;= arguments.length || arguments[parameterIndex] === undefined) { throw new Error(\u0026#34;Missing required argument.\u0026#34;); } } } return method.apply(this, arguments); }; } The @required decorator adds a metadata entry that marks the parameter as required. The @validate decorator then wraps the existing print method in a function that validates the arguments before invoking the original method.\nNOTE This example requires the reflect-metadata library. See Metadata for more information about the reflect-metadata library.\nMetadata # Some examples use the reflect-metadata library which adds a polyfill for an experimental metadata API. This library is not yet part of the ECMAScript (JavaScript) standard. However, once decorators are officially adopted as part of the ECMAScript standard these extensions will be proposed for adoption.\nYou can install this library via npm:\nnpm i reflect-metadata --save TypeScript includes experimental support for emitting certain types of metadata for declarations that have decorators. To enable this experimental support, you must set the emitDecoratorMetadata compiler option either on the command line or in your tsconfig.json:\nCommand Line:\ntsc --target ES5 --experimentalDecorators --emitDecoratorMetadata tsconfig.json:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;ES5\u0026#34;, \u0026#34;experimentalDecorators\u0026#34;: true, \u0026#34;emitDecoratorMetadata\u0026#34;: true } } When enabled, as long as the reflect-metadata library has been imported, additional design-time type information will be exposed at runtime.\nWe can see this in action in the following example:\nimport \u0026#34;reflect-metadata\u0026#34;; class Point { constructor(public x: number, public y: number) {} } class Line { private _start: Point; private _end: Point; @validate set start(value: Point) { this._start = value; } get start() { return this._start; } @validate set end(value: Point) { this._end = value; } get end() { return this._end; } } function validate\u0026lt;T\u0026gt;(target: any, propertyKey: string, descriptor: TypedPropertyDescriptor\u0026lt;T\u0026gt;) { let set = descriptor.set!; descriptor.set = function (value: T) { let type = Reflect.getMetadata(\u0026#34;design:type\u0026#34;, target, propertyKey); if (!(value instanceof type)) { throw new TypeError(`Invalid type, got ${typeof value} not ${type.name}.`); } set.call(this, value); }; } const line = new Line() line.start = new Point(0, 0) // @ts-ignore // line.end = {} // Fails at runtime with: // \u0026gt; Invalid type, got object not Point The TypeScript compiler will inject design-time type information using the @Reflect.metadata decorator. You could consider it the equivalent of the following TypeScript:\nclass Line { private _start: Point; private _end: Point; @validate @Reflect.metadata(\u0026#34;design:type\u0026#34;, Point) set start(value: Point) { this._start = value; } get start() { return this._start; } @validate @Reflect.metadata(\u0026#34;design:type\u0026#34;, Point) set end(value: Point) { this._end = value; } get end() { return this._end; } } NOTE Decorator metadata is an experimental feature and may introduce breaking changes in future releases.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/decorators.html{._attribution-link} :::\n"},{"id":274,"href":"/docs/references/languages/typescript/dom-manipulation/","title":"Dom Manipulation","section":"Typescript","content":" DOM Manipulation # DOM Manipulation # An exploration into the HTMLElement type # In the 20+ years since its standardization, JavaScript has come a very long way. While in 2020, JavaScript can be used on servers, in data science, and even on IoT devices, it is important to remember its most popular use case: web browsers.\nWebsites are made up of HTML and/or XML documents. These documents are static, they do not change. The Document Object Model (DOM) is a programming interface implemented by browsers to make static websites functional. The DOM API can be used to change the document structure, style, and content. The API is so powerful that countless frontend frameworks (jQuery, React, Angular, etc.) have been developed around it to make dynamic websites even easier to develop.\nTypeScript is a typed superset of JavaScript, and it ships type definitions for the DOM API. These definitions are readily available in any default TypeScript project. Of the 20,000+ lines of definitions in lib.dom.d.ts, one stands out among the rest: HTMLElement. This type is the backbone for DOM manipulation with TypeScript.\nYou can explore the source code for the DOM type definitions\nBasic Example # Given a simplified index.html file:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt;\u0026lt;title\u0026gt;TypeScript Dom Manipulation\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- Assume index.js is the compiled output of index.ts --\u0026gt; \u0026lt;script src=\u0026#34;index.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Let\u0026rsquo;s explore a TypeScript script that adds a \u0026lt;p\u0026gt;Hello, World!\u0026lt;/p\u0026gt; element to the #app element.\n// 1. Select the div element using the id property const app = document.getElementById(\u0026#34;app\u0026#34;); // 2. Create a new \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; element programmatically const p = document.createElement(\u0026#34;p\u0026#34;); // 3. Add the text content p.textContent = \u0026#34;Hello, World!\u0026#34;; // 4. Append the p element to the div element app?.appendChild(p); After compiling and running the index.html page, the resulting HTML will be:\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Hello, World!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; The Document Interface # The first line of the TypeScript code uses a global variable document. Inspecting the variable shows it is defined by the Document interface from the lib.dom.d.ts file. The code snippet contains calls to two methods, getElementById and createElement.\nDocument.getElementById # The definition for this method is as follows:\ngetElementById(elementId: string): HTMLElement | null; Pass it an element id string and it will return either HTMLElement or null. This method introduces one of the most important types, HTMLElement. It serves as the base interface for every other element interface. For example, the p variable in the code example is of type HTMLParagraphElement. Also, take note that this method can return null. This is because the method can\u0026rsquo;t be certain pre-runtime if it will be able to actually find the specified element or not. In the last line of the code snippet, the new optional chaining operator is used to call appendChild.\nDocument.createElement # The definition for this method is (I have omitted the deprecated definition):\ncreateElement\u0026lt;K extends keyof HTMLElementTagNameMap\u0026gt;(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K]; createElement(tagName: string, options?: ElementCreationOptions): HTMLElement; This is an overloaded function definition. The second overload is simplest and works a lot like the getElementById method does. Pass it any string and it will return a standard HTMLElement. This definition is what enables developers to create unique HTML element tags.\nFor example document.createElement('xyz') returns a \u0026lt;xyz\u0026gt;\u0026lt;/xyz\u0026gt; element, clearly not an element that is specified by the HTML specification.\nFor those interested, you can interact with custom tag elements using the document.getElementsByTagName\nFor the first definition of createElement, it is using some advanced generic patterns. It is best understood broken down into chunks, starting with the generic expression: \u0026lt;K extends keyof HTMLElementTagNameMap\u0026gt;. This expression defines a generic parameter K that is constrained to the keys of the interface HTMLElementTagNameMap. The map interface contains every specified HTML tag name and its corresponding type interface. For example here are the first 5 mapped values:\ninterface HTMLElementTagNameMap { \u0026#34;a\u0026#34;: HTMLAnchorElement; \u0026#34;abbr\u0026#34;: HTMLElement; \u0026#34;address\u0026#34;: HTMLElement; \u0026#34;applet\u0026#34;: HTMLAppletElement; \u0026#34;area\u0026#34;: HTMLAreaElement; ... } Some elements do not exhibit unique properties and so they just return HTMLElement, but other types do have unique properties and methods so they return their specific interface (which will extend from or implement HTMLElement).\nNow, for the remainder of the createElement definition: (tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K]. The first argument tagName is defined as the generic parameter K. The TypeScript interpreter is smart enough to infer the generic parameter from this argument. This means that the developer does not have to specify the generic parameter when using the method; whatever value is passed to the tagName argument will be inferred as K and thus can be used throughout the remainder of the definition. This is exactly what happens; the return value HTMLElementTagNameMap[K] takes the tagName argument and uses it to return the corresponding type. This definition is how the p variable from the code snippet gets a type of HTMLParagraphElement. And if the code was document.createElement('a'), then it would be an element of type HTMLAnchorElement.\nThe Node interface # The document.getElementById function returns an HTMLElement. HTMLElement interface extends the Element interface which extends the Node interface. This prototypal extension allows for all HTMLElements to utilize a subset of standard methods. In the code snippet, we use a property defined on the Node interface to append the new p element to the website.\nNode.appendChild # The last line of the code snippet is app?.appendChild(p). The previous, document.getElementById, section detailed that the optional chaining operator is used here because app can potentially be null at runtime. The appendChild method is defined by:\nappendChild\u0026lt;T extends Node\u0026gt;(newChild: T): T; This method works similarly to the createElement method as the generic parameter T is inferred from the newChild argument. T is constrained to another base interface Node.\nDifference between children and childNodes # Previously, this document details the HTMLElement interface extends from Element which extends from Node. In the DOM API there is a concept of children elements. For example in the following HTML, the p tags are children of the div element\n\u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Hello, World\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;TypeScript!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;; const div = document.getElementsByTagName(\u0026#34;div\u0026#34;)[0]; div.children; // HTMLCollection(2) [p, p] div.childNodes; // NodeList(2) [p, p] After capturing the div element, the children prop will return an HTMLCollection list containing the HTMLParagraphElements. The childNodes property will return a similar NodeList list of nodes. Each p tag will still be of type HTMLParagraphElements, but the NodeList can contain additional HTML nodes that the HTMLCollection list cannot.\nModify the HTML by removing one of the p tags, but keep the text.\n\u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Hello, World\u0026lt;/p\u0026gt; TypeScript! \u0026lt;/div\u0026gt;; const div = document.getElementsByTagName(\u0026#34;div\u0026#34;)[0]; div.children; // HTMLCollection(1) [p] div.childNodes; // NodeList(2) [p, text] See how both lists change. children now only contains the \u0026lt;p\u0026gt;Hello, World\u0026lt;/p\u0026gt; element, and the childNodes contains a text node rather than two p nodes. The text part of the NodeList is the literal Node containing the text TypeScript!. The children list does not contain this Node because it is not considered an HTMLElement.\nThe querySelector and querySelectorAll methods # Both of these methods are great tools for getting lists of dom elements that fit a more unique set of constraints. They are defined in lib.dom.d.ts as:\n/** * Returns the first element that is a descendant of node that matches selectors. */ querySelector\u0026lt;K extends keyof HTMLElementTagNameMap\u0026gt;(selectors: K): HTMLElementTagNameMap[K] | null; querySelector\u0026lt;K extends keyof SVGElementTagNameMap\u0026gt;(selectors: K): SVGElementTagNameMap[K] | null; querySelector\u0026lt;E extends Element = Element\u0026gt;(selectors: string): E | null; /** * Returns all element descendants of node that match selectors. */ querySelectorAll\u0026lt;K extends keyof HTMLElementTagNameMap\u0026gt;(selectors: K): NodeListOf\u0026lt;HTMLElementTagNameMap[K]\u0026gt;; querySelectorAll\u0026lt;K extends keyof SVGElementTagNameMap\u0026gt;(selectors: K): NodeListOf\u0026lt;SVGElementTagNameMap[K]\u0026gt;; querySelectorAll\u0026lt;E extends Element = Element\u0026gt;(selectors: string): NodeListOf\u0026lt;E\u0026gt;; The querySelectorAll definition is similar to getElementsByTagName, except it returns a new type: NodeListOf. This return type is essentially a custom implementation of the standard JavaScript list element. Arguably, replacing NodeListOf\u0026lt;E\u0026gt; with E[] would result in a very similar user experience. NodeListOf only implements the following properties and methods: length, item(index), forEach((value, key, parent) =\u0026gt; void), and numeric indexing. Additionally, this method returns a list of elements, not nodes, which is what NodeList was returning from the .childNodes method. While this may appear as a discrepancy, take note that interface Element extends from Node.\nTo see these methods in action modify the existing code to:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;First :)\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Second!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Third times a charm.\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;; const first = document.querySelector(\u0026#34;li\u0026#34;); // returns the first li element const all = document.querySelectorAll(\u0026#34;li\u0026#34;); // returns the list of all li elements Interested in learning more? # The best part about the lib.dom.d.ts type definitions is that they are reflective of the types annotated in the Mozilla Developer Network (MDN) documentation site. For example, the HTMLElement interface is documented by this HTMLElement page on MDN. These pages list all available properties, methods, and sometimes even examples. Another great aspect of the pages is that they provide links to the corresponding standard documents. Here is the link to the W3C Recommendation for HTMLElement.\nSources:\nECMA-262 Standard Introduction to the DOM ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/dom-manipulation.html{._attribution-link} :::\n"},{"id":275,"href":"/docs/references/languages/typescript/enums/","title":"Enums","section":"Typescript","content":" Enums # Enums are one of the few features TypeScript has which is not a type-level extension of JavaScript.\nEnums allow a developer to define a set of named constants. Using enums can make it easier to document intent, or create a set of distinct cases. TypeScript provides both numeric and string-based enums.\nNumeric enums # We\u0026rsquo;ll first start off with numeric enums, which are probably more familiar if you\u0026rsquo;re coming from other languages. An enum can be defined using the enum keyword.\nenum Direction { Up = 1, Down, Left, Right, } Above, we have a numeric enum where Up is initialized with 1. All of the following members are auto-incremented from that point on. In other words, Direction.Up has the value 1, Down has 2, Left has 3, and Right has 4.\nIf we wanted, we could leave off the initializers entirely:\nenum Direction { Up, Down, Left, Right, } Here, Up would have the value 0, Down would have 1, etc. This auto-incrementing behavior is useful for cases where we might not care about the member values themselves, but do care that each value is distinct from other values in the same enum.\nUsing an enum is simple: just access any member as a property off of the enum itself, and declare types using the name of the enum:\nenum UserResponse { No = 0, Yes = 1, } function respond(recipient: string, message: UserResponse): void { // ... } respond(\u0026#34;Princess Caroline\u0026#34;, UserResponse.Yes); Numeric enums can be mixed in computed and constant members (see below). The short story is, enums without initializers either need to be first, or have to come after numeric enums initialized with numeric constants or other constant enum members. In other words, the following isn\u0026rsquo;t allowed:\nenum E { A = getSomeValue(), B, } String enums # String enums are a similar concept, but have some subtle runtime differences as documented below. In a string enum, each member has to be constant-initialized with a string literal, or with another string enum member.\nenum Direction { Up = \u0026#34;UP\u0026#34;, Down = \u0026#34;DOWN\u0026#34;, Left = \u0026#34;LEFT\u0026#34;, Right = \u0026#34;RIGHT\u0026#34;, } While string enums don\u0026rsquo;t have auto-incrementing behavior, string enums have the benefit that they \u0026ldquo;serialize\u0026rdquo; well. In other words, if you were debugging and had to read the runtime value of a numeric enum, the value is often opaque - it doesn\u0026rsquo;t convey any useful meaning on its own (though reverse mapping can often help). String enums allow you to give a meaningful and readable value when your code runs, independent of the name of the enum member itself.\nHeterogeneous enums # Technically enums can be mixed with string and numeric members, but it\u0026rsquo;s not clear why you would ever want to do so:\nenum BooleanLikeHeterogeneousEnum { No = 0, Yes = \u0026#34;YES\u0026#34;, } Unless you\u0026rsquo;re really trying to take advantage of JavaScript\u0026rsquo;s runtime behavior in a clever way, it\u0026rsquo;s advised that you don\u0026rsquo;t do this.\nComputed and constant members # Each enum member has a value associated with it which can be either constant or computed. An enum member is considered constant if:\nIt is the first member in the enum and it has no initializer, in which case it\u0026rsquo;s assigned the value 0:\n// E.X is constant: enum E { X, } It does not have an initializer and the preceding enum member was a numeric constant. In this case the value of the current enum member will be the value of the preceding enum member plus one.\n// All enum members in \u0026#39;E1\u0026#39; and \u0026#39;E2\u0026#39; are constant. enum E1 { X, Y, Z, } enum E2 { A = 1, B, C, } The enum member is initialized with a constant enum expression. A constant enum expression is a subset of TypeScript expressions that can be fully evaluated at compile time. An expression is a constant enum expression if it is:\na literal enum expression (basically a string literal or a numeric literal) a reference to previously defined constant enum member (which can originate from a different enum) a parenthesized constant enum expression one of the +, -, ~ unary operators applied to constant enum expression +, -, *, /, %, \u0026lt;\u0026lt;, \u0026gt;\u0026gt;, \u0026gt;\u0026gt;\u0026gt;, \u0026amp;, |, ^ binary operators with constant enum expressions as operands It is a compile time error for constant enum expressions to be evaluated to NaN or Infinity.\nIn all other cases enum member is considered computed.\nenum FileAccess { // constant members None, Read = 1 \u0026lt;\u0026lt; 1, Write = 1 \u0026lt;\u0026lt; 2, ReadWrite = Read | Write, // computed member G = \u0026#34;123\u0026#34;.length, } Union enums and enum member types # There is a special subset of constant enum members that aren\u0026rsquo;t calculated: literal enum members. A literal enum member is a constant enum member with no initialized value, or with values that are initialized to\nany string literal (e.g. \u0026quot;foo\u0026quot;, \u0026quot;bar\u0026quot;, \u0026quot;baz\u0026quot;) any numeric literal (e.g. 1, 100) a unary minus applied to any numeric literal (e.g. -1, -100) When all members in an enum have literal enum values, some special semantics come into play.\nThe first is that enum members also become types as well! For example, we can say that certain members can only have the value of an enum member:\nenum ShapeKind { Circle, Square, } interface Circle { kind: ShapeKind.Circle; radius: number; } interface Square { kind: ShapeKind.Square; sideLength: number; } let c: Circle = { kind: ShapeKind.Square, radius: 100, }; The other change is that enum types themselves effectively become a union of each enum member. With union enums, the type system is able to leverage the fact that it knows the exact set of values that exist in the enum itself. Because of that, TypeScript can catch bugs where we might be comparing values incorrectly. For example:\nenum E { Foo, Bar, } function f(x: E) { if (x !== E.Foo || x !== E.Bar) { // } } In that example, we first checked whether x was not E.Foo. If that check succeeds, then our || will short-circuit, and the body of the \u0026lsquo;if\u0026rsquo; will run. However, if the check didn\u0026rsquo;t succeed, then x can only be E.Foo, so it doesn\u0026rsquo;t make sense to see whether it\u0026rsquo;s equal to E.Bar.\nEnums at runtime # Enums are real objects that exist at runtime. For example, the following enum\nenum E { X, Y, Z, } can actually be passed around to functions\nenum E { X, Y, Z, } function f(obj: { X: number }) { return obj.X; } // Works, since \u0026#39;E\u0026#39; has a property named \u0026#39;X\u0026#39; which is a number. f(E); Enums at compile time # Even though Enums are real objects that exist at runtime, the keyof keyword works differently than you might expect for typical objects. Instead, use keyof typeof to get a Type that represents all Enum keys as strings.\nenum LogLevel { ERROR, WARN, INFO, DEBUG, } /** * This is equivalent to: * type LogLevelStrings = \u0026#39;ERROR\u0026#39; | \u0026#39;WARN\u0026#39; | \u0026#39;INFO\u0026#39; | \u0026#39;DEBUG\u0026#39;; */ type LogLevelStrings = keyof typeof LogLevel; function printImportant(key: LogLevelStrings, message: string) { const num = LogLevel[key]; if (num \u0026lt;= LogLevel.WARN) { console.log(\u0026#34;Log level key is:\u0026#34;, key); console.log(\u0026#34;Log level value is:\u0026#34;, num); console.log(\u0026#34;Log level message is:\u0026#34;, message); } } printImportant(\u0026#34;ERROR\u0026#34;, \u0026#34;This is a message\u0026#34;); Reverse mappings # In addition to creating an object with property names for members, numeric enums members also get a reverse mapping from enum values to enum names. For example, in this example:\nenum Enum { A, } let a = Enum.A; let nameOfA = Enum[a]; // \u0026#34;A\u0026#34; TypeScript compiles this down to the following JavaScript:\n\u0026#34;use strict\u0026#34;; var Enum; (function (Enum) { Enum[Enum[\u0026#34;A\u0026#34;] = 0] = \u0026#34;A\u0026#34;; })(Enum || (Enum = {})); let a = Enum.A; let nameOfA = Enum[a]; // \u0026#34;A\u0026#34; In this generated code, an enum is compiled into an object that stores both forward (name -\u0026gt; value) and reverse (value -\u0026gt; name) mappings. References to other enum members are always emitted as property accesses and never inlined.\nKeep in mind that string enum members do not get a reverse mapping generated at all.\nconst enums # In most cases, enums are a perfectly valid solution. However sometimes requirements are tighter. To avoid paying the cost of extra generated code and additional indirection when accessing enum values, it\u0026rsquo;s possible to use const enums. Const enums are defined using the const modifier on our enums:\nconst enum Enum { A = 1, B = A * 2, } Const enums can only use constant enum expressions and unlike regular enums they are completely removed during compilation. Const enum members are inlined at use sites. This is possible since const enums cannot have computed members.\nconst enum Direction { Up, Down, Left, Right, } let directions = [ Direction.Up, Direction.Down, Direction.Left, Direction.Right, ]; in generated code will become\n\u0026#34;use strict\u0026#34;; let directions = [ 0 /* Direction.Up */, 1 /* Direction.Down */, 2 /* Direction.Left */, 3 /* Direction.Right */, ]; Const enum pitfalls # Inlining enum values is straightforward at first, but comes with subtle implications. These pitfalls pertain to ambient const enums only (basically const enums in .d.ts files) and sharing them between projects, but if you are publishing or consuming .d.ts files, these pitfalls likely apply to you, because tsc --declaration transforms .ts files into .d.ts files.\nFor the reasons laid out in the isolatedModules documentation, that mode is fundamentally incompatible with ambient const enums. This means if you publish ambient const enums, downstream consumers will not be able to use isolatedModules and those enum values at the same time. You can easily inline values from version A of a dependency at compile time, and import version B at runtime. Version A and B\u0026rsquo;s enums can have different values, if you are not very careful, resulting in surprising bugs, like taking the wrong branches of if statements. These bugs are especially pernicious because it is common to run automated tests at roughly the same time as projects are built, with the same dependency versions, which misses these bugs completely. importsNotUsedAsValues: \u0026quot;preserve\u0026quot; will not elide imports for const enums used as values, but ambient const enums do not guarantee that runtime .js files exist. The unresolvable imports cause errors at runtime. The usual way to unambiguously elide imports, type-only imports, does not allow const enum values, currently. Here are two approaches to avoiding these pitfalls:\nA. Do not use const enums at all. You can easily ban const enums with the help of a linter. Obviously this avoids any issues with const enums, but prevents your project from inlining its own enums. Unlike inlining enums from other projects, inlining a project\u0026rsquo;s own enums is not problematic and has performance implications. B. Do not publish ambient const enums, by deconstifying them with the help of preserveConstEnums. This is the approach taken internally by the TypeScript project itself. preserveConstEnums emits the same JavaScript for const enums as plain enums. You can then safely strip the const modifier from .d.ts files in a build step.\nThis way downstream consumers will not inline enums from your project, avoiding the pitfalls above, but a project can still inline its own enums, unlike banning const enums entirely.\nAmbient enums # Ambient enums are used to describe the shape of already existing enum types.\ndeclare enum Enum { A = 1, B, C = 2, } One important difference between ambient and non-ambient enums is that, in regular enums, members that don\u0026rsquo;t have an initializer will be considered constant if its preceding enum member is considered constant. By contrast, an ambient (and non-const) enum member that does not have an initializer is always considered computed.\nObjects vs Enums # In modern TypeScript, you may not need an enum when an object with as const could suffice:\nconst enum EDirection { Up, Down, Left, Right, } const ODirection = { Up: 0, Down: 1, Left: 2, Right: 3, } as const; EDirection.Up; ODirection.Up; // Using the enum as a parameter function walk(dir: EDirection) {} // It requires an extra line to pull out the values type Direction = typeof ODirection[keyof typeof ODirection]; function run(dir: Direction) {} walk(EDirection.Left); run(ODirection.Right); The biggest argument in favour of this format over TypeScript\u0026rsquo;s enum is that it keeps your codebase aligned with the state of JavaScript, and when/if enums are added to JavaScript then you can move to the additional syntax.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/enums.html{._attribution-link} :::\n"},{"id":276,"href":"/docs/references/languages/typescript/esm-node/","title":"Esm Node","section":"Typescript","content":" ECMAScript Modules in Node.js # For the last few years, Node.js has been working to support running ECMAScript modules (ESM). This has been a very difficult feature to support, since the foundation of the Node.js ecosystem is built on a different module system called CommonJS (CJS).\nInteroperating between the two module systems brings large challenges, with many new features to juggle; however, support for ESM in Node.js is now implemented in Node.js, and the dust has begun to settle.\nThat\u0026rsquo;s why TypeScript brings two new module and moduleResolution settings: Node16 and NodeNext.\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;module\u0026#34;: \u0026#34;NodeNext\u0026#34;, } } These new modes bring a few high-level features which we\u0026rsquo;ll explore here.\ntype in package.json and New Extensions # Node.js supports a new setting in package.json called type. \u0026quot;type\u0026quot; can be set to either \u0026quot;module\u0026quot; or \u0026quot;commonjs\u0026quot;.\n{ \u0026#34;name\u0026#34;: \u0026#34;my-package\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;module\u0026#34;, \u0026#34;//\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;dependencies\u0026#34;: { } } This setting controls whether .js and .d.ts files are interpreted as ES modules or CommonJS modules, and defaults to CommonJS when not set. When a file is considered an ES module, a few different rules come into play compared to CommonJS:\nimport/export statements and top-level await can be used relative import paths need full extensions (e.g we have to write import \u0026quot;./foo.js\u0026quot; instead of import \u0026quot;./foo\u0026quot;) imports might resolve differently from dependencies in node_modules certain global-like values like require() and __dirname cannot be used directly CommonJS modules get imported under certain special rules We\u0026rsquo;ll come back to some of these.\nTo overlay the way TypeScript works in this system, .ts and .tsx files now work the same way. When TypeScript finds a .ts, .tsx, .js, or .jsx file, it will walk up looking for a package.json to see whether that file is an ES module, and use that to determine:\nhow to find other modules which that file imports and how to transform that file if producing outputs When a .ts file is compiled as an ES module, ECMAScript import/export syntax is left alone in the .js output; when it\u0026rsquo;s compiled as a CommonJS module, it will produce the same output you get today under module: commonjs.\nThis also means paths resolve differently between .ts files that are ES modules and ones that are CJS modules. For example, let\u0026rsquo;s say you have the following code today:\n// ./foo.ts export function helper() { // ... } // ./bar.ts import { helper } from \u0026#34;./foo\u0026#34;; // only works in CJS helper(); This code works in CommonJS modules, but will fail in ES modules because relative import paths need to use extensions. As a result, it will have to be rewritten to use the extension of the output of foo.ts - so bar.ts will instead have to import from ./foo.js.\n// ./bar.ts import { helper } from \u0026#34;./foo.js\u0026#34;; // works in ESM \u0026amp; CJS helper(); This might feel a bit cumbersome at first, but TypeScript tooling like auto-imports and path completion will typically just do this for you.\nOne other thing to mention is the fact that this applies to .d.ts files too. When TypeScript finds a .d.ts file in package, whether it is treated as an ESM or CommonJS file is based on the containing package.\nNew File Extensions # The type field in package.json is nice because it allows us to continue using the .ts and .js file extensions which can be convenient; however, you will occasionally need to write a file that differs from what type specifies. You might also just prefer to always be explicit.\nNode.js supports two extensions to help with this: .mjs and .cjs. .mjs files are always ES modules, and .cjs files are always CommonJS modules, and there\u0026rsquo;s no way to override these.\nIn turn, TypeScript supports two new source file extensions: .mts and .cts. When TypeScript emits these to JavaScript files, it will emit them to .mjs and .cjs respectively.\nFurthermore, TypeScript also supports two new declaration file extensions: .d.mts and .d.cts. When TypeScript generates declaration files for .mts and .cts, their corresponding extensions will be .d.mts and .d.cts.\nUsing these extensions is entirely optional, but will often be useful even if you choose not to use them as part of your primary workflow.\nCommonJS Interop # Node.js allows ES modules to import CommonJS modules as if they were ES modules with a default export.\n// @filename: helper.cts export function helper() { console.log(\u0026#34;hello world!\u0026#34;); } // @filename: index.mts import foo from \u0026#34;./helper.cjs\u0026#34;; // prints \u0026#34;hello world!\u0026#34; foo.helper(); In some cases, Node.js also synthesizes named exports from CommonJS modules, which can be more convenient. In these cases, ES modules can use a \u0026ldquo;namespace-style\u0026rdquo; import (i.e. import * as foo from \u0026quot;...\u0026quot;), or named imports (i.e. import { helper } from \u0026quot;...\u0026quot;).\n// @filename: helper.cts export function helper() { console.log(\u0026#34;hello world!\u0026#34;); } // @filename: index.mts import { helper } from \u0026#34;./helper.cjs\u0026#34;; // prints \u0026#34;hello world!\u0026#34; helper(); There isn\u0026rsquo;t always a way for TypeScript to know whether these named imports will be synthesized, but TypeScript will err on being permissive and use some heuristics when importing from a file that is definitely a CommonJS module.\nOne TypeScript-specific note about interop is the following syntax:\nimport foo = require(\u0026#34;foo\u0026#34;); In a CommonJS module, this just boils down to a require() call, and in an ES module, this imports createRequire to achieve the same thing. This will make code less portable on runtimes like browsers (which don\u0026rsquo;t support require()), but will often be useful for interoperability. In turn, you can write the above example using this syntax as follows:\n// @filename: foo.cts export function helper() { console.log(\u0026#34;hello world!\u0026#34;); } // @filename: index.mts import foo = require(\u0026#34;./foo.cjs\u0026#34;); foo.helper() Finally, it\u0026rsquo;s worth noting that the only way to import ESM files from a CJS module is using dynamic import() calls. This can present challenges, but is the behavior in Node.js today.\nYou can read more about ESM/CommonJS interop in Node.js here.\npackage.json Exports, Imports, and Self-Referencing # Node.js supports a new field for defining entry points in package.json called \u0026quot;exports\u0026quot;. This field is a more powerful alternative to defining \u0026quot;main\u0026quot; in package.json, and can control what parts of your package are exposed to consumers.\nHere\u0026rsquo;s a package.json that supports separate entry-points for CommonJS and ESM:\n// package.json { \u0026#34;name\u0026#34;: \u0026#34;my-package\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;module\u0026#34;, \u0026#34;exports\u0026#34;: { \u0026#34;.\u0026#34;: { // Entry-point for `import \u0026#34;my-package\u0026#34;` in ESM \u0026#34;import\u0026#34;: \u0026#34;./esm/index.js\u0026#34;, // Entry-point for `require(\u0026#34;my-package\u0026#34;) in CJS \u0026#34;require\u0026#34;: \u0026#34;./commonjs/index.cjs\u0026#34;, }, }, // CJS fall-back for older versions of Node.js \u0026#34;main\u0026#34;: \u0026#34;./commonjs/index.cjs\u0026#34;, } There\u0026rsquo;s a lot to this feature, which you can read more about in the Node.js documentation. Here we\u0026rsquo;ll try to focus on how TypeScript supports it.\nWith TypeScript\u0026rsquo;s original Node support, it would look for a \u0026quot;main\u0026quot; field, and then look for declaration files that corresponded to that entry. For example, if \u0026quot;main\u0026quot; pointed to ./lib/index.js, TypeScript would look for a file called ./lib/index.d.ts. A package author could override this by specifying a separate field called \u0026quot;types\u0026quot; (e.g. \u0026quot;types\u0026quot;: \u0026quot;./types/index.d.ts\u0026quot;).\nThe new support works similarly with import conditions. By default, TypeScript overlays the same rules with import conditions - if you write an import from an ES module, it will look up the import field, and from a CommonJS module, it will look at the require field. If it finds them, it will look for a co-located declaration file. If you need to point to a different location for your type declarations, you can add a \u0026quot;types\u0026quot; import condition.\n// package.json { \u0026#34;name\u0026#34;: \u0026#34;my-package\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;module\u0026#34;, \u0026#34;exports\u0026#34;: { \u0026#34;.\u0026#34;: { // Entry-point for `import \u0026#34;my-package\u0026#34;` in ESM \u0026#34;import\u0026#34;: { // Where TypeScript will look. \u0026#34;types\u0026#34;: \u0026#34;./types/esm/index.d.ts\u0026#34;, // Where Node.js will look. \u0026#34;default\u0026#34;: \u0026#34;./esm/index.js\u0026#34; }, // Entry-point for `require(\u0026#34;my-package\u0026#34;)` in CJS \u0026#34;require\u0026#34;: { // Where TypeScript will look. \u0026#34;types\u0026#34;: \u0026#34;./types/commonjs/index.d.cts\u0026#34;, // Where Node.js will look. \u0026#34;default\u0026#34;: \u0026#34;./commonjs/index.cjs\u0026#34; }, } }, // Fall-back for older versions of TypeScript \u0026#34;types\u0026#34;: \u0026#34;./types/index.d.ts\u0026#34;, // CJS fall-back for older versions of Node.js \u0026#34;main\u0026#34;: \u0026#34;./commonjs/index.cjs\u0026#34; } The \u0026quot;types\u0026quot; condition should always come first in \u0026quot;exports\u0026quot;.\nIt\u0026rsquo;s important to note that the CommonJS entrypoint and the ES module entrypoint each needs its own declaration file, even if the contents are the same between them. Every declaration file is interpreted either as a CommonJS module or as an ES module, based on its file extension and the \u0026quot;type\u0026quot; field of the package.json, and this detected module kind must match the module kind that Node will detect for the corresponding JavaScript file for type checking to be correct. Attempting to use a single .d.ts file to type both an ES module entrypoint and a CommonJS entrypoint will cause TypeScript to think only one of those entrypoints exists, causing compiler errors for users of the package.\nTypeScript also supports the \u0026quot;imports\u0026quot; field of package.json in a similar manner (looking for declaration files alongside corresponding files), and supports packages self-referencing themselves. These features are generally not as involved, but are supported.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/esm-node.html{._attribution-link} :::\n"},{"id":277,"href":"/docs/references/languages/typescript/everyday-types/","title":"Everyday Types","section":"Typescript","content":" Everyday Types # In this chapter, we\u0026rsquo;ll cover some of the most common types of values you\u0026rsquo;ll find in JavaScript code, and explain the corresponding ways to describe those types in TypeScript. This isn\u0026rsquo;t an exhaustive list, and future chapters will describe more ways to name and use other types.\nTypes can also appear in many more places than just type annotations. As we learn about the types themselves, we\u0026rsquo;ll also learn about the places where we can refer to these types to form new constructs.\nWe\u0026rsquo;ll start by reviewing the most basic and common types you might encounter when writing JavaScript or TypeScript code. These will later form the core building blocks of more complex types.\nThe primitives: string, number, and boolean # JavaScript has three very commonly used primitives: string, number, and boolean. Each has a corresponding type in TypeScript. As you might expect, these are the same names you\u0026rsquo;d see if you used the JavaScript typeof operator on a value of those types:\nstring represents string values like \u0026quot;Hello, world\u0026quot; number is for numbers like 42. JavaScript does not have a special runtime value for integers, so there\u0026rsquo;s no equivalent to int or float - everything is simply number boolean is for the two values true and false The type names String, Number, and Boolean (starting with capital letters) are legal, but refer to some special built-in types that will very rarely appear in your code. Always use string, number, or boolean for types.\nArrays # To specify the type of an array like [1, 2, 3], you can use the syntax number[]; this syntax works for any type (e.g. string[] is an array of strings, and so on). You may also see this written as Array\u0026lt;number\u0026gt;, which means the same thing. We\u0026rsquo;ll learn more about the syntax T\u0026lt;U\u0026gt; when we cover generics.\nNote that [number] is a different thing; refer to the section on Tuples.\nany # TypeScript also has a special type, any, that you can use whenever you don\u0026rsquo;t want a particular value to cause typechecking errors.\nWhen a value is of type any, you can access any properties of it (which will in turn be of type any), call it like a function, assign it to (or from) a value of any type, or pretty much anything else that\u0026rsquo;s syntactically legal:\nlet obj: any = { x: 0 }; // None of the following lines of code will throw compiler errors. // Using `any` disables all further type checking, and it is assumed // you know the environment better than TypeScript. obj.foo(); obj(); obj.bar = 100; obj = \u0026#34;hello\u0026#34;; const n: number = obj; The any type is useful when you don\u0026rsquo;t want to write out a long type just to convince TypeScript that a particular line of code is okay.\nnoImplicitAny # When you don\u0026rsquo;t specify a type, and TypeScript can\u0026rsquo;t infer it from context, the compiler will typically default to any.\nYou usually want to avoid this, though, because any isn\u0026rsquo;t type-checked. Use the compiler flag noImplicitAny to flag any implicit any as an error.\nType Annotations on Variables # When you declare a variable using const, var, or let, you can optionally add a type annotation to explicitly specify the type of the variable:\nlet myName: string = \u0026#34;Alice\u0026#34;; TypeScript doesn\u0026rsquo;t use \u0026ldquo;types on the left\u0026rdquo;-style declarations like int x = 0; Type annotations will always go after the thing being typed.\nIn most cases, though, this isn\u0026rsquo;t needed. Wherever possible, TypeScript tries to automatically infer the types in your code. For example, the type of a variable is inferred based on the type of its initializer:\n// No type annotation needed -- \u0026#39;myName\u0026#39; inferred as type \u0026#39;string\u0026#39; let myName = \u0026#34;Alice\u0026#34;; For the most part you don\u0026rsquo;t need to explicitly learn the rules of inference. If you\u0026rsquo;re starting out, try using fewer type annotations than you think - you might be surprised how few you need for TypeScript to fully understand what\u0026rsquo;s going on.\nFunctions # Functions are the primary means of passing data around in JavaScript. TypeScript allows you to specify the types of both the input and output values of functions.\nParameter Type Annotations # When you declare a function, you can add type annotations after each parameter to declare what types of parameters the function accepts. Parameter type annotations go after the parameter name:\n// Parameter type annotation function greet(name: string) { console.log(\u0026#34;Hello, \u0026#34; + name.toUpperCase() + \u0026#34;!!\u0026#34;); } When a parameter has a type annotation, arguments to that function will be checked:\n// Would be a runtime error if executed! greet(42); Even if you don\u0026rsquo;t have type annotations on your parameters, TypeScript will still check that you passed the right number of arguments.\nReturn Type Annotations # You can also add return type annotations. Return type annotations appear after the parameter list:\nfunction getFavoriteNumber(): number { return 26; } Much like variable type annotations, you usually don\u0026rsquo;t need a return type annotation because TypeScript will infer the function\u0026rsquo;s return type based on its return statements. The type annotation in the above example doesn\u0026rsquo;t change anything. Some codebases will explicitly specify a return type for documentation purposes, to prevent accidental changes, or just for personal preference.\nAnonymous Functions # Anonymous functions are a little bit different from function declarations. When a function appears in a place where TypeScript can determine how it\u0026rsquo;s going to be called, the parameters of that function are automatically given types.\nHere\u0026rsquo;s an example:\nconst names = [\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Eve\u0026#34;]; // Contextual typing for function - parameter s inferred to have type string names.forEach(function (s) { console.log(s.toUpperCase()); }); // Contextual typing also applies to arrow functions names.forEach((s) =\u0026gt; { console.log(s.toUpperCase()); }); Even though the parameter s didn\u0026rsquo;t have a type annotation, TypeScript used the types of the forEach function, along with the inferred type of the array, to determine the type s will have.\nThis process is called contextual typing because the context that the function occurred within informs what type it should have.\nSimilar to the inference rules, you don\u0026rsquo;t need to explicitly learn how this happens, but understanding that it does happen can help you notice when type annotations aren\u0026rsquo;t needed. Later, we\u0026rsquo;ll see more examples of how the context that a value occurs in can affect its type.\nObject Types # Apart from primitives, the most common sort of type you\u0026rsquo;ll encounter is an object type. This refers to any JavaScript value with properties, which is almost all of them! To define an object type, we simply list its properties and their types.\nFor example, here\u0026rsquo;s a function that takes a point-like object:\n// The parameter\u0026#39;s type annotation is an object type function printCoord(pt: { x: number; y: number }) { console.log(\u0026#34;The coordinate\u0026#39;s x value is \u0026#34; + pt.x); console.log(\u0026#34;The coordinate\u0026#39;s y value is \u0026#34; + pt.y); } printCoord({ x: 3, y: 7 }); Here, we annotated the parameter with a type with two properties - x and y - which are both of type number. You can use , or ; to separate the properties, and the last separator is optional either way.\nThe type part of each property is also optional. If you don\u0026rsquo;t specify a type, it will be assumed to be any.\nOptional Properties # Object types can also specify that some or all of their properties are optional. To do this, add a ? after the property name:\nfunction printName(obj: { first: string; last?: string }) { // ... } // Both OK printName({ first: \u0026#34;Bob\u0026#34; }); printName({ first: \u0026#34;Alice\u0026#34;, last: \u0026#34;Alisson\u0026#34; }); In JavaScript, if you access a property that doesn\u0026rsquo;t exist, you\u0026rsquo;ll get the value undefined rather than a runtime error. Because of this, when you read from an optional property, you\u0026rsquo;ll have to check for undefined before using it.\nfunction printName(obj: { first: string; last?: string }) { // Error - might crash if \u0026#39;obj.last\u0026#39; wasn\u0026#39;t provided! console.log(obj.last.toUpperCase()); if (obj.last !== undefined) { // OK console.log(obj.last.toUpperCase()); } // A safe alternative using modern JavaScript syntax: console.log(obj.last?.toUpperCase()); } Union Types # TypeScript\u0026rsquo;s type system allows you to build new types out of existing ones using a large variety of operators. Now that we know how to write a few types, it\u0026rsquo;s time to start combining them in interesting ways.\nDefining a Union Type # The first way to combine types you might see is a union type. A union type is a type formed from two or more other types, representing values that may be any one of those types. We refer to each of these types as the union\u0026rsquo;s members.\nLet\u0026rsquo;s write a function that can operate on strings or numbers:\nfunction printId(id: number | string) { console.log(\u0026#34;Your ID is: \u0026#34; + id); } // OK printId(101); // OK printId(\u0026#34;202\u0026#34;); // Error printId({ myID: 22342 }); Working with Union Types # It\u0026rsquo;s easy to provide a value matching a union type - simply provide a type matching any of the union\u0026rsquo;s members. If you have a value of a union type, how do you work with it?\nTypeScript will only allow an operation if it is valid for every member of the union. For example, if you have the union string | number, you can\u0026rsquo;t use methods that are only available on string:\nfunction printId(id: number | string) { console.log(id.toUpperCase()); } The solution is to narrow the union with code, the same as you would in JavaScript without type annotations. Narrowing occurs when TypeScript can deduce a more specific type for a value based on the structure of the code.\nFor example, TypeScript knows that only a string value will have a typeof value \u0026quot;string\u0026quot;:\nfunction printId(id: number | string) { if (typeof id === \u0026#34;string\u0026#34;) { // In this branch, id is of type \u0026#39;string\u0026#39; console.log(id.toUpperCase()); } else { // Here, id is of type \u0026#39;number\u0026#39; console.log(id); } } Another example is to use a function like Array.isArray:\nfunction welcomePeople(x: string[] | string) { if (Array.isArray(x)) { // Here: \u0026#39;x\u0026#39; is \u0026#39;string[]\u0026#39; console.log(\u0026#34;Hello, \u0026#34; + x.join(\u0026#34; and \u0026#34;)); } else { // Here: \u0026#39;x\u0026#39; is \u0026#39;string\u0026#39; console.log(\u0026#34;Welcome lone traveler \u0026#34; + x); } } Notice that in the else branch, we don\u0026rsquo;t need to do anything special - if x wasn\u0026rsquo;t a string[], then it must have been a string.\nSometimes you\u0026rsquo;ll have a union where all the members have something in common. For example, both arrays and strings have a slice method. If every member in a union has a property in common, you can use that property without narrowing:\n// Return type is inferred as number[] | string function getFirstThree(x: number[] | string) { return x.slice(0, 3); } It might be confusing that a union of types appears to have the intersection of those types\u0026rsquo; properties. This is not an accident - the name union comes from type theory. The union number | string is composed by taking the union of the values from each type. Notice that given two sets with corresponding facts about each set, only the intersection of those facts applies to the union of the sets themselves. For example, if we had a room of tall people wearing hats, and another room of Spanish speakers wearing hats, after combining those rooms, the only thing we know about every person is that they must be wearing a hat.\nType Aliases # We\u0026rsquo;ve been using object types and union types by writing them directly in type annotations. This is convenient, but it\u0026rsquo;s common to want to use the same type more than once and refer to it by a single name.\nA type alias is exactly that - a name for any type. The syntax for a type alias is:\ntype Point = { x: number; y: number; }; // Exactly the same as the earlier example function printCoord(pt: Point) { console.log(\u0026#34;The coordinate\u0026#39;s x value is \u0026#34; + pt.x); console.log(\u0026#34;The coordinate\u0026#39;s y value is \u0026#34; + pt.y); } printCoord({ x: 100, y: 100 }); You can actually use a type alias to give a name to any type at all, not just an object type. For example, a type alias can name a union type:\ntype ID = number | string; Note that aliases are only aliases - you cannot use type aliases to create different/distinct \u0026ldquo;versions\u0026rdquo; of the same type. When you use the alias, it\u0026rsquo;s exactly as if you had written the aliased type. In other words, this code might look illegal, but is OK according to TypeScript because both types are aliases for the same type:\ntype UserInputSanitizedString = string; function sanitizeInput(str: string): UserInputSanitizedString { return sanitize(str); } // Create a sanitized input let userInput = sanitizeInput(getInput()); // Can still be re-assigned with a string though userInput = \u0026#34;new input\u0026#34;; Interfaces # An interface declaration is another way to name an object type:\ninterface Point { x: number; y: number; } function printCoord(pt: Point) { console.log(\u0026#34;The coordinate\u0026#39;s x value is \u0026#34; + pt.x); console.log(\u0026#34;The coordinate\u0026#39;s y value is \u0026#34; + pt.y); } printCoord({ x: 100, y: 100 }); Just like when we used a type alias above, the example works just as if we had used an anonymous object type. TypeScript is only concerned with the structure of the value we passed to printCoord - it only cares that it has the expected properties. Being concerned only with the structure and capabilities of types is why we call TypeScript a structurally typed type system.\nDifferences Between Type Aliases and Interfaces # Type aliases and interfaces are very similar, and in many cases you can choose between them freely. Almost all features of an interface are available in type, the key distinction is that a type cannot be re-opened to add new properties vs an interface which is always extendable.\n::: table-container +\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+ | Interface | Type | +\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+ | Extending an interface | Extending a type via | | | intersections | | {data-language=\u0026quot;typescript\u0026quot;} | | | interface Animal { | {data-language=\u0026ldquo;typescript\u0026rdquo;} | | name: string; | type Animal = { | | } | name: string; | | interface Bear extends Animal { | } | | honey: boolean; | type Bear = Animal \u0026amp; { | | } | honey: boolean; | | const bear = getBear(); | } | | bear.name; | const bear = getBear(); | | bear.honey; | bear.name; | | | bear.honey; | | | | | | | +\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+ | Adding new fields to an existing | A type cannot be changed after | | interface | being created | | | | | {data-language=\u0026quot;typescript\u0026quot;} | {data-language=\u0026ldquo;typescript\u0026rdquo;} | | interface Window { | type Window = { | | title: string; | title: string; | | } | } | | interface Window { | type Window = { | | ts: TypeScriptAPI; | ts: TypeScriptAPI; | | } | } | | const | // Erro | | src = \u0026lsquo;const a = \u0026ldquo;Hello World\u0026rdquo;\u0026rsquo;; | r: Duplicate identifier \u0026lsquo;Window\u0026rsquo;. | | wi | | | ndow.ts.transpileModule(src, {}); | | | | | | | | +\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+ :::\nYou\u0026rsquo;ll learn more about these concepts in later chapters, so don\u0026rsquo;t worry if you don\u0026rsquo;t understand all of these right away.\nPrior to TypeScript version 4.2, type alias names may appear in error messages, sometimes in place of the equivalent anonymous type (which may or may not be desirable). Interfaces will always be named in error messages. Type aliases may not participate in declaration merging, but interfaces can. Interfaces may only be used to declare the shapes of objects, not rename primitives. Interface names will always appear in their original form in error messages, but only when they are used by name. For the most part, you can choose based on personal preference, and TypeScript will tell you if it needs something to be the other kind of declaration. If you would like a heuristic, use interface until you need to use features from type.\nType Assertions # Sometimes you will have information about the type of a value that TypeScript can\u0026rsquo;t know about.\nFor example, if you\u0026rsquo;re using document.getElementById, TypeScript only knows that this will return some kind of HTMLElement, but you might know that your page will always have an HTMLCanvasElement with a given ID.\nIn this situation, you can use a type assertion to specify a more specific type:\nconst myCanvas = document.getElementById(\u0026#34;main_canvas\u0026#34;) as HTMLCanvasElement; Like a type annotation, type assertions are removed by the compiler and won\u0026rsquo;t affect the runtime behavior of your code.\nYou can also use the angle-bracket syntax (except if the code is in a .tsx file), which is equivalent:\nconst myCanvas = \u0026lt;HTMLCanvasElement\u0026gt;document.getElementById(\u0026#34;main_canvas\u0026#34;); Reminder: Because type assertions are removed at compile-time, there is no runtime checking associated with a type assertion. There won\u0026rsquo;t be an exception or null generated if the type assertion is wrong.\nTypeScript only allows type assertions which convert to a more specific or less specific version of a type. This rule prevents \u0026ldquo;impossible\u0026rdquo; coercions like:\nconst x = \u0026#34;hello\u0026#34; as number; Sometimes this rule can be too conservative and will disallow more complex coercions that might be valid. If this happens, you can use two assertions, first to any (or unknown, which we\u0026rsquo;ll introduce later), then to the desired type:\nconst a = (expr as any) as T; Literal Types # In addition to the general types string and number, we can refer to specific strings and numbers in type positions.\nOne way to think about this is to consider how JavaScript comes with different ways to declare a variable. Both var and let allow for changing what is held inside the variable, and const does not. This is reflected in how TypeScript creates types for literals.\nlet changingString = \u0026#34;Hello World\u0026#34;; changingString = \u0026#34;Olá Mundo\u0026#34;; // Because `changingString` can represent any possible string, that // is how TypeScript describes it in the type system changingString; const constantString = \u0026#34;Hello World\u0026#34;; // Because `constantString` can only represent 1 possible string, it // has a literal type representation constantString; By themselves, literal types aren\u0026rsquo;t very valuable:\nlet x: \u0026#34;hello\u0026#34; = \u0026#34;hello\u0026#34;; // OK x = \u0026#34;hello\u0026#34;; // ... x = \u0026#34;howdy\u0026#34;; It\u0026rsquo;s not much use to have a variable that can only have one value!\nBut by combining literals into unions, you can express a much more useful concept - for example, functions that only accept a certain set of known values:\nfunction printText(s: string, alignment: \u0026#34;left\u0026#34; | \u0026#34;right\u0026#34; | \u0026#34;center\u0026#34;) { // ... } printText(\u0026#34;Hello, world\u0026#34;, \u0026#34;left\u0026#34;); printText(\u0026#34;G\u0026#39;day, mate\u0026#34;, \u0026#34;centre\u0026#34;); Numeric literal types work the same way:\nfunction compare(a: string, b: string): -1 | 0 | 1 { return a === b ? 0 : a \u0026gt; b ? 1 : -1; } Of course, you can combine these with non-literal types:\ninterface Options { width: number; } function configure(x: Options | \u0026#34;auto\u0026#34;) { // ... } configure({ width: 100 }); configure(\u0026#34;auto\u0026#34;); configure(\u0026#34;automatic\u0026#34;); There\u0026rsquo;s one more kind of literal type: boolean literals. There are only two boolean literal types, and as you might guess, they are the types true and false. The type boolean itself is actually just an alias for the union true | false.\nLiteral Inference # When you initialize a variable with an object, TypeScript assumes that the properties of that object might change values later. For example, if you wrote code like this:\nconst obj = { counter: 0 }; if (someCondition) { obj.counter = 1; } TypeScript doesn\u0026rsquo;t assume the assignment of 1 to a field which previously had 0 is an error. Another way of saying this is that obj.counter must have the type number, not 0, because types are used to determine both reading and writing behavior.\nThe same applies to strings:\ndeclare function handleRequest(url: string, method: \u0026#34;GET\u0026#34; | \u0026#34;POST\u0026#34;): void; const req = { url: \u0026#34;https://example.com\u0026#34;, method: \u0026#34;GET\u0026#34; }; handleRequest(req.url, req.method); In the above example req.method is inferred to be string, not \u0026quot;GET\u0026quot;. Because code can be evaluated between the creation of req and the call of handleRequest which could assign a new string like \u0026quot;GUESS\u0026quot; to req.method, TypeScript considers this code to have an error.\nThere are two ways to work around this.\nYou can change the inference by adding a type assertion in either location:\n// Change 1: const req = { url: \u0026#34;https://example.com\u0026#34;, method: \u0026#34;GET\u0026#34; as \u0026#34;GET\u0026#34; }; // Change 2 handleRequest(req.url, req.method as \u0026#34;GET\u0026#34;); Change 1 means \u0026ldquo;I intend for req.method to always have the literal type \u0026quot;GET\u0026quot;\u0026rdquo;, preventing the possible assignment of \u0026quot;GUESS\u0026quot; to that field after. Change 2 means \u0026ldquo;I know for other reasons that req.method has the value \u0026quot;GET\u0026quot;\u0026rdquo;.\nYou can use as const to convert the entire object to be type literals:\nconst req = { url: \u0026#34;https://example.com\u0026#34;, method: \u0026#34;GET\u0026#34; } as const; handleRequest(req.url, req.method); The as const suffix acts like const but for the type system, ensuring that all properties are assigned the literal type instead of a more general version like string or number.\nnull and undefined # JavaScript has two primitive values used to signal absent or uninitialized value: null and undefined.\nTypeScript has two corresponding types by the same names. How these types behave depends on whether you have the strictNullChecks option on.\nstrictNullChecks off # With strictNullChecks off, values that might be null or undefined can still be accessed normally, and the values null and undefined can be assigned to a property of any type. This is similar to how languages without null checks (e.g. C#, Java) behave. The lack of checking for these values tends to be a major source of bugs; we always recommend people turn strictNullChecks on if it\u0026rsquo;s practical to do so in their codebase.\nstrictNullChecks on # With strictNullChecks on, when a value is null or undefined, you will need to test for those values before using methods or properties on that value. Just like checking for undefined before using an optional property, we can use narrowing to check for values that might be null:\nfunction doSomething(x: string | null) { if (x === null) { // do nothing } else { console.log(\u0026#34;Hello, \u0026#34; + x.toUpperCase()); } } Non-null Assertion Operator (Postfix !) # TypeScript also has a special syntax for removing null and undefined from a type without doing any explicit checking. Writing ! after any expression is effectively a type assertion that the value isn\u0026rsquo;t null or undefined:\nfunction liveDangerously(x?: number | null) { // No error console.log(x!.toFixed()); } Just like other type assertions, this doesn\u0026rsquo;t change the runtime behavior of your code, so it\u0026rsquo;s important to only use ! when you know that the value can\u0026rsquo;t be null or undefined.\nEnums # Enums are a feature added to JavaScript by TypeScript which allows for describing a value which could be one of a set of possible named constants. Unlike most TypeScript features, this is not a type-level addition to JavaScript but something added to the language and runtime. Because of this, it\u0026rsquo;s a feature which you should know exists, but maybe hold off on using unless you are sure. You can read more about enums in the Enum reference page.\nLess Common Primitives # It\u0026rsquo;s worth mentioning the rest of the primitives in JavaScript which are represented in the type system. Though we will not go into depth here.\nbigint # From ES2020 onwards, there is a primitive in JavaScript used for very large integers, BigInt:\n// Creating a bigint via the BigInt function const oneHundred: bigint = BigInt(100); // Creating a BigInt via the literal syntax const anotherHundred: bigint = 100n; You can learn more about BigInt in the TypeScript 3.2 release notes.\nsymbol # There is a primitive in JavaScript used to create a globally unique reference via the function Symbol():\nconst firstName = Symbol(\u0026#34;name\u0026#34;); const secondName = Symbol(\u0026#34;name\u0026#34;); if (firstName === secondName) { // Can\u0026#39;t ever happen } You can learn more about them in Symbols reference page.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/everyday-types.html{._attribution-link} :::\n"},{"id":278,"href":"/docs/references/languages/typescript/functions/","title":"Functions","section":"Typescript","content":" More on Functions # Functions are the basic building block of any application, whether they\u0026rsquo;re local functions, imported from another module, or methods on a class. They\u0026rsquo;re also values, and just like other values, TypeScript has many ways to describe how functions can be called. Let\u0026rsquo;s learn about how to write types that describe functions.\nFunction Type Expressions # The simplest way to describe a function is with a function type expression. These types are syntactically similar to arrow functions:\nfunction greeter(fn: (a: string) =\u0026gt; void) { fn(\u0026#34;Hello, World\u0026#34;); } function printToConsole(s: string) { console.log(s); } greeter(printToConsole); The syntax (a: string) =\u0026gt; void means \u0026ldquo;a function with one parameter, named a, of type string, that doesn\u0026rsquo;t have a return value\u0026rdquo;. Just like with function declarations, if a parameter type isn\u0026rsquo;t specified, it\u0026rsquo;s implicitly any.\nNote that the parameter name is required. The function type (string) =\u0026gt; void means \u0026ldquo;a function with a parameter named string of type any\u0026rdquo;!\nOf course, we can use a type alias to name a function type:\ntype GreetFunction = (a: string) =\u0026gt; void; function greeter(fn: GreetFunction) { // ... } Call Signatures # In JavaScript, functions can have properties in addition to being callable. However, the function type expression syntax doesn\u0026rsquo;t allow for declaring properties. If we want to describe something callable with properties, we can write a call signature in an object type:\ntype DescribableFunction = { description: string; (someArg: number): boolean; }; function doSomething(fn: DescribableFunction) { console.log(fn.description + \u0026#34; returned \u0026#34; + fn(6)); } function myFunc(someArg: number) { return someArg \u0026gt; 3; } myFunc.description = \u0026#34;default description\u0026#34;; doSomething(myFunc); Note that the syntax is slightly different compared to a function type expression - use : between the parameter list and the return type rather than =\u0026gt;.\nConstruct Signatures # JavaScript functions can also be invoked with the new operator. TypeScript refers to these as constructors because they usually create a new object. You can write a construct signature by adding the new keyword in front of a call signature:\ntype SomeConstructor = { new (s: string): SomeObject; }; function fn(ctor: SomeConstructor) { return new ctor(\u0026#34;hello\u0026#34;); } Some objects, like JavaScript\u0026rsquo;s Date object, can be called with or without new. You can combine call and construct signatures in the same type arbitrarily:\ninterface CallOrConstruct { new (s: string): Date; (n?: number): string; } Generic Functions # It\u0026rsquo;s common to write a function where the types of the input relate to the type of the output, or where the types of two inputs are related in some way. Let\u0026rsquo;s consider for a moment a function that returns the first element of an array:\nfunction firstElement(arr: any[]) { return arr[0]; } This function does its job, but unfortunately has the return type any. It\u0026rsquo;d be better if the function returned the type of the array element.\nIn TypeScript, generics are used when we want to describe a correspondence between two values. We do this by declaring a type parameter in the function signature:\nfunction firstElement\u0026lt;Type\u0026gt;(arr: Type[]): Type | undefined { return arr[0]; } By adding a type parameter Type to this function and using it in two places, we\u0026rsquo;ve created a link between the input of the function (the array) and the output (the return value). Now when we call it, a more specific type comes out:\n// s is of type \u0026#39;string\u0026#39; const s = firstElement([\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;]); // n is of type \u0026#39;number\u0026#39; const n = firstElement([1, 2, 3]); // u is of type undefined const u = firstElement([]); Inference # Note that we didn\u0026rsquo;t have to specify Type in this sample. The type was inferred - chosen automatically - by TypeScript.\nWe can use multiple type parameters as well. For example, a standalone version of map would look like this:\nfunction map\u0026lt;Input, Output\u0026gt;(arr: Input[], func: (arg: Input) =\u0026gt; Output): Output[] { return arr.map(func); } // Parameter \u0026#39;n\u0026#39; is of type \u0026#39;string\u0026#39; // \u0026#39;parsed\u0026#39; is of type \u0026#39;number[]\u0026#39; const parsed = map([\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;], (n) =\u0026gt; parseInt(n)); Note that in this example, TypeScript could infer both the type of the Input type parameter (from the given string array), as well as the Output type parameter based on the return value of the function expression (number).\nConstraints # We\u0026rsquo;ve written some generic functions that can work on any kind of value. Sometimes we want to relate two values, but can only operate on a certain subset of values. In this case, we can use a constraint to limit the kinds of types that a type parameter can accept.\nLet\u0026rsquo;s write a function that returns the longer of two values. To do this, we need a length property that\u0026rsquo;s a number. We constrain the type parameter to that type by writing an extends clause:\nfunction longest\u0026lt;Type extends { length: number }\u0026gt;(a: Type, b: Type) { if (a.length \u0026gt;= b.length) { return a; } else { return b; } } // longerArray is of type \u0026#39;number[]\u0026#39; const longerArray = longest([1, 2], [1, 2, 3]); // longerString is of type \u0026#39;alice\u0026#39; | \u0026#39;bob\u0026#39; const longerString = longest(\u0026#34;alice\u0026#34;, \u0026#34;bob\u0026#34;); // Error! Numbers don\u0026#39;t have a \u0026#39;length\u0026#39; property const notOK = longest(10, 100); There are a few interesting things to note in this example. We allowed TypeScript to infer the return type of longest. Return type inference also works on generic functions.\nBecause we constrained Type to { length: number }, we were allowed to access the .length property of the a and b parameters. Without the type constraint, we wouldn\u0026rsquo;t be able to access those properties because the values might have been some other type without a length property.\nThe types of longerArray and longerString were inferred based on the arguments. Remember, generics are all about relating two or more values with the same type!\nFinally, just as we\u0026rsquo;d like, the call to longest(10, 100) is rejected because the number type doesn\u0026rsquo;t have a .length property.\nWorking with Constrained Values # Here\u0026rsquo;s a common error when working with generic constraints:\nfunction minimumLength\u0026lt;Type extends { length: number }\u0026gt;( obj: Type, minimum: number ): Type { if (obj.length \u0026gt;= minimum) { return obj; } else { return { length: minimum }; } } It might look like this function is OK - Type is constrained to { length: number }, and the function either returns Type or a value matching that constraint. The problem is that the function promises to return the same kind of object as was passed in, not just some object matching the constraint. If this code were legal, you could write code that definitely wouldn\u0026rsquo;t work:\n// \u0026#39;arr\u0026#39; gets value { length: 6 } const arr = minimumLength([1, 2, 3], 6); // and crashes here because arrays have // a \u0026#39;slice\u0026#39; method, but not the returned object! console.log(arr.slice(0)); Specifying Type Arguments # TypeScript can usually infer the intended type arguments in a generic call, but not always. For example, let\u0026rsquo;s say you wrote a function to combine two arrays:\nfunction combine\u0026lt;Type\u0026gt;(arr1: Type[], arr2: Type[]): Type[] { return arr1.concat(arr2); } Normally it would be an error to call this function with mismatched arrays:\nconst arr = combine([1, 2, 3], [\u0026#34;hello\u0026#34;]); If you intended to do this, however, you could manually specify Type:\nconst arr = combine\u0026lt;string | number\u0026gt;([1, 2, 3], [\u0026#34;hello\u0026#34;]); Guidelines for Writing Good Generic Functions # Writing generic functions is fun, and it can be easy to get carried away with type parameters. Having too many type parameters or using constraints where they aren\u0026rsquo;t needed can make inference less successful, frustrating callers of your function.\nPush Type Parameters Down # Here are two ways of writing a function that appear similar:\nfunction firstElement1\u0026lt;Type\u0026gt;(arr: Type[]) { return arr[0]; } function firstElement2\u0026lt;Type extends any[]\u0026gt;(arr: Type) { return arr[0]; } // a: number (good) const a = firstElement1([1, 2, 3]); // b: any (bad) const b = firstElement2([1, 2, 3]); These might seem identical at first glance, but firstElement1 is a much better way to write this function. Its inferred return type is Type, but firstElement2\u0026rsquo;s inferred return type is any because TypeScript has to resolve the arr[0] expression using the constraint type, rather than \u0026ldquo;waiting\u0026rdquo; to resolve the element during a call.\nRule: When possible, use the type parameter itself rather than constraining it\nUse Fewer Type Parameters # Here\u0026rsquo;s another pair of similar functions:\nfunction filter1\u0026lt;Type\u0026gt;(arr: Type[], func: (arg: Type) =\u0026gt; boolean): Type[] { return arr.filter(func); } function filter2\u0026lt;Type, Func extends (arg: Type) =\u0026gt; boolean\u0026gt;( arr: Type[], func: Func ): Type[] { return arr.filter(func); } We\u0026rsquo;ve created a type parameter Func that doesn\u0026rsquo;t relate two values. That\u0026rsquo;s always a red flag, because it means callers wanting to specify type arguments have to manually specify an extra type argument for no reason. Func doesn\u0026rsquo;t do anything but make the function harder to read and reason about!\nRule: Always use as few type parameters as possible\nType Parameters Should Appear Twice # Sometimes we forget that a function might not need to be generic:\nfunction greet\u0026lt;Str extends string\u0026gt;(s: Str) { console.log(\u0026#34;Hello, \u0026#34; + s); } greet(\u0026#34;world\u0026#34;); We could just as easily have written a simpler version:\nfunction greet(s: string) { console.log(\u0026#34;Hello, \u0026#34; + s); } Remember, type parameters are for relating the types of multiple values. If a type parameter is only used once in the function signature, it\u0026rsquo;s not relating anything. This includes the inferred return type; for example, if Str was part of the inferred return type of greet, it would be relating the argument and return types, so would be used twice despite appearing only once in the written code.\nRule: If a type parameter only appears in one location, strongly reconsider if you actually need it\nOptional Parameters # Functions in JavaScript often take a variable number of arguments. For example, the toFixed method of number takes an optional digit count:\nfunction f(n: number) { console.log(n.toFixed()); // 0 arguments console.log(n.toFixed(3)); // 1 argument } We can model this in TypeScript by marking the parameter as optional with ?:\nfunction f(x?: number) { // ... } f(); // OK f(10); // OK Although the parameter is specified as type number, the x parameter will actually have the type number | undefined because unspecified parameters in JavaScript get the value undefined.\nYou can also provide a parameter default:\nfunction f(x = 10) { // ... } Now in the body of f, x will have type number because any undefined argument will be replaced with 10. Note that when a parameter is optional, callers can always pass undefined, as this simply simulates a \u0026ldquo;missing\u0026rdquo; argument:\ndeclare function f(x?: number): void; // cut // All OK f(); f(10); f(undefined); Optional Parameters in Callbacks # Once you\u0026rsquo;ve learned about optional parameters and function type expressions, it\u0026rsquo;s very easy to make the following mistakes when writing functions that invoke callbacks:\nfunction myForEach(arr: any[], callback: (arg: any, index?: number) =\u0026gt; void) { for (let i = 0; i \u0026lt; arr.length; i++) { callback(arr[i], i); } } What people usually intend when writing index? as an optional parameter is that they want both of these calls to be legal:\nmyForEach([1, 2, 3], (a) =\u0026gt; console.log(a)); myForEach([1, 2, 3], (a, i) =\u0026gt; console.log(a, i)); What this actually means is that callback might get invoked with one argument. In other words, the function definition says that the implementation might look like this:\nfunction myForEach(arr: any[], callback: (arg: any, index?: number) =\u0026gt; void) { for (let i = 0; i \u0026lt; arr.length; i++) { // I don\u0026#39;t feel like providing the index today callback(arr[i]); } } In turn, TypeScript will enforce this meaning and issue errors that aren\u0026rsquo;t really possible:\nmyForEach([1, 2, 3], (a, i) =\u0026gt; { console.log(i.toFixed()); }); In JavaScript, if you call a function with more arguments than there are parameters, the extra arguments are simply ignored. TypeScript behaves the same way. Functions with fewer parameters (of the same types) can always take the place of functions with more parameters.\nRule: When writing a function type for a callback, never write an optional parameter unless you intend to call the function without passing that argument\nFunction Overloads # Some JavaScript functions can be called in a variety of argument counts and types. For example, you might write a function to produce a Date that takes either a timestamp (one argument) or a month/day/year specification (three arguments).\nIn TypeScript, we can specify a function that can be called in different ways by writing overload signatures. To do this, write some number of function signatures (usually two or more), followed by the body of the function:\nfunction makeDate(timestamp: number): Date; function makeDate(m: number, d: number, y: number): Date; function makeDate(mOrTimestamp: number, d?: number, y?: number): Date { if (d !== undefined \u0026amp;\u0026amp; y !== undefined) { return new Date(y, mOrTimestamp, d); } else { return new Date(mOrTimestamp); } } const d1 = makeDate(12345678); const d2 = makeDate(5, 5, 5); const d3 = makeDate(1, 3); In this example, we wrote two overloads: one accepting one argument, and another accepting three arguments. These first two signatures are called the overload signatures.\nThen, we wrote a function implementation with a compatible signature. Functions have an implementation signature, but this signature can\u0026rsquo;t be called directly. Even though we wrote a function with two optional parameters after the required one, it can\u0026rsquo;t be called with two parameters!\nOverload Signatures and the Implementation Signature # This is a common source of confusion. Often people will write code like this and not understand why there is an error:\nfunction fn(x: string): void; function fn() { // ... } // Expected to be able to call with zero arguments fn(); Again, the signature used to write the function body can\u0026rsquo;t be \u0026ldquo;seen\u0026rdquo; from the outside.\nThe signature of the implementation is not visible from the outside. When writing an overloaded function, you should always have two or more signatures above the implementation of the function.\nThe implementation signature must also be compatible with the overload signatures. For example, these functions have errors because the implementation signature doesn\u0026rsquo;t match the overloads in a correct way:\nfunction fn(x: boolean): void; // Argument type isn\u0026#39;t right function fn(x: string): void; function fn(x: boolean) {} function fn(x: string): string; // Return type isn\u0026#39;t right function fn(x: number): boolean; function fn(x: string | number) { return \u0026#34;oops\u0026#34;; } Writing Good Overloads # Like generics, there are a few guidelines you should follow when using function overloads. Following these principles will make your function easier to call, easier to understand, and easier to implement.\nLet\u0026rsquo;s consider a function that returns the length of a string or an array:\nfunction len(s: string): number; function len(arr: any[]): number; function len(x: any) { return x.length; } This function is fine; we can invoke it with strings or arrays. However, we can\u0026rsquo;t invoke it with a value that might be a string or an array, because TypeScript can only resolve a function call to a single overload:\nlen(\u0026#34;\u0026#34;); // OK len([0]); // OK len(Math.random() \u0026gt; 0.5 ? \u0026#34;hello\u0026#34; : [0]); Because both overloads have the same argument count and same return type, we can instead write a non-overloaded version of the function:\nfunction len(x: any[] | string) { return x.length; } This is much better! Callers can invoke this with either sort of value, and as an added bonus, we don\u0026rsquo;t have to figure out a correct implementation signature.\nAlways prefer parameters with union types instead of overloads when possible\nDeclaring this in a Function # TypeScript will infer what the this should be in a function via code flow analysis, for example in the following:\nconst user = { id: 123, admin: false, becomeAdmin: function () { this.admin = true; }, }; TypeScript understands that the function user.becomeAdmin has a corresponding this which is the outer object user. this, heh, can be enough for a lot of cases, but there are a lot of cases where you need more control over what object this represents. The JavaScript specification states that you cannot have a parameter called this, and so TypeScript uses that syntax space to let you declare the type for this in the function body.\ninterface DB { filterUsers(filter: (this: User) =\u0026gt; boolean): User[]; } const db = getDB(); const admins = db.filterUsers(function (this: User) { return this.admin; }); This pattern is common with callback-style APIs, where another object typically controls when your function is called. Note that you need to use function and not arrow functions to get this behavior:\ninterface DB { filterUsers(filter: (this: User) =\u0026gt; boolean): User[]; } const db = getDB(); const admins = db.filterUsers(() =\u0026gt; this.admin); Other Types to Know About # There are some additional types you\u0026rsquo;ll want to recognize that appear often when working with function types. Like all types, you can use them everywhere, but these are especially relevant in the context of functions.\nvoid # void represents the return value of functions which don\u0026rsquo;t return a value. It\u0026rsquo;s the inferred type any time a function doesn\u0026rsquo;t have any return statements, or doesn\u0026rsquo;t return any explicit value from those return statements:\n// The inferred return type is void function noop() { return; } In JavaScript, a function that doesn\u0026rsquo;t return any value will implicitly return the value undefined. However, void and undefined are not the same thing in TypeScript. There are further details at the end of this chapter.\nvoid is not the same as undefined.\nobject # The special type object refers to any value that isn\u0026rsquo;t a primitive (string, number, bigint, boolean, symbol, null, or undefined). This is different from the empty object type { }, and also different from the global type Object. It\u0026rsquo;s very likely you will never use Object.\nobject is not Object. Always use object!\nNote that in JavaScript, function values are objects: They have properties, have Object.prototype in their prototype chain, are instanceof Object, you can call Object.keys on them, and so on. For this reason, function types are considered to be objects in TypeScript.\nunknown # The unknown type represents any value. This is similar to the any type, but is safer because it\u0026rsquo;s not legal to do anything with an unknown value:\nfunction f1(a: any) { a.b(); // OK } function f2(a: unknown) { a.b(); } This is useful when describing function types because you can describe functions that accept any value without having any values in your function body.\nConversely, you can describe a function that returns a value of unknown type:\nfunction safeParse(s: string): unknown { return JSON.parse(s); } // Need to be careful with \u0026#39;obj\u0026#39;! const obj = safeParse(someRandomString); never # Some functions never return a value:\nfunction fail(msg: string): never { throw new Error(msg); } The never type represents values which are never observed. In a return type, this means that the function throws an exception or terminates execution of the program.\nnever also appears when TypeScript determines there\u0026rsquo;s nothing left in a union.\nfunction fn(x: string | number) { if (typeof x === \u0026#34;string\u0026#34;) { // do something } else if (typeof x === \u0026#34;number\u0026#34;) { // do something else } else { x; // has type \u0026#39;never\u0026#39;! } } Function # The global type Function describes properties like bind, call, apply, and others present on all function values in JavaScript. It also has the special property that values of type Function can always be called; these calls return any:\nfunction doSomething(f: Function) { return f(1, 2, 3); } This is an untyped function call and is generally best avoided because of the unsafe any return type.\nIf you need to accept an arbitrary function but don\u0026rsquo;t intend to call it, the type () =\u0026gt; void is generally safer.\nRest Parameters and Arguments # Background Reading:\nRest Parameters\nSpread Syntax\\\nRest Parameters # In addition to using optional parameters or overloads to make functions that can accept a variety of fixed argument counts, we can also define functions that take an unbounded number of arguments using rest parameters.\nA rest parameter appears after all other parameters, and uses the ... syntax:\nfunction multiply(n: number, ...m: number[]) { return m.map((x) =\u0026gt; n * x); } // \u0026#39;a\u0026#39; gets value [10, 20, 30, 40] const a = multiply(10, 1, 2, 3, 4); In TypeScript, the type annotation on these parameters is implicitly any[] instead of any, and any type annotation given must be of the form Array\u0026lt;T\u0026gt; or T[], or a tuple type (which we\u0026rsquo;ll learn about later).\nRest Arguments # Conversely, we can provide a variable number of arguments from an iterable object (for example, an array) using the spread syntax. For example, the push method of arrays takes any number of arguments:\nconst arr1 = [1, 2, 3]; const arr2 = [4, 5, 6]; arr1.push(...arr2); Note that in general, TypeScript does not assume that arrays are immutable. This can lead to some surprising behavior:\n// Inferred type is number[] -- \u0026#34;an array with zero or more numbers\u0026#34;, // not specifically two numbers const args = [8, 5]; const angle = Math.atan2(...args); The best fix for this situation depends a bit on your code, but in general a const context is the most straightforward solution:\n// Inferred as 2-length tuple const args = [8, 5] as const; // OK const angle = Math.atan2(...args); Using rest arguments may require turning on downlevelIteration when targeting older runtimes.\nParameter Destructuring # Background Reading:\nDestructuring Assignment\\\nYou can use parameter destructuring to conveniently unpack objects provided as an argument into one or more local variables in the function body. In JavaScript, it looks like this:\nfunction sum({ a, b, c }) { console.log(a + b + c); } sum({ a: 10, b: 3, c: 9 }); The type annotation for the object goes after the destructuring syntax:\nfunction sum({ a, b, c }: { a: number; b: number; c: number }) { console.log(a + b + c); } This can look a bit verbose, but you can use a named type here as well:\n// Same as prior example type ABC = { a: number; b: number; c: number }; function sum({ a, b, c }: ABC) { console.log(a + b + c); } Assignability of Functions # Return type void # The void return type for functions can produce some unusual, but expected behavior.\nContextual typing with a return type of void does not force functions to not return something. Another way to say this is a contextual function type with a void return type (type voidFunc = () =\u0026gt; void), when implemented, can return any other value, but it will be ignored.\nThus, the following implementations of the type () =\u0026gt; void are valid:\ntype voidFunc = () =\u0026gt; void; const f1: voidFunc = () =\u0026gt; { return true; }; const f2: voidFunc = () =\u0026gt; true; const f3: voidFunc = function () { return true; }; And when the return value of one of these functions is assigned to another variable, it will retain the type of void:\nconst v1 = f1(); const v2 = f2(); const v3 = f3(); This behavior exists so that the following code is valid even though Array.prototype.push returns a number and the Array.prototype.forEach method expects a function with a return type of void.\nconst src = [1, 2, 3]; const dst = [0]; src.forEach((el) =\u0026gt; dst.push(el)); There is one other special case to be aware of, when a literal function definition has a void return type, that function must not return anything.\nfunction f2(): void { // @ts-expect-error return true; } const f3 = function (): void { // @ts-expect-error return true; }; For more on void please refer to these other documentation entries:\nv1 handbook v2 handbook FAQ - \u0026ldquo;Why are functions returning non-void assignable to function returning void?\u0026rdquo; ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/functions.html{._attribution-link} :::\n"},{"id":279,"href":"/docs/references/languages/typescript/generics/","title":"Generics","section":"Typescript","content":" Generics # A major part of software engineering is building components that not only have well-defined and consistent APIs, but are also reusable. Components that are capable of working on the data of today as well as the data of tomorrow will give you the most flexible capabilities for building up large software systems.\nIn languages like C# and Java, one of the main tools in the toolbox for creating reusable components is generics, that is, being able to create a component that can work over a variety of types rather than a single one. This allows users to consume these components and use their own types.\nHello World of Generics # To start off, let\u0026rsquo;s do the \u0026ldquo;hello world\u0026rdquo; of generics: the identity function. The identity function is a function that will return back whatever is passed in. You can think of this in a similar way to the echo command.\nWithout generics, we would either have to give the identity function a specific type:\nfunction identity(arg: number): number { return arg; } Or, we could describe the identity function using the any type:\nfunction identity(arg: any): any { return arg; } While using any is certainly generic in that it will cause the function to accept any and all types for the type of arg, we actually are losing the information about what that type was when the function returns. If we passed in a number, the only information we have is that any type could be returned.\nInstead, we need a way of capturing the type of the argument in such a way that we can also use it to denote what is being returned. Here, we will use a type variable, a special kind of variable that works on types rather than values.\nfunction identity\u0026lt;Type\u0026gt;(arg: Type): Type { return arg; } We\u0026rsquo;ve now added a type variable Type to the identity function. This Type allows us to capture the type the user provides (e.g. number), so that we can use that information later. Here, we use Type again as the return type. On inspection, we can now see the same type is used for the argument and the return type. This allows us to traffic that type information in one side of the function and out the other.\nWe say that this version of the identity function is generic, as it works over a range of types. Unlike using any, it\u0026rsquo;s also just as precise (i.e., it doesn\u0026rsquo;t lose any information) as the first identity function that used numbers for the argument and return type.\nOnce we\u0026rsquo;ve written the generic identity function, we can call it in one of two ways. The first way is to pass all of the arguments, including the type argument, to the function:\nlet output = identity\u0026lt;string\u0026gt;(\u0026#34;myString\u0026#34;); Here we explicitly set Type to be string as one of the arguments to the function call, denoted using the \u0026lt;\u0026gt; around the arguments rather than ().\nThe second way is also perhaps the most common. Here we use type argument inference \u0026mdash; that is, we want the compiler to set the value of Type for us automatically based on the type of the argument we pass in:\nlet output = identity(\u0026#34;myString\u0026#34;); Notice that we didn\u0026rsquo;t have to explicitly pass the type in the angle brackets (\u0026lt;\u0026gt;); the compiler just looked at the value \u0026quot;myString\u0026quot;, and set Type to its type. While type argument inference can be a helpful tool to keep code shorter and more readable, you may need to explicitly pass in the type arguments as we did in the previous example when the compiler fails to infer the type, as may happen in more complex examples.\nWorking with Generic Type Variables # When you begin to use generics, you\u0026rsquo;ll notice that when you create generic functions like identity, the compiler will enforce that you use any generically typed parameters in the body of the function correctly. That is, that you actually treat these parameters as if they could be any and all types.\nLet\u0026rsquo;s take our identity function from earlier:\nfunction identity\u0026lt;Type\u0026gt;(arg: Type): Type { return arg; } What if we want to also log the length of the argument arg to the console with each call? We might be tempted to write this:\nfunction loggingIdentity\u0026lt;Type\u0026gt;(arg: Type): Type { console.log(arg.length); return arg; } When we do, the compiler will give us an error that we\u0026rsquo;re using the .length member of arg, but nowhere have we said that arg has this member. Remember, we said earlier that these type variables stand in for any and all types, so someone using this function could have passed in a number instead, which does not have a .length member.\nLet\u0026rsquo;s say that we\u0026rsquo;ve actually intended this function to work on arrays of Type rather than Type directly. Since we\u0026rsquo;re working with arrays, the .length member should be available. We can describe this just like we would create arrays of other types:\nfunction loggingIdentity\u0026lt;Type\u0026gt;(arg: Type[]): Type[] { console.log(arg.length); return arg; } You can read the type of loggingIdentity as \u0026ldquo;the generic function loggingIdentity takes a type parameter Type, and an argument arg which is an array of Types, and returns an array of Types.\u0026rdquo; If we passed in an array of numbers, we\u0026rsquo;d get an array of numbers back out, as Type would bind to number. This allows us to use our generic type variable Type as part of the types we\u0026rsquo;re working with, rather than the whole type, giving us greater flexibility.\nWe can alternatively write the sample example this way:\nfunction loggingIdentity\u0026lt;Type\u0026gt;(arg: Array\u0026lt;Type\u0026gt;): Array\u0026lt;Type\u0026gt; { console.log(arg.length); // Array has a .length, so no more error return arg; } You may already be familiar with this style of type from other languages. In the next section, we\u0026rsquo;ll cover how you can create your own generic types like Array\u0026lt;Type\u0026gt;.\nGeneric Types # In previous sections, we created generic identity functions that worked over a range of types. In this section, we\u0026rsquo;ll explore the type of the functions themselves and how to create generic interfaces.\nThe type of generic functions is just like those of non-generic functions, with the type parameters listed first, similarly to function declarations:\nfunction identity\u0026lt;Type\u0026gt;(arg: Type): Type { return arg; } let myIdentity: \u0026lt;Type\u0026gt;(arg: Type) =\u0026gt; Type = identity; We could also have used a different name for the generic type parameter in the type, so long as the number of type variables and how the type variables are used line up.\nfunction identity\u0026lt;Input\u0026gt;(arg: Input): Input { return arg; } let myIdentity: \u0026lt;Input\u0026gt;(arg: Input) =\u0026gt; Input = identity; We can also write the generic type as a call signature of an object literal type:\nfunction identity\u0026lt;Type\u0026gt;(arg: Type): Type { return arg; } let myIdentity: { \u0026lt;Type\u0026gt;(arg: Type): Type } = identity; Which leads us to writing our first generic interface. Let\u0026rsquo;s take the object literal from the previous example and move it to an interface:\ninterface GenericIdentityFn { \u0026lt;Type\u0026gt;(arg: Type): Type; } function identity\u0026lt;Type\u0026gt;(arg: Type): Type { return arg; } let myIdentity: GenericIdentityFn = identity; In a similar example, we may want to move the generic parameter to be a parameter of the whole interface. This lets us see what type(s) we\u0026rsquo;re generic over (e.g. Dictionary\u0026lt;string\u0026gt; rather than just Dictionary). This makes the type parameter visible to all the other members of the interface.\ninterface GenericIdentityFn\u0026lt;Type\u0026gt; { (arg: Type): Type; } function identity\u0026lt;Type\u0026gt;(arg: Type): Type { return arg; } let myIdentity: GenericIdentityFn\u0026lt;number\u0026gt; = identity; Notice that our example has changed to be something slightly different. Instead of describing a generic function, we now have a non-generic function signature that is a part of a generic type. When we use GenericIdentityFn, we now will also need to specify the corresponding type argument (here: number), effectively locking in what the underlying call signature will use. Understanding when to put the type parameter directly on the call signature and when to put it on the interface itself will be helpful in describing what aspects of a type are generic.\nIn addition to generic interfaces, we can also create generic classes. Note that it is not possible to create generic enums and namespaces.\nGeneric Classes # A generic class has a similar shape to a generic interface. Generic classes have a generic type parameter list in angle brackets (\u0026lt;\u0026gt;) following the name of the class.\nclass GenericNumber\u0026lt;NumType\u0026gt; { zeroValue: NumType; add: (x: NumType, y: NumType) =\u0026gt; NumType; } let myGenericNumber = new GenericNumber\u0026lt;number\u0026gt;(); myGenericNumber.zeroValue = 0; myGenericNumber.add = function (x, y) { return x + y; }; This is a pretty literal use of the GenericNumber class, but you may have noticed that nothing is restricting it to only use the number type. We could have instead used string or even more complex objects.\nlet stringNumeric = new GenericNumber\u0026lt;string\u0026gt;(); stringNumeric.zeroValue = \u0026#34;\u0026#34;; stringNumeric.add = function (x, y) { return x + y; }; console.log(stringNumeric.add(stringNumeric.zeroValue, \u0026#34;test\u0026#34;)); Just as with interface, putting the type parameter on the class itself lets us make sure all of the properties of the class are working with the same type.\nAs we cover in our section on classes, a class has two sides to its type: the static side and the instance side. Generic classes are only generic over their instance side rather than their static side, so when working with classes, static members can not use the class\u0026rsquo;s type parameter.\nGeneric Constraints # If you remember from an earlier example, you may sometimes want to write a generic function that works on a set of types where you have some knowledge about what capabilities that set of types will have. In our loggingIdentity example, we wanted to be able to access the .length property of arg, but the compiler could not prove that every type had a .length property, so it warns us that we can\u0026rsquo;t make this assumption.\nfunction loggingIdentity\u0026lt;Type\u0026gt;(arg: Type): Type { console.log(arg.length); return arg; } Instead of working with any and all types, we\u0026rsquo;d like to constrain this function to work with any and all types that also have the .length property. As long as the type has this member, we\u0026rsquo;ll allow it, but it\u0026rsquo;s required to have at least this member. To do so, we must list our requirement as a constraint on what Type can be.\nTo do so, we\u0026rsquo;ll create an interface that describes our constraint. Here, we\u0026rsquo;ll create an interface that has a single .length property and then we\u0026rsquo;ll use this interface and the extends keyword to denote our constraint:\ninterface Lengthwise { length: number; } function loggingIdentity\u0026lt;Type extends Lengthwise\u0026gt;(arg: Type): Type { console.log(arg.length); // Now we know it has a .length property, so no more error return arg; } Because the generic function is now constrained, it will no longer work over any and all types:\nloggingIdentity(3); Instead, we need to pass in values whose type has all the required properties:\nloggingIdentity({ length: 10, value: 3 }); Using Type Parameters in Generic Constraints # You can declare a type parameter that is constrained by another type parameter. For example, here we\u0026rsquo;d like to get a property from an object given its name. We\u0026rsquo;d like to ensure that we\u0026rsquo;re not accidentally grabbing a property that does not exist on the obj, so we\u0026rsquo;ll place a constraint between the two types:\nfunction getProperty\u0026lt;Type, Key extends keyof Type\u0026gt;(obj: Type, key: Key) { return obj[key]; } let x = { a: 1, b: 2, c: 3, d: 4 }; getProperty(x, \u0026#34;a\u0026#34;); getProperty(x, \u0026#34;m\u0026#34;); Using Class Types in Generics # When creating factories in TypeScript using generics, it is necessary to refer to class types by their constructor functions. For example,\nfunction create\u0026lt;Type\u0026gt;(c: { new (): Type }): Type { return new c(); } A more advanced example uses the prototype property to infer and constrain relationships between the constructor function and the instance side of class types.\nclass BeeKeeper { hasMask: boolean = true; } class ZooKeeper { nametag: string = \u0026#34;Mikle\u0026#34;; } class Animal { numLegs: number = 4; } class Bee extends Animal { numLegs = 6; keeper: BeeKeeper = new BeeKeeper(); } class Lion extends Animal { keeper: ZooKeeper = new ZooKeeper(); } function createInstance\u0026lt;A extends Animal\u0026gt;(c: new () =\u0026gt; A): A { return new c(); } createInstance(Lion).keeper.nametag; createInstance(Bee).keeper.hasMask; This pattern is used to power the mixins design pattern.\nGeneric Parameter Defaults # Consider a function that creates a new HTMLElement. Calling the function with no arguments generates a Div; calling it with an element as the first argument generates an element of the argument\u0026rsquo;s type. You can optionally pass a list of children as well. Previously you would have to define it as:\ndeclare function create(): Container\u0026lt;HTMLDivElement, HTMLDivElement[]\u0026gt;; declare function create\u0026lt;T extends HTMLElement\u0026gt;(element: T): Container\u0026lt;T, T[]\u0026gt;; declare function create\u0026lt;T extends HTMLElement, U extends HTMLElement\u0026gt;( element: T, children: U[] ): Container\u0026lt;T, U[]\u0026gt;; With generic parameter defaults we can reduce it to:\ndeclare function create\u0026lt;T extends HTMLElement = HTMLDivElement, U = T[]\u0026gt;( element?: T, children?: U ): Container\u0026lt;T, U\u0026gt;; A generic parameter default follows the following rules:\nA type parameter is deemed optional if it has a default. Required type parameters must not follow optional type parameters. Default types for a type parameter must satisfy the constraint for the type parameter, if it exists. When specifying type arguments, you are only required to specify type arguments for the required type parameters. Unspecified type parameters will resolve to their default types. If a default type is specified and inference cannot choose a candidate, the default type is inferred. A class or interface declaration that merges with an existing class or interface declaration may introduce a default for an existing type parameter. A class or interface declaration that merges with an existing class or interface declaration may introduce a new type parameter as long as it specifies a default. ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/generics.html{._attribution-link} :::\n"},{"id":280,"href":"/docs/references/languages/typescript/gulp/","title":"Gulp","section":"Typescript","content":" Gulp # This quick start guide will teach you how to build TypeScript with gulp and then add Browserify, terser, or Watchify to the gulp pipeline. This guide also shows how to add Babel functionality using Babelify.\nWe assume that you\u0026rsquo;re already using Node.js with npm.\nMinimal project # Let\u0026rsquo;s start out with a new directory. We\u0026rsquo;ll name it proj for now, but you can change it to whatever you want.\nmkdir proj cd proj To start, we\u0026rsquo;re going to structure our project in the following way:\nproj/ ├─ src/ └─ dist/ TypeScript files will start out in your src folder, run through the TypeScript compiler and end up in dist.\nLet\u0026rsquo;s scaffold this out:\nmkdir src mkdir dist Initialize the project # Now we\u0026rsquo;ll turn this folder into an npm package.\nnpm init You\u0026rsquo;ll be given a series of prompts. You can use the defaults except for your entry point. For your entry point, use ./dist/main.js. You can always go back and change these in the package.json file that\u0026rsquo;s been generated for you.\nInstall our dependencies # Now we can use npm install to install packages. First install gulp-cli globally (if you use a Unix system, you may need to prefix the npm install commands in this guide with sudo).\nnpm install -g gulp-cli Then install typescript, gulp and gulp-typescript in your project\u0026rsquo;s dev dependencies. Gulp-typescript is a gulp plugin for TypeScript.\nnpm install --save-dev typescript gulp@4.0.0 gulp-typescript Write a simple example # Let\u0026rsquo;s write a Hello World program. In src, create the file main.ts:\nfunction hello(compiler: string) { console.log(`Hello from ${compiler}`); } hello(\u0026#34;TypeScript\u0026#34;); In the project root, proj, create the file tsconfig.json:\n{ \u0026#34;files\u0026#34;: [\u0026#34;src/main.ts\u0026#34;], \u0026#34;compilerOptions\u0026#34;: { \u0026#34;noImplicitAny\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;es5\u0026#34; } } Create a gulpfile.js # In the project root, create the file gulpfile.js:\nvar gulp = require(\u0026#34;gulp\u0026#34;); var ts = require(\u0026#34;gulp-typescript\u0026#34;); var tsProject = ts.createProject(\u0026#34;tsconfig.json\u0026#34;); gulp.task(\u0026#34;default\u0026#34;, function () { return tsProject.src().pipe(tsProject()).js.pipe(gulp.dest(\u0026#34;dist\u0026#34;)); }); Test the resulting app # gulp node dist/main.js The program should print \u0026ldquo;Hello from TypeScript!\u0026rdquo;.\nAdd modules to the code # Before we get to Browserify, let\u0026rsquo;s build our code out and add modules to the mix. This is the structure you\u0026rsquo;re more likely to use for a real app.\nCreate a file called src/greet.ts:\nexport function sayHello(name: string) { return `Hello from ${name}`; } Now change the code in src/main.ts to import sayHello from greet.ts:\nimport { sayHello } from \u0026#34;./greet\u0026#34;; console.log(sayHello(\u0026#34;TypeScript\u0026#34;)); Finally, add src/greet.ts to tsconfig.json:\n{ \u0026#34;files\u0026#34;: [\u0026#34;src/main.ts\u0026#34;, \u0026#34;src/greet.ts\u0026#34;], \u0026#34;compilerOptions\u0026#34;: { \u0026#34;noImplicitAny\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;es5\u0026#34; } } Make sure that the modules work by running gulp and then testing in Node:\ngulp node dist/main.js Notice that even though we used ES2015 module syntax, TypeScript emitted CommonJS modules that Node uses. We\u0026rsquo;ll stick with CommonJS for this tutorial, but you could set module in the options object to change this.\nBrowserify # Now let\u0026rsquo;s move this project from Node to the browser. To do this, we\u0026rsquo;d like to bundle all our modules into one JavaScript file. Fortunately, that\u0026rsquo;s exactly what Browserify does. Even better, it lets us use the CommonJS module system used by Node, which is the default TypeScript emit. That means our TypeScript and Node setup will transfer to the browser basically unchanged.\nFirst, install browserify, tsify, and vinyl-source-stream. tsify is a Browserify plugin that, like gulp-typescript, gives access to the TypeScript compiler. vinyl-source-stream lets us adapt the file output of Browserify back into a format that gulp understands called vinyl.\nnpm install --save-dev browserify tsify vinyl-source-stream Create a page # Create a file in src named index.html:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Hello World!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p id=\u0026#34;greeting\u0026#34;\u0026gt;Loading ...\u0026lt;/p\u0026gt; \u0026lt;script src=\u0026#34;bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Now change main.ts to update the page:\nimport { sayHello } from \u0026#34;./greet\u0026#34;; function showHello(divName: string, name: string) { const elt = document.getElementById(divName); elt.innerText = sayHello(name); } showHello(\u0026#34;greeting\u0026#34;, \u0026#34;TypeScript\u0026#34;); Calling showHello calls sayHello to change the paragraph\u0026rsquo;s text. Now change your gulpfile to the following:\nvar gulp = require(\u0026#34;gulp\u0026#34;); var browserify = require(\u0026#34;browserify\u0026#34;); var source = require(\u0026#34;vinyl-source-stream\u0026#34;); var tsify = require(\u0026#34;tsify\u0026#34;); var paths = { pages: [\u0026#34;src/*.html\u0026#34;], }; gulp.task(\u0026#34;copy-html\u0026#34;, function () { return gulp.src(paths.pages).pipe(gulp.dest(\u0026#34;dist\u0026#34;)); }); gulp.task( \u0026#34;default\u0026#34;, gulp.series(gulp.parallel(\u0026#34;copy-html\u0026#34;), function () { return browserify({ basedir: \u0026#34;.\u0026#34;, debug: true, entries: [\u0026#34;src/main.ts\u0026#34;], cache: {}, packageCache: {}, }) .plugin(tsify) .bundle() .pipe(source(\u0026#34;bundle.js\u0026#34;)) .pipe(gulp.dest(\u0026#34;dist\u0026#34;)); }) ); This adds the copy-html task and adds it as a dependency of default. That means any time default is run, copy-html has to run first. We\u0026rsquo;ve also changed default to call Browserify with the tsify plugin instead of gulp-typescript. Conveniently, they both allow us to pass the same options object to the TypeScript compiler.\nAfter calling bundle we use source (our alias for vinyl-source-stream) to name our output bundle bundle.js.\nTest the page by running gulp and then opening dist/index.html in a browser. You should see \u0026ldquo;Hello from TypeScript\u0026rdquo; on the page.\nNotice that we specified debug: true to Browserify. This causes tsify to emit source maps inside the bundled JavaScript file. Source maps let you debug your original TypeScript code in the browser instead of the bundled JavaScript. You can test that source maps are working by opening the debugger for your browser and putting a breakpoint inside main.ts. When you refresh the page the breakpoint should pause the page and let you debug greet.ts.\nWatchify, Babel, and Terser # Now that we are bundling our code with Browserify and tsify, we can add various features to our build with browserify plugins.\nWatchify starts gulp and keeps it running, incrementally compiling whenever you save a file. This lets you keep an edit-save-refresh cycle going in the browser.\nBabel is a hugely flexible compiler that converts ES2015 and beyond into ES5 and ES3. This lets you add extensive and customized transformations that TypeScript doesn\u0026rsquo;t support.\nTerser compacts your code so that it takes less time to download.\nWatchify # We\u0026rsquo;ll start with Watchify to provide background compilation:\nnpm install --save-dev watchify fancy-log Now change your gulpfile to the following:\nvar gulp = require(\u0026#34;gulp\u0026#34;); var browserify = require(\u0026#34;browserify\u0026#34;); var source = require(\u0026#34;vinyl-source-stream\u0026#34;); var watchify = require(\u0026#34;watchify\u0026#34;); var tsify = require(\u0026#34;tsify\u0026#34;); var fancy_log = require(\u0026#34;fancy-log\u0026#34;); var paths = { pages: [\u0026#34;src/*.html\u0026#34;], }; var watchedBrowserify = watchify( browserify({ basedir: \u0026#34;.\u0026#34;, debug: true, entries: [\u0026#34;src/main.ts\u0026#34;], cache: {}, packageCache: {}, }).plugin(tsify) ); gulp.task(\u0026#34;copy-html\u0026#34;, function () { return gulp.src(paths.pages).pipe(gulp.dest(\u0026#34;dist\u0026#34;)); }); function bundle() { return watchedBrowserify .bundle() .on(\u0026#34;error\u0026#34;, fancy_log) .pipe(source(\u0026#34;bundle.js\u0026#34;)) .pipe(gulp.dest(\u0026#34;dist\u0026#34;)); } gulp.task(\u0026#34;default\u0026#34;, gulp.series(gulp.parallel(\u0026#34;copy-html\u0026#34;), bundle)); watchedBrowserify.on(\u0026#34;update\u0026#34;, bundle); watchedBrowserify.on(\u0026#34;log\u0026#34;, fancy_log); There are basically three changes here, but they require you to refactor your code a bit.\nWe wrapped our browserify instance in a call to watchify, and then held on to the result. We called watchedBrowserify.on('update', bundle); so that Browserify will run the bundle function every time one of your TypeScript files changes. We called watchedBrowserify.on('log', fancy_log); to log to the console. Together (1) and (2) mean that we have to move our call to browserify out of the default task. And we have to give the function for default a name since both Watchify and Gulp need to call it. Adding logging with (3) is optional but very useful for debugging your setup.\nNow when you run Gulp, it should start and stay running. Try changing the code for showHello in main.ts and saving it. You should see output that looks like this:\nproj$ gulp [10:34:20] Using gulpfile ~/src/proj/gulpfile.js [10:34:20] Starting \u0026#39;copy-html\u0026#39;... [10:34:20] Finished \u0026#39;copy-html\u0026#39; after 26 ms [10:34:20] Starting \u0026#39;default\u0026#39;... [10:34:21] 2824 bytes written (0.13 seconds) [10:34:21] Finished \u0026#39;default\u0026#39; after 1.36 s [10:35:22] 2261 bytes written (0.02 seconds) [10:35:24] 2808 bytes written (0.05 seconds) Terser # First install Terser. Since the point of Terser is to mangle your code, we also need to install vinyl-buffer and gulp-sourcemaps to keep sourcemaps working.\nnpm install --save-dev gulp-terser vinyl-buffer gulp-sourcemaps Now change your gulpfile to the following:\nvar gulp = require(\u0026#34;gulp\u0026#34;); var browserify = require(\u0026#34;browserify\u0026#34;); var source = require(\u0026#34;vinyl-source-stream\u0026#34;); var terser = require(\u0026#34;gulp-terser\u0026#34;); var tsify = require(\u0026#34;tsify\u0026#34;); var sourcemaps = require(\u0026#34;gulp-sourcemaps\u0026#34;); var buffer = require(\u0026#34;vinyl-buffer\u0026#34;); var paths = { pages: [\u0026#34;src/*.html\u0026#34;], }; gulp.task(\u0026#34;copy-html\u0026#34;, function () { return gulp.src(paths.pages).pipe(gulp.dest(\u0026#34;dist\u0026#34;)); }); gulp.task( \u0026#34;default\u0026#34;, gulp.series(gulp.parallel(\u0026#34;copy-html\u0026#34;), function () { return browserify({ basedir: \u0026#34;.\u0026#34;, debug: true, entries: [\u0026#34;src/main.ts\u0026#34;], cache: {}, packageCache: {}, }) .plugin(tsify) .bundle() .pipe(source(\u0026#34;bundle.js\u0026#34;)) .pipe(buffer()) .pipe(sourcemaps.init({ loadMaps: true })) .pipe(terser()) .pipe(sourcemaps.write(\u0026#34;./\u0026#34;)) .pipe(gulp.dest(\u0026#34;dist\u0026#34;)); }) ); Notice that terser itself has just one call \u0026mdash; the calls to buffer and sourcemaps exist to make sure sourcemaps keep working. These calls give us a separate sourcemap file instead of using inline sourcemaps like before. Now you can run Gulp and check that bundle.js does get minified into an unreadable mess:\ngulp cat dist/bundle.js Babel # First install Babelify and the Babel preset for ES2015. Like Terser, Babelify mangles code, so we\u0026rsquo;ll need vinyl-buffer and gulp-sourcemaps. By default Babelify will only process files with extensions of .js, .es, .es6 and .jsx so we need to add the .ts extension as an option to Babelify.\nnpm install --save-dev babelify@8 babel-core babel-preset-es2015 vinyl-buffer gulp-sourcemaps Now change your gulpfile to the following:\nvar gulp = require(\u0026#34;gulp\u0026#34;); var browserify = require(\u0026#34;browserify\u0026#34;); var source = require(\u0026#34;vinyl-source-stream\u0026#34;); var tsify = require(\u0026#34;tsify\u0026#34;); var sourcemaps = require(\u0026#34;gulp-sourcemaps\u0026#34;); var buffer = require(\u0026#34;vinyl-buffer\u0026#34;); var paths = { pages: [\u0026#34;src/*.html\u0026#34;], }; gulp.task(\u0026#34;copy-html\u0026#34;, function () { return gulp.src(paths.pages).pipe(gulp.dest(\u0026#34;dist\u0026#34;)); }); gulp.task( \u0026#34;default\u0026#34;, gulp.series(gulp.parallel(\u0026#34;copy-html\u0026#34;), function () { return browserify({ basedir: \u0026#34;.\u0026#34;, debug: true, entries: [\u0026#34;src/main.ts\u0026#34;], cache: {}, packageCache: {}, }) .plugin(tsify) .transform(\u0026#34;babelify\u0026#34;, { presets: [\u0026#34;es2015\u0026#34;], extensions: [\u0026#34;.ts\u0026#34;], }) .bundle() .pipe(source(\u0026#34;bundle.js\u0026#34;)) .pipe(buffer()) .pipe(sourcemaps.init({ loadMaps: true })) .pipe(sourcemaps.write(\u0026#34;./\u0026#34;)) .pipe(gulp.dest(\u0026#34;dist\u0026#34;)); }) ); We also need to have TypeScript target ES2015. Babel will then produce ES5 from the ES2015 code that TypeScript emits. Let\u0026rsquo;s modify tsconfig.json:\n{ \u0026#34;files\u0026#34;: [\u0026#34;src/main.ts\u0026#34;], \u0026#34;compilerOptions\u0026#34;: { \u0026#34;noImplicitAny\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;es2015\u0026#34; } } Babel\u0026rsquo;s ES5 output should be very similar to TypeScript\u0026rsquo;s output for such a simple script.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/gulp.html{._attribution-link} :::\n"},{"id":281,"href":"/docs/references/languages/typescript/indexed-access-types/","title":"Indexed Access Types","section":"Typescript","content":" Indexed Access Types # We can use an indexed access type to look up a specific property on another type:\ntype Person = { age: number; name: string; alive: boolean }; type Age = Person[\u0026#34;age\u0026#34;]; The indexing type is itself a type, so we can use unions, keyof, or other types entirely:\ntype I1 = Person[\u0026#34;age\u0026#34; | \u0026#34;name\u0026#34;]; type I2 = Person[keyof Person]; type AliveOrName = \u0026#34;alive\u0026#34; | \u0026#34;name\u0026#34;; type I3 = Person[AliveOrName]; You\u0026rsquo;ll even see an error if you try to index a property that doesn\u0026rsquo;t exist:\ntype I1 = Person[\u0026#34;alve\u0026#34;]; Another example of indexing with an arbitrary type is using number to get the type of an array\u0026rsquo;s elements. We can combine this with typeof to conveniently capture the element type of an array literal:\nconst MyArray = [ { name: \u0026#34;Alice\u0026#34;, age: 15 }, { name: \u0026#34;Bob\u0026#34;, age: 23 }, { name: \u0026#34;Eve\u0026#34;, age: 38 }, ]; type Person = typeof MyArray[number]; type Age = typeof MyArray[number][\u0026#34;age\u0026#34;]; // Or type Age2 = Person[\u0026#34;age\u0026#34;]; You can only use types when indexing, meaning you can\u0026rsquo;t use a const to make a variable reference:\nconst key = \u0026#34;age\u0026#34;; type Age = Person[key]; However, you can use a type alias for a similar style of refactor:\ntype key = \u0026#34;age\u0026#34;; type Age = Person[key]; ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html{._attribution-link} :::\n"},{"id":282,"href":"/docs/references/languages/typescript/integrating-with-build-tools/","title":"Integrating With Build Tools","section":"Typescript","content":" Integrating with Build Tools # Babel # Install # npm install @babel/cli @babel/core @babel/preset-typescript --save-dev .babelrc # { \u0026#34;presets\u0026#34;: [\u0026#34;@babel/preset-typescript\u0026#34;] } Using Command Line Interface # ./node_modules/.bin/babel --out-file bundle.js src/index.ts package.json # { \u0026#34;scripts\u0026#34;: { \u0026#34;build\u0026#34;: \u0026#34;babel --out-file bundle.js main.ts\u0026#34; }, } Execute Babel from the command line # npm run build Browserify # Install # npm install tsify Using Command Line Interface # browserify main.ts -p [ tsify --noImplicitAny ] \u0026gt; bundle.js Using API # var browserify = require(\u0026#34;browserify\u0026#34;); var tsify = require(\u0026#34;tsify\u0026#34;); browserify() .add(\u0026#34;main.ts\u0026#34;) .plugin(\u0026#34;tsify\u0026#34;, { noImplicitAny: true }) .bundle() .pipe(process.stdout); More details: smrq/tsify\nGrunt # Install # npm install grunt-ts Basic Gruntfile.js # module.exports = function (grunt) { grunt.initConfig({ ts: { default: { src: [\u0026#34;**/*.ts\u0026#34;, \u0026#34;!node_modules/**/*.ts\u0026#34;], }, }, }); grunt.loadNpmTasks(\u0026#34;grunt-ts\u0026#34;); grunt.registerTask(\u0026#34;default\u0026#34;, [\u0026#34;ts\u0026#34;]); }; More details: TypeStrong/grunt-ts\nGulp # Install # npm install gulp-typescript Basic gulpfile.js # var gulp = require(\u0026#34;gulp\u0026#34;); var ts = require(\u0026#34;gulp-typescript\u0026#34;); gulp.task(\u0026#34;default\u0026#34;, function () { var tsResult = gulp.src(\u0026#34;src/*.ts\u0026#34;).pipe( ts({ noImplicitAny: true, out: \u0026#34;output.js\u0026#34;, }) ); return tsResult.js.pipe(gulp.dest(\u0026#34;built/local\u0026#34;)); }); More details: ivogabe/gulp-typescript\nJspm # Install # npm install -g jspm@beta Note: Currently TypeScript support in jspm is in 0.16beta\nMore details: TypeScriptSamples/jspm\nMSBuild # Update project file to include locally installed Microsoft.TypeScript.Default.props (at the top) and Microsoft.TypeScript.targets (at the bottom) files:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Project ToolsVersion=\u0026#34;4.0\u0026#34; DefaultTargets=\u0026#34;Build\u0026#34; xmlns=\u0026#34;http://schemas.microsoft.com/developer/msbuild/2003\u0026#34;\u0026gt; \u0026lt;!-- Include default props at the top --\u0026gt; \u0026lt;Import Project=\u0026#34;$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.Default.props\u0026#34; Condition=\u0026#34;Exists(\u0026#39;$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.Default.props\u0026#39;)\u0026#34; /\u0026gt; \u0026lt;!-- TypeScript configurations go here --\u0026gt; \u0026lt;PropertyGroup Condition=\u0026#34;\u0026#39;$(Configuration)\u0026#39; == \u0026#39;Debug\u0026#39;\u0026#34;\u0026gt; \u0026lt;TypeScriptRemoveComments\u0026gt;false\u0026lt;/TypeScriptRemoveComments\u0026gt; \u0026lt;TypeScriptSourceMap\u0026gt;true\u0026lt;/TypeScriptSourceMap\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;PropertyGroup Condition=\u0026#34;\u0026#39;$(Configuration)\u0026#39; == \u0026#39;Release\u0026#39;\u0026#34;\u0026gt; \u0026lt;TypeScriptRemoveComments\u0026gt;true\u0026lt;/TypeScriptRemoveComments\u0026gt; \u0026lt;TypeScriptSourceMap\u0026gt;false\u0026lt;/TypeScriptSourceMap\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;!-- Include default targets at the bottom --\u0026gt; \u0026lt;Import Project=\u0026#34;$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.targets\u0026#34; Condition=\u0026#34;Exists(\u0026#39;$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.targets\u0026#39;)\u0026#34; /\u0026gt; \u0026lt;/Project\u0026gt; More details about defining MSBuild compiler options: Setting Compiler Options in MSBuild projects\nNuGet # Right-Click -\u0026gt; Manage NuGet Packages Search for Microsoft.TypeScript.MSBuild Hit Install When install is complete, rebuild! More details can be found at Package Manager Dialog and using nightly builds with NuGet\nRollup # Install # npm install @rollup/plugin-typescript --save-dev Note that both typescript and tslib are peer dependencies of this plugin that need to be installed separately.\nUsage # Create a rollup.config.js configuration file and import the plugin:\n// rollup.config.js import typescript from \u0026#39;@rollup/plugin-typescript\u0026#39;; export default { input: \u0026#39;src/index.ts\u0026#39;, output: { dir: \u0026#39;output\u0026#39;, format: \u0026#39;cjs\u0026#39; }, plugins: [typescript()] }; Svelte Compiler # Install # npm install --save-dev svelte-preprocess Note that typescript is an optional peer dependencies of this plugin and needs to be installed separately. tslib is not provided either.\nYou may also consider svelte-check for CLI type checking.\nUsage # Create a svelte.config.js configuration file and import the plugin:\n// svelte.config.js import preprocess from \u0026#39;svelte-preprocess\u0026#39;; const config = { // Consult https://github.com/sveltejs/svelte-preprocess // for more information about preprocessors preprocess: preprocess() }; export default config; You can now specify that script blocks are written in TypeScript:\n\u0026lt;script lang=\u0026#34;ts\u0026#34;\u0026gt; Vite # Vite supports importing .ts files out-of-the-box. It only performs transpilation and not type checking. It also requires that some compilerOptions have certain values. See the Vite docs for more details.\nWebpack # Install # npm install ts-loader --save-dev Basic webpack.config.js when using Webpack 5 or 4 # const path = require(\u0026#39;path\u0026#39;); module.exports = { entry: \u0026#39;./src/index.ts\u0026#39;, module: { rules: [ { test: /\\.tsx?$/, use: \u0026#39;ts-loader\u0026#39;, exclude: /node_modules/, }, ], }, resolve: { extensions: [\u0026#39;.tsx\u0026#39;, \u0026#39;.ts\u0026#39;, \u0026#39;.js\u0026#39;], }, output: { filename: \u0026#39;bundle.js\u0026#39;, path: path.resolve(__dirname, \u0026#39;dist\u0026#39;), }, }; See more details on ts-loader here.\nAlternatives:\nawesome-typescript-loader ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/integrating-with-build-tools.html{._attribution-link} :::\n"},{"id":283,"href":"/docs/references/languages/typescript/interfaces/","title":"Interfaces","section":"Typescript","content":" Interfaces # ::: {#deprecated-content .deprecated}\nThis handbook page has been replaced, go to the new page{.deprecation-redirect-link}\n::: One of TypeScript\u0026rsquo;s core principles is that type checking focuses on the shape that values have. This is sometimes called \u0026ldquo;duck typing\u0026rdquo; or \u0026ldquo;structural subtyping\u0026rdquo;. In TypeScript, interfaces fill the role of naming these types, and are a powerful way of defining contracts within your code as well as contracts with code outside of your project.\nOur First Interface # The easiest way to see how interfaces work is to start with a simple example:\nfunction printLabel(labeledObj: { label: string }) { console.log(labeledObj.label); } let myObj = { size: 10, label: \u0026#34;Size 10 Object\u0026#34; }; printLabel(myObj); The type checker checks the call to printLabel. The printLabel function has a single parameter that requires that the object passed in has a property called label of type string. Notice that our object actually has more properties than this, but the compiler only checks that at least the ones required are present and match the types required. There are some cases where TypeScript isn\u0026rsquo;t as lenient, which we\u0026rsquo;ll cover in a bit.\nWe can write the same example again, this time using an interface to describe the requirement of having the label property that is a string:\ninterface LabeledValue { label: string; } function printLabel(labeledObj: LabeledValue) { console.log(labeledObj.label); } let myObj = { size: 10, label: \u0026#34;Size 10 Object\u0026#34; }; printLabel(myObj); The interface LabeledValue is a name we can now use to describe the requirement in the previous example. It still represents having a single property called label that is of type string. Notice we didn\u0026rsquo;t have to explicitly say that the object we pass to printLabel implements this interface like we might have to in other languages. Here, it\u0026rsquo;s only the shape that matters. If the object we pass to the function meets the requirements listed, then it\u0026rsquo;s allowed.\nIt\u0026rsquo;s worth pointing out that the type checker does not require that these properties come in any sort of order, only that the properties the interface requires are present and have the required type.\nOptional Properties # Not all properties of an interface may be required. Some exist under certain conditions or may not be there at all. These optional properties are popular when creating patterns like \u0026ldquo;option bags\u0026rdquo; where you pass an object to a function that only has a couple of properties filled in.\nHere\u0026rsquo;s an example of this pattern:\ninterface SquareConfig { color?: string; width?: number; } function createSquare(config: SquareConfig): { color: string; area: number } { let newSquare = { color: \u0026#34;white\u0026#34;, area: 100 }; if (config.color) { newSquare.color = config.color; } if (config.width) { newSquare.area = config.width * config.width; } return newSquare; } let mySquare = createSquare({ color: \u0026#34;black\u0026#34; }); Interfaces with optional properties are written similar to other interfaces, with each optional property denoted by a ? at the end of the property name in the declaration.\nThe advantage of optional properties is that you can describe these possibly available properties while still also preventing use of properties that are not part of the interface. For example, had we mistyped the name of the color property in createSquare, we would get an error message letting us know:\ninterface SquareConfig { color?: string; width?: number; } function createSquare(config: SquareConfig): { color: string; area: number } { let newSquare = { color: \u0026#34;white\u0026#34;, area: 100 }; if (config.clor) { // Error: Property \u0026#39;clor\u0026#39; does not exist on type \u0026#39;SquareConfig\u0026#39; newSquare.color = config.clor; } if (config.width) { newSquare.area = config.width * config.width; } return newSquare; } let mySquare = createSquare({ color: \u0026#34;black\u0026#34; }); Readonly properties # Some properties should only be modifiable when an object is first created. You can specify this by putting readonly before the name of the property:\ninterface Point { readonly x: number; readonly y: number; } You can construct a Point by assigning an object literal. After the assignment, x and y can\u0026rsquo;t be changed.\nlet p1: Point = { x: 10, y: 20 }; p1.x = 5; // error! TypeScript comes with a ReadonlyArray\u0026lt;T\u0026gt; type that is the same as Array\u0026lt;T\u0026gt; with all mutating methods removed, so you can make sure you don\u0026rsquo;t change your arrays after creation:\nlet a: number[] = [1, 2, 3, 4]; let ro: ReadonlyArray\u0026lt;number\u0026gt; = a; ro[0] = 12; // error! ro.push(5); // error! ro.length = 100; // error! a = ro; // error! On the last line of the snippet you can see that even assigning the entire ReadonlyArray back to a normal array is illegal. You can still override it with a type assertion, though:\nlet a: number[] = [1, 2, 3, 4]; let ro: ReadonlyArray\u0026lt;number\u0026gt; = a; a = ro as number[]; readonly vs const # The easiest way to remember whether to use readonly or const is to ask whether you\u0026rsquo;re using it on a variable or a property. Variables use const whereas properties use readonly.\nExcess Property Checks # In our first example using interfaces, TypeScript lets us pass { size: number; label: string; } to something that only expected a { label: string; }. We also just learned about optional properties, and how they\u0026rsquo;re useful when describing so-called \u0026ldquo;option bags\u0026rdquo;.\nHowever, combining the two naively would allow an error to sneak in. For example, taking our last example using createSquare:\ninterface SquareConfig { color?: string; width?: number; } function createSquare(config: SquareConfig): { color: string; area: number } { return { color: config.color || \u0026#34;red\u0026#34;, area: config.width ? config.width * config.width : 20, }; } let mySquare = createSquare({ colour: \u0026#34;red\u0026#34;, width: 100 }); Notice the given argument to createSquare is spelled colour instead of color. In plain JavaScript, this sort of thing fails silently.\nYou could argue that this program is correctly typed, since the width properties are compatible, there\u0026rsquo;s no color property present, and the extra colour property is insignificant.\nHowever, TypeScript takes the stance that there\u0026rsquo;s probably a bug in this code. Object literals get special treatment and undergo excess property checking when assigning them to other variables, or passing them as arguments. If an object literal has any properties that the \u0026ldquo;target type\u0026rdquo; doesn\u0026rsquo;t have, you\u0026rsquo;ll get an error:\nlet mySquare = createSquare({ colour: \u0026#34;red\u0026#34;, width: 100 }); Getting around these checks is actually really simple. The easiest method is to just use a type assertion:\nlet mySquare = createSquare({ width: 100, opacity: 0.5 } as SquareConfig); However, a better approach might be to add a string index signature if you\u0026rsquo;re sure that the object can have some extra properties that are used in some special way. If SquareConfig can have color and width properties with the above types, but could also have any number of other properties, then we could define it like so:\ninterface SquareConfig { color?: string; width?: number; [propName: string]: any; } We\u0026rsquo;ll discuss index signatures in a bit, but here we\u0026rsquo;re saying a SquareConfig can have any number of properties, and as long as they aren\u0026rsquo;t color or width, their types don\u0026rsquo;t matter.\nOne final way to get around these checks, which might be a bit surprising, is to assign the object to another variable: Since squareOptions won\u0026rsquo;t undergo excess property checks, the compiler won\u0026rsquo;t give you an error.\nlet squareOptions = { colour: \u0026#34;red\u0026#34;, width: 100 }; let mySquare = createSquare(squareOptions); The above workaround will work as long as you have a common property between squareOptions and SquareConfig. In this example, it was the property width. It will however, fail if the variable does not have any common object property. For example:\nlet squareOptions = { colour: \u0026#34;red\u0026#34; }; let mySquare = createSquare(squareOptions); Keep in mind that for simple code like above, you probably shouldn\u0026rsquo;t be trying to \u0026ldquo;get around\u0026rdquo; these checks. For more complex object literals that have methods and hold state, you might need to keep these techniques in mind, but a majority of excess property errors are actually bugs. That means if you\u0026rsquo;re running into excess property checking problems for something like option bags, you might need to revise some of your type declarations. In this instance, if it\u0026rsquo;s okay to pass an object with both a color or colour property to createSquare, you should fix up the definition of SquareConfig to reflect that.\nFunction Types # Interfaces are capable of describing the wide range of shapes that JavaScript objects can take. In addition to describing an object with properties, interfaces are also capable of describing function types.\nTo describe a function type with an interface, we give the interface a call signature. This is like a function declaration with only the parameter list and return type given. Each parameter in the parameter list requires both name and type.\ninterface SearchFunc { (source: string, subString: string): boolean; } Once defined, we can use this function type interface like we would other interfaces. Here, we show how you can create a variable of a function type and assign it a function value of the same type.\nlet mySearch: SearchFunc; mySearch = function (source: string, subString: string): boolean { let result = source.search(subString); return result \u0026gt; -1; }; For function types to correctly type check, the names of the parameters do not need to match. We could have, for example, written the above example like this:\nlet mySearch: SearchFunc; mySearch = function (src: string, sub: string): boolean { let result = src.search(sub); return result \u0026gt; -1; }; Function parameters are checked one at a time, with the type in each corresponding parameter position checked against each other. If you do not want to specify types at all, TypeScript\u0026rsquo;s contextual typing can infer the argument types since the function value is assigned directly to a variable of type SearchFunc. Here, also, the return type of our function expression is implied by the values it returns (here false and true).\nlet mySearch: SearchFunc; mySearch = function (src, sub) { let result = src.search(sub); return result \u0026gt; -1; }; Had the function expression returned numbers or strings, the type checker would have made an error that indicates return type doesn\u0026rsquo;t match the return type described in the SearchFunc interface.\nlet mySearch: SearchFunc; mySearch = function (src, sub) { let result = src.search(sub); return \u0026#34;string\u0026#34;; }; Indexable Types # Similarly to how we can use interfaces to describe function types, we can also describe types that we can \u0026ldquo;index into\u0026rdquo; like a[10], or ageMap[\u0026quot;daniel\u0026quot;]. Indexable types have an index signature that describes the types we can use to index into the object, along with the corresponding return types when indexing.\nLet\u0026rsquo;s take an example:\ninterface StringArray { [index: number]: string; } let myArray: StringArray; myArray = [\u0026#34;Bob\u0026#34;, \u0026#34;Fred\u0026#34;]; let myStr: string = myArray[0]; Above, we have a StringArray interface that has an index signature. This index signature states that when a StringArray is indexed with a number, it will return a string.\nThere are four types of supported index signatures: string, number, symbol and template strings. It is possible to support many types of indexers, but the type returned from a numeric indexer must be a subtype of the type returned from the string indexer.\nThis is because when indexing with a number, JavaScript will actually convert that to a string before indexing into an object. That means that indexing with 100 (a number) is the same thing as indexing with \u0026quot;100\u0026quot; (a string), so the two need to be consistent.\ninterface Animal { name: string; } interface Dog extends Animal { breed: string; } // Error: indexing with a numeric string might get you a completely separate type of Animal! interface NotOkay { [x: number]: Animal; [x: string]: Dog; } While string index signatures are a powerful way to describe the \u0026ldquo;dictionary\u0026rdquo; pattern, they also enforce that all properties match their return type. This is because a string index declares that obj.property is also available as obj[\u0026quot;property\u0026quot;]. In the following example, name\u0026rsquo;s type does not match the string index\u0026rsquo;s type, and the type checker gives an error:\ninterface NumberDictionary { [index: string]: number; length: number; // ok, length is a number name: string; // error, the type of \u0026#39;name\u0026#39; is not a subtype of the indexer } However, properties of different types are acceptable if the index signature is a union of the property types:\ninterface NumberOrStringDictionary { [index: string]: number | string; length: number; // ok, length is a number name: string; // ok, name is a string } Finally, you can make index signatures readonly in order to prevent assignment to their indices:\ninterface ReadonlyStringArray { readonly [index: number]: string; } let myArray: ReadonlyStringArray = [\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;]; myArray[2] = \u0026#34;Mallory\u0026#34;; // error! You can\u0026rsquo;t set myArray[2] because the index signature is readonly.\nIndexable Types with Template Strings # A template string can be used to indicate that a particular pattern is allowed, but not all. For example, a HTTP headers object may have a set list of known headers and support any custom defined properties which are prefixed with x-.\ninterface HeadersResponse { \u0026#34;content-type\u0026#34;: string, date: string, \u0026#34;content-length\u0026#34;: string // Permit any property starting with \u0026#39;x-\u0026#39;. [headerName: `x-${string}`]: string; } function handleResponse(r: HeadersResponse) { // Handle known, and x- prefixed const type = r[\u0026#34;content-type\u0026#34;] const poweredBy = r[\u0026#34;x-powered-by\u0026#34;] // Unknown keys without the prefix raise errors const origin = r.origin } Class Types # Implementing an interface # One of the most common uses of interfaces in languages like C# and Java, that of explicitly enforcing that a class meets a particular contract, is also possible in TypeScript.\ninterface ClockInterface { currentTime: Date; } class Clock implements ClockInterface { currentTime: Date = new Date(); constructor(h: number, m: number) {} } You can also describe methods in an interface that are implemented in the class, as we do with setTime in the below example:\ninterface ClockInterface { currentTime: Date; setTime(d: Date): void; } class Clock implements ClockInterface { currentTime: Date = new Date(); setTime(d: Date) { this.currentTime = d; } constructor(h: number, m: number) {} } Interfaces describe the public side of the class, rather than both the public and private side. This prohibits you from using them to check that a class also has particular types for the private side of the class instance.\nDifference between the static and instance sides of classes # When working with classes and interfaces, it helps to keep in mind that a class has two types: the type of the static side and the type of the instance side. You may notice that if you create an interface with a construct signature and try to create a class that implements this interface you get an error:\ninterface ClockConstructor { new (hour: number, minute: number); } class Clock implements ClockConstructor { currentTime: Date; constructor(h: number, m: number) {} } This is because when a class implements an interface, only the instance side of the class is checked. Since the constructor sits in the static side, it is not included in this check.\nInstead, you would need to work with the static side of the class directly. In this example, we define two interfaces, ClockConstructor for the constructor and ClockInterface for the instance methods. Then, for convenience, we define a constructor function createClock that creates instances of the type that is passed to it:\ninterface ClockConstructor { new (hour: number, minute: number): ClockInterface; } interface ClockInterface { tick(): void; } function createClock( ctor: ClockConstructor, hour: number, minute: number ): ClockInterface { return new ctor(hour, minute); } class DigitalClock implements ClockInterface { constructor(h: number, m: number) {} tick() { console.log(\u0026#34;beep beep\u0026#34;); } } class AnalogClock implements ClockInterface { constructor(h: number, m: number) {} tick() { console.log(\u0026#34;tick tock\u0026#34;); } } let digital = createClock(DigitalClock, 12, 17); let analog = createClock(AnalogClock, 7, 32); Because createClock\u0026rsquo;s first parameter is of type ClockConstructor, in createClock(AnalogClock, 7, 32), it checks that AnalogClock has the correct constructor signature.\nAnother simple way is to use class expressions:\ninterface ClockConstructor { new (hour: number, minute: number): ClockInterface; } interface ClockInterface { tick(): void; } const Clock: ClockConstructor = class Clock implements ClockInterface { constructor(h: number, m: number) {} tick() { console.log(\u0026#34;beep beep\u0026#34;); } }; let clock = new Clock(12, 17); clock.tick(); Extending Interfaces # Like classes, interfaces can extend each other. This allows you to copy the members of one interface into another, which gives you more flexibility in how you separate your interfaces into reusable components.\ninterface Shape { color: string; } interface Square extends Shape { sideLength: number; } let square = {} as Square; square.color = \u0026#34;blue\u0026#34;; square.sideLength = 10; An interface can extend multiple interfaces, creating a combination of all of the interfaces.\ninterface Shape { color: string; } interface PenStroke { penWidth: number; } interface Square extends Shape, PenStroke { sideLength: number; } let square = {} as Square; square.color = \u0026#34;blue\u0026#34;; square.sideLength = 10; square.penWidth = 5.0; Hybrid Types # As we mentioned earlier, interfaces can describe the rich types present in real world JavaScript. Because of JavaScript\u0026rsquo;s dynamic and flexible nature, you may occasionally encounter an object that works as a combination of some of the types described above.\nOne such example is an object that acts as both a function and an object, with additional properties:\ninterface Counter { (start: number): string; interval: number; reset(): void; } function getCounter(): Counter { let counter = function (start: number) {} as Counter; counter.interval = 123; counter.reset = function () {}; return counter; } let c = getCounter(); c(10); c.reset(); c.interval = 5.0; When interacting with 3rd-party JavaScript, you may need to use patterns like the above to fully describe the shape of the type.\nInterfaces Extending Classes # When an interface type extends a class type it inherits the members of the class but not their implementations. It is as if the interface had declared all of the members of the class without providing an implementation. Interfaces inherit even the private and protected members of a base class. This means that when you create an interface that extends a class with private or protected members, that interface type can only be implemented by that class or a subclass of it.\nThis is useful when you have a large inheritance hierarchy, but want to specify that your code works with only subclasses that have certain properties. The subclasses don\u0026rsquo;t have to be related besides inheriting from the base class. For example:\nclass Control { private state: any; } interface SelectableControl extends Control { select(): void; } class Button extends Control implements SelectableControl { select() {} } class TextBox extends Control { select() {} } class ImageControl implements SelectableControl { private state: any; select() {} } In the above example, SelectableControl contains all of the members of Control, including the private state property. Since state is a private member it is only possible for descendants of Control to implement SelectableControl. This is because only descendants of Control will have a state private member that originates in the same declaration, which is a requirement for private members to be compatible.\nWithin the Control class it is possible to access the state private member through an instance of SelectableControl. Effectively, a SelectableControl acts like a Control that is known to have a select method. The Button and TextBox classes are subtypes of SelectableControl (because they both inherit from Control and have a select method). The ImageControl class has its own state private member rather than extending Control, so it cannot implement SelectableControl.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/interfaces.html{._attribution-link} :::\n"},{"id":284,"href":"/docs/references/languages/typescript/intro-to-js-ts/","title":"Intro to Js Ts","section":"Typescript","content":" JS Projects Utilizing TypeScript # The type system in TypeScript has different levels of strictness when working with a codebase:\nA type-system based only on inference with JavaScript code Incremental typing in JavaScript via JSDoc Using // @ts-check in a JavaScript file TypeScript code TypeScript with strict enabled Each step represents a move towards a safer type-system, but not every project needs that level of verification.\nTypeScript with JavaScript # This is when you use an editor which uses TypeScript to provide tooling like auto-complete, jump to symbol and refactoring tools like rename. The homepage has a list of editors which have TypeScript plugins.\nProviding Type Hints in JS via JSDoc # In a .js file, types can often be inferred. When types can\u0026rsquo;t be inferred, they can be specified using JSDoc syntax.\nJSDoc annotations come before a declaration will be used to set the type of that declaration. For example:\n/** @type {number} */ var x; x = 0; // OK x = false; // OK?! You can find the full list of supported JSDoc patterns in JSDoc Supported Types.\n@ts-check # The last line of the previous code sample would raise an error in TypeScript, but it doesn\u0026rsquo;t by default in a JS project. To enable errors in your JavaScript files add: // @ts-check to the first line in your .js files to have TypeScript raise it as an error.\n// @ts-check /** @type {number} */ var x; x = 0; // OK x = false; // Not OK If you have a lot of JavaScript files you want to add errors to then you can switch to using a jsconfig.json. You can skip checking some files by adding a // @ts-nocheck comment to files.\nTypeScript may offer you errors which you disagree with, in those cases you can ignore errors on specific lines by adding // @ts-ignore or // @ts-expect-error on the preceding line.\n// @ts-check /** @type {number} */ var x; x = 0; // OK // @ts-expect-error x = false; // Not OK To learn more about how JavaScript is interpreted by TypeScript read How TS Type Checks JS\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/intro-to-js-ts.html{._attribution-link} :::\n"},{"id":285,"href":"/docs/references/languages/typescript/intro/","title":"Intro","section":"Typescript","content":" The TypeScript Handbook # About this Handbook # Over 20 years after its introduction to the programming community, JavaScript is now one of the most widespread cross-platform languages ever created. Starting as a small scripting language for adding trivial interactivity to webpages, JavaScript has grown to be a language of choice for both frontend and backend applications of every size. While the size, scope, and complexity of programs written in JavaScript has grown exponentially, the ability of the JavaScript language to express the relationships between different units of code has not. Combined with JavaScript\u0026rsquo;s rather peculiar runtime semantics, this mismatch between language and program complexity has made JavaScript development a difficult task to manage at scale.\nThe most common kinds of errors that programmers write can be described as type errors: a certain kind of value was used where a different kind of value was expected. This could be due to simple typos, a failure to understand the API surface of a library, incorrect assumptions about runtime behavior, or other errors. The goal of TypeScript is to be a static typechecker for JavaScript programs - in other words, a tool that runs before your code runs (static) and ensures that the types of the program are correct (typechecked).\nIf you are coming to TypeScript without a JavaScript background, with the intention of TypeScript being your first language, we recommend you first start reading the documentation on either the Microsoft Learn JavaScript tutorial or read JavaScript at the Mozilla Web Docs. If you have experience in other languages, you should be able to pick up JavaScript syntax quite quickly by reading the handbook.\nHow is this Handbook Structured # The handbook is split into two sections:\nThe Handbook\nThe TypeScript Handbook is intended to be a comprehensive document that explains TypeScript to everyday programmers. You can read the handbook by going from top to bottom in the left-hand navigation.\nYou should expect each chapter or page to provide you with a strong understanding of the given concepts. The TypeScript Handbook is not a complete language specification, but it is intended to be a comprehensive guide to all of the language\u0026rsquo;s features and behaviors.\nA reader who completes the walkthrough should be able to:\nRead and understand commonly-used TypeScript syntax and patterns Explain the effects of important compiler options Correctly predict type system behavior in most cases In the interests of clarity and brevity, the main content of the Handbook will not explore every edge case or minutiae of the features being covered. You can find more details on particular concepts in the reference articles.\nReference Files\nThe reference section below the handbook in the navigation is built to provide a richer understanding of how a particular part of TypeScript works. You can read it top-to-bottom, but each section aims to provide a deeper explanation of a single concept - meaning there is no aim for continuity.\nNon-Goals # The Handbook is also intended to be a concise document that can be comfortably read in a few hours. Certain topics won\u0026rsquo;t be covered in order to keep things short.\nSpecifically, the Handbook does not fully introduce core JavaScript basics like functions, classes, and closures. Where appropriate, we\u0026rsquo;ll include links to background reading that you can use to read up on those concepts.\nThe Handbook also isn\u0026rsquo;t intended to be a replacement for a language specification. In some cases, edge cases or formal descriptions of behavior will be skipped in favor of high-level, easier-to-understand explanations. Instead, there are separate reference pages that more precisely and formally describe many aspects of TypeScript\u0026rsquo;s behavior. The reference pages are not intended for readers unfamiliar with TypeScript, so they may use advanced terminology or reference topics you haven\u0026rsquo;t read about yet.\nFinally, the Handbook won\u0026rsquo;t cover how TypeScript interacts with other tools, except where necessary. Topics like how to configure TypeScript with webpack, rollup, parcel, react, babel, closure, lerna, rush, bazel, preact, vue, angular, svelte, jquery, yarn, or npm are out of scope - you can find these resources elsewhere on the web.\nGet Started # Before getting started with The Basics, we recommend reading one of the following introductory pages. These introductions are intended to highlight key similarities and differences between TypeScript and your favored programming language, and clear up common misconceptions specific to those languages.\nTypeScript for the New Programmer TypeScript for JavaScript Programmers TypeScript for Java/C# Programmers TypeScript for Functional Programmers Otherwise, jump to The Basics.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/intro.html{._attribution-link} :::\n"},{"id":286,"href":"/docs/references/languages/typescript/iterators-and-generators/","title":"Iterators and Generators","section":"Typescript","content":" Iterators and Generators # Iterables # An object is deemed iterable if it has an implementation for the Symbol.iterator property. Some built-in types like Array, Map, Set, String, Int32Array, Uint32Array, etc. have their Symbol.iterator property already implemented. Symbol.iterator function on an object is responsible for returning the list of values to iterate on.\nIterable interface # Iterable is a type we can use if we want to take in types listed above which are iterable. Here is an example:\nfunction toArray\u0026lt;X\u0026gt;(xs: Iterable\u0026lt;X\u0026gt;): X[] { return [...xs] } for..of statements # for..of loops over an iterable object, invoking the Symbol.iterator property on the object. Here is a simple for..of loop on an array:\nlet someArray = [1, \u0026#34;string\u0026#34;, false]; for (let entry of someArray) { console.log(entry); // 1, \u0026#34;string\u0026#34;, false } for..of vs. for..in statements # Both for..of and for..in statements iterate over lists; the values iterated on are different though, for..in returns a list of keys on the object being iterated, whereas for..of returns a list of values of the numeric properties of the object being iterated.\nHere is an example that demonstrates this distinction:\nlet list = [4, 5, 6]; for (let i in list) { console.log(i); // \u0026#34;0\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, } for (let i of list) { console.log(i); // 4, 5, 6 } Another distinction is that for..in operates on any object; it serves as a way to inspect properties on this object. for..of on the other hand, is mainly interested in values of iterable objects. Built-in objects like Map and Set implement Symbol.iterator property allowing access to stored values.\nlet pets = new Set([\u0026#34;Cat\u0026#34;, \u0026#34;Dog\u0026#34;, \u0026#34;Hamster\u0026#34;]); pets[\u0026#34;species\u0026#34;] = \u0026#34;mammals\u0026#34;; for (let pet in pets) { console.log(pet); // \u0026#34;species\u0026#34; } for (let pet of pets) { console.log(pet); // \u0026#34;Cat\u0026#34;, \u0026#34;Dog\u0026#34;, \u0026#34;Hamster\u0026#34; } Code generation # Targeting ES5 and ES3 # When targeting an ES5 or ES3-compliant engine, iterators are only allowed on values of Array type. It is an error to use for..of loops on non-Array values, even if these non-Array values implement the Symbol.iterator property.\nThe compiler will generate a simple for loop for a for..of loop, for instance:\nlet numbers = [1, 2, 3]; for (let num of numbers) { console.log(num); } will be generated as:\nvar numbers = [1, 2, 3]; for (var _i = 0; _i \u0026lt; numbers.length; _i++) { var num = numbers[_i]; console.log(num); } Targeting ECMAScript 2015 and higher # When targeting an ECMAScript 2015-compliant engine, the compiler will generate for..of loops to target the built-in iterator implementation in the engine.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/iterators-and-generators.html{._attribution-link} :::\n"},{"id":287,"href":"/docs/references/languages/typescript/jsdoc-supported-types/","title":"Jsdoc Supported Types","section":"Typescript","content":" JSDoc Reference # The list below outlines which constructs are currently supported when using JSDoc annotations to provide type information in JavaScript files.\nNote any tags which are not explicitly listed below (such as @async) are not yet supported.\nTypes # @type @param (or @arg or @argument) @returns (or @return) @typedef @callback @template Classes # Property Modifiers @public, @private, @protected, @readonly @override @extends (or @augments) @implements @class (or @constructor) @this Documentation # Documentation tags work in both TypeScript and JavaScript.\n@deprecated @see @link Other # @enum @author Other supported patterns Unsupported patterns Unsupported tags The meaning is usually the same, or a superset, of the meaning of the tag given at jsdoc.app. The code below describes the differences and gives some example usage of each tag.\nNote: You can use the playground to explore JSDoc support.\nTypes # @type # You can reference types with the \u0026ldquo;@type\u0026rdquo; tag. The type can be:\nPrimitive, like string or number. Declared in a TypeScript declaration, either global or imported. Declared in a JSDoc @typedef tag. You can use most JSDoc type syntax and any TypeScript syntax, from the most basic like string to the most advanced, like conditional types.\n/** * @type {string} */ var s; /** @type {Window} */ var win; /** @type {PromiseLike\u0026lt;string\u0026gt;} */ var promisedString; // You can specify an HTML Element with DOM properties /** @type {HTMLElement} */ var myElement = document.querySelector(selector); element.dataset.myData = \u0026#34;\u0026#34;; @type can specify a union type \u0026mdash; for example, something can be either a string or a boolean.\n/** * @type {string | boolean} */ var sb; You can specify array types using a variety of syntaxes:\n/** @type {number[]} */ var ns; /** @type {Array.\u0026lt;number\u0026gt;} */ var jsdoc; /** @type {Array\u0026lt;number\u0026gt;} */ var nas; You can also specify object literal types. For example, an object with properties \u0026lsquo;a\u0026rsquo; (string) and \u0026lsquo;b\u0026rsquo; (number) uses the following syntax:\n/** @type {{ a: string, b: number }} */ var var9; You can specify map-like and array-like objects using string and number index signatures, using either standard JSDoc syntax or TypeScript syntax.\n/** * A map-like object that maps arbitrary `string` properties to `number`s. * * @type {Object.\u0026lt;string, number\u0026gt;} */ var stringToNumber; /** @type {Object.\u0026lt;number, object\u0026gt;} */ var arrayLike; The preceding two types are equivalent to the TypeScript types { [x: string]: number } and { [x: number]: any }. The compiler understands both syntaxes.\nYou can specify function types using either TypeScript or Google Closure syntax:\n/** @type {function(string, boolean): number} Closure syntax */ var sbn; /** @type {(s: string, b: boolean) =\u0026gt; number} TypeScript syntax */ var sbn2; Or you can just use the unspecified Function type:\n/** @type {Function} */ var fn7; /** @type {function} */ var fn6; Other types from Closure also work:\n/** * @type {*} - can be \u0026#39;any\u0026#39; type */ var star; /** * @type {?} - unknown type (same as \u0026#39;any\u0026#39;) */ var question; Casts # TypeScript borrows cast syntax from Google Closure. This lets you cast types to other types by adding a @type tag before any parenthesized expression.\n/** * @type {number | string} */ var numberOrString = Math.random() \u0026lt; 0.5 ? \u0026#34;hello\u0026#34; : 100; var typeAssertedNumber = /** @type {number} */ (numberOrString); You can even cast to const just like TypeScript:\nlet one = /** @type {const} */(1); Import types # You can import declarations from other files using import types. This syntax is TypeScript-specific and differs from the JSDoc standard:\n// @filename: types.d.ts export type Pet = { name: string, }; // @filename: main.js /** * @param {import(\u0026#34;./types\u0026#34;).Pet} p */ function walk(p) { console.log(`Walking ${p.name}...`); } import types can be used in type alias declarations:\n/** * @typedef {import(\u0026#34;./types\u0026#34;).Pet} Pet */ /** * @type {Pet} */ var myPet; myPet.name; import types can be used to get the type of a value from a module if you don\u0026rsquo;t know the type, or if it has a large type that is annoying to type:\n/** * @type {typeof import(\u0026#34;./accounts\u0026#34;).userAccount} */ var x = require(\u0026#34;./accounts\u0026#34;).userAccount; @param and @returns # @param uses the same type syntax as @type, but adds a parameter name. The parameter may also be declared optional by surrounding the name with square brackets:\n// Parameters may be declared in a variety of syntactic forms /** * @param {string} p1 - A string param. * @param {string=} p2 - An optional param (Google Closure syntax) * @param {string} [p3] - Another optional param (JSDoc syntax). * @param {string} [p4=\u0026#34;test\u0026#34;] - An optional param with a default value * @returns {string} This is the result */ function stringsStringStrings(p1, p2, p3, p4) { // TODO } Likewise, for the return type of a function:\n/** * @return {PromiseLike\u0026lt;string\u0026gt;} */ function ps() {} /** * @returns {{ a: string, b: number }} - May use \u0026#39;@returns\u0026#39; as well as \u0026#39;@return\u0026#39; */ function ab() {} @typedef, @callback, and @param # You can define complex types with @typedef. Similar syntax works with @param.\n/** * @typedef {Object} SpecialType - creates a new type named \u0026#39;SpecialType\u0026#39; * @property {string} prop1 - a string property of SpecialType * @property {number} prop2 - a number property of SpecialType * @property {number=} prop3 - an optional number property of SpecialType * @prop {number} [prop4] - an optional number property of SpecialType * @prop {number} [prop5=42] - an optional number property of SpecialType with default */ /** @type {SpecialType} */ var specialTypeObject; specialTypeObject.prop3; You can use either object or Object on the first line.\n/** * @typedef {object} SpecialType1 - creates a new type named \u0026#39;SpecialType\u0026#39; * @property {string} prop1 - a string property of SpecialType * @property {number} prop2 - a number property of SpecialType * @property {number=} prop3 - an optional number property of SpecialType */ /** @type {SpecialType1} */ var specialTypeObject1; @param allows a similar syntax for one-off type specifications. Note that the nested property names must be prefixed with the name of the parameter:\n/** * @param {Object} options - The shape is the same as SpecialType above * @param {string} options.prop1 * @param {number} options.prop2 * @param {number=} options.prop3 * @param {number} [options.prop4] * @param {number} [options.prop5=42] */ function special(options) { return (options.prop4 || 1001) + options.prop5; } @callback is similar to @typedef, but it specifies a function type instead of an object type:\n/** * @callback Predicate * @param {string} data * @param {number} [index] * @returns {boolean} */ /** @type {Predicate} */ const ok = (s) =\u0026gt; !(s.length % 2); Of course, any of these types can be declared using TypeScript syntax in a single-line @typedef:\n/** @typedef {{ prop1: string, prop2: string, prop3?: number }} SpecialType */ /** @typedef {(data: string, index?: number) =\u0026gt; boolean} Predicate */ @template # You can declare type parameters with the @template tag. This lets you make functions, classes, or types that are generic:\n/** * @template T * @param {T} x - A generic parameter that flows through to the return type * @returns {T} */ function id(x) { return x; } const a = id(\u0026#34;string\u0026#34;); const b = id(123); const c = id({}); Use comma or multiple tags to declare multiple type parameters:\n/** * @template T,U,V * @template W,X */ You can also specify a type constraint before the type parameter name. Only the first type parameter in a list is constrained:\n/** * @template {string} K - K must be a string or string literal * @template {{ serious(): string }} Seriousalizable - must have a serious method * @param {K} key * @param {Seriousalizable} object */ function seriousalize(key, object) { // ???? } Finally, you can specify a default for a type parameter:\n/** @template [T=object] */ class Cache { /** @param {T} initial */ constructor(initial) { } } let c = new Cache() Classes # Classes can be declared as ES6 classes.\nclass C { /** * @param {number} data */ constructor(data) { // property types can be inferred this.name = \u0026#34;foo\u0026#34;; // or set explicitly /** @type {string | null} */ this.title = null; // or simply annotated, if they\u0026#39;re set elsewhere /** @type {number} */ this.size; this.initialize(data); // Should error, initializer expects a string } /** * @param {string} s */ initialize = function (s) { this.size = s.length; }; } var c = new C(0); // C should only be called with new, but // because it is JavaScript, this is allowed and // considered an \u0026#39;any\u0026#39;. var result = C(1); They can also be declared as constructor functions; use @constructor along with @this for this.\nProperty Modifiers # @public, @private, and @protected work exactly like public, private, and protected in TypeScript:\n// @ts-check class Car { constructor() { /** @private */ this.identifier = 100; } printIdentifier() { console.log(this.identifier); } } const c = new Car(); console.log(c.identifier); @public is always implied and can be left off, but means that a property can be reached from anywhere. @private means that a property can only be used within the containing class. @protected means that a property can only be used within the containing class, and all derived subclasses, but not on dissimilar instances of the containing class. @public, @private, and @protected do not work in constructor functions.\n@readonly # The @readonly modifier ensures that a property is only ever written to during initialization.\n// @ts-check class Car { constructor() { /** @readonly */ this.identifier = 100; } printIdentifier() { console.log(this.identifier); } } const c = new Car(); console.log(c.identifier); @override # @override works the same way as in TypeScript; use it on methods that override a method from a base class:\nexport class C { m() { } } class D extends C { /** @override */ m() { } } Set noImplicitOverride: true in tsconfig to check overrides.\n@extends # When JavaScript classes extend a generic base class, there is no JavaScript syntax for passing a type argument. The @extends tag allows this:\n/** * @template T * @extends {Set\u0026lt;T\u0026gt;} */ class SortableSet extends Set { // ... } Note that @extends only works with classes. Currently, there is no way for a constructor function to extend a class.\n@implements # In the same way, there is no JavaScript syntax for implementing a TypeScript interface. The @implements tag works just like in TypeScript:\n/** @implements {Print} */ class TextBook { print() { // TODO } } @constructor # The compiler infers constructor functions based on this-property assignments, but you can make checking stricter and suggestions better if you add a @constructor tag:\n/** * @constructor * @param {number} data */ function C(data) { // property types can be inferred this.name = \u0026#34;foo\u0026#34;; // or set explicitly /** @type {string | null} */ this.title = null; // or simply annotated, if they\u0026#39;re set elsewhere /** @type {number} */ this.size; this.initialize(data); } /** * @param {string} s */ C.prototype.initialize = function (s) { this.size = s.length; }; var c = new C(0); c.size; var result = C(1); Note: Error messages only show up in JS codebases with a JSConfig and checkJs enabled.\nWith @constructor, this is checked inside the constructor function C, so you will get suggestions for the initialize method and an error if you pass it a number. Your editor may also show warnings if you call C instead of constructing it.\nUnfortunately, this means that constructor functions that are also callable cannot use @constructor.\n@this # The compiler can usually figure out the type of this when it has some context to work with. When it doesn\u0026rsquo;t, you can explicitly specify the type of this with @this:\n/** * @this {HTMLElement} * @param {*} e */ function callbackForLater(e) { this.clientHeight = parseInt(e); // should be fine! } Documentation # @deprecated # When a function, method, or property is deprecated you can let users know by marking it with a /** @deprecated */ JSDoc comment. That information is surfaced in completion lists and as a suggestion diagnostic that editors can handle specially. In an editor like VS Code, deprecated values are typically displayed in a strike-through style like this.\n/** @deprecated */ const apiV1 = {}; const apiV2 = {}; apiV; @see # @see lets you link to other names in your program:\ntype Box\u0026lt;T\u0026gt; = { t: T } /** @see Box for implementation details */ type Boxify\u0026lt;T\u0026gt; = { [K in keyof T]: Box\u0026lt;T\u0026gt; }; Some editors will turn Box into a link to make it easy to jump there and back.\n@link # @link is like @see, except that it can be used inside other tags:\ntype Box\u0026lt;T\u0026gt; = { t: T } /** @returns A {@link Box} containing the parameter. */ function box\u0026lt;U\u0026gt;(u: U): Box\u0026lt;U\u0026gt; { return { t: u }; } Other # @enum # The @enum tag allows you to create an object literal whose members are all of a specified type. Unlike most object literals in JavaScript, it does not allow other members. @enum is intended for compatibility with Google Closure\u0026rsquo;s @enum tag.\n/** @enum {number} */ const JSDocState = { BeginningOfLine: 0, SawAsterisk: 1, SavingComments: 2, }; JSDocState.SawAsterisk; Note that @enum is quite different from, and much simpler than, TypeScript\u0026rsquo;s enum. However, unlike TypeScript\u0026rsquo;s enums, @enum can have any type:\n/** @enum {function(number): number} */ const MathFuncs = { add1: (n) =\u0026gt; n + 1, id: (n) =\u0026gt; -n, sub1: (n) =\u0026gt; n - 1, }; MathFuncs.add1; @author # You can specify the author of an item with @author:\n/** * Welcome to awesome.ts * @author Ian Awesome \u0026lt;i.am.awesome@example.com\u0026gt; */ Remember to surround the email address with angle brackets. Otherwise, @example will be parsed as a new tag.\nOther supported patterns # var someObj = { /** * @param {string} param1 - JSDocs on property assignments work */ x: function (param1) {}, }; /** * As do jsdocs on variable assignments * @return {Window} */ let someFunc = function () {}; /** * And class methods * @param {string} greeting The greeting to use */ Foo.prototype.sayHi = (greeting) =\u0026gt; console.log(\u0026#34;Hi!\u0026#34;); /** * And arrow function expressions * @param {number} x - A multiplier */ let myArrow = (x) =\u0026gt; x * x; /** * Which means it works for function components in JSX too * @param {{a: string, b: number}} props - Some param */ var fc = (props) =\u0026gt; \u0026lt;div\u0026gt;{props.a.charAt(0)}\u0026lt;/div\u0026gt;; /** * A parameter can be a class constructor, using Google Closure syntax. * * @param {{new(...args: any[]): object}} C - The class to register */ function registerClass(C) {} /** * @param {...string} p1 - A \u0026#39;rest\u0026#39; arg (array) of strings. (treated as \u0026#39;any\u0026#39;) */ function fn10(p1) {} /** * @param {...string} p1 - A \u0026#39;rest\u0026#39; arg (array) of strings. (treated as \u0026#39;any\u0026#39;) */ function fn9(p1) { return p1.join(); } Unsupported patterns # Postfix equals on a property type in an object literal type doesn\u0026rsquo;t specify an optional property:\n/** * @type {{ a: string, b: number= }} */ var wrong; /** * Use postfix question on the property name instead: * @type {{ a: string, b?: number }} */ var right; Nullable types only have meaning if strictNullChecks is on:\n/** * @type {?number} * With strictNullChecks: true -- number | null * With strictNullChecks: false -- number */ var nullable; The TypeScript-native syntax is a union type:\n/** * @type {number | null} * With strictNullChecks: true -- number | null * With strictNullChecks: false -- number */ var unionNullable; Non-nullable types have no meaning and are treated just as their original type:\n/** * @type {!number} * Just has type number */ var normal; Unlike JSDoc\u0026rsquo;s type system, TypeScript only allows you to mark types as containing null or not. There is no explicit non-nullability \u0026mdash; if strictNullChecks is on, then number is not nullable. If it is off, then number is nullable.\nUnsupported tags # TypeScript ignores any unsupported JSDoc tags.\nThe following tags have open issues to support them:\n@const ( issue #19672) @inheritdoc ( issue #23215) @memberof ( issue #7237) @yields ( issue #23857) ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html{._attribution-link} :::\n"},{"id":288,"href":"/docs/references/languages/typescript/jsx/","title":"Jsx","section":"Typescript","content":" JSX # JSX is an embeddable XML-like syntax. It is meant to be transformed into valid JavaScript, though the semantics of that transformation are implementation-specific. JSX rose to popularity with the React framework, but has since seen other implementations as well. TypeScript supports embedding, type checking, and compiling JSX directly to JavaScript.\nBasic usage # In order to use JSX you must do two things.\nName your files with a .tsx extension Enable the jsx option TypeScript ships with three JSX modes: preserve, react, and react-native. These modes only affect the emit stage - type checking is unaffected. The preserve mode will keep the JSX as part of the output to be further consumed by another transform step (e.g. Babel). Additionally the output will have a .jsx file extension. The react mode will emit React.createElement, does not need to go through a JSX transformation before use, and the output will have a .js file extension. The react-native mode is the equivalent of preserve in that it keeps all JSX, but the output will instead have a .js file extension.\nMode Input Output Output File Extension\npreserve \u0026lt;div /\u0026gt; \u0026lt;div /\u0026gt; .jsx react \u0026lt;div /\u0026gt; React.createElement(\u0026quot;div\u0026quot;) .js react-native \u0026lt;div /\u0026gt; \u0026lt;div /\u0026gt; .js react-jsx \u0026lt;div /\u0026gt; _jsx(\u0026quot;div\u0026quot;, {}, void 0); .js react-jsxdev \u0026lt;div /\u0026gt; _jsxDEV(\u0026quot;div\u0026quot;, {}, void 0, false, {...}, this); .js\nYou can specify this mode using either the jsx command line flag or the corresponding option jsx in your tsconfig.json file.\n*Note: You can specify the JSX factory function to use when targeting react JSX emit with jsxFactory option (defaults to React.createElement)\nThe as operator # Recall how to write a type assertion:\nconst foo = \u0026lt;foo\u0026gt;bar; This asserts the variable bar to have the type foo. Since TypeScript also uses angle brackets for type assertions, combining it with JSX\u0026rsquo;s syntax would introduce certain parsing difficulties. As a result, TypeScript disallows angle bracket type assertions in .tsx files.\nSince the above syntax cannot be used in .tsx files, an alternate type assertion operator should be used: as. The example can easily be rewritten with the as operator.\nconst foo = bar as foo; The as operator is available in both .ts and .tsx files, and is identical in behavior to the angle-bracket type assertion style.\nType Checking # In order to understand type checking with JSX, you must first understand the difference between intrinsic elements and value-based elements. Given a JSX expression \u0026lt;expr /\u0026gt;, expr may either refer to something intrinsic to the environment (e.g. a div or span in a DOM environment) or to a custom component that you\u0026rsquo;ve created. This is important for two reasons:\nFor React, intrinsic elements are emitted as strings (React.createElement(\u0026quot;div\u0026quot;)), whereas a component you\u0026rsquo;ve created is not (React.createElement(MyComponent)). The types of the attributes being passed in the JSX element should be looked up differently. Intrinsic element attributes should be known intrinsically whereas components will likely want to specify their own set of attributes. TypeScript uses the same convention that React does for distinguishing between these. An intrinsic element always begins with a lowercase letter, and a value-based element always begins with an uppercase letter.\nIntrinsic elements # Intrinsic elements are looked up on the special interface JSX.IntrinsicElements. By default, if this interface is not specified, then anything goes and intrinsic elements will not be type checked. However, if this interface is present, then the name of the intrinsic element is looked up as a property on the JSX.IntrinsicElements interface. For example:\ndeclare namespace JSX { interface IntrinsicElements { foo: any; } } \u0026lt;foo /\u0026gt;; // ok \u0026lt;bar /\u0026gt;; // error In the above example, \u0026lt;foo /\u0026gt; will work fine but \u0026lt;bar /\u0026gt; will result in an error since it has not been specified on JSX.IntrinsicElements.\nNote: You can also specify a catch-all string indexer on JSX.IntrinsicElements as follows:\ndeclare namespace JSX { interface IntrinsicElements { [elemName: string]: any; } } Value-based elements # Value-based elements are simply looked up by identifiers that are in scope.\nimport MyComponent from \u0026#34;./myComponent\u0026#34;; \u0026lt;MyComponent /\u0026gt;; // ok \u0026lt;SomeOtherComponent /\u0026gt;; // error There are two ways to define a value-based element:\nFunction Component (FC) Class Component Because these two types of value-based elements are indistinguishable from each other in a JSX expression, first TS tries to resolve the expression as a Function Component using overload resolution. If the process succeeds, then TS finishes resolving the expression to its declaration. If the value fails to resolve as a Function Component, TS will then try to resolve it as a class component. If that fails, TS will report an error.\nFunction Component # As the name suggests, the component is defined as a JavaScript function where its first argument is a props object. TS enforces that its return type must be assignable to JSX.Element.\ninterface FooProp { name: string; X: number; Y: number; } declare function AnotherComponent(prop: { name: string }); function ComponentFoo(prop: FooProp) { return \u0026lt;AnotherComponent name={prop.name} /\u0026gt;; } const Button = (prop: { value: string }, context: { color: string }) =\u0026gt; ( \u0026lt;button /\u0026gt; ); Because a Function Component is simply a JavaScript function, function overloads may be used here as well:\ninterface ClickableProps { children: JSX.Element[] | JSX.Element; } interface HomeProps extends ClickableProps { home: JSX.Element; } interface SideProps extends ClickableProps { side: JSX.Element | string; } function MainButton(prop: HomeProps): JSX.Element; function MainButton(prop: SideProps): JSX.Element; function MainButton(prop: ClickableProps): JSX.Element { // ... } Note: Function Components were formerly known as Stateless Function Components (SFC). As Function Components can no longer be considered stateless in recent versions of react, the type SFC and its alias StatelessComponent were deprecated.\nClass Component # It is possible to define the type of a class component. However, to do so it is best to understand two new terms: the element class type and the element instance type.\nGiven \u0026lt;Expr /\u0026gt;, the element class type is the type of Expr. So in the example above, if MyComponent was an ES6 class the class type would be that class\u0026rsquo;s constructor and statics. If MyComponent was a factory function, the class type would be that function.\nOnce the class type is established, the instance type is determined by the union of the return types of the class type\u0026rsquo;s construct or call signatures (whichever is present). So again, in the case of an ES6 class, the instance type would be the type of an instance of that class, and in the case of a factory function, it would be the type of the value returned from the function.\nclass MyComponent { render() {} } // use a construct signature const myComponent = new MyComponent(); // element class type =\u0026gt; MyComponent // element instance type =\u0026gt; { render: () =\u0026gt; void } function MyFactoryFunction() { return { render: () =\u0026gt; {}, }; } // use a call signature const myComponent = MyFactoryFunction(); // element class type =\u0026gt; MyFactoryFunction // element instance type =\u0026gt; { render: () =\u0026gt; void } The element instance type is interesting because it must be assignable to JSX.ElementClass or it will result in an error. By default JSX.ElementClass is {}, but it can be augmented to limit the use of JSX to only those types that conform to the proper interface.\ndeclare namespace JSX { interface ElementClass { render: any; } } class MyComponent { render() {} } function MyFactoryFunction() { return { render: () =\u0026gt; {} }; } \u0026lt;MyComponent /\u0026gt;; // ok \u0026lt;MyFactoryFunction /\u0026gt;; // ok class NotAValidComponent {} function NotAValidFactoryFunction() { return {}; } \u0026lt;NotAValidComponent /\u0026gt;; // error \u0026lt;NotAValidFactoryFunction /\u0026gt;; // error Attribute type checking # The first step to type checking attributes is to determine the element attributes type. This is slightly different between intrinsic and value-based elements.\nFor intrinsic elements, it is the type of the property on JSX.IntrinsicElements\ndeclare namespace JSX { interface IntrinsicElements { foo: { bar?: boolean }; } } // element attributes type for \u0026#39;foo\u0026#39; is \u0026#39;{bar?: boolean}\u0026#39; \u0026lt;foo bar /\u0026gt;; For value-based elements, it is a bit more complex. It is determined by the type of a property on the element instance type that was previously determined. Which property to use is determined by JSX.ElementAttributesProperty. It should be declared with a single property. The name of that property is then used. As of TypeScript 2.8, if JSX.ElementAttributesProperty is not provided, the type of first parameter of the class element\u0026rsquo;s constructor or Function Component\u0026rsquo;s call will be used instead.\ndeclare namespace JSX { interface ElementAttributesProperty { props; // specify the property name to use } } class MyComponent { // specify the property on the element instance type props: { foo?: string; }; } // element attributes type for \u0026#39;MyComponent\u0026#39; is \u0026#39;{foo?: string}\u0026#39; \u0026lt;MyComponent foo=\u0026#34;bar\u0026#34; /\u0026gt;; The element attribute type is used to type check the attributes in the JSX. Optional and required properties are supported.\ndeclare namespace JSX { interface IntrinsicElements { foo: { requiredProp: string; optionalProp?: number }; } } \u0026lt;foo requiredProp=\u0026#34;bar\u0026#34; /\u0026gt;; // ok \u0026lt;foo requiredProp=\u0026#34;bar\u0026#34; optionalProp={0} /\u0026gt;; // ok \u0026lt;foo /\u0026gt;; // error, requiredProp is missing \u0026lt;foo requiredProp={0} /\u0026gt;; // error, requiredProp should be a string \u0026lt;foo requiredProp=\u0026#34;bar\u0026#34; unknownProp /\u0026gt;; // error, unknownProp does not exist \u0026lt;foo requiredProp=\u0026#34;bar\u0026#34; some-unknown-prop /\u0026gt;; // ok, because \u0026#39;some-unknown-prop\u0026#39; is not a valid identifier Note: If an attribute name is not a valid JS identifier (like a data-* attribute), it is not considered to be an error if it is not found in the element attributes type.\nAdditionally, the JSX.IntrinsicAttributes interface can be used to specify extra properties used by the JSX framework which are not generally used by the components\u0026rsquo; props or arguments - for instance key in React. Specializing further, the generic JSX.IntrinsicClassAttributes\u0026lt;T\u0026gt; type may also be used to specify the same kind of extra attributes just for class components (and not Function Components). In this type, the generic parameter corresponds to the class instance type. In React, this is used to allow the ref attribute of type Ref\u0026lt;T\u0026gt;. Generally speaking, all of the properties on these interfaces should be optional, unless you intend that users of your JSX framework need to provide some attribute on every tag.\nThe spread operator also works:\nconst props = { requiredProp: \u0026#34;bar\u0026#34; }; \u0026lt;foo {...props} /\u0026gt;; // ok const badProps = {}; \u0026lt;foo {...badProps} /\u0026gt;; // error Children Type Checking # In TypeScript 2.3, TS introduced type checking of children. children is a special property in an element attributes type where child JSXExpressions are taken to be inserted into the attributes. Similar to how TS uses JSX.ElementAttributesProperty to determine the name of props, TS uses JSX.ElementChildrenAttribute to determine the name of children within those props. JSX.ElementChildrenAttribute should be declared with a single property.\ndeclare namespace JSX { interface ElementChildrenAttribute { children: {}; // specify children name to use } } \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt;; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello\u0026lt;/h1\u0026gt; World \u0026lt;/div\u0026gt;; const CustomComp = (props) =\u0026gt; \u0026lt;div\u0026gt;{props.children}\u0026lt;/div\u0026gt; \u0026lt;CustomComp\u0026gt; \u0026lt;div\u0026gt;Hello World\u0026lt;/div\u0026gt; {\u0026#34;This is just a JS expression...\u0026#34; + 1000} \u0026lt;/CustomComp\u0026gt; You can specify the type of children like any other attribute. This will override the default type from, e.g. the React typings if you use them.\ninterface PropsType { children: JSX.Element name: string } class Component extends React.Component\u0026lt;PropsType, {}\u0026gt; { render() { return ( \u0026lt;h2\u0026gt; {this.props.children} \u0026lt;/h2\u0026gt; ) } } // OK \u0026lt;Component name=\u0026#34;foo\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt; \u0026lt;/Component\u0026gt; // Error: children is of type JSX.Element not array of JSX.Element \u0026lt;Component name=\u0026#34;bar\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Hello World\u0026lt;/h2\u0026gt; \u0026lt;/Component\u0026gt; // Error: children is of type JSX.Element not array of JSX.Element or string. \u0026lt;Component name=\u0026#34;baz\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Hello\u0026lt;/h1\u0026gt; World \u0026lt;/Component\u0026gt; The JSX result type # By default the result of a JSX expression is typed as any. You can customize the type by specifying the JSX.Element interface. However, it is not possible to retrieve type information about the element, attributes or children of the JSX from this interface. It is a black box.\nEmbedding Expressions # JSX allows you to embed expressions between tags by surrounding the expressions with curly braces ({ }).\nconst a = ( \u0026lt;div\u0026gt; {[\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;].map((i) =\u0026gt; ( \u0026lt;span\u0026gt;{i / 2}\u0026lt;/span\u0026gt; ))} \u0026lt;/div\u0026gt; ); The above code will result in an error since you cannot divide a string by a number. The output, when using the preserve option, looks like:\nconst a = ( \u0026lt;div\u0026gt; {[\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;].map(function (i) { return \u0026lt;span\u0026gt;{i / 2}\u0026lt;/span\u0026gt;; })} \u0026lt;/div\u0026gt; ); React integration # To use JSX with React you should use the React typings. These typings define the JSX namespace appropriately for use with React.\n/// \u0026lt;reference path=\u0026#34;react.d.ts\u0026#34; /\u0026gt; interface Props { foo: string; } class MyComponent extends React.Component\u0026lt;Props, {}\u0026gt; { render() { return \u0026lt;span\u0026gt;{this.props.foo}\u0026lt;/span\u0026gt;; } } \u0026lt;MyComponent foo=\u0026#34;bar\u0026#34; /\u0026gt;; // ok \u0026lt;MyComponent foo={0} /\u0026gt;; // error Configuring JSX # There are multiple compiler flags which can be used to customize your JSX, which work as both a compiler flag and via inline per-file pragmas. To learn more see their tsconfig reference pages:\njsxFactory jsxFragmentFactory jsxImportSource ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/jsx.html{._attribution-link} :::\n"},{"id":289,"href":"/docs/references/languages/typescript/keyof-types/","title":"Keyof Types","section":"Typescript","content":" Keyof Type Operator # The keyof type operator # The keyof operator takes an object type and produces a string or numeric literal union of its keys. The following type P is the same type as type P = \u0026quot;x\u0026quot; | \u0026quot;y\u0026quot;:\ntype Point = { x: number; y: number }; type P = keyof Point; If the type has a string or number index signature, keyof will return those types instead:\ntype Arrayish = { [n: number]: unknown }; type A = keyof Arrayish; type Mapish = { [k: string]: boolean }; type M = keyof Mapish; Note that in this example, M is string | number \u0026mdash; this is because JavaScript object keys are always coerced to a string, so obj[0] is always the same as obj[\u0026quot;0\u0026quot;].\nkeyof types become especially useful when combined with mapped types, which we\u0026rsquo;ll learn more about later.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/keyof-types.html{._attribution-link} :::\n"},{"id":290,"href":"/docs/references/languages/typescript/mapped-types/","title":"Mapped Types","section":"Typescript","content":" Mapped Types # When you don\u0026rsquo;t want to repeat yourself, sometimes a type needs to be based on another type.\nMapped types build on the syntax for index signatures, which are used to declare the types of properties which have not been declared ahead of time:\ntype OnlyBoolsAndHorses = { [key: string]: boolean | Horse; }; const conforms: OnlyBoolsAndHorses = { del: true, rodney: false, }; A mapped type is a generic type which uses a union of PropertyKeys (frequently created via a keyof) to iterate through keys to create a type:\ntype OptionsFlags\u0026lt;Type\u0026gt; = { [Property in keyof Type]: boolean; }; In this example, OptionsFlags will take all the properties from the type Type and change their values to be a boolean.\ntype Features = { darkMode: () =\u0026gt; void; newUserProfile: () =\u0026gt; void; }; type FeatureOptions = OptionsFlags\u0026lt;Features\u0026gt;; Mapping Modifiers # There are two additional modifiers which can be applied during mapping: readonly and ? which affect mutability and optionality respectively.\nYou can remove or add these modifiers by prefixing with - or +. If you don\u0026rsquo;t add a prefix, then + is assumed.\n// Removes \u0026#39;readonly\u0026#39; attributes from a type\u0026#39;s properties type CreateMutable\u0026lt;Type\u0026gt; = { -readonly [Property in keyof Type]: Type[Property]; }; type LockedAccount = { readonly id: string; readonly name: string; }; type UnlockedAccount = CreateMutable\u0026lt;LockedAccount\u0026gt;; // Removes \u0026#39;optional\u0026#39; attributes from a type\u0026#39;s properties type Concrete\u0026lt;Type\u0026gt; = { [Property in keyof Type]-?: Type[Property]; }; type MaybeUser = { id: string; name?: string; age?: number; }; type User = Concrete\u0026lt;MaybeUser\u0026gt;; Key Remapping via as # In TypeScript 4.1 and onwards, you can re-map keys in mapped types with an as clause in a mapped type:\ntype MappedTypeWithNewProperties\u0026lt;Type\u0026gt; = { [Properties in keyof Type as NewKeyType]: Type[Properties] } You can leverage features like template literal types to create new property names from prior ones:\ntype Getters\u0026lt;Type\u0026gt; = { [Property in keyof Type as `get${Capitalize\u0026lt;string \u0026amp; Property\u0026gt;}`]: () =\u0026gt; Type[Property] }; interface Person { name: string; age: number; location: string; } type LazyPerson = Getters\u0026lt;Person\u0026gt;; You can filter out keys by producing never via a conditional type:\n// Remove the \u0026#39;kind\u0026#39; property type RemoveKindField\u0026lt;Type\u0026gt; = { [Property in keyof Type as Exclude\u0026lt;Property, \u0026#34;kind\u0026#34;\u0026gt;]: Type[Property] }; interface Circle { kind: \u0026#34;circle\u0026#34;; radius: number; } type KindlessCircle = RemoveKindField\u0026lt;Circle\u0026gt;; You can map over arbitrary unions, not just unions of string | number | symbol, but unions of any type:\ntype EventConfig\u0026lt;Events extends { kind: string }\u0026gt; = { [E in Events as E[\u0026#34;kind\u0026#34;]]: (event: E) =\u0026gt; void; } type SquareEvent = { kind: \u0026#34;square\u0026#34;, x: number, y: number }; type CircleEvent = { kind: \u0026#34;circle\u0026#34;, radius: number }; type Config = EventConfig\u0026lt;SquareEvent | CircleEvent\u0026gt; Further Exploration # Mapped types work well with other features in this type manipulation section, for example here is a mapped type using a conditional type which returns either a true or false depending on whether an object has the property pii set to the literal true:\ntype ExtractPII\u0026lt;Type\u0026gt; = { [Property in keyof Type]: Type[Property] extends { pii: true } ? true : false; }; type DBFields = { id: { format: \u0026#34;incrementing\u0026#34; }; name: { type: string; pii: true }; }; type ObjectsNeedingGDPRDeletion = ExtractPII\u0026lt;DBFields\u0026gt;; ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/mapped-types.html{._attribution-link} :::\n"},{"id":291,"href":"/docs/references/languages/typescript/migrating-from-javascript/","title":"Migrating From Javascript","section":"Typescript","content":" Migrating from JavaScript # TypeScript doesn\u0026rsquo;t exist in a vacuum. It was built with the JavaScript ecosystem in mind, and a lot of JavaScript exists today. Converting a JavaScript codebase over to TypeScript is, while somewhat tedious, usually not challenging. In this tutorial, we\u0026rsquo;re going to look at how you might start out. We assume you\u0026rsquo;ve read enough of the handbook to write new TypeScript code.\nIf you\u0026rsquo;re looking to convert a React project, we recommend looking at the React Conversion Guide first.\nSetting up your Directories # If you\u0026rsquo;re writing in plain JavaScript, it\u0026rsquo;s likely that you\u0026rsquo;re running your JavaScript directly, where your .js files are in a src, lib, or dist directory, and then run as desired.\nIf that\u0026rsquo;s the case, the files that you\u0026rsquo;ve written are going to be used as inputs to TypeScript, and you\u0026rsquo;ll run the outputs it produces. During our JS to TS migration, we\u0026rsquo;ll need to separate our input files to prevent TypeScript from overwriting them. If your output files need to reside in a specific directory, then that will be your output directory.\nYou might also be running some intermediate steps on your JavaScript, such as bundling or using another transpiler like Babel. In this case, you might already have a folder structure like this set up.\nFrom this point on, we\u0026rsquo;re going to assume that your directory is set up something like this:\nprojectRoot ├── src │ ├── file1.js │ └── file2.js ├── built └── tsconfig.json If you have a tests folder outside of your src directory, you might have one tsconfig.json in src, and one in tests as well.\nWriting a Configuration File # TypeScript uses a file called tsconfig.json for managing your project\u0026rsquo;s options, such as which files you want to include, and what sorts of checking you want to perform. Let\u0026rsquo;s create a bare-bones one for our project:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;outDir\u0026#34;: \u0026#34;./built\u0026#34;, \u0026#34;allowJs\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;es5\u0026#34; }, \u0026#34;include\u0026#34;: [\u0026#34;./src/**/*\u0026#34;] } Here we\u0026rsquo;re specifying a few things to TypeScript:\nRead in any files it understands in the src directory (with include). Accept JavaScript files as inputs (with allowJs). Emit all of the output files in built (with outDir). Translate newer JavaScript constructs down to an older version like ECMAScript 5 (using target). At this point, if you try running tsc at the root of your project, you should see output files in the built directory. The layout of files in built should look identical to the layout of src. You should now have TypeScript working with your project.\nEarly Benefits # Even at this point you can get some great benefits from TypeScript understanding your project. If you open up an editor like VS Code or Visual Studio, you\u0026rsquo;ll see that you can often get some tooling support like completion. You can also catch certain bugs with options like:\nnoImplicitReturns which prevents you from forgetting to return at the end of a function. noFallthroughCasesInSwitch which is helpful if you never want to forget a break statement between cases in a switch block. TypeScript will also warn about unreachable code and labels, which you can disable with allowUnreachableCode and allowUnusedLabels respectively.\nIntegrating with Build Tools # You might have some more build steps in your pipeline. Perhaps you concatenate something to each of your files. Each build tool is different, but we\u0026rsquo;ll do our best to cover the gist of things.\nGulp # If you\u0026rsquo;re using Gulp in some fashion, we have a tutorial on using Gulp with TypeScript, and integrating with common build tools like Browserify, Babelify, and Uglify. You can read more there.\nWebpack # Webpack integration is pretty simple. You can use ts-loader, a TypeScript loader, combined with source-map-loader for easier debugging. Simply run\nnpm install ts-loader source-map-loader and merge in options from the following into your webpack.config.js file:\nmodule.exports = { entry: \u0026#34;./src/index.ts\u0026#34;, output: { filename: \u0026#34;./dist/bundle.js\u0026#34;, }, // Enable sourcemaps for debugging webpack\u0026#39;s output. devtool: \u0026#34;source-map\u0026#34;, resolve: { // Add \u0026#39;.ts\u0026#39; and \u0026#39;.tsx\u0026#39; as resolvable extensions. extensions: [\u0026#34;\u0026#34;, \u0026#34;.webpack.js\u0026#34;, \u0026#34;.web.js\u0026#34;, \u0026#34;.ts\u0026#34;, \u0026#34;.tsx\u0026#34;, \u0026#34;.js\u0026#34;], }, module: { rules: [ // All files with a \u0026#39;.ts\u0026#39; or \u0026#39;.tsx\u0026#39; extension will be handled by \u0026#39;ts-loader\u0026#39;. { test: /\\.tsx?$/, loader: \u0026#34;ts-loader\u0026#34; }, // All output \u0026#39;.js\u0026#39; files will have any sourcemaps re-processed by \u0026#39;source-map-loader\u0026#39;. { test: /\\.js$/, loader: \u0026#34;source-map-loader\u0026#34; }, ], }, // Other options... }; It\u0026rsquo;s important to note that ts-loader will need to run before any other loader that deals with .js files.\nYou can see an example of using Webpack in our tutorial on React and Webpack.\nMoving to TypeScript Files # At this point, you\u0026rsquo;re probably ready to start using TypeScript files. The first step is to rename one of your .js files to .ts. If your file uses JSX, you\u0026rsquo;ll need to rename it to .tsx.\nFinished with that step? Great! You\u0026rsquo;ve successfully migrated a file from JavaScript to TypeScript!\nOf course, that might not feel right. If you open that file in an editor with TypeScript support (or if you run tsc --pretty), you might see red squiggles on certain lines. You should think of these the same way you\u0026rsquo;d think of red squiggles in an editor like Microsoft Word. TypeScript will still translate your code, just like Word will still let you print your documents.\nIf that sounds too lax for you, you can tighten that behavior up. If, for instance, you don\u0026rsquo;t want TypeScript to compile to JavaScript in the face of errors, you can use the noEmitOnError option. In that sense, TypeScript has a dial on its strictness, and you can turn that knob up as high as you want.\nIf you plan on using the stricter settings that are available, it\u0026rsquo;s best to turn them on now (see Getting Stricter Checks below). For instance, if you never want TypeScript to silently infer any for a type without you explicitly saying so, you can use noImplicitAny before you start modifying your files. While it might feel somewhat overwhelming, the long-term gains become apparent much more quickly.\nWeeding out Errors # Like we mentioned, it\u0026rsquo;s not unexpected to get error messages after conversion. The important thing is to actually go one by one through these and decide how to deal with the errors. Often these will be legitimate bugs, but sometimes you\u0026rsquo;ll have to explain what you\u0026rsquo;re trying to do a little better to TypeScript.\nImporting from Modules # You might start out getting a bunch of errors like Cannot find name 'require'., and Cannot find name 'define'.. In these cases, it\u0026rsquo;s likely that you\u0026rsquo;re using modules. While you can just convince TypeScript that these exist by writing out\n// For Node/CommonJS declare function require(path: string): any; or\n// For RequireJS/AMD declare function define(...args: any[]): any; it\u0026rsquo;s better to get rid of those calls and use TypeScript syntax for imports.\nFirst, you\u0026rsquo;ll need to enable some module system by setting TypeScript\u0026rsquo;s module option. Valid options are commonjs, amd, system, and umd.\nIf you had the following Node/CommonJS code:\nvar foo = require(\u0026#34;foo\u0026#34;); foo.doStuff(); or the following RequireJS/AMD code:\ndefine([\u0026#34;foo\u0026#34;], function (foo) { foo.doStuff(); }); then you would write the following TypeScript code:\nimport foo = require(\u0026#34;foo\u0026#34;); foo.doStuff(); Getting Declaration Files # If you started converting over to TypeScript imports, you\u0026rsquo;ll probably run into errors like Cannot find module 'foo'.. The issue here is that you likely don\u0026rsquo;t have declaration files to describe your library. Luckily this is pretty easy. If TypeScript complains about a package like lodash, you can just write\nnpm install -S @types/lodash If you\u0026rsquo;re using a module option other than commonjs, you\u0026rsquo;ll need to set your moduleResolution option to node.\nAfter that, you\u0026rsquo;ll be able to import lodash with no issues, and get accurate completions.\nExporting from Modules # Typically, exporting from a module involves adding properties to a value like exports or module.exports. TypeScript allows you to use top-level export statements. For instance, if you exported a function like so:\nmodule.exports.feedPets = function (pets) { // ... }; you could write that out as the following:\nexport function feedPets(pets) { // ... } Sometimes you\u0026rsquo;ll entirely overwrite the exports object. This is a common pattern people use to make their modules immediately callable like in this snippet:\nvar express = require(\u0026#34;express\u0026#34;); var app = express(); You might have previously written that like so:\nfunction foo() { // ... } module.exports = foo; In TypeScript, you can model this with the export = construct.\nfunction foo() { // ... } export = foo; Too many/too few arguments # You\u0026rsquo;ll sometimes find yourself calling a function with too many/few arguments. Typically, this is a bug, but in some cases, you might have declared a function that uses the arguments object instead of writing out any parameters:\nfunction myCoolFunction() { if (arguments.length == 2 \u0026amp;\u0026amp; !Array.isArray(arguments[1])) { var f = arguments[0]; var arr = arguments[1]; // ... } // ... } myCoolFunction( function (x) { console.log(x); }, [1, 2, 3, 4] ); myCoolFunction( function (x) { console.log(x); }, 1, 2, 3, 4 ); In this case, we need to use TypeScript to tell any of our callers about the ways myCoolFunction can be called using function overloads.\nfunction myCoolFunction(f: (x: number) =\u0026gt; void, nums: number[]): void; function myCoolFunction(f: (x: number) =\u0026gt; void, ...nums: number[]): void; function myCoolFunction() { if (arguments.length == 2 \u0026amp;\u0026amp; !Array.isArray(arguments[1])) { var f = arguments[0]; var arr = arguments[1]; // ... } // ... } We added two overload signatures to myCoolFunction. The first checks states that myCoolFunction takes a function (which takes a number), and then a list of numbers. The second one says that it will take a function as well, and then uses a rest parameter (...nums) to state that any number of arguments after that need to be numbers.\nSequentially Added Properties # Some people find it more aesthetically pleasing to create an object and add properties immediately after like so:\nvar options = {}; options.color = \u0026#34;red\u0026#34;; options.volume = 11; TypeScript will say that you can\u0026rsquo;t assign to color and volume because it first figured out the type of options as {} which doesn\u0026rsquo;t have any properties. If you instead moved the declarations into the object literal themselves, you\u0026rsquo;d get no errors:\nlet options = { color: \u0026#34;red\u0026#34;, volume: 11, }; You could also define the type of options and add a type assertion on the object literal.\ninterface Options { color: string; volume: number; } let options = {} as Options; options.color = \u0026#34;red\u0026#34;; options.volume = 11; Alternatively, you can just say options has the type any which is the easiest thing to do, but which will benefit you the least.\nany, Object, and {} # You might be tempted to use Object or {} to say that a value can have any property on it because Object is, for most purposes, the most general type. However any is actually the type you want to use in those situations, since it\u0026rsquo;s the most flexible type.\nFor instance, if you have something that\u0026rsquo;s typed as Object you won\u0026rsquo;t be able to call methods like toLowerCase() on it. Being more general usually means you can do less with a type, but any is special in that it is the most general type while still allowing you to do anything with it. That means you can call it, construct it, access properties on it, etc. Keep in mind though, whenever you use any, you lose out on most of the error checking and editor support that TypeScript gives you.\nIf a decision ever comes down to Object and {}, you should prefer {}. While they are mostly the same, technically {} is a more general type than Object in certain esoteric cases.\nGetting Stricter Checks # TypeScript comes with certain checks to give you more safety and analysis of your program. Once you\u0026rsquo;ve converted your codebase to TypeScript, you can start enabling these checks for greater safety.\nNo Implicit any # There are certain cases where TypeScript can\u0026rsquo;t figure out what certain types should be. To be as lenient as possible, it will decide to use the type any in its place. While this is great for migration, using any means that you\u0026rsquo;re not getting any type safety, and you won\u0026rsquo;t get the same tooling support you\u0026rsquo;d get elsewhere. You can tell TypeScript to flag these locations down and give an error with the noImplicitAny option.\nStrict null \u0026amp; undefined Checks # By default, TypeScript assumes that null and undefined are in the domain of every type. That means anything declared with the type number could be null or undefined. Since null and undefined are such a frequent source of bugs in JavaScript and TypeScript, TypeScript has the strictNullChecks option to spare you the stress of worrying about these issues.\nWhen strictNullChecks is enabled, null and undefined get their own types called null and undefined respectively. Whenever anything is possibly null, you can use a union type with the original type. So for instance, if something could be a number or null, you\u0026rsquo;d write the type out as number | null.\nIf you ever have a value that TypeScript thinks is possibly null/undefined, but you know better, you can use the postfix ! operator to tell it otherwise.\ndeclare var foo: string[] | null; foo.length; // error - \u0026#39;foo\u0026#39; is possibly \u0026#39;null\u0026#39; foo!.length; // okay - \u0026#39;foo!\u0026#39; just has type \u0026#39;string[]\u0026#39; As a heads up, when using strictNullChecks, your dependencies may need to be updated to use strictNullChecks as well.\nNo Implicit any for this # When you use the this keyword outside of classes, it has the type any by default. For instance, imagine a Point class, and imagine a function that we wish to add as a method:\nclass Point { constructor(public x, public y) {} getDistance(p: Point) { let dx = p.x - this.x; let dy = p.y - this.y; return Math.sqrt(dx ** 2 + dy ** 2); } } // ... // Reopen the interface. interface Point { distanceFromOrigin(): number; } Point.prototype.distanceFromOrigin = function () { return this.getDistance({ x: 0, y: 0 }); }; This has the same problems we mentioned above - we could easily have misspelled getDistance and not gotten an error. For this reason, TypeScript has the noImplicitThis option. When that option is set, TypeScript will issue an error when this is used without an explicit (or inferred) type. The fix is to use a this-parameter to give an explicit type in the interface or in the function itself:\nPoint.prototype.distanceFromOrigin = function (this: Point) { return this.getDistance({ x: 0, y: 0 }); }; ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html{._attribution-link} :::\n"},{"id":292,"href":"/docs/references/languages/typescript/mixins/","title":"Mixins","section":"Typescript","content":" Mixins # Along with traditional OO hierarchies, another popular way of building up classes from reusable components is to build them by combining simpler partial classes. You may be familiar with the idea of mixins or traits for languages like Scala, and the pattern has also reached some popularity in the JavaScript community.\nHow Does A Mixin Work? # The pattern relies on using generics with class inheritance to extend a base class. TypeScript\u0026rsquo;s best mixin support is done via the class expression pattern. You can read more about how this pattern works in JavaScript here.\nTo get started, we\u0026rsquo;ll need a class which will have the mixins applied on top of:\nclass Sprite { name = \u0026#34;\u0026#34;; x = 0; y = 0; constructor(name: string) { this.name = name; } } Then you need a type and a factory function which returns a class expression extending the base class.\n// To get started, we need a type which we\u0026#39;ll use to extend // other classes from. The main responsibility is to declare // that the type being passed in is a class. type Constructor = new (...args: any[]) =\u0026gt; {}; // This mixin adds a scale property, with getters and setters // for changing it with an encapsulated private property: function Scale\u0026lt;TBase extends Constructor\u0026gt;(Base: TBase) { return class Scaling extends Base { // Mixins may not declare private/protected properties // however, you can use ES2020 private fields _scale = 1; setScale(scale: number) { this._scale = scale; } get scale(): number { return this._scale; } }; } With these all set up, then you can create a class which represents the base class with mixins applied:\n// Compose a new class from the Sprite class, // with the Mixin Scale applier: const EightBitSprite = Scale(Sprite); const flappySprite = new EightBitSprite(\u0026#34;Bird\u0026#34;); flappySprite.setScale(0.8); console.log(flappySprite.scale); Constrained Mixins # In the above form, the mixin\u0026rsquo;s have no underlying knowledge of the class which can make it hard to create the design you want.\nTo model this, we modify the original constructor type to accept a generic argument.\n// This was our previous constructor: type Constructor = new (...args: any[]) =\u0026gt; {}; // Now we use a generic version which can apply a constraint on // the class which this mixin is applied to type GConstructor\u0026lt;T = {}\u0026gt; = new (...args: any[]) =\u0026gt; T; This allows for creating classes which only work with constrained base classes:\ntype Positionable = GConstructor\u0026lt;{ setPos: (x: number, y: number) =\u0026gt; void }\u0026gt;; type Spritable = GConstructor\u0026lt;Sprite\u0026gt;; type Loggable = GConstructor\u0026lt;{ print: () =\u0026gt; void }\u0026gt;; Then you can create mixins which only work when you have a particular base to build on:\nfunction Jumpable\u0026lt;TBase extends Positionable\u0026gt;(Base: TBase) { return class Jumpable extends Base { jump() { // This mixin will only work if it is passed a base // class which has setPos defined because of the // Positionable constraint. this.setPos(0, 20); } }; } Alternative Pattern # Previous versions of this document recommended a way to write mixins where you created both the runtime and type hierarchies separately, then merged them at the end:\n// Each mixin is a traditional ES class class Jumpable { jump() {} } class Duckable { duck() {} } // Including the base class Sprite { x = 0; y = 0; } // Then you create an interface which merges // the expected mixins with the same name as your base interface Sprite extends Jumpable, Duckable {} // Apply the mixins into the base class via // the JS at runtime applyMixins(Sprite, [Jumpable, Duckable]); let player = new Sprite(); player.jump(); console.log(player.x, player.y); // This can live anywhere in your codebase: function applyMixins(derivedCtor: any, constructors: any[]) { constructors.forEach((baseCtor) =\u0026gt; { Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) =\u0026gt; { Object.defineProperty( derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name) || Object.create(null) ); }); }); } This pattern relies less on the compiler, and more on your codebase to ensure both runtime and type-system are correctly kept in sync.\nConstraints # The mixin pattern is supported natively inside the TypeScript compiler by code flow analysis. There are a few cases where you can hit the edges of the native support.\nDecorators and Mixins #4881 # You cannot use decorators to provide mixins via code flow analysis:\n// A decorator function which replicates the mixin pattern: const Pausable = (target: typeof Player) =\u0026gt; { return class Pausable extends target { shouldFreeze = false; }; }; @Pausable class Player { x = 0; y = 0; } // The Player class does not have the decorator\u0026#39;s type merged: const player = new Player(); player.shouldFreeze; // The runtime aspect could be manually replicated via // type composition or interface merging. type FreezablePlayer = Player \u0026amp; { shouldFreeze: boolean }; const playerTwo = (new Player() as unknown) as FreezablePlayer; playerTwo.shouldFreeze; Static Property Mixins #17829 # More of a gotcha than a constraint. The class expression pattern creates singletons, so they can\u0026rsquo;t be mapped at the type system to support different variable types.\nYou can work around this by using functions to return your classes which differ based on a generic:\nfunction base\u0026lt;T\u0026gt;() { class Base { static prop: T; } return Base; } function derived\u0026lt;T\u0026gt;() { class Derived extends base\u0026lt;T\u0026gt;() { static anotherProp: T; } return Derived; } class Spec extends derived\u0026lt;string\u0026gt;() {} Spec.prop; // string Spec.anotherProp; // string ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/mixins.html{._attribution-link} :::\n"},{"id":293,"href":"/docs/references/languages/typescript/module-resolution/","title":"Module Resolution","section":"Typescript","content":" Module Resolution # This section assumes some basic knowledge about modules. Please see the Modules documentation for more information.\nModule resolution is the process the compiler uses to figure out what an import refers to. Consider an import statement like import { a } from \u0026quot;moduleA\u0026quot;; in order to check any use of a, the compiler needs to know exactly what it represents, and will need to check its definition moduleA.\nAt this point, the compiler will ask \u0026ldquo;what\u0026rsquo;s the shape of moduleA?\u0026rdquo; While this sounds straightforward, moduleA could be defined in one of your own .ts/.tsx files, or in a .d.ts that your code depends on.\nFirst, the compiler will try to locate a file that represents the imported module. To do so the compiler follows one of two different strategies: Classic or Node. These strategies tell the compiler where to look for moduleA.\nIf that didn\u0026rsquo;t work and if the module name is non-relative (and in the case of \u0026quot;moduleA\u0026quot;, it is), then the compiler will attempt to locate an ambient module declaration. We\u0026rsquo;ll cover non-relative imports next.\nFinally, if the compiler could not resolve the module, it will log an error. In this case, the error would be something like error TS2307: Cannot find module 'moduleA'.\nRelative vs. Non-relative module imports # Module imports are resolved differently based on whether the module reference is relative or non-relative.\nA relative import is one that starts with /, ./ or ../. Some examples include:\nimport Entry from \u0026quot;./components/Entry\u0026quot;; import { DefaultHeaders } from \u0026quot;../constants/http\u0026quot;; import \u0026quot;/mod\u0026quot;; Any other import is considered non-relative. Some examples include:\nimport * as $ from \u0026quot;jquery\u0026quot;; import { Component } from \u0026quot;@angular/core\u0026quot;; A relative import is resolved relative to the importing file and cannot resolve to an ambient module declaration. You should use relative imports for your own modules that are guaranteed to maintain their relative location at runtime.\nA non-relative import can be resolved relative to baseUrl, or through path mapping, which we\u0026rsquo;ll cover below. They can also resolve to ambient module declarations. Use non-relative paths when importing any of your external dependencies.\nModule Resolution Strategies # There are two possible module resolution strategies: Node and Classic. You can use the moduleResolution option to specify the module resolution strategy. If not specified, the default is Node for --module commonjs, and Classic otherwise (including when module is set to amd, system, umd, es2015, esnext, etc.).\nNote: node module resolution is the most-commonly used in the TypeScript community and is recommended for most projects. If you are having resolution problems with imports and exports in TypeScript, try setting moduleResolution: \u0026quot;node\u0026quot; to see if it fixes the issue.\nClassic # This used to be TypeScript\u0026rsquo;s default resolution strategy. Nowadays, this strategy is mainly present for backward compatibility.\nA relative import will be resolved relative to the importing file. So import { b } from \u0026quot;./moduleB\u0026quot; in source file /root/src/folder/A.ts would result in the following lookups:\n/root/src/folder/moduleB.ts /root/src/folder/moduleB.d.ts For non-relative module imports, however, the compiler walks up the directory tree starting with the directory containing the importing file, trying to locate a matching definition file.\nFor example:\nA non-relative import to moduleB such as import { b } from \u0026quot;moduleB\u0026quot;, in a source file /root/src/folder/A.ts, would result in attempting the following locations for locating \u0026quot;moduleB\u0026quot;:\n/root/src/folder/moduleB.ts /root/src/folder/moduleB.d.ts /root/src/moduleB.ts /root/src/moduleB.d.ts /root/moduleB.ts /root/moduleB.d.ts /moduleB.ts /moduleB.d.ts Node # This resolution strategy attempts to mimic the Node.js module resolution mechanism at runtime. The full Node.js resolution algorithm is outlined in Node.js module documentation.\nHow Node.js resolves modules # To understand what steps the TS compiler will follow, it is important to shed some light on Node.js modules. Traditionally, imports in Node.js are performed by calling a function named require. The behavior Node.js takes will differ depending on if require is given a relative path or a non-relative path.\nRelative paths are fairly straightforward. As an example, let\u0026rsquo;s consider a file located at /root/src/moduleA.js, which contains the import var x = require(\u0026quot;./moduleB\u0026quot;); Node.js resolves that import in the following order:\nAsk the file named /root/src/moduleB.js, if it exists.\nAsk the folder /root/src/moduleB if it contains a file named package.json that specifies a \u0026quot;main\u0026quot; module. In our example, if Node.js found the file /root/src/moduleB/package.json containing { \u0026quot;main\u0026quot;: \u0026quot;lib/mainModule.js\u0026quot; }, then Node.js will refer to /root/src/moduleB/lib/mainModule.js.\nAsk the folder /root/src/moduleB if it contains a file named index.js. That file is implicitly considered that folder\u0026rsquo;s \u0026ldquo;main\u0026rdquo; module.\nYou can read more about this in Node.js documentation on file modules and folder modules.\nHowever, resolution for a non-relative module name is performed differently. Node will look for your modules in special folders named node_modules. A node_modules folder can be on the same level as the current file, or higher up in the directory chain. Node will walk up the directory chain, looking through each node_modules until it finds the module you tried to load.\nFollowing up our example above, consider if /root/src/moduleA.js instead used a non-relative path and had the import var x = require(\u0026quot;moduleB\u0026quot;);. Node would then try to resolve moduleB to each of the locations until one worked.\n/root/src/node_modules/moduleB.js /root/src/node_modules/moduleB/package.json (if it specifies a \u0026quot;main\u0026quot; property) /root/src/node_modules/moduleB/index.js\n\\ /root/node_modules/moduleB.js /root/node_modules/moduleB/package.json (if it specifies a \u0026quot;main\u0026quot; property) /root/node_modules/moduleB/index.js\n\\ /node_modules/moduleB.js /node_modules/moduleB/package.json (if it specifies a \u0026quot;main\u0026quot; property) /node_modules/moduleB/index.js Notice that Node.js jumped up a directory in steps (4) and (7).\nYou can read more about the process in Node.js documentation on loading modules from node_modules.\nHow TypeScript resolves modules # TypeScript will mimic the Node.js run-time resolution strategy in order to locate definition files for modules at compile-time. To accomplish this, TypeScript overlays the TypeScript source file extensions (.ts, .tsx, and .d.ts) over Node\u0026rsquo;s resolution logic. TypeScript will also use a field in package.json named types to mirror the purpose of \u0026quot;main\u0026quot; - the compiler will use it to find the \u0026ldquo;main\u0026rdquo; definition file to consult.\nFor example, an import statement like import { b } from \u0026quot;./moduleB\u0026quot; in /root/src/moduleA.ts would result in attempting the following locations for locating \u0026quot;./moduleB\u0026quot;:\n/root/src/moduleB.ts /root/src/moduleB.tsx /root/src/moduleB.d.ts /root/src/moduleB/package.json (if it specifies a types property) /root/src/moduleB/index.ts /root/src/moduleB/index.tsx /root/src/moduleB/index.d.ts Recall that Node.js looked for a file named moduleB.js, then an applicable package.json, and then for an index.js.\nSimilarly, a non-relative import will follow the Node.js resolution logic, first looking up a file, then looking up an applicable folder. So import { b } from \u0026quot;moduleB\u0026quot; in source file /root/src/moduleA.ts would result in the following lookups:\n/root/src/node_modules/moduleB.ts /root/src/node_modules/moduleB.tsx /root/src/node_modules/moduleB.d.ts /root/src/node_modules/moduleB/package.json (if it specifies a types property) /root/src/node_modules/@types/moduleB.d.ts /root/src/node_modules/moduleB/index.ts /root/src/node_modules/moduleB/index.tsx /root/src/node_modules/moduleB/index.d.ts\n\\ /root/node_modules/moduleB.ts /root/node_modules/moduleB.tsx /root/node_modules/moduleB.d.ts /root/node_modules/moduleB/package.json (if it specifies a types property) /root/node_modules/@types/moduleB.d.ts /root/node_modules/moduleB/index.ts /root/node_modules/moduleB/index.tsx /root/node_modules/moduleB/index.d.ts\n\\ /node_modules/moduleB.ts /node_modules/moduleB.tsx /node_modules/moduleB.d.ts /node_modules/moduleB/package.json (if it specifies a types property) /node_modules/@types/moduleB.d.ts /node_modules/moduleB/index.ts /node_modules/moduleB/index.tsx /node_modules/moduleB/index.d.ts Don\u0026rsquo;t be intimidated by the number of steps here - TypeScript is still only jumping up directories twice at steps (9) and (17). This is really no more complex than what Node.js itself is doing.\nAdditional module resolution flags # A project source layout sometimes does not match that of the output. Usually a set of build steps result in generating the final output. These include compiling .ts files into .js, and copying dependencies from different source locations to a single output location. The net result is that modules at runtime may have different names than the source files containing their definitions. Or module paths in the final output may not match their corresponding source file paths at compile time.\nThe TypeScript compiler has a set of additional flags to inform the compiler of transformations that are expected to happen to the sources to generate the final output.\nIt is important to note that the compiler will not perform any of these transformations; it just uses these pieces of information to guide the process of resolving a module import to its definition file.\nBase URL # Using a baseUrl is a common practice in applications using AMD module loaders where modules are \u0026ldquo;deployed\u0026rdquo; to a single folder at run-time. The sources of these modules can live in different directories, but a build script will put them all together.\nSetting baseUrl informs the compiler where to find modules. All module imports with non-relative names are assumed to be relative to the baseUrl.\nValue of baseUrl is determined as either:\nvalue of baseUrl command line argument (if given path is relative, it is computed based on current directory) value of baseUrl property in tsconfig.json (if given path is relative, it is computed based on the location of tsconfig.json) Note that relative module imports are not impacted by setting the baseUrl, as they are always resolved relative to their importing files.\nYou can find more documentation on baseUrl in RequireJS and SystemJS documentation.\nPath mapping # Sometimes modules are not directly located under baseUrl. For instance, an import to a module \u0026quot;jquery\u0026quot; would be translated at runtime to \u0026quot;node_modules/jquery/dist/jquery.slim.min.js\u0026quot;. Loaders use a mapping configuration to map module names to files at run-time, see RequireJs documentation and SystemJS documentation.\nThe TypeScript compiler supports the declaration of such mappings using paths property in tsconfig.json files. Here is an example for how to specify the paths property for jquery.\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;baseUrl\u0026#34;: \u0026#34;.\u0026#34;, // This must be specified if \u0026#34;paths\u0026#34; is. \u0026#34;paths\u0026#34;: { \u0026#34;jquery\u0026#34;: [\u0026#34;node_modules/jquery/dist/jquery\u0026#34;] // This mapping is relative to \u0026#34;baseUrl\u0026#34; } } } Please notice that paths are resolved relative to baseUrl. When setting baseUrl to a value other than \u0026quot;.\u0026quot;, i.e. the directory of tsconfig.json, the mappings must be changed accordingly. Say, you set \u0026quot;baseUrl\u0026quot;: \u0026quot;./src\u0026quot; in the above example, then jquery should be mapped to \u0026quot;../node_modules/jquery/dist/jquery\u0026quot;.\nUsing paths also allows for more sophisticated mappings including multiple fall back locations. Consider a project configuration where only some modules are available in one location, and the rest are in another. A build step would put them all together in one place. The project layout may look like:\nprojectRoot ├── folder1 │ ├── file1.ts (imports \u0026#39;folder1/file2\u0026#39; and \u0026#39;folder2/file3\u0026#39;) │ └── file2.ts ├── generated │ ├── folder1 │ └── folder2 │ └── file3.ts └── tsconfig.json The corresponding tsconfig.json would look like:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;baseUrl\u0026#34;: \u0026#34;.\u0026#34;, \u0026#34;paths\u0026#34;: { \u0026#34;*\u0026#34;: [\u0026#34;*\u0026#34;, \u0026#34;generated/*\u0026#34;] } } } This tells the compiler for any module import that matches the pattern \u0026quot;*\u0026quot; (i.e. all values), to look in two locations:\n\u0026quot;*\u0026quot;: meaning the same name unchanged, so map \u0026lt;moduleName\u0026gt; =\u0026gt; \u0026lt;baseUrl\u0026gt;/\u0026lt;moduleName\u0026gt; \u0026quot;generated/*\u0026quot; meaning the module name with an appended prefix \u0026ldquo;generated\u0026rdquo;, so map \u0026lt;moduleName\u0026gt; =\u0026gt; \u0026lt;baseUrl\u0026gt;/generated/\u0026lt;moduleName\u0026gt; Following this logic, the compiler will attempt to resolve the two imports as such:\nimport \u0026lsquo;folder1/file2\u0026rsquo;:\npattern \u0026lsquo;*\u0026rsquo; is matched and wildcard captures the whole module name try first substitution in the list: \u0026lsquo;*\u0026rsquo; -\u0026gt; folder1/file2 result of substitution is non-relative name - combine it with baseUrl -\u0026gt; projectRoot/folder1/file2.ts. File exists. Done. import \u0026lsquo;folder2/file3\u0026rsquo;:\npattern \u0026lsquo;*\u0026rsquo; is matched and wildcard captures the whole module name try first substitution in the list: \u0026lsquo;*\u0026rsquo; -\u0026gt; folder2/file3 result of substitution is non-relative name - combine it with baseUrl -\u0026gt; projectRoot/folder2/file3.ts. File does not exist, move to the second substitution second substitution \u0026lsquo;generated/*\u0026rsquo; -\u0026gt; generated/folder2/file3 result of substitution is non-relative name - combine it with baseUrl -\u0026gt; projectRoot/generated/folder2/file3.ts. File exists. Done. Virtual Directories with rootDirs # Sometimes the project sources from multiple directories at compile time are all combined to generate a single output directory. This can be viewed as a set of source directories create a \u0026ldquo;virtual\u0026rdquo; directory.\nUsing rootDirs, you can inform the compiler of the roots making up this \u0026ldquo;virtual\u0026rdquo; directory; and thus the compiler can resolve relative modules imports within these \u0026ldquo;virtual\u0026rdquo; directories as if they were merged together in one directory.\nFor example consider this project structure:\nsrc └── views └── view1.ts (imports \u0026#39;./template1\u0026#39;) └── view2.ts generated └── templates └── views └── template1.ts (imports \u0026#39;./view2\u0026#39;) Files in src/views are user code for some UI controls. Files in generated/templates are UI template binding code auto-generated by a template generator as part of the build. A build step will copy the files in /src/views and /generated/templates/views to the same directory in the output. At run-time, a view can expect its template to exist next to it, and thus should import it using a relative name as \u0026quot;./template\u0026quot;.\nTo specify this relationship to the compiler, use rootDirs. rootDirs specify a list of roots whose contents are expected to merge at run-time. So following our example, the tsconfig.json file should look like:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;rootDirs\u0026#34;: [\u0026#34;src/views\u0026#34;, \u0026#34;generated/templates/views\u0026#34;] } } Every time the compiler sees a relative module import in a subfolder of one of the rootDirs, it will attempt to look for this import in each of the entries of rootDirs.\nThe flexibility of rootDirs is not limited to specifying a list of physical source directories that are logically merged. The supplied array may include any number of ad hoc, arbitrary directory names, regardless of whether they exist or not. This allows the compiler to capture sophisticated bundling and runtime features such as conditional inclusion and project specific loader plugins in a type safe way.\nConsider an internationalization scenario where a build tool automatically generates locale specific bundles by interpolating a special path token, say #{locale}, as part of a relative module path such as ./#{locale}/messages. In this hypothetical setup the tool enumerates supported locales, mapping the abstracted path into ./zh/messages, ./de/messages, and so forth.\nAssume that each of these modules exports an array of strings. For example ./zh/messages might contain:\nexport default [\u0026#34;您好吗\u0026#34;, \u0026#34;很高兴认识你\u0026#34;]; By leveraging rootDirs we can inform the compiler of this mapping and thereby allow it to safely resolve ./#{locale}/messages, even though the directory will never exist. For example, with the following tsconfig.json:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;rootDirs\u0026#34;: [\u0026#34;src/zh\u0026#34;, \u0026#34;src/de\u0026#34;, \u0026#34;src/#{locale}\u0026#34;] } } The compiler will now resolve import messages from './#{locale}/messages' to import messages from './zh/messages' for tooling purposes, allowing development in a locale agnostic manner without compromising design time support.\nTracing module resolution # As discussed earlier, the compiler can visit files outside the current folder when resolving a module. This can be hard when diagnosing why a module is not resolved, or is resolved to an incorrect definition. Enabling the compiler module resolution tracing using traceResolution provides insight in what happened during the module resolution process.\nLet\u0026rsquo;s say we have a sample application that uses the typescript module. app.ts has an import like import * as ts from \u0026quot;typescript\u0026quot;.\n│ tsconfig.json ├───node_modules │ └───typescript │ └───lib │ typescript.d.ts └───src app.ts Invoking the compiler with traceResolution\ntsc --traceResolution Results in an output such as:\n======== Resolving module \u0026#39;typescript\u0026#39; from \u0026#39;src/app.ts\u0026#39;. ======== Module resolution kind is not specified, using \u0026#39;NodeJs\u0026#39;. Loading module \u0026#39;typescript\u0026#39; from \u0026#39;node_modules\u0026#39; folder. File \u0026#39;src/node_modules/typescript.ts\u0026#39; does not exist. File \u0026#39;src/node_modules/typescript.tsx\u0026#39; does not exist. File \u0026#39;src/node_modules/typescript.d.ts\u0026#39; does not exist. File \u0026#39;src/node_modules/typescript/package.json\u0026#39; does not exist. File \u0026#39;node_modules/typescript.ts\u0026#39; does not exist. File \u0026#39;node_modules/typescript.tsx\u0026#39; does not exist. File \u0026#39;node_modules/typescript.d.ts\u0026#39; does not exist. Found \u0026#39;package.json\u0026#39; at \u0026#39;node_modules/typescript/package.json\u0026#39;. \u0026#39;package.json\u0026#39; has \u0026#39;types\u0026#39; field \u0026#39;./lib/typescript.d.ts\u0026#39; that references \u0026#39;node_modules/typescript/lib/typescript.d.ts\u0026#39;. File \u0026#39;node_modules/typescript/lib/typescript.d.ts\u0026#39; exist - use it as a module resolution result. ======== Module name \u0026#39;typescript\u0026#39; was successfully resolved to \u0026#39;node_modules/typescript/lib/typescript.d.ts\u0026#39;. ======== Things to look out for # Name and location of the import ======== Resolving module \u0026rsquo;typescript\u0026rsquo; from \u0026lsquo;src/app.ts\u0026rsquo;. # The strategy the compiler is following Module resolution kind is not specified, using \u0026lsquo;NodeJs\u0026rsquo;.\nLoading of types from npm packages \u0026lsquo;package.json\u0026rsquo; has \u0026rsquo;types\u0026rsquo; field \u0026lsquo;./lib/typescript.d.ts\u0026rsquo; that references \u0026rsquo;node_modules/typescript/lib/typescript.d.ts\u0026rsquo;.\nFinal result ======== Module name \u0026rsquo;typescript\u0026rsquo; was successfully resolved to \u0026rsquo;node_modules/typescript/lib/typescript.d.ts\u0026rsquo;. ========\nUsing --noResolve # Normally the compiler will attempt to resolve all module imports before it starts the compilation process. Every time it successfully resolves an import to a file, the file is added to the set of files the compiler will process later on.\nThe noResolve compiler options instructs the compiler not to \u0026ldquo;add\u0026rdquo; any files to the compilation that were not passed on the command line. It will still try to resolve the module to files, but if the file is not specified, it will not be included.\nFor instance:\napp.ts # import * as A from \u0026#34;moduleA\u0026#34;; // OK, \u0026#39;moduleA\u0026#39; passed on the command-line import * as B from \u0026#34;moduleB\u0026#34;; // Error TS2307: Cannot find module \u0026#39;moduleB\u0026#39;. tsc app.ts moduleA.ts --noResolve Compiling app.ts using noResolve should result in:\nCorrectly finding moduleA as it was passed on the command-line. Error for not finding moduleB as it was not passed. Common Questions # Why does a module in the exclude list still get picked up by the compiler? # tsconfig.json turns a folder into a \u0026ldquo;project\u0026rdquo;. Without specifying any “exclude” or “files” entries, all files in the folder containing the tsconfig.json and all its sub-directories are included in your compilation. If you want to exclude some of the files use “exclude”, if you would rather specify all the files instead of letting the compiler look them up, use “files”.\nThat was tsconfig.json automatic inclusion. That does not embed module resolution as discussed above. If the compiler identified a file as a target of a module import, it will be included in the compilation regardless if it was excluded in the previous steps.\nSo to exclude a file from the compilation, you need to exclude it and all files that have an import or /// \u0026lt;reference path=\u0026quot;...\u0026quot; /\u0026gt; directive to it.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/module-resolution.html{._attribution-link} :::\n"},{"id":294,"href":"/docs/references/languages/typescript/modules/","title":"Modules","section":"Typescript","content":" Modules # JavaScript has a long history of different ways to handle modularizing code. Having been around since 2012, TypeScript has implemented support for a lot of these formats, but over time the community and the JavaScript specification has converged on a format called ES Modules (or ES6 modules). You might know it as the import/export syntax.\nES Modules was added to the JavaScript spec in 2015, and by 2020 had broad support in most web browsers and JavaScript runtimes.\nFor focus, the handbook will cover both ES Modules and its popular pre-cursor CommonJS module.exports = syntax, and you can find information about the other module patterns in the reference section under Modules.\nHow JavaScript Modules are Defined # In TypeScript, just as in ECMAScript 2015, any file containing a top-level import or export is considered a module.\nConversely, a file without any top-level import or export declarations is treated as a script whose contents are available in the global scope (and therefore to modules as well).\nModules are executed within their own scope, not in the global scope. This means that variables, functions, classes, etc. declared in a module are not visible outside the module unless they are explicitly exported using one of the export forms. Conversely, to consume a variable, function, class, interface, etc. exported from a different module, it has to be imported using one of the import forms.\nNon-modules # Before we start, it\u0026rsquo;s important to understand what TypeScript considers a module. The JavaScript specification declares that any JavaScript files without an export or top-level await should be considered a script and not a module.\nInside a script file variables and types are declared to be in the shared global scope, and it\u0026rsquo;s assumed that you\u0026rsquo;ll either use the outFile compiler option to join multiple input files into one output file, or use multiple \u0026lt;script\u0026gt; tags in your HTML to load these files (in the correct order!).\nIf you have a file that doesn\u0026rsquo;t currently have any imports or exports, but you want to be treated as a module, add the line:\nexport {}; which will change the file to be a module exporting nothing. This syntax works regardless of your module target.\nModules in TypeScript # Additional Reading:\nImpatient JS (Modules)\nMDN: JavaScript Modules\\\nThere are three main things to consider when writing module-based code in TypeScript:\nSyntax: What syntax do I want to use to import and export things? Module Resolution: What is the relationship between module names (or paths) and files on disk? Module Output Target: What should my emitted JavaScript module look like? ES Module Syntax # A file can declare a main export via export default:\n// @filename: hello.ts export default function helloWorld() { console.log(\u0026#34;Hello, world!\u0026#34;); } This is then imported via:\nimport helloWorld from \u0026#34;./hello.js\u0026#34;; helloWorld(); In addition to the default export, you can have more than one export of variables and functions via the export by omitting default:\n// @filename: maths.ts export var pi = 3.14; export let squareTwo = 1.41; export const phi = 1.61; export class RandomNumberGenerator {} export function absolute(num: number) { if (num \u0026lt; 0) return num * -1; return num; } These can be used in another file via the import syntax:\nimport { pi, phi, absolute } from \u0026#34;./maths.js\u0026#34;; console.log(pi); const absPhi = absolute(phi); Additional Import Syntax # An import can be renamed using a format like import {old as new}:\nimport { pi as π } from \u0026#34;./maths.js\u0026#34;; console.log(π); You can mix and match the above syntax into a single import:\n// @filename: maths.ts export const pi = 3.14; export default class RandomNumberGenerator {} // @filename: app.ts import RandomNumberGenerator, { pi as π } from \u0026#34;./maths.js\u0026#34;; RandomNumberGenerator; console.log(π); You can take all of the exported objects and put them into a single namespace using * as name:\n// @filename: app.ts import * as math from \u0026#34;./maths.js\u0026#34;; console.log(math.pi); const positivePhi = math.absolute(math.phi); You can import a file and not include any variables into your current module via import \u0026quot;./file\u0026quot;:\n// @filename: app.ts import \u0026#34;./maths.js\u0026#34;; console.log(\u0026#34;3.14\u0026#34;); In this case, the import does nothing. However, all of the code in maths.ts was evaluated, which could trigger side-effects which affect other objects.\nTypeScript Specific ES Module Syntax # Types can be exported and imported using the same syntax as JavaScript values:\n// @filename: animal.ts export type Cat = { breed: string; yearOfBirth: number }; export interface Dog { breeds: string[]; yearOfBirth: number; } // @filename: app.ts import { Cat, Dog } from \u0026#34;./animal.js\u0026#34;; type Animals = Cat | Dog; TypeScript has extended the import syntax with two concepts for declaring an import of a type:\nimport type # Which is an import statement which can only import types:\n// @filename: animal.ts export type Cat = { breed: string; yearOfBirth: number }; export type Dog = { breeds: string[]; yearOfBirth: number }; export const createCatName = () =\u0026gt; \u0026#34;fluffy\u0026#34;; // @filename: valid.ts import type { Cat, Dog } from \u0026#34;./animal.js\u0026#34;; export type Animals = Cat | Dog; // @filename: app.ts import type { createCatName } from \u0026#34;./animal.js\u0026#34;; const name = createCatName(); Inline type imports # TypeScript 4.5 also allows for individual imports to be prefixed with type to indicate that the imported reference is a type:\n// @filename: app.ts import { createCatName, type Cat, type Dog } from \u0026#34;./animal.js\u0026#34;; export type Animals = Cat | Dog; const name = createCatName(); Together these allow a non-TypeScript transpiler like Babel, swc or esbuild to know what imports can be safely removed.\nES Module Syntax with CommonJS Behavior # TypeScript has ES Module syntax which directly correlates to a CommonJS and AMD require. Imports using ES Module are for most cases the same as the require from those environments, but this syntax ensures you have a 1 to 1 match in your TypeScript file with the CommonJS output:\nimport fs = require(\u0026#34;fs\u0026#34;); const code = fs.readFileSync(\u0026#34;hello.ts\u0026#34;, \u0026#34;utf8\u0026#34;); You can learn more about this syntax in the modules reference page.\nCommonJS Syntax # CommonJS is the format which most modules on npm are delivered in. Even if you are writing using the ES Modules syntax above, having a brief understanding of how CommonJS syntax works will help you debug easier.\nExporting # Identifiers are exported via setting the exports property on a global called module.\nfunction absolute(num: number) { if (num \u0026lt; 0) return num * -1; return num; } module.exports = { pi: 3.14, squareTwo: 1.41, phi: 1.61, absolute, }; Then these files can be imported via a require statement:\nconst maths = require(\u0026#34;./maths\u0026#34;); maths.pi; Or you can simplify a bit using the destructuring feature in JavaScript:\nconst { squareTwo } = require(\u0026#34;./maths\u0026#34;); squareTwo; CommonJS and ES Modules interop # There is a mis-match in features between CommonJS and ES Modules regarding the distinction between a default import and a module namespace object import. TypeScript has a compiler flag to reduce the friction between the two different sets of constraints with esModuleInterop.\nTypeScript\u0026rsquo;s Module Resolution Options # Module resolution is the process of taking a string from the import or require statement, and determining what file that string refers to.\nTypeScript includes two resolution strategies: Classic and Node. Classic, the default when the compiler option module is not commonjs, is included for backwards compatibility. The Node strategy replicates how Node.js works in CommonJS mode, with additional checks for .ts and .d.ts.\nThere are many TSConfig flags which influence the module strategy within TypeScript: moduleResolution, baseUrl, paths, rootDirs.\nFor the full details on how these strategies work, you can consult the Module Resolution.\nTypeScript\u0026rsquo;s Module Output Options # There are two options which affect the emitted JavaScript output:\ntarget which determines which JS features are downleveled (converted to run in older JavaScript runtimes) and which are left intact module which determines what code is used for modules to interact with each other Which target you use is determined by the features available in the JavaScript runtime you expect to run the TypeScript code in. That could be: the oldest web browser you support, the lowest version of Node.js you expect to run on or could come from unique constraints from your runtime - like Electron for example.\nAll communication between modules happens via a module loader, the compiler option module determines which one is used. At runtime the module loader is responsible for locating and executing all dependencies of a module before executing it.\nFor example, here is a TypeScript file using ES Modules syntax, showcasing a few different options for module:\nimport { valueOfPi } from \u0026#34;./constants.js\u0026#34;; export const twoPi = valueOfPi * 2; ES2020 # import { valueOfPi } from \u0026#34;./constants.js\u0026#34;; export const twoPi = valueOfPi * 2; CommonJS # \u0026#34;use strict\u0026#34;; Object.defineProperty(exports, \u0026#34;__esModule\u0026#34;, { value: true }); exports.twoPi = void 0; const constants_js_1 = require(\u0026#34;./constants.js\u0026#34;); exports.twoPi = constants_js_1.valueOfPi * 2; UMD # (function (factory) { if (typeof module === \u0026#34;object\u0026#34; \u0026amp;\u0026amp; typeof module.exports === \u0026#34;object\u0026#34;) { var v = factory(require, exports); if (v !== undefined) module.exports = v; } else if (typeof define === \u0026#34;function\u0026#34; \u0026amp;\u0026amp; define.amd) { define([\u0026#34;require\u0026#34;, \u0026#34;exports\u0026#34;, \u0026#34;./constants.js\u0026#34;], factory); } })(function (require, exports) { \u0026#34;use strict\u0026#34;; Object.defineProperty(exports, \u0026#34;__esModule\u0026#34;, { value: true }); exports.twoPi = void 0; const constants_js_1 = require(\u0026#34;./constants.js\u0026#34;); exports.twoPi = constants_js_1.valueOfPi * 2; }); Note that ES2020 is effectively the same as the original index.ts.\nYou can see all of the available options and what their emitted JavaScript code looks like in the TSConfig Reference for module.\nTypeScript namespaces # TypeScript has its own module format called namespaces which pre-dates the ES Modules standard. This syntax has a lot of useful features for creating complex definition files, and still sees active use in DefinitelyTyped. While not deprecated, the majority of the features in namespaces exist in ES Modules and we recommend you use that to align with JavaScript\u0026rsquo;s direction. You can learn more about namespaces in the namespaces reference page.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/modules.html{._attribution-link} :::\n"},{"id":295,"href":"/docs/references/languages/typescript/namespaces-and-modules/","title":"Namespaces and Modules","section":"Typescript","content":" Namespaces and Modules # This post outlines the various ways to organize your code using modules and namespaces in TypeScript. We\u0026rsquo;ll also go over some advanced topics of how to use namespaces and modules, and address some common pitfalls when using them in TypeScript.\nSee the Modules documentation for more information about ES Modules. See the Namespaces documentation for more information about TypeScript namespaces.\nNote: In very old versions of TypeScript namespaces were called \u0026lsquo;Internal Modules\u0026rsquo;, these pre-date JavaScript module systems.\nUsing Modules # Modules can contain both code and declarations.\nModules also have a dependency on a module loader (such as CommonJs/Require.js) or a runtime which supports ES Modules. Modules provide for better code reuse, stronger isolation and better tooling support for bundling.\nIt is also worth noting that, for Node.js applications, modules are the default and we recommended modules over namespaces in modern code.\nStarting with ECMAScript 2015, modules are native part of the language, and should be supported by all compliant engine implementations. Thus, for new projects modules would be the recommended code organization mechanism.\nUsing Namespaces # Namespaces are a TypeScript-specific way to organize code.\nNamespaces are simply named JavaScript objects in the global namespace. This makes namespaces a very simple construct to use. Unlike modules, they can span multiple files, and can be concatenated using outFile. Namespaces can be a good way to structure your code in a Web Application, with all dependencies included as \u0026lt;script\u0026gt; tags in your HTML page.\nJust like all global namespace pollution, it can be hard to identify component dependencies, especially in a large application.\nPitfalls of Namespaces and Modules # In this section we\u0026rsquo;ll describe various common pitfalls in using namespaces and modules, and how to avoid them.\n/// \u0026lt;reference\u0026gt;-ing a module # A common mistake is to try to use the /// \u0026lt;reference ... /\u0026gt; syntax to refer to a module file, rather than using an import statement. To understand the distinction, we first need to understand how the compiler can locate the type information for a module based on the path of an import (e.g. the ... in import x from \u0026quot;...\u0026quot;;, import x = require(\u0026quot;...\u0026quot;);, etc.) path.\nThe compiler will try to find a .ts, .tsx, and then a .d.ts with the appropriate path. If a specific file could not be found, then the compiler will look for an ambient module declaration. Recall that these need to be declared in a .d.ts file.\nmyModules.d.ts\n// In a .d.ts file or .ts file that is not a module: declare module \u0026#34;SomeModule\u0026#34; { export function fn(): string; } myOtherModule.ts\n/// \u0026lt;reference path=\u0026#34;myModules.d.ts\u0026#34; /\u0026gt; import * as m from \u0026#34;SomeModule\u0026#34;; The reference tag here allows us to locate the declaration file that contains the declaration for the ambient module. This is how the node.d.ts file that several of the TypeScript samples use is consumed.\nNeedless Namespacing # If you\u0026rsquo;re converting a program from namespaces to modules, it can be easy to end up with a file that looks like this:\nshapes.ts\nexport namespace Shapes { export class Triangle { /* ... */ } export class Square { /* ... */ } } The top-level namespace here Shapes wraps up Triangle and Square for no reason. This is confusing and annoying for consumers of your module:\nshapeConsumer.ts\nimport * as shapes from \u0026#34;./shapes\u0026#34;; let t = new shapes.Shapes.Triangle(); // shapes.Shapes? A key feature of modules in TypeScript is that two different modules will never contribute names to the same scope. Because the consumer of a module decides what name to assign it, there\u0026rsquo;s no need to proactively wrap up the exported symbols in a namespace.\nTo reiterate why you shouldn\u0026rsquo;t try to namespace your module contents, the general idea of namespacing is to provide logical grouping of constructs and to prevent name collisions. Because the module file itself is already a logical grouping, and its top-level name is defined by the code that imports it, it\u0026rsquo;s unnecessary to use an additional module layer for exported objects.\nHere\u0026rsquo;s a revised example:\nshapes.ts\nexport class Triangle { /* ... */ } export class Square { /* ... */ } shapeConsumer.ts\nimport * as shapes from \u0026#34;./shapes\u0026#34;; let t = new shapes.Triangle(); Trade-offs of Modules # Just as there is a one-to-one correspondence between JS files and modules, TypeScript has a one-to-one correspondence between module source files and their emitted JS files. One effect of this is that it\u0026rsquo;s not possible to concatenate multiple module source files depending on the module system you target. For instance, you can\u0026rsquo;t use the outFile option while targeting commonjs or umd, but with TypeScript 1.8 and later, it\u0026rsquo;s possible to use outFile when targeting amd or system.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/namespaces-and-modules.html{._attribution-link} :::\n"},{"id":296,"href":"/docs/references/languages/typescript/namespaces/","title":"Namespaces","section":"Typescript","content":" Namespaces # A note about terminology: It\u0026rsquo;s important to note that in TypeScript 1.5, the nomenclature has changed. \u0026ldquo;Internal modules\u0026rdquo; are now \u0026ldquo;namespaces\u0026rdquo;. \u0026ldquo;External modules\u0026rdquo; are now simply \u0026ldquo;modules\u0026rdquo;, as to align with ECMAScript 2015\u0026rsquo;s terminology, (namely that module X { is equivalent to the now-preferred namespace X {).\nThis post outlines the various ways to organize your code using namespaces (previously \u0026ldquo;internal modules\u0026rdquo;) in TypeScript. As we alluded in our note about terminology, \u0026ldquo;internal modules\u0026rdquo; are now referred to as \u0026ldquo;namespaces\u0026rdquo;. Additionally, anywhere the module keyword was used when declaring an internal module, the namespace keyword can and should be used instead. This avoids confusing new users by overloading them with similarly named terms.\nFirst steps # Let\u0026rsquo;s start with the program we\u0026rsquo;ll be using as our example throughout this page. We\u0026rsquo;ve written a small set of simplistic string validators, as you might write to check a user\u0026rsquo;s input on a form in a webpage or check the format of an externally-provided data file.\nValidators in a single file # interface StringValidator { isAcceptable(s: string): boolean; } let lettersRegexp = /^[A-Za-z]+$/; let numberRegexp = /^[0-9]+$/; class LettersOnlyValidator implements StringValidator { isAcceptable(s: string) { return lettersRegexp.test(s); } } class ZipCodeValidator implements StringValidator { isAcceptable(s: string) { return s.length === 5 \u0026amp;\u0026amp; numberRegexp.test(s); } } // Some samples to try let strings = [\u0026#34;Hello\u0026#34;, \u0026#34;98052\u0026#34;, \u0026#34;101\u0026#34;]; // Validators to use let validators: { [s: string]: StringValidator } = {}; validators[\u0026#34;ZIP code\u0026#34;] = new ZipCodeValidator(); validators[\u0026#34;Letters only\u0026#34;] = new LettersOnlyValidator(); // Show whether each string passed each validator for (let s of strings) { for (let name in validators) { let isMatch = validators[name].isAcceptable(s); console.log(`\u0026#39;${s}\u0026#39; ${isMatch ? \u0026#34;matches\u0026#34; : \u0026#34;does not match\u0026#34;} \u0026#39;${name}\u0026#39;.`); } } Namespacing # As we add more validators, we\u0026rsquo;re going to want to have some kind of organization scheme so that we can keep track of our types and not worry about name collisions with other objects. Instead of putting lots of different names into the global namespace, let\u0026rsquo;s wrap up our objects into a namespace.\nIn this example, we\u0026rsquo;ll move all validator-related entities into a namespace called Validation. Because we want the interfaces and classes here to be visible outside the namespace, we preface them with export. Conversely, the variables lettersRegexp and numberRegexp are implementation details, so they are left unexported and will not be visible to code outside the namespace. In the test code at the bottom of the file, we now need to qualify the names of the types when used outside the namespace, e.g. Validation.LettersOnlyValidator.\nNamespaced Validators # namespace Validation { export interface StringValidator { isAcceptable(s: string): boolean; } const lettersRegexp = /^[A-Za-z]+$/; const numberRegexp = /^[0-9]+$/; export class LettersOnlyValidator implements StringValidator { isAcceptable(s: string) { return lettersRegexp.test(s); } } export class ZipCodeValidator implements StringValidator { isAcceptable(s: string) { return s.length === 5 \u0026amp;\u0026amp; numberRegexp.test(s); } } } // Some samples to try let strings = [\u0026#34;Hello\u0026#34;, \u0026#34;98052\u0026#34;, \u0026#34;101\u0026#34;]; // Validators to use let validators: { [s: string]: Validation.StringValidator } = {}; validators[\u0026#34;ZIP code\u0026#34;] = new Validation.ZipCodeValidator(); validators[\u0026#34;Letters only\u0026#34;] = new Validation.LettersOnlyValidator(); // Show whether each string passed each validator for (let s of strings) { for (let name in validators) { console.log( `\u0026#34;${s}\u0026#34; - ${ validators[name].isAcceptable(s) ? \u0026#34;matches\u0026#34; : \u0026#34;does not match\u0026#34; } ${name}` ); } } Splitting Across Files # As our application grows, we\u0026rsquo;ll want to split the code across multiple files to make it easier to maintain.\nMulti-file namespaces # Here, we\u0026rsquo;ll split our Validation namespace across many files. Even though the files are separate, they can each contribute to the same namespace and can be consumed as if they were all defined in one place. Because there are dependencies between files, we\u0026rsquo;ll add reference tags to tell the compiler about the relationships between the files. Our test code is otherwise unchanged.\nValidation.ts # namespace Validation { export interface StringValidator { isAcceptable(s: string): boolean; } } LettersOnlyValidator.ts # /// \u0026lt;reference path=\u0026#34;Validation.ts\u0026#34; /\u0026gt; namespace Validation { const lettersRegexp = /^[A-Za-z]+$/; export class LettersOnlyValidator implements StringValidator { isAcceptable(s: string) { return lettersRegexp.test(s); } } } ZipCodeValidator.ts # /// \u0026lt;reference path=\u0026#34;Validation.ts\u0026#34; /\u0026gt; namespace Validation { const numberRegexp = /^[0-9]+$/; export class ZipCodeValidator implements StringValidator { isAcceptable(s: string) { return s.length === 5 \u0026amp;\u0026amp; numberRegexp.test(s); } } } Test.ts # /// \u0026lt;reference path=\u0026#34;Validation.ts\u0026#34; /\u0026gt; /// \u0026lt;reference path=\u0026#34;LettersOnlyValidator.ts\u0026#34; /\u0026gt; /// \u0026lt;reference path=\u0026#34;ZipCodeValidator.ts\u0026#34; /\u0026gt; // Some samples to try let strings = [\u0026#34;Hello\u0026#34;, \u0026#34;98052\u0026#34;, \u0026#34;101\u0026#34;]; // Validators to use let validators: { [s: string]: Validation.StringValidator } = {}; validators[\u0026#34;ZIP code\u0026#34;] = new Validation.ZipCodeValidator(); validators[\u0026#34;Letters only\u0026#34;] = new Validation.LettersOnlyValidator(); // Show whether each string passed each validator for (let s of strings) { for (let name in validators) { console.log( `\u0026#34;${s}\u0026#34; - ${ validators[name].isAcceptable(s) ? \u0026#34;matches\u0026#34; : \u0026#34;does not match\u0026#34; } ${name}` ); } } Once there are multiple files involved, we\u0026rsquo;ll need to make sure all of the compiled code gets loaded. There are two ways of doing this.\nFirst, we can use concatenated output using the outFile option to compile all of the input files into a single JavaScript output file:\ntsc --outFile sample.js Test.ts The compiler will automatically order the output file based on the reference tags present in the files. You can also specify each file individually:\ntsc --outFile sample.js Validation.ts LettersOnlyValidator.ts ZipCodeValidator.ts Test.ts Alternatively, we can use per-file compilation (the default) to emit one JavaScript file for each input file. If multiple JS files get produced, we\u0026rsquo;ll need to use \u0026lt;script\u0026gt; tags on our webpage to load each emitted file in the appropriate order, for example:\nMyTestPage.html (excerpt) # \u0026lt;script src=\u0026#34;Validation.js\u0026#34; type=\u0026#34;text/javascript\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;LettersOnlyValidator.js\u0026#34; type=\u0026#34;text/javascript\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;ZipCodeValidator.js\u0026#34; type=\u0026#34;text/javascript\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;Test.js\u0026#34; type=\u0026#34;text/javascript\u0026#34; /\u0026gt; Aliases # Another way that you can simplify working with namespaces is to use import q = x.y.z to create shorter names for commonly-used objects. Not to be confused with the import x = require(\u0026quot;name\u0026quot;) syntax used to load modules, this syntax simply creates an alias for the specified symbol. You can use these sorts of imports (commonly referred to as aliases) for any kind of identifier, including objects created from module imports.\nnamespace Shapes { export namespace Polygons { export class Triangle {} export class Square {} } } import polygons = Shapes.Polygons; let sq = new polygons.Square(); // Same as \u0026#39;new Shapes.Polygons.Square()\u0026#39; Notice that we don\u0026rsquo;t use the require keyword; instead we assign directly from the qualified name of the symbol we\u0026rsquo;re importing. This is similar to using var, but also works on the type and namespace meanings of the imported symbol. Importantly, for values, import is a distinct reference from the original symbol, so changes to an aliased var will not be reflected in the original variable.\nWorking with Other JavaScript Libraries # To describe the shape of libraries not written in TypeScript, we need to declare the API that the library exposes. Because most JavaScript libraries expose only a few top-level objects, namespaces are a good way to represent them.\nWe call declarations that don\u0026rsquo;t define an implementation \u0026ldquo;ambient\u0026rdquo;. Typically these are defined in .d.ts files. If you\u0026rsquo;re familiar with C/C++, you can think of these as .h files. Let\u0026rsquo;s look at a few examples.\nAmbient Namespaces # The popular library D3 defines its functionality in a global object called d3. Because this library is loaded through a \u0026lt;script\u0026gt; tag (instead of a module loader), its declaration uses namespaces to define its shape. For the TypeScript compiler to see this shape, we use an ambient namespace declaration. For example, we could begin writing it as follows:\nD3.d.ts (simplified excerpt) # declare namespace D3 { export interface Selectors { select: { (selector: string): Selection; (element: EventTarget): Selection; }; } export interface Event { x: number; y: number; } export interface Base extends Selectors { event: Event; } } declare var d3: D3.Base; ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/namespaces.html{._attribution-link} :::\n"},{"id":297,"href":"/docs/references/languages/typescript/narrowing/","title":"Narrowing","section":"Typescript","content":" Narrowing # Imagine we have a function called padLeft.\nfunction padLeft(padding: number | string, input: string): string { throw new Error(\u0026#34;Not implemented yet!\u0026#34;); } If padding is a number, it will treat that as the number of spaces we want to prepend to input. If padding is a string, it should just prepend padding to input. Let\u0026rsquo;s try to implement the logic for when padLeft is passed a number for padding.\nfunction padLeft(padding: number | string, input: string) { return \u0026#34; \u0026#34;.repeat(padding) + input; } Uh-oh, we\u0026rsquo;re getting an error on padding. TypeScript is warning us that we\u0026rsquo;re passing a value with type number | string to the repeat function, which only accepts a number, and it\u0026rsquo;s right. In other words, we haven\u0026rsquo;t explicitly checked if padding is a number first, nor are we handling the case where it\u0026rsquo;s a string, so let\u0026rsquo;s do exactly that.\nfunction padLeft(padding: number | string, input: string) { if (typeof padding === \u0026#34;number\u0026#34;) { return \u0026#34; \u0026#34;.repeat(padding) + input; } return padding + input; } If this mostly looks like uninteresting JavaScript code, that\u0026rsquo;s sort of the point. Apart from the annotations we put in place, this TypeScript code looks like JavaScript. The idea is that TypeScript\u0026rsquo;s type system aims to make it as easy as possible to write typical JavaScript code without bending over backwards to get type safety.\nWhile it might not look like much, there\u0026rsquo;s actually a lot going on under the covers here. Much like how TypeScript analyzes runtime values using static types, it overlays type analysis on JavaScript\u0026rsquo;s runtime control flow constructs like if/else, conditional ternaries, loops, truthiness checks, etc., which can all affect those types.\nWithin our if check, TypeScript sees typeof padding === \u0026quot;number\u0026quot; and understands that as a special form of code called a type guard. TypeScript follows possible paths of execution that our programs can take to analyze the most specific possible type of a value at a given position. It looks at these special checks (called type guards) and assignments, and the process of refining types to more specific types than declared is called narrowing. In many editors we can observe these types as they change, and we\u0026rsquo;ll even do so in our examples.\nfunction padLeft(padding: number | string, input: string) { if (typeof padding === \u0026#34;number\u0026#34;) { return \u0026#34; \u0026#34;.repeat(padding) + input; } return padding + input; } There are a couple of different constructs TypeScript understands for narrowing.\ntypeof type guards # As we\u0026rsquo;ve seen, JavaScript supports a typeof operator which can give very basic information about the type of values we have at runtime. TypeScript expects this to return a certain set of strings:\n\u0026quot;string\u0026quot; \u0026quot;number\u0026quot; \u0026quot;bigint\u0026quot; \u0026quot;boolean\u0026quot; \u0026quot;symbol\u0026quot; \u0026quot;undefined\u0026quot; \u0026quot;object\u0026quot; \u0026quot;function\u0026quot; Like we saw with padLeft, this operator comes up pretty often in a number of JavaScript libraries, and TypeScript can understand it to narrow types in different branches.\nIn TypeScript, checking against the value returned by typeof is a type guard. Because TypeScript encodes how typeof operates on different values, it knows about some of its quirks in JavaScript. For example, notice that in the list above, typeof doesn\u0026rsquo;t return the string null. Check out the following example:\nfunction printAll(strs: string | string[] | null) { if (typeof strs === \u0026#34;object\u0026#34;) { for (const s of strs) { console.log(s); } } else if (typeof strs === \u0026#34;string\u0026#34;) { console.log(strs); } else { // do nothing } } In the printAll function, we try to check if strs is an object to see if it\u0026rsquo;s an array type (now might be a good time to reinforce that arrays are object types in JavaScript). But it turns out that in JavaScript, typeof null is actually \u0026quot;object\u0026quot;! This is one of those unfortunate accidents of history.\nUsers with enough experience might not be surprised, but not everyone has run into this in JavaScript; luckily, TypeScript lets us know that strs was only narrowed down to string[] | null instead of just string[].\nThis might be a good segue into what we\u0026rsquo;ll call \u0026ldquo;truthiness\u0026rdquo; checking.\nTruthiness narrowing # Truthiness might not be a word you\u0026rsquo;ll find in the dictionary, but it\u0026rsquo;s very much something you\u0026rsquo;ll hear about in JavaScript.\nIn JavaScript, we can use any expression in conditionals, \u0026amp;\u0026amp;s, ||s, if statements, Boolean negations (!), and more. As an example, if statements don\u0026rsquo;t expect their condition to always have the type boolean.\nfunction getUsersOnlineMessage(numUsersOnline: number) { if (numUsersOnline) { return `There are ${numUsersOnline} online now!`; } return \u0026#34;Nobody\u0026#39;s here. :(\u0026#34;; } In JavaScript, constructs like if first \u0026ldquo;coerce\u0026rdquo; their conditions to booleans to make sense of them, and then choose their branches depending on whether the result is true or false. Values like\n0 NaN \u0026quot;\u0026quot; (the empty string) 0n (the bigint version of zero) null undefined all coerce to false, and other values get coerced to true. You can always coerce values to booleans by running them through the Boolean function, or by using the shorter double-Boolean negation. (The latter has the advantage that TypeScript infers a narrow literal boolean type true, while inferring the first as type boolean.)\n// both of these result in \u0026#39;true\u0026#39; Boolean(\u0026#34;hello\u0026#34;); // type: boolean, value: true !!\u0026#34;world\u0026#34;; // type: true, value: true It\u0026rsquo;s fairly popular to leverage this behavior, especially for guarding against values like null or undefined. As an example, let\u0026rsquo;s try using it for our printAll function.\nfunction printAll(strs: string | string[] | null) { if (strs \u0026amp;\u0026amp; typeof strs === \u0026#34;object\u0026#34;) { for (const s of strs) { console.log(s); } } else if (typeof strs === \u0026#34;string\u0026#34;) { console.log(strs); } } You\u0026rsquo;ll notice that we\u0026rsquo;ve gotten rid of the error above by checking if strs is truthy. This at least prevents us from dreaded errors when we run our code like:\nTypeError: null is not iterable Keep in mind though that truthiness checking on primitives can often be error prone. As an example, consider a different attempt at writing printAll\nfunction printAll(strs: string | string[] | null) { // !!!!!!!!!!!!!!!! // DON\u0026#39;T DO THIS! // KEEP READING // !!!!!!!!!!!!!!!! if (strs) { if (typeof strs === \u0026#34;object\u0026#34;) { for (const s of strs) { console.log(s); } } else if (typeof strs === \u0026#34;string\u0026#34;) { console.log(strs); } } } We wrapped the entire body of the function in a truthy check, but this has a subtle downside: we may no longer be handling the empty string case correctly.\nTypeScript doesn\u0026rsquo;t hurt us here at all, but this behavior is worth noting if you\u0026rsquo;re less familiar with JavaScript. TypeScript can often help you catch bugs early on, but if you choose to do nothing with a value, there\u0026rsquo;s only so much that it can do without being overly prescriptive. If you want, you can make sure you handle situations like these with a linter.\nOne last word on narrowing by truthiness is that Boolean negations with ! filter out from negated branches.\nfunction multiplyAll( values: number[] | undefined, factor: number ): number[] | undefined { if (!values) { return values; } else { return values.map((x) =\u0026gt; x * factor); } } Equality narrowing # TypeScript also uses switch statements and equality checks like ===, !==, ==, and != to narrow types. For example:\nfunction example(x: string | number, y: string | boolean) { if (x === y) { // We can now call any \u0026#39;string\u0026#39; method on \u0026#39;x\u0026#39; or \u0026#39;y\u0026#39;. x.toUpperCase(); y.toLowerCase(); } else { console.log(x); console.log(y); } } When we checked that x and y are both equal in the above example, TypeScript knew their types also had to be equal. Since string is the only common type that both x and y could take on, TypeScript knows that x and y must be a string in the first branch.\nChecking against specific literal values (as opposed to variables) works also. In our section about truthiness narrowing, we wrote a printAll function which was error-prone because it accidentally didn\u0026rsquo;t handle empty strings properly. Instead we could have done a specific check to block out nulls, and TypeScript still correctly removes null from the type of strs.\nfunction printAll(strs: string | string[] | null) { if (strs !== null) { if (typeof strs === \u0026#34;object\u0026#34;) { for (const s of strs) { console.log(s); } } else if (typeof strs === \u0026#34;string\u0026#34;) { console.log(strs); } } } JavaScript\u0026rsquo;s looser equality checks with == and != also get narrowed correctly. If you\u0026rsquo;re unfamiliar, checking whether something == null actually not only checks whether it is specifically the value null - it also checks whether it\u0026rsquo;s potentially undefined. The same applies to == undefined: it checks whether a value is either null or undefined.\ninterface Container { value: number | null | undefined; } function multiplyValue(container: Container, factor: number) { // Remove both \u0026#39;null\u0026#39; and \u0026#39;undefined\u0026#39; from the type. if (container.value != null) { console.log(container.value); // Now we can safely multiply \u0026#39;container.value\u0026#39;. container.value *= factor; } } The in operator narrowing # JavaScript has an operator for determining if an object or its prototype chain has a property with a name: the in operator. TypeScript takes this into account as a way to narrow down potential types.\nFor example, with the code: \u0026quot;value\u0026quot; in x. where \u0026quot;value\u0026quot; is a string literal and x is a union type. The \u0026ldquo;true\u0026rdquo; branch narrows x\u0026rsquo;s types which have either an optional or required property value, and the \u0026ldquo;false\u0026rdquo; branch narrows to types which have an optional or missing property value.\ntype Fish = { swim: () =\u0026gt; void }; type Bird = { fly: () =\u0026gt; void }; function move(animal: Fish | Bird) { if (\u0026#34;swim\u0026#34; in animal) { return animal.swim(); } return animal.fly(); } To reiterate, optional properties will exist in both sides for narrowing. For example, a human could both swim and fly (with the right equipment) and thus should show up in both sides of the in check:\ntype Fish = { swim: () =\u0026gt; void }; type Bird = { fly: () =\u0026gt; void }; type Human = { swim?: () =\u0026gt; void; fly?: () =\u0026gt; void }; function move(animal: Fish | Bird | Human) { if (\u0026#34;swim\u0026#34; in animal) { animal; } else { animal; } } instanceof narrowing # JavaScript has an operator for checking whether or not a value is an \u0026ldquo;instance\u0026rdquo; of another value. More specifically, in JavaScript x instanceof Foo checks whether the prototype chain of x contains Foo.prototype. While we won\u0026rsquo;t dive deep here, and you\u0026rsquo;ll see more of this when we get into classes, they can still be useful for most values that can be constructed with new. As you might have guessed, instanceof is also a type guard, and TypeScript narrows in branches guarded by instanceofs.\nfunction logValue(x: Date | string) { if (x instanceof Date) { console.log(x.toUTCString()); } else { console.log(x.toUpperCase()); } } Assignments # As we mentioned earlier, when we assign to any variable, TypeScript looks at the right side of the assignment and narrows the left side appropriately.\nlet x = Math.random() \u0026lt; 0.5 ? 10 : \u0026#34;hello world!\u0026#34;; x = 1; console.log(x); x = \u0026#34;goodbye!\u0026#34;; console.log(x); Notice that each of these assignments is valid. Even though the observed type of x changed to number after our first assignment, we were still able to assign a string to x. This is because the declared type of x - the type that x started with - is string | number, and assignability is always checked against the declared type.\nIf we\u0026rsquo;d assigned a boolean to x, we\u0026rsquo;d have seen an error since that wasn\u0026rsquo;t part of the declared type.\nlet x = Math.random() \u0026lt; 0.5 ? 10 : \u0026#34;hello world!\u0026#34;; x = 1; console.log(x); x = true; console.log(x); Control flow analysis # Up until this point, we\u0026rsquo;ve gone through some basic examples of how TypeScript narrows within specific branches. But there\u0026rsquo;s a bit more going on than just walking up from every variable and looking for type guards in ifs, whiles, conditionals, etc. For example\nfunction padLeft(padding: number | string, input: string) { if (typeof padding === \u0026#34;number\u0026#34;) { return \u0026#34; \u0026#34;.repeat(padding) + input; } return padding + input; } padLeft returns from within its first if block. TypeScript was able to analyze this code and see that the rest of the body (return padding + input;) is unreachable in the case where padding is a number. As a result, it was able to remove number from the type of padding (narrowing from string | number to string) for the rest of the function.\nThis analysis of code based on reachability is called control flow analysis, and TypeScript uses this flow analysis to narrow types as it encounters type guards and assignments. When a variable is analyzed, control flow can split off and re-merge over and over again, and that variable can be observed to have a different type at each point.\nfunction example() { let x: string | number | boolean; x = Math.random() \u0026lt; 0.5; console.log(x); if (Math.random() \u0026lt; 0.5) { x = \u0026#34;hello\u0026#34;; console.log(x); } else { x = 100; console.log(x); } return x; } Using type predicates # We\u0026rsquo;ve worked with existing JavaScript constructs to handle narrowing so far, however sometimes you want more direct control over how types change throughout your code.\nTo define a user-defined type guard, we simply need to define a function whose return type is a type predicate:\nfunction isFish(pet: Fish | Bird): pet is Fish { return (pet as Fish).swim !== undefined; } pet is Fish is our type predicate in this example. A predicate takes the form parameterName is Type, where parameterName must be the name of a parameter from the current function signature.\nAny time isFish is called with some variable, TypeScript will narrow that variable to that specific type if the original type is compatible.\n// Both calls to \u0026#39;swim\u0026#39; and \u0026#39;fly\u0026#39; are now okay. let pet = getSmallPet(); if (isFish(pet)) { pet.swim(); } else { pet.fly(); } Notice that TypeScript not only knows that pet is a Fish in the if branch; it also knows that in the else branch, you don\u0026rsquo;t have a Fish, so you must have a Bird.\nYou may use the type guard isFish to filter an array of Fish | Bird and obtain an array of Fish:\nconst zoo: (Fish | Bird)[] = [getSmallPet(), getSmallPet(), getSmallPet()]; const underWater1: Fish[] = zoo.filter(isFish); // or, equivalently const underWater2: Fish[] = zoo.filter(isFish) as Fish[]; // The predicate may need repeating for more complex examples const underWater3: Fish[] = zoo.filter((pet): pet is Fish =\u0026gt; { if (pet.name === \u0026#34;sharkey\u0026#34;) return false; return isFish(pet); }); In addition, classes can use this is Type to narrow their type.\nAssertion functions # Types can also be narrowed using Assertion functions.\nDiscriminated unions # Most of the examples we\u0026rsquo;ve looked at so far have focused around narrowing single variables with simple types like string, boolean, and number. While this is common, most of the time in JavaScript we\u0026rsquo;ll be dealing with slightly more complex structures.\nFor some motivation, let\u0026rsquo;s imagine we\u0026rsquo;re trying to encode shapes like circles and squares. Circles keep track of their radiuses and squares keep track of their side lengths. We\u0026rsquo;ll use a field called kind to tell which shape we\u0026rsquo;re dealing with. Here\u0026rsquo;s a first attempt at defining Shape.\ninterface Shape { kind: \u0026#34;circle\u0026#34; | \u0026#34;square\u0026#34;; radius?: number; sideLength?: number; } Notice we\u0026rsquo;re using a union of string literal types: \u0026quot;circle\u0026quot; and \u0026quot;square\u0026quot; to tell us whether we should treat the shape as a circle or square respectively. By using \u0026quot;circle\u0026quot; | \u0026quot;square\u0026quot; instead of string, we can avoid misspelling issues.\nfunction handleShape(shape: Shape) { // oops! if (shape.kind === \u0026#34;rect\u0026#34;) { // ... } } We can write a getArea function that applies the right logic based on if it\u0026rsquo;s dealing with a circle or square. We\u0026rsquo;ll first try dealing with circles.\nfunction getArea(shape: Shape) { return Math.PI * shape.radius ** 2; } Under strictNullChecks that gives us an error - which is appropriate since radius might not be defined. But what if we perform the appropriate checks on the kind property?\nfunction getArea(shape: Shape) { if (shape.kind === \u0026#34;circle\u0026#34;) { return Math.PI * shape.radius ** 2; } } Hmm, TypeScript still doesn\u0026rsquo;t know what to do here. We\u0026rsquo;ve hit a point where we know more about our values than the type checker does. We could try to use a non-null assertion (a ! after shape.radius) to say that radius is definitely present.\nfunction getArea(shape: Shape) { if (shape.kind === \u0026#34;circle\u0026#34;) { return Math.PI * shape.radius! ** 2; } } But this doesn\u0026rsquo;t feel ideal. We had to shout a bit at the type-checker with those non-null assertions (!) to convince it that shape.radius was defined, but those assertions are error-prone if we start to move code around. Additionally, outside of strictNullChecks we\u0026rsquo;re able to accidentally access any of those fields anyway (since optional properties are just assumed to always be present when reading them). We can definitely do better.\nThe problem with this encoding of Shape is that the type-checker doesn\u0026rsquo;t have any way to know whether or not radius or sideLength are present based on the kind property. We need to communicate what we know to the type checker. With that in mind, let\u0026rsquo;s take another swing at defining Shape.\ninterface Circle { kind: \u0026#34;circle\u0026#34;; radius: number; } interface Square { kind: \u0026#34;square\u0026#34;; sideLength: number; } type Shape = Circle | Square; Here, we\u0026rsquo;ve properly separated Shape out into two types with different values for the kind property, but radius and sideLength are declared as required properties in their respective types.\nLet\u0026rsquo;s see what happens here when we try to access the radius of a Shape.\nfunction getArea(shape: Shape) { return Math.PI * shape.radius ** 2; } Like with our first definition of Shape, this is still an error. When radius was optional, we got an error (with strictNullChecks enabled) because TypeScript couldn\u0026rsquo;t tell whether the property was present. Now that Shape is a union, TypeScript is telling us that shape might be a Square, and Squares don\u0026rsquo;t have radius defined on them! Both interpretations are correct, but only the union encoding of Shape will cause an error regardless of how strictNullChecks is configured.\nBut what if we tried checking the kind property again?\nfunction getArea(shape: Shape) { if (shape.kind === \u0026#34;circle\u0026#34;) { return Math.PI * shape.radius ** 2; } } That got rid of the error! When every type in a union contains a common property with literal types, TypeScript considers that to be a discriminated union, and can narrow out the members of the union.\nIn this case, kind was that common property (which is what\u0026rsquo;s considered a discriminant property of Shape). Checking whether the kind property was \u0026quot;circle\u0026quot; got rid of every type in Shape that didn\u0026rsquo;t have a kind property with the type \u0026quot;circle\u0026quot;. That narrowed shape down to the type Circle.\nThe same checking works with switch statements as well. Now we can try to write our complete getArea without any pesky ! non-null assertions.\nfunction getArea(shape: Shape) { switch (shape.kind) { case \u0026#34;circle\u0026#34;: return Math.PI * shape.radius ** 2; case \u0026#34;square\u0026#34;: return shape.sideLength ** 2; } } The important thing here was the encoding of Shape. Communicating the right information to TypeScript - that Circle and Square were really two separate types with specific kind fields - was crucial. Doing that lets us write type-safe TypeScript code that looks no different than the JavaScript we would\u0026rsquo;ve written otherwise. From there, the type system was able to do the \u0026ldquo;right\u0026rdquo; thing and figure out the types in each branch of our switch statement.\nAs an aside, try playing around with the above example and remove some of the return keywords. You\u0026rsquo;ll see that type-checking can help avoid bugs when accidentally falling through different clauses in a switch statement.\nDiscriminated unions are useful for more than just talking about circles and squares. They\u0026rsquo;re good for representing any sort of messaging scheme in JavaScript, like when sending messages over the network (client/server communication), or encoding mutations in a state management framework.\nThe never type # When narrowing, you can reduce the options of a union to a point where you have removed all possibilities and have nothing left. In those cases, TypeScript will use a never type to represent a state which shouldn\u0026rsquo;t exist.\nExhaustiveness checking # The never type is assignable to every type; however, no type is assignable to never (except never itself). This means you can use narrowing and rely on never turning up to do exhaustive checking in a switch statement.\nFor example, adding a default to our getArea function which tries to assign the shape to never will raise an error when every possible case has not been handled.\ntype Shape = Circle | Square; function getArea(shape: Shape) { switch (shape.kind) { case \u0026#34;circle\u0026#34;: return Math.PI * shape.radius ** 2; case \u0026#34;square\u0026#34;: return shape.sideLength ** 2; default: const _exhaustiveCheck: never = shape; return _exhaustiveCheck; } } Adding a new member to the Shape union, will cause a TypeScript error:\ninterface Triangle { kind: \u0026#34;triangle\u0026#34;; sideLength: number; } type Shape = Circle | Square | Triangle; function getArea(shape: Shape) { switch (shape.kind) { case \u0026#34;circle\u0026#34;: return Math.PI * shape.radius ** 2; case \u0026#34;square\u0026#34;: return shape.sideLength ** 2; default: const _exhaustiveCheck: never = shape; return _exhaustiveCheck; } } ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/narrowing.html{._attribution-link} :::\n"},{"id":298,"href":"/docs/references/languages/typescript/nightly-builds/","title":"Nightly Builds","section":"Typescript","content":" Nightly Builds # A nightly build from the TypeScript\u0026rsquo;s main branch is published by midnight PST to npm. Here is how you can get it and use it with your tools.\nUsing npm # npm install -g typescript@next Updating your IDE to use the nightly builds # You can also update your IDE to use the nightly drop. First you will need to install the package through npm. You can either install the npm package globally or to a local node_modules folder.\nThe rest of this section assumes typescript@next is already installed.\nVisual Studio Code # Update .vscode/settings.json with the following:\n\u0026#34;typescript.tsdk\u0026#34;: \u0026#34;\u0026lt;path to your folder\u0026gt;/node_modules/typescript/lib\u0026#34; More information is available at VSCode documentation.\nSublime Text # Update the Settings - User file with the following:\n\u0026#34;typescript_tsdk\u0026#34;: \u0026#34;\u0026lt;path to your folder\u0026gt;/node_modules/typescript/lib\u0026#34; More information is available at the TypeScript Plugin for Sublime Text installation documentation.\nVisual Studio 2013 and 2015 # Note: Most changes do not require you to install a new version of the VS TypeScript plugin.\nThe nightly build currently does not include the full plugin setup, but we are working on publishing an installer on a nightly basis as well.\nDownload the VSDevMode.ps1 script.\nAlso see our wiki page on using a custom language service file.\nFrom a PowerShell command window, run:\nFor VS 2015:\nVSDevMode.ps1 14 -tsScript \u0026lt;path to your folder\u0026gt;/node_modules/typescript/lib For VS 2013:\nVSDevMode.ps1 12 -tsScript \u0026lt;path to your folder\u0026gt;/node_modules/typescript/lib IntelliJ IDEA (Mac) # Go to Preferences \u0026gt; Languages \u0026amp; Frameworks \u0026gt; TypeScript:\nTypeScript Version: If you installed with npm: /usr/local/lib/node_modules/typescript/lib\nIntelliJ IDEA (Windows) # Go to File \u0026gt; Settings \u0026gt; Languages \u0026amp; Frameworks \u0026gt; TypeScript:\nTypeScript Version: If you installed with npm: C:\\Users\\USERNAME\\AppData\\Roaming\\npm\\node_modules\\typescript\\lib\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/nightly-builds.html{._attribution-link} :::\n"},{"id":299,"href":"/docs/references/languages/typescript/objects/","title":"Objects","section":"Typescript","content":" Object Types # In JavaScript, the fundamental way that we group and pass around data is through objects. In TypeScript, we represent those through object types.\nAs we\u0026rsquo;ve seen, they can be anonymous:\nfunction greet(person: { name: string; age: number }) { return \u0026#34;Hello \u0026#34; + person.name; } or they can be named by using either an interface:\ninterface Person { name: string; age: number; } function greet(person: Person) { return \u0026#34;Hello \u0026#34; + person.name; } or a type alias:\ntype Person = { name: string; age: number; }; function greet(person: Person) { return \u0026#34;Hello \u0026#34; + person.name; } In all three examples above, we\u0026rsquo;ve written functions that take objects that contain the property name (which must be a string) and age (which must be a number).\nQuick Reference # We have cheat-sheets available for both type and interface, if you want a quick look at the important every-day syntax at a glance.\nProperty Modifiers # Each property in an object type can specify a couple of things: the type, whether the property is optional, and whether the property can be written to.\nOptional Properties # Much of the time, we\u0026rsquo;ll find ourselves dealing with objects that might have a property set. In those cases, we can mark those properties as optional by adding a question mark (?) to the end of their names.\ninterface PaintOptions { shape: Shape; xPos?: number; yPos?: number; } function paintShape(opts: PaintOptions) { // ... } const shape = getShape(); paintShape({ shape }); paintShape({ shape, xPos: 100 }); paintShape({ shape, yPos: 100 }); paintShape({ shape, xPos: 100, yPos: 100 }); In this example, both xPos and yPos are considered optional. We can choose to provide either of them, so every call above to paintShape is valid. All optionality really says is that if the property is set, it better have a specific type.\nWe can also read from those properties - but when we do under strictNullChecks, TypeScript will tell us they\u0026rsquo;re potentially undefined.\nfunction paintShape(opts: PaintOptions) { let xPos = opts.xPos; let yPos = opts.yPos; // ... } In JavaScript, even if the property has never been set, we can still access it - it\u0026rsquo;s just going to give us the value undefined. We can just handle undefined specially by checking for it.\nfunction paintShape(opts: PaintOptions) { let xPos = opts.xPos === undefined ? 0 : opts.xPos; let yPos = opts.yPos === undefined ? 0 : opts.yPos; // ... } Note that this pattern of setting defaults for unspecified values is so common that JavaScript has syntax to support it.\nfunction paintShape({ shape, xPos = 0, yPos = 0 }: PaintOptions) { console.log(\u0026#34;x coordinate at\u0026#34;, xPos); console.log(\u0026#34;y coordinate at\u0026#34;, yPos); // ... } Here we used a destructuring pattern for paintShape\u0026rsquo;s parameter, and provided default values for xPos and yPos. Now xPos and yPos are both definitely present within the body of paintShape, but optional for any callers to paintShape.\nNote that there is currently no way to place type annotations within destructuring patterns. This is because the following syntax already means something different in JavaScript.\nfunction draw({ shape: Shape, xPos: number = 100 /*...*/ }) { render(shape); render(xPos); } In an object destructuring pattern, shape: Shape means \u0026ldquo;grab the property shape and redefine it locally as a variable named Shape. Likewise xPos: number creates a variable named number whose value is based on the parameter\u0026rsquo;s xPos.\nUsing mapping modifiers, you can remove optional attributes.\nreadonly Properties # Properties can also be marked as readonly for TypeScript. While it won\u0026rsquo;t change any behavior at runtime, a property marked as readonly can\u0026rsquo;t be written to during type-checking.\ninterface SomeType { readonly prop: string; } function doSomething(obj: SomeType) { // We can read from \u0026#39;obj.prop\u0026#39;. console.log(`prop has the value \u0026#39;${obj.prop}\u0026#39;.`); // But we can\u0026#39;t re-assign it. obj.prop = \u0026#34;hello\u0026#34;; } Using the readonly modifier doesn\u0026rsquo;t necessarily imply that a value is totally immutable - or in other words, that its internal contents can\u0026rsquo;t be changed. It just means the property itself can\u0026rsquo;t be re-written to.\ninterface Home { readonly resident: { name: string; age: number }; } function visitForBirthday(home: Home) { // We can read and update properties from \u0026#39;home.resident\u0026#39;. console.log(`Happy birthday ${home.resident.name}!`); home.resident.age++; } function evict(home: Home) { // But we can\u0026#39;t write to the \u0026#39;resident\u0026#39; property itself on a \u0026#39;Home\u0026#39;. home.resident = { name: \u0026#34;Victor the Evictor\u0026#34;, age: 42, }; } It\u0026rsquo;s important to manage expectations of what readonly implies. It\u0026rsquo;s useful to signal intent during development time for TypeScript on how an object should be used. TypeScript doesn\u0026rsquo;t factor in whether properties on two types are readonly when checking whether those types are compatible, so readonly properties can also change via aliasing.\ninterface Person { name: string; age: number; } interface ReadonlyPerson { readonly name: string; readonly age: number; } let writablePerson: Person = { name: \u0026#34;Person McPersonface\u0026#34;, age: 42, }; // works let readonlyPerson: ReadonlyPerson = writablePerson; console.log(readonlyPerson.age); // prints \u0026#39;42\u0026#39; writablePerson.age++; console.log(readonlyPerson.age); // prints \u0026#39;43\u0026#39; Using mapping modifiers, you can remove readonly attributes.\nIndex Signatures # Sometimes you don\u0026rsquo;t know all the names of a type\u0026rsquo;s properties ahead of time, but you do know the shape of the values.\nIn those cases you can use an index signature to describe the types of possible values, for example:\ninterface StringArray { [index: number]: string; } const myArray: StringArray = getStringArray(); const secondItem = myArray[1]; Above, we have a StringArray interface which has an index signature. This index signature states that when a StringArray is indexed with a number, it will return a string.\nOnly some types are allowed for index signature properties: string, number, symbol, template string patterns, and union types consisting only of these.\nIt is possible to support both types of indexers...\nIt is possible to support both types of indexers, but the type returned from a numeric indexer must be a subtype of the type returned from the string indexer. This is because when indexing with a number, JavaScript will actually convert that to a string before indexing into an object. That means that indexing with 100 (a number) is the same thing as indexing with \u0026quot;100\u0026quot; (a string), so the two need to be consistent.\ninterface Animal { name: string; } interface Dog extends Animal { breed: string; } // Error: indexing with a numeric string might get you a completely separate type of Animal! interface NotOkay { [x: number]: Animal; [x: string]: Dog; } While string index signatures are a powerful way to describe the \u0026ldquo;dictionary\u0026rdquo; pattern, they also enforce that all properties match their return type. This is because a string index declares that obj.property is also available as obj[\u0026quot;property\u0026quot;]. In the following example, name\u0026rsquo;s type does not match the string index\u0026rsquo;s type, and the type checker gives an error:\ninterface NumberDictionary { [index: string]: number; length: number; // ok name: string; } However, properties of different types are acceptable if the index signature is a union of the property types:\ninterface NumberOrStringDictionary { [index: string]: number | string; length: number; // ok, length is a number name: string; // ok, name is a string } Finally, you can make index signatures readonly in order to prevent assignment to their indices:\ninterface ReadonlyStringArray { readonly [index: number]: string; } let myArray: ReadonlyStringArray = getReadOnlyStringArray(); myArray[2] = \u0026#34;Mallory\u0026#34;; You can\u0026rsquo;t set myArray[2] because the index signature is readonly.\nExcess Property Checks # Where and how an object is assigned a type can make a difference in the type system. One of the key examples of this is in excess property checking, which validates the object more thoroughly when it is created and assigned to an object type during creation.\ninterface SquareConfig { color?: string; width?: number; } function createSquare(config: SquareConfig): { color: string; area: number } { return { color: config.color || \u0026#34;red\u0026#34;, area: config.width ? config.width * config.width : 20, }; } let mySquare = createSquare({ colour: \u0026#34;red\u0026#34;, width: 100 }); Notice the given argument to createSquare is spelled colour instead of color. In plain JavaScript, this sort of thing fails silently.\nYou could argue that this program is correctly typed, since the width properties are compatible, there\u0026rsquo;s no color property present, and the extra colour property is insignificant.\nHowever, TypeScript takes the stance that there\u0026rsquo;s probably a bug in this code. Object literals get special treatment and undergo excess property checking when assigning them to other variables, or passing them as arguments. If an object literal has any properties that the \u0026ldquo;target type\u0026rdquo; doesn\u0026rsquo;t have, you\u0026rsquo;ll get an error:\nlet mySquare = createSquare({ colour: \u0026#34;red\u0026#34;, width: 100 }); Getting around these checks is actually really simple. The easiest method is to just use a type assertion:\nlet mySquare = createSquare({ width: 100, opacity: 0.5 } as SquareConfig); However, a better approach might be to add a string index signature if you\u0026rsquo;re sure that the object can have some extra properties that are used in some special way. If SquareConfig can have color and width properties with the above types, but could also have any number of other properties, then we could define it like so:\ninterface SquareConfig { color?: string; width?: number; [propName: string]: any; } We\u0026rsquo;ll discuss index signatures in a bit, but here we\u0026rsquo;re saying a SquareConfig can have any number of properties, and as long as they aren\u0026rsquo;t color or width, their types don\u0026rsquo;t matter.\nOne final way to get around these checks, which might be a bit surprising, is to assign the object to another variable: Since assigning squareOptions won\u0026rsquo;t undergo excess property checks, the compiler won\u0026rsquo;t give you an error:\nlet squareOptions = { colour: \u0026#34;red\u0026#34;, width: 100 }; let mySquare = createSquare(squareOptions); The above workaround will work as long as you have a common property between squareOptions and SquareConfig. In this example, it was the property width. It will however, fail if the variable does not have any common object property. For example:\nlet squareOptions = { colour: \u0026#34;red\u0026#34; }; let mySquare = createSquare(squareOptions); Keep in mind that for simple code like above, you probably shouldn\u0026rsquo;t be trying to \u0026ldquo;get around\u0026rdquo; these checks. For more complex object literals that have methods and hold state, you might need to keep these techniques in mind, but a majority of excess property errors are actually bugs.\nThat means if you\u0026rsquo;re running into excess property checking problems for something like option bags, you might need to revise some of your type declarations. In this instance, if it\u0026rsquo;s okay to pass an object with both a color or colour property to createSquare, you should fix up the definition of SquareConfig to reflect that.\nExtending Types # It\u0026rsquo;s pretty common to have types that might be more specific versions of other types. For example, we might have a BasicAddress type that describes the fields necessary for sending letters and packages in the U.S.\ninterface BasicAddress { name?: string; street: string; city: string; country: string; postalCode: string; } In some situations that\u0026rsquo;s enough, but addresses often have a unit number associated with them if the building at an address has multiple units. We can then describe an AddressWithUnit.\ninterface AddressWithUnit { name?: string; unit: string; street: string; city: string; country: string; postalCode: string; } This does the job, but the downside here is that we had to repeat all the other fields from BasicAddress when our changes were purely additive. Instead, we can extend the original BasicAddress type and just add the new fields that are unique to AddressWithUnit.\ninterface BasicAddress { name?: string; street: string; city: string; country: string; postalCode: string; } interface AddressWithUnit extends BasicAddress { unit: string; } The extends keyword on an interface allows us to effectively copy members from other named types, and add whatever new members we want. This can be useful for cutting down the amount of type declaration boilerplate we have to write, and for signaling intent that several different declarations of the same property might be related. For example, AddressWithUnit didn\u0026rsquo;t need to repeat the street property, and because street originates from BasicAddress, a reader will know that those two types are related in some way.\ninterfaces can also extend from multiple types.\ninterface Colorful { color: string; } interface Circle { radius: number; } interface ColorfulCircle extends Colorful, Circle {} const cc: ColorfulCircle = { color: \u0026#34;red\u0026#34;, radius: 42, }; Intersection Types # interfaces allowed us to build up new types from other types by extending them. TypeScript provides another construct called intersection types that is mainly used to combine existing object types.\nAn intersection type is defined using the \u0026amp; operator.\ninterface Colorful { color: string; } interface Circle { radius: number; } type ColorfulCircle = Colorful \u0026amp; Circle; Here, we\u0026rsquo;ve intersected Colorful and Circle to produce a new type that has all the members of Colorful and Circle.\nfunction draw(circle: Colorful \u0026amp; Circle) { console.log(`Color was ${circle.color}`); console.log(`Radius was ${circle.radius}`); } // okay draw({ color: \u0026#34;blue\u0026#34;, radius: 42 }); // oops draw({ color: \u0026#34;red\u0026#34;, raidus: 42 }); Interfaces vs. Intersections # We just looked at two ways to combine types which are similar, but are actually subtly different. With interfaces, we could use an extends clause to extend from other types, and we were able to do something similar with intersections and name the result with a type alias. The principal difference between the two is how conflicts are handled, and that difference is typically one of the main reasons why you\u0026rsquo;d pick one over the other between an interface and a type alias of an intersection type.\nGeneric Object Types # Let\u0026rsquo;s imagine a Box type that can contain any value - strings, numbers, Giraffes, whatever.\ninterface Box { contents: any; } Right now, the contents property is typed as any, which works, but can lead to accidents down the line.\nWe could instead use unknown, but that would mean that in cases where we already know the type of contents, we\u0026rsquo;d need to do precautionary checks, or use error-prone type assertions.\ninterface Box { contents: unknown; } let x: Box = { contents: \u0026#34;hello world\u0026#34;, }; // we could check \u0026#39;x.contents\u0026#39; if (typeof x.contents === \u0026#34;string\u0026#34;) { console.log(x.contents.toLowerCase()); } // or we could use a type assertion console.log((x.contents as string).toLowerCase()); One type safe approach would be to instead scaffold out different Box types for every type of contents.\ninterface NumberBox { contents: number; } interface StringBox { contents: string; } interface BooleanBox { contents: boolean; } But that means we\u0026rsquo;ll have to create different functions, or overloads of functions, to operate on these types.\nfunction setContents(box: StringBox, newContents: string): void; function setContents(box: NumberBox, newContents: number): void; function setContents(box: BooleanBox, newContents: boolean): void; function setContents(box: { contents: any }, newContents: any) { box.contents = newContents; } That\u0026rsquo;s a lot of boilerplate. Moreover, we might later need to introduce new types and overloads. This is frustrating, since our box types and overloads are all effectively the same.\nInstead, we can make a generic Box type which declares a type parameter.\ninterface Box\u0026lt;Type\u0026gt; { contents: Type; } You might read this as \u0026ldquo;A Box of Type is something whose contents have type Type\u0026rdquo;. Later on, when we refer to Box, we have to give a type argument in place of Type.\nlet box: Box\u0026lt;string\u0026gt;; Think of Box as a template for a real type, where Type is a placeholder that will get replaced with some other type. When TypeScript sees Box\u0026lt;string\u0026gt;, it will replace every instance of Type in Box\u0026lt;Type\u0026gt; with string, and end up working with something like { contents: string }. In other words, Box\u0026lt;string\u0026gt; and our earlier StringBox work identically.\ninterface Box\u0026lt;Type\u0026gt; { contents: Type; } interface StringBox { contents: string; } let boxA: Box\u0026lt;string\u0026gt; = { contents: \u0026#34;hello\u0026#34; }; boxA.contents; let boxB: StringBox = { contents: \u0026#34;world\u0026#34; }; boxB.contents; Box is reusable in that Type can be substituted with anything. That means that when we need a box for a new type, we don\u0026rsquo;t need to declare a new Box type at all (though we certainly could if we wanted to).\ninterface Box\u0026lt;Type\u0026gt; { contents: Type; } interface Apple { // .... } // Same as \u0026#39;{ contents: Apple }\u0026#39;. type AppleBox = Box\u0026lt;Apple\u0026gt;; This also means that we can avoid overloads entirely by instead using generic functions.\nfunction setContents\u0026lt;Type\u0026gt;(box: Box\u0026lt;Type\u0026gt;, newContents: Type) { box.contents = newContents; } It is worth noting that type aliases can also be generic. We could have defined our new Box\u0026lt;Type\u0026gt; interface, which was:\ninterface Box\u0026lt;Type\u0026gt; { contents: Type; } by using a type alias instead:\ntype Box\u0026lt;Type\u0026gt; = { contents: Type; }; Since type aliases, unlike interfaces, can describe more than just object types, we can also use them to write other kinds of generic helper types.\ntype OrNull\u0026lt;Type\u0026gt; = Type | null; type OneOrMany\u0026lt;Type\u0026gt; = Type | Type[]; type OneOrManyOrNull\u0026lt;Type\u0026gt; = OrNull\u0026lt;OneOrMany\u0026lt;Type\u0026gt;\u0026gt;; type OneOrManyOrNullStrings = OneOrManyOrNull\u0026lt;string\u0026gt;; We\u0026rsquo;ll circle back to type aliases in just a little bit.\nThe Array Type # Generic object types are often some sort of container type that work independently of the type of elements they contain. It\u0026rsquo;s ideal for data structures to work this way so that they\u0026rsquo;re re-usable across different data types.\nIt turns out we\u0026rsquo;ve been working with a type just like that throughout this handbook: the Array type. Whenever we write out types like number[] or string[], that\u0026rsquo;s really just a shorthand for Array\u0026lt;number\u0026gt; and Array\u0026lt;string\u0026gt;.\nfunction doSomething(value: Array\u0026lt;string\u0026gt;) { // ... } let myArray: string[] = [\u0026#34;hello\u0026#34;, \u0026#34;world\u0026#34;]; // either of these work! doSomething(myArray); doSomething(new Array(\u0026#34;hello\u0026#34;, \u0026#34;world\u0026#34;)); Much like the Box type above, Array itself is a generic type.\ninterface Array\u0026lt;Type\u0026gt; { /** * Gets or sets the length of the array. */ length: number; /** * Removes the last element from an array and returns it. */ pop(): Type | undefined; /** * Appends new elements to an array, and returns the new length of the array. */ push(...items: Type[]): number; // ... } Modern JavaScript also provides other data structures which are generic, like Map\u0026lt;K, V\u0026gt;, Set\u0026lt;T\u0026gt;, and Promise\u0026lt;T\u0026gt;. All this really means is that because of how Map, Set, and Promise behave, they can work with any sets of types.\nThe ReadonlyArray Type # The ReadonlyArray is a special type that describes arrays that shouldn\u0026rsquo;t be changed.\nfunction doStuff(values: ReadonlyArray\u0026lt;string\u0026gt;) { // We can read from \u0026#39;values\u0026#39;... const copy = values.slice(); console.log(`The first value is ${values[0]}`); // ...but we can\u0026#39;t mutate \u0026#39;values\u0026#39;. values.push(\u0026#34;hello!\u0026#34;); } Much like the readonly modifier for properties, it\u0026rsquo;s mainly a tool we can use for intent. When we see a function that returns ReadonlyArrays, it tells us we\u0026rsquo;re not meant to change the contents at all, and when we see a function that consumes ReadonlyArrays, it tells us that we can pass any array into that function without worrying that it will change its contents.\nUnlike Array, there isn\u0026rsquo;t a ReadonlyArray constructor that we can use.\nnew ReadonlyArray(\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;); Instead, we can assign regular Arrays to ReadonlyArrays.\nconst roArray: ReadonlyArray\u0026lt;string\u0026gt; = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;]; Just as TypeScript provides a shorthand syntax for Array\u0026lt;Type\u0026gt; with Type[], it also provides a shorthand syntax for ReadonlyArray\u0026lt;Type\u0026gt; with readonly Type[].\nfunction doStuff(values: readonly string[]) { // We can read from \u0026#39;values\u0026#39;... const copy = values.slice(); console.log(`The first value is ${values[0]}`); // ...but we can\u0026#39;t mutate \u0026#39;values\u0026#39;. values.push(\u0026#34;hello!\u0026#34;); } One last thing to note is that unlike the readonly property modifier, assignability isn\u0026rsquo;t bidirectional between regular Arrays and ReadonlyArrays.\nlet x: readonly string[] = []; let y: string[] = []; x = y; y = x; Tuple Types # A tuple type is another sort of Array type that knows exactly how many elements it contains, and exactly which types it contains at specific positions.\ntype StringNumberPair = [string, number]; Here, StringNumberPair is a tuple type of string and number. Like ReadonlyArray, it has no representation at runtime, but is significant to TypeScript. To the type system, StringNumberPair describes arrays whose 0 index contains a string and whose 1 index contains a number.\nfunction doSomething(pair: [string, number]) { const a = pair[0]; const b = pair[1]; // ... } doSomething([\u0026#34;hello\u0026#34;, 42]); If we try to index past the number of elements, we\u0026rsquo;ll get an error.\nfunction doSomething(pair: [string, number]) { // ... const c = pair[2]; } We can also destructure tuples using JavaScript\u0026rsquo;s array destructuring.\nfunction doSomething(stringHash: [string, number]) { const [inputString, hash] = stringHash; console.log(inputString); console.log(hash); } Tuple types are useful in heavily convention-based APIs, where each element\u0026rsquo;s meaning is \u0026ldquo;obvious\u0026rdquo;. This gives us flexibility in whatever we want to name our variables when we destructure them. In the above example, we were able to name elements 0 and 1 to whatever we wanted.\nHowever, since not every user holds the same view of what\u0026rsquo;s obvious, it may be worth reconsidering whether using objects with descriptive property names may be better for your API.\nOther than those length checks, simple tuple types like these are equivalent to types which are versions of Arrays that declare properties for specific indexes, and that declare length with a numeric literal type.\ninterface StringNumberPair { // specialized properties length: 2; 0: string; 1: number; // Other \u0026#39;Array\u0026lt;string | number\u0026gt;\u0026#39; members... slice(start?: number, end?: number): Array\u0026lt;string | number\u0026gt;; } Another thing you may be interested in is that tuples can have optional properties by writing out a question mark (? after an element\u0026rsquo;s type). Optional tuple elements can only come at the end, and also affect the type of length.\ntype Either2dOr3d = [number, number, number?]; function setCoordinate(coord: Either2dOr3d) { const [x, y, z] = coord; console.log(`Provided coordinates had ${coord.length} dimensions`); } Tuples can also have rest elements, which have to be an array/tuple type.\ntype StringNumberBooleans = [string, number, ...boolean[]]; type StringBooleansNumber = [string, ...boolean[], number]; type BooleansStringNumber = [...boolean[], string, number]; StringNumberBooleans describes a tuple whose first two elements are string and number respectively, but which may have any number of booleans following. StringBooleansNumber describes a tuple whose first element is string and then any number of booleans and ending with a number. BooleansStringNumber describes a tuple whose starting elements are any number of booleans and ending with a string then a number. A tuple with a rest element has no set \u0026ldquo;length\u0026rdquo; - it only has a set of well-known elements in different positions.\nconst a: StringNumberBooleans = [\u0026#34;hello\u0026#34;, 1]; const b: StringNumberBooleans = [\u0026#34;beautiful\u0026#34;, 2, true]; const c: StringNumberBooleans = [\u0026#34;world\u0026#34;, 3, true, false, true, false, true]; Why might optional and rest elements be useful? Well, it allows TypeScript to correspond tuples with parameter lists. Tuples types can be used in rest parameters and arguments, so that the following:\nfunction readButtonInput(...args: [string, number, ...boolean[]]) { const [name, version, ...input] = args; // ... } is basically equivalent to:\nfunction readButtonInput(name: string, version: number, ...input: boolean[]) { // ... } This is handy when you want to take a variable number of arguments with a rest parameter, and you need a minimum number of elements, but you don\u0026rsquo;t want to introduce intermediate variables.\nreadonly Tuple Types # One final note about tuple types - tuple types have readonly variants, and can be specified by sticking a readonly modifier in front of them - just like with array shorthand syntax.\nfunction doSomething(pair: readonly [string, number]) { // ... } As you might expect, writing to any property of a readonly tuple isn\u0026rsquo;t allowed in TypeScript.\nfunction doSomething(pair: readonly [string, number]) { pair[0] = \u0026#34;hello!\u0026#34;; } Tuples tend to be created and left un-modified in most code, so annotating types as readonly tuples when possible is a good default. This is also important given that array literals with const assertions will be inferred with readonly tuple types.\nlet point = [3, 4] as const; function distanceFromOrigin([x, y]: [number, number]) { return Math.sqrt(x ** 2 + y ** 2); } distanceFromOrigin(point); Here, distanceFromOrigin never modifies its elements, but expects a mutable tuple. Since point\u0026rsquo;s type was inferred as readonly [3, 4], it won\u0026rsquo;t be compatible with [number, number] since that type can\u0026rsquo;t guarantee point\u0026rsquo;s elements won\u0026rsquo;t be mutated.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/objects.html{._attribution-link} :::\n"},{"id":300,"href":"/docs/references/languages/typescript/project-references/","title":"Project References","section":"Typescript","content":" Project References # Project references are a new feature in TypeScript 3.0 that allow you to structure your TypeScript programs into smaller pieces.\nBy doing this, you can greatly improve build times, enforce logical separation between components, and organize your code in new and better ways.\nWe\u0026rsquo;re also introducing a new mode for tsc, the --build flag, that works hand in hand with project references to enable faster TypeScript builds.\nAn Example Project # Let\u0026rsquo;s look at a fairly normal program and see how project references can help us better organize it. Imagine you have a project with two modules, converter and units, and a corresponding test file for each:\n/ ├── src/ │ ├── converter.ts │ └── units.ts ├── test/ │ ├── converter-tests.ts │ └── units-tests.ts └── tsconfig.json The test files import the implementation files and do some testing:\n// converter-tests.ts import * as converter from \u0026#34;../src/converter\u0026#34;; assert.areEqual(converter.celsiusToFahrenheit(0), 32); Previously, this structure was rather awkward to work with if you used a single tsconfig file:\nIt was possible for the implementation files to import the test files It wasn\u0026rsquo;t possible to build test and src at the same time without having src appear in the output folder name, which you probably don\u0026rsquo;t want Changing just the internals in the implementation files required typechecking the tests again, even though this wouldn\u0026rsquo;t ever cause new errors Changing just the tests required typechecking the implementation again, even if nothing changed You could use multiple tsconfig files to solve some of those problems, but new ones would appear:\nThere\u0026rsquo;s no built-in up-to-date checking, so you end up always running tsc twice Invoking tsc twice incurs more startup time overhead tsc -w can\u0026rsquo;t run on multiple config files at once Project references can solve all of these problems and more.\nWhat is a Project Reference? # tsconfig.json files have a new top-level property, references. It\u0026rsquo;s an array of objects that specifies projects to reference:\n{ \u0026#34;compilerOptions\u0026#34;: { // The usual }, \u0026#34;references\u0026#34;: [ { \u0026#34;path\u0026#34;: \u0026#34;../src\u0026#34; } ] } The path property of each reference can point to a directory containing a tsconfig.json file, or to the config file itself (which may have any name).\nWhen you reference a project, new things happen:\nImporting modules from a referenced project will instead load its output declaration file (.d.ts) If the referenced project produces an outFile, the output file .d.ts file\u0026rsquo;s declarations will be visible in this project Build mode (see below) will automatically build the referenced project if needed By separating into multiple projects, you can greatly improve the speed of typechecking and compiling, reduce memory usage when using an editor, and improve enforcement of the logical groupings of your program.\ncomposite # Referenced projects must have the new composite setting enabled. This setting is needed to ensure TypeScript can quickly determine where to find the outputs of the referenced project. Enabling the composite flag changes a few things:\nThe rootDir setting, if not explicitly set, defaults to the directory containing the tsconfig file All implementation files must be matched by an include pattern or listed in the files array. If this constraint is violated, tsc will inform you which files weren\u0026rsquo;t specified declaration must be turned on declarationMaps # We\u0026rsquo;ve also added support for declaration source maps. If you enable declarationMap, you\u0026rsquo;ll be able to use editor features like \u0026ldquo;Go to Definition\u0026rdquo; and Rename to transparently navigate and edit code across project boundaries in supported editors.\nprepend with outFile # You can also enable prepending the output of a dependency using the prepend option in a reference:\n\u0026#34;references\u0026#34;: [ { \u0026#34;path\u0026#34;: \u0026#34;../utils\u0026#34;, \u0026#34;prepend\u0026#34;: true } ] Prepending a project will include the project\u0026rsquo;s output above the output of the current project. All output files (.js, .d.ts, .js.map, .d.ts.map) will be emitted correctly.\ntsc will only ever use existing files on disk to do this process, so it\u0026rsquo;s possible to create a project where a correct output file can\u0026rsquo;t be generated because some project\u0026rsquo;s output would be present more than once in the resulting file. For example:\nA ^ ^ / \\ B C ^ ^ \\ / D It\u0026rsquo;s important in this situation to not prepend at each reference, because you\u0026rsquo;ll end up with two copies of A in the output of D - this can lead to unexpected results.\nCaveats for Project References # Project references have a few trade-offs you should be aware of.\nBecause dependent projects make use of .d.ts files that are built from their dependencies, you\u0026rsquo;ll either have to check in certain build outputs or build a project after cloning it before you can navigate the project in an editor without seeing spurious errors.\nWhen using VS Code (since TS 3.7) we have a behind-the-scenes in-memory .d.ts generation process that should be able to mitigate this, but it has some perf implications. For very large composite projects you might want to disable this using disableSourceOfProjectReferenceRedirect option.\nAdditionally, to preserve compatibility with existing build workflows, tsc will not automatically build dependencies unless invoked with the --build switch. Let\u0026rsquo;s learn more about --build.\nBuild Mode for TypeScript # A long-awaited feature is smart incremental builds for TypeScript projects. In 3.0 you can use the --build flag with tsc. This is effectively a new entry point for tsc that behaves more like a build orchestrator than a simple compiler.\nRunning tsc --build (tsc -b for short) will do the following:\nFind all referenced projects Detect if they are up-to-date Build out-of-date projects in the correct order You can provide tsc -b with multiple config file paths (e.g. tsc -b src test). Just like tsc -p, specifying the config file name itself is unnecessary if it\u0026rsquo;s named tsconfig.json.\ntsc -b Commandline # You can specify any number of config files:\n\u0026gt; tsc -b # Use the tsconfig.json in the current directory \u0026gt; tsc -b src # Use src/tsconfig.json \u0026gt; tsc -b foo/prd.tsconfig.json bar # Use foo/prd.tsconfig.json and bar/tsconfig.json Don\u0026rsquo;t worry about ordering the files you pass on the commandline - tsc will re-order them if needed so that dependencies are always built first.\nThere are also some flags specific to tsc -b:\n--verbose: Prints out verbose logging to explain what\u0026rsquo;s going on (may be combined with any other flag) --dry: Shows what would be done but doesn\u0026rsquo;t actually build anything --clean: Deletes the outputs of the specified projects (may be combined with --dry) --force: Act as if all projects are out of date --watch: Watch mode (may not be combined with any flag except --verbose) Caveats # Normally, tsc will produce outputs (.js and .d.ts) in the presence of syntax or type errors, unless noEmitOnError is on. Doing this in an incremental build system would be very bad - if one of your out-of-date dependencies had a new error, you\u0026rsquo;d only see it once because a subsequent build would skip building the now up-to-date project. For this reason, tsc -b effectively acts as if noEmitOnError is enabled for all projects.\nIf you check in any build outputs (.js, .d.ts, .d.ts.map, etc.), you may need to run a --force build after certain source control operations depending on whether your source control tool preserves timestamps between the local copy and the remote copy.\nMSBuild # If you have an msbuild project, you can enable build mode by adding\n\u0026lt;TypeScriptBuildMode\u0026gt;true\u0026lt;/TypeScriptBuildMode\u0026gt; to your proj file. This will enable automatic incremental build as well as cleaning.\nNote that as with tsconfig.json / -p, existing TypeScript project properties will not be respected - all settings should be managed using your tsconfig file.\nSome teams have set up msbuild-based workflows wherein tsconfig files have the same implicit graph ordering as the managed projects they are paired with. If your solution is like this, you can continue to use msbuild with tsc -p along with project references; these are fully interoperable.\nGuidance # Overall Structure # With more tsconfig.json files, you\u0026rsquo;ll usually want to use Configuration file inheritance to centralize your common compiler options. This way you can change a setting in one file rather than having to edit multiple files.\nAnother good practice is to have a \u0026ldquo;solution\u0026rdquo; tsconfig.json file that simply has references to all of your leaf-node projects and sets files to an empty array (otherwise the solution file will cause double compilation of files). Note that starting with 3.0, it is no longer an error to have an empty files array if you have at least one reference in a tsconfig.json file.\nThis presents a simple entry point; e.g. in the TypeScript repo we simply run tsc -b src to build all endpoints because we list all the subprojects in src/tsconfig.json\nYou can see these patterns in the TypeScript repo - see src/tsconfig_base.json, src/tsconfig.json, and src/tsc/tsconfig.json as key examples.\nStructuring for relative modules # In general, not much is needed to transition a repo using relative modules. Simply place a tsconfig.json file in each subdirectory of a given parent folder, and add references to these config files to match the intended layering of the program. You will need to either set the outDir to an explicit subfolder of the output folder, or set the rootDir to the common root of all project folders.\nStructuring for outFiles # Layout for compilations using outFile is more flexible because relative paths don\u0026rsquo;t matter as much. One thing to keep in mind is that you\u0026rsquo;ll generally want to not use prepend until the \u0026ldquo;last\u0026rdquo; project - this will improve build times and reduce the amount of I/O needed in any given build. The TypeScript repo itself is a good reference here - we have some \u0026ldquo;library\u0026rdquo; projects and some \u0026ldquo;endpoint\u0026rdquo; projects; \u0026ldquo;endpoint\u0026rdquo; projects are kept as small as possible and pull in only the libraries they need.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/project-references.html{._attribution-link} :::\n"},{"id":301,"href":"/docs/references/languages/typescript/symbols/","title":"Symbols","section":"Typescript","content":" Symbols # Starting with ECMAScript 2015, symbol is a primitive data type, just like number and string.\nsymbol values are created by calling the Symbol constructor.\nlet sym1 = Symbol(); let sym2 = Symbol(\u0026#34;key\u0026#34;); // optional string key Symbols are immutable, and unique.\nlet sym2 = Symbol(\u0026#34;key\u0026#34;); let sym3 = Symbol(\u0026#34;key\u0026#34;); sym2 === sym3; // false, symbols are unique Just like strings, symbols can be used as keys for object properties.\nconst sym = Symbol(); let obj = { [sym]: \u0026#34;value\u0026#34;, }; console.log(obj[sym]); // \u0026#34;value\u0026#34; Symbols can also be combined with computed property declarations to declare object properties and class members.\nconst getClassNameSymbol = Symbol(); class C { [getClassNameSymbol]() { return \u0026#34;C\u0026#34;; } } let c = new C(); let className = c[getClassNameSymbol](); // \u0026#34;C\u0026#34; unique symbol # To enable treating symbols as unique literals a special type unique symbol is available. unique symbol is a subtype of symbol, and are produced only from calling Symbol() or Symbol.for(), or from explicit type annotations. This type is only allowed on const declarations and readonly static properties, and in order to reference a specific unique symbol, you\u0026rsquo;ll have to use the typeof operator. Each reference to a unique symbol implies a completely unique identity that\u0026rsquo;s tied to a given declaration.\ndeclare const sym1: unique symbol; // sym2 can only be a constant reference. let sym2: unique symbol = Symbol(); // Works - refers to a unique symbol, but its identity is tied to \u0026#39;sym1\u0026#39;. let sym3: typeof sym1 = sym1; // Also works. class C { static readonly StaticSymbol: unique symbol = Symbol(); } Because each unique symbol has a completely separate identity, no two unique symbol types are assignable or comparable to each other.\nconst sym2 = Symbol(); const sym3 = Symbol(); if (sym2 === sym3) { // ... } Well-known Symbols # In addition to user-defined symbols, there are well-known built-in symbols. Built-in symbols are used to represent internal language behaviors.\nHere is a list of well-known symbols:\nSymbol.asyncIterator # A method that returns async iterator for an object, compatible to be used with for await..of loop.\nSymbol.hasInstance # A method that determines if a constructor object recognizes an object as one of the constructor\u0026rsquo;s instances. Called by the semantics of the instanceof operator.\nSymbol.isConcatSpreadable # A Boolean value indicating that an object should be flattened to its array elements by Array.prototype.concat.\nSymbol.iterator # A method that returns the default iterator for an object. Called by the semantics of the for-of statement.\nSymbol.match # A regular expression method that matches the regular expression against a string. Called by the String.prototype.match method.\nSymbol.replace # A regular expression method that replaces matched substrings of a string. Called by the String.prototype.replace method.\nSymbol.search # A regular expression method that returns the index within a string that matches the regular expression. Called by the String.prototype.search method.\nSymbol.species # A function valued property that is the constructor function that is used to create derived objects.\nSymbol.split # A regular expression method that splits a string at the indices that match the regular expression. Called by the String.prototype.split method.\nSymbol.toPrimitive # A method that converts an object to a corresponding primitive value. Called by the ToPrimitive abstract operation.\nSymbol.toStringTag # A String value that is used in the creation of the default string description of an object. Called by the built-in method Object.prototype.toString.\nSymbol.unscopables # An Object whose own property names are property names that are excluded from the \u0026lsquo;with\u0026rsquo; environment bindings of the associated objects.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/symbols.html{._attribution-link} :::\n"},{"id":302,"href":"/docs/references/languages/typescript/template-literal-types/","title":"Template Literal Types","section":"Typescript","content":" Template Literal Types # Template literal types build on string literal types, and have the ability to expand into many strings via unions.\nThey have the same syntax as template literal strings in JavaScript, but are used in type positions. When used with concrete literal types, a template literal produces a new string literal type by concatenating the contents.\ntype World = \u0026#34;world\u0026#34;; type Greeting = `hello ${World}`; When a union is used in the interpolated position, the type is the set of every possible string literal that could be represented by each union member:\ntype EmailLocaleIDs = \u0026#34;welcome_email\u0026#34; | \u0026#34;email_heading\u0026#34;; type FooterLocaleIDs = \u0026#34;footer_title\u0026#34; | \u0026#34;footer_sendoff\u0026#34;; type AllLocaleIDs = `${EmailLocaleIDs | FooterLocaleIDs}_id`; For each interpolated position in the template literal, the unions are cross multiplied:\ntype AllLocaleIDs = `${EmailLocaleIDs | FooterLocaleIDs}_id`; type Lang = \u0026#34;en\u0026#34; | \u0026#34;ja\u0026#34; | \u0026#34;pt\u0026#34;; type LocaleMessageIDs = `${Lang}_${AllLocaleIDs}`; We generally recommend that people use ahead-of-time generation for large string unions, but this is useful in smaller cases.\nString Unions in Types # The power in template literals comes when defining a new string based on information inside a type.\nConsider the case where a function (makeWatchedObject) adds a new function called on() to a passed object. In JavaScript, its call might look like: makeWatchedObject(baseObject). We can imagine the base object as looking like:\nconst passedObject = { firstName: \u0026#34;Saoirse\u0026#34;, lastName: \u0026#34;Ronan\u0026#34;, age: 26, }; The on function that will be added to the base object expects two arguments, an eventName (a string) and a callback (a function).\nThe eventName should be of the form attributeInThePassedObject + \u0026quot;Changed\u0026quot;; thus, firstNameChanged as derived from the attribute firstName in the base object.\nThe callback function, when called:\nShould be passed a value of the type associated with the name attributeInThePassedObject; thus, since firstName is typed as string, the callback for the firstNameChanged event expects a string to be passed to it at call time. Similarly events associated with age should expect to be called with a number argument Should have void return type (for simplicity of demonstration) The naive function signature of on() might thus be: on(eventName: string, callback: (newValue: any) =\u0026gt; void). However, in the preceding description, we identified important type constraints that we\u0026rsquo;d like to document in our code. Template Literal types let us bring these constraints into our code.\nconst person = makeWatchedObject({ firstName: \u0026#34;Saoirse\u0026#34;, lastName: \u0026#34;Ronan\u0026#34;, age: 26, }); // makeWatchedObject has added `on` to the anonymous Object person.on(\u0026#34;firstNameChanged\u0026#34;, (newValue) =\u0026gt; { console.log(`firstName was changed to ${newValue}!`); }); Notice that on listens on the event \u0026quot;firstNameChanged\u0026quot;, not just \u0026quot;firstName\u0026quot;. Our naive specification of on() could be made more robust if we were to ensure that the set of eligible event names was constrained by the union of attribute names in the watched object with \u0026ldquo;Changed\u0026rdquo; added at the end. While we are comfortable with doing such a calculation in JavaScript i.e. Object.keys(passedObject).map(x =\u0026gt; `${x}Changed`), template literals inside the type system provide a similar approach to string manipulation:\ntype PropEventSource\u0026lt;Type\u0026gt; = { on(eventName: `${string \u0026amp; keyof Type}Changed`, callback: (newValue: any) =\u0026gt; void): void; }; /// Create a \u0026#34;watched object\u0026#34; with an `on` method /// so that you can watch for changes to properties. declare function makeWatchedObject\u0026lt;Type\u0026gt;(obj: Type): Type \u0026amp; PropEventSource\u0026lt;Type\u0026gt;; With this, we can build something that errors when given the wrong property:\nconst person = makeWatchedObject({ firstName: \u0026#34;Saoirse\u0026#34;, lastName: \u0026#34;Ronan\u0026#34;, age: 26 }); person.on(\u0026#34;firstNameChanged\u0026#34;, () =\u0026gt; {}); // Prevent easy human error (using the key instead of the event name) person.on(\u0026#34;firstName\u0026#34;, () =\u0026gt; {}); // It\u0026#39;s typo-resistant person.on(\u0026#34;frstNameChanged\u0026#34;, () =\u0026gt; {}); Inference with Template Literals # Notice that we did not benefit from all the information provided in the original passed object. Given change of a firstName (i.e. a firstNameChanged event), we should expect that the callback will receive an argument of type string. Similarly, the callback for a change to age should receive a number argument. We\u0026rsquo;re naively using any to type the callback\u0026rsquo;s argument. Again, template literal types make it possible to ensure an attribute\u0026rsquo;s data type will be the same type as that attribute\u0026rsquo;s callback\u0026rsquo;s first argument.\nThe key insight that makes this possible is this: we can use a function with a generic such that:\nThe literal used in the first argument is captured as a literal type That literal type can be validated as being in the union of valid attributes in the generic The type of the validated attribute can be looked up in the generic\u0026rsquo;s structure using Indexed Access This typing information can then be applied to ensure the argument to the callback function is of the same type type PropEventSource\u0026lt;Type\u0026gt; = { on\u0026lt;Key extends string \u0026amp; keyof Type\u0026gt; (eventName: `${Key}Changed`, callback: (newValue: Type[Key]) =\u0026gt; void): void; }; declare function makeWatchedObject\u0026lt;Type\u0026gt;(obj: Type): Type \u0026amp; PropEventSource\u0026lt;Type\u0026gt;; const person = makeWatchedObject({ firstName: \u0026#34;Saoirse\u0026#34;, lastName: \u0026#34;Ronan\u0026#34;, age: 26 }); person.on(\u0026#34;firstNameChanged\u0026#34;, newName =\u0026gt; { console.log(`new name is ${newName.toUpperCase()}`); }); person.on(\u0026#34;ageChanged\u0026#34;, newAge =\u0026gt; { if (newAge \u0026lt; 0) { console.warn(\u0026#34;warning! negative age\u0026#34;); } }) Here we made on into a generic method.\nWhen a user calls with the string \u0026quot;firstNameChanged\u0026quot;, TypeScript will try to infer the right type for Key. To do that, it will match Key against the content before \u0026quot;Changed\u0026quot; and infer the string \u0026quot;firstName\u0026quot;. Once TypeScript figures that out, the on method can fetch the type of firstName on the original object, which is string in this case. Similarly, when called with \u0026quot;ageChanged\u0026quot;, TypeScript finds the type for the property age which is number.\nInference can be combined in different ways, often to deconstruct strings, and reconstruct them in different ways.\nIntrinsic String Manipulation Types # To help with string manipulation, TypeScript includes a set of types which can be used in string manipulation. These types come built-in to the compiler for performance and can\u0026rsquo;t be found in the .d.ts files included with TypeScript.\nUppercase\u0026lt;StringType\u0026gt; # Converts each character in the string to the uppercase version.\nExample # type Greeting = \u0026#34;Hello, world\u0026#34; type ShoutyGreeting = Uppercase\u0026lt;Greeting\u0026gt; type ASCIICacheKey\u0026lt;Str extends string\u0026gt; = `ID-${Uppercase\u0026lt;Str\u0026gt;}` type MainID = ASCIICacheKey\u0026lt;\u0026#34;my_app\u0026#34;\u0026gt; Lowercase\u0026lt;StringType\u0026gt; # Converts each character in the string to the lowercase equivalent.\nExample # type Greeting = \u0026#34;Hello, world\u0026#34; type QuietGreeting = Lowercase\u0026lt;Greeting\u0026gt; type ASCIICacheKey\u0026lt;Str extends string\u0026gt; = `id-${Lowercase\u0026lt;Str\u0026gt;}` type MainID = ASCIICacheKey\u0026lt;\u0026#34;MY_APP\u0026#34;\u0026gt; Capitalize\u0026lt;StringType\u0026gt; # Converts the first character in the string to an uppercase equivalent.\nExample # type LowercaseGreeting = \u0026#34;hello, world\u0026#34;; type Greeting = Capitalize\u0026lt;LowercaseGreeting\u0026gt;; Uncapitalize\u0026lt;StringType\u0026gt; # Converts the first character in the string to a lowercase equivalent.\nExample # type UppercaseGreeting = \u0026#34;HELLO WORLD\u0026#34;; type UncomfortableGreeting = Uncapitalize\u0026lt;UppercaseGreeting\u0026gt;; Technical details on the intrinsic string manipulation types\nThe code, as of TypeScript 4.1, for these intrinsic functions uses the JavaScript string runtime functions directly for manipulation and are not locale aware.\nfunction applyStringMapping(symbol: Symbol, str: string) { switch (intrinsicTypeKinds.get(symbol.escapedName as string)) { case IntrinsicTypeKind.Uppercase: return str.toUpperCase(); case IntrinsicTypeKind.Lowercase: return str.toLowerCase(); case IntrinsicTypeKind.Capitalize: return str.charAt(0).toUpperCase() + str.slice(1); case IntrinsicTypeKind.Uncapitalize: return str.charAt(0).toLowerCase() + str.slice(1); } return str; } ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/template-literal-types.html{._attribution-link} :::\n"},{"id":303,"href":"/docs/references/languages/typescript/triple-slash-directives/","title":"Triple Slash Directives","section":"Typescript","content":" Triple-Slash Directives # Triple-slash directives are single-line comments containing a single XML tag. The contents of the comment are used as compiler directives.\nTriple-slash directives are only valid at the top of their containing file. A triple-slash directive can only be preceded by single or multi-line comments, including other triple-slash directives. If they are encountered following a statement or a declaration they are treated as regular single-line comments, and hold no special meaning.\n/// \u0026lt;reference path=\u0026quot;...\u0026quot; /\u0026gt; # The /// \u0026lt;reference path=\u0026quot;...\u0026quot; /\u0026gt; directive is the most common of this group. It serves as a declaration of dependency between files.\nTriple-slash references instruct the compiler to include additional files in the compilation process.\nThey also serve as a method to order the output when using out or outFile. Files are emitted to the output file location in the same order as the input after preprocessing pass.\nPreprocessing input files # The compiler performs a preprocessing pass on input files to resolve all triple-slash reference directives. During this process, additional files are added to the compilation.\nThe process starts with a set of root files; these are the file names specified on the command-line or in the files list in the tsconfig.json file. These root files are preprocessed in the same order they are specified. Before a file is added to the list, all triple-slash references in it are processed, and their targets included. Triple-slash references are resolved in a depth-first manner, in the order they have been seen in the file.\nA triple-slash reference path is resolved relative to the containing file, if a relative path is used.\nErrors # It is an error to reference a file that does not exist. It is an error for a file to have a triple-slash reference to itself.\nUsing --noResolve # If the compiler flag noResolve is specified, triple-slash references are ignored; they neither result in adding new files, nor change the order of the files provided.\n/// \u0026lt;reference types=\u0026quot;...\u0026quot; /\u0026gt; # Similar to a /// \u0026lt;reference path=\u0026quot;...\u0026quot; /\u0026gt; directive, which serves as a declaration of dependency, a /// \u0026lt;reference types=\u0026quot;...\u0026quot; /\u0026gt; directive declares a dependency on a package.\nThe process of resolving these package names is similar to the process of resolving module names in an import statement. An easy way to think of triple-slash-reference-types directives are as an import for declaration packages.\nFor example, including /// \u0026lt;reference types=\u0026quot;node\u0026quot; /\u0026gt; in a declaration file declares that this file uses names declared in @types/node/index.d.ts; and thus, this package needs to be included in the compilation along with the declaration file.\nUse these directives only when you\u0026rsquo;re authoring a d.ts file by hand.\nFor declaration files generated during compilation, the compiler will automatically add /// \u0026lt;reference types=\u0026quot;...\u0026quot; /\u0026gt; for you; A /// \u0026lt;reference types=\u0026quot;...\u0026quot; /\u0026gt; in a generated declaration file is added if and only if the resulting file uses any declarations from the referenced package.\nFor declaring a dependency on an @types package in a .ts file, use types on the command line or in your tsconfig.json instead. See using @types, typeRoots and types in tsconfig.json files for more details.\n/// \u0026lt;reference lib=\u0026quot;...\u0026quot; /\u0026gt; # This directive allows a file to explicitly include an existing built-in lib file.\nBuilt-in lib files are referenced in the same fashion as the lib compiler option in tsconfig.json (e.g. use lib=\u0026quot;es2015\u0026quot; and not lib=\u0026quot;lib.es2015.d.ts\u0026quot;, etc.).\nFor declaration file authors who rely on built-in types, e.g. DOM APIs or built-in JS run-time constructors like Symbol or Iterable, triple-slash-reference lib directives are recommended. Previously these .d.ts files had to add forward/duplicate declarations of such types.\nFor example, adding /// \u0026lt;reference lib=\u0026quot;es2017.string\u0026quot; /\u0026gt; to one of the files in a compilation is equivalent to compiling with --lib es2017.string.\n/// \u0026lt;reference lib=\u0026#34;es2017.string\u0026#34; /\u0026gt; \u0026#34;foo\u0026#34;.padStart(4); /// \u0026lt;reference no-default-lib=\u0026quot;true\u0026quot;/\u0026gt; # This directive marks a file as a default library. You will see this comment at the top of lib.d.ts and its different variants.\nThis directive instructs the compiler to not include the default library (i.e. lib.d.ts) in the compilation. The impact here is similar to passing noLib on the command line.\nAlso note that when passing skipDefaultLibCheck, the compiler will only skip checking files with /// \u0026lt;reference no-default-lib=\u0026quot;true\u0026quot;/\u0026gt;.\n/// \u0026lt;amd-module /\u0026gt; # By default AMD modules are generated anonymous. This can lead to problems when other tools are used to process the resulting modules, such as bundlers (e.g. r.js).\nThe amd-module directive allows passing an optional module name to the compiler:\namdModule.ts # ///\u0026lt;amd-module name=\u0026#34;NamedModule\u0026#34;/\u0026gt; export class C {} Will result in assigning the name NamedModule to the module as part of calling the AMD define:\namdModule.js # define(\u0026#34;NamedModule\u0026#34;, [\u0026#34;require\u0026#34;, \u0026#34;exports\u0026#34;], function (require, exports) { var C = (function () { function C() {} return C; })(); exports.C = C; }); /// \u0026lt;amd-dependency /\u0026gt; # Note: this directive has been deprecated. Use import \u0026quot;moduleName\u0026quot;; statements instead.\n/// \u0026lt;amd-dependency path=\u0026quot;x\u0026quot; /\u0026gt; informs the compiler about a non-TS module dependency that needs to be injected in the resulting module\u0026rsquo;s require call.\nThe amd-dependency directive can also have an optional name property; this allows passing an optional name for an amd-dependency:\n/// \u0026lt;amd-dependency path=\u0026#34;legacy/moduleA\u0026#34; name=\u0026#34;moduleA\u0026#34;/\u0026gt; declare var moduleA: MyType; moduleA.callStuff(); Generated JS code:\ndefine([\u0026#34;require\u0026#34;, \u0026#34;exports\u0026#34;, \u0026#34;legacy/moduleA\u0026#34;], function ( require, exports, moduleA ) { moduleA.callStuff(); }); ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/triple-slash-directives.html{._attribution-link} :::\n"},{"id":304,"href":"/docs/references/languages/typescript/tsconfig-json/","title":"Tsconfig JSON","section":"Typescript","content":" What is a tsconfig.json # Overview # The presence of a tsconfig.json file in a directory indicates that the directory is the root of a TypeScript project. The tsconfig.json file specifies the root files and the compiler options required to compile the project.\nJavaScript projects can use a jsconfig.json file instead, which acts almost the same but has some JavaScript-related compiler flags enabled by default.\nA project is compiled in one of the following ways:\nUsing tsconfig.json or jsconfig.json # By invoking tsc with no input files, in which case the compiler searches for the tsconfig.json file starting in the current directory and continuing up the parent directory chain. By invoking tsc with no input files and a --project (or just -p) command line option that specifies the path of a directory containing a tsconfig.json file, or a path to a valid .json file containing the configurations. When input files are specified on the command line, tsconfig.json files are ignored.\nExamples # Example tsconfig.json files:\nUsing the files property\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;module\u0026#34;: \u0026#34;commonjs\u0026#34;, \u0026#34;noImplicitAny\u0026#34;: true, \u0026#34;removeComments\u0026#34;: true, \u0026#34;preserveConstEnums\u0026#34;: true, \u0026#34;sourceMap\u0026#34;: true }, \u0026#34;files\u0026#34;: [ \u0026#34;core.ts\u0026#34;, \u0026#34;sys.ts\u0026#34;, \u0026#34;types.ts\u0026#34;, \u0026#34;scanner.ts\u0026#34;, \u0026#34;parser.ts\u0026#34;, \u0026#34;utilities.ts\u0026#34;, \u0026#34;binder.ts\u0026#34;, \u0026#34;checker.ts\u0026#34;, \u0026#34;emitter.ts\u0026#34;, \u0026#34;program.ts\u0026#34;, \u0026#34;commandLineParser.ts\u0026#34;, \u0026#34;tsc.ts\u0026#34;, \u0026#34;diagnosticInformationMap.generated.ts\u0026#34; ] } Using the include and exclude properties\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;module\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;noImplicitAny\u0026#34;: true, \u0026#34;removeComments\u0026#34;: true, \u0026#34;preserveConstEnums\u0026#34;: true, \u0026#34;outFile\u0026#34;: \u0026#34;../../built/local/tsc.js\u0026#34;, \u0026#34;sourceMap\u0026#34;: true }, \u0026#34;include\u0026#34;: [\u0026#34;src/**/*\u0026#34;], \u0026#34;exclude\u0026#34;: [\u0026#34;**/*.spec.ts\u0026#34;] } TSConfig Bases # Depending on the JavaScript runtime environment which you intend to run your code in, there may be a base configuration which you can use at github.com/tsconfig/bases. These are tsconfig.json files which your project extends from which simplifies your tsconfig.json by handling the runtime support.\nFor example, if you were writing a project which uses Node.js version 12 and above, then you could use the npm module @tsconfig/node12:\n{ \u0026#34;extends\u0026#34;: \u0026#34;@tsconfig/node12/tsconfig.json\u0026#34;, \u0026#34;compilerOptions\u0026#34;: { \u0026#34;preserveConstEnums\u0026#34;: true }, \u0026#34;include\u0026#34;: [\u0026#34;src/**/*\u0026#34;], \u0026#34;exclude\u0026#34;: [\u0026#34;**/*.spec.ts\u0026#34;] } This lets your tsconfig.json focus on the unique choices for your project, and not all of the runtime mechanics. There are a few tsconfig bases already, and we\u0026rsquo;re hoping the community can add more for different environments.\nDetails # The \u0026quot;compilerOptions\u0026quot; property can be omitted, in which case the compiler\u0026rsquo;s defaults are used. See our full list of supported Compiler Options.\nTSConfig Reference # To learn more about the hundreds of configuration options in the TSConfig Reference.\nSchema # The tsconfig.json Schema can be found at the JSON Schema Store.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/tsconfig-json.html{._attribution-link} :::\n"},{"id":305,"href":"/docs/references/languages/typescript/tsconfig/","title":"Tsconfig","section":"Typescript","content":" TSConfig Reference # {aria-expanded=\u0026ldquo;false\u0026rdquo; role=\u0026ldquo;button\u0026rdquo;}\nIntro to the TSConfig Reference # ::: preview A TSConfig file in a directory indicates that the directory is the root of a TypeScript or JavaScript project... :::\n::: {.tsconfig .main-content-block}\nCompiler Options # ::: tsconfig-quick-nav ::: tsconfig-quick-nav-category\nTop Level {#quick-nav-Top Level} # files, extends, include, excludeand references ::: ::: ::: {.tsconfig-quick-nav .grouped}\n\u0026quot;compilerOptions\u0026quot; # ::: tsconfig-quick-nav-category\nType Checking # allowUnreachableCode, allowUnusedLabels, alwaysStrict, exactOptionalPropertyTypes, noFallthroughCasesInSwitch, noImplicitAny, noImplicitOverride, noImplicitReturns, noImplicitThis, noPropertyAccessFromIndexSignature, noUncheckedIndexedAccess, noUnusedLocals, noUnusedParameters, strict, strictBindCallApply, strictFunctionTypes, strictNullChecks, strictPropertyInitializationand useUnknownInCatchVariables ::: ::: tsconfig-quick-nav-category\nModules # allowArbitraryExtensions, allowImportingTsExtensions, allowUmdGlobalAccess, baseUrl, customConditions, module, moduleResolution, moduleSuffixes, noResolve, paths, resolveJsonModule, resolvePackageJsonExports, resolvePackageJsonImports, rootDir, rootDirs, typeRootsand types ::: ::: tsconfig-quick-nav-category\nEmit # declaration, declarationDir, declarationMap, downlevelIteration, emitBOM, emitDeclarationOnly, importHelpers, importsNotUsedAsValues, inlineSourceMap, inlineSources, mapRoot, newLine, noEmit, noEmitHelpers, noEmitOnError, outDir, outFile, preserveConstEnums, preserveValueImports, removeComments, sourceMap, sourceRootand stripInternal ::: ::: tsconfig-quick-nav-category\nJavaScript Support # allowJs, checkJsand maxNodeModuleJsDepth ::: ::: tsconfig-quick-nav-category\nEditor Support # disableSizeLimitand plugins ::: ::: tsconfig-quick-nav-category\nInterop Constraints # allowSyntheticDefaultImports, esModuleInterop, forceConsistentCasingInFileNames, isolatedModules, preserveSymlinksand verbatimModuleSyntax ::: ::: tsconfig-quick-nav-category\nBackwards Compatibility # charset, keyofStringsOnly, noImplicitUseStrict, noStrictGenericChecks, out, suppressExcessPropertyErrorsand suppressImplicitAnyIndexErrors ::: ::: tsconfig-quick-nav-category\nLanguage and Environment # emitDecoratorMetadata, experimentalDecorators, jsx, jsxFactory, jsxFragmentFactory, jsxImportSource, lib, moduleDetection, noLib, reactNamespace, targetand useDefineForClassFields ::: ::: tsconfig-quick-nav-category\nCompiler Diagnostics # diagnostics, explainFiles, extendedDiagnostics, generateCpuProfile, listEmittedFiles, listFilesand traceResolution ::: ::: tsconfig-quick-nav-category\nProjects # composite, disableReferencedProjectLoad, disableSolutionSearching, disableSourceOfProjectReferenceRedirect, incrementaland tsBuildInfoFile ::: ::: tsconfig-quick-nav-category\nOutput Formatting # noErrorTruncation, preserveWatchOutputand pretty ::: ::: tsconfig-quick-nav-category\nCompleteness # skipDefaultLibCheckand skipLibCheck ::: ::: tsconfig-quick-nav-category\nCommand Line # :::\n::: tsconfig-quick-nav-category\nWatch Options # assumeChangesOnlyAffectDirectDependencies ::: ::: ::: {.tsconfig-quick-nav .grouped}\n\u0026quot;watchOptions\u0026quot; # ::: tsconfig-quick-nav-category\nwatchOptions # watchFile, watchDirectory, fallbackPolling, synchronousWatchDirectory, excludeDirectoriesand excludeFiles ::: ::: ::: {.tsconfig-quick-nav .grouped}\n\u0026quot;typeAcquisition\u0026quot; # ::: tsconfig-quick-nav-category\ntypeAcquisition # enable, include, excludeand disableFilenameBasedTypeAcquisition ::: ::: ::: Root Fields # Starting up are the root options in the TSConfig - these options relate to how your TypeScript or JavaScript project is set up.\n::: section\nFiles - files # Specifies an allowlist of files to include in the program. An error occurs if any of the files can\u0026rsquo;t be found.\n{ \u0026#34;compilerOptions\u0026#34;: {}, \u0026#34;files\u0026#34;: [ \u0026#34;core.ts\u0026#34;, \u0026#34;sys.ts\u0026#34;, \u0026#34;types.ts\u0026#34;, \u0026#34;scanner.ts\u0026#34;, \u0026#34;parser.ts\u0026#34;, \u0026#34;utilities.ts\u0026#34;, \u0026#34;binder.ts\u0026#34;, \u0026#34;checker.ts\u0026#34;, \u0026#34;tsc.ts\u0026#34; ] } This is useful when you only have a small number of files and don\u0026rsquo;t need to use a glob to reference many files. If you need that then use include.\nDefault:\nfalse\nRelated:\ninclude{aria-label=\u0026ldquo;Jump to compiler option info for include\u0026rdquo;}\nexclude{aria-label=\u0026ldquo;Jump to compiler option info for exclude\u0026rdquo;}\n::: ::: section\nExtends - extends # The value of extends is a string which contains a path to another configuration file to inherit from. The path may use Node.js style resolution.\nThe configuration from the base file are loaded first, then overridden by those in the inheriting config file. All relative paths found in the configuration file will be resolved relative to the configuration file they originated in.\nIt\u0026rsquo;s worth noting that files, include, and exclude from the inheriting config file overwrite those from the base config file, and that circularity between configuration files is not allowed.\nCurrently, the only top-level property that is excluded from inheritance is references.\nExample # configs/base.json:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;noImplicitAny\u0026#34;: true, \u0026#34;strictNullChecks\u0026#34;: true } } tsconfig.json:\n{ \u0026#34;extends\u0026#34;: \u0026#34;./configs/base\u0026#34;, \u0026#34;files\u0026#34;: [\u0026#34;main.ts\u0026#34;, \u0026#34;supplemental.ts\u0026#34;] } tsconfig.nostrictnull.json:\n{ \u0026#34;extends\u0026#34;: \u0026#34;./tsconfig\u0026#34;, \u0026#34;compilerOptions\u0026#34;: { \u0026#34;strictNullChecks\u0026#34;: false } } Properties with relative paths found in the configuration file, which aren\u0026rsquo;t excluded from inheritance, will be resolved relative to the configuration file they originated in.\nDefault:\nfalse\nReleased:\n2.1{aria-label=\u0026ldquo;Release notes for TypeScript 2.1\u0026rdquo;}\n::: ::: section\nInclude - include # Specifies an array of filenames or patterns to include in the program. These filenames are resolved relative to the directory containing the tsconfig.json file.\n{ \u0026#34;include\u0026#34;: [\u0026#34;src/**/*\u0026#34;, \u0026#34;tests/**/*\u0026#34;] } Which would include:\n. ├── scripts ⨯ │ ├── lint.ts ⨯ │ ├── update_deps.ts ⨯ │ └── utils.ts ⨯ ├── src ✓ │ ├── client ✓ │ │ ├── index.ts ✓ │ │ └── utils.ts ✓ │ ├── server ✓ │ │ └── index.ts ✓ ├── tests ✓ │ ├── app.test.ts ✓ │ ├── utils.ts ✓ │ └── tests.d.ts ✓ ├── package.json ├── tsconfig.json └── yarn.lock include and exclude support wildcard characters to make glob patterns:\n* matches zero or more characters (excluding directory separators) ? matches any one character (excluding directory separators) **/ matches any directory nested to any level If a glob pattern doesn\u0026rsquo;t include a file extension, then only files with supported extensions are included (e.g. .ts, .tsx, and .d.ts by default, with .js and .jsx if allowJs is set to true).\nDefault:\n[] if files is specified, ** otherwise.\nRelated:\nfiles{aria-label=\u0026ldquo;Jump to compiler option info for files\u0026rdquo;}\nexclude{aria-label=\u0026ldquo;Jump to compiler option info for exclude\u0026rdquo;}\nReleased:\n2.0{aria-label=\u0026ldquo;Release notes for TypeScript 2.0\u0026rdquo;}\n::: ::: section\nExclude - exclude # Specifies an array of filenames or patterns that should be skipped when resolving include.\nImportant: exclude only changes which files are included as a result of the include setting. A file specified by exclude can still become part of your codebase due to an import statement in your code, a types inclusion, a /// \u0026lt;reference directive, or being specified in the files list.\nIt is not a mechanism that prevents a file from being included in the codebase - it simply changes what the include setting finds.\nDefault:\nnode_modules bower_components jspm_packages outDir\nRelated:\ninclude{aria-label=\u0026ldquo;Jump to compiler option info for include\u0026rdquo;}\nfiles{aria-label=\u0026ldquo;Jump to compiler option info for files\u0026rdquo;}\n::: ::: section\nReferences - references # Project references are a way to structure your TypeScript programs into smaller pieces. Using Project References can greatly improve build and editor interaction times, enforce logical separation between components, and organize your code in new and improved ways.\nYou can read more about how references works in the Project References section of the handbook\nDefault:\nfalse\n::: Compiler Options # These options make up the bulk of TypeScript\u0026rsquo;s configuration and it covers how the language should work.\nType Checking Modules Emit JavaScript Support Editor Support Interop Constraints Backwards Compatibility Language and Environment Compiler Diagnostics Projects Output Formatting Completeness Command Line Watch Options ::: category\nType Checking # :::\n::: section\nAllow Unreachable Code - allowUnreachableCode # When:\nundefined (default) provide suggestions as warnings to editors true unreachable code is ignored false raises compiler errors about unreachable code These warnings are only about code which is provably unreachable due to the use of JavaScript syntax, for example:\nfunction fn(n: number) { if (n \u0026gt; 5) { return true; } else { return false; } return true; } With \u0026quot;allowUnreachableCode\u0026quot;: false:\nfunction fn(n: number) { if (n \u0026gt; 5) { return true; } else { return false; } return true; } This does not affect errors on the basis of code which appears to be unreachable due to type analysis.\nReleased:\n1.8{aria-label=\u0026ldquo;Release notes for TypeScript 1.8\u0026rdquo;}\n::: ::: section\nAllow Unused Labels - allowUnusedLabels # When:\nundefined (default) provide suggestions as warnings to editors true unused labels are ignored false raises compiler errors about unused labels Labels are very rare in JavaScript and typically indicate an attempt to write an object literal:\nfunction verifyAge(age: number) { // Forgot \u0026#39;return\u0026#39; statement if (age \u0026gt; 18) { verified: true; } } Released:\n1.8{aria-label=\u0026ldquo;Release notes for TypeScript 1.8\u0026rdquo;}\n::: ::: section\nAlways Strict - alwaysStrict # Ensures that your files are parsed in the ECMAScript strict mode, and emit \u0026ldquo;use strict\u0026rdquo; for each source file.\nECMAScript strict mode was introduced in ES5 and provides behavior tweaks to the runtime of the JavaScript engine to improve performance, and makes a set of errors throw instead of silently ignoring them.\nRecommended\nDefault:\ntrue if strict, false otherwise.\nRelated:\nstrict{aria-label=\u0026ldquo;Jump to compiler option info for strict\u0026rdquo;} Released:\n2.1{aria-label=\u0026ldquo;Release notes for TypeScript 2.1\u0026rdquo;}\n::: ::: section\nExact Optional Property Types - exactOptionalPropertyTypes # With exactOptionalPropertyTypes enabled, TypeScript applies stricter rules around how it handles properties on type or interfaces which have a ? prefix.\nFor example, this interface declares that there is a property which can be one of two strings: \u0026lsquo;dark\u0026rsquo; or \u0026rsquo;light\u0026rsquo; or it should not be in the object.\ninterface UserDefaults { // The absence of a value represents \u0026#39;system\u0026#39; colorThemeOverride?: \u0026#34;dark\u0026#34; | \u0026#34;light\u0026#34;; } Without this flag enabled, there are three values which you can set colorThemeOverride to be: \u0026ldquo;dark\u0026rdquo;, \u0026ldquo;light\u0026rdquo; and undefined.\nSetting the value to undefined will allow most JavaScript runtime checks for the existence to fail, which is effectively falsy. However, this isn\u0026rsquo;t quite accurate; colorThemeOverride: undefined is not the same as colorThemeOverride not being defined. For example, \u0026quot;colorThemeOverride\u0026quot; in settings would have different behavior with undefined as the key compared to not being defined.\nexactOptionalPropertyTypes makes TypeScript truly enforce the definition provided as an optional property:\nconst settings = getUserSettings(); settings.colorThemeOverride = \u0026#34;dark\u0026#34;; settings.colorThemeOverride = \u0026#34;light\u0026#34;; // But not: settings.colorThemeOverride = undefined; Recommended\nReleased:\n4.4{aria-label=\u0026ldquo;Release notes for TypeScript 4.4\u0026rdquo;}\n::: ::: section\nNo Fallthrough Cases In Switch - noFallthroughCasesInSwitch # Report errors for fallthrough cases in switch statements. Ensures that any non-empty case inside a switch statement includes either break, return, or throw. This means you won\u0026rsquo;t accidentally ship a case fallthrough bug.\nconst a: number = 6; switch (a) { case 0: console.log(\u0026#34;even\u0026#34;); case 1: console.log(\u0026#34;odd\u0026#34;); break; } Released:\n1.8{aria-label=\u0026ldquo;Release notes for TypeScript 1.8\u0026rdquo;}\n::: ::: section\nNo Implicit Any - noImplicitAny # In some cases where no type annotations are present, TypeScript will fall back to a type of any for a variable when it cannot infer the type.\nThis can cause some errors to be missed, for example:\nfunction fn(s) { // No error? console.log(s.subtr(3)); } fn(42); Turning on noImplicitAny however TypeScript will issue an error whenever it would have inferred any:\nfunction fn(s) { console.log(s.subtr(3)); } Recommended\nDefault:\ntrue if strict, false otherwise.\nRelated:\nstrict{aria-label=\u0026ldquo;Jump to compiler option info for strict\u0026rdquo;} ::: ::: section\nNo Implicit Override - noImplicitOverride # When working with classes which use inheritance, it\u0026rsquo;s possible for a sub-class to get \u0026ldquo;out of sync\u0026rdquo; with the functions it overloads when they are renamed in the base class.\nFor example, imagine you are modeling a music album syncing system:\nclass Album { download() { // Default behavior } } class SharedAlbum extends Album { download() { // Override to get info from many sources } } Then when you add support for machine-learning generated playlists, you refactor the Album class to have a \u0026lsquo;setup\u0026rsquo; function instead:\nclass Album { setup() { // Default behavior } } class MLAlbum extends Album { setup() { // Override to get info from algorithm } } class SharedAlbum extends Album { download() { // Override to get info from many sources } } In this case, TypeScript has provided no warning that download on SharedAlbum expected to override a function in the base class.\nUsing noImplicitOverride you can ensure that the sub-classes never go out of sync, by ensuring that functions which override include the keyword override.\nThe following example has noImplicitOverride enabled, and you can see the error received when override is missing:\nclass Album { setup() {} } class MLAlbum extends Album { override setup() {} } class SharedAlbum extends Album { setup() {} } Released:\n4.3{aria-label=\u0026ldquo;Release notes for TypeScript 4.3\u0026rdquo;}\n::: ::: section\nNo Implicit Returns - noImplicitReturns # When enabled, TypeScript will check all code paths in a function to ensure they return a value.\nfunction lookupHeadphonesManufacturer(color: \u0026#34;blue\u0026#34; | \u0026#34;black\u0026#34;): string { if (color === \u0026#34;blue\u0026#34;) { return \u0026#34;beats\u0026#34;; } else { \u0026#34;bose\u0026#34;; } } Released:\n1.8{aria-label=\u0026ldquo;Release notes for TypeScript 1.8\u0026rdquo;}\n::: ::: section\nNo Implicit This - noImplicitThis # Raise error on \u0026rsquo;this\u0026rsquo; expressions with an implied \u0026lsquo;any\u0026rsquo; type.\nFor example, the class below returns a function which tries to access this.width and this.height \u0026ndash; but the context for this inside the function inside getAreaFunction is not the instance of the Rectangle.\nclass Rectangle { width: number; height: number; constructor(width: number, height: number) { this.width = width; this.height = height; } getAreaFunction() { return function () { return this.width * this.height; }; } } Recommended\nDefault:\ntrue if strict, false otherwise.\nRelated:\nstrict{aria-label=\u0026ldquo;Jump to compiler option info for strict\u0026rdquo;} Released:\n2.0{aria-label=\u0026ldquo;Release notes for TypeScript 2.0\u0026rdquo;}\n::: ::: section\nNo Property Access From Index Signature - noPropertyAccessFromIndexSignature # This setting ensures consistency between accessing a field via the \u0026ldquo;dot\u0026rdquo; (obj.key) syntax, and \u0026ldquo;indexed\u0026rdquo; (obj[\u0026quot;key\u0026quot;]) and the way which the property is declared in the type.\nWithout this flag, TypeScript will allow you to use the dot syntax to access fields which are not defined:\ninterface GameSettings { // Known up-front properties speed: \u0026#34;fast\u0026#34; | \u0026#34;medium\u0026#34; | \u0026#34;slow\u0026#34;; quality: \u0026#34;high\u0026#34; | \u0026#34;low\u0026#34;; // Assume anything unknown to the interface // is a string. [key: string]: string; } const settings = getSettings(); settings.speed; settings.quality; // Unknown key accessors are allowed on // this object, and are `string` settings.username; Turning the flag on will raise an error because the unknown field uses dot syntax instead of indexed syntax.\nconst settings = getSettings(); settings.speed; settings.quality; // This would need to be settings[\u0026#34;username\u0026#34;]; settings.username; The goal of this flag is to signal intent in your calling syntax about how certain you are this property exists.\nReleased:\n4.2{aria-label=\u0026ldquo;Release notes for TypeScript 4.2\u0026rdquo;}\n::: ::: section\nNo Unchecked Indexed Access - noUncheckedIndexedAccess # TypeScript has a way to describe objects which have unknown keys but known values on an object, via index signatures.\ninterface EnvironmentVars { NAME: string; OS: string; // Unknown properties are covered by this index signature. [propName: string]: string; } declare const env: EnvironmentVars; // Declared as existing const sysName = env.NAME; const os = env.OS; // Not declared, but because of the index // signature, then it is considered a string const nodeEnv = env.NODE_ENV; Turning on noUncheckedIndexedAccess will add undefined to any un-declared field in the type.\ndeclare const env: EnvironmentVars; // Declared as existing const sysName = env.NAME; const os = env.OS; // Not declared, but because of the index // signature, then it is considered a string const nodeEnv = env.NODE_ENV; Released:\n4.1{aria-label=\u0026ldquo;Release notes for TypeScript 4.1\u0026rdquo;}\n::: ::: section\nNo Unused Locals - noUnusedLocals # Report errors on unused local variables.\nconst createKeyboard = (modelID: number) =\u0026gt; { const defaultModelID = 23; return { type: \u0026#34;keyboard\u0026#34;, modelID }; }; Released:\n2.0{aria-label=\u0026ldquo;Release notes for TypeScript 2.0\u0026rdquo;}\n::: ::: section\nNo Unused Parameters - noUnusedParameters # Report errors on unused parameters in functions.\nconst createDefaultKeyboard = (modelID: number) =\u0026gt; { const defaultModelID = 23; return { type: \u0026#34;keyboard\u0026#34;, modelID: defaultModelID }; }; Released:\n2.0{aria-label=\u0026ldquo;Release notes for TypeScript 2.0\u0026rdquo;}\n::: ::: section\nStrict - strict # The strict flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness. Turning this on is equivalent to enabling all of the strict mode family options, which are outlined below. You can then turn off individual strict mode family checks as needed.\nFuture versions of TypeScript may introduce additional stricter checking under this flag, so upgrades of TypeScript might result in new type errors in your program. When appropriate and possible, a corresponding flag will be added to disable that behavior.\nRecommended\nRelated:\nalwaysStrict{aria-label=\u0026ldquo;Jump to compiler option info for alwaysStrict\u0026rdquo;}\nstrictNullChecks{aria-label=\u0026ldquo;Jump to compiler option info for strictNullChecks\u0026rdquo;}\nstrictBindCallApply{aria-label=\u0026ldquo;Jump to compiler option info for strictBindCallApply\u0026rdquo;}\nstrictFunctionTypes{aria-label=\u0026ldquo;Jump to compiler option info for strictFunctionTypes\u0026rdquo;}\nstrictPropertyInitialization{aria-label=\u0026ldquo;Jump to compiler option info for strictPropertyInitialization\u0026rdquo;}\nnoImplicitAny{aria-label=\u0026ldquo;Jump to compiler option info for noImplicitAny\u0026rdquo;}\nnoImplicitThis{aria-label=\u0026ldquo;Jump to compiler option info for noImplicitThis\u0026rdquo;}\nuseUnknownInCatchVariables{aria-label=\u0026ldquo;Jump to compiler option info for useUnknownInCatchVariables\u0026rdquo;}\nReleased:\n2.3{aria-label=\u0026ldquo;Release notes for TypeScript 2.3\u0026rdquo;}\n::: ::: section\nStrict Bind Call Apply - strictBindCallApply # When set, TypeScript will check that the built-in methods of functions call, bind, and apply are invoked with correct argument for the underlying function:\n// With strictBindCallApply on function fn(x: string) { return parseInt(x); } const n1 = fn.call(undefined, \u0026#34;10\u0026#34;); const n2 = fn.call(undefined, false); Otherwise, these functions accept any arguments and will return any:\n// With strictBindCallApply off function fn(x: string) { return parseInt(x); } // Note: No error; return type is \u0026#39;any\u0026#39; const n = fn.call(undefined, false); Recommended\nDefault:\ntrue if strict, false otherwise.\nRelated:\nstrict{aria-label=\u0026ldquo;Jump to compiler option info for strict\u0026rdquo;} Released:\n3.2{aria-label=\u0026ldquo;Release notes for TypeScript 3.2\u0026rdquo;}\n::: ::: section\nStrict Function Types - strictFunctionTypes # When enabled, this flag causes functions parameters to be checked more correctly.\nHere\u0026rsquo;s a basic example with strictFunctionTypes off:\nfunction fn(x: string) { console.log(\u0026#34;Hello, \u0026#34; + x.toLowerCase()); } type StringOrNumberFunc = (ns: string | number) =\u0026gt; void; // Unsafe assignment let func: StringOrNumberFunc = fn; // Unsafe call - will crash func(10); With strictFunctionTypes on, the error is correctly detected:\nfunction fn(x: string) { console.log(\u0026#34;Hello, \u0026#34; + x.toLowerCase()); } type StringOrNumberFunc = (ns: string | number) =\u0026gt; void; // Unsafe assignment is prevented let func: StringOrNumberFunc = fn; During development of this feature, we discovered a large number of inherently unsafe class hierarchies, including some in the DOM. Because of this, the setting only applies to functions written in function syntax, not to those in method syntax:\ntype Methodish = { func(x: string | number): void; }; function fn(x: string) { console.log(\u0026#34;Hello, \u0026#34; + x.toLowerCase()); } // Ultimately an unsafe assignment, but not detected const m: Methodish = { func: fn, }; m.func(10); Recommended\nDefault:\ntrue if strict, false otherwise.\nRelated:\nstrict{aria-label=\u0026ldquo;Jump to compiler option info for strict\u0026rdquo;} Released:\n2.6{aria-label=\u0026ldquo;Release notes for TypeScript 2.6\u0026rdquo;}\n::: ::: section\nStrict Null Checks - strictNullChecks # When strictNullChecks is false, null and undefined are effectively ignored by the language. This can lead to unexpected errors at runtime.\nWhen strictNullChecks is true, null and undefined have their own distinct types and you\u0026rsquo;ll get a type error if you try to use them where a concrete value is expected.\nFor example with this TypeScript code, users.find has no guarantee that it will actually find a user, but you can write code as though it will:\ndeclare const loggedInUsername: string; const users = [ { name: \u0026#34;Oby\u0026#34;, age: 12 }, { name: \u0026#34;Heera\u0026#34;, age: 32 }, ]; const loggedInUser = users.find((u) =\u0026gt; u.name === loggedInUsername); console.log(loggedInUser.age); Setting strictNullChecks to true will raise an error that you have not made a guarantee that the loggedInUser exists before trying to use it.\ndeclare const loggedInUsername: string; const users = [ { name: \u0026#34;Oby\u0026#34;, age: 12 }, { name: \u0026#34;Heera\u0026#34;, age: 32 }, ]; const loggedInUser = users.find((u) =\u0026gt; u.name === loggedInUsername); console.log(loggedInUser.age); The second example failed because the array\u0026rsquo;s find function looks a bit like this simplification:\n// When strictNullChecks: true type Array = { find(predicate: (value: any, index: number) =\u0026gt; boolean): S | undefined; }; // When strictNullChecks: false the undefined is removed from the type system, // allowing you to write code which assumes it always found a result type Array = { find(predicate: (value: any, index: number) =\u0026gt; boolean): S; }; Recommended\nDefault:\ntrue if strict, false otherwise.\nRelated:\nstrict{aria-label=\u0026ldquo;Jump to compiler option info for strict\u0026rdquo;} Released:\n2.0{aria-label=\u0026ldquo;Release notes for TypeScript 2.0\u0026rdquo;}\n::: ::: section\nStrict Property Initialization - strictPropertyInitialization # When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.\nclass UserAccount { name: string; accountType = \u0026#34;user\u0026#34;; email: string; address: string | undefined; constructor(name: string) { this.name = name; // Note that this.email is not set } } In the above case:\nthis.name is set specifically. this.accountType is set by default. this.email is not set and raises an error. this.address is declared as potentially undefined which means it does not have to be set. Recommended\nDefault:\ntrue if strict, false otherwise.\nRelated:\nstrict{aria-label=\u0026ldquo;Jump to compiler option info for strict\u0026rdquo;} Released:\n2.7{aria-label=\u0026ldquo;Release notes for TypeScript 2.7\u0026rdquo;}\n::: ::: section\nUse Unknown In Catch Variables - useUnknownInCatchVariables # In TypeScript 4.0, support was added to allow changing the type of the variable in a catch clause from any to unknown. Allowing for code like:\ntry { // ... } catch (err) { // We have to verify err is an // error before using it as one. if (err instanceof Error) { console.log(err.message); } } This pattern ensures that error handling code becomes more comprehensive because you cannot guarantee that the object being thrown is a Error subclass ahead of time. With the flag useUnknownInCatchVariables enabled, then you do not need the additional syntax (: unknown) nor a linter rule to try enforce this behavior.\nRecommended\nDefault:\ntrue if strict, false otherwise.\nRelated:\nstrict{aria-label=\u0026ldquo;Jump to compiler option info for strict\u0026rdquo;} Released:\n4.4{aria-label=\u0026ldquo;Release notes for TypeScript 4.4\u0026rdquo;}\n::: ::: category\nModules # :::\n::: section\nAllow Arbitrary Extensions - allowArbitraryExtensions # In TypeScript 5.0, when an import path ends in an extension that isn\u0026rsquo;t a known JavaScript or TypeScript file extension, the compiler will look for a declaration file for that path in the form of {file basename}.d.{extension}.ts. For example, if you are using a CSS loader in a bundler project, you might want to write (or generate) declaration files for those stylesheets:\n/* app.css */ .cookie-banner { display: none; } // app.d.css.ts declare const css: { cookieBanner: string; }; export default css; // App.tsx import styles from \u0026#34;./app.css\u0026#34;; styles.cookieBanner; // string By default, this import will raise an error to let you know that TypeScript doesn\u0026rsquo;t understand this file type and your runtime might not support importing it. But if you\u0026rsquo;ve configured your runtime or bundler to handle it, you can suppress the error with the new --allowArbitraryExtensions compiler option.\nNote that historically, a similar effect has often been achievable by adding a declaration file named app.css.d.ts instead of app.d.css.ts - however, this just worked through Node\u0026rsquo;s require resolution rules for CommonJS. Strictly speaking, the former is interpreted as a declaration file for a JavaScript file named app.css.js. Because relative files imports need to include extensions in Node\u0026rsquo;s ESM support, TypeScript would error on our example in an ESM file under --moduleResolution node16 or nodenext.\nFor more information, read up the proposal for this feature and its corresponding pull request.\n::: ::: section\nAllow Importing TS Extensions - allowImportingTsExtensions # --allowImportingTsExtensions allows TypeScript files to import each other with a TypeScript-specific extension like .ts, .mts, or .tsx.\nThis flag is only allowed when --noEmit or --emitDeclarationOnly is enabled, since these import paths would not be resolvable at runtime in JavaScript output files. The expectation here is that your resolver (e.g. your bundler, a runtime, or some other tool) is going to make these imports between .ts files work.\n::: ::: section\nAllow Umd Global Access - allowUmdGlobalAccess # When set to true, allowUmdGlobalAccess lets you access UMD exports as globals from inside module files. A module file is a file that has imports and/or exports. Without this flag, using an export from a UMD module requires an import declaration.\nAn example use case for this flag would be a web project where you know the particular library (like jQuery or Lodash) will always be available at runtime, but you can\u0026rsquo;t access it with an import.\nReleased:\n3.5{aria-label=\u0026ldquo;Release notes for TypeScript 3.5\u0026rdquo;}\n::: ::: section\nBase URL - baseUrl # Sets a base directory from which to resolve non-relative module names. For example, in the directory structure:\nproject ├── ex.ts ├── hello │ └── world.ts └── tsconfig.json With \u0026quot;baseUrl\u0026quot;: \u0026quot;./\u0026quot;, TypeScript will look for files starting at the same folder as the tsconfig.json:\nimport { helloWorld } from \u0026#34;hello/world\u0026#34;; console.log(helloWorld); This resolution has higher priority than lookups from node_modules.\nThis feature was designed for use in conjunction with AMD module loaders in the browser, and is not recommended in any other context. As of TypeScript 4.1, baseUrl is no longer required to be set when using paths.\n::: ::: section\nCustom Conditions - customConditions # --customConditions takes a list of additional conditions that should succeed when TypeScript resolves from an [exports] or ( https://nodejs.org/api/packages.html#exports) or imports field of a package.json. These conditions are added to whatever existing conditions a resolver will use by default.\nFor example, when this field is set in a tsconfig.json as so:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;es2022\u0026#34;, \u0026#34;moduleResolution\u0026#34;: \u0026#34;bundler\u0026#34;, \u0026#34;customConditions\u0026#34;: [\u0026#34;my-condition\u0026#34;] } } Any time an exports or imports field is referenced in package.json, TypeScript will consider conditions called my-condition.\nSo when importing from a package with the following package.json\n{ // ... \u0026#34;exports\u0026#34;: { \u0026#34;.\u0026#34;: { \u0026#34;my-condition\u0026#34;: \u0026#34;./foo.mjs\u0026#34;, \u0026#34;node\u0026#34;: \u0026#34;./bar.mjs\u0026#34;, \u0026#34;import\u0026#34;: \u0026#34;./baz.mjs\u0026#34;, \u0026#34;require\u0026#34;: \u0026#34;./biz.mjs\u0026#34; } } } TypeScript will try to look for files corresponding to foo.mjs.\nThis field is only valid under the node16, nodenext, and bundler options for --moduleResolution.\n::: ::: section\nModule - module # Sets the module system for the program. See the Modules reference page for more information. You very likely want \u0026quot;CommonJS\u0026quot; for node projects.\nChanging module affects moduleResolution which also has a reference page.\nHere\u0026rsquo;s some example output for this file:\n// @filename: index.ts import { valueOfPi } from \u0026#34;./constants\u0026#34;; export const twoPi = valueOfPi * 2; CommonJS # \u0026#34;use strict\u0026#34;; Object.defineProperty(exports, \u0026#34;__esModule\u0026#34;, { value: true }); exports.twoPi = void 0; const constants_1 = require(\u0026#34;./constants\u0026#34;); exports.twoPi = constants_1.valueOfPi * 2; UMD # (function (factory) { if (typeof module === \u0026#34;object\u0026#34; \u0026amp;\u0026amp; typeof module.exports === \u0026#34;object\u0026#34;) { var v = factory(require, exports); if (v !== undefined) module.exports = v; } else if (typeof define === \u0026#34;function\u0026#34; \u0026amp;\u0026amp; define.amd) { define([\u0026#34;require\u0026#34;, \u0026#34;exports\u0026#34;, \u0026#34;./constants\u0026#34;], factory); } })(function (require, exports) { \u0026#34;use strict\u0026#34;; Object.defineProperty(exports, \u0026#34;__esModule\u0026#34;, { value: true }); exports.twoPi = void 0; const constants_1 = require(\u0026#34;./constants\u0026#34;); exports.twoPi = constants_1.valueOfPi * 2; }); AMD # define([\u0026#34;require\u0026#34;, \u0026#34;exports\u0026#34;, \u0026#34;./constants\u0026#34;], function (require, exports, constants_1) { \u0026#34;use strict\u0026#34;; Object.defineProperty(exports, \u0026#34;__esModule\u0026#34;, { value: true }); exports.twoPi = void 0; exports.twoPi = constants_1.valueOfPi * 2; }); System # System.register([\u0026#34;./constants\u0026#34;], function (exports_1, context_1) { \u0026#34;use strict\u0026#34;; var constants_1, twoPi; var __moduleName = context_1 \u0026amp;\u0026amp; context_1.id; return { setters: [ function (constants_1_1) { constants_1 = constants_1_1; } ], execute: function () { exports_1(\u0026#34;twoPi\u0026#34;, twoPi = constants_1.valueOfPi * 2); } }; }); ESNext # import { valueOfPi } from \u0026#34;./constants\u0026#34;; export const twoPi = valueOfPi * 2; ES2020 # import { valueOfPi } from \u0026#34;./constants\u0026#34;; export const twoPi = valueOfPi * 2; ES2015/ES6/ES2020/ES2022 # import { valueOfPi } from \u0026#34;./constants\u0026#34;; export const twoPi = valueOfPi * 2; In addition to the base functionality of ES2015/ES6, ES2020 adds support for dynamic imports, and import.meta while ES2022 further adds support for top level await.\nnode16/nodenext (nightly builds) # Available from 4.7+, the node16 and nodenext modes integrate with Node\u0026rsquo;s native ECMAScript Module support. The emitted JavaScript uses either CommonJS or ES2020 output depending on the file extension and the value of the type setting in the nearest package.json. Module resolution also works differently. You can learn more in the handbook.\nNone # \u0026#34;use strict\u0026#34;; Object.defineProperty(exports, \u0026#34;__esModule\u0026#34;, { value: true }); exports.twoPi = void 0; const constants_1 = require(\u0026#34;./constants\u0026#34;); exports.twoPi = constants_1.valueOfPi * 2; Default:\nCommonJS if target is ES3 or ES5, ES6/ES2015 otherwise.\nAllowed:\nnone\ncommonjs\namd\numd\nsystem\nes6/es2015\nes2020\nes2022\nesnext\nnode16\nnodenext\nRelated:\nmoduleResolution{aria-label=\u0026ldquo;Jump to compiler option info for moduleResolution\u0026rdquo;} Released:\n1.0{aria-label=\u0026ldquo;Release notes for TypeScript 1.0\u0026rdquo;}\n::: ::: section\nModule Resolution - moduleResolution # Specify the module resolution strategy:\n'node' for Node.js\u0026rsquo; CommonJS implementation 'node16' or 'nodenext' for Node.js\u0026rsquo; ECMAScript Module Support from TypeScript 4.7 onwards 'classic' used in TypeScript before the release of 1.6. You probably won\u0026rsquo;t need to use classic in modern code There is a handbook reference page on Module Resolution\nDefault:\nClassic if module is AMD, UMD, System or ES6/ES2015, Matches if module is node16 or nodenext, Node otherwise.\nAllowed:\nclassic\nnode10/node\nnode16\nnodenext\nbundler\nRelated:\nmodule{aria-label=\u0026ldquo;Jump to compiler option info for module\u0026rdquo;} ::: ::: section\nModule Suffixes - moduleSuffixes # Provides a way to override the default list of file name suffixes to search when resolving a module.\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;moduleSuffixes\u0026#34;: [\u0026#34;.ios\u0026#34;, \u0026#34;.native\u0026#34;, \u0026#34;\u0026#34;] } } Given the above configuration, an import like the following:\nimport * as foo from \u0026#34;./foo\u0026#34;; TypeScript will look for the relative files ./foo.ios.ts, ./foo.native.ts, and finally ./foo.ts.\nNote the empty string \u0026quot;\u0026quot; in moduleSuffixes which is necessary for TypeScript to also look-up ./foo.ts.\nThis feature can be useful for React Native projects where each target platform can use a separate tsconfig.json with differing moduleSuffixes.\nReleased:\n4.7{aria-label=\u0026ldquo;Release notes for TypeScript 4.7\u0026rdquo;}\n::: ::: section\nNo Resolve - noResolve # By default, TypeScript will examine the initial set of files for import and \u0026lt;reference directives and add these resolved files to your program.\nIf noResolve is set, this process doesn\u0026rsquo;t happen. However, import statements are still checked to see if they resolve to a valid module, so you\u0026rsquo;ll need to make sure this is satisfied by some other means.\n::: ::: section\nPaths - paths # A series of entries which re-map imports to lookup locations relative to the baseUrl if set, or to the tsconfig file itself otherwise. There is a larger coverage of paths in the handbook.\npaths lets you declare how TypeScript should resolve an import in your require/imports.\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;paths\u0026#34;: { \u0026#34;jquery\u0026#34;: [\u0026#34;./vendor/jquery/dist/jquery\u0026#34;] } } } This would allow you to be able to write import \u0026quot;jquery\u0026quot;, and get all of the correct typing locally.\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;paths\u0026#34;: { \u0026#34;app/*\u0026#34;: [\u0026#34;./src/app/*\u0026#34;], \u0026#34;config/*\u0026#34;: [\u0026#34;./src/app/_config/*\u0026#34;], \u0026#34;environment/*\u0026#34;: [\u0026#34;./src/environments/*\u0026#34;], \u0026#34;shared/*\u0026#34;: [\u0026#34;./src/app/_shared/*\u0026#34;], \u0026#34;helpers/*\u0026#34;: [\u0026#34;./src/helpers/*\u0026#34;], \u0026#34;tests/*\u0026#34;: [\u0026#34;./src/tests/*\u0026#34;] }, } In this case, you can tell the TypeScript file resolver to support a number of custom prefixes to find code.\nNote that this feature does not change how import paths are emitted by tsc, so paths should only be used to inform TypeScript that another tool has this mapping and will use it at runtime or when bundling.\n::: ::: section\nResolve JSON Module - resolveJsonModule # Allows importing modules with a \u0026lsquo;.json\u0026rsquo; extension, which is a common practice in node projects. This includes generating a type for the import based on the static JSON shape.\nTypeScript does not support resolving JSON files by default:\n// @filename: settings.json { \u0026#34;repo\u0026#34;: \u0026#34;TypeScript\u0026#34;, \u0026#34;dry\u0026#34;: false, \u0026#34;debug\u0026#34;: false } // @filename: index.ts import settings from \u0026#34;./settings.json\u0026#34;; settings.debug === true; settings.dry === 2; Enabling the option allows importing JSON, and validating the types in that JSON file.\n// @filename: settings.json { \u0026#34;repo\u0026#34;: \u0026#34;TypeScript\u0026#34;, \u0026#34;dry\u0026#34;: false, \u0026#34;debug\u0026#34;: false } // @filename: index.ts import settings from \u0026#34;./settings.json\u0026#34;; settings.debug === true; settings.dry === 2; ::: ::: section\nResolve package.json Exports - resolvePackageJsonExports # --resolvePackageJsonExports forces TypeScript to consult the exports field of package.json files if it ever reads from a package in node_modules.\nThis option defaults to true under the node16, nodenext, and bundler options for --moduleResolution.\nDefault:\ntrue when 'moduleResolution' is 'node16', 'nodenext', or 'bundler'; otherwise false.\n::: ::: section\nResolve package.json Imports - resolvePackageJsonImports # --resolvePackageJsonImports forces TypeScript to consult the imports field of package.json files when performing a lookup that starts with # from a file whose ancestor directory contains a package.json.\nThis option defaults to true under the node16, nodenext, and bundler options for --moduleResolution.\nDefault:\ntrue when 'moduleResolution' is 'node16', 'nodenext', or 'bundler'; otherwise false.\n::: ::: section\nRoot Dir - rootDir # Default: The longest common path of all non-declaration input files. If composite is set, the default is instead the directory containing the tsconfig.json file.\nWhen TypeScript compiles files, it keeps the same directory structure in the output directory as exists in the input directory.\nFor example, let\u0026rsquo;s say you have some input files:\nMyProj ├── tsconfig.json ├── core │ ├── a.ts │ ├── b.ts │ ├── sub │ │ ├── c.ts ├── types.d.ts The inferred value for rootDir is the longest common path of all non-declaration input files, which in this case is core/.\nIf your outDir was dist, TypeScript would write this tree:\nMyProj ├── dist │ ├── a.js │ ├── b.js │ ├── sub │ │ ├── c.js However, you may have intended for core to be part of the output directory structure. By setting rootDir: \u0026quot;.\u0026quot; in tsconfig.json, TypeScript would write this tree:\nMyProj ├── dist │ ├── core │ │ ├── a.js │ │ ├── b.js │ │ ├── sub │ │ │ ├── c.js Importantly, rootDir does not affect which files become part of the compilation. It has no interaction with the include, exclude, or files tsconfig.json settings.\nNote that TypeScript will never write an output file to a directory outside of outDir, and will never skip emitting a file. For this reason, rootDir also enforces that all files which need to be emitted are underneath the rootDir path.\nFor example, let\u0026rsquo;s say you had this tree:\nMyProj ├── tsconfig.json ├── core │ ├── a.ts │ ├── b.ts ├── helpers.ts It would be an error to specify rootDir as core and include as * because it creates a file (helpers.ts) that would need to be emitted outside the outDir (i.e. ../helpers.js).\nDefault:\nComputed from the list of input files.\nReleased:\n1.5{aria-label=\u0026ldquo;Release notes for TypeScript 1.5\u0026rdquo;}\n::: ::: section\nRoot Dirs - rootDirs # Using rootDirs, you can inform the compiler that there are many \u0026ldquo;virtual\u0026rdquo; directories acting as a single root. This allows the compiler to resolve relative module imports within these \u0026ldquo;virtual\u0026rdquo; directories, as if they were merged in to one directory.\nFor example:\nsrc └── views └── view1.ts (can import \u0026#34;./template1\u0026#34;, \u0026#34;./view2`) └── view2.ts (can import \u0026#34;./template1\u0026#34;, \u0026#34;./view1`) generated └── templates └── views └── template1.ts (can import \u0026#34;./view1\u0026#34;, \u0026#34;./view2\u0026#34;) { \u0026#34;compilerOptions\u0026#34;: { \u0026#34;rootDirs\u0026#34;: [\u0026#34;src/views\u0026#34;, \u0026#34;generated/templates/views\u0026#34;] } } This does not affect how TypeScript emits JavaScript, it only emulates the assumption that they will be able to work via those relative paths at runtime.\nrootDirs can be used to provide a separate \u0026ldquo;type layer\u0026rdquo; to files that are not TypeScript or JavaScript by providing a home for generated .d.ts files in another folder. This technique is useful for bundled applications where you use import of files that aren\u0026rsquo;t necessarily code:\nsrc └── index.ts └── css └── main.css └── navigation.css generated └── css └── main.css.d.ts └── navigation.css.d.ts { \u0026#34;compilerOptions\u0026#34;: { \u0026#34;rootDirs\u0026#34;: [\u0026#34;src\u0026#34;, \u0026#34;generated\u0026#34;] } } This technique lets you generate types ahead of time for the non-code source files. Imports then work naturally based off the source file\u0026rsquo;s location. For example ./src/index.ts can import the file ./src/css/main.css and TypeScript will be aware of the bundler\u0026rsquo;s behavior for that filetype via the corresponding generated declaration file.\n// @filename: index.ts import { appClass } from \u0026#34;./main.css\u0026#34;; Default:\nComputed from the list of input files.\nReleased:\n2.0{aria-label=\u0026ldquo;Release notes for TypeScript 2.0\u0026rdquo;}\n::: ::: section\nType Roots - typeRoots # By default all visible \u0026ldquo;@types\u0026rdquo; packages are included in your compilation. Packages in node_modules/@types of any enclosing folder are considered visible. For example, that means packages within ./node_modules/@types/, ../node_modules/@types/, ../../node_modules/@types/, and so on.\nIf typeRoots is specified, only packages under typeRoots will be included. For example:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;typeRoots\u0026#34;: [\u0026#34;./typings\u0026#34;, \u0026#34;./vendor/types\u0026#34;] } } This config file will include all packages under ./typings and ./vendor/types, and no packages from ./node_modules/@types. All paths are relative to the tsconfig.json.\nRelated: types{aria-label=\u0026ldquo;Jump to compiler option info for types\u0026rdquo;} ::: ::: section\nTypes - types # By default all visible \u0026ldquo;@types\u0026rdquo; packages are included in your compilation. Packages in node_modules/@types of any enclosing folder are considered visible. For example, that means packages within ./node_modules/@types/, ../node_modules/@types/, ../../node_modules/@types/, and so on.\nIf types is specified, only packages listed will be included in the global scope. For instance:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;types\u0026#34;: [\u0026#34;node\u0026#34;, \u0026#34;jest\u0026#34;, \u0026#34;express\u0026#34;] } } This tsconfig.json file will only include ./node_modules/@types/node, ./node_modules/@types/jest and ./node_modules/@types/express. Other packages under node_modules/@types/* will not be included.\nWhat does this affect? # This option does not affect how @types/* are included in your application code, for example if you had the above compilerOptions example with code like:\nimport * as moment from \u0026#34;moment\u0026#34;; moment().format(\u0026#34;MMMM Do YYYY, h:mm:ss a\u0026#34;); The moment import would be fully typed.\nWhen you have this option set, by not including a module in the types array it:\nWill not add globals to your project (e.g process in node, or expect in Jest) Will not have exports appear as auto-import recommendations This feature differs from typeRoots in that it is about specifying only the exact types you want included, whereas typeRoots supports saying you want particular folders.\nRelated: typeRoots{aria-label=\u0026ldquo;Jump to compiler option info for typeRoots\u0026rdquo;} ::: ::: category\nEmit # :::\n::: section\nDeclaration - declaration # Generate .d.ts files for every TypeScript or JavaScript file inside your project. These .d.ts files are type definition files which describe the external API of your module. With .d.ts files, tools like TypeScript can provide intellisense and accurate types for un-typed code.\nWhen declaration is set to true, running the compiler with this TypeScript code:\nexport let helloWorld = \u0026#34;hi\u0026#34;; Will generate an index.js file like this:\nexport let helloWorld = \u0026#34;hi\u0026#34;; With a corresponding helloWorld.d.ts:\nexport declare let helloWorld: string; When working with .d.ts files for JavaScript files you may want to use emitDeclarationOnly or use outDir to ensure that the JavaScript files are not overwritten.\nDefault:\ntrue if composite, false otherwise.\nRelated:\ndeclarationDir{aria-label=\u0026ldquo;Jump to compiler option info for declarationDir\u0026rdquo;}\nemitDeclarationOnly{aria-label=\u0026ldquo;Jump to compiler option info for emitDeclarationOnly\u0026rdquo;}\nReleased:\n1.0{aria-label=\u0026ldquo;Release notes for TypeScript 1.0\u0026rdquo;}\n::: ::: section\nDeclaration Dir - declarationDir # Offers a way to configure the root directory for where declaration files are emitted.\nexample ├── index.ts ├── package.json └── tsconfig.json with this tsconfig.json:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;declaration\u0026#34;: true, \u0026#34;declarationDir\u0026#34;: \u0026#34;./types\u0026#34; } } Would place the d.ts for the index.ts in a types folder:\nexample ├── index.js ├── index.ts ├── package.json ├── tsconfig.json └── types └── index.d.ts Related:\ndeclaration{aria-label=\u0026ldquo;Jump to compiler option info for declaration\u0026rdquo;} Released:\n2.0{aria-label=\u0026ldquo;Release notes for TypeScript 2.0\u0026rdquo;}\n::: ::: section\nDeclaration Map - declarationMap # Generates a source map for .d.ts files which map back to the original .ts source file. This will allow editors such as VS Code to go to the original .ts file when using features like Go to Definition.\nYou should strongly consider turning this on if you\u0026rsquo;re using project references.\nReleased:\n2.9{aria-label=\u0026ldquo;Release notes for TypeScript 2.9\u0026rdquo;}\n::: ::: section\nDownlevel Iteration - downlevelIteration # Downleveling is TypeScript\u0026rsquo;s term for transpiling to an older version of JavaScript. This flag is to enable support for a more accurate implementation of how modern JavaScript iterates through new concepts in older JavaScript runtimes.\nECMAScript 6 added several new iteration primitives: the for / of loop (for (el of arr)), Array spread ([a, ...b]), argument spread (fn(...args)), and Symbol.iterator. downlevelIteration allows for these iteration primitives to be used more accurately in ES5 environments if a Symbol.iterator implementation is present.\nExample: Effects on for / of # With this TypeScript code:\nconst str = \u0026#34;Hello!\u0026#34;; for (const s of str) { console.log(s); } Without downlevelIteration enabled, a for / of loop on any object is downleveled to a traditional for loop:\n\u0026#34;use strict\u0026#34;; var str = \u0026#34;Hello!\u0026#34;; for (var _i = 0, str_1 = str; _i \u0026lt; str_1.length; _i++) { var s = str_1[_i]; console.log(s); } This is often what people expect, but it\u0026rsquo;s not 100% compliant with ECMAScript iteration protocol. Certain strings, such as emoji (😜), have a .length of 2 (or even more!), but should iterate as 1 unit in a for-of loop. See this blog post by Jonathan New for a longer explanation.\nWhen downlevelIteration is enabled, TypeScript will use a helper function that checks for a Symbol.iterator implementation (either native or polyfill). If this implementation is missing, you\u0026rsquo;ll fall back to index-based iteration.\n\u0026#34;use strict\u0026#34;; var __values = (this \u0026amp;\u0026amp; this.__values) || function(o) { var s = typeof Symbol === \u0026#34;function\u0026#34; \u0026amp;\u0026amp; Symbol.iterator, m = s \u0026amp;\u0026amp; o[s], i = 0; if (m) return m.call(o); if (o \u0026amp;\u0026amp; typeof o.length === \u0026#34;number\u0026#34;) return { next: function () { if (o \u0026amp;\u0026amp; i \u0026gt;= o.length) o = void 0; return { value: o \u0026amp;\u0026amp; o[i++], done: !o }; } }; throw new TypeError(s ? \u0026#34;Object is not iterable.\u0026#34; : \u0026#34;Symbol.iterator is not defined.\u0026#34;); }; var e_1, _a; var str = \u0026#34;Hello!\u0026#34;; try { for (var str_1 = __values(str), str_1_1 = str_1.next(); !str_1_1.done; str_1_1 = str_1.next()) { var s = str_1_1.value; console.log(s); } } catch (e_1_1) { e_1 = { error: e_1_1 }; } finally { try { if (str_1_1 \u0026amp;\u0026amp; !str_1_1.done \u0026amp;\u0026amp; (_a = str_1.return)) _a.call(str_1); } finally { if (e_1) throw e_1.error; } } You can use tslib via importHelpers to reduce the amount of inline JavaScript too:\n\u0026#34;use strict\u0026#34;; var __values = (this \u0026amp;\u0026amp; this.__values) || function(o) { var s = typeof Symbol === \u0026#34;function\u0026#34; \u0026amp;\u0026amp; Symbol.iterator, m = s \u0026amp;\u0026amp; o[s], i = 0; if (m) return m.call(o); if (o \u0026amp;\u0026amp; typeof o.length === \u0026#34;number\u0026#34;) return { next: function () { if (o \u0026amp;\u0026amp; i \u0026gt;= o.length) o = void 0; return { value: o \u0026amp;\u0026amp; o[i++], done: !o }; } }; throw new TypeError(s ? \u0026#34;Object is not iterable.\u0026#34; : \u0026#34;Symbol.iterator is not defined.\u0026#34;); }; var e_1, _a; var str = \u0026#34;Hello!\u0026#34;; try { for (var str_1 = __values(str), str_1_1 = str_1.next(); !str_1_1.done; str_1_1 = str_1.next()) { var s = str_1_1.value; console.log(s); } } catch (e_1_1) { e_1 = { error: e_1_1 }; } finally { try { if (str_1_1 \u0026amp;\u0026amp; !str_1_1.done \u0026amp;\u0026amp; (_a = str_1.return)) _a.call(str_1); } finally { if (e_1) throw e_1.error; } } Note: enabling downlevelIteration does not improve compliance if Symbol.iterator is not present in the runtime.\nExample: Effects on Array Spreads # This is an array spread:\n// Make a new array who elements are 1 followed by the elements of arr2 const arr = [1, ...arr2]; Based on the description, it sounds easy to downlevel to ES5:\n// The same, right? const arr = [1].concat(arr2); However, this is observably different in certain rare cases.\nFor example, if a source array is missing one or more items (contains a hole), the spread syntax will replace each empty item with undefined, whereas .concat will leave them intact.\n// Make an array where the element at index 1 is missing let arrayWithHole = [\u0026#34;a\u0026#34;, , \u0026#34;c\u0026#34;]; let spread = [...arrayWithHole]; let concatenated = [].concat(arrayWithHole); console.log(arrayWithHole); // [ \u0026#39;a\u0026#39;, \u0026lt;1 empty item\u0026gt;, \u0026#39;c\u0026#39; ] console.log(spread); // [ \u0026#39;a\u0026#39;, undefined, \u0026#39;c\u0026#39; ] console.log(concatenated); // [ \u0026#39;a\u0026#39;, \u0026lt;1 empty item\u0026gt;, \u0026#39;c\u0026#39; ] Just as with for / of, downlevelIteration will use Symbol.iterator (if present) to more accurately emulate ES 6 behavior.\nRelated:\nimportHelpers{aria-label=\u0026ldquo;Jump to compiler option info for importHelpers\u0026rdquo;} Released:\n2.3{aria-label=\u0026ldquo;Release notes for TypeScript 2.3\u0026rdquo;}\n::: ::: section\nEmit BOM - emitBOM # Controls whether TypeScript will emit a byte order mark (BOM) when writing output files. Some runtime environments require a BOM to correctly interpret a JavaScript files; others require that it is not present. The default value of false is generally best unless you have a reason to change it.\n::: ::: section\nEmit Declaration Only - emitDeclarationOnly # Only emit .d.ts files; do not emit .js files.\nThis setting is useful in two cases:\nYou are using a transpiler other than TypeScript to generate your JavaScript. You are using TypeScript to only generate d.ts files for your consumers. Related:\ndeclaration{aria-label=\u0026ldquo;Jump to compiler option info for declaration\u0026rdquo;} Released:\n2.8{aria-label=\u0026ldquo;Release notes for TypeScript 2.8\u0026rdquo;}\n::: ::: section\nImport Helpers - importHelpers # For certain downleveling operations, TypeScript uses some helper code for operations like extending class, spreading arrays or objects, and async operations. By default, these helpers are inserted into files which use them. This can result in code duplication if the same helper is used in many different modules.\nIf the importHelpers flag is on, these helper functions are instead imported from the tslib module. You will need to ensure that the tslib module is able to be imported at runtime. This only affects modules; global script files will not attempt to import modules.\nFor example, with this TypeScript:\nexport function fn(arr: number[]) { const arr2 = [1, ...arr]; } Turning on downlevelIteration and importHelpers is still false:\nvar __read = (this \u0026amp;\u0026amp; this.__read) || function (o, n) { var m = typeof Symbol === \u0026#34;function\u0026#34; \u0026amp;\u0026amp; o[Symbol.iterator]; if (!m) return o; var i = m.call(o), r, ar = [], e; try { while ((n === void 0 || n-- \u0026gt; 0) \u0026amp;\u0026amp; !(r = i.next()).done) ar.push(r.value); } catch (error) { e = { error: error }; } finally { try { if (r \u0026amp;\u0026amp; !r.done \u0026amp;\u0026amp; (m = i[\u0026#34;return\u0026#34;])) m.call(i); } finally { if (e) throw e.error; } } return ar; }; var __spreadArray = (this \u0026amp;\u0026amp; this.__spreadArray) || function (to, from, pack) { if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i \u0026lt; l; i++) { if (ar || !(i in from)) { if (!ar) ar = Array.prototype.slice.call(from, 0, i); ar[i] = from[i]; } } return to.concat(ar || Array.prototype.slice.call(from)); }; export function fn(arr) { var arr2 = __spreadArray([1], __read(arr), false); } Then turning on both downlevelIteration and importHelpers:\nimport { __read, __spreadArray } from \u0026#34;tslib\u0026#34;; export function fn(arr) { var arr2 = __spreadArray([1], __read(arr), false); } You can use noEmitHelpers when you provide your own implementations of these functions.\nRelated: noEmitHelpers{aria-label=\u0026ldquo;Jump to compiler option info for noEmitHelpers\u0026rdquo;}\ndownlevelIteration{aria-label=\u0026ldquo;Jump to compiler option info for downlevelIteration\u0026rdquo;}\n::: ::: section\nImports Not Used As Values - importsNotUsedAsValues # Deprecated in favor of verbatimModuleSyntax.\nThis flag controls how import works, there are 3 different options:\nremove: The default behavior of dropping import statements which only reference types.\npreserve: Preserves all import statements whose values or types are never used. This can cause imports/side-effects to be preserved.\nerror: This preserves all imports (the same as the preserve option), but will error when a value import is only used as a type. This might be useful if you want to ensure no values are being accidentally imported, but still make side-effect imports explicit.\nThis flag works because you can use import type to explicitly create an import statement which should never be emitted into JavaScript.\nDefault:\nremove\nAllowed:\nremove\npreserve\nerror\nRelated:\npreserveValueImports{aria-label=\u0026ldquo;Jump to compiler option info for preserveValueImports\u0026rdquo;} Released:\n3.8{aria-label=\u0026ldquo;Release notes for TypeScript 3.8\u0026rdquo;}\n::: ::: section\nInline Source Map - inlineSourceMap # When set, instead of writing out a .js.map file to provide source maps, TypeScript will embed the source map content in the .js files. Although this results in larger JS files, it can be convenient in some scenarios. For example, you might want to debug JS files on a webserver that doesn\u0026rsquo;t allow .map files to be served.\nMutually exclusive with sourceMap.\nFor example, with this TypeScript:\nconst helloWorld = \u0026#34;hi\u0026#34;; console.log(helloWorld); Converts to this JavaScript:\n\u0026#34;use strict\u0026#34;; const helloWorld = \u0026#34;hi\u0026#34;; console.log(helloWorld); Then enable building it with inlineSourceMap enabled there is a comment at the bottom of the file which includes a source-map for the file.\n\u0026#34;use strict\u0026#34;; const helloWorld = \u0026#34;hi\u0026#34;; console.log(helloWorld); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMifQ== Released:\n1.5{aria-label=\u0026ldquo;Release notes for TypeScript 1.5\u0026rdquo;}\n::: ::: section\nInline Sources - inlineSources # When set, TypeScript will include the original content of the .ts file as an embedded string in the source map (using the source map\u0026rsquo;s sourcesContent property). This is often useful in the same cases as inlineSourceMap.\nRequires either sourceMap or inlineSourceMap to be set.\nFor example, with this TypeScript:\nconst helloWorld = \u0026#34;hi\u0026#34;; console.log(helloWorld); By default converts to this JavaScript:\n\u0026#34;use strict\u0026#34;; const helloWorld = \u0026#34;hi\u0026#34;; console.log(helloWorld); Then enable building it with inlineSources and inlineSourceMap enabled there is a comment at the bottom of the file which includes a source-map for the file. Note that the end is different from the example in inlineSourceMap because the source-map now contains the original source code also.\n\u0026#34;use strict\u0026#34;; const helloWorld = \u0026#34;hi\u0026#34;; console.log(helloWorld); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBoZWxsb1dvcmxkID0gXCJoaVwiO1xuY29uc29sZS5sb2coaGVsbG9Xb3JsZCk7Il19 Released:\n1.5{aria-label=\u0026ldquo;Release notes for TypeScript 1.5\u0026rdquo;}\n::: ::: section\nMap Root - mapRoot # Specify the location where debugger should locate map files instead of generated locations. This string is treated verbatim inside the source-map, for example:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;sourceMap\u0026#34;: true, \u0026#34;mapRoot\u0026#34;: \u0026#34;https://my-website.com/debug/sourcemaps/\u0026#34; } } Would declare that index.js will have sourcemaps at https://my-website.com/debug/sourcemaps/index.js.map.\n::: ::: section\nNew Line - newLine # Specify the end of line sequence to be used when emitting files: \u0026lsquo;CRLF\u0026rsquo; (dos) or \u0026lsquo;LF\u0026rsquo; (unix).\nDefault:\nPlatform specific.\nAllowed:\ncrlf\nlf\nReleased:\n1.5{aria-label=\u0026ldquo;Release notes for TypeScript 1.5\u0026rdquo;}\n::: ::: section\nNo Emit - noEmit # Do not emit compiler output files like JavaScript source code, source-maps or declarations.\nThis makes room for another tool like Babel, or swc to handle converting the TypeScript file to a file which can run inside a JavaScript environment.\nYou can then use TypeScript as a tool for providing editor integration, and as a source code type-checker.\n::: ::: section\nNo Emit Helpers - noEmitHelpers # Instead of importing helpers with importHelpers, you can provide implementations in the global scope for the helpers you use and completely turn off emitting of helper functions.\nFor example, using this async function in ES5 requires a await-like function and generator-like function to run:\nconst getAPI = async (url: string) =\u0026gt; { // Get API return {}; }; Which creates quite a lot of JavaScript:\n\u0026#34;use strict\u0026#34;; var __awaiter = (this \u0026amp;\u0026amp; this.__awaiter) || function (thisArg, _arguments, P, generator) { function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); } return new (P || (P = Promise))(function (resolve, reject) { function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } } function rejected(value) { try { step(generator[\u0026#34;throw\u0026#34;](value)); } catch (e) { reject(e); } } function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); } step((generator = generator.apply(thisArg, _arguments || [])).next()); }); }; var __generator = (this \u0026amp;\u0026amp; this.__generator) || function (thisArg, body) { var _ = { label: 0, sent: function() { if (t[0] \u0026amp; 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g; return g = { next: verb(0), \u0026#34;throw\u0026#34;: verb(1), \u0026#34;return\u0026#34;: verb(2) }, typeof Symbol === \u0026#34;function\u0026#34; \u0026amp;\u0026amp; (g[Symbol.iterator] = function() { return this; }), g; function verb(n) { return function (v) { return step([n, v]); }; } function step(op) { if (f) throw new TypeError(\u0026#34;Generator is already executing.\u0026#34;); while (g \u0026amp;\u0026amp; (g = 0, op[0] \u0026amp;\u0026amp; (_ = 0)), _) try { if (f = 1, y \u0026amp;\u0026amp; (t = op[0] \u0026amp; 2 ? y[\u0026#34;return\u0026#34;] : op[0] ? y[\u0026#34;throw\u0026#34;] || ((t = y[\u0026#34;return\u0026#34;]) \u0026amp;\u0026amp; t.call(y), 0) : y.next) \u0026amp;\u0026amp; !(t = t.call(y, op[1])).done) return t; if (y = 0, t) op = [op[0] \u0026amp; 2, t.value]; switch (op[0]) { case 0: case 1: t = op; break; case 4: _.label++; return { value: op[1], done: false }; case 5: _.label++; y = op[1]; op = [0]; continue; case 7: op = _.ops.pop(); _.trys.pop(); continue; default: if (!(t = _.trys, t = t.length \u0026gt; 0 \u0026amp;\u0026amp; t[t.length - 1]) \u0026amp;\u0026amp; (op[0] === 6 || op[0] === 2)) { _ = 0; continue; } if (op[0] === 3 \u0026amp;\u0026amp; (!t || (op[1] \u0026gt; t[0] \u0026amp;\u0026amp; op[1] \u0026lt; t[3]))) { _.label = op[1]; break; } if (op[0] === 6 \u0026amp;\u0026amp; _.label \u0026lt; t[1]) { _.label = t[1]; t = op; break; } if (t \u0026amp;\u0026amp; _.label \u0026lt; t[2]) { _.label = t[2]; _.ops.push(op); break; } if (t[2]) _.ops.pop(); _.trys.pop(); continue; } op = body.call(thisArg, _); } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; } if (op[0] \u0026amp; 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true }; } }; var getAPI = function (url) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) { // Get API return [2 /*return*/, {}]; }); }); }; Which can be switched out with your own globals via this flag:\n\u0026#34;use strict\u0026#34;; var getAPI = function (url) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) { // Get API return [2 /*return*/, {}]; }); }); }; Related:\nimportHelpers{aria-label=\u0026ldquo;Jump to compiler option info for importHelpers\u0026rdquo;} Released:\n1.5{aria-label=\u0026ldquo;Release notes for TypeScript 1.5\u0026rdquo;}\n::: ::: section\nNo Emit On Error - noEmitOnError # Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.\nThis defaults to false, making it easier to work with TypeScript in a watch-like environment where you may want to see results of changes to your code in another environment before making sure all errors are resolved.\nReleased:\n1.4{aria-label=\u0026ldquo;Release notes for TypeScript 1.4\u0026rdquo;}\n::: ::: section\nOut Dir - outDir # If specified, .js (as well as .d.ts, .js.map, etc.) files will be emitted into this directory. The directory structure of the original source files is preserved; see rootDir if the computed root is not what you intended.\nIf not specified, .js files will be emitted in the same directory as the .ts files they were generated from:\n$ tsc example ├── index.js └── index.ts With a tsconfig.json like this:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;outDir\u0026#34;: \u0026#34;dist\u0026#34; } } Running tsc with these settings moves the files into the specified dist folder:\n$ tsc example ├── dist │ └── index.js ├── index.ts └── tsconfig.json Related: out{aria-label=\u0026ldquo;Jump to compiler option info for out\u0026rdquo;}\noutFile{aria-label=\u0026ldquo;Jump to compiler option info for outFile\u0026rdquo;}\n::: ::: section\nOut File - outFile # If specified, all global (non-module) files will be concatenated into the single output file specified.\nIf module is system or amd, all module files will also be concatenated into this file after all global content.\nNote: outFile cannot be used unless module is None, System, or AMD. This option cannot be used to bundle CommonJS or ES6 modules.\nRelated:\nout{aria-label=\u0026ldquo;Jump to compiler option info for out\u0026rdquo;}\noutDir{aria-label=\u0026ldquo;Jump to compiler option info for outDir\u0026rdquo;}\nReleased:\n1.0{aria-label=\u0026ldquo;Release notes for TypeScript 1.0\u0026rdquo;}\n::: ::: section\nPreserve Const Enums - preserveConstEnums # Do not erase const enum declarations in generated code. const enums provide a way to reduce the overall memory footprint of your application at runtime by emitting the enum value instead of a reference.\nFor example with this TypeScript:\nconst enum Album { JimmyEatWorldFutures = 1, TubRingZooHypothesis = 2, DogFashionDiscoAdultery = 3, } const selectedAlbum = Album.JimmyEatWorldFutures; if (selectedAlbum === Album.JimmyEatWorldFutures) { console.log(\u0026#34;That is a great choice.\u0026#34;); } The default const enum behavior is to convert any Album.Something to the corresponding number literal, and to remove a reference to the enum from the JavaScript completely.\n\u0026#34;use strict\u0026#34;; const selectedAlbum = 1 /* Album.JimmyEatWorldFutures */; if (selectedAlbum === 1 /* Album.JimmyEatWorldFutures */) { console.log(\u0026#34;That is a great choice.\u0026#34;); } With preserveConstEnums set to true, the enum exists at runtime and the numbers are still emitted.\n\u0026#34;use strict\u0026#34;; var Album; (function (Album) { Album[Album[\u0026#34;JimmyEatWorldFutures\u0026#34;] = 1] = \u0026#34;JimmyEatWorldFutures\u0026#34;; Album[Album[\u0026#34;TubRingZooHypothesis\u0026#34;] = 2] = \u0026#34;TubRingZooHypothesis\u0026#34;; Album[Album[\u0026#34;DogFashionDiscoAdultery\u0026#34;] = 3] = \u0026#34;DogFashionDiscoAdultery\u0026#34;; })(Album || (Album = {})); const selectedAlbum = 1 /* Album.JimmyEatWorldFutures */; if (selectedAlbum === 1 /* Album.JimmyEatWorldFutures */) { console.log(\u0026#34;That is a great choice.\u0026#34;); } This essentially makes such const enums a source-code feature only, with no runtime traces.\nDefault:\ntrue if isolatedModules, false otherwise.\n::: ::: section\nPreserve Value Imports - preserveValueImports # Deprecated in favor of verbatimModuleSyntax.\nThere are some cases where TypeScript can\u0026rsquo;t detect that you\u0026rsquo;re using an import. For example, take the following code:\nimport { Animal } from \u0026#34;./animal.js\u0026#34;; eval(\u0026#34;console.log(new Animal().isDangerous())\u0026#34;); or code using \u0026lsquo;Compiles to HTML\u0026rsquo; languages like Svelte or Vue. preserveValueImports will prevent TypeScript from removing the import, even if it appears unused.\nWhen combined with isolatedModules: imported types must be marked as type-only because compilers that process single files at a time have no way of knowing whether imports are values that appear unused, or a type that must be removed in order to avoid a runtime crash.\nRelated:\nisolatedModules{aria-label=\u0026ldquo;Jump to compiler option info for isolatedModules\u0026rdquo;}\nimportsNotUsedAsValues{aria-label=\u0026ldquo;Jump to compiler option info for importsNotUsedAsValues\u0026rdquo;}\nReleased:\n4.5{aria-label=\u0026ldquo;Release notes for TypeScript 4.5\u0026rdquo;}\n::: ::: section\nRemove Comments - removeComments # Strips all comments from TypeScript files when converting into JavaScript. Defaults to false.\nFor example, this is a TypeScript file which has a JSDoc comment:\n/** The translation of \u0026#39;Hello world\u0026#39; into Portuguese */ export const helloWorldPTBR = \u0026#34;Olá Mundo\u0026#34;; When removeComments is set to true:\nexport const helloWorldPTBR = \u0026#34;Olá Mundo\u0026#34;; Without setting removeComments or having it as false:\n/** The translation of \u0026#39;Hello world\u0026#39; into Portuguese */ export const helloWorldPTBR = \u0026#34;Olá Mundo\u0026#34;; This means that your comments will show up in the JavaScript code.\n::: ::: section\nSource Map - sourceMap # Enables the generation of sourcemap files. These files allow debuggers and other tools to display the original TypeScript source code when actually working with the emitted JavaScript files. Source map files are emitted as .js.map (or .jsx.map) files next to the corresponding .js output file.\nThe .js files will in turn contain a sourcemap comment to indicate where the files are to external tools, for example:\n// helloWorld.ts export declare const helloWorld = \u0026#34;hi\u0026#34;; Compiling with sourceMap set to true creates the following JavaScript file:\n// helloWorld.js \u0026#34;use strict\u0026#34;; Object.defineProperty(exports, \u0026#34;__esModule\u0026#34;, { value: true }); exports.helloWorld = \u0026#34;hi\u0026#34;; //# sourceMappingURL=// helloWorld.js.map And this also generates this json map:\n// helloWorld.js.map { \u0026#34;version\u0026#34;: 3, \u0026#34;file\u0026#34;: \u0026#34;ex.js\u0026#34;, \u0026#34;sourceRoot\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;sources\u0026#34;: [\u0026#34;../ex.ts\u0026#34;], \u0026#34;names\u0026#34;: [], \u0026#34;mappings\u0026#34;: \u0026#34;;;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA\u0026#34; } ::: ::: section\nSource Root - sourceRoot # Specify the location where a debugger should locate TypeScript files instead of relative source locations. This string is treated verbatim inside the source-map where you can use a path or a URL:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;sourceMap\u0026#34;: true, \u0026#34;sourceRoot\u0026#34;: \u0026#34;https://my-website.com/debug/source/\u0026#34; } } Would declare that index.js will have a source file at https://my-website.com/debug/source/index.ts.\n::: ::: section\nStrip Internal - stripInternal # Do not emit declarations for code that has an @internal annotation in its JSDoc comment. This is an internal compiler option; use at your own risk, because the compiler does not check that the result is valid. If you are searching for a tool to handle additional levels of visibility within your d.ts files, look at api-extractor.\n/** * Days available in a week * @internal */ export const daysInAWeek = 7; /** Calculate how much someone earns in a week */ export function weeklySalary(dayRate: number) { return daysInAWeek * dayRate; } With the flag set to false (default):\n/** * Days available in a week * @internal */ export declare const daysInAWeek = 7; /** Calculate how much someone earns in a week */ export declare function weeklySalary(dayRate: number): number; With stripInternal set to true the d.ts emitted will be redacted.\n/** Calculate how much someone earns in a week */ export declare function weeklySalary(dayRate: number): number; The JavaScript output is still the same.\nInternal ::: ::: category\nJavaScript Support # :::\n::: section\nAllow JS - allowJs # Allow JavaScript files to be imported inside your project, instead of just .ts and .tsx files. For example, this JS file:\n// @filename: card.js export const defaultCardDeck = \u0026#34;Heart\u0026#34;; When imported into a TypeScript file will raise an error:\n// @filename: index.ts import { defaultCardDeck } from \u0026#34;./card\u0026#34;; console.log(defaultCardDeck); Imports fine with allowJs enabled:\n// @filename: index.ts import { defaultCardDeck } from \u0026#34;./card\u0026#34;; console.log(defaultCardDeck); This flag can be used as a way to incrementally add TypeScript files into JS projects by allowing the .ts and .tsx files to live along-side existing JavaScript files.\nIt can also be used along-side declaration and emitDeclarationOnly to create declarations for JS files.\nRelated:\ncheckJs{aria-label=\u0026ldquo;Jump to compiler option info for checkJs\u0026rdquo;}\nemitDeclarationOnly{aria-label=\u0026ldquo;Jump to compiler option info for emitDeclarationOnly\u0026rdquo;}\nReleased:\n1.8{aria-label=\u0026ldquo;Release notes for TypeScript 1.8\u0026rdquo;}\n::: ::: section\nCheck JS - checkJs # Works in tandem with allowJs. When checkJs is enabled then errors are reported in JavaScript files. This is the equivalent of including // @ts-check at the top of all JavaScript files which are included in your project.\nFor example, this is incorrect JavaScript according to the parseFloat type definition which comes with TypeScript:\n// parseFloat only takes a string module.exports.pi = parseFloat(3.142); When imported into a TypeScript module:\n// @filename: constants.js module.exports.pi = parseFloat(3.142); // @filename: index.ts import { pi } from \u0026#34;./constants\u0026#34;; console.log(pi); You will not get any errors. However, if you turn on checkJs then you will get error messages from the JavaScript file.\n// @filename: constants.js module.exports.pi = parseFloat(3.142); // @filename: index.ts import { pi } from \u0026#34;./constants\u0026#34;; console.log(pi); Related:\nallowJs{aria-label=\u0026ldquo;Jump to compiler option info for allowJs\u0026rdquo;}\nemitDeclarationOnly{aria-label=\u0026ldquo;Jump to compiler option info for emitDeclarationOnly\u0026rdquo;}\nReleased:\n2.3{aria-label=\u0026ldquo;Release notes for TypeScript 2.3\u0026rdquo;}\n::: ::: section\nMax Node Module JS Depth - maxNodeModuleJsDepth # The maximum dependency depth to search under node_modules and load JavaScript files.\nThis flag can only be used when allowJs is enabled, and is used if you want to have TypeScript infer types for all of the JavaScript inside your node_modules.\nIdeally this should stay at 0 (the default), and d.ts files should be used to explicitly define the shape of modules. However, there are cases where you may want to turn this on at the expense of speed and potential accuracy.\n::: ::: category\nEditor Support # :::\n::: section\nDisable Size Limit - disableSizeLimit # To avoid a possible memory bloat issues when working with very large JavaScript projects, there is an upper limit to the amount of memory TypeScript will allocate. Turning this flag on will remove the limit.\n::: ::: section\nPlugins - plugins # List of language service plugins to run inside the editor.\nLanguage service plugins are a way to provide additional information to a user based on existing TypeScript files. They can enhance existing messages between TypeScript and an editor, or to provide their own error messages.\nFor example:\nts-sql-plugin \u0026mdash; Adds SQL linting with a template strings SQL builder. typescript-styled-plugin \u0026mdash; Provides CSS linting inside template strings . typescript-eslint-language-service \u0026mdash; Provides eslint error messaging and fix-its inside the compiler\u0026rsquo;s output. ts-graphql-plugin \u0026mdash; Provides validation and auto-completion inside GraphQL query template strings. VS Code has the ability for a extension to automatically include language service plugins, and so you may have some running in your editor without needing to define them in your tsconfig.json.\n::: ::: category\nInterop Constraints # :::\n::: section\nAllow Synthetic Default Imports - allowSyntheticDefaultImports # When set to true, allowSyntheticDefaultImports allows you to write an import like:\nimport React from \u0026#34;react\u0026#34;; instead of:\nimport * as React from \u0026#34;react\u0026#34;; When the module does not explicitly specify a default export.\nFor example, without allowSyntheticDefaultImports as true:\n// @filename: utilFunctions.js const getStringLength = (str) =\u0026gt; str.length; module.exports = { getStringLength, }; // @filename: index.ts import utils from \u0026#34;./utilFunctions\u0026#34;; const count = utils.getStringLength(\u0026#34;Check JS\u0026#34;); This code raises an error because there isn\u0026rsquo;t a default object which you can import. Even though it feels like it should. For convenience, transpilers like Babel will automatically create a default if one isn\u0026rsquo;t created. Making the module look a bit more like:\n// @filename: utilFunctions.js const getStringLength = (str) =\u0026gt; str.length; const allFunctions = { getStringLength, }; module.exports = allFunctions; module.exports.default = allFunctions; This flag does not affect the JavaScript emitted by TypeScript, it\u0026rsquo;s only for the type checking. This option brings the behavior of TypeScript in-line with Babel, where extra code is emitted to make using a default export of a module more ergonomic.\nDefault:\ntrue if esModuleInterop is enabled, module is system, or moduleResolution is bundler, false otherwise.\nRelated:\nesModuleInterop{aria-label=\u0026ldquo;Jump to compiler option info for esModuleInterop\u0026rdquo;} Released:\n1.8{aria-label=\u0026ldquo;Release notes for TypeScript 1.8\u0026rdquo;}\n::: ::: section\nES Module Interop - esModuleInterop # By default (with esModuleInterop false or not set) TypeScript treats CommonJS/AMD/UMD modules similar to ES6 modules. In doing this, there are two parts in particular which turned out to be flawed assumptions:\na namespace import like import * as moment from \u0026quot;moment\u0026quot; acts the same as const moment = require(\u0026quot;moment\u0026quot;)\na default import like import moment from \u0026quot;moment\u0026quot; acts the same as const moment = require(\u0026quot;moment\u0026quot;).default\nThis mis-match causes these two issues:\nthe ES6 modules spec states that a namespace import (import * as x) can only be an object, by having TypeScript treating it the same as = require(\u0026quot;x\u0026quot;) then TypeScript allowed for the import to be treated as a function and be callable. That\u0026rsquo;s not valid according to the spec.\nwhile accurate to the ES6 modules spec, most libraries with CommonJS/AMD/UMD modules didn\u0026rsquo;t conform as strictly as TypeScript\u0026rsquo;s implementation.\nTurning on esModuleInterop will fix both of these problems in the code transpiled by TypeScript. The first changes the behavior in the compiler, the second is fixed by two new helper functions which provide a shim to ensure compatibility in the emitted JavaScript:\nimport * as fs from \u0026#34;fs\u0026#34;; import _ from \u0026#34;lodash\u0026#34;; fs.readFileSync(\u0026#34;file.txt\u0026#34;, \u0026#34;utf8\u0026#34;); _.chunk([\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;], 2); With esModuleInterop disabled:\n\u0026#34;use strict\u0026#34;; Object.defineProperty(exports, \u0026#34;__esModule\u0026#34;, { value: true }); const fs = require(\u0026#34;fs\u0026#34;); const lodash_1 = require(\u0026#34;lodash\u0026#34;); fs.readFileSync(\u0026#34;file.txt\u0026#34;, \u0026#34;utf8\u0026#34;); lodash_1.default.chunk([\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;], 2); With esModuleInterop set to true:\n\u0026#34;use strict\u0026#34;; var __createBinding = (this \u0026amp;\u0026amp; this.__createBinding) || (Object.create ? (function(o, m, k, k2) { if (k2 === undefined) k2 = k; var desc = Object.getOwnPropertyDescriptor(m, k); if (!desc || (\u0026#34;get\u0026#34; in desc ? !m.__esModule : desc.writable || desc.configurable)) { desc = { enumerable: true, get: function() { return m[k]; } }; } Object.defineProperty(o, k2, desc); }) : (function(o, m, k, k2) { if (k2 === undefined) k2 = k; o[k2] = m[k]; })); var __setModuleDefault = (this \u0026amp;\u0026amp; this.__setModuleDefault) || (Object.create ? (function(o, v) { Object.defineProperty(o, \u0026#34;default\u0026#34;, { enumerable: true, value: v }); }) : function(o, v) { o[\u0026#34;default\u0026#34;] = v; }); var __importStar = (this \u0026amp;\u0026amp; this.__importStar) || function (mod) { if (mod \u0026amp;\u0026amp; mod.__esModule) return mod; var result = {}; if (mod != null) for (var k in mod) if (k !== \u0026#34;default\u0026#34; \u0026amp;\u0026amp; Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k); __setModuleDefault(result, mod); return result; }; var __importDefault = (this \u0026amp;\u0026amp; this.__importDefault) || function (mod) { return (mod \u0026amp;\u0026amp; mod.__esModule) ? mod : { \u0026#34;default\u0026#34;: mod }; }; Object.defineProperty(exports, \u0026#34;__esModule\u0026#34;, { value: true }); const fs = __importStar(require(\u0026#34;fs\u0026#34;)); const lodash_1 = __importDefault(require(\u0026#34;lodash\u0026#34;)); fs.readFileSync(\u0026#34;file.txt\u0026#34;, \u0026#34;utf8\u0026#34;); lodash_1.default.chunk([\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;], 2); Note: The namespace import import * as fs from \u0026quot;fs\u0026quot; only accounts for properties which are owned (basically properties set on the object and not via the prototype chain) on the imported object. If the module you\u0026rsquo;re importing defines its API using inherited properties, you need to use the default import form (import fs from \u0026quot;fs\u0026quot;), or disable esModuleInterop.\nNote: You can make JS emit terser by enabling importHelpers:\n\u0026#34;use strict\u0026#34;; Object.defineProperty(exports, \u0026#34;__esModule\u0026#34;, { value: true }); const tslib_1 = require(\u0026#34;tslib\u0026#34;); const fs = tslib_1.__importStar(require(\u0026#34;fs\u0026#34;)); const lodash_1 = tslib_1.__importDefault(require(\u0026#34;lodash\u0026#34;)); fs.readFileSync(\u0026#34;file.txt\u0026#34;, \u0026#34;utf8\u0026#34;); lodash_1.default.chunk([\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;], 2); Enabling esModuleInterop will also enable allowSyntheticDefaultImports.\nRecommended\nDefault:\ntrue if module is node16 or nodenext, false otherwise.\nRelated:\nallowSyntheticDefaultImports{aria-label=\u0026ldquo;Jump to compiler option info for allowSyntheticDefaultImports\u0026rdquo;} Released:\n2.7{aria-label=\u0026ldquo;Release notes for TypeScript 2.7\u0026rdquo;}\n::: ::: section\nForce Consistent Casing In File Names - forceConsistentCasingInFileNames # TypeScript follows the case sensitivity rules of the file system it\u0026rsquo;s running on. This can be problematic if some developers are working in a case-sensitive file system and others aren\u0026rsquo;t. If a file attempts to import fileManager.ts by specifying ./FileManager.ts the file will be found in a case-insensitive file system, but not on a case-sensitive file system.\nWhen this option is set, TypeScript will issue an error if a program tries to include a file by a casing different from the casing on disk.\nRecommended\nDefault:\ntrue\n::: ::: section\nIsolated Modules - isolatedModules # While you can use TypeScript to produce JavaScript code from TypeScript code, it\u0026rsquo;s also common to use other transpilers such as Babel to do this. However, other transpilers only operate on a single file at a time, which means they can\u0026rsquo;t apply code transforms that depend on understanding the full type system. This restriction also applies to TypeScript\u0026rsquo;s ts.transpileModule API which is used by some build tools.\nThese limitations can cause runtime problems with some TypeScript features like const enums and namespaces. Setting the isolatedModules flag tells TypeScript to warn you if you write certain code that can\u0026rsquo;t be correctly interpreted by a single-file transpilation process.\nIt does not change the behavior of your code, or otherwise change the behavior of TypeScript\u0026rsquo;s checking and emitting process.\nSome examples of code which does not work when isolatedModules is enabled.\nExports of Non-Value Identifiers # In TypeScript, you can import a type and then subsequently export it:\nimport { someType, someFunction } from \u0026#34;someModule\u0026#34;; someFunction(); export { someType, someFunction }; Because there\u0026rsquo;s no value for someType, the emitted export will not try to export it (this would be a runtime error in JavaScript):\nexport { someFunction }; Single-file transpilers don\u0026rsquo;t know whether someType produces a value or not, so it\u0026rsquo;s an error to export a name that only refers to a type.\nNon-Module Files # If isolatedModules is set, all implementation files must be modules (which means it has some form of import/export). An error occurs if any file isn\u0026rsquo;t a module:\nfunction fn() {} This restriction doesn\u0026rsquo;t apply to .d.ts files.\nReferences to const enum members # In TypeScript, when you reference a const enum member, the reference is replaced by its actual value in the emitted JavaScript. Changing this TypeScript:\ndeclare const enum Numbers { Zero = 0, One = 1, } console.log(Numbers.Zero + Numbers.One); To this JavaScript:\n\u0026#34;use strict\u0026#34;; console.log(0 + 1); Without knowledge of the values of these members, other transpilers can\u0026rsquo;t replace the references to Numbers, which would be a runtime error if left alone (since there are no Numbers object at runtime). Because of this, when isolatedModules is set, it is an error to reference an ambient const enum member.\n::: ::: section\nPreserve Symlinks - preserveSymlinks # This is to reflect the same flag in Node.js; which does not resolve the real path of symlinks.\nThis flag also exhibits the opposite behavior to Webpack\u0026rsquo;s resolve.symlinks option (i.e. setting TypeScript\u0026rsquo;s preserveSymlinks to true parallels setting Webpack\u0026rsquo;s resolve.symlinks to false, and vice-versa).\nWith this enabled, references to modules and packages (e.g. imports and /// \u0026lt;reference type=\u0026quot;...\u0026quot; /\u0026gt; directives) are all resolved relative to the location of the symbolic link file, rather than relative to the path that the symbolic link resolves to.\n::: ::: section\nVerbatim Module Syntax - verbatimModuleSyntax # By default, TypeScript does something called import elision. Basically, if you write something like\nimport { Car } from \u0026#34;./car\u0026#34;; export function drive(car: Car) { // ... } TypeScript detects that you\u0026rsquo;re only using an import for types and drops the import entirely. Your output JavaScript might look something like this:\nexport function drive(car) { // ... } Most of the time this is good, because if Car isn\u0026rsquo;t a value that\u0026rsquo;s exported from ./car, we\u0026rsquo;ll get a runtime error.\nBut it does add a layer of complexity for certain edge cases. For example, notice there\u0026rsquo;s no statement like import \u0026quot;./car\u0026quot;; - the import was dropped entirely. That actually makes a difference for modules that have side-effects or not.\nTypeScript\u0026rsquo;s emit strategy for JavaScript also has another few layers of complexity - import elision isn\u0026rsquo;t always just driven by how an import is used - it often consults how a value is declared as well. So it\u0026rsquo;s not always clear whether code like the following\nexport { Car } from \u0026#34;./car\u0026#34;; should be preserved or dropped. If Car is declared with something like a class, then it can be preserved in the resulting JavaScript file. But if Car is only declared as a type alias or interface, then the JavaScript file shouldn\u0026rsquo;t export Car at all.\nWhile TypeScript might be able to make these emit decisions based on information from across files, not every compiler can.\nThe type modifier on imports and exports helps with these situations a bit. We can make it explicit whether an import or export is only being used for type analysis, and can be dropped entirely in JavaScript files by using the type modifier.\n// This statement can be dropped entirely in JS output import type * as car from \u0026#34;./car\u0026#34;; // The named import/export \u0026#39;Car\u0026#39; can be dropped in JS output import { type Car } from \u0026#34;./car\u0026#34;; export { type Car } from \u0026#34;./car\u0026#34;; type modifiers are not quite useful on their own - by default, module elision will still drop imports, and nothing forces you to make the distinction between type and plain imports and exports. So TypeScript has the flag --importsNotUsedAsValues to make sure you use the type modifier, --preserveValueImports to prevent some module elision behavior, and --isolatedModules to make sure that your TypeScript code works across different compilers. Unfortunately, understanding the fine details of those 3 flags is hard, and there are still some edge cases with unexpected behavior.\nTypeScript 5.0 introduces a new option called --verbatimModuleSyntax to simplify the situation. The rules are much simpler - any imports or exports without a type modifier are left around. Anything that uses the type modifier is dropped entirely.\n// Erased away entirely. import type { A } from \u0026#34;a\u0026#34;; // Rewritten to \u0026#39;import { b } from \u0026#34;bcd\u0026#34;;\u0026#39; import { b, type c, type d } from \u0026#34;bcd\u0026#34;; // Rewritten to \u0026#39;import {} from \u0026#34;xyz\u0026#34;;\u0026#39; import { type xyz } from \u0026#34;xyz\u0026#34;; With this new option, what you see is what you get.\nThat does have some implications when it comes to module interop though. Under this flag, ECMAScript imports and exports won\u0026rsquo;t be rewritten to require calls when your settings or file extension implied a different module system. Instead, you\u0026rsquo;ll get an error. If you need to emit code that uses require and module.exports, you\u0026rsquo;ll have to use TypeScript\u0026rsquo;s module syntax that predates ES2015:\n+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+ | Input TypeScript | Output JavaScript | +===================================+===================================+ | ts | js | | import foo = require(\u0026ldquo;foo\u0026rdquo;); | const foo = require(\u0026ldquo;foo\u0026rdquo;); | | | | +\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+ | ts | js | | function foo() {} | function foo() {} | | function bar() {} | function bar() {} | | function baz() {} | function baz() {} | | | | | export = { | module.exports = { | | foo, | foo, | | bar, | bar, | | baz, | baz, | | }; | }; | | | | +\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+\nWhile this is a limitation, it does help make some issues more obvious. For example, it\u0026rsquo;s very common to forget to set the type field in package.json under --module node16. As a result, developers would start writing CommonJS modules instead of an ES modules without realizing it, giving surprising lookup rules and JavaScript output. This new flag ensures that you\u0026rsquo;re intentional about the file type you\u0026rsquo;re using because the syntax is intentionally different.\nBecause --verbatimModuleSyntax provides a more consistent story than --importsNotUsedAsValues and --preserveValueImports, those two existing flags are being deprecated in its favor.\nFor more details, read up on the original pull request and its proposal issue.\n::: ::: category\nBackwards Compatibility # :::\n::: section\nCharset - charset # In prior versions of TypeScript, this controlled what encoding was used when reading text files from disk. Today, TypeScript assumes UTF-8 encoding, but will correctly detect UTF-16 (BE and LE) or UTF-8 BOMs.\nDeprecated\nDefault:\nutf8\n::: ::: section\nKeyof Strings Only - keyofStringsOnly # This flag changes the keyof type operator to return string instead of string | number when applied to a type with a string index signature.\nThis flag is used to help people keep this behavior from before TypeScript 2.9\u0026rsquo;s release.\nDeprecated\nReleased:\n2.9{aria-label=\u0026ldquo;Release notes for TypeScript 2.9\u0026rdquo;}\n::: ::: section\nNo Implicit Use Strict - noImplicitUseStrict # You shouldn\u0026rsquo;t need this. By default, when emitting a module file to a non-ES6 target, TypeScript emits a \u0026quot;use strict\u0026quot;; prologue at the top of the file. This setting disables the prologue.\n::: ::: section\nNo Strict Generic Checks - noStrictGenericChecks # TypeScript will unify type parameters when comparing two generic functions.\ntype A = \u0026lt;T, U\u0026gt;(x: T, y: U) =\u0026gt; [T, U]; type B = \u0026lt;S\u0026gt;(x: S, y: S) =\u0026gt; [S, S]; function f(a: A, b: B) { b = a; // Ok a = b; // Error } This flag can be used to remove that check.\nReleased:\n2.4{aria-label=\u0026ldquo;Release notes for TypeScript 2.4\u0026rdquo;}\n::: ::: section\nOut - out # Use outFile instead.\nThe out option computes the final file location in a way that is not predictable or consistent. This option is retained for backward compatibility only and is deprecated.\nDeprecated Related: outDir{aria-label=\u0026ldquo;Jump to compiler option info for outDir\u0026rdquo;}\noutFile{aria-label=\u0026ldquo;Jump to compiler option info for outFile\u0026rdquo;}\n::: ::: section\nSuppress Excess Property Errors - suppressExcessPropertyErrors # This disables reporting of excess property errors, such as the one shown in the following example:\ntype Point = { x: number; y: number }; const p: Point = { x: 1, y: 3, m: 10 }; This flag was added to help people migrate to the stricter checking of new object literals in TypeScript 1.6.\nWe don\u0026rsquo;t recommend using this flag in a modern codebase, you can suppress one-off cases where you need it using // @ts-ignore.\n::: ::: section\nSuppress Implicit Any Index Errors - suppressImplicitAnyIndexErrors # Turning suppressImplicitAnyIndexErrors on suppresses reporting the error about implicit anys when indexing into objects, as shown in the following example:\nconst obj = { x: 10 }; console.log(obj[\u0026#34;foo\u0026#34;]); Using suppressImplicitAnyIndexErrors is quite a drastic approach. It is recommended to use a @ts-ignore comment instead:\nconst obj = { x: 10 }; // @ts-ignore console.log(obj[\u0026#34;foo\u0026#34;]); Related: noImplicitAny{aria-label=\u0026ldquo;Jump to compiler option info for noImplicitAny\u0026rdquo;} ::: ::: category\nLanguage and Environment # :::\n::: section\nEmit Decorator Metadata - emitDecoratorMetadata # Enables experimental support for emitting type metadata for decorators which works with the module reflect-metadata.\nFor example, here is the TypeScript\nfunction LogMethod( target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor ) { console.log(target); console.log(propertyKey); console.log(descriptor); } class Demo { @LogMethod public foo(bar: number) { // do nothing } } const demo = new Demo(); With emitDecoratorMetadata not set to true (default) the emitted JavaScript is:\n\u0026#34;use strict\u0026#34;; var __decorate = (this \u0026amp;\u0026amp; this.__decorate) || function (decorators, target, key, desc) { var c = arguments.length, r = c \u0026lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d; if (typeof Reflect === \u0026#34;object\u0026#34; \u0026amp;\u0026amp; typeof Reflect.decorate === \u0026#34;function\u0026#34;) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i \u0026gt;= 0; i--) if (d = decorators[i]) r = (c \u0026lt; 3 ? d(r) : c \u0026gt; 3 ? d(target, key, r) : d(target, key)) || r; return c \u0026gt; 3 \u0026amp;\u0026amp; r \u0026amp;\u0026amp; Object.defineProperty(target, key, r), r; }; function LogMethod(target, propertyKey, descriptor) { console.log(target); console.log(propertyKey); console.log(descriptor); } class Demo { foo(bar) { // do nothing } } __decorate([ LogMethod ], Demo.prototype, \u0026#34;foo\u0026#34;, null); const demo = new Demo(); With emitDecoratorMetadata set to true the emitted JavaScript is:\n\u0026#34;use strict\u0026#34;; var __decorate = (this \u0026amp;\u0026amp; this.__decorate) || function (decorators, target, key, desc) { var c = arguments.length, r = c \u0026lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d; if (typeof Reflect === \u0026#34;object\u0026#34; \u0026amp;\u0026amp; typeof Reflect.decorate === \u0026#34;function\u0026#34;) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i \u0026gt;= 0; i--) if (d = decorators[i]) r = (c \u0026lt; 3 ? d(r) : c \u0026gt; 3 ? d(target, key, r) : d(target, key)) || r; return c \u0026gt; 3 \u0026amp;\u0026amp; r \u0026amp;\u0026amp; Object.defineProperty(target, key, r), r; }; var __metadata = (this \u0026amp;\u0026amp; this.__metadata) || function (k, v) { if (typeof Reflect === \u0026#34;object\u0026#34; \u0026amp;\u0026amp; typeof Reflect.metadata === \u0026#34;function\u0026#34;) return Reflect.metadata(k, v); }; function LogMethod(target, propertyKey, descriptor) { console.log(target); console.log(propertyKey); console.log(descriptor); } class Demo { foo(bar) { // do nothing } } __decorate([ LogMethod, __metadata(\u0026#34;design:type\u0026#34;, Function), __metadata(\u0026#34;design:paramtypes\u0026#34;, [Number]), __metadata(\u0026#34;design:returntype\u0026#34;, void 0) ], Demo.prototype, \u0026#34;foo\u0026#34;, null); const demo = new Demo(); Related: experimentalDecorators{aria-label=\u0026ldquo;Jump to compiler option info for experimentalDecorators\u0026rdquo;} ::: ::: section\nExperimental Decorators - experimentalDecorators # Enables experimental support for decorators, which is a version of decorators that predates the TC39 standardization process.\nDecorators are a language feature which hasn\u0026rsquo;t yet been fully ratified into the JavaScript specification. This means that the implementation version in TypeScript may differ from the implementation in JavaScript when it it decided by TC39.\nYou can find out more about decorator support in TypeScript in the handbook.\nRelated: emitDecoratorMetadata{aria-label=\u0026ldquo;Jump to compiler option info for emitDecoratorMetadata\u0026rdquo;} ::: ::: section\nJSX - jsx # Controls how JSX constructs are emitted in JavaScript files. This only affects output of JS files that started in .tsx files.\nreact: Emit .js files with JSX changed to the equivalent React.createElement calls react-jsx: Emit .js files with the JSX changed to _jsx calls react-jsxdev: Emit .js files with the JSX changed to _jsx calls preserve: Emit .jsx files with the JSX unchanged react-native: Emit .js files with the JSX unchanged For example # This sample code:\nexport const HelloWorld = () =\u0026gt; \u0026lt;h1\u0026gt;Hello world\u0026lt;/h1\u0026gt;; Default: \u0026quot;react\u0026quot;\nimport React from \u0026#39;react\u0026#39;; export const HelloWorld = () =\u0026gt; React.createElement(\u0026#34;h1\u0026#34;, null, \u0026#34;Hello world\u0026#34;); Preserve: \u0026quot;preserve\u0026quot;\nimport React from \u0026#39;react\u0026#39;; export const HelloWorld = () =\u0026gt; \u0026lt;h1\u0026gt;Hello world\u0026lt;/h1\u0026gt;; React Native: \u0026quot;react-native\u0026quot;\nimport React from \u0026#39;react\u0026#39;; export const HelloWorld = () =\u0026gt; \u0026lt;h1\u0026gt;Hello world\u0026lt;/h1\u0026gt;; React 17 transform: \u0026quot;react-jsx\u0026quot;^ [1]^\nimport { jsx as _jsx } from \u0026#34;react/jsx-runtime\u0026#34;; import React from \u0026#39;react\u0026#39;; export const HelloWorld = () =\u0026gt; _jsx(\u0026#34;h1\u0026#34;, { children: \u0026#34;Hello world\u0026#34; }); React 17 dev transform: \u0026quot;react-jsxdev\u0026quot;^ [1]^\nimport { jsxDEV as _jsxDEV } from \u0026#34;react/jsx-dev-runtime\u0026#34;; const _jsxFileName = \u0026#34;/home/runner/work/TypeScript-Website/TypeScript-Website/index.tsx\u0026#34;; import React from \u0026#39;react\u0026#39;; export const HelloWorld = () =\u0026gt; _jsxDEV(\u0026#34;h1\u0026#34;, { children: \u0026#34;Hello world\u0026#34; }, void 0, false, { fileName: _jsxFileName, lineNumber: 9, columnNumber: 32 }, this); Allowed:\npreserve\nreact\nreact-native\nreact-jsx\nreact-jsxdev\nRelated:\njsxFactory{aria-label=\u0026ldquo;Jump to compiler option info for jsxFactory\u0026rdquo;}\njsxFragmentFactory{aria-label=\u0026ldquo;Jump to compiler option info for jsxFragmentFactory\u0026rdquo;}\njsxImportSource{aria-label=\u0026ldquo;Jump to compiler option info for jsxImportSource\u0026rdquo;}\nReleased:\n2.2{aria-label=\u0026ldquo;Release notes for TypeScript 2.2\u0026rdquo;}\n::: ::: section\nJSX Factory - jsxFactory # Changes the function called in .js files when compiling JSX Elements using the classic JSX runtime. The most common change is to use \u0026quot;h\u0026quot; or \u0026quot;preact.h\u0026quot; instead of the default \u0026quot;React.createElement\u0026quot; if using preact.\nFor example, this TSX file:\nimport { h } from \u0026#34;preact\u0026#34;; const HelloWorld = () =\u0026gt; \u0026lt;div\u0026gt;Hello\u0026lt;/div\u0026gt;; With jsxFactory: \u0026quot;h\u0026quot; looks like:\nconst preact_1 = require(\u0026#34;preact\u0026#34;); const HelloWorld = () =\u0026gt; (0, preact_1.h)(\u0026#34;div\u0026#34;, null, \u0026#34;Hello\u0026#34;); This option can be used on a per-file basis too similar to Babel\u0026rsquo;s /** @jsx h */ directive.\n/** @jsx h */ import { h } from \u0026#34;preact\u0026#34;; const HelloWorld = () =\u0026gt; \u0026lt;div\u0026gt;Hello\u0026lt;/div\u0026gt;; The factory chosen will also affect where the JSX namespace is looked up (for type checking information) before falling back to the global one.\nIf the factory is defined as React.createElement (the default), the compiler will check for React.JSX before checking for a global JSX. If the factory is defined as h, it will check for h.JSX before a global JSX.\nDefault:\nReact.createElement\nAllowed:\nAny identifier or dotted identifier. Related:\njsx{aria-label=\u0026ldquo;Jump to compiler option info for jsx\u0026rdquo;}\njsxFragmentFactory{aria-label=\u0026ldquo;Jump to compiler option info for jsxFragmentFactory\u0026rdquo;}\njsxImportSource{aria-label=\u0026ldquo;Jump to compiler option info for jsxImportSource\u0026rdquo;}\n::: ::: section\nJSX Fragment Factory - jsxFragmentFactory # Specify the JSX fragment factory function to use when targeting react JSX emit with jsxFactory compiler option is specified, e.g. Fragment.\nFor example with this TSConfig:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;esnext\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;commonjs\u0026#34;, \u0026#34;jsx\u0026#34;: \u0026#34;react\u0026#34;, \u0026#34;jsxFactory\u0026#34;: \u0026#34;h\u0026#34;, \u0026#34;jsxFragmentFactory\u0026#34;: \u0026#34;Fragment\u0026#34; } } This TSX file:\nimport { h, Fragment } from \u0026#34;preact\u0026#34;; const HelloWorld = () =\u0026gt; ( \u0026lt;\u0026gt; \u0026lt;div\u0026gt;Hello\u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; ); Would look like:\nconst preact_1 = require(\u0026#34;preact\u0026#34;); const HelloWorld = () =\u0026gt; ((0, preact_1.h)(preact_1.Fragment, null, (0, preact_1.h)(\u0026#34;div\u0026#34;, null, \u0026#34;Hello\u0026#34;))); This option can be used on a per-file basis too similar to Babel\u0026rsquo;s /* @jsxFrag h */ directive.\nFor example:\n/** @jsx h */ /** @jsxFrag Fragment */ import { h, Fragment } from \u0026#34;preact\u0026#34;; const HelloWorld = () =\u0026gt; ( \u0026lt;\u0026gt; \u0026lt;div\u0026gt;Hello\u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; ); Default:\nReact.Fragment\nRelated:\njsx{aria-label=\u0026ldquo;Jump to compiler option info for jsx\u0026rdquo;}\njsxFactory{aria-label=\u0026ldquo;Jump to compiler option info for jsxFactory\u0026rdquo;}\njsxImportSource{aria-label=\u0026ldquo;Jump to compiler option info for jsxImportSource\u0026rdquo;}\nReleased:\n4.0{aria-label=\u0026ldquo;Release notes for TypeScript 4.0\u0026rdquo;}\n::: ::: section\nJSX Import Source - jsxImportSource # Declares the module specifier to be used for importing the jsx and jsxs factory functions when using jsx as \u0026quot;react-jsx\u0026quot; or \u0026quot;react-jsxdev\u0026quot; which were introduced in TypeScript 4.1.\nWith React 17 the library supports a new form of JSX transformation via a separate import.\nFor example with this code:\nimport React from \u0026#34;react\u0026#34;; function App() { return \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;; } Using this TSConfig:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;esnext\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;commonjs\u0026#34;, \u0026#34;jsx\u0026#34;: \u0026#34;react-jsx\u0026#34; } } The emitted JavaScript from TypeScript is:\n\u0026#34;use strict\u0026#34;; var __importDefault = (this \u0026amp;\u0026amp; this.__importDefault) || function (mod) { return (mod \u0026amp;\u0026amp; mod.__esModule) ? mod : { \u0026#34;default\u0026#34;: mod }; }; Object.defineProperty(exports, \u0026#34;__esModule\u0026#34;, { value: true }); const jsx_runtime_1 = require(\u0026#34;react/jsx-runtime\u0026#34;); const react_1 = __importDefault(require(\u0026#34;react\u0026#34;)); function App() { return (0, jsx_runtime_1.jsx)(\u0026#34;h1\u0026#34;, { children: \u0026#34;Hello World\u0026#34; }); } For example if you wanted to use \u0026quot;jsxImportSource\u0026quot;: \u0026quot;preact\u0026quot;, you need a tsconfig like:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;esnext\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;commonjs\u0026#34;, \u0026#34;jsx\u0026#34;: \u0026#34;react-jsx\u0026#34;, \u0026#34;jsxImportSource\u0026#34;: \u0026#34;preact\u0026#34;, \u0026#34;types\u0026#34;: [\u0026#34;preact\u0026#34;] } } Which generates code like:\nfunction App() { return (0, jsx_runtime_1.jsx)(\u0026#34;h1\u0026#34;, { children: \u0026#34;Hello World\u0026#34; }); } exports.App = App; Alternatively, you can use a per-file pragma to set this option, for example:\n/** @jsxImportSource preact */ export function App() { return \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;; } Would add preact/jsx-runtime as an import for the _jsx factory.\nNote: In order for this to work like you would expect, your tsx file must include an export or import so that it is considered a module.\nDefault:\nreact\nRelated:\njsx{aria-label=\u0026ldquo;Jump to compiler option info for jsx\u0026rdquo;}\njsxFactory{aria-label=\u0026ldquo;Jump to compiler option info for jsxFactory\u0026rdquo;}\nReleased:\n4.1{aria-label=\u0026ldquo;Release notes for TypeScript 4.1\u0026rdquo;}\n::: ::: section\nLib - lib # TypeScript includes a default set of type definitions for built-in JS APIs (like Math), as well as type definitions for things found in browser environments (like document). TypeScript also includes APIs for newer JS features matching the target you specify; for example the definition for Map is available if target is ES6 or newer.\nYou may want to change these for a few reasons:\nYour program doesn\u0026rsquo;t run in a browser, so you don\u0026rsquo;t want the \u0026quot;dom\u0026quot; type definitions Your runtime platform provides certain JavaScript API objects (maybe through polyfills), but doesn\u0026rsquo;t yet support the full syntax of a given ECMAScript version You have polyfills or native implementations for some, but not all, of a higher level ECMAScript version In TypeScript 4.5, lib files can be overridden by npm modules, find out more in the blog.\nHigh Level libraries # Name Contents\nES5 Core definitions for all ES3 and ES5 functionality ES2015 Additional APIs available in ES2015 (also known as ES6) - array.find, Promise, Proxy, Symbol, Map, Set, Reflect, etc. ES6 Alias for \u0026ldquo;ES2015\u0026rdquo; ES2016 Additional APIs available in ES2016 - array.include, etc. ES7 Alias for \u0026ldquo;ES2016\u0026rdquo; ES2017 Additional APIs available in ES2017 - Object.entries, Object.values, Atomics, SharedArrayBuffer, date.formatToParts, typed arrays, etc. ES2018 Additional APIs available in ES2018 - async iterables, promise.finally, Intl.PluralRules, regexp.groups, etc. ES2019 Additional APIs available in ES2019 - array.flat, array.flatMap, Object.fromEntries, string.trimStart, string.trimEnd, etc. ES2020 Additional APIs available in ES2020 - string.matchAll, etc. ES2021 Additional APIs available in ES2021 - promise.any, string.replaceAll etc. ES2022 Additional APIs available in ES2022 - array.at, RegExp.hasIndices, etc. ESNext Additional APIs available in ESNext - This changes as the JavaScript specification evolves DOM DOM definitions - window, document, etc. WebWorker APIs available in WebWorker contexts ScriptHost APIs for the Windows Script Hosting System\nIndividual library components # Name # DOM.Iterable ES2015.Core ES2015.Collection ES2015.Generator ES2015.Iterable ES2015.Promise ES2015.Proxy ES2015.Reflect ES2015.Symbol ES2015.Symbol.WellKnown ES2016.Array.Include ES2017.object ES2017.Intl ES2017.SharedMemory ES2017.String ES2017.TypedArrays ES2018.Intl ES2018.Promise ES2018.RegExp ES2019.Array ES2019.Object ES2019.String ES2019.Symbol ES2020.String ES2020.Symbol.wellknown ES2021.Promise ES2021.String ES2021.WeakRef ESNext.AsyncIterable ESNext.Array ESNext.Intl ESNext.Symbol\nThis list may be out of date, you can see the full list in the TypeScript source code.\nRelated:\nnoLib{aria-label=\u0026ldquo;Jump to compiler option info for noLib\u0026rdquo;} Released:\n2.0{aria-label=\u0026ldquo;Release notes for TypeScript 2.0\u0026rdquo;}\n::: ::: section\nModule Detection - moduleDetection # There are three choices:\n\u0026quot;auto\u0026quot; (default) - TypeScript will not only look for import and export statements, but it will also check whether the \u0026quot;type\u0026quot; field in a package.json is set to \u0026quot;module\u0026quot; when running with module: nodenext or node16, and check whether the current file is a JSX file when running under jsx: react-jsx.\n\u0026quot;legacy\u0026quot; - The same behavior as 4.6 and prior, usings import and export statements to determine whether a file is a module.\n\u0026quot;force\u0026quot; - Ensures that every non-declaration file is treated as a module.\nDefault:\n\u0026quot;auto\u0026quot;: Treat files with imports, exports, import.meta, jsx (with jsx: react-jsx), or esm format (with module: node16+) as modules.\nAllowed:\nlegacy\nauto\nforce\nReleased:\n4.7{aria-label=\u0026ldquo;Release notes for TypeScript 4.7\u0026rdquo;}\n::: ::: section\nNo Lib - noLib # Disables the automatic inclusion of any library files. If this option is set, lib is ignored.\nTypeScript cannot compile anything without a set of interfaces for key primitives like: Array, Boolean, Function, IArguments, Number, Object, RegExp, and String. It is expected that if you use noLib you will be including your own type definitions for these.\nRelated: lib{aria-label=\u0026ldquo;Jump to compiler option info for lib\u0026rdquo;} ::: ::: section\nReact Namespace - reactNamespace # Use jsxFactory instead. Specify the object invoked for createElement when targeting react for TSX files.\nDefault:\nReact\n::: ::: section\nTarget - target # Modern browsers support all ES6 features, so ES6 is a good choice. You might choose to set a lower target if your code is deployed to older environments, or a higher target if your code is guaranteed to run in newer environments.\nThe target setting changes which JS features are downleveled and which are left intact. For example, an arrow function () =\u0026gt; this will be turned into an equivalent function expression if target is ES5 or lower.\nChanging target also changes the default value of lib. You may \u0026ldquo;mix and match\u0026rdquo; target and lib settings as desired, but you could just set target for convenience.\nFor developer platforms like Node there are baselines for the target, depending on the type of platform and its version. You can find a set of community organized TSConfigs at tsconfig/bases, which has configurations for common platforms and their versions.\nThe special ESNext value refers to the highest version your version of TypeScript supports. This setting should be used with caution, since it doesn\u0026rsquo;t mean the same thing between different TypeScript versions and can make upgrades less predictable.\nDefault:\nES3\nAllowed:\nes3\nes5\nes6/es2015\nes2016\nes2017\nes2018\nes2019\nes2020\nes2021\nes2022\nesnext\nReleased:\n1.0{aria-label=\u0026ldquo;Release notes for TypeScript 1.0\u0026rdquo;}\n::: ::: section\nUse Define For Class Fields - useDefineForClassFields # This flag is used as part of migrating to the upcoming standard version of class fields. TypeScript introduced class fields many years before it was ratified in TC39. The latest version of the upcoming specification has a different runtime behavior to TypeScript\u0026rsquo;s implementation but the same syntax.\nThis flag switches to the upcoming ECMA runtime behavior.\nYou can read more about the transition in the 3.7 release notes.\nDefault:\ntrue if target is ES2022 or higher, including ESNext, false otherwise.\nReleased:\n3.7{aria-label=\u0026ldquo;Release notes for TypeScript 3.7\u0026rdquo;}\n::: ::: category\nCompiler Diagnostics # :::\n::: section\nDiagnostics - diagnostics # Used to output diagnostic information for debugging. This command is a subset of extendedDiagnostics which are more user-facing results, and easier to interpret.\nIf you have been asked by a TypeScript compiler engineer to give the results using this flag in a compile, in which there is no harm in using extendedDiagnostics instead.\nDeprecated Related: extendedDiagnostics{aria-label=\u0026ldquo;Jump to compiler option info for extendedDiagnostics\u0026rdquo;} ::: ::: section\nExplain Files - explainFiles # Print names of files which TypeScript sees as a part of your project and the reason they are part of the compilation.\nFor example, with this project of just a single index.ts file\nexample ├── index.ts ├── package.json └── tsconfig.json Using a tsconfig.json which has explainFiles set to true:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;es5\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;commonjs\u0026#34;, \u0026#34;explainFiles\u0026#34;: true } } Running TypeScript against this folder would have output like this:\n❯ tsc node_modules/typescript/lib/lib.d.ts Default library for target \u0026#39;es5\u0026#39; node_modules/typescript/lib/lib.es5.d.ts Library referenced via \u0026#39;es5\u0026#39; from file \u0026#39;node_modules/typescript/lib/lib.d.ts\u0026#39; node_modules/typescript/lib/lib.dom.d.ts Library referenced via \u0026#39;dom\u0026#39; from file \u0026#39;node_modules/typescript/lib/lib.d.ts\u0026#39; node_modules/typescript/lib/lib.webworker.importscripts.d.ts Library referenced via \u0026#39;webworker.importscripts\u0026#39; from file \u0026#39;node_modules/typescript/lib/lib.d.ts\u0026#39; node_modules/typescript/lib/lib.scripthost.d.ts Library referenced via \u0026#39;scripthost\u0026#39; from file \u0026#39;node_modules/typescript/lib/lib.d.ts\u0026#39; index.ts Matched by include pattern \u0026#39;**/*\u0026#39; in \u0026#39;tsconfig.json\u0026#39; The output above show:\nThe initial lib.d.ts lookup based on target, and the chain of .d.ts files which are referenced The index.ts file located via the default pattern of include This option is intended for debugging how a file has become a part of your compile.\nReleased:\n4.2{aria-label=\u0026ldquo;Release notes for TypeScript 4.2\u0026rdquo;}\n::: ::: section\nExtended Diagnostics - extendedDiagnostics # You can use this flag to discover where TypeScript is spending its time when compiling. This is a tool used for understanding the performance characteristics of your codebase overall.\nYou can learn more about how to measure and understand the output in the performance section of the wiki.\nRelated: diagnostics{aria-label=\u0026ldquo;Jump to compiler option info for diagnostics\u0026rdquo;} ::: ::: section\nGenerate CPU Profile - generateCpuProfile # This option gives you the chance to have TypeScript emit a v8 CPU profile during the compiler run. The CPU profile can provide insight into why your builds may be slow.\nThis option can only be used from the CLI via: --generateCpuProfile tsc-output.cpuprofile.\nnpm run tsc --generateCpuProfile tsc-output.cpuprofile This file can be opened in a chromium based browser like Chrome or Edge Developer in the CPU profiler section. You can learn more about understanding the compilers performance in the TypeScript wiki section on performance.\nDefault:\nprofile.cpuprofile\nReleased:\n3.7{aria-label=\u0026ldquo;Release notes for TypeScript 3.7\u0026rdquo;}\n::: ::: section\nList Emitted Files - listEmittedFiles # Print names of generated files part of the compilation to the terminal.\nThis flag is useful in two cases:\nYou want to transpile TypeScript as a part of a build chain in the terminal where the filenames are processed in the next command. You are not sure that TypeScript has included a file you expected, as a part of debugging the file inclusion settings. For example:\nexample ├── index.ts ├── package.json └── tsconfig.json With:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;declaration\u0026#34;: true, \u0026#34;listFiles\u0026#34;: true } } Would echo paths like:\n$ npm run tsc path/to/example/index.js path/to/example/index.d.ts Normally, TypeScript would return silently on success.\n::: ::: section\nList Files - listFiles # Print names of files part of the compilation. This is useful when you are not sure that TypeScript has included a file you expected.\nFor example:\nexample ├── index.ts ├── package.json └── tsconfig.json With:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;listFiles\u0026#34;: true } } Would echo paths like:\n$ npm run tsc path/to/example/node_modules/typescript/lib/lib.d.ts path/to/example/node_modules/typescript/lib/lib.es5.d.ts path/to/example/node_modules/typescript/lib/lib.dom.d.ts path/to/example/node_modules/typescript/lib/lib.webworker.importscripts.d.ts path/to/example/node_modules/typescript/lib/lib.scripthost.d.ts path/to/example/index.ts Note if using TypeScript 4.2, prefer explainFiles which offers an explanation of why a file was added too.\nRelated: explainFiles{aria-label=\u0026ldquo;Jump to compiler option info for explainFiles\u0026rdquo;} ::: ::: section\nTrace Resolution - traceResolution # When you are trying to debug why a module isn\u0026rsquo;t being included. You can set traceResolution to true to have TypeScript print information about its resolution process for each processed file.\nYou can read more about this in the handbook.\nReleased:\n2.0{aria-label=\u0026ldquo;Release notes for TypeScript 2.0\u0026rdquo;}\n::: ::: category\nProjects # :::\n::: section\nComposite - composite # The composite option enforces certain constraints which make it possible for build tools (including TypeScript itself, under --build mode) to quickly determine if a project has been built yet.\nWhen this setting is on:\nThe rootDir setting, if not explicitly set, defaults to the directory containing the tsconfig.json file.\nAll implementation files must be matched by an include pattern or listed in the files array. If this constraint is violated, tsc will inform you which files weren\u0026rsquo;t specified.\ndeclaration defaults to true\nYou can find documentation on TypeScript projects in the handbook.\nRelated:\nincremental{aria-label=\u0026ldquo;Jump to compiler option info for incremental\u0026rdquo;}\ntsBuildInfoFile{aria-label=\u0026ldquo;Jump to compiler option info for tsBuildInfoFile\u0026rdquo;}\nReleased:\n3.0{aria-label=\u0026ldquo;Release notes for TypeScript 3.0\u0026rdquo;}\n::: ::: section\nDisable Referenced Project Load - disableReferencedProjectLoad # In multi-project TypeScript programs, TypeScript will load all of the available projects into memory in order to provide accurate results for editor responses which require a full knowledge graph like \u0026lsquo;Find All References\u0026rsquo;.\nIf your project is large, you can use the flag disableReferencedProjectLoad to disable the automatic loading of all projects. Instead, projects are loaded dynamically as you open files through your editor.\nReleased:\n4.0{aria-label=\u0026ldquo;Release notes for TypeScript 4.0\u0026rdquo;}\n::: ::: section\nDisable Solution Searching - disableSolutionSearching # When working with composite TypeScript projects, this option provides a way to declare that you do not want a project to be included when using features like find all references or jump to definition in an editor.\nThis flag is something you can use to increase responsiveness in large composite projects.\nReleased:\n3.8{aria-label=\u0026ldquo;Release notes for TypeScript 3.8\u0026rdquo;}\n::: ::: section\nDisable Source Project Reference Redirect - disableSourceOfProjectReferenceRedirect # When working with composite TypeScript projects, this option provides a way to go back to the pre-3.7 behavior where d.ts files were used to as the boundaries between modules. In 3.7 the source of truth is now your TypeScript files.\nReleased:\n3.7{aria-label=\u0026ldquo;Release notes for TypeScript 3.7\u0026rdquo;}\n::: ::: section\nIncremental - incremental # Tells TypeScript to save information about the project graph from the last compilation to files stored on disk. This creates a series of .tsbuildinfo files in the same folder as your compilation output. They are not used by your JavaScript at runtime and can be safely deleted. You can read more about the flag in the 3.4 release notes.\nTo control which folders you want to the files to be built to, use the config option tsBuildInfoFile.\nDefault:\ntrue if composite, false otherwise.\nRelated:\ncomposite{aria-label=\u0026ldquo;Jump to compiler option info for composite\u0026rdquo;}\ntsBuildInfoFile{aria-label=\u0026ldquo;Jump to compiler option info for tsBuildInfoFile\u0026rdquo;}\nReleased:\n3.4{aria-label=\u0026ldquo;Release notes for TypeScript 3.4\u0026rdquo;}\n::: ::: section\nTS Build Info File - tsBuildInfoFile # This setting lets you specify a file for storing incremental compilation information as a part of composite projects which enables faster building of larger TypeScript codebases. You can read more about composite projects in the handbook.\nBy default it is in the same folder as your emitted JavaScript and has a .tsbuildinfo file extension. The default file name is based on the outFile option or your tsconfig file name.\nDefault:\n.tsbuildinfo\nRelated:\nincremental{aria-label=\u0026ldquo;Jump to compiler option info for incremental\u0026rdquo;}\ncomposite{aria-label=\u0026ldquo;Jump to compiler option info for composite\u0026rdquo;}\nReleased:\n3.4{aria-label=\u0026ldquo;Release notes for TypeScript 3.4\u0026rdquo;}\n::: ::: category\nOutput Formatting # :::\n::: section\nNo Error Truncation - noErrorTruncation # Do not truncate error messages.\nWith false, the default.\nvar x: { propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; propertyWithAnExceedinglyLongName6: string; propertyWithAnExceedinglyLongName7: string; propertyWithAnExceedinglyLongName8: string; }; // String representation of type of \u0026#39;x\u0026#39; should be truncated in error message var s: string = x; With true\nvar x: { propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; propertyWithAnExceedinglyLongName6: string; propertyWithAnExceedinglyLongName7: string; propertyWithAnExceedinglyLongName8: string; }; // String representation of type of \u0026#39;x\u0026#39; should be truncated in error message var s: string = x; ::: ::: section\nPreserve Watch Output - preserveWatchOutput # Whether to keep outdated console output in watch mode instead of clearing the screen every time a change happened.\nInternal ::: ::: section\nPretty - pretty # Stylize errors and messages using color and context, this is on by default \u0026mdash; offers you a chance to have less terse, single colored messages from the compiler.\nDefault:\ntrue\n::: ::: category\nCompleteness # :::\n::: section\nSkip Default Lib Check - skipDefaultLibCheck # Use skipLibCheck instead. Skip type checking of default library declaration files.\n::: ::: section\nSkip Lib Check - skipLibCheck # Skip type checking of declaration files.\nThis can save time during compilation at the expense of type-system accuracy. For example, two libraries could define two copies of the same type in an inconsistent way. Rather than doing a full check of all d.ts files, TypeScript will type check the code you specifically refer to in your app\u0026rsquo;s source code.\nA common case where you might think to use skipLibCheck is when there are two copies of a library\u0026rsquo;s types in your node_modules. In these cases, you should consider using a feature like yarn\u0026rsquo;s resolutions to ensure there is only one copy of that dependency in your tree or investigate how to ensure there is only one copy by understanding the dependency resolution to fix the issue without additional tooling.\nAnother possibility is when you are migrating between TypeScript releases and the changes cause breakages in node_modules and the JS standard libraries which you do not want to deal with during the TypeScript update.\nNote, that if these issues come from the TypeScript standard library you can replace the library using TypeScript 4.5\u0026rsquo;s lib replacement technique.\nRecommended\nReleased:\n2.0{aria-label=\u0026ldquo;Release notes for TypeScript 2.0\u0026rdquo;}\n::: ::: category\nCommand Line # :::\n::: category\nWatch Options # TypeScript 3.8 shipped a new strategy for watching directories, which is crucial for efficiently picking up changes to node_modules.\nOn operating systems like Linux, TypeScript installs directory watchers (as opposed to file watchers) on node_modules and many of its subdirectories to detect changes in dependencies. This is because the number of available file watchers is often eclipsed by the number of files in node_modules, whereas there are way fewer directories to track.\nBecause every project might work better under different strategies, and this new approach might not work well for your workflows, TypeScript 3.8 introduces a new watchOptions field which allows users to tell the compiler/language service which watching strategies should be used to keep track of files and directories. :::\n::: section\nAssume Changes Only Affect Direct Dependencies - assumeChangesOnlyAffectDirectDependencies # When this option is enabled, TypeScript will avoid rechecking/rebuilding all truly possibly-affected files, and only recheck/rebuild files that have changed as well as files that directly import them.\nThis can be considered a \u0026lsquo;fast \u0026amp; loose\u0026rsquo; implementation of the watching algorithm, which can drastically reduce incremental rebuild times at the expense of having to run the full build occasionally to get all compiler error messages.\nReleased:\n3.8{aria-label=\u0026ldquo;Release notes for TypeScript 3.8\u0026rdquo;}\n::: Watch Options # You can configure the how TypeScript --watch works. This section is mainly for handling case where fs.watch and fs.watchFile have additional constraints like on Linux. You can read more at Configuring Watch.\n::: section\nWatch File - watchFile # The strategy for how individual files are watched.\nfixedPollingInterval: Check every file for changes several times a second at a fixed interval. priorityPollingInterval: Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others. dynamicPriorityPolling: Use a dynamic queue where less-frequently modified files will be checked less often. useFsEvents (the default): Attempt to use the operating system/file system\u0026rsquo;s native events for file changes. useFsEventsOnParentDirectory: Attempt to use the operating system/file system\u0026rsquo;s native events to listen for changes on a file\u0026rsquo;s parent directory Allowed:\nfixedpollinginterval\nprioritypollinginterval\ndynamicprioritypolling\nfixedchunksizepolling\nusefsevents\nusefseventsonparentdirectory\nReleased:\n3.8{aria-label=\u0026ldquo;Release notes for TypeScript 3.8\u0026rdquo;}\n::: ::: section\nWatch Directory - watchDirectory # The strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.\nfixedPollingInterval: Check every directory for changes several times a second at a fixed interval. dynamicPriorityPolling: Use a dynamic queue where less-frequently modified directories will be checked less often. useFsEvents (the default): Attempt to use the operating system/file system\u0026rsquo;s native events for directory changes. Allowed:\nusefsevents\nfixedpollinginterval\ndynamicprioritypolling\nfixedchunksizepolling\nReleased:\n3.8{aria-label=\u0026ldquo;Release notes for TypeScript 3.8\u0026rdquo;}\n::: ::: section\nFallback Polling - fallbackPolling # When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn\u0026rsquo;t support native file watchers.\nfixedPollingInterval: Check every file for changes several times a second at a fixed interval. priorityPollingInterval: Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others. dynamicPriorityPolling: Use a dynamic queue where less-frequently modified files will be checked less often. synchronousWatchDirectory: Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in node_modules from running npm install), but you might want to disable it with this flag for some less-common setups. Allowed:\nfixedinterval\npriorityinterval\ndynamicpriority\nfixedchunksize\nReleased:\n3.8{aria-label=\u0026ldquo;Release notes for TypeScript 3.8\u0026rdquo;}\n::: ::: section\nSynchronous Watch Directory - synchronousWatchDirectory # Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively. Instead of giving a small timeout to allow for potentially multiple edits to occur on a file.\n{ \u0026#34;watchOptions\u0026#34;: { \u0026#34;synchronousWatchDirectory\u0026#34;: true } } ::: ::: section\nExclude Directories - excludeDirectories # You can use excludeFiles to drastically reduce the number of files which are watched during --watch. This can be a useful way to reduce the number of open file which TypeScript tracks on Linux.\n{ \u0026#34;watchOptions\u0026#34;: { \u0026#34;excludeDirectories\u0026#34;: [\u0026#34;**/node_modules\u0026#34;, \u0026#34;_build\u0026#34;, \u0026#34;temp/*\u0026#34;] } } ::: ::: section\nExclude Files - excludeFiles # You can use excludeFiles to remove a set of specific files from the files which are watched.\n{ \u0026#34;watchOptions\u0026#34;: { \u0026#34;excludeFiles\u0026#34;: [\u0026#34;temp/file.ts\u0026#34;] } } ::: Type Acquisition # Type Acquisition is only important for JavaScript projects. In TypeScript projects you need to include the types in your projects explicitly. However, for JavaScript projects, the TypeScript tooling will download types for your modules in the background and outside of your node_modules folder.\n::: section\nEnable - enable # Disables automatic type acquisition in JavaScript projects:\n{ \u0026#34;typeAcquisition\u0026#34;: { \u0026#34;enable\u0026#34;: false } } ::: ::: section\nInclude - include # If you have a JavaScript project where TypeScript needs additional guidance to understand global dependencies, or have disabled the built-in inference via disableFilenameBasedTypeAcquisition.\nYou can use include to specify which types should be used from DefinitelyTyped:\n{ \u0026#34;typeAcquisition\u0026#34;: { \u0026#34;include\u0026#34;: [\u0026#34;jquery\u0026#34;] } } ::: ::: section\nExclude - exclude # Offers a config for disabling the type-acquisition for a certain module in JavaScript projects. This can be useful for projects which include other libraries in testing infrastructure which aren\u0026rsquo;t needed in the main application.\n{ \u0026#34;typeAcquisition\u0026#34;: { \u0026#34;exclude\u0026#34;: [\u0026#34;jest\u0026#34;, \u0026#34;mocha\u0026#34;] } } ::: ::: section\nDisable Filename Based Type Acquisition - disableFilenameBasedTypeAcquisition # TypeScript\u0026rsquo;s type acquisition can infer what types should be added based on filenames in a project. This means that having a file like jquery.js in your project would automatically download the types for JQuery from DefinitelyTyped.\nYou can disable this via disableFilenameBasedTypeAcquisition.\n{ \u0026#34;typeAcquisition\u0026#34;: { \u0026#34;disableFilenameBasedTypeAcquisition\u0026#34;: true } } Released:\n4.1{aria-label=\u0026ldquo;Release notes for TypeScript 4.1\u0026rdquo;}\n::: ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/tsconfig{._attribution-link} :::\n"},{"id":306,"href":"/docs/references/languages/typescript/type-checking-javascript-files/","title":"Type Checking Javascript Files","section":"Typescript","content":" Type Checking JavaScript Files # Here are some notable differences on how checking works in .js files compared to .ts files.\nProperties are inferred from assignments in class bodies # ES2015 does not have a means for declaring properties on classes. Properties are dynamically assigned, just like object literals.\nIn a .js file, the compiler infers properties from property assignments inside the class body. The type of a property is the type given in the constructor, unless it\u0026rsquo;s not defined there, or the type in the constructor is undefined or null. In that case, the type is the union of the types of all the right-hand values in these assignments. Properties defined in the constructor are always assumed to exist, whereas ones defined just in methods, getters, or setters are considered optional.\nclass C { constructor() { this.constructorOnly = 0; this.constructorUnknown = undefined; } method() { this.constructorOnly = false; this.constructorUnknown = \u0026#34;plunkbat\u0026#34;; // ok, constructorUnknown is string | undefined this.methodOnly = \u0026#34;ok\u0026#34;; // ok, but methodOnly could also be undefined } method2() { this.methodOnly = true; // also, ok, methodOnly\u0026#39;s type is string | boolean | undefined } } If properties are never set in the class body, they are considered unknown. If your class has properties that are only read from, add and then annotate a declaration in the constructor with JSDoc to specify the type. You don\u0026rsquo;t even have to give a value if it will be initialized later:\nclass C { constructor() { /** @type {number | undefined} */ this.prop = undefined; /** @type {number | undefined} */ this.count; } } let c = new C(); c.prop = 0; // OK c.count = \u0026#34;string\u0026#34;; Constructor functions are equivalent to classes # Before ES2015, JavaScript used constructor functions instead of classes. The compiler supports this pattern and understands constructor functions as equivalent to ES2015 classes. The property inference rules described above work exactly the same way.\nfunction C() { this.constructorOnly = 0; this.constructorUnknown = undefined; } C.prototype.method = function () { this.constructorOnly = false; this.constructorUnknown = \u0026#34;plunkbat\u0026#34;; // OK, the type is string | undefined }; CommonJS modules are supported # In a .js file, TypeScript understands the CommonJS module format. Assignments to exports and module.exports are recognized as export declarations. Similarly, require function calls are recognized as module imports. For example:\n// same as `import module \u0026#34;fs\u0026#34;` const fs = require(\u0026#34;fs\u0026#34;); // same as `export function readFile` module.exports.readFile = function (f) { return fs.readFileSync(f); }; The module support in JavaScript is much more syntactically forgiving than TypeScript\u0026rsquo;s module support. Most combinations of assignments and declarations are supported.\nClasses, functions, and object literals are namespaces # Classes are namespaces in .js files. This can be used to nest classes, for example:\nclass C {} C.D = class {}; And, for pre-ES2015 code, it can be used to simulate static methods:\nfunction Outer() { this.y = 2; } Outer.Inner = function () { this.yy = 2; }; Outer.Inner(); It can also be used to create simple namespaces:\nvar ns = {}; ns.C = class {}; ns.func = function () {}; ns; Other variants are allowed as well:\n// IIFE var ns = (function (n) { return n || {}; })(); ns.CONST = 1; // defaulting to global var assign = assign || function () { // code goes here }; assign.extra = 1; Object literals are open-ended # In a .ts file, an object literal that initializes a variable declaration gives its type to the declaration. No new members can be added that were not specified in the original literal. This rule is relaxed in a .js file; object literals have an open-ended type (an index signature) that allows adding and looking up properties that were not defined originally. For instance:\nvar obj = { a: 1 }; obj.b = 2; // Allowed Object literals behave as if they have an index signature [x:string]: any that allows them to be treated as open maps instead of closed objects.\nLike other special JS checking behaviors, this behavior can be changed by specifying a JSDoc type for the variable. For example:\n/** @type {{a: number}} */ var obj = { a: 1 }; obj.b = 2; null, undefined, and empty array initializers are of type any or any[] # Any variable, parameter or property that is initialized with null or undefined will have type any, even if strict null checks is turned on. Any variable, parameter or property that is initialized with [] will have type any[], even if strict null checks is turned on. The only exception is for properties that have multiple initializers as described above.\nfunction Foo(i = null) { if (!i) i = 1; var j = undefined; j = 2; this.l = []; } var foo = new Foo(); foo.l.push(foo.i); foo.l.push(\u0026#34;end\u0026#34;); Function parameters are optional by default # Since there is no way to specify optionality on parameters in pre-ES2015 JavaScript, all function parameters in .js file are considered optional. Calls with fewer arguments than the declared number of parameters are allowed.\nIt is important to note that it is an error to call a function with too many arguments.\nFor instance:\nfunction bar(a, b) { console.log(a + \u0026#34; \u0026#34; + b); } bar(1); // OK, second argument considered optional bar(1, 2); bar(1, 2, 3); // Error, too many arguments JSDoc annotated functions are excluded from this rule. Use JSDoc optional parameter syntax ([ ]) to express optionality. e.g.:\n/** * @param {string} [somebody] - Somebody\u0026#39;s name. */ function sayHello(somebody) { if (!somebody) { somebody = \u0026#34;John Doe\u0026#34;; } console.log(\u0026#34;Hello \u0026#34; + somebody); } sayHello(); Var-args parameter declaration inferred from use of arguments # A function whose body has a reference to the arguments reference is implicitly considered to have a var-arg parameter (i.e. (...arg: any[]) =\u0026gt; any). Use JSDoc var-arg syntax to specify the type of the arguments.\n/** @param {...number} args */ function sum(/* numbers */) { var total = 0; for (var i = 0; i \u0026lt; arguments.length; i++) { total += arguments[i]; } return total; } Unspecified type parameters default to any # Since there is no natural syntax for specifying generic type parameters in JavaScript, an unspecified type parameter defaults to any.\nIn extends clause # For instance, React.Component is defined to have two type parameters, Props and State. In a .js file, there is no legal way to specify these in the extends clause. By default the type arguments will be any:\nimport { Component } from \u0026#34;react\u0026#34;; class MyComponent extends Component { render() { this.props.b; // Allowed, since this.props is of type any } } Use JSDoc @augments to specify the types explicitly. for instance:\nimport { Component } from \u0026#34;react\u0026#34;; /** * @augments {Component\u0026lt;{a: number}, State\u0026gt;} */ class MyComponent extends Component { render() { this.props.b; // Error: b does not exist on {a:number} } } In JSDoc references # An unspecified type argument in JSDoc defaults to any:\n/** @type{Array} */ var x = []; x.push(1); // OK x.push(\u0026#34;string\u0026#34;); // OK, x is of type Array\u0026lt;any\u0026gt; /** @type{Array.\u0026lt;number\u0026gt;} */ var y = []; y.push(1); // OK y.push(\u0026#34;string\u0026#34;); // Error, string is not assignable to number In function calls # A call to a generic function uses the arguments to infer the type parameters. Sometimes this process fails to infer any types, mainly because of lack of inference sources; in these cases, the type parameters will default to any. For example:\nvar p = new Promise((resolve, reject) =\u0026gt; { reject(); }); p; // Promise\u0026lt;any\u0026gt;; To learn all of the features available in JSDoc, see the reference.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html{._attribution-link} :::\n"},{"id":307,"href":"/docs/references/languages/typescript/type-compatibility/","title":"Type Compatibility","section":"Typescript","content":" Type Compatibility # Type compatibility in TypeScript is based on structural subtyping. Structural typing is a way of relating types based solely on their members. This is in contrast with nominal typing. Consider the following code:\ninterface Pet { name: string; } class Dog { name: string; } let pet: Pet; // OK, because of structural typing pet = new Dog(); In nominally-typed languages like C# or Java, the equivalent code would be an error because the Dog class does not explicitly describe itself as being an implementer of the Pet interface.\nTypeScript\u0026rsquo;s structural type system was designed based on how JavaScript code is typically written. Because JavaScript widely uses anonymous objects like function expressions and object literals, it\u0026rsquo;s much more natural to represent the kinds of relationships found in JavaScript libraries with a structural type system instead of a nominal one.\nA Note on Soundness # TypeScript\u0026rsquo;s type system allows certain operations that can\u0026rsquo;t be known at compile-time to be safe. When a type system has this property, it is said to not be \u0026ldquo;sound\u0026rdquo;. The places where TypeScript allows unsound behavior were carefully considered, and throughout this document we\u0026rsquo;ll explain where these happen and the motivating scenarios behind them.\nStarting out # The basic rule for TypeScript\u0026rsquo;s structural type system is that x is compatible with y if y has at least the same members as x. For example consider the following code involving an interface named Pet which has a name property:\ninterface Pet { name: string; } let pet: Pet; // dog\u0026#39;s inferred type is { name: string; owner: string; } let dog = { name: \u0026#34;Lassie\u0026#34;, owner: \u0026#34;Rudd Weatherwax\u0026#34; }; pet = dog; To check whether dog can be assigned to pet, the compiler checks each property of pet to find a corresponding compatible property in dog. In this case, dog must have a member called name that is a string. It does, so the assignment is allowed.\nThe same rule for assignment is used when checking function call arguments:\ninterface Pet { name: string; } let dog = { name: \u0026#34;Lassie\u0026#34;, owner: \u0026#34;Rudd Weatherwax\u0026#34; }; function greet(pet: Pet) { console.log(\u0026#34;Hello, \u0026#34; + pet.name); } greet(dog); // OK Note that dog has an extra owner property, but this does not create an error. Only members of the target type (Pet in this case) are considered when checking for compatibility. This comparison process proceeds recursively, exploring the type of each member and sub-member.\nBe aware, however, that object literals may only specify known properties. For example, because we have explicitly specified that dog is of type Pet, the following code is invalid:\nlet dog: Pet = { name: \u0026#34;Lassie\u0026#34;, owner: \u0026#34;Rudd Weatherwax\u0026#34; }; // Error Comparing two functions # While comparing primitive types and object types is relatively straightforward, the question of what kinds of functions should be considered compatible is a bit more involved. Let\u0026rsquo;s start with a basic example of two functions that differ only in their parameter lists:\nlet x = (a: number) =\u0026gt; 0; let y = (b: number, s: string) =\u0026gt; 0; y = x; // OK x = y; // Error To check if x is assignable to y, we first look at the parameter list. Each parameter in x must have a corresponding parameter in y with a compatible type. Note that the names of the parameters are not considered, only their types. In this case, every parameter of x has a corresponding compatible parameter in y, so the assignment is allowed.\nThe second assignment is an error, because y has a required second parameter that x does not have, so the assignment is disallowed.\nYou may be wondering why we allow \u0026lsquo;discarding\u0026rsquo; parameters like in the example y = x. The reason for this assignment to be allowed is that ignoring extra function parameters is actually quite common in JavaScript. For example, Array#forEach provides three parameters to the callback function: the array element, its index, and the containing array. Nevertheless, it\u0026rsquo;s very useful to provide a callback that only uses the first parameter:\nlet items = [1, 2, 3]; // Don\u0026#39;t force these extra parameters items.forEach((item, index, array) =\u0026gt; console.log(item)); // Should be OK! items.forEach((item) =\u0026gt; console.log(item)); Now let\u0026rsquo;s look at how return types are treated, using two functions that differ only by their return type:\nlet x = () =\u0026gt; ({ name: \u0026#34;Alice\u0026#34; }); let y = () =\u0026gt; ({ name: \u0026#34;Alice\u0026#34;, location: \u0026#34;Seattle\u0026#34; }); x = y; // OK y = x; // Error, because x() lacks a location property The type system enforces that the source function\u0026rsquo;s return type be a subtype of the target type\u0026rsquo;s return type.\nFunction Parameter Bivariance # When comparing the types of function parameters, assignment succeeds if either the source parameter is assignable to the target parameter, or vice versa. This is unsound because a caller might end up being given a function that takes a more specialized type, but invokes the function with a less specialized type. In practice, this sort of error is rare, and allowing this enables many common JavaScript patterns. A brief example:\nenum EventType { Mouse, Keyboard, } interface Event { timestamp: number; } interface MyMouseEvent extends Event { x: number; y: number; } interface MyKeyEvent extends Event { keyCode: number; } function listenEvent(eventType: EventType, handler: (n: Event) =\u0026gt; void) { /* ... */ } // Unsound, but useful and common listenEvent(EventType.Mouse, (e: MyMouseEvent) =\u0026gt; console.log(e.x + \u0026#34;,\u0026#34; + e.y)); // Undesirable alternatives in presence of soundness listenEvent(EventType.Mouse, (e: Event) =\u0026gt; console.log((e as MyMouseEvent).x + \u0026#34;,\u0026#34; + (e as MyMouseEvent).y) ); listenEvent(EventType.Mouse, ((e: MyMouseEvent) =\u0026gt; console.log(e.x + \u0026#34;,\u0026#34; + e.y)) as (e: Event) =\u0026gt; void); // Still disallowed (clear error). Type safety enforced for wholly incompatible types listenEvent(EventType.Mouse, (e: number) =\u0026gt; console.log(e)); You can have TypeScript raise errors when this happens via the compiler flag strictFunctionTypes.\nOptional Parameters and Rest Parameters # When comparing functions for compatibility, optional and required parameters are interchangeable. Extra optional parameters of the source type are not an error, and optional parameters of the target type without corresponding parameters in the source type are not an error.\nWhen a function has a rest parameter, it is treated as if it were an infinite series of optional parameters.\nThis is unsound from a type system perspective, but from a runtime point of view the idea of an optional parameter is generally not well-enforced since passing undefined in that position is equivalent for most functions.\nThe motivating example is the common pattern of a function that takes a callback and invokes it with some predictable (to the programmer) but unknown (to the type system) number of arguments:\nfunction invokeLater(args: any[], callback: (...args: any[]) =\u0026gt; void) { /* ... Invoke callback with \u0026#39;args\u0026#39; ... */ } // Unsound - invokeLater \u0026#34;might\u0026#34; provide any number of arguments invokeLater([1, 2], (x, y) =\u0026gt; console.log(x + \u0026#34;, \u0026#34; + y)); // Confusing (x and y are actually required) and undiscoverable invokeLater([1, 2], (x?, y?) =\u0026gt; console.log(x + \u0026#34;, \u0026#34; + y)); Functions with overloads # When a function has overloads, each overload in the target type must be matched by a compatible signature on the source type. This ensures that the source function can be called in all the same cases as the target function.\nEnums # Enums are compatible with numbers, and numbers are compatible with enums. Enum values from different enum types are considered incompatible. For example,\nenum Status { Ready, Waiting, } enum Color { Red, Blue, Green, } let status = Status.Ready; status = Color.Green; // Error Classes # Classes work similarly to object literal types and interfaces with one exception: they have both a static and an instance type. When comparing two objects of a class type, only members of the instance are compared. Static members and constructors do not affect compatibility.\nclass Animal { feet: number; constructor(name: string, numFeet: number) {} } class Size { feet: number; constructor(numFeet: number) {} } let a: Animal; let s: Size; a = s; // OK s = a; // OK Private and protected members in classes # Private and protected members in a class affect their compatibility. When an instance of a class is checked for compatibility, if the target type contains a private member, then the source type must also contain a private member that originated from the same class. Likewise, the same applies for an instance with a protected member. This allows a class to be assignment compatible with its super class, but not with classes from a different inheritance hierarchy which otherwise have the same shape.\nGenerics # Because TypeScript is a structural type system, type parameters only affect the resulting type when consumed as part of the type of a member. For example,\ninterface Empty\u0026lt;T\u0026gt; {} let x: Empty\u0026lt;number\u0026gt;; let y: Empty\u0026lt;string\u0026gt;; x = y; // OK, because y matches structure of x In the above, x and y are compatible because their structures do not use the type argument in a differentiating way. Changing this example by adding a member to Empty\u0026lt;T\u0026gt; shows how this works:\ninterface NotEmpty\u0026lt;T\u0026gt; { data: T; } let x: NotEmpty\u0026lt;number\u0026gt;; let y: NotEmpty\u0026lt;string\u0026gt;; x = y; // Error, because x and y are not compatible In this way, a generic type that has its type arguments specified acts just like a non-generic type.\nFor generic types that do not have their type arguments specified, compatibility is checked by specifying any in place of all unspecified type arguments. The resulting types are then checked for compatibility, just as in the non-generic case.\nFor example,\nlet identity = function \u0026lt;T\u0026gt;(x: T): T { // ... }; let reverse = function \u0026lt;U\u0026gt;(y: U): U { // ... }; identity = reverse; // OK, because (x: any) =\u0026gt; any matches (y: any) =\u0026gt; any Advanced Topics # Subtype vs Assignment # So far, we\u0026rsquo;ve used \u0026ldquo;compatible\u0026rdquo;, which is not a term defined in the language spec. In TypeScript, there are two kinds of compatibility: subtype and assignment. These differ only in that assignment extends subtype compatibility with rules to allow assignment to and from any, and to and from enum with corresponding numeric values.\nDifferent places in the language use one of the two compatibility mechanisms, depending on the situation. For practical purposes, type compatibility is dictated by assignment compatibility, even in the cases of the implements and extends clauses.\nany, unknown, object, void, undefined, null, and never assignability # The following table summarizes assignability between some abstract types. Rows indicate what each is assignable to, columns indicate what is assignable to them. A \u0026ldquo;[✓]{.black-tick}\u0026rdquo; indicates a combination that is compatible only when strictNullChecks is off.\nany unknown object void undefined null never any → [✓]{.blue-tick style=\u0026quot; [✓]{.blue-tick} [✓]{.blue-tick} [✓]{.blue-tick} [✓]{.blue-tick} [✕]{.red-cross} color: #007aff; \u0026ldquo;} unknown → [✓]{.blue-tick} [✕]{.red-cross} [✕]{.red-cross} [✕]{.red-cross} [✕]{.red-cross} [✕]{.red-cross} object → [✓]{.blue-tick} [✓]{.blue-tick} [✕]{.red-cross} [✕]{.red-cross} [✕]{.red-cross} [✕]{.red-cross} void → [✓]{.blue-tick} [✓]{.blue-tick} [✕]{.red-cross} [✕]{.red-cross} [✕]{.red-cross} [✕]{.red-cross} undefined → [✓]{.blue-tick} [✓]{.blue-tick} [✓]{.black-tick} [✓]{.blue-tick} [✓]{.black-tick} [✕]{.red-cross} null → [✓]{.blue-tick} [✓]{.blue-tick} [✓]{.black-tick} [✓]{.black-tick} [✓]{.black-tick} [✕]{.red-cross} never → [✓]{.blue-tick} [✓]{.blue-tick} [✓]{.blue-tick} [✓]{.blue-tick} [✓]{.blue-tick} [✓]{.blue-tick}\nReiterating The Basics:\nEverything is assignable to itself. any and unknown are the same in terms of what is assignable to them, different in that unknown is not assignable to anything except any. unknown and never are like inverses of each other. Everything is assignable to unknown, never is assignable to everything. Nothing is assignable to never, unknown is not assignable to anything (except any). void is not assignable to or from anything, with the following exceptions: any, unknown, never, undefined, and null (if strictNullChecks is off, see table for details). When strictNullChecks is off, null and undefined are similar to never: assignable to most types, most types are not assignable to them. They are assignable to each other. When strictNullChecks is on, null and undefined behave more like void: not assignable to or from anything, except for any, unknown, never, and void (undefined is always assignable to void). ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/type-compatibility.html{._attribution-link} :::\n"},{"id":308,"href":"/docs/references/languages/typescript/type-inference/","title":"Type Inference","section":"Typescript","content":" Type Inference # In TypeScript, there are several places where type inference is used to provide type information when there is no explicit type annotation. For example, in this code\nlet x = 3; The type of the x variable is inferred to be number. This kind of inference takes place when initializing variables and members, setting parameter default values, and determining function return types.\nIn most cases, type inference is straightforward. In the following sections, we\u0026rsquo;ll explore some of the nuances in how types are inferred.\nBest common type # When a type inference is made from several expressions, the types of those expressions are used to calculate a \u0026ldquo;best common type\u0026rdquo;. For example,\nlet x = [0, 1, null]; To infer the type of x in the example above, we must consider the type of each array element. Here we are given two choices for the type of the array: number and null. The best common type algorithm considers each candidate type, and picks the type that is compatible with all the other candidates.\nBecause the best common type has to be chosen from the provided candidate types, there are some cases where types share a common structure, but no one type is the super type of all candidate types. For example:\nlet zoo = [new Rhino(), new Elephant(), new Snake()]; Ideally, we may want zoo to be inferred as an Animal[], but because there is no object that is strictly of type Animal in the array, we make no inference about the array element type. To correct this, instead explicitly provide the type when no one type is a super type of all other candidates:\nlet zoo: Animal[] = [new Rhino(), new Elephant(), new Snake()]; When no best common type is found, the resulting inference is the union array type, (Rhino | Elephant | Snake)[].\nContextual Typing # Type inference also works in \u0026ldquo;the other direction\u0026rdquo; in some cases in TypeScript. This is known as \u0026ldquo;contextual typing\u0026rdquo;. Contextual typing occurs when the type of an expression is implied by its location. For example:\nwindow.onmousedown = function (mouseEvent) { console.log(mouseEvent.button); console.log(mouseEvent.kangaroo); }; Here, the TypeScript type checker used the type of the Window.onmousedown function to infer the type of the function expression on the right hand side of the assignment. When it did so, it was able to infer the type of the mouseEvent parameter, which does contain a button property, but not a kangaroo property.\nThis works because window already has onmousedown declared in its type:\n// Declares there is a global variable called \u0026#39;window\u0026#39; declare var window: Window \u0026amp; typeof globalThis; // Which is declared as (simplified): interface Window extends GlobalEventHandlers { // ... } // Which defines a lot of known handler events interface GlobalEventHandlers { onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) =\u0026gt; any) | null; // ... } TypeScript is smart enough to infer types in other contexts as well:\nwindow.onscroll = function (uiEvent) { console.log(uiEvent.button); }; Based on the fact that the above function is being assigned to Window.onscroll, TypeScript knows that uiEvent is a UIEvent, and not a MouseEvent like the previous example. UIEvent objects contain no button property, and so TypeScript will throw an error.\nIf this function were not in a contextually typed position, the function\u0026rsquo;s argument would implicitly have type any, and no error would be issued (unless you are using the noImplicitAny option):\nconst handler = function (uiEvent) { console.log(uiEvent.button); // \u0026lt;- OK }; We can also explicitly give type information to the function\u0026rsquo;s argument to override any contextual type:\nwindow.onscroll = function (uiEvent: any) { console.log(uiEvent.button); // \u0026lt;- Now, no error is given }; However, this code will log undefined, since uiEvent has no property called button.\nContextual typing applies in many cases. Common cases include arguments to function calls, right hand sides of assignments, type assertions, members of object and array literals, and return statements. The contextual type also acts as a candidate type in best common type. For example:\nfunction createZoo(): Animal[] { return [new Rhino(), new Elephant(), new Snake()]; } In this example, best common type has a set of four candidates: Animal, Rhino, Elephant, and Snake. Of these, Animal can be chosen by the best common type algorithm.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/type-inference.html{._attribution-link} :::\n"},{"id":309,"href":"/docs/references/languages/typescript/typeof-types/","title":"Typeof Types","section":"Typescript","content":" Typeof Type Operator # The typeof type operator # JavaScript already has a typeof operator you can use in an expression context:\n// Prints \u0026#34;string\u0026#34; console.log(typeof \u0026#34;Hello world\u0026#34;); TypeScript adds a typeof operator you can use in a type context to refer to the type of a variable or property:\nlet s = \u0026#34;hello\u0026#34;; let n: typeof s; This isn\u0026rsquo;t very useful for basic types, but combined with other type operators, you can use typeof to conveniently express many patterns. For an example, let\u0026rsquo;s start by looking at the predefined type ReturnType\u0026lt;T\u0026gt;. It takes a function type and produces its return type:\ntype Predicate = (x: unknown) =\u0026gt; boolean; type K = ReturnType\u0026lt;Predicate\u0026gt;; If we try to use ReturnType on a function name, we see an instructive error:\nfunction f() { return { x: 10, y: 3 }; } type P = ReturnType\u0026lt;f\u0026gt;; Remember that values and types aren\u0026rsquo;t the same thing. To refer to the type that the value f has, we use typeof:\nfunction f() { return { x: 10, y: 3 }; } type P = ReturnType\u0026lt;typeof f\u0026gt;; Limitations # TypeScript intentionally limits the sorts of expressions you can use typeof on.\nSpecifically, it\u0026rsquo;s only legal to use typeof on identifiers (i.e. variable names) or their properties. This helps avoid the confusing trap of writing code you think is executing, but isn\u0026rsquo;t:\n// Meant to use = ReturnType\u0026lt;typeof msgbox\u0026gt; let shouldContinue: typeof msgbox(\u0026#34;Are you sure you want to continue?\u0026#34;); ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/typeof-types.html{._attribution-link} :::\n"},{"id":310,"href":"/docs/references/languages/typescript/types-from-types/","title":"Types From Types","section":"Typescript","content":" Creating Types from Types # TypeScript\u0026rsquo;s type system is very powerful because it allows expressing types in terms of other types.\nThe simplest form of this idea is generics. Additionally, we have a wide variety of type operators available to use. It\u0026rsquo;s also possible to express types in terms of values that we already have.\nBy combining various type operators, we can express complex operations and values in a succinct, maintainable way. In this section we\u0026rsquo;ll cover ways to express a new type in terms of an existing type or value.\nGenerics - Types which take parameters Keyof Type Operator - Using the keyof operator to create new types Typeof Type Operator - Using the typeof operator to create new types Indexed Access Types - Using Type['a'] syntax to access a subset of a type Conditional Types - Types which act like if statements in the type system Mapped Types - Creating types by mapping each property in an existing type Template Literal Types - Mapped types which change properties via template literal strings ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/2/types-from-types.html{._attribution-link} :::\n"},{"id":311,"href":"/docs/references/languages/typescript/typescript-from-scratch/","title":"Typescript From Scratch","section":"Typescript","content":" TypeScript for the New Programmer # Congratulations on choosing TypeScript as one of your first languages \u0026mdash; you\u0026rsquo;re already making good decisions!\nYou\u0026rsquo;ve probably already heard that TypeScript is a \u0026ldquo;flavor\u0026rdquo; or \u0026ldquo;variant\u0026rdquo; of JavaScript. The relationship between TypeScript (TS) and JavaScript (JS) is rather unique among modern programming languages, so learning more about this relationship will help you understand how TypeScript adds to JavaScript.\nWhat is JavaScript? A Brief History # JavaScript (also known as ECMAScript) started its life as a simple scripting language for browsers. At the time it was invented, it was expected to be used for short snippets of code embedded in a web page \u0026mdash; writing more than a few dozen lines of code would have been somewhat unusual. Due to this, early web browsers executed such code pretty slowly. Over time, though, JS became more and more popular, and web developers started using it to create interactive experiences.\nWeb browser developers responded to this increased JS usage by optimizing their execution engines (dynamic compilation) and extending what could be done with it (adding APIs), which in turn made web developers use it even more. On modern websites, your browser is frequently running applications that span hundreds of thousands of lines of code. This is the long and gradual growth of \u0026ldquo;the web\u0026rdquo;, starting as a simple network of static pages, and evolving into a platform for rich applications of all kinds.\nMore than this, JS has become popular enough to be used outside the context of browsers, such as implementing JS servers using node.js. The \u0026ldquo;run anywhere\u0026rdquo; nature of JS makes it an attractive choice for cross-platform development. There are many developers these days that use only JavaScript to program their entire stack!\nTo summarize, we have a language that was designed for quick uses, and then grew to a full-fledged tool to write applications with millions of lines. Every language has its own quirks \u0026mdash; oddities and surprises, and JavaScript\u0026rsquo;s humble beginning makes it have many of these. Some examples:\nJavaScript\u0026rsquo;s equality operator (==) coerces its operands, leading to unexpected behavior:\nif (\u0026#34;\u0026#34; == 0) { // It is! But why?? } if (1 \u0026lt; x \u0026lt; 3) { // True for *any* value of x! } JavaScript also allows accessing properties which aren\u0026rsquo;t present:\nconst obj = { width: 10, height: 15 }; // Why is this NaN? Spelling is hard! const area = obj.width * obj.heigth; Most programming languages would throw an error when these sorts of errors occur, some would do so during compilation \u0026mdash; before any code is running. When writing small programs, such quirks are annoying but manageable; when writing applications with hundreds or thousands of lines of code, these constant surprises are a serious problem.\nTypeScript: A Static Type Checker # We said earlier that some languages wouldn\u0026rsquo;t allow those buggy programs to run at all. Detecting errors in code without running it is referred to as static checking. Determining what\u0026rsquo;s an error and what\u0026rsquo;s not based on the kinds of values being operated on is known as static type checking.\nTypeScript checks a program for errors before execution, and does so based on the kinds of values, making it a static type checker. For example, the last example above has an error because of the type of obj. Here\u0026rsquo;s the error TypeScript found:\nconst obj = { width: 10, height: 15 }; const area = obj.width * obj.heigth; A Typed Superset of JavaScript # How does TypeScript relate to JavaScript, though?\nSyntax # TypeScript is a language that is a superset of JavaScript: JS syntax is therefore legal TS. Syntax refers to the way we write text to form a program. For example, this code has a syntax error because it\u0026rsquo;s missing a ):\nlet a = (4 TypeScript doesn\u0026rsquo;t consider any JavaScript code to be an error because of its syntax. This means you can take any working JavaScript code and put it in a TypeScript file without worrying about exactly how it is written.\nTypes # However, TypeScript is a typed superset, meaning that it adds rules about how different kinds of values can be used. The earlier error about obj.heigth was not a syntax error: it is an error of using some kind of value (a type) in an incorrect way.\nAs another example, this is JavaScript code that you can run in your browser, and it will log a value:\nconsole.log(4 / []); This syntactically-legal program logs Infinity. TypeScript, though, considers division of number by an array to be a nonsensical operation, and will issue an error:\nconsole.log(4 / []); It\u0026rsquo;s possible you really did intend to divide a number by an array, perhaps just to see what happens, but most of the time, though, this is a programming mistake. TypeScript\u0026rsquo;s type checker is designed to allow correct programs through while still catching as many common errors as possible. (Later, we\u0026rsquo;ll learn about settings you can use to configure how strictly TypeScript checks your code.)\nIf you move some code from a JavaScript file to a TypeScript file, you might see type errors depending on how the code is written. These may be legitimate problems with the code, or TypeScript being overly conservative. Throughout this guide we\u0026rsquo;ll demonstrate how to add various TypeScript syntax to eliminate such errors.\nRuntime Behavior # TypeScript is also a programming language that preserves the runtime behavior of JavaScript. For example, dividing by zero in JavaScript produces Infinity instead of throwing a runtime exception. As a principle, TypeScript never changes the runtime behavior of JavaScript code.\nThis means that if you move code from JavaScript to TypeScript, it is guaranteed to run the same way, even if TypeScript thinks that the code has type errors.\nKeeping the same runtime behavior as JavaScript is a foundational promise of TypeScript because it means you can easily transition between the two languages without worrying about subtle differences that might make your program stop working.\nErased Types # Roughly speaking, once TypeScript\u0026rsquo;s compiler is done with checking your code, it erases the types to produce the resulting \u0026ldquo;compiled\u0026rdquo; code. This means that once your code is compiled, the resulting plain JS code has no type information.\nThis also means that TypeScript never changes the behavior of your program based on the types it inferred. The bottom line is that while you might see type errors during compilation, the type system itself has no bearing on how your program works when it runs.\nFinally, TypeScript doesn\u0026rsquo;t provide any additional runtime libraries. Your programs will use the same standard library (or external libraries) as JavaScript programs, so there\u0026rsquo;s no additional TypeScript-specific framework to learn.\nLearning JavaScript and TypeScript # We frequently see the question \u0026ldquo;Should I learn JavaScript or TypeScript?\u0026rdquo;.\nThe answer is that you can\u0026rsquo;t learn TypeScript without learning JavaScript! TypeScript shares syntax and runtime behavior with JavaScript, so anything you learn about JavaScript is helping you learn TypeScript at the same time.\nThere are many, many resources available for programmers to learn JavaScript; you should not ignore these resources if you\u0026rsquo;re writing TypeScript. For example, there are about 20 times more StackOverflow questions tagged javascript than typescript, but all of the javascript questions also apply to TypeScript.\nIf you find yourself searching for something like \u0026ldquo;how to sort a list in TypeScript\u0026rdquo;, remember: TypeScript is JavaScript\u0026rsquo;s runtime with a compile-time type checker. The way you sort a list in TypeScript is the same way you do so in JavaScript. If you find a resource that uses TypeScript directly, that\u0026rsquo;s great too, but don\u0026rsquo;t limit yourself to thinking you need TypeScript-specific answers for everyday questions about how to accomplish runtime tasks.\nNext Steps # This was a brief overview of the syntax and tools used in everyday TypeScript. From here, you can:\nLearn some of the JavaScript fundamentals, we recommend either:\nMicrosoft\u0026rsquo;s JavaScript Resources or JavaScript guide at the Mozilla Web Docs Continue to TypeScript for JavaScript Programmers\nRead the full Handbook from start to finish\nExplore the Playground examples\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/typescript-from-scratch.html{._attribution-link} :::\n"},{"id":312,"href":"/docs/references/languages/typescript/typescript-in-5-minutes-func/","title":"Typescript in 5 Minutes Func","section":"Typescript","content":" TypeScript for Functional Programmers # TypeScript began its life as an attempt to bring traditional object-oriented types to JavaScript so that the programmers at Microsoft could bring traditional object-oriented programs to the web. As it has developed, TypeScript\u0026rsquo;s type system has evolved to model code written by native JavaScripters. The resulting system is powerful, interesting and messy.\nThis introduction is designed for working Haskell or ML programmers who want to learn TypeScript. It describes how the type system of TypeScript differs from Haskell\u0026rsquo;s type system. It also describes unique features of TypeScript\u0026rsquo;s type system that arise from its modelling of JavaScript code.\nThis introduction does not cover object-oriented programming. In practice, object-oriented programs in TypeScript are similar to those in other popular languages with OO features.\nPrerequisites # In this introduction, I assume you know the following:\nHow to program in JavaScript, the good parts. Type syntax of a C-descended language. If you need to learn the good parts of JavaScript, read JavaScript: The Good Parts. You may be able to skip the book if you know how to write programs in a call-by-value lexically scoped language with lots of mutability and not much else. R^4^RS Scheme is a good example.\nThe C++ Programming Language is a good place to learn about C-style type syntax. Unlike C++, TypeScript uses postfix types, like so: x: string instead of string x.\nConcepts not in Haskell # Built-in types # JavaScript defines 8 built-in types:\nType Explanation\nNumber a double-precision IEEE 754 floating point. String an immutable UTF-16 string. BigInt integers in the arbitrary precision format. Boolean true and false. Symbol a unique value usually used as a key. Null equivalent to the unit type. Undefined also equivalent to the unit type. Object similar to records.\nSee the MDN page for more detail.\nTypeScript has corresponding primitive types for the built-in types:\nnumber string bigint boolean symbol null undefined object Other important TypeScript types # Type Explanation\nunknown the top type. never the bottom type. object literal eg { property: Type } void for functions with no documented return value T[] mutable arrays, also written Array\u0026lt;T\u0026gt; [T, T] tuples, which are fixed-length but mutable (t: T) =\u0026gt; U functions\nNotes:\nFunction syntax includes parameter names. This is pretty hard to get used to!\nlet fst: (a: any, b: any) =\u0026gt; any = (a, b) =\u0026gt; a; // or more precisely: let fst: \u0026lt;T, U\u0026gt;(a: T, b: U) =\u0026gt; T = (a, b) =\u0026gt; a; Object literal type syntax closely mirrors object literal value syntax:\nlet o: { n: number; xs: object[] } = { n: 1, xs: [] }; [T, T] is a subtype of T[]. This is different than Haskell, where tuples are not related to lists.\nBoxed types # JavaScript has boxed equivalents of primitive types that contain the methods that programmers associate with those types. TypeScript reflects this with, for example, the difference between the primitive type number and the boxed type Number. The boxed types are rarely needed, since their methods return primitives.\n(1).toExponential(); // equivalent to Number.prototype.toExponential.call(1); Note that calling a method on a numeric literal requires it to be in parentheses to aid the parser.\nGradual typing # TypeScript uses the type any whenever it can\u0026rsquo;t tell what the type of an expression should be. Compared to Dynamic, calling any a type is an overstatement. It just turns off the type checker wherever it appears. For example, you can push any value into an any[] without marking the value in any way:\n// with \u0026#34;noImplicitAny\u0026#34;: false in tsconfig.json, anys: any[] const anys = []; anys.push(1); anys.push(\u0026#34;oh no\u0026#34;); anys.push({ anything: \u0026#34;goes\u0026#34; }); And you can use an expression of type any anywhere:\nanys.map(anys[1]); // oh no, \u0026#34;oh no\u0026#34; is not a function any is contagious, too \u0026mdash; if you initialize a variable with an expression of type any, the variable has type any too.\nlet sepsis = anys[0] + anys[1]; // this could mean anything To get an error when TypeScript produces an any, use \u0026quot;noImplicitAny\u0026quot;: true, or \u0026quot;strict\u0026quot;: true in tsconfig.json.\nStructural typing # Structural typing is a familiar concept to most functional programmers, although Haskell and most MLs are not structurally typed. Its basic form is pretty simple:\n// @strict: false let o = { x: \u0026#34;hi\u0026#34;, extra: 1 }; // ok let o2: { x: string } = o; // ok Here, the object literal { x: \u0026quot;hi\u0026quot;, extra: 1 } has a matching literal type { x: string, extra: number }. That type is assignable to { x: string } since it has all the required properties and those properties have assignable types. The extra property doesn\u0026rsquo;t prevent assignment, it just makes it a subtype of { x: string }.\nNamed types just give a name to a type; for assignability purposes there\u0026rsquo;s no difference between the type alias One and the interface type Two below. They both have a property p: string. (Type aliases behave differently from interfaces with respect to recursive definitions and type parameters, however.)\ntype One = { p: string }; interface Two { p: string; } class Three { p = \u0026#34;Hello\u0026#34;; } let x: One = { p: \u0026#34;hi\u0026#34; }; let two: Two = x; two = new Three(); Unions # In TypeScript, union types are untagged. In other words, they are not discriminated unions like data in Haskell. However, you can often discriminate types in a union using built-in tags or other properties.\nfunction start( arg: string | string[] | (() =\u0026gt; string) | { s: string } ): string { // this is super common in JavaScript if (typeof arg === \u0026#34;string\u0026#34;) { return commonCase(arg); } else if (Array.isArray(arg)) { return arg.map(commonCase).join(\u0026#34;,\u0026#34;); } else if (typeof arg === \u0026#34;function\u0026#34;) { return commonCase(arg()); } else { return commonCase(arg.s); } function commonCase(s: string): string { // finally, just convert a string to another string return s; } } string, Array and Function have built-in type predicates, conveniently leaving the object type for the else branch. It is possible, however, to generate unions that are difficult to differentiate at runtime. For new code, it\u0026rsquo;s best to build only discriminated unions.\nThe following types have built-in predicates:\nType Predicate\nstring typeof s === \u0026quot;string\u0026quot; number typeof n === \u0026quot;number\u0026quot; bigint typeof m === \u0026quot;bigint\u0026quot; boolean typeof b === \u0026quot;boolean\u0026quot; symbol typeof g === \u0026quot;symbol\u0026quot; undefined typeof undefined === \u0026quot;undefined\u0026quot; function typeof f === \u0026quot;function\u0026quot; array Array.isArray(a) object typeof o === \u0026quot;object\u0026quot;\nNote that functions and arrays are objects at runtime, but have their own predicates.\nIntersections # In addition to unions, TypeScript also has intersections:\ntype Combined = { a: number } \u0026amp; { b: string }; type Conflicting = { a: number } \u0026amp; { a: string }; Combined has two properties, a and b, just as if they had been written as one object literal type. Intersection and union are recursive in case of conflicts, so Conflicting.a: number \u0026amp; string.\nUnit types # Unit types are subtypes of primitive types that contain exactly one primitive value. For example, the string \u0026quot;foo\u0026quot; has the type \u0026quot;foo\u0026quot;. Since JavaScript has no built-in enums, it is common to use a set of well-known strings instead. Unions of string literal types allow TypeScript to type this pattern:\ndeclare function pad(s: string, n: number, direction: \u0026#34;left\u0026#34; | \u0026#34;right\u0026#34;): string; pad(\u0026#34;hi\u0026#34;, 10, \u0026#34;left\u0026#34;); When needed, the compiler widens \u0026mdash; converts to a supertype \u0026mdash; the unit type to the primitive type, such as \u0026quot;foo\u0026quot; to string. This happens when using mutability, which can hamper some uses of mutable variables:\nlet s = \u0026#34;right\u0026#34;; pad(\u0026#34;hi\u0026#34;, 10, s); // error: \u0026#39;string\u0026#39; is not assignable to \u0026#39;\u0026#34;left\u0026#34; | \u0026#34;right\u0026#34;\u0026#39; Here\u0026rsquo;s how the error happens:\n\u0026quot;right\u0026quot;: \u0026quot;right\u0026quot; s: string because \u0026quot;right\u0026quot; widens to string on assignment to a mutable variable. string is not assignable to \u0026quot;left\u0026quot; | \u0026quot;right\u0026quot; You can work around this with a type annotation for s, but that in turn prevents assignments to s of variables that are not of type \u0026quot;left\u0026quot; | \u0026quot;right\u0026quot;.\nlet s: \u0026#34;left\u0026#34; | \u0026#34;right\u0026#34; = \u0026#34;right\u0026#34;; pad(\u0026#34;hi\u0026#34;, 10, s); Concepts similar to Haskell # Contextual typing # TypeScript has some obvious places where it can infer types, like variable declarations:\nlet s = \u0026#34;I\u0026#39;m a string!\u0026#34;; But it also infers types in a few other places that you may not expect if you\u0026rsquo;ve worked with other C-syntax languages:\ndeclare function map\u0026lt;T, U\u0026gt;(f: (t: T) =\u0026gt; U, ts: T[]): U[]; let sns = map((n) =\u0026gt; n.toString(), [1, 2, 3]); Here, n: number in this example also, despite the fact that T and U have not been inferred before the call. In fact, after [1,2,3] has been used to infer T=number, the return type of n =\u0026gt; n.toString() is used to infer U=string, causing sns to have the type string[].\nNote that inference will work in any order, but intellisense will only work left-to-right, so TypeScript prefers to declare map with the array first:\ndeclare function map\u0026lt;T, U\u0026gt;(ts: T[], f: (t: T) =\u0026gt; U): U[]; Contextual typing also works recursively through object literals, and on unit types that would otherwise be inferred as string or number. And it can infer return types from context:\ndeclare function run\u0026lt;T\u0026gt;(thunk: (t: T) =\u0026gt; void): T; let i: { inference: string } = run((o) =\u0026gt; { o.inference = \u0026#34;INSERT STATE HERE\u0026#34;; }); The type of o is determined to be { inference: string } because\nDeclaration initializers are contextually typed by the declaration\u0026rsquo;s type: { inference: string }. The return type of a call uses the contextual type for inferences, so the compiler infers that T={ inference: string }. Arrow functions use the contextual type to type their parameters, so the compiler gives o: { inference: string }. And it does so while you are typing, so that after typing o., you get completions for the property inference, along with any other properties you\u0026rsquo;d have in a real program. Altogether, this feature can make TypeScript\u0026rsquo;s inference look a bit like a unifying type inference engine, but it is not.\nType aliases # Type aliases are mere aliases, just like type in Haskell. The compiler will attempt to use the alias name wherever it was used in the source code, but does not always succeed.\ntype Size = [number, number]; let x: Size = [101.1, 999.9]; The closest equivalent to newtype is a tagged intersection:\ntype FString = string \u0026amp; { __compileTimeOnly: any }; An FString is just like a normal string, except that the compiler thinks it has a property named __compileTimeOnly that doesn\u0026rsquo;t actually exist. This means that FString can still be assigned to string, but not the other way round.\nDiscriminated Unions # The closest equivalent to data is a union of types with discriminant properties, normally called discriminated unions in TypeScript:\ntype Shape = | { kind: \u0026#34;circle\u0026#34;; radius: number } | { kind: \u0026#34;square\u0026#34;; x: number } | { kind: \u0026#34;triangle\u0026#34;; x: number; y: number }; Unlike Haskell, the tag, or discriminant, is just a property in each object type. Each variant has an identical property with a different unit type. This is still a normal union type; the leading | is an optional part of the union type syntax. You can discriminate the members of the union using normal JavaScript code:\ntype Shape = | { kind: \u0026#34;circle\u0026#34;; radius: number } | { kind: \u0026#34;square\u0026#34;; x: number } | { kind: \u0026#34;triangle\u0026#34;; x: number; y: number }; function area(s: Shape) { if (s.kind === \u0026#34;circle\u0026#34;) { return Math.PI * s.radius * s.radius; } else if (s.kind === \u0026#34;square\u0026#34;) { return s.x * s.x; } else { return (s.x * s.y) / 2; } } Note that the return type of area is inferred to be number because TypeScript knows the function is total. If some variant is not covered, the return type of area will be number | undefined instead.\nAlso, unlike Haskell, common properties show up in any union, so you can usefully discriminate multiple members of the union:\nfunction height(s: Shape) { if (s.kind === \u0026#34;circle\u0026#34;) { return 2 * s.radius; } else { // s.kind: \u0026#34;square\u0026#34; | \u0026#34;triangle\u0026#34; return s.x; } } Type Parameters # Like most C-descended languages, TypeScript requires declaration of type parameters:\nfunction liftArray\u0026lt;T\u0026gt;(t: T): Array\u0026lt;T\u0026gt; { return [t]; } There is no case requirement, but type parameters are conventionally single uppercase letters. Type parameters can also be constrained to a type, which behaves a bit like type class constraints:\nfunction firstish\u0026lt;T extends { length: number }\u0026gt;(t1: T, t2: T): T { return t1.length \u0026gt; t2.length ? t1 : t2; } TypeScript can usually infer type arguments from a call based on the type of the arguments, so type arguments are usually not needed.\nBecause TypeScript is structural, it doesn\u0026rsquo;t need type parameters as much as nominal systems. Specifically, they are not needed to make a function polymorphic. Type parameters should only be used to propagate type information, such as constraining parameters to be the same type:\nfunction length\u0026lt;T extends ArrayLike\u0026lt;unknown\u0026gt;\u0026gt;(t: T): number {} function length(t: ArrayLike\u0026lt;unknown\u0026gt;): number {} In the first length, T is not necessary; notice that it\u0026rsquo;s only referenced once, so it\u0026rsquo;s not being used to constrain the type of the return value or other parameters.\nHigher-kinded types # TypeScript does not have higher kinded types, so the following is not legal:\nfunction length\u0026lt;T extends ArrayLike\u0026lt;unknown\u0026gt;, U\u0026gt;(m: T\u0026lt;U\u0026gt;) {} Point-free programming # Point-free programming \u0026mdash; heavy use of currying and function composition \u0026mdash; is possible in JavaScript, but can be verbose. In TypeScript, type inference often fails for point-free programs, so you\u0026rsquo;ll end up specifying type parameters instead of value parameters. The result is so verbose that it\u0026rsquo;s usually better to avoid point-free programming.\nModule system # JavaScript\u0026rsquo;s modern module syntax is a bit like Haskell\u0026rsquo;s, except that any file with import or export is implicitly a module:\nimport { value, Type } from \u0026#34;npm-package\u0026#34;; import { other, Types } from \u0026#34;./local-package\u0026#34;; import * as prefix from \u0026#34;../lib/third-package\u0026#34;; You can also import commonjs modules \u0026mdash; modules written using node.js' module system:\nimport f = require(\u0026#34;single-function-package\u0026#34;); You can export with an export list:\nexport { f }; function f() { return g(); } function g() {} // g is not exported Or by marking each export individually:\nexport function f() { return g() } function g() { } The latter style is more common but both are allowed, even in the same file.\nreadonly and const # In JavaScript, mutability is the default, although it allows variable declarations with const to declare that the reference is immutable. The referent is still mutable:\nconst a = [1, 2, 3]; a.push(102); // ): a[0] = 101; // D: TypeScript additionally has a readonly modifier for properties.\ninterface Rx { readonly x: number; } let rx: Rx = { x: 1 }; rx.x = 12; // error It also ships with a mapped type Readonly\u0026lt;T\u0026gt; that makes all properties readonly:\ninterface X { x: number; } let rx: Readonly\u0026lt;X\u0026gt; = { x: 1 }; rx.x = 12; // error And it has a specific ReadonlyArray\u0026lt;T\u0026gt; type that removes side-affecting methods and prevents writing to indices of the array, as well as special syntax for this type:\nlet a: ReadonlyArray\u0026lt;number\u0026gt; = [1, 2, 3]; let b: readonly number[] = [1, 2, 3]; a.push(102); // error b[0] = 101; // error You can also use a const-assertion, which operates on arrays and object literals:\nlet a = [1, 2, 3] as const; a.push(102); // error a[0] = 101; // error However, none of these options are the default, so they are not consistently used in TypeScript code.\nNext Steps # This doc is a high level overview of the syntax and types you would use in everyday code. From here you should:\nRead the full Handbook from start to finish Explore the Playground examples ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.html{._attribution-link} :::\n"},{"id":313,"href":"/docs/references/languages/typescript/typescript-in-5-minutes-oop/","title":"Typescript in 5 Minutes Oop","section":"Typescript","content":" TypeScript for Java/C# Programmers # TypeScript is a popular choice for programmers accustomed to other languages with static typing, such as C# and Java.\nTypeScript\u0026rsquo;s type system offers many of the same benefits, such as better code completion, earlier detection of errors, and clearer communication between parts of your program. While TypeScript provides many familiar features for these developers, it\u0026rsquo;s worth stepping back to see how JavaScript (and therefore TypeScript) differ from traditional OOP languages. Understanding these differences will help you write better JavaScript code, and avoid common pitfalls that programmers who go straight from C#/Java to TypeScript may fall in to.\nCo-learning JavaScript # If you\u0026rsquo;re familiar with JavaScript already but are primarily a Java or C# programmer, this introductory page can help explain some of the common misconceptions and pitfalls you might be susceptible to. Some of the ways that TypeScript models types are quite different from Java or C#, and it\u0026rsquo;s important to keep these in mind when learning TypeScript.\nIf you\u0026rsquo;re a Java or C# programmer that is new to JavaScript in general, we recommend learning a little bit of JavaScript without types first to understand JavaScript\u0026rsquo;s runtime behaviors. Because TypeScript doesn\u0026rsquo;t change how your code runs, you\u0026rsquo;ll still have to learn how JavaScript works in order to write code that actually does something!\nIt\u0026rsquo;s important to remember that TypeScript uses the same runtime as JavaScript, so any resources about how to accomplish specific runtime behavior (converting a string to a number, displaying an alert, writing a file to disk, etc.) will always apply equally well to TypeScript programs. Don\u0026rsquo;t limit yourself to TypeScript-specific resources!\nRethinking the Class # C# and Java are what we might call mandatory OOP languages. In these languages, the class is the basic unit of code organization, and also the basic container of all data and behavior at runtime. Forcing all functionality and data to be held in classes can be a good domain model for some problems, but not every domain needs to be represented this way.\nFree Functions and Data # In JavaScript, functions can live anywhere, and data can be passed around freely without being inside a pre-defined class or struct. This flexibility is extremely powerful. \u0026ldquo;Free\u0026rdquo; functions (those not associated with a class) working over data without an implied OOP hierarchy tends to be the preferred model for writing programs in JavaScript.\nStatic Classes # Additionally, certain constructs from C# and Java such as singletons and static classes are unnecessary in TypeScript.\nOOP in TypeScript # That said, you can still use classes if you like! Some problems are well-suited to being solved by a traditional OOP hierarchy, and TypeScript\u0026rsquo;s support for JavaScript classes will make these models even more powerful. TypeScript supports many common patterns such as implementing interfaces, inheritance, and static methods.\nWe\u0026rsquo;ll cover classes later in this guide.\nRethinking Types # TypeScript\u0026rsquo;s understanding of a type is actually quite different from C# or Java\u0026rsquo;s. Let\u0026rsquo;s explore some differences.\nNominal Reified Type Systems # In C# or Java, any given value or object has one exact type - either null, a primitive, or a known class type. We can call methods like value.GetType() or value.getClass() to query the exact type at runtime. The definition of this type will reside in a class somewhere with some name, and we can\u0026rsquo;t use two classes with similar shapes in lieu of each other unless there\u0026rsquo;s an explicit inheritance relationship or commonly-implemented interface.\nThese aspects describe a reified, nominal type system. The types we wrote in the code are present at runtime, and the types are related via their declarations, not their structures.\nTypes as Sets # In C# or Java, it\u0026rsquo;s meaningful to think of a one-to-one correspondence between runtime types and their compile-time declarations.\nIn TypeScript, it\u0026rsquo;s better to think of a type as a set of values that share something in common. Because types are just sets, a particular value can belong to many sets at the same time.\nOnce you start thinking of types as sets, certain operations become very natural. For example, in C#, it\u0026rsquo;s awkward to pass around a value that is either a string or int, because there isn\u0026rsquo;t a single type that represents this sort of value.\nIn TypeScript, this becomes very natural once you realize that every type is just a set. How do you describe a value that either belongs in the string set or the number set? It simply belongs to the union of those sets: string | number.\nTypeScript provides a number of mechanisms to work with types in a set-theoretic way, and you\u0026rsquo;ll find them more intuitive if you think of types as sets.\nErased Structural Types # In TypeScript, objects are not of a single exact type. For example, if we construct an object that satisfies an interface, we can use that object where that interface is expected even though there was no declarative relationship between the two.\ninterface Pointlike { x: number; y: number; } interface Named { name: string; } function logPoint(point: Pointlike) { console.log(\u0026#34;x = \u0026#34; + point.x + \u0026#34;, y = \u0026#34; + point.y); } function logName(x: Named) { console.log(\u0026#34;Hello, \u0026#34; + x.name); } const obj = { x: 0, y: 0, name: \u0026#34;Origin\u0026#34;, }; logPoint(obj); logName(obj); TypeScript\u0026rsquo;s type system is structural, not nominal: We can use obj as a Pointlike because it has x and y properties that are both numbers. The relationships between types are determined by the properties they contain, not whether they were declared with some particular relationship.\nTypeScript\u0026rsquo;s type system is also not reified: There\u0026rsquo;s nothing at runtime that will tell us that obj is Pointlike. In fact, the Pointlike type is not present in any form at runtime.\nGoing back to the idea of types as sets, we can think of obj as being a member of both the Pointlike set of values and the Named set of values.\nConsequences of Structural Typing # OOP programmers are often surprised by two particular aspects of structural typing.\nEmpty Types # The first is that the empty type seems to defy expectation:\nclass Empty {} function fn(arg: Empty) { // do something? } // No error, but this isn\u0026#39;t an \u0026#39;Empty\u0026#39; ? fn({ k: 10 }); TypeScript determines if the call to fn here is valid by seeing if the provided argument is a valid Empty. It does so by examining the structure of { k: 10 } and class Empty { }. We can see that { k: 10 } has all of the properties that Empty does, because Empty has no properties. Therefore, this is a valid call!\nThis may seem surprising, but it\u0026rsquo;s ultimately a very similar relationship to one enforced in nominal OOP languages. A subclass cannot remove a property of its base class, because doing so would destroy the natural subtype relationship between the derived class and its base. Structural type systems simply identify this relationship implicitly by describing subtypes in terms of having properties of compatible types.\nIdentical Types # Another frequent source of surprise comes with identical types:\nclass Car { drive() { // hit the gas } } class Golfer { drive() { // hit the ball far } } // No error? let w: Car = new Golfer(); Again, this isn\u0026rsquo;t an error because the structures of these classes are the same. While this may seem like a potential source of confusion, in practice, identical classes that shouldn\u0026rsquo;t be related are not common.\nWe\u0026rsquo;ll learn more about how classes relate to each other in the Classes chapter.\nReflection # OOP programmers are accustomed to being able to query the type of any value, even a generic one:\n// C# static void LogType\u0026lt;T\u0026gt;() { Console.WriteLine(typeof(T).Name); } Because TypeScript\u0026rsquo;s type system is fully erased, information about e.g. the instantiation of a generic type parameter is not available at runtime.\nJavaScript does have some limited primitives like typeof and instanceof, but remember that these operators are still working on the values as they exist in the type-erased output code. For example, typeof (new Car()) will be \u0026quot;object\u0026quot;, not Car or \u0026quot;Car\u0026quot;.\nNext Steps # This was a brief overview of the syntax and tools used in everyday TypeScript. From here, you can:\nRead the full Handbook from start to finish Explore the Playground examples ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-oop.html{._attribution-link} :::\n"},{"id":314,"href":"/docs/references/languages/typescript/typescript-in-5-minutes/","title":"Typescript in 5 Minutes","section":"Typescript","content":" TypeScript for JavaScript Programmers # TypeScript stands in an unusual relationship to JavaScript. TypeScript offers all of JavaScript\u0026rsquo;s features, and an additional layer on top of these: TypeScript\u0026rsquo;s type system.\nFor example, JavaScript provides language primitives like string and number, but it doesn\u0026rsquo;t check that you\u0026rsquo;ve consistently assigned these. TypeScript does.\nThis means that your existing working JavaScript code is also TypeScript code. The main benefit of TypeScript is that it can highlight unexpected behavior in your code, lowering the chance of bugs.\nThis tutorial provides a brief overview of TypeScript, focusing on its type system.\nTypes by Inference # TypeScript knows the JavaScript language and will generate types for you in many cases. For example in creating a variable and assigning it to a particular value, TypeScript will use the value as its type.\nlet helloWorld = \u0026#34;Hello World\u0026#34;; By understanding how JavaScript works, TypeScript can build a type-system that accepts JavaScript code but has types. This offers a type-system without needing to add extra characters to make types explicit in your code. That\u0026rsquo;s how TypeScript knows that helloWorld is a string in the above example.\nYou may have written JavaScript in Visual Studio Code, and had editor auto-completion. Visual Studio Code uses TypeScript under the hood to make it easier to work with JavaScript.\nDefining Types # You can use a wide variety of design patterns in JavaScript. However, some design patterns make it difficult for types to be inferred automatically (for example, patterns that use dynamic programming). To cover these cases, TypeScript supports an extension of the JavaScript language, which offers places for you to tell TypeScript what the types should be.\nFor example, to create an object with an inferred type which includes name: string and id: number, you can write:\nconst user = { name: \u0026#34;Hayes\u0026#34;, id: 0, }; You can explicitly describe this object\u0026rsquo;s shape using an interface declaration:\ninterface User { name: string; id: number; } You can then declare that a JavaScript object conforms to the shape of your new interface by using syntax like : TypeName after a variable declaration:\nconst user: User = { name: \u0026#34;Hayes\u0026#34;, id: 0, }; If you provide an object that doesn\u0026rsquo;t match the interface you have provided, TypeScript will warn you:\ninterface User { name: string; id: number; } const user: User = { username: \u0026#34;Hayes\u0026#34;, id: 0, }; Since JavaScript supports classes and object-oriented programming, so does TypeScript. You can use an interface declaration with classes:\ninterface User { name: string; id: number; } class UserAccount { name: string; id: number; constructor(name: string, id: number) { this.name = name; this.id = id; } } const user: User = new UserAccount(\u0026#34;Murphy\u0026#34;, 1); You can use interfaces to annotate parameters and return values to functions:\nfunction deleteUser(user: User) { // ... } function getAdminUser(): User { //... } There is already a small set of primitive types available in JavaScript: boolean, bigint, null, number, string, symbol, and undefined, which you can use in an interface. TypeScript extends this list with a few more, such as any (allow anything), unknown (ensure someone using this type declares what the type is), never (it\u0026rsquo;s not possible that this type could happen), and void (a function which returns undefined or has no return value).\nYou\u0026rsquo;ll see that there are two syntaxes for building types: Interfaces and Types. You should prefer interface. Use type when you need specific features.\nComposing Types # With TypeScript, you can create complex types by combining simple ones. There are two popular ways to do so: with unions, and with generics.\nUnions # With a union, you can declare that a type could be one of many types. For example, you can describe a boolean type as being either true or false:\ntype MyBool = true | false; Note: If you hover over MyBool above, you\u0026rsquo;ll see that it is classed as boolean. That\u0026rsquo;s a property of the Structural Type System. More on this below.\nA popular use-case for union types is to describe the set of string or number literals that a value is allowed to be:\ntype WindowStates = \u0026#34;open\u0026#34; | \u0026#34;closed\u0026#34; | \u0026#34;minimized\u0026#34;; type LockStates = \u0026#34;locked\u0026#34; | \u0026#34;unlocked\u0026#34;; type PositiveOddNumbersUnderTen = 1 | 3 | 5 | 7 | 9; Unions provide a way to handle different types too. For example, you may have a function that takes an array or a string:\nfunction getLength(obj: string | string[]) { return obj.length; } To learn the type of a variable, use typeof:\nType Predicate\nstring typeof s === \u0026quot;string\u0026quot; number typeof n === \u0026quot;number\u0026quot; boolean typeof b === \u0026quot;boolean\u0026quot; undefined typeof undefined === \u0026quot;undefined\u0026quot; function typeof f === \u0026quot;function\u0026quot; array Array.isArray(a)\nFor example, you can make a function return different values depending on whether it is passed a string or an array:\nfunction wrapInArray(obj: string | string[]) { if (typeof obj === \u0026#34;string\u0026#34;) { return [obj]; } return obj; } Generics # Generics provide variables to types. A common example is an array. An array without generics could contain anything. An array with generics can describe the values that the array contains.\ntype StringArray = Array\u0026lt;string\u0026gt;; type NumberArray = Array\u0026lt;number\u0026gt;; type ObjectWithNameArray = Array\u0026lt;{ name: string }\u0026gt;; You can declare your own types that use generics:\ninterface Backpack\u0026lt;Type\u0026gt; { add: (obj: Type) =\u0026gt; void; get: () =\u0026gt; Type; } // This line is a shortcut to tell TypeScript there is a // constant called `backpack`, and to not worry about where it came from. declare const backpack: Backpack\u0026lt;string\u0026gt;; // object is a string, because we declared it above as the variable part of Backpack. const object = backpack.get(); // Since the backpack variable is a string, you can\u0026#39;t pass a number to the add function. backpack.add(23); Structural Type System # One of TypeScript\u0026rsquo;s core principles is that type checking focuses on the shape that values have. This is sometimes called \u0026ldquo;duck typing\u0026rdquo; or \u0026ldquo;structural typing\u0026rdquo;.\nIn a structural type system, if two objects have the same shape, they are considered to be of the same type.\ninterface Point { x: number; y: number; } function logPoint(p: Point) { console.log(`${p.x}, ${p.y}`); } // logs \u0026#34;12, 26\u0026#34; const point = { x: 12, y: 26 }; logPoint(point); The point variable is never declared to be a Point type. However, TypeScript compares the shape of point to the shape of Point in the type-check. They have the same shape, so the code passes.\nThe shape-matching only requires a subset of the object\u0026rsquo;s fields to match.\nconst point3 = { x: 12, y: 26, z: 89 }; logPoint(point3); // logs \u0026#34;12, 26\u0026#34; const rect = { x: 33, y: 3, width: 30, height: 80 }; logPoint(rect); // logs \u0026#34;33, 3\u0026#34; const color = { hex: \u0026#34;#187ABF\u0026#34; }; logPoint(color); There is no difference between how classes and objects conform to shapes:\nclass VirtualPoint { x: number; y: number; constructor(x: number, y: number) { this.x = x; this.y = y; } } const newVPoint = new VirtualPoint(13, 56); logPoint(newVPoint); // logs \u0026#34;13, 56\u0026#34; If the object or class has all the required properties, TypeScript will say they match, regardless of the implementation details.\nNext Steps # This was a brief overview of the syntax and tools used in everyday TypeScript. From here, you can:\nRead the full Handbook from start to finish Explore the Playground examples ::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html{._attribution-link} :::\n"},{"id":315,"href":"/docs/references/languages/typescript/typescript-tooling-in-5-minutes/","title":"Typescript Tooling in 5 Minutes","section":"Typescript","content":" TypeScript Tooling in 5 minutes # Let\u0026rsquo;s get started by building a simple web application with TypeScript.\nInstalling TypeScript # There are two main ways to add TypeScript to your project:\nVia npm (the Node.js package manager) By installing TypeScript\u0026rsquo;s Visual Studio plugins Visual Studio 2017 and Visual Studio 2015 Update 3 include TypeScript language support by default but does not include the TypeScript compiler, tsc. If you didn\u0026rsquo;t install TypeScript with Visual Studio, you can still download it.\nFor npm users:\n\u0026gt; npm install -g typescript Building your first TypeScript file # In your editor, type the following JavaScript code in greeter.ts:\nfunction greeter(person) { return \u0026#34;Hello, \u0026#34; + person; } let user = \u0026#34;Jane User\u0026#34;; document.body.textContent = greeter(user); Compiling your code # We used a .ts extension, but this code is just JavaScript. You could have copy/pasted this straight out of an existing JavaScript app.\nAt the command line, run the TypeScript compiler:\ntsc greeter.ts The result will be a file greeter.js which contains the same JavaScript that you fed in. We\u0026rsquo;re up and running using TypeScript in our JavaScript app!\nNow we can start taking advantage of some of the new tools TypeScript offers. Add a : string type annotation to the \u0026lsquo;person\u0026rsquo; function argument as shown here:\nfunction greeter(person: string) { return \u0026#34;Hello, \u0026#34; + person; } let user = \u0026#34;Jane User\u0026#34;; document.body.textContent = greeter(user); Type annotations # Type annotations in TypeScript are lightweight ways to record the intended contract of the function or variable. In this case, we intend the greeter function to be called with a single string parameter. We can try changing the call greeter to pass an array instead:\nfunction greeter(person: string) { return \u0026#34;Hello, \u0026#34; + person; } let user = [0, 1, 2]; document.body.textContent = greeter(user); Re-compiling, you\u0026rsquo;ll now see an error:\nerror TS2345: Argument of type \u0026#39;number[]\u0026#39; is not assignable to parameter of type \u0026#39;string\u0026#39;. Similarly, try removing all the arguments to the greeter call. TypeScript will let you know that you have called this function with an unexpected number of parameters. In both cases, TypeScript can offer static analysis based on both the structure of your code, and the type annotations you provide.\nNotice that although there were errors, the greeter.js file is still created. You can use TypeScript even if there are errors in your code. But in this case, TypeScript is warning that your code will likely not run as expected.\nInterfaces # Let\u0026rsquo;s develop our sample further. Here we use an interface that describes objects that have a firstName and lastName field. In TypeScript, two types are compatible if their internal structure is compatible. This allows us to implement an interface just by having the shape the interface requires, without an explicit implements clause.\ninterface Person { firstName: string; lastName: string; } function greeter(person: Person) { return \u0026#34;Hello, \u0026#34; + person.firstName + \u0026#34; \u0026#34; + person.lastName; } let user = { firstName: \u0026#34;Jane\u0026#34;, lastName: \u0026#34;User\u0026#34; }; document.body.textContent = greeter(user); Classes # Finally, let\u0026rsquo;s extend the example one last time with classes. TypeScript supports new features in JavaScript, like support for class-based object-oriented programming.\nHere we\u0026rsquo;re going to create a Student class with a constructor and a few public fields. Notice that classes and interfaces play well together, letting the programmer decide on the right level of abstraction.\nAlso of note, the use of public on arguments to the constructor is a shorthand that allows us to automatically create properties with that name.\nclass Student { fullName: string; constructor( public firstName: string, public middleInitial: string, public lastName: string ) { this.fullName = firstName + \u0026#34; \u0026#34; + middleInitial + \u0026#34; \u0026#34; + lastName; } } interface Person { firstName: string; lastName: string; } function greeter(person: Person) { return \u0026#34;Hello, \u0026#34; + person.firstName + \u0026#34; \u0026#34; + person.lastName; } let user = new Student(\u0026#34;Jane\u0026#34;, \u0026#34;M.\u0026#34;, \u0026#34;User\u0026#34;); document.body.textContent = greeter(user); Re-run tsc greeter.ts and you\u0026rsquo;ll see the generated JavaScript is the same as the earlier code. Classes in TypeScript are just a shorthand for the same prototype-based OO that is frequently used in JavaScript.\nRunning your TypeScript web app # Now type the following in greeter.html:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;TypeScript Greeter\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026#34;greeter.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Open greeter.html in the browser to run your first simple TypeScript web application!\nOptional: Open greeter.ts in Visual Studio, or copy the code into the TypeScript playground. You can hover over identifiers to see their types. Notice that in some cases these types are inferred automatically for you. Re-type the last line, and see completion lists and parameter help based on the types of the DOM elements. Put your cursor on the reference to the greeter function, and hit F12 to go to its definition. Notice, too, that you can right-click on a symbol and use refactoring to rename it.\nThe type information provided works together with the tools to work with JavaScript at application scale. For more examples of what\u0026rsquo;s possible in TypeScript, see the Samples section of the website.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/typescript-tooling-in-5-minutes.html{._attribution-link} :::\n"},{"id":316,"href":"/docs/references/languages/typescript/utility-types/","title":"Utility Types","section":"Typescript","content":" Utility Types # TypeScript provides several utility types to facilitate common type transformations. These utilities are available globally.\nAwaited\u0026lt;Type\u0026gt; # Released: 4.5\nThis type is meant to model operations like await in async functions, or the .then() method on Promises - specifically, the way that they recursively unwrap Promises.\nExample # type A = Awaited\u0026lt;Promise\u0026lt;string\u0026gt;\u0026gt;; type B = Awaited\u0026lt;Promise\u0026lt;Promise\u0026lt;number\u0026gt;\u0026gt;\u0026gt;; type C = Awaited\u0026lt;boolean | Promise\u0026lt;number\u0026gt;\u0026gt;; Partial\u0026lt;Type\u0026gt; # Released:\n2.1\nConstructs a type with all properties of Type set to optional. This utility will return a type that represents all subsets of a given type.\nExample # interface Todo { title: string; description: string; } function updateTodo(todo: Todo, fieldsToUpdate: Partial\u0026lt;Todo\u0026gt;) { return { ...todo, ...fieldsToUpdate }; } const todo1 = { title: \u0026#34;organize desk\u0026#34;, description: \u0026#34;clear clutter\u0026#34;, }; const todo2 = updateTodo(todo1, { description: \u0026#34;throw out trash\u0026#34;, }); Required\u0026lt;Type\u0026gt; # Released:\n2.8\nConstructs a type consisting of all properties of Type set to required. The opposite of Partial.\nExample # interface Props { a?: number; b?: string; } const obj: Props = { a: 5 }; const obj2: Required\u0026lt;Props\u0026gt; = { a: 5 }; Readonly\u0026lt;Type\u0026gt; # Released:\n2.1\nConstructs a type with all properties of Type set to readonly, meaning the properties of the constructed type cannot be reassigned.\nExample # interface Todo { title: string; } const todo: Readonly\u0026lt;Todo\u0026gt; = { title: \u0026#34;Delete inactive users\u0026#34;, }; todo.title = \u0026#34;Hello\u0026#34;; This utility is useful for representing assignment expressions that will fail at runtime (i.e. when attempting to reassign properties of a frozen object).\nObject.freeze # function freeze\u0026lt;Type\u0026gt;(obj: Type): Readonly\u0026lt;Type\u0026gt;; Record\u0026lt;Keys, Type\u0026gt; # Released:\n2.1\nConstructs an object type whose property keys are Keys and whose property values are Type. This utility can be used to map the properties of a type to another type.\nExample # interface CatInfo { age: number; breed: string; } type CatName = \u0026#34;miffy\u0026#34; | \u0026#34;boris\u0026#34; | \u0026#34;mordred\u0026#34;; const cats: Record\u0026lt;CatName, CatInfo\u0026gt; = { miffy: { age: 10, breed: \u0026#34;Persian\u0026#34; }, boris: { age: 5, breed: \u0026#34;Maine Coon\u0026#34; }, mordred: { age: 16, breed: \u0026#34;British Shorthair\u0026#34; }, }; cats.boris; Pick\u0026lt;Type, Keys\u0026gt; # Released:\n2.1\nConstructs a type by picking the set of properties Keys (string literal or union of string literals) from Type.\nExample # interface Todo { title: string; description: string; completed: boolean; } type TodoPreview = Pick\u0026lt;Todo, \u0026#34;title\u0026#34; | \u0026#34;completed\u0026#34;\u0026gt;; const todo: TodoPreview = { title: \u0026#34;Clean room\u0026#34;, completed: false, }; todo; Omit\u0026lt;Type, Keys\u0026gt; # Released:\n3.5\nConstructs a type by picking all properties from Type and then removing Keys (string literal or union of string literals). The opposite of Pick.\nExample # interface Todo { title: string; description: string; completed: boolean; createdAt: number; } type TodoPreview = Omit\u0026lt;Todo, \u0026#34;description\u0026#34;\u0026gt;; const todo: TodoPreview = { title: \u0026#34;Clean room\u0026#34;, completed: false, createdAt: 1615544252770, }; todo; type TodoInfo = Omit\u0026lt;Todo, \u0026#34;completed\u0026#34; | \u0026#34;createdAt\u0026#34;\u0026gt;; const todoInfo: TodoInfo = { title: \u0026#34;Pick up kids\u0026#34;, description: \u0026#34;Kindergarten closes at 5pm\u0026#34;, }; todoInfo; Exclude\u0026lt;UnionType, ExcludedMembers\u0026gt; # Released:\n2.8\nConstructs a type by excluding from UnionType all union members that are assignable to ExcludedMembers.\nExample # type T0 = Exclude\u0026lt;\u0026#34;a\u0026#34; | \u0026#34;b\u0026#34; | \u0026#34;c\u0026#34;, \u0026#34;a\u0026#34;\u0026gt;; type T1 = Exclude\u0026lt;\u0026#34;a\u0026#34; | \u0026#34;b\u0026#34; | \u0026#34;c\u0026#34;, \u0026#34;a\u0026#34; | \u0026#34;b\u0026#34;\u0026gt;; type T2 = Exclude\u0026lt;string | number | (() =\u0026gt; void), Function\u0026gt;; type Shape = | { kind: \u0026#34;circle\u0026#34;; radius: number } | { kind: \u0026#34;square\u0026#34;; x: number } | { kind: \u0026#34;triangle\u0026#34;; x: number; y: number }; type T3 = Exclude\u0026lt;Shape, { kind: \u0026#34;circle\u0026#34; }\u0026gt; Extract\u0026lt;Type, Union\u0026gt; # Released:\n2.8\nConstructs a type by extracting from Type all union members that are assignable to Union.\nExample # type T0 = Extract\u0026lt;\u0026#34;a\u0026#34; | \u0026#34;b\u0026#34; | \u0026#34;c\u0026#34;, \u0026#34;a\u0026#34; | \u0026#34;f\u0026#34;\u0026gt;; type T1 = Extract\u0026lt;string | number | (() =\u0026gt; void), Function\u0026gt;; type Shape = | { kind: \u0026#34;circle\u0026#34;; radius: number } | { kind: \u0026#34;square\u0026#34;; x: number } | { kind: \u0026#34;triangle\u0026#34;; x: number; y: number }; type T2 = Extract\u0026lt;Shape, { kind: \u0026#34;circle\u0026#34; }\u0026gt; NonNullable\u0026lt;Type\u0026gt; # Released:\n2.8\nConstructs a type by excluding null and undefined from Type.\nExample # type T0 = NonNullable\u0026lt;string | number | undefined\u0026gt;; type T1 = NonNullable\u0026lt;string[] | null | undefined\u0026gt;; Parameters\u0026lt;Type\u0026gt; # Released:\n3.1\nConstructs a tuple type from the types used in the parameters of a function type Type.\nExample # declare function f1(arg: { a: number; b: string }): void; type T0 = Parameters\u0026lt;() =\u0026gt; string\u0026gt;; type T1 = Parameters\u0026lt;(s: string) =\u0026gt; void\u0026gt;; type T2 = Parameters\u0026lt;\u0026lt;T\u0026gt;(arg: T) =\u0026gt; T\u0026gt;; type T3 = Parameters\u0026lt;typeof f1\u0026gt;; type T4 = Parameters\u0026lt;any\u0026gt;; type T5 = Parameters\u0026lt;never\u0026gt;; type T6 = Parameters\u0026lt;string\u0026gt;; type T7 = Parameters\u0026lt;Function\u0026gt;; ConstructorParameters\u0026lt;Type\u0026gt; # Released:\n3.1\nConstructs a tuple or array type from the types of a constructor function type. It produces a tuple type with all the parameter types (or the type never if Type is not a function).\nExample # type T0 = ConstructorParameters\u0026lt;ErrorConstructor\u0026gt;; type T1 = ConstructorParameters\u0026lt;FunctionConstructor\u0026gt;; type T2 = ConstructorParameters\u0026lt;RegExpConstructor\u0026gt;; class C { constructor(a: number, b: string) {} } type T3 = ConstructorParameters\u0026lt;typeof C\u0026gt;; type T4 = ConstructorParameters\u0026lt;any\u0026gt;; type T5 = ConstructorParameters\u0026lt;Function\u0026gt;; ReturnType\u0026lt;Type\u0026gt; # Released:\n2.8\nConstructs a type consisting of the return type of function Type.\nExample # declare function f1(): { a: number; b: string }; type T0 = ReturnType\u0026lt;() =\u0026gt; string\u0026gt;; type T1 = ReturnType\u0026lt;(s: string) =\u0026gt; void\u0026gt;; type T2 = ReturnType\u0026lt;\u0026lt;T\u0026gt;() =\u0026gt; T\u0026gt;; type T3 = ReturnType\u0026lt;\u0026lt;T extends U, U extends number[]\u0026gt;() =\u0026gt; T\u0026gt;; type T4 = ReturnType\u0026lt;typeof f1\u0026gt;; type T5 = ReturnType\u0026lt;any\u0026gt;; type T6 = ReturnType\u0026lt;never\u0026gt;; type T7 = ReturnType\u0026lt;string\u0026gt;; type T8 = ReturnType\u0026lt;Function\u0026gt;; InstanceType\u0026lt;Type\u0026gt; # Released:\n2.8\nConstructs a type consisting of the instance type of a constructor function in Type.\nExample # class C { x = 0; y = 0; } type T0 = InstanceType\u0026lt;typeof C\u0026gt;; type T1 = InstanceType\u0026lt;any\u0026gt;; type T2 = InstanceType\u0026lt;never\u0026gt;; type T3 = InstanceType\u0026lt;string\u0026gt;; type T4 = InstanceType\u0026lt;Function\u0026gt;; ThisParameterType\u0026lt;Type\u0026gt; # Released:\n3.3\nExtracts the type of the this parameter for a function type, or unknown if the function type has no this parameter.\nExample # function toHex(this: Number) { return this.toString(16); } function numberToString(n: ThisParameterType\u0026lt;typeof toHex\u0026gt;) { return toHex.apply(n); } OmitThisParameter\u0026lt;Type\u0026gt; # Released:\n3.3\nRemoves the this parameter from Type. If Type has no explicitly declared this parameter, the result is simply Type. Otherwise, a new function type with no this parameter is created from Type. Generics are erased and only the last overload signature is propagated into the new function type.\nExample # function toHex(this: Number) { return this.toString(16); } const fiveToHex: OmitThisParameter\u0026lt;typeof toHex\u0026gt; = toHex.bind(5); console.log(fiveToHex()); ThisType\u0026lt;Type\u0026gt; # Released:\n2.3\nThis utility does not return a transformed type. Instead, it serves as a marker for a contextual this type. Note that the noImplicitThis flag must be enabled to use this utility.\nExample # type ObjectDescriptor\u0026lt;D, M\u0026gt; = { data?: D; methods?: M \u0026amp; ThisType\u0026lt;D \u0026amp; M\u0026gt;; // Type of \u0026#39;this\u0026#39; in methods is D \u0026amp; M }; function makeObject\u0026lt;D, M\u0026gt;(desc: ObjectDescriptor\u0026lt;D, M\u0026gt;): D \u0026amp; M { let data: object = desc.data || {}; let methods: object = desc.methods || {}; return { ...data, ...methods } as D \u0026amp; M; } let obj = makeObject({ data: { x: 0, y: 0 }, methods: { moveBy(dx: number, dy: number) { this.x += dx; // Strongly typed this this.y += dy; // Strongly typed this }, }, }); obj.x = 10; obj.y = 20; obj.moveBy(5, 5); In the example above, the methods object in the argument to makeObject has a contextual type that includes ThisType\u0026lt;D \u0026amp; M\u0026gt; and therefore the type of this in methods within the methods object is { x: number, y: number } \u0026amp; { moveBy(dx: number, dy: number): void }. Notice how the type of the methods property simultaneously is an inference target and a source for the this type in methods.\nThe ThisType\u0026lt;T\u0026gt; marker interface is simply an empty interface declared in lib.d.ts. Beyond being recognized in the contextual type of an object literal, the interface acts like any empty interface.\nIntrinsic String Manipulation Types # Uppercase\u0026lt;StringType\u0026gt; # Lowercase\u0026lt;StringType\u0026gt; # Capitalize\u0026lt;StringType\u0026gt; # Uncapitalize\u0026lt;StringType\u0026gt; # To help with string manipulation around template string literals, TypeScript includes a set of types which can be used in string manipulation within the type system. You can find those in the Template Literal Types documentation.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/utility-types.html{._attribution-link} :::\n"},{"id":317,"href":"/docs/references/languages/typescript/variable-declarations/","title":"Variable Declarations","section":"Typescript","content":" Variable Declaration # let and const are two relatively new concepts for variable declarations in JavaScript. As we mentioned earlier, let is similar to var in some respects, but allows users to avoid some of the common \u0026ldquo;gotchas\u0026rdquo; that users run into in JavaScript.\nconst is an augmentation of let in that it prevents re-assignment to a variable.\nWith TypeScript being an extension of JavaScript, the language naturally supports let and const. Here we\u0026rsquo;ll elaborate more on these new declarations and why they\u0026rsquo;re preferable to var.\nIf you\u0026rsquo;ve used JavaScript offhandedly, the next section might be a good way to refresh your memory. If you\u0026rsquo;re intimately familiar with all the quirks of var declarations in JavaScript, you might find it easier to skip ahead.\nvar declarations # Declaring a variable in JavaScript has always traditionally been done with the var keyword.\nvar a = 10; As you might\u0026rsquo;ve figured out, we just declared a variable named a with the value 10.\nWe can also declare a variable inside of a function:\nfunction f() { var message = \u0026#34;Hello, world!\u0026#34;; return message; } and we can also access those same variables within other functions:\nfunction f() { var a = 10; return function g() { var b = a + 1; return b; }; } var g = f(); g(); // returns \u0026#39;11\u0026#39; In this above example, g captured the variable a declared in f. At any point that g gets called, the value of a will be tied to the value of a in f. Even if g is called once f is done running, it will be able to access and modify a.\nfunction f() { var a = 1; a = 2; var b = g(); a = 3; return b; function g() { return a; } } f(); // returns \u0026#39;2\u0026#39; Scoping rules # var declarations have some odd scoping rules for those used to other languages. Take the following example:\nfunction f(shouldInitialize: boolean) { if (shouldInitialize) { var x = 10; } return x; } f(true); // returns \u0026#39;10\u0026#39; f(false); // returns \u0026#39;undefined\u0026#39; Some readers might do a double-take at this example. The variable x was declared within the if block, and yet we were able to access it from outside that block. That\u0026rsquo;s because var declarations are accessible anywhere within their containing function, module, namespace, or global scope - all which we\u0026rsquo;ll go over later on - regardless of the containing block. Some people call this var-scoping or function-scoping. Parameters are also function scoped.\nThese scoping rules can cause several types of mistakes. One problem they exacerbate is the fact that it is not an error to declare the same variable multiple times:\nfunction sumMatrix(matrix: number[][]) { var sum = 0; for (var i = 0; i \u0026lt; matrix.length; i++) { var currentRow = matrix[i]; for (var i = 0; i \u0026lt; currentRow.length; i++) { sum += currentRow[i]; } } return sum; } Maybe it was easy to spot out for some experienced JavaScript developers, but the inner for-loop will accidentally overwrite the variable i because i refers to the same function-scoped variable. As experienced developers know by now, similar sorts of bugs slip through code reviews and can be an endless source of frustration.\nVariable capturing quirks # Take a quick second to guess what the output of the following snippet is:\nfor (var i = 0; i \u0026lt; 10; i++) { setTimeout(function () { console.log(i); }, 100 * i); } For those unfamiliar, setTimeout will try to execute a function after a certain number of milliseconds (though waiting for anything else to stop running).\nReady? Take a look:\n10 10 10 10 10 10 10 10 10 10 Many JavaScript developers are intimately familiar with this behavior, but if you\u0026rsquo;re surprised, you\u0026rsquo;re certainly not alone. Most people expect the output to be\n0 1 2 3 4 5 6 7 8 9 Remember what we mentioned earlier about variable capturing? Every function expression we pass to setTimeout actually refers to the same i from the same scope.\nLet\u0026rsquo;s take a minute to consider what that means. setTimeout will run a function after some number of milliseconds, but only after the for loop has stopped executing; By the time the for loop has stopped executing, the value of i is 10. So each time the given function gets called, it will print out 10!\nA common work around is to use an IIFE - an Immediately Invoked Function Expression - to capture i at each iteration:\nfor (var i = 0; i \u0026lt; 10; i++) { // capture the current state of \u0026#39;i\u0026#39; // by invoking a function with its current value (function (i) { setTimeout(function () { console.log(i); }, 100 * i); })(i); } This odd-looking pattern is actually pretty common. The i in the parameter list actually shadows the i declared in the for loop, but since we named them the same, we didn\u0026rsquo;t have to modify the loop body too much.\nlet declarations # By now you\u0026rsquo;ve figured out that var has some problems, which is precisely why let statements were introduced. Apart from the keyword used, let statements are written the same way var statements are.\nlet hello = \u0026#34;Hello!\u0026#34;; The key difference is not in the syntax, but in the semantics, which we\u0026rsquo;ll now dive into.\nBlock-scoping # When a variable is declared using let, it uses what some call lexical-scoping or block-scoping. Unlike variables declared with var whose scopes leak out to their containing function, block-scoped variables are not visible outside of their nearest containing block or for-loop.\nfunction f(input: boolean) { let a = 100; if (input) { // Still okay to reference \u0026#39;a\u0026#39; let b = a + 1; return b; } // Error: \u0026#39;b\u0026#39; doesn\u0026#39;t exist here return b; } Here, we have two local variables a and b. a\u0026rsquo;s scope is limited to the body of f while b\u0026rsquo;s scope is limited to the containing if statement\u0026rsquo;s block.\nVariables declared in a catch clause also have similar scoping rules.\ntry { throw \u0026#34;oh no!\u0026#34;; } catch (e) { console.log(\u0026#34;Oh well.\u0026#34;); } // Error: \u0026#39;e\u0026#39; doesn\u0026#39;t exist here console.log(e); Another property of block-scoped variables is that they can\u0026rsquo;t be read or written to before they\u0026rsquo;re actually declared. While these variables are \u0026ldquo;present\u0026rdquo; throughout their scope, all points up until their declaration are part of their temporal dead zone. This is just a sophisticated way of saying you can\u0026rsquo;t access them before the let statement, and luckily TypeScript will let you know that.\na++; // illegal to use \u0026#39;a\u0026#39; before it\u0026#39;s declared; let a; Something to note is that you can still capture a block-scoped variable before it\u0026rsquo;s declared. The only catch is that it\u0026rsquo;s illegal to call that function before the declaration. If targeting ES2015, a modern runtime will throw an error; however, right now TypeScript is permissive and won\u0026rsquo;t report this as an error.\nfunction foo() { // okay to capture \u0026#39;a\u0026#39; return a; } // illegal call \u0026#39;foo\u0026#39; before \u0026#39;a\u0026#39; is declared // runtimes should throw an error here foo(); let a; For more information on temporal dead zones, see relevant content on the Mozilla Developer Network.\nRe-declarations and Shadowing # With var declarations, we mentioned that it didn\u0026rsquo;t matter how many times you declared your variables; you just got one.\nfunction f(x) { var x; var x; if (true) { var x; } } In the above example, all declarations of x actually refer to the same x, and this is perfectly valid. This often ends up being a source of bugs. Thankfully, let declarations are not as forgiving.\nlet x = 10; let x = 20; // error: can\u0026#39;t re-declare \u0026#39;x\u0026#39; in the same scope The variables don\u0026rsquo;t necessarily need to both be block-scoped for TypeScript to tell us that there\u0026rsquo;s a problem.\nfunction f(x) { let x = 100; // error: interferes with parameter declaration } function g() { let x = 100; var x = 100; // error: can\u0026#39;t have both declarations of \u0026#39;x\u0026#39; } That\u0026rsquo;s not to say that a block-scoped variable can never be declared with a function-scoped variable. The block-scoped variable just needs to be declared within a distinctly different block.\nfunction f(condition, x) { if (condition) { let x = 100; return x; } return x; } f(false, 0); // returns \u0026#39;0\u0026#39; f(true, 0); // returns \u0026#39;100\u0026#39; The act of introducing a new name in a more nested scope is called shadowing. It is a bit of a double-edged sword in that it can introduce certain bugs on its own in the event of accidental shadowing, while also preventing certain bugs. For instance, imagine we had written our earlier sumMatrix function using let variables.\nfunction sumMatrix(matrix: number[][]) { let sum = 0; for (let i = 0; i \u0026lt; matrix.length; i++) { var currentRow = matrix[i]; for (let i = 0; i \u0026lt; currentRow.length; i++) { sum += currentRow[i]; } } return sum; } This version of the loop will actually perform the summation correctly because the inner loop\u0026rsquo;s i shadows i from the outer loop.\nShadowing should usually be avoided in the interest of writing clearer code. While there are some scenarios where it may be fitting to take advantage of it, you should use your best judgement.\nBlock-scoped variable capturing # When we first touched on the idea of variable capturing with var declaration, we briefly went into how variables act once captured. To give a better intuition of this, each time a scope is run, it creates an \u0026ldquo;environment\u0026rdquo; of variables. That environment and its captured variables can exist even after everything within its scope has finished executing.\nfunction theCityThatAlwaysSleeps() { let getCity; if (true) { let city = \u0026#34;Seattle\u0026#34;; getCity = function () { return city; }; } return getCity(); } Because we\u0026rsquo;ve captured city from within its environment, we\u0026rsquo;re still able to access it despite the fact that the if block finished executing.\nRecall that with our earlier setTimeout example, we ended up needing to use an IIFE to capture the state of a variable for every iteration of the for loop. In effect, what we were doing was creating a new variable environment for our captured variables. That was a bit of a pain, but luckily, you\u0026rsquo;ll never have to do that again in TypeScript.\nlet declarations have drastically different behavior when declared as part of a loop. Rather than just introducing a new environment to the loop itself, these declarations sort of create a new scope per iteration. Since this is what we were doing anyway with our IIFE, we can change our old setTimeout example to just use a let declaration.\nfor (let i = 0; i \u0026lt; 10; i++) { setTimeout(function () { console.log(i); }, 100 * i); } and as expected, this will print out\n0 1 2 3 4 5 6 7 8 9 const declarations # const declarations are another way of declaring variables.\nconst numLivesForCat = 9; They are like let declarations but, as their name implies, their value cannot be changed once they are bound. In other words, they have the same scoping rules as let, but you can\u0026rsquo;t re-assign to them.\nThis should not be confused with the idea that the values they refer to are immutable.\nconst numLivesForCat = 9; const kitty = { name: \u0026#34;Aurora\u0026#34;, numLives: numLivesForCat, }; // Error kitty = { name: \u0026#34;Danielle\u0026#34;, numLives: numLivesForCat, }; // all \u0026#34;okay\u0026#34; kitty.name = \u0026#34;Rory\u0026#34;; kitty.name = \u0026#34;Kitty\u0026#34;; kitty.name = \u0026#34;Cat\u0026#34;; kitty.numLives--; Unless you take specific measures to avoid it, the internal state of a const variable is still modifiable. Fortunately, TypeScript allows you to specify that members of an object are readonly. The chapter on Interfaces has the details.\nlet vs. const # Given that we have two types of declarations with similar scoping semantics, it\u0026rsquo;s natural to find ourselves asking which one to use. Like most broad questions, the answer is: it depends.\nApplying the principle of least privilege, all declarations other than those you plan to modify should use const. The rationale is that if a variable didn\u0026rsquo;t need to get written to, others working on the same codebase shouldn\u0026rsquo;t automatically be able to write to the object, and will need to consider whether they really need to reassign to the variable. Using const also makes code more predictable when reasoning about flow of data.\nUse your best judgement, and if applicable, consult the matter with the rest of your team.\nThe majority of this handbook uses let declarations.\nDestructuring # Another ECMAScript 2015 feature that TypeScript has is destructuring. For a complete reference, see the article on the Mozilla Developer Network. In this section, we\u0026rsquo;ll give a short overview.\nArray destructuring # The simplest form of destructuring is array destructuring assignment:\nlet input = [1, 2]; let [first, second] = input; console.log(first); // outputs 1 console.log(second); // outputs 2 This creates two new variables named first and second. This is equivalent to using indexing, but is much more convenient:\nfirst = input[0]; second = input[1]; Destructuring works with already-declared variables as well:\n// swap variables [first, second] = [second, first]; And with parameters to a function:\nfunction f([first, second]: [number, number]) { console.log(first); console.log(second); } f([1, 2]); You can create a variable for the remaining items in a list using the syntax ...:\nlet [first, ...rest] = [1, 2, 3, 4]; console.log(first); // outputs 1 console.log(rest); // outputs [ 2, 3, 4 ] Of course, since this is JavaScript, you can just ignore trailing elements you don\u0026rsquo;t care about:\nlet [first] = [1, 2, 3, 4]; console.log(first); // outputs 1 Or other elements:\nlet [, second, , fourth] = [1, 2, 3, 4]; console.log(second); // outputs 2 console.log(fourth); // outputs 4 Tuple destructuring # Tuples may be destructured like arrays; the destructuring variables get the types of the corresponding tuple elements:\nlet tuple: [number, string, boolean] = [7, \u0026#34;hello\u0026#34;, true]; let [a, b, c] = tuple; // a: number, b: string, c: boolean It\u0026rsquo;s an error to destructure a tuple beyond the range of its elements:\nlet [a, b, c, d] = tuple; // Error, no element at index 3 As with arrays, you can destructure the rest of the tuple with ..., to get a shorter tuple:\nlet [a, ...bc] = tuple; // bc: [string, boolean] let [a, b, c, ...d] = tuple; // d: [], the empty tuple Or ignore trailing elements, or other elements:\nlet [a] = tuple; // a: number let [, b] = tuple; // b: string Object destructuring # You can also destructure objects:\nlet o = { a: \u0026#34;foo\u0026#34;, b: 12, c: \u0026#34;bar\u0026#34;, }; let { a, b } = o; This creates new variables a and b from o.a and o.b. Notice that you can skip c if you don\u0026rsquo;t need it.\nLike array destructuring, you can have assignment without declaration:\n({ a, b } = { a: \u0026#34;baz\u0026#34;, b: 101 }); Notice that we had to surround this statement with parentheses. JavaScript normally parses a { as the start of block.\nYou can create a variable for the remaining items in an object using the syntax ...:\nlet { a, ...passthrough } = o; let total = passthrough.b + passthrough.c.length; Property renaming # You can also give different names to properties:\nlet { a: newName1, b: newName2 } = o; Here the syntax starts to get confusing. You can read a: newName1 as \u0026ldquo;a as newName1\u0026rdquo;. The direction is left-to-right, as if you had written:\nlet newName1 = o.a; let newName2 = o.b; Confusingly, the colon here does not indicate the type. The type, if you specify it, still needs to be written after the entire destructuring:\nlet { a: newName1, b: newName2 }: { a: string; b: number } = o; Default values # Default values let you specify a default value in case a property is undefined:\nfunction keepWholeObject(wholeObject: { a: string; b?: number }) { let { a, b = 1001 } = wholeObject; } In this example the b? indicates that b is optional, so it may be undefined. keepWholeObject now has a variable for wholeObject as well as the properties a and b, even if b is undefined.\nFunction declarations # Destructuring also works in function declarations. For simple cases this is straightforward:\ntype C = { a: string; b?: number }; function f({ a, b }: C): void { // ... } But specifying defaults is more common for parameters, and getting defaults right with destructuring can be tricky. First of all, you need to remember to put the pattern before the default value.\nfunction f({ a = \u0026#34;\u0026#34;, b = 0 } = {}): void { // ... } f(); The snippet above is an example of type inference, explained earlier in the handbook.\nThen, you need to remember to give a default for optional properties on the destructured property instead of the main initializer. Remember that C was defined with b optional:\nfunction f({ a, b = 0 } = { a: \u0026#34;\u0026#34; }): void { // ... } f({ a: \u0026#34;yes\u0026#34; }); // ok, default b = 0 f(); // ok, default to { a: \u0026#34;\u0026#34; }, which then defaults b = 0 f({}); // error, \u0026#39;a\u0026#39; is required if you supply an argument Use destructuring with care. As the previous example demonstrates, anything but the simplest destructuring expression is confusing. This is especially true with deeply nested destructuring, which gets really hard to understand even without piling on renaming, default values, and type annotations. Try to keep destructuring expressions small and simple. You can always write the assignments that destructuring would generate yourself.\nSpread # The spread operator is the opposite of destructuring. It allows you to spread an array into another array, or an object into another object. For example:\nlet first = [1, 2]; let second = [3, 4]; let bothPlus = [0, ...first, ...second, 5]; This gives bothPlus the value [0, 1, 2, 3, 4, 5]. Spreading creates a shallow copy of first and second. They are not changed by the spread.\nYou can also spread objects:\nlet defaults = { food: \u0026#34;spicy\u0026#34;, price: \u0026#34;$$\u0026#34;, ambiance: \u0026#34;noisy\u0026#34; }; let search = { ...defaults, food: \u0026#34;rich\u0026#34; }; Now search is { food: \u0026quot;rich\u0026quot;, price: \u0026quot;$$\u0026quot;, ambiance: \u0026quot;noisy\u0026quot; }. Object spreading is more complex than array spreading. Like array spreading, it proceeds from left-to-right, but the result is still an object. This means that properties that come later in the spread object overwrite properties that come earlier. So if we modify the previous example to spread at the end:\nlet defaults = { food: \u0026#34;spicy\u0026#34;, price: \u0026#34;$$\u0026#34;, ambiance: \u0026#34;noisy\u0026#34; }; let search = { food: \u0026#34;rich\u0026#34;, ...defaults }; Then the food property in defaults overwrites food: \u0026quot;rich\u0026quot;, which is not what we want in this case.\nObject spread also has a couple of other surprising limits. First, it only includes an objects\u0026rsquo; own, enumerable properties. Basically, that means you lose methods when you spread instances of an object:\nclass C { p = 12; m() {} } let c = new C(); let clone = { ...c }; clone.p; // ok clone.m(); // error! Second, the TypeScript compiler doesn\u0026rsquo;t allow spreads of type parameters from generic functions. That feature is expected in future versions of the language.\n::: _attribution © 2012-2023 Microsoft\nLicensed under the Apache License, Version 2.0.\nhttps://www.typescriptlang.org/docs/handbook/variable-declarations.html{._attribution-link} :::\n"},{"id":318,"href":"/docs/references/libs-and-fwks/react-three/advanced/dos-and-donts-for-performance/","title":"Dos and Donts for Performance","section":"Advanced","content":" Do\u0026rsquo;s and don\u0026rsquo;ts for performance # Hey everyone! While writing the book I’ve been gathering a big list of tips, tricks, caveats, and gotchas. This page contains everything that I’ve found so far.\nNot all the tips here have been experimentally verified, especially the performance tips. There are too many variables involved to blindly follow a list, so always make sure to test your app thoroughly and see what works for you. These are suggestions, not rules (mostly). That said, this page will have lots of useful tips for apps of any size.\nIf you have anything to add or notice any mistakes, let me know and I’ll update the page.\nMost of the info here is not specific to three.js, or even WebGL, but will work in any real-time graphics application or framework.\nHappy Coding!\nBeginner Friendly Tips, or Help! Why Can’t I See Anything? # You’ve followed a couple of basic tutorials and everything worked out fine. Now you’re creating an app of your own and you’ve set everything up exactly as the tutorial says. But you just can’t see anything! WTH??\nHere are some things you can do to help figure out the problem.\n1. Check the browser console for error messages # But you already did that, right?\n2. Set the background color to something other than black # Staring at a black canvas? It’s hard to tell whether something is happening or not if all you can see is black. Try setting the background color to red:\nimport { Color } from \u0026#34;./vendor/three/build/three.module.js\u0026#34;; scene.background = new Color(\u0026#34;red\u0026#34;); If you get a red canvas, then at least your renderer.render calls are working, and you can move on to figuring out what else is wrong.\n3. Make sure you have a light in your scene and that it’s illuminating your objects # Just as in the real world, most materials in three.js need light to be seen.\n4. Overide all materials in the scene with a MeshBasicMaterial # One material that doesn’t require light to be visible is the MeshBasicMaterial. If you are having trouble getting objects to show up, you can temporarily override all the materials in your scene with MeshBasicMaterial. If the objects magically appear when you do this, then your problem is a lack of light.\nimport { MeshBasicMaterial } from \u0026#34;./vendor/three/build/three.module.js\u0026#34;; scene.overrideMaterial = new MeshBasicMaterial({ color: \u0026#34;green\u0026#34; }); 5. Is your object within the camera’s viewing frustum? # If your object is not inside the viewing frustum, it will get clipped. Try making your far clipping plane really big:\ncamera.far = 100000; camera.updateProjectionMatrix(); Remember this is just for testing though! The camera’s frustum is measured in meters, and you should make it as small as possible for best performance. Once your scene is set up and working correctly, reduce the size of your frustum as much as possible.\n6. Is your camera inside the object? # By default, everything gets created at the point $(0,0,0)$, AKA the origin. Make sure you have moved your camera back so that you can see your scene!\ncamera.position.z = 10; 7. Think carefully about the scale of your scene # Try to visualize your scene and remember that one unit in three.js is one meter. Does everything fit together in a reasonably logical manner? Or perhaps you cannot see anything because the object you just loaded is only 0.00001 meters wide. Wait, what’s that tiny black dot in the middle of the screen?\nGeneral Tips # Object creation in JavaScript is expensive, so don’t create objects in a loop. Instead, create a single object such as a Vector3 and use vector.set() or similar methods to reuse a that inside the loop. The same goes for your render loop. To make sure your app runs at a buttery smooth sixty frames per second, do as little work as possible in your render loop. Don’t create new objects every frame. Always use BufferGeometry instead of Geometry, it’s faster. The same goes for the pre-built objects, always use the buffer geometry version ( BoxBufferGeometry rather than BoxGeometry). Always try to reuse objects such as objects, materials, textures etc. (although updating some things may be slower than creating new ones, see texture tips below). Work in SI Units # three.js is uses SI units everywhere. If you also use SI units, you will find that things work more smoothly. If you do use a different kind of unit for some reason, such as inches (shudder), make sure that you have a good reason for doing so.\nSI Units # Distance is measured in meters (1 three.js unit = 1 meter). Time is measured in seconds. Light is measured in SI light units, Candela (cd), Lumen (lm), and Lux (lx) (as long as you turn on renderer.physicallyCorrectLights, at least). If you are creating things on a truly epic scale (space simulations and things like that), either use a scaling factor or switch to using a logarithmic depth buffer.\nAccurate Colors # For (nearly) accurate colors, use these settings for the renderer:\nrenderer.gammaFactor = 2.2; renderer.outputEncoding = THREE.sRGBEncoding; For colors do this:\nconst color = new Color(0x800080); color.convertSRGBToLinear(); Or, in the more common case of using a color in a material:\nconst material = new MeshBasicMaterial({ color: 0x800080 }); material.color.convertSRGBToLinear(); Finally, to get (nearly) correct colors in your textures, you need to set the texture encoding for the color, environment, and emissive maps _only_:\nimport { sRGBEncoding } from \u0026#34;./vendor/three/build/three.module.js\u0026#34;; const colorMap = new TextureLoader().load(\u0026#34;colorMap.jpg\u0026#34;); colorMap.encoding = sRGBEncoding; All other texture types should remain in linear color space. This is the default, so you don’t need to change the encoding for any textures other than color, environment, and emissive maps.\nNote that I’m saying nearly correct here since three.js color management is not quite correct at the moment. Hopefully, it will be fixed soon, but in the meantime, any inaccuracy in color will be so minor that it’s very unlikely anybody will notice unless you are doing scientific or medical renderings.\nJavaScript # Don’t assume you know what will be faster # The JavaScript engines used by web browsers change frequently and do an amazing amount of optimization of your code behind the scenes. Don’t trust your intuition about what will be faster, always test. Don’t listen to articles from a few years ago telling you to avoid certain methods such as array.map or array.forEach. Test these for yourself, or find articles from the last few months with proper tests.\nUse a style guide and linter # Personally, I use a combination of Eslint, Prettier, and the Airbnb style guide. This took me around 30 minutes to set up in VSCode using this tutorial ( part 2), and now I never have to waste my time with formatting, linting, or wondering whether a particular piece of syntax is a good idea, ever again.\nMany people who work with three.js prefer Mr.doob’s Code Style™ over Airbnb, so if you prefer to use that just replace eslint-config-airbnb plugin with eslint-config-mdcs.\nModels, Meshes and Other Visible Thing # Avoid using common text-based 3D data formats, such as Wavefront OBJ or COLLADA, for asset delivery. Instead, use formats optimized for the web, such as glTF. Use Draco mesh compression with glTF. Sometimes this reduces glTF files to less than 10% of their original size! Alternatively, there is a new kid on the block called gltfpack which in some cases may give even better results than Draco. If you need to make large groups of objects visible and invisible (or add/remove them from your scene), consider using Layers for best performance. Objects at the same exact same position cause flickering (Z-fighting). Try offsetting things by a tiny amount like 0.001 to make things look like they are in the same position while keeping your GPU happy. Keep your scene centered around the origin to reduce floating-point errors at large coordinates. Never move your Scene. It gets created at $(0,0,0)$, and this is the default frame of reference for all the objects inside it. Camera # Make your frustum as small as possible for better performance. It’s fine to use a large frustum in development, but once you are fine-tuning your app for deployment, make your frustum as small as possible to gain a few vital FPS. Don’t put things right on the far clipping plane (especially if your far clipping plane is really big), as this can cause flickering. Renderer # Don’t enable preserveDrawingBuffer unless you need it. Disable the alpha buffer unless you need it. Don’t enable the stencil buffer unless you need it. Disable the depth buffer unless you need it (but you probably do need it). Use powerPreference: \u0026quot;high-performance\u0026quot; when creating the renderer. This may encourage a user’s system to choose the high-performance GPU, in multi-GPU systems. Consider only rendering when the camera position changes by epsilon or when an animation happens. If your scene is static and uses OrbitControls, you can listen for the control’s change event. This way you can render the scene only when the camera moves: OrbitControls.addEventListener(\u0026#34;change\u0026#34;, () =\u0026gt; renderer.render(scene, camera)); You won’t get a higher frame rate from the last two, but what you will get is less fans switching on, and less battery drain on mobile devices.\nNote: I’ve seen a few places around the web recommending that you disable anti-aliasing and apply a post-processing AA pass instead. In my testing, this is not true. On modern hardware built-in MSAA seems to be extremely cheap even on low-power mobile devices, while the post-processing FXAA or SMAA passes cause a considerable frame rate drop on every scene I’ve tested them with, and are also lower quality than MSAA.\nLights # Direct lights (SpotLight, PointLight, RectAreaLight, and DirectionalLight) are slow. Use as few direct lights as possible in your scenes. Avoid adding and removing lights from your scene since this requires the WebGLRenderer to recompile all shader programs (it does cache the programs so subsequent times that you do this it will be faster than the first). Instead, use light.visible = false or light.intensiy = 0. Turn on renderer.physicallyCorrectLights for accurate lighting that uses SI units. Shadows # If your scene is static, only update the shadow map when something changes, rather than every frame. Use a CameraHelper to visualize the shadow camera’s viewing frustum. Make the shadow frustum as small as possible. Make the shadow texture as low resolution as possible. Remember that point light shadows are more expensive than other shadow types since they must render six times (once in each direction), compared with a single time for DirectionalLight and SpotLight shadows. While we’re on the topic of PointLight shadows, note that the CameraHelper only visualizes one out of six of the shadow directions when used to visualize point light shadows. It’s still useful, but you’ll need to use your imagination for the other five directions. Materials # MeshLambertMaterial doesn’t work for shiny materials, but for matte materials like cloth it will give very similar results to MeshPhongMaterial but is faster. If you are using morph targets, make sure you set morphTargets = true in your material, or they won’t work! Same goes for morph normals. And if you’re using a SkinnedMesh for skeletal animations, make sure that material.skinning = true. Materials used with morph targets, morph normals, or skinning can’t be shared. You’ll need to create a unique material for each skinned or morphed mesh ( material.clone() is your friend here). Custom Materials # Only update your uniforms when they change, not every frame. Geometry # Avoid using LineLoop since it must be emulated by line strip. Textures # All of your textures need to be power of two (POT) size: $1, 2, 4, 8, 16, \\dots, 512, 2048, \\dots$. Don’t change the dimensions of your textures. Create new ones instead, it’s faster Use the smallest texture sizes possible (can you get away with a 256x256 tiled texture? You might be surprised!). Non-power-of-two (NPOT) textures require linear or nearest filtering, and clamp-to-border or clamp-to-edge wrapping. Mipmap filtering and repeat wrapping are not supported. But seriously, just don’t use NPOT textures. All textures with the same dimensions are the same size in memory, so JPG may have a smaller file size than PNG, but it will take up the same amount of memory on your GPU. Antialiasing # The worst-case scenario for antialiasing is geometry made up of lots of thin straight pieces aligned parallel with one another. Think metal window blinds or a lattice fence. If it’s at all possible, don’t include geometry like this in your scenes. If you have no choice, consider replacing the lattice with a texture instead, as that may give better results. Post-Processing # The built-in antialiasing doesn’t work with post-processing (at least in WebGL 1). You will need to do this manually, using FXAA or SMAA (probably faster, better) Since you are not using the built-in AA, be sure to disable it! three.js has loads of post-processing shaders, and that’s just great! But remember that each pass requires rendering your entire scene. Once you’re done testing, consider whether you can combine your passes into one single custom pass. It’s a little more work to do this, but can come with a considerable performance increase. Disposing of Things # Removing something from your scene?\nFirst of all, consider not doing that, especially if you will add it back again later. You can hide objects temporarily using object.visible = false (works for lights too), or material.opacity = 0. You can set light.intensity = 0 to disable a light without causing shaders to recompile.\nIf you do need to remove things from your scene permanently, read this article first: How to dispose of objects.\nUpdating Objects in Your Scene? # Read this article: How to update things.\nPerformance # Set object.matrixAutoUpdate = false for static or rarely moving objects and manually call object.updateMatrix() whenever their position/rotation/quaternion/scale are updated. Transparent objects are slow. Use as few transparent objects as possible in your scenes. use alphatest instead of standard transparency if possible, it’s faster. When testing the performance of your apps, one of the first things you’ll need to do is check whether it is CPU bound, or GPU bound. Replace all materials with basic material using scene.overrideMaterial (see beginners tips and the start of the page). If performance increases, then your app is GPU bound. If performance doesn’t increase, your app is CPU bound. When performance testing on a fast machine, you’ll probably be getting the maximum frame rate of 60FPS. Run chrome using open -a \u0026quot;Google Chrome\u0026quot; --args --disable-gpu-vsync for an unlimited frame rate. Modern mobile devices have high pixel ratios as high as 5 - consider limiting the max pixel ratio to 2 or 3 on these devices. At the expense of some very slight blurring of your scene you will gain a considerable performance increase. Bake lighting and shadow maps to reduce the number of lights in your scene. Keep an eye on the number of drawcalls in your scene. A good rule of thumb is fewer draw calls = better performance. Far away objects don’t need the same level of detail as objects close to the camera. There are many tricks used to increase performance by reducing the quality of distant objects. Consider using a LOD (Level Of Detail) object. You may also get away with only updating position / animation every 2nd or 3rd frame for distant objects, or replacing them with a billboard - that is, a drawing of the object. Advanced Tips # Don’t use TriangleFanDrawMode, it’s slow. Use geometry instancing when you have hundreds or thousands of similar geometries. Animate on the GPU instead of the CPU, especially when animating vertices or particles (see THREE.Bas for one approach to doing this). Read These Pages Too! # The Unity and Unreal docs also have pages with lots of performance suggestions, most of which are equally relevant for three.js. Read over these as well:\nOptimizing graphics performance (Unity) Performance Guidelines for Artists and Designers (Unreal) WebGL Insights has lots of tips collected from throughout the book. It’s more technical, but worth reading too, especially if you are writing your own shaders.\nWebGL Insights Tips References # @jackrugile and @mrdoob on Twitter A-Painter performance optimizations "},{"id":319,"href":"/docs/references/libs-and-fwks/react-three/advanced/performance-pitfalls/","title":"Performance Pitfalls","section":"Advanced","content":" Performance pitfalls # Tips and Tricks # This is a good overview: https://discoverthreejs.com/tips-and-tricks\nThe most important gotcha in three.js is that creating objects can be expensive, think twice before you mount/unmount things! Every material or light that you put into the scene has to compile, every geometry you create will be processed. Share materials and geometries if you can, either in global scope or locally:\nconst geom = useMemo(() =\u0026gt; new BoxGeometry(), []) const mat = useMemo(() =\u0026gt; new MeshBasicMaterial(), []) return items.map(i =\u0026gt; \u0026lt;mesh geometry={geom} material={mat} ... Try to use instancing as much as you can when you need to display many objects of a similar type!\nAvoid setState in loops # TLDR, don\u0026rsquo;t, mutate inside useFrame! :star:\nThreejs has a render-loop, it does not work like the DOM does. Fast updates are carried out in useFrame by mutation. useFrame is your per-component render-loop. It is not enough to set values in succession, you need frame deltas. Instead of position.x += 0.1 consider position.x += delta or your project will run at different speeds depending on the end-users system. Many updates in threejs need to be paired with update flags (.needsUpdate = true), or imperative functions (.updateProjectionMatrix()). You might be tempted to setState inside useFrame but there is no reason to. You would only complicate something as simple as an update by routing it through Reacts scheduler, triggering component render etc. ❌ setState in loops is bad # useEffect(() =\u0026gt; { const interval = setInterval(() =\u0026gt; setX((x) =\u0026gt; x + 0.1), 1) return () =\u0026gt; clearInterval(interval) }, []) ❌ setState in useFrame is bad # const [x, setX] = useState(0) useFrame(() =\u0026gt; setX((x) =\u0026gt; x + 0.1)) return \u0026lt;mesh position-x={x} /\u0026gt; ❌ setState in fast events is bad # \u0026lt;mesh onPointerMove={(e) =\u0026gt; setX((x) =\u0026gt; e.point.x)} /\u0026gt; ✅ Instead, just mutate, use deltas # In general you should prefer useFrame. Consider mutating props safe as long as the component is the only entity that mutates. Use deltas instead of fixed values so that your app is refresh-rate independent and runs at the same speed everywhere!\nconst meshRef = useRef() useFrame((state, delta) =\u0026gt; (meshRef.current.position.x += delta)) return \u0026lt;mesh ref={meshRef} /\u0026gt; Same goes for events, use references.\n\u0026lt;mesh onPointerMove={(e) =\u0026gt; (ref.current.position.x = e.point.x)} /\u0026gt; If you must use intervals, use references as well, but keep in mind that this is not refresh-rate independent.\nuseEffect(() =\u0026gt; { const interval = setInterval(() =\u0026gt; ref.current.position.x += 0.1), 1) return () =\u0026gt; clearInterval(interval) }, []) Handle animations in loops # The frame loop is where you should place your animations. For instance using lerp, or damp.\n✅ Use lerp + useFrame # function Signal({ active }) { const meshRef = useRef() useFrame((state, delta) =\u0026gt; { meshRef.current.position.x = THREE.MathUtils.lerp(meshRef.current.position.x, active ? 100 : 0, 0.1) }) return \u0026lt;mesh ref={meshRef} /\u0026gt; ✅ Or react-spring # Or, use animation libraries. React-spring has its own frame-loop and animates outside of React. Framer-motion is another popular alternative.\nimport { a, useSpring } from \u0026#39;@react-spring/three\u0026#39; function Signal({ active }) { const { x } = useSpring({ x: active ? 100 : 0 }) return \u0026lt;a.mesh position-x={x} /\u0026gt; Do not bind to fast state reactively # Using state-managers and selective state is fine, but not for updates that happen rapidly for the same reason as above.\n❌ Don\u0026rsquo;t bind reactive fast-state # import { useSelector } from \u0026#39;react-redux\u0026#39; // Assuming that x gets animated inside the store 60fps const x = useSelector((state) =\u0026gt; state.x) return \u0026lt;mesh position-x={x} /\u0026gt; ✅ Fetch state directly # For instance using Zustand (same in Redux et al).\nuseFrame(() =\u0026gt; (ref.current.position.x = api.getState().x)) return \u0026lt;mesh ref={ref} /\u0026gt; Don\u0026rsquo;t mount indiscriminately # In threejs it is very common to not re-mount at all, see the \u0026ldquo;disposing of things\u0026rdquo; section in discover-three. This is because buffers and materials get re-initialized/compiled, which can be expensive.\n❌ Avoid mounting runtime # { stage === 1 \u0026amp;\u0026amp; \u0026lt;Stage1 /\u0026gt; } { stage === 2 \u0026amp;\u0026amp; \u0026lt;Stage2 /\u0026gt; } { stage === 3 \u0026amp;\u0026amp; \u0026lt;Stage3 /\u0026gt; } ✅ Consider using visibility instead # \u0026lt;Stage1 visible={stage === 1} /\u0026gt; \u0026lt;Stage2 visible={stage === 2} /\u0026gt; \u0026lt;Stage3 visible={stage === 3} /\u0026gt; function Stage1(props) { return ( \u0026lt;group {...props}\u0026gt; ... ✅ Use startTransition for expensive ops # React 18 introduces the startTransition and useTransition APIs to defer and schedule work and state updates. Use these to de-prioritize expensive operations.\nSince version 8 of Fiber canvases use concurrent mode by default, which means React will schedule and defer expensive operations. You don\u0026rsquo;t need to do anything, but you can play around with the experimental scheduler and see if marking ops with a lesser priority makes a difference.\nimport { useTransition } from \u0026#39;react\u0026#39; import { Points } from \u0026#39;@react-three/drei\u0026#39; const [isPending, startTransition] = useTransition() const [radius, setRadius] = useState(1) const positions = calculatePositions(radius) const colors = calculateColors(radius) const sizes = calculateSizes(radius) \u0026lt;Points positions={positions} colors={colors} sizes={sizes} onPointerOut={() =\u0026gt; { startTransition(() =\u0026gt; { setRadius(prev =\u0026gt; prev + 1) }) }} \u0026gt; \u0026lt;meshBasicMaterial vertexColors /\u0026gt; \u0026lt;/Points\u0026gt; Don\u0026rsquo;t re-create objects in loops # Try to avoid creating too much effort for the garbage collector, re-pool objects when you can!\n❌ Bad news for the GC # This creates a new vector 60 times a second, which allocates memory and forces the GC to eventually kick in.\nuseFrame(() =\u0026gt; { ref.current.position.lerp(new THREE.Vector3(x, y, z), 0.1) }) ✅ Better re-use object # Set up re-used objects in global or local space, now the GC will be silent.\nfunction Foo(props) const vec = new THREE.Vector() useFrame(() =\u0026gt; { ref.current.position.lerp(vec.set(x, y, z), 0.1) }) useLoader instead of plain loaders # Threejs loaders give you the ability to load async assets (models, textures, etc), but if you do not re-use assets it can quickly become problematic.\n❌ No re-use is bad for perf # This re-fetches, re-parses for every component instance.\nfunction Component() { const [texture, set] = useState() useEffect(() =\u0026gt; void new TextureLoader().load(url, set), []) return texture ? ( \u0026lt;mesh\u0026gt; \u0026lt;sphereGeometry /\u0026gt; \u0026lt;meshBasicMaterial map={texture} /\u0026gt; \u0026lt;/mesh\u0026gt; ) : null } Instead use useLoader, which caches assets and makes them available throughout the scene.\n✅ Cache and re-use objects # function Component() { const texture = useLoader(TextureLoader, url) return ( \u0026lt;mesh\u0026gt; \u0026lt;sphereGeometry /\u0026gt; \u0026lt;meshBasicMaterial map={texture} /\u0026gt; \u0026lt;/mesh\u0026gt; ) } Regarding GLTF\u0026rsquo;s try to use GLTFJSX as much as you can, this will create immutable JSX graphs which allow you to even re-use full models.\n"},{"id":320,"href":"/docs/references/libs-and-fwks/react-three/advanced/scaling-performance/","title":"Scaling Performance","section":"Advanced","content":" Scaling performance # Running WebGL can be quite expensive depending on how powerful your devices are. In order to mitigate this, especially if you want to make your application available to a broad variety of devices, including weaker options, you should look into performance optimizations. This article goes through a couple of them.\nOn-demand rendering # three.js apps usually run in a game-loop that executes 60 times a second, React Three Fiber is no different. This is perfectly fine when your scene has constantly moving parts in it. This is what generally drains batteries the most and makes fans spin up.\nBut if the moving parts in your scene are allowed to come to rest, then it would be wasteful to keep rendering. In such cases you can opt into on-demand rendering, which will only render when necessary. This saves battery and keeps noisy fans in check.\nOpen the sandbox below in a full screen and look into dev tools, you will see that it is completely idle when nothing is going on. It renders only when you move the model.\nColor grading\nAll you need to do is set the canvas frameloop prop to demand. It will render frames whenever it detects prop changes throughout the component tree.t\n\u0026lt;Canvas frameloop=\u0026#34;demand\u0026#34;\u0026gt; Triggering manual frames # One major caveat is that if anything in the tree mutates props, then React cannot be aware of it and the display would be stale. For instance, camera controls just grab into the camera and mutate its values. Here you can use React Three Fiber\u0026rsquo;s invalidate function to trigger frames manually.\nfunction Controls() { const orbitControlsRef = useRef() const { invalidate, camera, gl } = useThree() useEffect(() =\u0026gt; { orbitControlsRef.current.addEventListener(\u0026#39;change\u0026#39;, invalidate) return () =\u0026gt; orbitControlsRef.current.removeEventListener(\u0026#39;change\u0026#39;, invalidate) }, []) return \u0026lt;orbitControls ref={orbitControlsRef} args={[camera, gl.domElement]} /\u0026gt; [!hint] Drei\u0026rsquo;s controls do this automatically for you.\nGenerally you can call invalidate whenever you need to render:\ninvalidate() [!hint] Calling invalidate() will not render immediately, it merely requests a new frame to be rendered out. Calling invalidate multiple times will not render multiple times. Think of it as a flag to tell the system that something has changed.\nRe-using geometries and materials # Each geometry and material means additional overhead for the GPU. You should try to re-use resources if you know they will repeat.\nYou could do this globally:\nconst red = new THREE.MeshLambertMaterial({ color: \u0026#34;red\u0026#34; }) const sphere = new THREE.SphereGeometry(1, 28, 28) function Scene() { return ( \u0026lt;\u0026gt; \u0026lt;mesh geometry={sphere} material={red} /\u0026gt; \u0026lt;mesh position={[1, 2, 3]} geometry={sphere} material={red} /\u0026gt; If you create a material or color in global space - outside of React Three Fiber\u0026rsquo;s Canvas context - you should enable ColorManagement in three.js. This will allow certain conversions (for hexadecimal and CSS colors in sRGB) to be made automatically, producing correct colors in all cases.\nimport * as THREE from \u0026#39;three\u0026#39; // r150 THREE.ColorManagement.enabled = true // r139-r149 THREE.ColorManagement.legacyMode = false Caching with useLoader # Every resource that is loaded with useLoader is cached automatically!\nIf you access a resource via useLoader with the same URL, throughout the component tree, then you will always refer to the same asset and thereby re-use it. This is especially useful if you run your GLTF assets through GLTFJSX because it links up geometries and materials and thereby creates re-usable models.\nRe-using GLTFs\nfunction Shoe(props) { const { nodes, materials } = useLoader(GLTFLoader, \u0026#34;/shoe.glb\u0026#34;) return ( \u0026lt;group {...props} dispose={null}\u0026gt; \u0026lt;mesh geometry={nodes.shoe.geometry} material={materials.canvas} /\u0026gt; \u0026lt;/group\u0026gt; ) } \u0026lt;Shoe position={[1, 2, 3]} /\u0026gt; \u0026lt;Shoe position={[4, 5, 6]} /\u0026gt; Instancing # Each mesh is a draw call, you should be mindful of how many of these you employ: no more than 1000 as the very maximum, and optimally a few hundred or less. You can win performance back by reducing draw calls, for example by instancing repeating objects. This way you can have hundreds of thousands of objects in a single draw call.\n**Instances** Setting up instancing is not so hard, consult the three.js docs if you need help.\nfunction Instances({ count = 100000, temp = new THREE.Object3D() }) { const instancedMeshRef = useRef() useEffect(() =\u0026gt; { // Set positions for (let i = 0; i \u0026lt; count; i++) { temp.position.set(Math.random(), Math.random(), Math.random()) temp.updateMatrix() instancedMeshRef.current.setMatrixAt(i, temp.matrix) } // Update the instance instancedMeshRef.current.instanceMatrix.needsUpdate = true }, []) return ( \u0026lt;instancedMesh ref={instancedMeshRef} args={[null, null, count]}\u0026gt; \u0026lt;boxGeometry /\u0026gt; \u0026lt;meshPhongMaterial /\u0026gt; \u0026lt;/instancedMesh\u0026gt; ) } Level of detail # Sometimes it can be beneficial to reduce the quality of an object the further it is away from the camera. Why would you display it full resolution if it is barely visible. This can be a good strategy to reduce the overall vertex-count which means less work for the GPU.\nScroll in and out to see the effect:\nRe-using geometry and level of detail\nThere is a small component in Drei called \u0026lt;Detailed /\u0026gt; which sets up LOD without boilerplate. You load or prepare a couple of resolution stages, as many as you like, and then give them the same amount of distances from the camera, starting from highest quality to lowest.\nimport { Detailed, useGLTF } from \u0026#39;@react-three/drei\u0026#39; function Model() { const [low, mid, high] = useGLTF([\u0026#34;/low.glb\u0026#34;, \u0026#34;/mid.glb\u0026#34;, \u0026#34;/high.glb\u0026#34;]) return ( \u0026lt;Detailed distances={[0, 10, 20]}\u0026gt; \u0026lt;mesh geometry={high} /\u0026gt; \u0026lt;mesh geometry={mid} /\u0026gt; \u0026lt;mesh geometry={low} /\u0026gt; \u0026lt;Detailed/\u0026gt; ) } Nested loading # Nested loading means that lesser textures and models are loaded first, higher-resolution later.\nThe following sandbox goes through three loading stages:\nA loading indicator Low quality High quality Progressive loading states with suspense\nAnd this is how easy it is to achieve it, you can nest suspense and even use it as a fallback:\nfunction App() { return ( \u0026lt;Suspense fallback={\u0026lt;span\u0026gt;loading...\u0026lt;/span\u0026gt;}\u0026gt; \u0026lt;Canvas\u0026gt; \u0026lt;Suspense fallback={\u0026lt;Model url=\u0026#34;/low-quality.glb\u0026#34; /\u0026gt;}\u0026gt; \u0026lt;Model url=\u0026#34;/high-quality.glb\u0026#34; /\u0026gt; \u0026lt;/Suspense\u0026gt; \u0026lt;/Canvas\u0026gt; \u0026lt;/Suspense\u0026gt; ) } function Model({ url }) { const { scene } = useGLTF(url) return \u0026lt;primitive object={scene} /\u0026gt; } Performance monitoring # Drei has a new component PerformanceMonitor that allows you to monitor, and adapt to, device performance. This component will collect the average fps (frames per second) over time. If after a couple of iterations the averages are below or above a threshold it will trigger onIncline and onDecline callbacks that allow you to respond. Typically you would reduce the quality of your scene, the resolution, effects, the amount of stuff to render, or, increase it if you have enough framerate to fill.\nSince this would normally cause ping-ponging between the two callbacks you define upper and lower framerate bounds, as long as you stay within that margin nothing will trigger. Ideally your app should find its way into that margin by gradually altering quality.\nA simple example for regulating the resolution. It starts out with 1.5, if the system falls below the bounds it goes to 1, if it\u0026rsquo;s fast enough it goes to 2.\nfunction App() { const [dpr, setDpr] = useState(1.5) return ( \u0026lt;Canvas dpr={dpr}\u0026gt; \u0026lt;PerformanceMonitor onIncline={() =\u0026gt; setDpr(2)} onDecline={() =\u0026gt; setDpr(1)} \u0026gt; You can also use the onChange callback to get notified when the average changes in whichever direction. This allows you to make gradual changes. It gives you a factor between 0 and 1, which is increased by incline and decreased by decline. The factor is initially 0.5 by default.\nimport round from \u0026#39;lodash/round\u0026#39; const [dpr, set] = useState(1) return ( \u0026lt;Canvas dpr={dpr}\u0026gt; \u0026lt;PerformanceMonitor onChange={({ factor }) =\u0026gt; setDpr(round(0.5 + 1.5 * factor, 1))}\u0026gt; If you still experience flip flops despite the bounds you can define a limit of flipflops. If it is met onFallback will be triggered which typically sets a lowest possible baseline for the app. After the fallback has been called PerformanceMonitor will shut down.\n\u0026lt;PerformanceMonitor flipflops={3} onFallback={() =\u0026gt; setDpr(1)}\u0026gt; PerformanceMonitor can also have children, if you wrap your app in it you get to use usePerformanceMonitor which allows individual components down the nested tree to respond to performance changes on their own.\n\u0026lt;PerformanceMonitor\u0026gt; \u0026lt;Effects /\u0026gt; \u0026lt;/PerformanceMonitor\u0026gt; function Effects() { usePerformanceMonitor({ onIncline, onDecline, onFallback, onChange }) // ... } Movement regression # Websites like Sketchfab make sure the scene is always fluid, running at 60 fps, and responsive, no matter which device is being used or how expensive a loaded model is. They do this by regressing movement, where effects, textures, shadows will slightly reduce quality until still-stand\nThe following sandbox uses expensive lights and post-processing. In order for it to run relatively smooth it will scale the pixel ratio on movement and also skip heavy post-processing effects like ambient occlusion.\nPerformance scaling\nWhen you inspect the state model you will notice an object called performance.\nperformance: { current: 1, min: 0.1, max: 1, debounce: 200, regress: () =\u0026gt; void, }, current: Performance factor alternates between min and max min: Performance lower bound (should be less than 1) max: Performance upper bound (no higher than 1) debounce: Debounce timeout until it goes to upper bound (1) again regress(): Function that temporarily regresses performance You can define defaults like so:\n\u0026lt;Canvas performance={{ min: 0.5 }}\u0026gt;...\u0026lt;/Canvas\u0026gt; This is how you can put the system into regression # The only thing you have to do is call regress(). When exactly you do that, that is up to you, but it could be when when the mouse moves, or the scene is moving, for instance when controls fire their change-event.\nSay you are using controls, then the following code puts the system in regress when they are active:\nconst regress = useThree((state) =\u0026gt; state.performance.regress) useEffect(() =\u0026gt; { controls.current?.addEventListener(\u0026#39;change\u0026#39;, regress) This is how you can respond to it # [!hint] Mere calls to regress() will not change or affect anything!\nYour app has to opt into performance scaling by listening to the performance current! The number itself will tell you what to do. 1 (max) means everything is ok, the default. Less than 1 (min) means a regression is requested and the number itself tells you how far you should go when scaling down.\nFor instance, you could simply multiply current with the pixelratio to cut down on resolution. If you have defined min: 0.5 that would mean it will half the resolution for at least 200ms (delay) when regress is called. It can be used for anything else, too: switching off lights when current \u0026lt; 1, using lower-res textures, skip post-processing effects, etc. You could of course also animate/lerp these changes.\nHere is a small prototype component that scales the pixel ratio:\nfunction AdaptivePixelRatio() { const current = useThree((state) =\u0026gt; state.performance.current) const setPixelRatio = useThree((state) =\u0026gt; state.setPixelRatio) useEffect(() =\u0026gt; { setPixelRatio(window.devicePixelRatio * current) }, [current]) return null } Drop this component into the scene, combine it with the code above that calls regress(), and you have adaptive resolution:\n\u0026lt;AdaptivePixelRatio /\u0026gt; There are pre-made components for this already in the Drei library.\nEnable concurrency # React 18 introduces concurrent scheduling, specifically time slicing via startTransition and useTransition. This will virtualize the component graph, which then allows you to prioritise components and actions. Think of how a virtual list avoids scaling issues because it only renders as many items as the screen can take, it is not affected by the amount of items it has to render, be it 10 or 100.000.000.\nReact 18 functions very similar to this, it can potentially defer load and heavy tasks in ways that would be hard or impossible to achieve in a vanilla application. It thereby holds on to a stable framerate even in the most demanding situations.\nThe following benchmark shows how powerful concurrency can be: https://github.com/drcmda/scheduler-test\nIt simulates heavy load by creating hundreds of THREE.TextGeometry instances (510 to be exact). This class, like many others in three.js, is expensive and takes a while to construct. If all 510 instances are created the same time it will cause approximately 1.5 seconds of pure jank (Apple M1), the tab would normally freeze. It runs in an interval and will execute every 2 seconds.\nDISTRIBUTED AT-ONCE three.js ~20fps ~5fps React ~60fps ~60fps For more on how to use this API, see use startTransition for expensive ops.\n"},{"id":321,"href":"/docs/references/libs-and-fwks/react-three/fundamentals/backgrounds/","title":"Backgrounds","section":"Fundamentals","content":" Backgrounds # This is the first article in a series of articles about three.js. Three.js is a 3D library that tries to make it as easy as possible to get 3D content on a webpage.\nThree.js is often confused with WebGL since more often than not, but not always, three.js uses WebGL to draw 3D. WebGL is a very low-level system that only draws points, lines, and triangles. To do anything useful with WebGL generally requires quite a bit of code and that is where three.js comes in. It handles stuff like scenes, lights, shadows, materials, textures, 3d math, all things that you\u0026rsquo;d have to write yourself if you were to use WebGL directly.\nThese tutorials assume you already know JavaScript and, for the most part they will use ES6 style. See here for a terse list of things you\u0026rsquo;re expected to already know. Most browsers that support three.js are auto-updated so most users should be able to run this code. If you\u0026rsquo;d like to make this code run on really old browsers look into a transpiler like Babel. Of course users running really old browsers probably have machines that can\u0026rsquo;t run three.js.\nWhen learning most programming languages the first thing people do is make the computer print \u0026quot;Hello World!\u0026quot;. For 3D one of the most common first things to do is to make a 3D cube. So let\u0026rsquo;s start with \u0026ldquo;Hello Cube!\u0026rdquo;\nBefore we get started let\u0026rsquo;s try to give you an idea of the structure of a three.js app. A three.js app requires you to create a bunch of objects and connect them together. Here\u0026rsquo;s a diagram that represents a small three.js app\nThings to notice about the diagram above.\nThere is a Renderer. This is arguably the main object of three.js. You pass a Scene and a Camera to a Renderer and it renders (draws) the portion of the 3D scene that is inside the frustum of the camera as a 2D image to a canvas.\nThere is a scenegraph which is a tree like structure, consisting of various objects like a Scene object, multiple Mesh objects, Light objects, Group, Object3D, and Camera objects. A Scene object defines the root of the scenegraph and contains properties like the background color and fog. These objects define a hierarchical parent/child tree like structure and represent where objects appear and how they are oriented. Children are positioned and oriented relative to their parent. For example the wheels on a car might be children of the car so that moving and orienting the car\u0026rsquo;s object automatically moves the wheels. You can read more about this in the article on scenegraphs.\nNote in the diagram Camera is half in half out of the scenegraph. This is to represent that in three.js, unlike the other objects, a Camera does not have to be in the scenegraph to function. Just like other objects, a Camera, as a child of some other object, will move and orient relative to its parent object. There is an example of putting multiple Camera objects in a scenegraph at the end of the article on scenegraphs.\nMesh objects represent drawing a specific Geometry with a specific Material. Both Material objects and Geometry objects can be used by multiple Mesh objects. For example to draw two blue cubes in different locations we could need two Mesh objects to represent the position and orientation of each cube. We would only need one Geometry to hold the vertex data for a cube and we would only need one Material to specify the color blue. Both Mesh objects could reference the same Geometry object and the same Material object.\nGeometry objects represent the vertex data of some piece of geometry like a sphere, cube, plane, dog, cat, human, tree, building, etc\u0026hellip; Three.js provides many kinds of built in geometry primitives. You can also create custom geometry as well as load geometry from files.\nMaterial objects represent the surface properties used to draw geometry including things like the color to use and how shiny it is. A Material can also reference one or more Texture objects which can be used, for example, to wrap an image onto the surface of a geometry.\nTexture objects generally represent images either loaded from image files, generated from a canvas or rendered from another scene.\nLight objects represent different kinds of lights.\nGiven all of that we\u0026rsquo;re going to make the smallest \u0026ldquo;Hello Cube\u0026rdquo; setup that looks like this\nFirst let\u0026rsquo;s load three.js\n\u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import * as THREE from \u0026#39;three\u0026#39;; \u0026lt;/script\u0026gt; It\u0026rsquo;s important you put type=\u0026quot;module\u0026quot; in the script tag. This enables us to use the import keyword to load three.js. As of r147, this is the only way to load three.js properly. Modules have the advantage that they can easily import other modules they need. That saves us from having to manually load extra scripts they are dependent on.\nNext we need is a \u0026lt;canvas\u0026gt; tag so\u0026hellip;\n\u0026lt;body\u0026gt; \u0026lt;canvas id=\u0026#34;c\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;/body\u0026gt; We will ask three.js to draw into that canvas so we need to look it up.\n\u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import * as THREE from \u0026#39;three\u0026#39;; +function main() { + const canvas = document.querySelector(\u0026#39;#c\u0026#39;); + const renderer = new THREE.WebGLRenderer({antialias: true, canvas}); + ... \u0026lt;/script\u0026gt; After we look up the canvas we create a WebGLRenderer. The renderer is the thing responsible for actually taking all the data you provide and rendering it to the canvas.\nNote there are some esoteric details here. If you don\u0026rsquo;t pass a canvas into three.js it will create one for you but then you have to add it to your document. Where to add it may change depending on your use case and you\u0026rsquo;ll have to change your code so I find that passing a canvas to three.js feels a little more flexible. I can put the canvas anywhere and the code will find it whereas if I had code to insert the canvas into to the document I\u0026rsquo;d likely have to change that code if my use case changed.\nNext up we need a camera. We\u0026rsquo;ll create a PerspectiveCamera.\nconst fov = 75; const aspect = 2; // the canvas default const near = 0.1; const far = 5; const camera = new THREE.PerspectiveCamera(fov, aspect, near, far); fov is short for field of view. In this case 75 degrees in the vertical dimension. Note that most angles in three.js are in radians but for some reason the perspective camera takes degrees.\naspect is the display aspect of the canvas. We\u0026rsquo;ll go over the details in another article but by default a canvas is 300x150 pixels which makes the aspect 300/150 or 2.\nnear and far represent the space in front of the camera that will be rendered. Anything before that range or after that range will be clipped (not drawn).\nThose four settings define a \u0026ldquo;frustum\u0026rdquo;. A frustum is the name of a 3d shape that is like a pyramid with the tip sliced off. In other words think of the word \u0026ldquo;frustum\u0026rdquo; as another 3D shape like sphere, cube, prism, frustum.\nThe height of the near and far planes are determined by the field of view. The width of both planes is determined by the field of view and the aspect.\nAnything inside the defined frustum will be drawn. Anything outside will not.\nThe camera defaults to looking down the -Z axis with +Y up. We\u0026rsquo;ll put our cube at the origin so we need to move the camera back a little from the origin in order to see anything.\ncamera.position.z = 2; Here\u0026rsquo;s what we\u0026rsquo;re aiming for.\nIn the diagram above we can see our camera is at z = 2. It\u0026rsquo;s looking down the -Z axis. Our frustum starts 0.1 units from the front of the camera and goes to 5 units in front of the camera. Because in this diagram we are looking down, the field of view is affected by the aspect. Our canvas is twice as wide as it is tall so across the canvas the field of view will be much wider than our specified 75 degrees which is the vertical field of view.\nNext we make a Scene. A Scene in three.js is the root of a form of scene graph. Anything you want three.js to draw needs to be added to the scene. We\u0026rsquo;ll cover more details of how scenes work in a future article.\nconst scene = new THREE.Scene(); Next up we create a BoxGeometry which contains the data for a box. Almost anything we want to display in Three.js needs geometry which defines the vertices that make up our 3D object.\nconst boxWidth = 1; const boxHeight = 1; const boxDepth = 1; const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth); We then create a basic material and set its color. Colors can be specified using standard CSS style 6 digit hex color values.\nconst material = new THREE.MeshBasicMaterial({color: 0x44aa88}); We then create a Mesh. A Mesh in three represents the combination of three things\nA Geometry (the shape of the object) A Material (how to draw the object, shiny or flat, what color, what texture(s) to apply. Etc.) The position, orientation, and scale of that object in the scene relative to its parent. In the code below that parent is the scene. const cube = new THREE.Mesh(geometry, material); And finally we add that mesh to the scene\nscene.add(cube); We can then render the scene by calling the renderer\u0026rsquo;s render function and passing it the scene and the camera\nrenderer.render(scene, camera); Here\u0026rsquo;s a working example\nIt\u0026rsquo;s kind of hard to tell that is a 3D cube since we\u0026rsquo;re viewing it directly down the -Z axis and the cube itself is axis aligned so we\u0026rsquo;re only seeing a single face.\nLet\u0026rsquo;s animate it spinning and hopefully that will make it clear it\u0026rsquo;s being drawn in 3D. To animate it we\u0026rsquo;ll render inside a render loop using requestAnimationFrame.\nHere\u0026rsquo;s our loop\nfunction render(time) { time *= 0.001; // convert time to seconds cube.rotation.x = time; cube.rotation.y = time; renderer.render(scene, camera); requestAnimationFrame(render); } requestAnimationFrame(render); requestAnimationFrame is a request to the browser that you want to animate something. You pass it a function to be called. In our case that function is render. The browser will call your function and if you update anything related to the display of the page the browser will re-render the page. In our case we are calling three\u0026rsquo;s renderer.render function which will draw our scene.\nrequestAnimationFrame passes the time since the page loaded to our function. That time is passed in milliseconds. I find it\u0026rsquo;s much easier to work with seconds so here we\u0026rsquo;re converting that to seconds.\nWe then set the cube\u0026rsquo;s X and Y rotation to the current time. These rotations are in radians. There are 2 pi radians in a circle so our cube should turn around once on each axis in about 6.28 seconds.\nWe then render the scene and request another animation frame to continue our loop.\nOutside the loop we call requestAnimationFrame one time to start the loop.\nIt\u0026rsquo;s a little better but it\u0026rsquo;s still hard to see the 3d. What would help is to add some lighting so let\u0026rsquo;s add a light. There are many kinds of lights in three.js which we\u0026rsquo;ll go over in a future article. For now let\u0026rsquo;s create a directional light.\n{ const color = 0xFFFFFF; const intensity = 1; const light = new THREE.DirectionalLight(color, intensity); light.position.set(-1, 2, 4); scene.add(light); } Directional lights have a position and a target. Both default to 0, 0, 0. In our case we\u0026rsquo;re setting the light\u0026rsquo;s position to -1, 2, 4 so it\u0026rsquo;s slightly on the left, above, and behind our camera. The target is still 0, 0, 0 so it will shine toward the origin.\nWe also need to change the material. The MeshBasicMaterial is not affected by lights. Let\u0026rsquo;s change it to a MeshPhongMaterial which is affected by lights.\n-const material = new THREE.MeshBasicMaterial({color: 0x44aa88}); // greenish blue +const material = new THREE.MeshPhongMaterial({color: 0x44aa88}); // greenish blue Here is our new program structure\nAnd here it is working.\nIt should now be pretty clearly 3D.\nJust for the fun of it let\u0026rsquo;s add 2 more cubes.\nWe\u0026rsquo;ll use the same geometry for each cube but make a different material so each cube can be a different color.\nFirst we\u0026rsquo;ll make a function that creates a new material with the specified color. Then it creates a mesh using the specified geometry and adds it to the scene and sets its X position.\nfunction makeInstance(geometry, color, x) { const material = new THREE.MeshPhongMaterial({color}); const cube = new THREE.Mesh(geometry, material); scene.add(cube); cube.position.x = x; return cube; } Then we\u0026rsquo;ll call it 3 times with 3 different colors and X positions saving the Mesh instances in an array.\nconst cubes = [ makeInstance(geometry, 0x44aa88, 0), makeInstance(geometry, 0x8844aa, -2), makeInstance(geometry, 0xaa8844, 2), ]; Finally we\u0026rsquo;ll spin all 3 cubes in our render function. We compute a slightly different rotation for each one.\nfunction render(time) { time *= 0.001; // convert time to seconds cubes.forEach((cube, ndx) =\u0026gt; { const speed = 1 + ndx * .1; const rot = time * speed; cube.rotation.x = rot; cube.rotation.y = rot; }); ... and here\u0026rsquo;s that.\nIf you compare it to the top down diagram above you can see it matches our expectations. With cubes at X = -2 and X = +2 they are partially outside our frustum. They are also somewhat exaggeratedly warped since the field of view across the canvas is so extreme.\nOur program now has this structure\nAs you can see we have 3 Mesh objects each referencing the same BoxGeometry. Each Mesh references a unique MeshPhongMaterial so that each cube can have a different color.\nI hope this short intro helps to get things started. Next up we\u0026rsquo;ll cover making our code responsive so it is adaptable to multiple situations.\nes6 modules, three.js, and folder structure # As of version r147 the preferred way to use three.js is via es6 modules and import maps.\nes6 modules can be loaded via the import keyword in a script or inline via a \u0026lt;script type=\u0026quot;module\u0026quot;\u0026gt; tag. Here\u0026rsquo;s an example\n\u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import * as THREE from \u0026#39;three\u0026#39;; ... \u0026lt;/script\u0026gt; Notice 'three' specifier there. If you leave it as it is, it will likely produce an error. An import map should be used to tell the browser where to find three.js\n\u0026lt;script type=\u0026#34;importmap\u0026#34;\u0026gt; { \u0026#34;imports\u0026#34;: { \u0026#34;three\u0026#34;: \u0026#34;./path/to/three.module.js\u0026#34; } } \u0026lt;/script\u0026gt; Note that path specifier can start only with ./ or ../.\nImport maps are still unsupported in Firefox and Safari, so it is recommended to use an import maps polyfill like so\n\u0026lt;script async src=\u0026#34;https://unpkg.com/es-module-shims@1.6.3/dist/es-module-shims.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; To import addons like OrbitControls.js use the following\nimport {OrbitControls} from \u0026#39;three/addons/controls/OrbitControls.js\u0026#39;; Don\u0026rsquo;t forget to add addons to the import map like so\n\u0026lt;script type=\u0026#34;importmap\u0026#34;\u0026gt; { \u0026#34;imports\u0026#34;: { \u0026#34;three\u0026#34;: \u0026#34;./path/to/three.module.js\u0026#34;, \u0026#34;three/addons/\u0026#34;: \u0026#34;./different/path/to/examples/jsm/\u0026#34; } } \u0026lt;/script\u0026gt; You can also use a CDN\n\u0026lt;script type=\u0026#34;importmap\u0026#34;\u0026gt; { \u0026#34;imports\u0026#34;: { \u0026#34;three\u0026#34;: \u0026#34;https://unpkg.com/three@\u0026lt;version\u0026gt;/build/three.module.js\u0026#34;, \u0026#34;three/addons/\u0026#34;: \u0026#34;https://unpkg.com/three@\u0026lt;version\u0026gt;/examples/jsm/\u0026#34; } } \u0026lt;/script\u0026gt; To conclude, the recommended way of using three.js is\n\u0026lt;script async src=\u0026#34;https://unpkg.com/es-module-shims@1.6.3/dist/es-module-shims.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;importmap\u0026#34;\u0026gt; { \u0026#34;imports\u0026#34;: { \u0026#34;three\u0026#34;: \u0026#34;./path/to/three.module.js\u0026#34;, \u0026#34;three/addons/\u0026#34;: \u0026#34;./different/path/to/examples/jsm/\u0026#34; } } \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import * as THREE from \u0026#39;three\u0026#39;; import {OrbitControls} from \u0026#39;three/addons/controls/OrbitControls.js\u0026#39;; ... \u0026lt;/script\u0026gt; "},{"id":322,"href":"/docs/references/libs-and-fwks/react-three/fundamentals/furthermore/","title":"Furthermore","section":"Fundamentals","content":" Furthermore # Primitiveshttps://threejs.org/manual/#en/primitivesScene Graphhttps://threejs.org/manual/#en/scenegraphMaterialshttps://threejs.org/manual/#en/materialsTextureshttps://threejs.org/manual/#en/texturesLightshttps://threejs.org/manual/#en/lightsCamerashttps://threejs.org/manual/#en/camerasShadowsFoghttps://threejs.org/manual/#en/shadowsFoghttps://threejs.org/manual/#en/fogRender Targetshttps://threejs.org/manual/#en/rendertargetsCustom BufferGeometryhttps://threejs.org/manual/#en/custom-buffergeometry "},{"id":323,"href":"/docs/references/libs-and-fwks/react-three/getting-started/examplesin-progress/","title":"Examples(in Progress)","section":"Getting Started","content":" Examples (In progress) # Showcase # MonitorsFlying bananasRoom with soft shadows Game prototypes # Basic examples # https://docs.pmnd.rs/react-three-fiber/getting-started/examples\n"},{"id":324,"href":"/docs/references/libs-and-fwks/react-three/getting-started/installation/","title":"Installation","section":"Getting Started","content":" Installation # npm install three @react-three/fiber Fiber is compatible with React v18.0.0+ and works with ReactDOM and React Native.\nGetting started with React Three Fiber is not nearly as hard as you might have thought, but various frameworks may require particular attention.\nWe\u0026rsquo;ve put together guides for getting started with each popular framework:\nCreate React App Vite.js Next.js CDN w/o build tools React Native If you just want to give it a try, fork this example on codesandbox!\nCreate React App # create-react-app will work out of the box, nothing special here!\n# Create app npx create-react-app my-app # Install dependencies cd my-app npm install three @react-three/fiber # Start development server npm run start Vite.js # vite will also work out of the box.\n# Create app npm create vite my-app # Select react as framework # Install dependencies cd my-app npm install three @react-three/fiber # Start development server npm run devja Next.js # It should work out of the box but you will encounter untranspiled add-ons in the three.js ecosystem, in that case,\nNext.js 13.1 or latest version # You need to add three to transpilePackages property in next.config.js:\ntranspilePackages: [\u0026#39;three\u0026#39;], Next.js 13.0 or oldest version # You can install the next-transpile-modules module:\nnpm install next-transpile-modules --save-dev then, add this to your next.config.js\nconst withTM = require(\u0026#39;next-transpile-modules\u0026#39;)([\u0026#39;three\u0026#39;]) module.exports = withTM() Make sure to check out our official next.js starter, too!\nWithout build tools # You can use React Three Fiber with browser-ready ES Modules from esm.sh and a JSX-like syntax powered by htm.\nimport ReactDOM from \u0026#39;https://esm.sh/react-dom\u0026#39; import React, { useRef, useState } from \u0026#39;https://esm.sh/react\u0026#39; import { Canvas, useFrame } from \u0026#39;https://esm.sh/@react-three/fiber\u0026#39; import htm from \u0026#39;https://esm.sh/htm\u0026#39; const html = htm.bind(React.createElement) ReactDOM.render(html`\u0026lt;${Canvas}\u0026gt;...\u0026lt;//\u0026gt;`, document.getElementById(\u0026#39;root\u0026#39;)) Full example import ReactDOM from \u0026#39;https://esm.sh/react-dom\u0026#39; import React, { useRef, useState } from \u0026#39;https://esm.sh/react\u0026#39; import { Canvas, useFrame } from \u0026#39;https://esm.sh/@react-three/fiber\u0026#39; import htm from \u0026#39;https://esm.sh/htm\u0026#39; const html = htm.bind(React.createElement) function Box(props) { const meshRef = useRef() const [hovered, setHover] = useState(false) const [active, setActive] = useState(false) useFrame(() =\u0026gt; (meshRef.current.rotation.x = meshRef.current.rotation.y += 0.01)) return html` \u0026lt;mesh ...${props} ref=${meshRef} scale=${active ? 1.5 : 1} onClick=${() =\u0026gt; setActive(!active)} onPointerOver=${() =\u0026gt; setHover(true)} onPointerOut=${() =\u0026gt; setHover(false)} \u0026gt; \u0026lt;boxGeometry args=${[1, 1, 1]} /\u0026gt; \u0026lt;meshStandardMaterial color=${hovered ? \u0026#39;hotpink\u0026#39; : \u0026#39;orange\u0026#39;} /\u0026gt; \u0026lt;/mesh\u0026gt;` } ReactDOM.render( html` \u0026lt;${Canvas}\u0026gt; \u0026lt;ambientLight /\u0026gt; \u0026lt;pointLight position=${[10, 10, 10]} /\u0026gt; \u0026lt;${Box} position=${[-1.2, 0, 0]} /\u0026gt; \u0026lt;${Box} position=${[1.2, 0, 0]} /\u0026gt; \u0026lt;//\u0026gt;`, document.getElementById(\u0026#39;root\u0026#39;), ) React Native # R3F v8 adds support for react-native and can be imported from @react-three/fiber/native. We use expo-gl and expo-asset under the hood for WebGL2 bindings and ensuring interplay between Metro and threejs loaders.\nTo get started, create an app via expo or react-native:\n# Create a managed/bare app npx create-expo-app cd my-app # or # Create and link bare app npx react-native init my-app npx install-expo-modules@latest cd my-app Then install dependencies (for manual installation or migration, see expo modules installation):\n# Automatically install expo install expo-gl # Install NPM dependencies npm install three @react-three/fiber Some configuration may be required to tell the Metro bundler about your assets if you use useLoader or Drei abstractions like useGLTF and useTexture:\n// metro.config.js module.exports = { resolver: { sourceExts: [\u0026#39;js\u0026#39;, \u0026#39;jsx\u0026#39;, \u0026#39;json\u0026#39;, \u0026#39;ts\u0026#39;, \u0026#39;tsx\u0026#39;, \u0026#39;cjs\u0026#39;], assetExts: [\u0026#39;glb\u0026#39;, \u0026#39;gltf\u0026#39;, \u0026#39;png\u0026#39;, \u0026#39;jpg\u0026#39;], }, } R3F\u0026rsquo;s API is completely x-platform, so you can use events and hooks just as you would on the web.\nJust make sure to import from @react-three/fiber/native or @react-three/drei/native to use their native targets.\nimport React, { useRef, useState } from \u0026#39;react\u0026#39; import { Canvas, useFrame } from \u0026#39;@react-three/fiber/native\u0026#39; function Box(props) { const meshRef = useRef(null) const [hovered, setHover] = useState(false) const [active, setActive] = useState(false) useFrame((state, delta) =\u0026gt; (meshRef.current.rotation.x += 0.01)) return ( \u0026lt;mesh {...props} ref={meshRef} scale={active ? 1.5 : 1} onClick={(event) =\u0026gt; setActive(!active)} onPointerOver={(event) =\u0026gt; setHover(true)} onPointerOut={(event) =\u0026gt; setHover(false)}\u0026gt; \u0026lt;boxGeometry args={[1, 1, 1]} /\u0026gt; \u0026lt;meshStandardMaterial color={hovered ? \u0026#39;hotpink\u0026#39; : \u0026#39;orange\u0026#39;} /\u0026gt; \u0026lt;/mesh\u0026gt; ) } export default function App() { return ( \u0026lt;Canvas\u0026gt; \u0026lt;ambientLight /\u0026gt; \u0026lt;pointLight position={[10, 10, 10]} /\u0026gt; \u0026lt;Box position={[-1.2, 0, 0]} /\u0026gt; \u0026lt;Box position={[1.2, 0, 0]} /\u0026gt; \u0026lt;/Canvas\u0026gt; ) } "},{"id":325,"href":"/docs/references/libs-and-fwks/react-three/getting-started/introduction/","title":"Introduction","section":"Getting Started","content":" Introduction # https://docs.pmnd.rs/react-three-fiber/getting-started/examples\nBuild your scene declaratively with re-usable, self-contained components that react to state, are readily interactive and can participate in React\u0026rsquo;s ecosystem.\nnpm install three @types/three @react-three/fiber Does it have limitations?\nNone. Everything that works in Threejs will work here without exception.\nIs it slower than plain Threejs?\nNo. There is no overhead. Components render outside of React. It outperforms Threejs in scale due to Reacts scheduling abilities.\nCan it keep up with frequent feature updates to Threejs?\nYes. It merely expresses Threejs in JSX, \u0026lt;mesh /\u0026gt; dynamically turns into new THREE.Mesh(). If a new Threejs version adds, removes or changes features, it will be available to you instantly without depending on updates to this library.\nWhat does it look like? # Let\u0026rsquo;s make a re-usable component that has its own state, reacts to user-input and participates in the render-loop. ( live demo). import { createRoot } from \u0026#39;react-dom/client\u0026#39; import React, { useRef, useState } from \u0026#39;react\u0026#39; import { Canvas, useFrame } from \u0026#39;@react-three/fiber\u0026#39; function Box(props) { // This reference will give us direct access to the mesh const meshRef = useRef() // Set up state for the hovered and active state const [hovered, setHover] = useState(false) const [active, setActive] = useState(false) // Subscribe this component to the render-loop, rotate the mesh every frame useFrame((state, delta) =\u0026gt; (meshRef.current.rotation.x += delta)) // Return view, these are regular three.js elements expressed in JSX return ( \u0026lt;mesh {...props} ref={meshRef} scale={active ? 1.5 : 1} onClick={(event) =\u0026gt; setActive(!active)} onPointerOver={(event) =\u0026gt; setHover(true)} onPointerOut={(event) =\u0026gt; setHover(false)}\u0026gt; \u0026lt;boxGeometry args={[1, 1, 1]} /\u0026gt; \u0026lt;meshStandardMaterial color={hovered ? \u0026#39;hotpink\u0026#39; : \u0026#39;orange\u0026#39;} /\u0026gt; \u0026lt;/mesh\u0026gt; ) } createRoot(document.getElementById(\u0026#39;root\u0026#39;)).render( \u0026lt;Canvas\u0026gt; \u0026lt;ambientLight /\u0026gt; \u0026lt;pointLight position={[10, 10, 10]} /\u0026gt; \u0026lt;Box position={[-1.2, 0, 0]} /\u0026gt; \u0026lt;Box position={[1.2, 0, 0]} /\u0026gt; \u0026lt;/Canvas\u0026gt;, ) Show TypeScript example # npm install @types/three import * as THREE from \u0026#39;three\u0026#39; import { createRoot } from \u0026#39;react-dom/client\u0026#39; import React, { useRef, useState } from \u0026#39;react\u0026#39; import { Canvas, useFrame, ThreeElements } from \u0026#39;@react-three/fiber\u0026#39; function Box(props: ThreeElements[\u0026#39;mesh\u0026#39;]) { const meshRef = useRef\u0026lt;THREE.Mesh\u0026gt;(null!) const [hovered, setHover] = useState(false) const [active, setActive] = useState(false) useFrame((state, delta) =\u0026gt; (meshRef.current.rotation.x += delta)) return ( \u0026lt;mesh {...props} ref={meshRef} scale={active ? 1.5 : 1} onClick={(event) =\u0026gt; setActive(!active)} onPointerOver={(event) =\u0026gt; setHover(true)} onPointerOut={(event) =\u0026gt; setHover(false)}\u0026gt; \u0026lt;boxGeometry args={[1, 1, 1]} /\u0026gt; \u0026lt;meshStandardMaterial color={hovered ? \u0026#39;hotpink\u0026#39; : \u0026#39;orange\u0026#39;} /\u0026gt; \u0026lt;/mesh\u0026gt; ) } createRoot(document.getElementById(\u0026#39;root\u0026#39;)).render( \u0026lt;Canvas\u0026gt; \u0026lt;ambientLight /\u0026gt; \u0026lt;pointLight position={[10, 10, 10]} /\u0026gt; \u0026lt;Box position={[-1.2, 0, 0]} /\u0026gt; \u0026lt;Box position={[1.2, 0, 0]} /\u0026gt; \u0026lt;/Canvas\u0026gt;, ) Live demo: https://codesandbox.io/s/icy-tree-brnsm?file=/src/App.tsx\nShow React Native example # For installation instructions see react native installation instructions.\nimport React, { useRef, useState } from \u0026#39;react\u0026#39; import { Canvas, useFrame } from \u0026#39;@react-three/fiber/native\u0026#39; function Box(props) { const meshRef = useRef(null) const [hovered, setHover] = useState(false) const [active, setActive] = useState(false) useFrame((state, delta) =\u0026gt; (meshRef.current.rotation.x += delta)) return ( \u0026lt;mesh {...props} ref={meshRef} scale={active ? 1.5 : 1} onClick={(event) =\u0026gt; setActive(!active)} onPointerOver={(event) =\u0026gt; setHover(true)} onPointerOut={(event) =\u0026gt; setHover(false)}\u0026gt; \u0026lt;boxGeometry args={[1, 1, 1]} /\u0026gt; \u0026lt;meshStandardMaterial color={hovered ? \u0026#39;hotpink\u0026#39; : \u0026#39;orange\u0026#39;} /\u0026gt; \u0026lt;/mesh\u0026gt; ) } export default function App() { return ( \u0026lt;Canvas\u0026gt; \u0026lt;ambientLight /\u0026gt; \u0026lt;pointLight position={[10, 10, 10]} /\u0026gt; \u0026lt;Box position={[-1.2, 0, 0]} /\u0026gt; \u0026lt;Box position={[1.2, 0, 0]} /\u0026gt; \u0026lt;/Canvas\u0026gt; ) } First steps # You need to be versed in both React and Threejs before rushing into this. If you are unsure about React consult the official React docs, especially the section about hooks. As for Threejs, make sure you at least glance over the following links:\nMake sure you have a basic grasp of Threejs. Keep that site open. When you know what a scene is, a camera, mesh, geometry, material, fork the demo above. Look up the JSX elements that you see (mesh, ambientLight, etc), all threejs exports are native to three-fiber. Try changing some values, scroll through our API to see what the various settings and hooks do. Some helpful material:\nThreejs-docs and examples Discover Threejs, especially the Tips and Tricks chapter for best practices Bruno Simons Threejs Jouney, arguably the best learning resource, now includes a full R3F chapter https://threejs-journey.com/\nEco system # There is a vibrant and extensive eco system around three-fiber, full of libraries, helpers and abstractions.\n@react-three/drei – useful helpers, this is an eco system in itself @react-three/gltfjsx – turns GLTFs into JSX components @react-three/postprocessing – post-processing effects @react-three/test-renderer – for unit tests in node @react-three/flex – flexbox for react-three-fiber @react-three/xr – VR/AR controllers and events @react-three/csg – constructive solid geometry @react-three/rapier – 3D physics using Rapier @react-three/cannon – 3D physics using Cannon @react-three/p2 – 2D physics using P2 @react-three/a11y – real a11y for your scene @react-three/gpu-pathtracer – realistic path tracing create-r3f-app next – nextjs starter lamina – layer based shader materials zustand – flux based state management jotai – atoms based state management valtio – proxy based state management react-spring – a spring-physics-based animation library framer-motion-3d – framer motion, a popular animation library use-gesture – mouse/touch gestures leva – create GUI controls in seconds maath – a kitchen sink for math helpers miniplex – ECS (entity management system) composer-suite – composing shaders, particles, effects and game mechanics How to contribute # If you like this project, please consider helping out. All contributions are welcome as well as donations to Opencollective, or in crypto BTC: 36fuguTPxGCNnYZSRdgdh6Ea94brCAjMbH, ETH: 0x6E3f79Ea1d0dcedeb33D3fC6c34d2B1f156F2682.\nBackers # Thank you to all our backers! 🙏\nContributors # This project exists thanks to all the people who contribute.\n"},{"id":326,"href":"/docs/references/libs-and-fwks/react-three/getting-started/your-first-scene/","title":"Your First Scene","section":"Getting Started","content":" Your first scene # This tutorial will assume some React knowledge.\nSetting up the Canvas # We\u0026rsquo;ll start by importing the \u0026lt;Canvas /\u0026gt; component from @react-three/fiber and putting it in our React tree.\nimport { createRoot } from \u0026#39;react-dom/client\u0026#39; import { Canvas } from \u0026#39;@react-three/fiber\u0026#39; function App() { return ( \u0026lt;div id=\u0026#34;canvas-container\u0026#34;\u0026gt; \u0026lt;Canvas /\u0026gt; \u0026lt;/div\u0026gt; ) } createRoot(document.getElementById(\u0026#39;root\u0026#39;)).render(\u0026lt;App /\u0026gt;) The Canvas component does some important setup work behind the scenes:\nIt sets up a Scene and a Camera, the basic building blocks necessary for rendering It renders our scene every frame, you do not need a traditional render-loop [!warning] Canvas is responsive to fit the parent node, so you can control how big it is by changing the parents width and height, in this case #canvas-container.\nAdding a Mesh Component # To actually see something in our scene, we\u0026rsquo;ll add a lowercase \u0026lt;mesh /\u0026gt; native element, which is the direct equivalent to new THREE.Mesh().\n\u0026lt;Canvas\u0026gt; \u0026lt;mesh /\u0026gt; [!hint] Note that we don\u0026rsquo;t need to import anything, All three.js objects will be treated as native JSX elements, just like you can just write \u0026lt;div /\u0026gt; or \u0026lt;span /\u0026gt; in regular ReactDOM. The general rule is that Fiber components are available under the camel-case version of their name in three.js.\nA Mesh is a basic scene object in three.js, and it\u0026rsquo;s used to hold the geometry and the material needed to represent a shape in 3D space. We\u0026rsquo;ll create a new mesh using a BoxGeometry and a MeshStandardMaterial which automatically attach to their parent.\n\u0026lt;Canvas\u0026gt; \u0026lt;mesh\u0026gt; \u0026lt;boxGeometry /\u0026gt; \u0026lt;meshStandardMaterial /\u0026gt; \u0026lt;/mesh\u0026gt; Let\u0026rsquo;s pause for a moment to understand exactly what is happening here. The code we just wrote is the equivalent to this three.js code:\nconst scene = new THREE.Scene() const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000) const renderer = new THREE.WebGLRenderer() renderer.setSize(width, height) document.querySelector(\u0026#39;#canvas-container\u0026#39;).appendChild(renderer.domElement) const mesh = new THREE.Mesh() mesh.geometry = new THREE.BoxGeometry() mesh.material = new THREE.MeshStandardMaterial() scene.add(mesh) function animate() { requestAnimationFrame(animate) renderer.render(scene, camera) } animate() Constructor arguments # According to the docs for BoxGeometry we can optionally pass three arguments for: width, length and depth:\nnew THREE.BoxGeometry(2, 2, 2) In order to do this in Fiber we use the args prop, which always takes an array whose items represent the constructor arguments.\n\u0026lt;boxGeometry args={[2, 2, 2]} /\u0026gt; [!hint] Note that every time you change args, the object must be re-constructed!\nAdding lights # Next, we will add some lights to our scene, by putting these components into our canvas.\n\u0026lt;Canvas\u0026gt; \u0026lt;ambientLight intensity={0.1} /\u0026gt; \u0026lt;directionalLight color=\u0026#34;red\u0026#34; position={[0, 0, 5]} /\u0026gt; Props # This introduces us to the last fundamental concept of Fiber, how React props work on three.js objects. When you set any prop on a Fiber component, it will set the property of the same name on the three.js instance.\nLet\u0026rsquo;s focus on our ambientLight, whose documentation tells us that we can optionally construct it with a color, but it can also receive props.\n\u0026lt;ambientLight intensity={0.1} /\u0026gt; Which is the equivalent to:\nconst light = new THREE.AmbientLight() light.intensity = 0.1 Shortcuts # There are a few shortcuts for props that have a .set() method (colors, vectors, etc).\nconst light = new THREE.DirectionalLight() light.position.set(0, 0, 5) light.color.set(\u0026#39;red\u0026#39;) Which is the same as the following in JSX:\n\u0026lt;directionalLight position={[0, 0, 5]} color=\u0026#34;red\u0026#34; /\u0026gt; Please refer to the API for a deeper explanation.\nThe result # \u0026lt;Canvas\u0026gt; \u0026lt;ambientLight intensity={0.1} /\u0026gt; \u0026lt;directionalLight color=\u0026#34;red\u0026#34; position={[0, 0, 5]} /\u0026gt; \u0026lt;mesh\u0026gt; \u0026lt;boxGeometry /\u0026gt; \u0026lt;meshStandardMaterial /\u0026gt; \u0026lt;/mesh\u0026gt; \u0026lt;/Canvas\u0026gt; getting-started-01\nExercise # try different materials, like MeshNormalMaterial or MeshBasicMaterial, give them a color try different geometries, like SphereGeometry or OctahedronGeometry try changing the position on our mesh component, by setting the prop with the same name try extracting our mesh to a new component "},{"id":327,"href":"/docs/references/meta-frameworks/react/advanced/accessibility/","title":"Accessibility","section":"Advanced","content":" ⭐ Accessibility # Why Accessibility? # Web accessibility (also referred to as a11y) is the design and creation of websites that can be used by everyone. Accessibility support is necessary to allow assistive technology to interpret web pages.\nReact fully supports building accessible websites, often by using standard HTML techniques.\nStandards and Guidelines # WCAG # The Web Content Accessibility Guidelines provides guidelines for creating accessible web sites.\nThe following WCAG checklists provide an overview:\nWCAG checklist from Wuhcag WCAG checklist from WebAIM Checklist from The A11Y Project WAI-ARIA # The Web Accessibility Initiative - Accessible Rich Internet Applications document contains techniques for building fully accessible JavaScript widgets.\nNote that all aria-* HTML attributes are fully supported in JSX. Whereas most DOM properties and attributes in React are camelCased, these attributes should be hyphen-cased (also known as kebab-case, lisp-case, etc) as they are in plain HTML:\n\u0026lt;input type=\u0026#34;text\u0026#34; aria-label={labelText} aria-required=\u0026#34;true\u0026#34; onChange={onchangeHandler} value={inputValue} name=\u0026#34;name\u0026#34; /\u0026gt; Semantic HTML # Semantic HTML is the foundation of accessibility in a web application. Using the various HTML elements to reinforce the meaning of information in our websites will often give us accessibility for free.\nMDN HTML elements reference Sometimes we break HTML semantics when we add \u0026lt;div\u0026gt; elements to our JSX to make our React code work, especially when working with lists (\u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt; and \u0026lt;dl\u0026gt;) and the HTML \u0026lt;table\u0026gt;. In these cases we should rather use React Fragments to group together multiple elements.\nFor example,\nimport React, { Fragment } from \u0026#39;react\u0026#39;; function ListItem({ item }) { return ( \u0026lt;Fragment\u0026gt; \u0026lt;dt\u0026gt;{item.term}\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;{item.description}\u0026lt;/dd\u0026gt; \u0026lt;/Fragment\u0026gt; ); } function Glossary(props) { return ( \u0026lt;dl\u0026gt; {props.items.map(item =\u0026gt; ( \u0026lt;ListItem item={item} key={item.id} /\u0026gt; ))} \u0026lt;/dl\u0026gt; ); } You can map a collection of items to an array of fragments as you would any other type of element as well:\nfunction Glossary(props) { return ( \u0026lt;dl\u0026gt; {props.items.map(item =\u0026gt; ( // Fragments should also have a `key` prop when mapping collections \u0026lt;Fragment key={item.id}\u0026gt; \u0026lt;dt\u0026gt;{item.term}\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;{item.description}\u0026lt;/dd\u0026gt; \u0026lt;/Fragment\u0026gt; ))} \u0026lt;/dl\u0026gt; ); } When you don’t need any props on the Fragment tag you can use the short syntax, if your tooling supports it:\nfunction ListItem({ item }) { return ( \u0026lt;\u0026gt; \u0026lt;dt\u0026gt;{item.term}\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;{item.description}\u0026lt;/dd\u0026gt; \u0026lt;/\u0026gt; ); } For more info, see the Fragments documentation.\nAccessible Forms # Labeling # Every HTML form control, such as \u0026lt;input\u0026gt; and \u0026lt;textarea\u0026gt;, needs to be labeled accessibly. We need to provide descriptive labels that are also exposed to screen readers.\nThe following resources show us how to do this:\nThe W3C shows us how to label elements WebAIM shows us how to label elements The Paciello Group explains accessible names Although these standard HTML practices can be directly used in React, note that the for attribute is written as htmlFor in JSX:\n\u0026lt;label htmlFor=\u0026#34;namedInput\u0026#34;\u0026gt;Name:\u0026lt;/label\u0026gt;\u0026lt;input id=\u0026#34;namedInput\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34;/\u0026gt; Notifying the user of errors # Error situations need to be understood by all users. The following link shows us how to expose error texts to screen readers as well:\nThe W3C demonstrates user notifications WebAIM looks at form validation Focus Control # Ensure that your web application can be fully operated with the keyboard only:\nWebAIM talks about keyboard accessibility Keyboard focus and focus outline # Keyboard focus refers to the current element in the DOM that is selected to accept input from the keyboard. We see it everywhere as a focus outline similar to that shown in the following image:\nOnly ever use CSS that removes this outline, for example by setting outline: 0, if you are replacing it with another focus outline implementation.\nMechanisms to skip to desired content # Provide a mechanism to allow users to skip past navigation sections in your application as this assists and speeds up keyboard navigation.\nSkiplinks or Skip Navigation Links are hidden navigation links that only become visible when keyboard users interact with the page. They are very easy to implement with internal page anchors and some styling:\nWebAIM - Skip Navigation Links Also use landmark elements and roles, such as \u0026lt;main\u0026gt; and \u0026lt;aside\u0026gt;, to demarcate page regions as assistive technology allow the user to quickly navigate to these sections.\nRead more about the use of these elements to enhance accessibility here:\nAccessible Landmarks Programmatically managing focus # Our React applications continuously modify the HTML DOM during runtime, sometimes leading to keyboard focus being lost or set to an unexpected element. In order to repair this, we need to programmatically nudge the keyboard focus in the right direction. For example, by resetting keyboard focus to a button that opened a modal window after that modal window is closed.\nMDN Web Docs takes a look at this and describes how we can build keyboard-navigable JavaScript widgets.\nTo set focus in React, we can use Refs to DOM elements.\nUsing this, we first create a ref to an element in the JSX of a component class:\nclass CustomTextInput extends React.Component { constructor(props) { super(props); // Create a ref to store the textInput DOM element this.textInput = React.createRef(); } render() { // Use the `ref` callback to store a reference to the text input DOM // element in an instance field (for example, this.textInput). return ( \u0026lt;input type=\u0026#34;text\u0026#34; ref={this.textInput} /\u0026gt; ); } } Then we can focus it elsewhere in our component when needed:\nfocus() { // Explicitly focus the text input using the raw DOM API // Note: we\u0026#39;re accessing \u0026#34;current\u0026#34; to get the DOM node this.textInput.current.focus(); } Sometimes a parent component needs to set focus to an element in a child component. We can do this by exposing DOM refs to parent components through a special prop on the child component that forwards the parent’s ref to the child’s DOM node.\nfunction CustomTextInput(props) { return ( \u0026lt;div\u0026gt; \u0026lt;input ref={props.inputRef} /\u0026gt; \u0026lt;/div\u0026gt; ); } class Parent extends React.Component { constructor(props) { super(props); this.inputElement = React.createRef(); } render() { return ( \u0026lt;CustomTextInput inputRef={this.inputElement} /\u0026gt; ); } } // Now you can set focus when required. this.inputElement.current.focus(); When using a HOC to extend components, it is recommended to forward the ref to the wrapped component using the forwardRef function of React. If a third party HOC does not implement ref forwarding, the above pattern can still be used as a fallback.\nA great focus management example is the react-aria-modal. This is a relatively rare example of a fully accessible modal window. Not only does it set initial focus on the cancel button (preventing the keyboard user from accidentally activating the success action) and trap keyboard focus inside the modal, it also resets focus back to the element that initially triggered the modal.\nNote:\nWhile this is a very important accessibility feature, it is also a technique that should be used judiciously. Use it to repair the keyboard focus flow when it is disturbed, not to try and anticipate how users want to use applications.\nMouse and pointer events # Ensure that all functionality exposed through a mouse or pointer event can also be accessed using the keyboard alone. Depending only on the pointer device will lead to many cases where keyboard users cannot use your application.\nTo illustrate this, let’s look at a prolific example of broken accessibility caused by click events. This is the outside click pattern, where a user can disable an opened popover by clicking outside the element.\nThis is typically implemented by attaching a click event to the window object that closes the popover:\nclass OuterClickExample extends React.Component { constructor(props) { super(props); this.state = { isOpen: false }; this.toggleContainer = React.createRef(); this.onClickHandler = this.onClickHandler.bind(this); this.onClickOutsideHandler = this.onClickOutsideHandler.bind(this); } componentDidMount() { window.addEventListener(\u0026#39;click\u0026#39;, this.onClickOutsideHandler); } componentWillUnmount() { window.removeEventListener(\u0026#39;click\u0026#39;, this.onClickOutsideHandler); } onClickHandler() { this.setState(currentState =\u0026gt; ({ isOpen: !currentState.isOpen })); } onClickOutsideHandler(event) { if (this.state.isOpen \u0026amp;\u0026amp; !this.toggleContainer.current.contains(event.target)) { this.setState({ isOpen: false }); } } render() { return ( \u0026lt;div ref={this.toggleContainer}\u0026gt; \u0026lt;button onClick={this.onClickHandler}\u0026gt;Select an option\u0026lt;/button\u0026gt; {this.state.isOpen \u0026amp;\u0026amp; ( \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Option 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Option 2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Option 3\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; )} \u0026lt;/div\u0026gt; ); } } This may work fine for users with pointer devices, such as a mouse, but operating this with the keyboard alone leads to broken functionality when tabbing to the next element as the window object never receives a click event. This can lead to obscured functionality which blocks users from using your application.\nThe same functionality can be achieved by using appropriate event handlers instead, such as onBlur and onFocus:\nclass BlurExample extends React.Component { constructor(props) { super(props); this.state = { isOpen: false }; this.timeOutId = null; this.onClickHandler = this.onClickHandler.bind(this); this.onBlurHandler = this.onBlurHandler.bind(this); this.onFocusHandler = this.onFocusHandler.bind(this); } onClickHandler() { this.setState(currentState =\u0026gt; ({ isOpen: !currentState.isOpen })); } // We close the popover on the next tick by using setTimeout. // This is necessary because we need to first check if // another child of the element has received focus as // the blur event fires prior to the new focus event. onBlurHandler() { this.timeOutId = setTimeout(() =\u0026gt; { this.setState({ isOpen: false }); }); } // If a child receives focus, do not close the popover. onFocusHandler() { clearTimeout(this.timeOutId); } render() { // React assists us by bubbling the blur and // focus events to the parent. return ( \u0026lt;div onBlur={this.onBlurHandler} onFocus={this.onFocusHandler}\u0026gt; \u0026lt;button onClick={this.onClickHandler} aria-haspopup=\u0026#34;true\u0026#34; aria-expanded={this.state.isOpen}\u0026gt; Select an option \u0026lt;/button\u0026gt; {this.state.isOpen \u0026amp;\u0026amp; ( \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Option 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Option 2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Option 3\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; )} \u0026lt;/div\u0026gt; ); } } This code exposes the functionality to both pointer device and keyboard users. Also note the added aria-* props to support screen-reader users. For simplicity’s sake the keyboard events to enable arrow key interaction of the popover options have not been implemented.\nThis is one example of many cases where depending on only pointer and mouse events will break functionality for keyboard users. Always testing with the keyboard will immediately highlight the problem areas which can then be fixed by using keyboard aware event handlers.\nA more complex user experience should not mean a less accessible one. Whereas accessibility is most easily achieved by coding as close to HTML as possible, even the most complex widget can be coded accessibly.\nHere we require knowledge of ARIA Roles as well as ARIA States and Properties. These are toolboxes filled with HTML attributes that are fully supported in JSX and enable us to construct fully accessible, highly functional React components.\nEach type of widget has a specific design pattern and is expected to function in a certain way by users and user agents alike:\nARIA Authoring Practices Guide (APG) - Design Patterns and Examples Heydon Pickering - ARIA Examples Inclusive Components Other Points for Consideration # Setting the language # Indicate the human language of page texts as screen reader software uses this to select the correct voice settings:\nWebAIM - Document Language Setting the document title # Set the document \u0026lt;title\u0026gt; to correctly describe the current page content as this ensures that the user remains aware of the current page context:\nWCAG - Understanding the Document Title Requirement We can set this in React using the React Document Title Component.\nColor contrast # Ensure that all readable text on your website has sufficient color contrast to remain maximally readable by users with low vision:\nWCAG - Understanding the Color Contrast Requirement Everything About Color Contrast And Why You Should Rethink It A11yProject - What is Color Contrast It can be tedious to manually calculate the proper color combinations for all cases in your website so instead, you can calculate an entire accessible color palette with Colorable.\nBoth the aXe and WAVE tools mentioned below also include color contrast tests and will report on contrast errors.\nIf you want to extend your contrast testing abilities you can use these tools:\nWebAIM - Color Contrast Checker The Paciello Group - Color Contrast Analyzer There are a number of tools we can use to assist in the creation of accessible web applications.\nThe keyboard # By far the easiest and also one of the most important checks is to test if your entire website can be reached and used with the keyboard alone. Do this by:\nDisconnecting your mouse. Using Tab and Shift+Tab to browse. Using Enter to activate elements. Where required, using your keyboard arrow keys to interact with some elements, such as menus and dropdowns. Development assistance # We can check some accessibility features directly in our JSX code. Often intellisense checks are already provided in JSX aware IDE’s for the ARIA roles, states and properties. We also have access to the following tool:\neslint-plugin-jsx-a11y\nThe eslint-plugin-jsx-a11y plugin for ESLint provides AST linting feedback regarding accessibility issues in your JSX. Many IDE’s allow you to integrate these findings directly into code analysis and source code windows.\nCreate React App has this plugin with a subset of rules activated. If you want to enable even more accessibility rules, you can create an .eslintrc file in the root of your project with this content:\n{ \u0026#34;extends\u0026#34;: [\u0026#34;react-app\u0026#34;, \u0026#34;plugin:jsx-a11y/recommended\u0026#34;], \u0026#34;plugins\u0026#34;: [\u0026#34;jsx-a11y\u0026#34;] } Testing accessibility in the browser # A number of tools exist that can run accessibility audits on web pages in your browser. Please use them in combination with other accessibility checks mentioned here as they can only test the technical accessibility of your HTML.\naXe, aXe-core and react-axe\nDeque Systems offers aXe-core for automated and end-to-end accessibility tests of your applications. This module includes integrations for Selenium.\nThe Accessibility Engine or aXe, is an accessibility inspector browser extension built on aXe-core.\nYou can also use the @axe-core/react module to report these accessibility findings directly to the console while developing and debugging.\nWebAIM WAVE\nThe Web Accessibility Evaluation Tool is another accessibility browser extension.\nAccessibility inspectors and the Accessibility Tree\nThe Accessibility Tree is a subset of the DOM tree that contains accessible objects for every DOM element that should be exposed to assistive technology, such as screen readers.\nIn some browsers we can easily view the accessibility information for each element in the accessibility tree:\nUsing the Accessibility Inspector in Firefox Using the Accessibility Inspector in Chrome Using the Accessibility Inspector in OS X Safari Screen readers # Testing with a screen reader should form part of your accessibility tests.\nPlease note that browser / screen reader combinations matter. It is recommended that you test your application in the browser best suited to your screen reader of choice.\nCommonly Used Screen Readers # NVDA in Firefox\nNonVisual Desktop Access or NVDA is an open source Windows screen reader that is widely used.\nRefer to the following guides on how to best use NVDA:\nWebAIM - Using NVDA to Evaluate Web Accessibility Deque - NVDA Keyboard Shortcuts VoiceOver in Safari\nVoiceOver is an integrated screen reader on Apple devices.\nRefer to the following guides on how to activate and use VoiceOver:\nWebAIM - Using VoiceOver to Evaluate Web Accessibility Deque - VoiceOver for OS X Keyboard Shortcuts Deque - VoiceOver for iOS Shortcuts JAWS in Internet Explorer\nJob Access With Speech or JAWS, is a prolifically used screen reader on Windows.\nRefer to the following guides on how to best use JAWS:\nWebAIM - Using JAWS to Evaluate Web Accessibility Deque - JAWS Keyboard Shortcuts Other Screen Readers # ChromeVox in Google Chrome\nChromeVox is an integrated screen reader on Chromebooks and is available as an extension for Google Chrome.\nRefer to the following guides on how best to use ChromeVox:\nGoogle Chromebook Help - Use the Built-in Screen Reader ChromeVox Classic Keyboard Shortcuts Reference "},{"id":328,"href":"/docs/references/meta-frameworks/react/advanced/error-boundaries/","title":"Error Boundaries","section":"Advanced","content":" Error Boundaries # In the past, JavaScript errors inside components used to corrupt React’s internal state and cause it to emit cryptic errors on next renders. These errors were always caused by an earlier error in the application code, but React did not provide a way to handle them gracefully in components, and could not recover from them.\nIntroducing Error Boundaries # A JavaScript error in a part of the UI shouldn’t break the whole app. To solve this problem for React users, React 16 introduces a new concept of an “error boundary”.\nError boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.\nNote\nError boundaries do not catch errors for:\nEvent handlers ( learn more) Asynchronous code (e.g. setTimeout or requestAnimationFrame callbacks) Server side rendering Errors thrown in the error boundary itself (rather than its children) A class component becomes an error boundary if it defines either (or both) of the lifecycle methods static getDerivedStateFromError() or componentDidCatch(). Use static getDerivedStateFromError() to render a fallback UI after an error has been thrown. Use componentDidCatch() to log error information.\nclass ErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false }; } static getDerivedStateFromError(error) { // Update state so the next render will show the fallback UI. return { hasError: true }; } componentDidCatch(error, errorInfo) { // You can also log the error to an error reporting service logErrorToMyService(error, errorInfo); } render() { if (this.state.hasError) { // You can render any custom fallback UI return \u0026lt;h1\u0026gt;Something went wrong.\u0026lt;/h1\u0026gt;; } return this.props.children; } } Then you can use it as a regular component:\n\u0026lt;ErrorBoundary\u0026gt; \u0026lt;MyWidget /\u0026gt; \u0026lt;/ErrorBoundary\u0026gt; Error boundaries work like a JavaScript catch {} block, but for components. Only class components can be error boundaries. In practice, most of the time you’ll want to declare an error boundary component once and use it throughout your application.\nNote that error boundaries only catch errors in the components below them in the tree. An error boundary can’t catch an error within itself. If an error boundary fails trying to render the error message, the error will propagate to the closest error boundary above it. This, too, is similar to how the catch {} block works in JavaScript.\nLive Demo # Check out this example of declaring and using an error boundary.\nWhere to Place Error Boundaries # The granularity of error boundaries is up to you. You may wrap top-level route components to display a “Something went wrong” message to the user, just like how server-side frameworks often handle crashes. You may also wrap individual widgets in an error boundary to protect them from crashing the rest of the application.\nNew Behavior for Uncaught Errors # This change has an important implication. As of React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree.\nWe debated this decision, but in our experience it is worse to leave corrupted UI in place than to completely remove it. For example, in a product like Messenger leaving the broken UI visible could lead to somebody sending a message to the wrong person. Similarly, it is worse for a payments app to display a wrong amount than to render nothing.\nThis change means that as you migrate to React 16, you will likely uncover existing crashes in your application that have been unnoticed before. Adding error boundaries lets you provide better user experience when something goes wrong.\nFor example, Facebook Messenger wraps content of the sidebar, the info panel, the conversation log, and the message input into separate error boundaries. If some component in one of these UI areas crashes, the rest of them remain interactive.\nWe also encourage you to use JS error reporting services (or build your own) so that you can learn about unhandled exceptions as they happen in production, and fix them.\nComponent Stack Traces # React 16 prints all errors that occurred during rendering to the console in development, even if the application accidentally swallows them. In addition to the error message and the JavaScript stack, it also provides component stack traces. Now you can see where exactly in the component tree the failure has happened:\nYou can also see the filenames and line numbers in the component stack trace. This works by default in Create React App projects:\nIf you don’t use Create React App, you can add this plugin manually to your Babel configuration. Note that it’s intended only for development and must be disabled in production.\nNote\nComponent names displayed in the stack traces depend on the Function.name property. If you support older browsers and devices which may not yet provide this natively (e.g. IE 11), consider including a Function.name polyfill in your bundled application, such as function.name-polyfill. Alternatively, you may explicitly set the displayName property on all your components.\nHow About try/catch? # try / catch is great but it only works for imperative code:\ntry { showButton(); } catch (error) { // ... } However, React components are declarative and specify what should be rendered:\nError boundaries preserve the declarative nature of React, and behave as you would expect. For example, even if an error occurs in a componentDidUpdate method caused by a setState somewhere deep in the tree, it will still correctly propagate to the closest error boundary.\nHow About Event Handlers? # Error boundaries do not catch errors inside event handlers.\nReact doesn’t need error boundaries to recover from errors in event handlers. Unlike the render method and lifecycle methods, the event handlers don’t happen during rendering. So if they throw, React still knows what to display on the screen.\nIf you need to catch an error inside an event handler, use the regular JavaScript try / catch statement:\nclass MyComponent extends React.Component { constructor(props) { super(props); this.state = { error: null }; this.handleClick = this.handleClick.bind(this); } handleClick() { try { // Do something that could throw } catch (error) { this.setState({ error }); } } render() { if (this.state.error) { return \u0026lt;h1\u0026gt;Caught an error.\u0026lt;/h1\u0026gt; } return \u0026lt;button onClick={this.handleClick}\u0026gt;Click Me\u0026lt;/button\u0026gt; } } Note that the above example is demonstrating regular JavaScript behavior and doesn’t use error boundaries.\nNaming Changes from React 15 # React 15 included a very limited support for error boundaries under a different method name: unstable_handleError. This method no longer works, and you will need to change it to componentDidCatch in your code starting from the first 16 beta release.\nFor this change, we’ve provided a codemod to automatically migrate your code.\n"},{"id":329,"href":"/docs/references/meta-frameworks/react/advanced/forwarding-refs/","title":"Forwarding Refs","section":"Advanced","content":" ⭐ Forwarding Refs # Ref forwarding is a technique for automatically passing a ref through a component to one of its children. This is typically not necessary for most components in the application. However, it can be useful for some kinds of components, especially in reusable component libraries. The most common scenarios are described below.\nForwarding refs to DOM components # Consider a FancyButton component that renders the native button DOM element:\nfunction FancyButton(props) { return ( \u0026lt;button className=\u0026#34;FancyButton\u0026#34;\u0026gt; {props.children} \u0026lt;/button\u0026gt; ); } React components hide their implementation details, including their rendered output. Other components using FancyButton usually will not need to obtain a ref to the inner button DOM element. This is good because it prevents components from relying on each other’s DOM structure too much.\nAlthough such encapsulation is desirable for application-level components like FeedStory or Comment, it can be inconvenient for highly reusable “leaf” components like FancyButton or MyTextInput. These components tend to be used throughout the application in a similar manner as a regular DOM button and input, and accessing their DOM nodes may be unavoidable for managing focus, selection, or animations.\nRef forwarding is an opt-in feature that lets some components take a ref they receive, and pass it further down (in other words, “forward” it) to a child.\nIn the example below, FancyButton uses React.forwardRef to obtain the ref passed to it, and then forward it to the DOM button that it renders:\nconst FancyButton = React.forwardRef((props, ref) =\u0026gt; ( \u0026lt;button ref={ref} className=\u0026#34;FancyButton\u0026#34;\u0026gt; {props.children} \u0026lt;/button\u0026gt; )); // You can now get a ref directly to the DOM button: const ref = React.createRef(); \u0026lt;FancyButton ref={ref}\u0026gt;Click me!\u0026lt;/FancyButton\u0026gt;; This way, components using FancyButton can get a ref to the underlying button DOM node and access it if necessary—just like if they used a DOM button directly.\nHere is a step-by-step explanation of what happens in the above example:\nWe create a React ref by calling React.createRef and assign it to a ref variable. We pass our ref down to \u0026lt;FancyButton ref={ref}\u0026gt; by specifying it as a JSX attribute. React passes the ref to the (props, ref) =\u0026gt; ... function inside forwardRef as a second argument. We forward this ref argument down to \u0026lt;button ref={ref}\u0026gt; by specifying it as a JSX attribute. When the ref is attached, ref.current will point to the \u0026lt;button\u0026gt; DOM node. Note\nThe second ref argument only exists when you define a component with React.forwardRef call. Regular function or class components don’t receive the ref argument, and ref is not available in props either.\nRef forwarding is not limited to DOM components. You can forward refs to class component instances, too.\nNote for component library maintainers # When you start using forwardRef in a component library, you should treat it as a breaking change and release a new major version of your library. This is because your library likely has an observably different behavior (such as what refs get assigned to, and what types are exported), and this can break apps and other libraries that depend on the old behavior.\nConditionally applying React.forwardRef when it exists is also not recommended for the same reasons: it changes how your library behaves and can break your users’ apps when they upgrade React itself.\nForwarding refs in higher-order components # This technique can also be particularly useful with higher-order components (also known as HOCs). Let’s start with an example HOC that logs component props to the console:\nfunction logProps(WrappedComponent) { class LogProps extends React.Component { componentDidUpdate(prevProps) { console.log(\u0026#39;old props:\u0026#39;, prevProps); console.log(\u0026#39;new props:\u0026#39;, this.props); } render() { return \u0026lt;WrappedComponent {...this.props} /\u0026gt;; } } return LogProps; } The “logProps” HOC passes all props through to the component it wraps, so the rendered output will be the same. For example, we can use this HOC to log all props that get passed to our “fancy button” component:\nclass FancyButton extends React.Component { focus() { // ... } // ... } // Rather than exporting FancyButton, we export LogProps. // It will render a FancyButton though. export default logProps(FancyButton); There is one caveat to the above example: refs will not get passed through. That’s because ref is not a prop. Like key, it’s handled differently by React. If you add a ref to a HOC, the ref will refer to the outermost container component, not the wrapped component.\nThis means that refs intended for our FancyButton component will actually be attached to the LogProps component:\nimport FancyButton from \u0026#39;./FancyButton\u0026#39;; const ref = React.createRef(); // The FancyButton component we imported is the LogProps HOC. // Even though the rendered output will be the same, // Our ref will point to LogProps instead of the inner FancyButton component! // This means we can\u0026#39;t call e.g. ref.current.focus() \u0026lt;FancyButton label=\u0026#34;Click Me\u0026#34; handleClick={handleClick} ref={ref}/\u0026gt;; Fortunately, we can explicitly forward refs to the inner FancyButton component using the React.forwardRef API. React.forwardRef accepts a render function that receives props and ref parameters and returns a React node. For example:\nfunction logProps(Component) { class LogProps extends React.Component { componentDidUpdate(prevProps) { console.log(\u0026#39;old props:\u0026#39;, prevProps); console.log(\u0026#39;new props:\u0026#39;, this.props); } render() { const {forwardedRef, ...rest} = this.props; // Assign the custom prop \u0026#34;forwardedRef\u0026#34; as a ref return \u0026lt;Component ref={forwardedRef} {...rest} /\u0026gt;; } } // Note the second param \u0026#34;ref\u0026#34; provided by React.forwardRef. // We can pass it along to LogProps as a regular prop, e.g. \u0026#34;forwardedRef\u0026#34; // And it can then be attached to the Component. return React.forwardRef((props, ref) =\u0026gt; { return \u0026lt;LogProps {...props} forwardedRef={ref} /\u0026gt;; });} React.forwardRef accepts a render function. React DevTools uses this function to determine what to display for the ref forwarding component.\nFor example, the following component will appear as ”ForwardRef” in the DevTools:\nconst WrappedComponent = React.forwardRef((props, ref) =\u0026gt; { return \u0026lt;LogProps {...props} forwardedRef={ref} /\u0026gt;; }); If you name the render function, DevTools will also include its name (e.g. ”ForwardRef(myFunction)”):\nconst WrappedComponent = React.forwardRef( function myFunction(props, ref) { return \u0026lt;LogProps {...props} forwardedRef={ref} /\u0026gt;; } ); You can even set the function’s displayName property to include the component you’re wrapping:\nfunction logProps(Component) { class LogProps extends React.Component { // ... } function forwardRef(props, ref) { return \u0026lt;LogProps {...props} forwardedRef={ref} /\u0026gt;; } // Give this component a more helpful display name in DevTools. // e.g. \u0026#34;ForwardRef(logProps(MyComponent))\u0026#34; const name = Component.displayName || Component.name; forwardRef.displayName = `logProps(${name})`; return React.forwardRef(forwardRef); } "},{"id":330,"href":"/docs/references/meta-frameworks/react/advanced/fragments/","title":"Fragments","section":"Advanced","content":" 🌵 Fragments # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nThese new documentation pages teach modern React:\n\u0026lt;Fragment\u0026gt; A common pattern in React is for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.\nrender() { return ( \u0026lt;React.Fragment\u0026gt; \u0026lt;ChildA /\u0026gt; \u0026lt;ChildB /\u0026gt; \u0026lt;ChildC /\u0026gt; \u0026lt;/React.Fragment\u0026gt; ); } There is also a new short syntax for declaring them.\nMotivation # A common pattern is for a component to return a list of children. Take this example React snippet:\nclass Table extends React.Component { render() { return ( \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;Columns /\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; ); } } \u0026lt;Columns /\u0026gt; would need to return multiple \u0026lt;td\u0026gt; elements in order for the rendered HTML to be valid. If a parent div was used inside the render() of \u0026lt;Columns /\u0026gt;, then the resulting HTML will be invalid.\nclass Columns extends React.Component { render() { return ( \u0026lt;div\u0026gt; \u0026lt;td\u0026gt;Hello\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;World\u0026lt;/td\u0026gt; \u0026lt;/div\u0026gt; ); } } results in a \u0026lt;Table /\u0026gt; output of:\n\u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;div\u0026gt; \u0026lt;td\u0026gt;Hello\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;World\u0026lt;/td\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; Fragments solve this problem.\nUsage # class Columns extends React.Component { render() { return ( \u0026lt;React.Fragment\u0026gt; \u0026lt;td\u0026gt;Hello\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;World\u0026lt;/td\u0026gt; \u0026lt;/React.Fragment\u0026gt; ); } } which results in a correct \u0026lt;Table /\u0026gt; output of:\n\u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Hello\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;World\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; Short Syntax # There is a new, shorter syntax you can use for declaring fragments. It looks like empty tags:\nclass Columns extends React.Component { render() { return ( \u0026lt;\u0026gt; \u0026lt;td\u0026gt;Hello\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;World\u0026lt;/td\u0026gt; \u0026lt;/\u0026gt; ); } } You can use \u0026lt;\u0026gt;\u0026lt;/\u0026gt; the same way you’d use any other element except that it doesn’t support keys or attributes.\nKeyed Fragments # Fragments declared with the explicit \u0026lt;React.Fragment\u0026gt; syntax may have keys. A use case for this is mapping a collection to an array of fragments — for example, to create a description list:\nfunction Glossary(props) { return ( \u0026lt;dl\u0026gt; {props.items.map(item =\u0026gt; ( // Without the `key`, React will fire a key warning \u0026lt;React.Fragment key={item.id}\u0026gt; \u0026lt;dt\u0026gt;{item.term}\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;{item.description}\u0026lt;/dd\u0026gt; \u0026lt;/React.Fragment\u0026gt; ))} \u0026lt;/dl\u0026gt; ); } key is the only attribute that can be passed to Fragment. In the future, we may add support for additional attributes, such as event handlers.\nLive Demo # You can try out the new JSX fragment syntax with this CodePen.\n"},{"id":331,"href":"/docs/references/meta-frameworks/react/advanced/higher-order-components/","title":"Higher Order Components","section":"Advanced","content":" Higher-Order Components # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nHigher-order components are not commonly used in modern React code.\nA higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, per se. They are a pattern that emerges from React’s compositional nature.\nConcretely, a higher-order component is a function that takes a component and returns a new component.\nconst EnhancedComponent = higherOrderComponent(WrappedComponent); Whereas a component transforms props into UI, a higher-order component transforms a component into another component.\nHOCs are common in third-party React libraries, such as Redux’s connect and Relay’s createFragmentContainer.\nIn this document, we’ll discuss why higher-order components are useful, and how to write your own.\nUse HOCs For Cross-Cutting Concerns # Note\nWe previously recommended mixins as a way to handle cross-cutting concerns. We’ve since realized that mixins create more trouble than they are worth. Read more about why we’ve moved away from mixins and how you can transition your existing components.\nComponents are the primary unit of code reuse in React. However, you’ll find that some patterns aren’t a straightforward fit for traditional components.\nFor example, say you have a CommentList component that subscribes to an external data source to render a list of comments:\nclass CommentList extends React.Component { constructor(props) { super(props); this.handleChange = this.handleChange.bind(this); this.state = { // \u0026#34;DataSource\u0026#34; is some global data source comments: DataSource.getComments() }; } componentDidMount() { // Subscribe to changes DataSource.addChangeListener(this.handleChange); } componentWillUnmount() { // Clean up listener DataSource.removeChangeListener(this.handleChange); } handleChange() { // Update component state whenever the data source changes this.setState({ comments: DataSource.getComments() }); } render() { return ( \u0026lt;div\u0026gt; {this.state.comments.map((comment) =\u0026gt; ( \u0026lt;Comment comment={comment} key={comment.id} /\u0026gt; ))} \u0026lt;/div\u0026gt; ); } } Later, you write a component for subscribing to a single blog post, which follows a similar pattern:\nclass BlogPost extends React.Component { constructor(props) { super(props); this.handleChange = this.handleChange.bind(this); this.state = { blogPost: DataSource.getBlogPost(props.id) }; } componentDidMount() { DataSource.addChangeListener(this.handleChange); } componentWillUnmount() { DataSource.removeChangeListener(this.handleChange); } handleChange() { this.setState({ blogPost: DataSource.getBlogPost(this.props.id) }); } render() { return \u0026lt;TextBlock text={this.state.blogPost} /\u0026gt;; } } CommentList and BlogPost aren’t identical — they call different methods on DataSource, and they render different output. But much of their implementation is the same:\nOn mount, add a change listener to DataSource. Inside the listener, call setState whenever the data source changes. On unmount, remove the change listener. You can imagine that in a large app, this same pattern of subscribing to DataSource and calling setState will occur over and over again. We want an abstraction that allows us to define this logic in a single place and share it across many components. This is where higher-order components excel.\nWe can write a function that creates components, like CommentList and BlogPost, that subscribe to DataSource. The function will accept as one of its arguments a child component that receives the subscribed data as a prop. Let’s call the function withSubscription:\nconst CommentListWithSubscription = withSubscription( CommentList, (DataSource) =\u0026gt; DataSource.getComments() ); const BlogPostWithSubscription = withSubscription( BlogPost, (DataSource, props) =\u0026gt; DataSource.getBlogPost(props.id) ); The first parameter is the wrapped component. The second parameter retrieves the data we’re interested in, given a DataSource and the current props.\nWhen CommentListWithSubscription and BlogPostWithSubscription are rendered, CommentList and BlogPost will be passed a data prop with the most current data retrieved from DataSource:\n// This function takes a component... function withSubscription(WrappedComponent, selectData) { // ...and returns another component... return class extends React.Component { constructor(props) { super(props); this.handleChange = this.handleChange.bind(this); this.state = { data: selectData(DataSource, props) }; } componentDidMount() { // ... that takes care of the subscription... DataSource.addChangeListener(this.handleChange); } componentWillUnmount() { DataSource.removeChangeListener(this.handleChange); } handleChange() { this.setState({ data: selectData(DataSource, this.props) }); } render() { // ... and renders the wrapped component with the fresh data! // Notice that we pass through any additional props return \u0026lt;WrappedComponent data={this.state.data} {...this.props} /\u0026gt;; } }; } Note that a HOC doesn’t modify the input component, nor does it use inheritance to copy its behavior. Rather, a HOC composes the original component by wrapping it in a container component. A HOC is a pure function with zero side-effects.\nAnd that’s it! The wrapped component receives all the props of the container, along with a new prop, data, which it uses to render its output. The HOC isn’t concerned with how or why the data is used, and the wrapped component isn’t concerned with where the data came from.\nBecause withSubscription is a normal function, you can add as many or as few arguments as you like. For example, you may want to make the name of the data prop configurable, to further isolate the HOC from the wrapped component. Or you could accept an argument that configures shouldComponentUpdate, or one that configures the data source. These are all possible because the HOC has full control over how the component is defined.\nLike components, the contract between withSubscription and the wrapped component is entirely props-based. This makes it easy to swap one HOC for a different one, as long as they provide the same props to the wrapped component. This may be useful if you change data-fetching libraries, for example.\nDon’t Mutate the Original Component. Use Composition. # Resist the temptation to modify a component’s prototype (or otherwise mutate it) inside a HOC.\nfunction logProps(InputComponent) { InputComponent.prototype.componentDidUpdate = function(prevProps) { console.log(\u0026#39;Current props: \u0026#39;, this.props); console.log(\u0026#39;Previous props: \u0026#39;, prevProps); }; // The fact that we\u0026#39;re returning the original input is a hint that it has // been mutated. return InputComponent; } // EnhancedComponent will log whenever props are received const EnhancedComponent = logProps(InputComponent); There are a few problems with this. One is that the input component cannot be reused separately from the enhanced component. More crucially, if you apply another HOC to EnhancedComponent that also mutates componentDidUpdate, the first HOC’s functionality will be overridden! This HOC also won’t work with function components, which do not have lifecycle methods.\nMutating HOCs are a leaky abstraction—the consumer must know how they are implemented in order to avoid conflicts with other HOCs.\nInstead of mutation, HOCs should use composition, by wrapping the input component in a container component:\nfunction logProps(WrappedComponent) { return class extends React.Component { componentDidUpdate(prevProps) { console.log(\u0026#39;Current props: \u0026#39;, this.props); console.log(\u0026#39;Previous props: \u0026#39;, prevProps); } render() { // Wraps the input component in a container, without mutating it. Good! return \u0026lt;WrappedComponent {...this.props} /\u0026gt;; } } } This HOC has the same functionality as the mutating version while avoiding the potential for clashes. It works equally well with class and function components. And because it’s a pure function, it’s composable with other HOCs, or even with itself.\nYou may have noticed similarities between HOCs and a pattern called container components. Container components are part of a strategy of separating responsibility between high-level and low-level concerns. Containers manage things like subscriptions and state, and pass props to components that handle things like rendering UI. HOCs use containers as part of their implementation. You can think of HOCs as parameterized container component definitions.\nHOCs add features to a component. They shouldn’t drastically alter its contract. It’s expected that the component returned from a HOC has a similar interface to the wrapped component.\nHOCs should pass through props that are unrelated to its specific concern. Most HOCs contain a render method that looks something like this:\nrender() { // Filter out extra props that are specific to this HOC and shouldn\u0026#39;t be // passed through const { extraProp, ...passThroughProps } = this.props; // Inject props into the wrapped component. These are usually state values or // instance methods. const injectedProp = someStateOrInstanceMethod; // Pass props to wrapped component return ( \u0026lt;WrappedComponent injectedProp={injectedProp} {...passThroughProps} /\u0026gt; ); } This convention helps ensure that HOCs are as flexible and reusable as possible.\nConvention: Maximizing Composability # Not all HOCs look the same. Sometimes they accept only a single argument, the wrapped component:\nconst NavbarWithRouter = withRouter(Navbar); Usually, HOCs accept additional arguments. In this example from Relay, a config object is used to specify a component’s data dependencies:\nconst CommentWithRelay = Relay.createContainer(Comment, config); The most common signature for HOCs looks like this:\n// React Redux\u0026#39;s `connect` const ConnectedComment = connect(commentSelector, commentActions)(CommentList); What?! If you break it apart, it’s easier to see what’s going on.\n// connect is a function that returns another function const enhance = connect(commentListSelector, commentListActions); // The returned function is a HOC, which returns a component that is connected // to the Redux store const ConnectedComment = enhance(CommentList); In other words, connect is a higher-order function that returns a higher-order component!\nThis form may seem confusing or unnecessary, but it has a useful property. Single-argument HOCs like the one returned by the connect function have the signature Component =\u0026gt; Component. Functions whose output type is the same as its input type are really easy to compose together.\n// Instead of doing this... const EnhancedComponent = withRouter(connect(commentSelector)(WrappedComponent)) // ... you can use a function composition utility // compose(f, g, h) is the same as (...args) =\u0026gt; f(g(h(...args))) const enhance = compose( // These are both single-argument HOCs withRouter, connect(commentSelector) ) const EnhancedComponent = enhance(WrappedComponent) (This same property also allows connect and other enhancer-style HOCs to be used as decorators, an experimental JavaScript proposal.)\nThe compose utility function is provided by many third-party libraries including lodash (as lodash.flowRight), Redux, and Ramda.\nConvention: Wrap the Display Name for Easy Debugging # The container components created by HOCs show up in the React Developer Tools like any other component. To ease debugging, choose a display name that communicates that it’s the result of a HOC.\nThe most common technique is to wrap the display name of the wrapped component. So if your higher-order component is named withSubscription, and the wrapped component’s display name is CommentList, use the display name WithSubscription(CommentList):\nfunction withSubscription(WrappedComponent) { class WithSubscription extends React.Component {/* ... */} WithSubscription.displayName = `WithSubscription(${getDisplayName(WrappedComponent)})`; return WithSubscription; } function getDisplayName(WrappedComponent) { return WrappedComponent.displayName || WrappedComponent.name || \u0026#39;Component\u0026#39;; } Caveats # Higher-order components come with a few caveats that aren’t immediately obvious if you’re new to React.\nDon’t Use HOCs Inside the render Method # React’s diffing algorithm (called Reconciliation) uses component identity to determine whether it should update the existing subtree or throw it away and mount a new one. If the component returned from render is identical (===) to the component from the previous render, React recursively updates the subtree by diffing it with the new one. If they’re not equal, the previous subtree is unmounted completely.\nNormally, you shouldn’t need to think about this. But it matters for HOCs because it means you can’t apply a HOC to a component within the render method of a component:\nrender() { // A new version of EnhancedComponent is created on every render // EnhancedComponent1 !== EnhancedComponent2 const EnhancedComponent = enhance(MyComponent); // That causes the entire subtree to unmount/remount each time! return \u0026lt;EnhancedComponent /\u0026gt;; } The problem here isn’t just about performance — remounting a component causes the state of that component and all of its children to be lost.\nInstead, apply HOCs outside the component definition so that the resulting component is created only once. Then, its identity will be consistent across renders. This is usually what you want, anyway.\nIn those rare cases where you need to apply a HOC dynamically, you can also do it inside a component’s lifecycle methods or its constructor.\nStatic Methods Must Be Copied Over # Sometimes it’s useful to define a static method on a React component. For example, Relay containers expose a static method getFragment to facilitate the composition of GraphQL fragments.\nWhen you apply a HOC to a component, though, the original component is wrapped with a container component. That means the new component does not have any of the static methods of the original component.\n// Define a static method WrappedComponent.staticMethod = function() {/*...*/} // Now apply a HOC const EnhancedComponent = enhance(WrappedComponent); // The enhanced component has no static method typeof EnhancedComponent.staticMethod === \u0026#39;undefined\u0026#39; // true To solve this, you could copy the methods onto the container before returning it:\nfunction enhance(WrappedComponent) { class Enhance extends React.Component {/*...*/} // Must know exactly which method(s) to copy :( Enhance.staticMethod = WrappedComponent.staticMethod; return Enhance; } However, this requires you to know exactly which methods need to be copied. You can use hoist-non-react-statics to automatically copy all non-React static methods:\nimport hoistNonReactStatic from \u0026#39;hoist-non-react-statics\u0026#39;; function enhance(WrappedComponent) { class Enhance extends React.Component {/*...*/} hoistNonReactStatic(Enhance, WrappedComponent); return Enhance; } Another possible solution is to export the static method separately from the component itself.\n// Instead of... MyComponent.someFunction = someFunction; export default MyComponent; // ...export the method separately... export { someFunction }; // ...and in the consuming module, import both import MyComponent, { someFunction } from \u0026#39;./MyComponent.js\u0026#39;; Refs Aren’t Passed Through # While the convention for higher-order components is to pass through all props to the wrapped component, this does not work for refs. That’s because ref is not really a prop — like key, it’s handled specially by React. If you add a ref to an element whose component is the result of a HOC, the ref refers to an instance of the outermost container component, not the wrapped component.\nThe solution for this problem is to use the React.forwardRef API (introduced with React 16.3). Learn more about it in the forwarding refs section.\n"},{"id":332,"href":"/docs/references/meta-frameworks/react/advanced/integrating-with-other-libraries/","title":"Integrating With Other Libraries","section":"Advanced","content":" Integrating with Other Libraries # React can be used in any web application. It can be embedded in other applications and, with a little care, other applications can be embedded in React. This guide will examine some of the more common use cases, focusing on integration with jQuery and Backbone, but the same ideas can be applied to integrating components with any existing code.\nIntegrating with DOM Manipulation Plugins # React is unaware of changes made to the DOM outside of React. It determines updates based on its own internal representation, and if the same DOM nodes are manipulated by another library, React gets confused and has no way to recover.\nThis does not mean it is impossible or even necessarily difficult to combine React with other ways of affecting the DOM, you just have to be mindful of what each is doing.\nThe easiest way to avoid conflicts is to prevent the React component from updating. You can do this by rendering elements that React has no reason to update, like an empty \u0026lt;div /\u0026gt;.\nHow to Approach the Problem # To demonstrate this, let’s sketch out a wrapper for a generic jQuery plugin.\nWe will attach a ref to the root DOM element. Inside componentDidMount, we will get a reference to it so we can pass it to the jQuery plugin.\nTo prevent React from touching the DOM after mounting, we will return an empty \u0026lt;div /\u0026gt; from the render() method. The \u0026lt;div /\u0026gt; element has no properties or children, so React has no reason to update it, leaving the jQuery plugin free to manage that part of the DOM:\nclass SomePlugin extends React.Component { componentDidMount() { this.$el = $(this.el); this.$el.somePlugin(); } componentWillUnmount() { this.$el.somePlugin(\u0026#39;destroy\u0026#39;); } render() { return \u0026lt;div ref={el =\u0026gt; this.el = el} /\u0026gt;; } } Note that we defined both componentDidMount and componentWillUnmount lifecycle methods. Many jQuery plugins attach event listeners to the DOM so it’s important to detach them in componentWillUnmount. If the plugin does not provide a method for cleanup, you will probably have to provide your own, remembering to remove any event listeners the plugin registered to prevent memory leaks.\nIntegrating with jQuery Chosen Plugin # For a more concrete example of these concepts, let’s write a minimal wrapper for the plugin Chosen, which augments \u0026lt;select\u0026gt; inputs.\nNote:\nJust because it’s possible, doesn’t mean that it’s the best approach for React apps. We encourage you to use React components when you can. React components are easier to reuse in React applications, and often provide more control over their behavior and appearance.\nFirst, let’s look at what Chosen does to the DOM.\nIf you call it on a \u0026lt;select\u0026gt; DOM node, it reads the attributes off of the original DOM node, hides it with an inline style, and then appends a separate DOM node with its own visual representation right after the \u0026lt;select\u0026gt;. Then it fires jQuery events to notify us about the changes.\nLet’s say that this is the API we’re striving for with our \u0026lt;Chosen\u0026gt; wrapper React component:\nfunction Example() { return ( \u0026lt;Chosen onChange={value =\u0026gt; console.log(value)}\u0026gt; \u0026lt;option\u0026gt;vanilla\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;chocolate\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;strawberry\u0026lt;/option\u0026gt; \u0026lt;/Chosen\u0026gt; ); } We will implement it as an uncontrolled component for simplicity.\nFirst, we will create an empty component with a render() method where we return \u0026lt;select\u0026gt; wrapped in a \u0026lt;div\u0026gt;:\nclass Chosen extends React.Component { render() { return ( \u0026lt;div\u0026gt; \u0026lt;select className=\u0026#34;Chosen-select\u0026#34; ref={el =\u0026gt; this.el = el}\u0026gt; {this.props.children} \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; ); } } Notice how we wrapped \u0026lt;select\u0026gt; in an extra \u0026lt;div\u0026gt;. This is necessary because Chosen will append another DOM element right after the \u0026lt;select\u0026gt; node we passed to it. However, as far as React is concerned, \u0026lt;div\u0026gt; always only has a single child. This is how we ensure that React updates won’t conflict with the extra DOM node appended by Chosen. It is important that if you modify the DOM outside of React flow, you must ensure React doesn’t have a reason to touch those DOM nodes.\nNext, we will implement the lifecycle methods. We need to initialize Chosen with the ref to the \u0026lt;select\u0026gt; node in componentDidMount, and tear it down in componentWillUnmount:\ncomponentDidMount() { this.$el = $(this.el); this.$el.chosen();} componentWillUnmount() { this.$el.chosen(\u0026#39;destroy\u0026#39;);} Try it on CodePen\nNote that React assigns no special meaning to the this.el field. It only works because we have previously assigned this field from a ref in the render() method:\n\u0026lt;select className=\u0026#34;Chosen-select\u0026#34; ref={el =\u0026gt; this.el = el}\u0026gt; This is enough to get our component to render, but we also want to be notified about the value changes. To do this, we will subscribe to the jQuery change event on the \u0026lt;select\u0026gt; managed by Chosen.\nWe won’t pass this.props.onChange directly to Chosen because component’s props might change over time, and that includes event handlers. Instead, we will declare a handleChange() method that calls this.props.onChange, and subscribe it to the jQuery change event:\ncomponentDidMount() { this.$el = $(this.el); this.$el.chosen(); this.handleChange = this.handleChange.bind(this); this.$el.on(\u0026#39;change\u0026#39;, this.handleChange);} componentWillUnmount() { this.$el.off(\u0026#39;change\u0026#39;, this.handleChange); this.$el.chosen(\u0026#39;destroy\u0026#39;); } handleChange(e) { this.props.onChange(e.target.value);} Try it on CodePen\nFinally, there is one more thing left to do. In React, props can change over time. For example, the \u0026lt;Chosen\u0026gt; component can get different children if parent component’s state changes. This means that at integration points it is important that we manually update the DOM in response to prop updates, since we no longer let React manage the DOM for us.\nChosen’s documentation suggests that we can use jQuery trigger() API to notify it about changes to the original DOM element. We will let React take care of updating this.props.children inside \u0026lt;select\u0026gt;, but we will also add a componentDidUpdate() lifecycle method that notifies Chosen about changes in the children list:\ncomponentDidUpdate(prevProps) { if (prevProps.children !== this.props.children) { this.$el.trigger(\u0026#34;chosen:updated\u0026#34;); } } This way, Chosen will know to update its DOM element when the \u0026lt;select\u0026gt; children managed by React change.\nThe complete implementation of the Chosen component looks like this:\nclass Chosen extends React.Component { componentDidMount() { this.$el = $(this.el); this.$el.chosen(); this.handleChange = this.handleChange.bind(this); this.$el.on(\u0026#39;change\u0026#39;, this.handleChange); } componentDidUpdate(prevProps) { if (prevProps.children !== this.props.children) { this.$el.trigger(\u0026#34;chosen:updated\u0026#34;); } } componentWillUnmount() { this.$el.off(\u0026#39;change\u0026#39;, this.handleChange); this.$el.chosen(\u0026#39;destroy\u0026#39;); } handleChange(e) { this.props.onChange(e.target.value); } render() { return ( \u0026lt;div\u0026gt; \u0026lt;select className=\u0026#34;Chosen-select\u0026#34; ref={el =\u0026gt; this.el = el}\u0026gt; {this.props.children} \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; ); } } Try it on CodePen\nIntegrating with Other View Libraries # React can be embedded into other applications thanks to the flexibility of createRoot().\nAlthough React is commonly used at startup to load a single root React component into the DOM, createRoot() can also be called multiple times for independent parts of the UI which can be as small as a button, or as large as an app.\nIn fact, this is exactly how React is used at Facebook. This lets us write applications in React piece by piece, and combine them with our existing server-generated templates and other client-side code.\nReplacing String-Based Rendering with React # A common pattern in older web applications is to describe chunks of the DOM as a string and insert it into the DOM like so: $el.html(htmlString). These points in a codebase are perfect for introducing React. Just rewrite the string based rendering as a React component.\nSo the following jQuery implementation…\n$(\u0026#39;#container\u0026#39;).html(\u0026#39;\u0026lt;button id=\u0026#34;btn\u0026#34;\u0026gt;Say Hello\u0026lt;/button\u0026gt;\u0026#39;); $(\u0026#39;#btn\u0026#39;).click(function() { alert(\u0026#39;Hello!\u0026#39;); }); …could be rewritten using a React component:\nfunction Button() { return \u0026lt;button id=\u0026#34;btn\u0026#34;\u0026gt;Say Hello\u0026lt;/button\u0026gt;; } $(\u0026#39;#btn\u0026#39;).click(function() { alert(\u0026#39;Hello!\u0026#39;); }); From here you could start moving more logic into the component and begin adopting more common React practices. For example, in components it is best not to rely on IDs because the same component can be rendered multiple times. Instead, we will use the React event system and register the click handler directly on the React \u0026lt;button\u0026gt; element:\nfunction Button(props) { return \u0026lt;button onClick={props.onClick}\u0026gt;Say Hello\u0026lt;/button\u0026gt;;} function HelloButton() { function handleClick() { alert(\u0026#39;Hello!\u0026#39;); } return \u0026lt;Button onClick={handleClick} /\u0026gt;;} Try it on CodePen\nYou can have as many such isolated components as you like, and use ReactDOM.createRoot() to render them to different DOM containers. Gradually, as you convert more of your app to React, you will be able to combine them into larger components, and move some of the ReactDOM.createRoot() calls up the hierarchy.\nEmbedding React in a Backbone View # Backbone views typically use HTML strings, or string-producing template functions, to create the content for their DOM elements. This process, too, can be replaced with rendering a React component.\nBelow, we will create a Backbone view called ParagraphView. It will override Backbone’s render() function to render a React \u0026lt;Paragraph\u0026gt; component into the DOM element provided by Backbone (this.el). Here, too, we are using ReactDOM.createRoot():\nfunction Paragraph(props) { return \u0026lt;p\u0026gt;{props.text}\u0026lt;/p\u0026gt;; } const ParagraphView = Backbone.View.extend({ initialize(options) { this.reactRoot = ReactDOM.createRoot(this.el); }, render() { const text = this.model.get(\u0026#39;text\u0026#39;); this.reactRoot.render(\u0026lt;Paragraph text={text} /\u0026gt;); return this; }, remove() { this.reactRoot.unmount(); Backbone.View.prototype.remove.call(this); } }); Try it on CodePen\nIt is important that we also call root.unmount() in the remove method so that React unregisters event handlers and other resources associated with the component tree when it is detached.\nWhen a component is removed from within a React tree, the cleanup is performed automatically, but because we are removing the entire tree by hand, we must call this method.\nIntegrating with Model Layers # While it is generally recommended to use unidirectional data flow such as React state, Flux, or Redux, React components can use a model layer from other frameworks and libraries.\nUsing Backbone Models in React Components # The simplest way to consume Backbone models and collections from a React component is to listen to the various change events and manually force an update.\nComponents responsible for rendering models would listen to 'change' events, while components responsible for rendering collections would listen for 'add' and 'remove' events. In both cases, call this.forceUpdate() to rerender the component with the new data.\nIn the example below, the List component renders a Backbone collection, using the Item component to render individual items.\nclass Item extends React.Component { constructor(props) { super(props); this.handleChange = this.handleChange.bind(this); } handleChange() { this.forceUpdate(); } componentDidMount() { this.props.model.on(\u0026#39;change\u0026#39;, this.handleChange); } componentWillUnmount() { this.props.model.off(\u0026#39;change\u0026#39;, this.handleChange); } render() { return \u0026lt;li\u0026gt;{this.props.model.get(\u0026#39;text\u0026#39;)}\u0026lt;/li\u0026gt;; } } class List extends React.Component { constructor(props) { super(props); this.handleChange = this.handleChange.bind(this); } handleChange() { this.forceUpdate(); } componentDidMount() { this.props.collection.on(\u0026#39;add\u0026#39;, \u0026#39;remove\u0026#39;, this.handleChange); } componentWillUnmount() { this.props.collection.off(\u0026#39;add\u0026#39;, \u0026#39;remove\u0026#39;, this.handleChange); } render() { return ( \u0026lt;ul\u0026gt; {this.props.collection.map(model =\u0026gt; ( \u0026lt;Item key={model.cid} model={model} /\u0026gt; ))} \u0026lt;/ul\u0026gt; ); } } Try it on CodePen\nThe approach above requires your React components to be aware of the Backbone models and collections. If you later plan to migrate to another data management solution, you might want to concentrate the knowledge about Backbone in as few parts of the code as possible.\nOne solution to this is to extract the model’s attributes as plain data whenever it changes, and keep this logic in a single place. The following is a higher-order component that extracts all attributes of a Backbone model into state, passing the data to the wrapped component.\nThis way, only the higher-order component needs to know about Backbone model internals, and most components in the app can stay agnostic of Backbone.\nIn the example below, we will make a copy of the model’s attributes to form the initial state. We subscribe to the change event (and unsubscribe on unmounting), and when it happens, we update the state with the model’s current attributes. Finally, we make sure that if the model prop itself changes, we don’t forget to unsubscribe from the old model, and subscribe to the new one.\nNote that this example is not meant to be exhaustive with regards to working with Backbone, but it should give you an idea for how to approach this in a generic way:\nfunction connectToBackboneModel(WrappedComponent) { return class BackboneComponent extends React.Component { constructor(props) { super(props); this.state = Object.assign({}, props.model.attributes); this.handleChange = this.handleChange.bind(this); } componentDidMount() { this.props.model.on(\u0026#39;change\u0026#39;, this.handleChange); } componentWillReceiveProps(nextProps) { this.setState(Object.assign({}, nextProps.model.attributes)); if (nextProps.model !== this.props.model) { this.props.model.off(\u0026#39;change\u0026#39;, this.handleChange); nextProps.model.on(\u0026#39;change\u0026#39;, this.handleChange); } } componentWillUnmount() { this.props.model.off(\u0026#39;change\u0026#39;, this.handleChange); } handleChange(model) { this.setState(model.changedAttributes()); } render() { const propsExceptModel = Object.assign({}, this.props); delete propsExceptModel.model; return \u0026lt;WrappedComponent {...propsExceptModel} {...this.state} /\u0026gt;; } } } To demonstrate how to use it, we will connect a NameInput React component to a Backbone model, and update its firstName attribute every time the input changes:\nfunction NameInput(props) { return ( \u0026lt;p\u0026gt; \u0026lt;input value={props.firstName} onChange={props.handleChange} /\u0026gt; \u0026lt;br /\u0026gt; My name is {props.firstName}. \u0026lt;/p\u0026gt; ); } const BackboneNameInput = connectToBackboneModel(NameInput); function Example(props) { function handleChange(e) { props.model.set(\u0026#39;firstName\u0026#39;, e.target.value); } return ( \u0026lt;BackboneNameInput model={props.model} handleChange={handleChange} /\u0026gt; ); } const model = new Backbone.Model({ firstName: \u0026#39;Frodo\u0026#39; }); const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); root.render(\u0026lt;Example model={model} /\u0026gt;); Try it on CodePen\nThis technique is not limited to Backbone. You can use React with any model library by subscribing to its changes in the lifecycle methods and, optionally, copying the data into the local React state.\n"},{"id":333,"href":"/docs/references/meta-frameworks/react/advanced/jsx-in-depth/","title":"Jsx in Depth","section":"Advanced","content":" JSX In Depth # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nFundamentally, JSX just provides syntactic sugar for the React.createElement(component, props, ...children) function. The JSX code:\n\u0026lt;MyButton color=\u0026#34;blue\u0026#34; shadowSize={2}\u0026gt; Click Me \u0026lt;/MyButton\u0026gt; compiles into:\nReact.createElement( MyButton, {color: \u0026#39;blue\u0026#39;, shadowSize: 2}, \u0026#39;Click Me\u0026#39; ) You can also use the self-closing form of the tag if there are no children. So:\n\u0026lt;div className=\u0026#34;sidebar\u0026#34; /\u0026gt; compiles into:\nReact.createElement( \u0026#39;div\u0026#39;, {className: \u0026#39;sidebar\u0026#39;} ) If you want to test out how some specific JSX is converted into JavaScript, you can try out the online Babel compiler.\nSpecifying The React Element Type # The first part of a JSX tag determines the type of the React element.\nCapitalized types indicate that the JSX tag is referring to a React component. These tags get compiled into a direct reference to the named variable, so if you use the JSX \u0026lt;Foo /\u0026gt; expression, Foo must be in scope.\nReact Must Be in Scope # Since JSX compiles into calls to React.createElement, the React library must also always be in scope from your JSX code.\nFor example, both of the imports are necessary in this code, even though React and CustomButton are not directly referenced from JavaScript:\nimport React from \u0026#39;react\u0026#39;;import CustomButton from \u0026#39;./CustomButton\u0026#39;; function WarningButton() { // return React.createElement(CustomButton, {color: \u0026#39;red\u0026#39;}, null); return \u0026lt;CustomButton color=\u0026#34;red\u0026#34; /\u0026gt;; } If you don’t use a JavaScript bundler and loaded React from a \u0026lt;script\u0026gt; tag, it is already in scope as the React global.\nUsing Dot Notation for JSX Type # You can also refer to a React component using dot-notation from within JSX. This is convenient if you have a single module that exports many React components. For example, if MyComponents.DatePicker is a component, you can use it directly from JSX with:\nimport React from \u0026#39;react\u0026#39;; const MyComponents = { DatePicker: function DatePicker(props) { return \u0026lt;div\u0026gt;Imagine a {props.color} datepicker here.\u0026lt;/div\u0026gt;; } } function BlueDatePicker() { return \u0026lt;MyComponents.DatePicker color=\u0026#34;blue\u0026#34; /\u0026gt;;} User-Defined Components Must Be Capitalized # When an element type starts with a lowercase letter, it refers to a built-in component like \u0026lt;div\u0026gt; or \u0026lt;span\u0026gt; and results in a string 'div' or 'span' passed to React.createElement. Types that start with a capital letter like \u0026lt;Foo /\u0026gt; compile to React.createElement(Foo) and correspond to a component defined or imported in your JavaScript file.\nWe recommend naming components with a capital letter. If you do have a component that starts with a lowercase letter, assign it to a capitalized variable before using it in JSX.\nFor example, this code will not run as expected:\nimport React from \u0026#39;react\u0026#39;; // Wrong! This is a component and should have been capitalized:function hello(props) { // Correct! This use of \u0026lt;div\u0026gt; is legitimate because div is a valid HTML tag: return \u0026lt;div\u0026gt;Hello {props.toWhat}\u0026lt;/div\u0026gt;; } function HelloWorld() { // Wrong! React thinks \u0026lt;hello /\u0026gt; is an HTML tag because it\u0026#39;s not capitalized: return \u0026lt;hello toWhat=\u0026#34;World\u0026#34; /\u0026gt;;} To fix this, we will rename hello to Hello and use \u0026lt;Hello /\u0026gt; when referring to it:\nimport React from \u0026#39;react\u0026#39;; // Correct! This is a component and should be capitalized:function Hello(props) { // Correct! This use of \u0026lt;div\u0026gt; is legitimate because div is a valid HTML tag: return \u0026lt;div\u0026gt;Hello {props.toWhat}\u0026lt;/div\u0026gt;; } function HelloWorld() { // Correct! React knows \u0026lt;Hello /\u0026gt; is a component because it\u0026#39;s capitalized. return \u0026lt;Hello toWhat=\u0026#34;World\u0026#34; /\u0026gt;;} Choosing the Type at Runtime # You cannot use a general expression as the React element type. If you do want to use a general expression to indicate the type of the element, just assign it to a capitalized variable first. This often comes up when you want to render a different component based on a prop:\nimport React from \u0026#39;react\u0026#39;; import { PhotoStory, VideoStory } from \u0026#39;./stories\u0026#39;; const components = { photo: PhotoStory, video: VideoStory }; function Story(props) { // Wrong! JSX type can\u0026#39;t be an expression. return \u0026lt;components[props.storyType] story={props.story} /\u0026gt;;} To fix this, we will assign the type to a capitalized variable first:\nimport React from \u0026#39;react\u0026#39;; import { PhotoStory, VideoStory } from \u0026#39;./stories\u0026#39;; const components = { photo: PhotoStory, video: VideoStory }; function Story(props) { // Correct! JSX type can be a capitalized variable. const SpecificStory = components[props.storyType]; return \u0026lt;SpecificStory story={props.story} /\u0026gt;;} Props in JSX # There are several different ways to specify props in JSX.\nJavaScript Expressions as Props # You can pass any JavaScript expression as a prop, by surrounding it with {}. For example, in this JSX:\n\u0026lt;MyComponent foo={1 + 2 + 3 + 4} /\u0026gt; For MyComponent, the value of props.foo will be 10 because the expression 1 + 2 + 3 + 4 gets evaluated.\nif statements and for loops are not expressions in JavaScript, so they can’t be used in JSX directly. Instead, you can put these in the surrounding code. For example:\nfunction NumberDescriber(props) { let description; if (props.number % 2 == 0) { description = \u0026lt;strong\u0026gt;even\u0026lt;/strong\u0026gt;; } else { description = \u0026lt;i\u0026gt;odd\u0026lt;/i\u0026gt;; } return \u0026lt;div\u0026gt;{props.number} is an {description} number\u0026lt;/div\u0026gt;; } You can learn more about conditional rendering and loops in the corresponding sections.\nString Literals # You can pass a string literal as a prop. These two JSX expressions are equivalent:\n\u0026lt;MyComponent message=\u0026#34;hello world\u0026#34; /\u0026gt; \u0026lt;MyComponent message={\u0026#39;hello world\u0026#39;} /\u0026gt; When you pass a string literal, its value is HTML-unescaped. So these two JSX expressions are equivalent:\n\u0026lt;MyComponent message=\u0026#34;\u0026amp;lt;3\u0026#34; /\u0026gt; \u0026lt;MyComponent message={\u0026#39;\u0026lt;3\u0026#39;} /\u0026gt; This behavior is usually not relevant. It’s only mentioned here for completeness.\nProps Default to “True” # If you pass no value for a prop, it defaults to true. These two JSX expressions are equivalent:\n\u0026lt;MyTextBox autocomplete /\u0026gt; \u0026lt;MyTextBox autocomplete={true} /\u0026gt; In general, we don’t recommend not passing a value for a prop, because it can be confused with the ES6 object shorthand {foo} which is short for {foo: foo} rather than {foo: true}. This behavior is just there so that it matches the behavior of HTML.\nSpread Attributes # If you already have props as an object, and you want to pass it in JSX, you can use ... as a “spread” syntax to pass the whole props object. These two components are equivalent:\nfunction App1() { return \u0026lt;Greeting firstName=\u0026#34;Ben\u0026#34; lastName=\u0026#34;Hector\u0026#34; /\u0026gt;; } function App2() { const props = {firstName: \u0026#39;Ben\u0026#39;, lastName: \u0026#39;Hector\u0026#39;}; return \u0026lt;Greeting {...props} /\u0026gt;;} You can also pick specific props that your component will consume while passing all other props using the spread syntax.\nconst Button = props =\u0026gt; { const { kind, ...other } = props; const className = kind === \u0026#34;primary\u0026#34; ? \u0026#34;PrimaryButton\u0026#34; : \u0026#34;SecondaryButton\u0026#34;; return \u0026lt;button className={className} {...other} /\u0026gt;; }; const App = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;Button kind=\u0026#34;primary\u0026#34; onClick={() =\u0026gt; console.log(\u0026#34;clicked!\u0026#34;)}\u0026gt; Hello World! \u0026lt;/Button\u0026gt; \u0026lt;/div\u0026gt; ); }; In the example above, the kind prop is safely consumed and is not passed on to the \u0026lt;button\u0026gt; element in the DOM. All other props are passed via the ...other object making this component really flexible. You can see that it passes an onClick and children props.\nSpread attributes can be useful but they also make it easy to pass unnecessary props to components that don’t care about them or to pass invalid HTML attributes to the DOM. We recommend using this syntax sparingly.\nChildren in JSX # In JSX expressions that contain both an opening tag and a closing tag, the content between those tags is passed as a special prop: props.children. There are several different ways to pass children:\nString Literals # You can put a string between the opening and closing tags and props.children will just be that string. This is useful for many of the built-in HTML elements. For example:\n\u0026lt;MyComponent\u0026gt;Hello world!\u0026lt;/MyComponent\u0026gt; This is valid JSX, and props.children in MyComponent will simply be the string \u0026quot;Hello world!\u0026quot;. HTML is unescaped, so you can generally write JSX just like you would write HTML in this way:\n\u0026lt;div\u0026gt;This is valid HTML \u0026amp;amp; JSX at the same time.\u0026lt;/div\u0026gt; JSX removes whitespace at the beginning and ending of a line. It also removes blank lines. New lines adjacent to tags are removed; new lines that occur in the middle of string literals are condensed into a single space. So these all render to the same thing:\n\u0026lt;div\u0026gt;Hello World\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; Hello World \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; Hello World \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; Hello World \u0026lt;/div\u0026gt; JSX Children # You can provide more JSX elements as the children. This is useful for displaying nested components:\n\u0026lt;MyContainer\u0026gt; \u0026lt;MyFirstComponent /\u0026gt; \u0026lt;MySecondComponent /\u0026gt; \u0026lt;/MyContainer\u0026gt; You can mix together different types of children, so you can use string literals together with JSX children. This is another way in which JSX is like HTML, so that this is both valid JSX and valid HTML:\n\u0026lt;div\u0026gt; Here is a list: \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Item 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Item 2\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; A React component can also return an array of elements:\nrender() { // No need to wrap list items in an extra element! return [ // Don\u0026#39;t forget the keys :) \u0026lt;li key=\u0026#34;A\u0026#34;\u0026gt;First item\u0026lt;/li\u0026gt;, \u0026lt;li key=\u0026#34;B\u0026#34;\u0026gt;Second item\u0026lt;/li\u0026gt;, \u0026lt;li key=\u0026#34;C\u0026#34;\u0026gt;Third item\u0026lt;/li\u0026gt;, ]; } JavaScript Expressions as Children # You can pass any JavaScript expression as children, by enclosing it within {}. For example, these expressions are equivalent:\n\u0026lt;MyComponent\u0026gt;foo\u0026lt;/MyComponent\u0026gt; \u0026lt;MyComponent\u0026gt;{\u0026#39;foo\u0026#39;}\u0026lt;/MyComponent\u0026gt; This is often useful for rendering a list of JSX expressions of arbitrary length. For example, this renders an HTML list:\nfunction Item(props) { return \u0026lt;li\u0026gt;{props.message}\u0026lt;/li\u0026gt;;} function TodoList() { const todos = [\u0026#39;finish doc\u0026#39;, \u0026#39;submit pr\u0026#39;, \u0026#39;nag dan to review\u0026#39;]; return ( \u0026lt;ul\u0026gt; {todos.map((message) =\u0026gt; \u0026lt;Item key={message} message={message} /\u0026gt;)} \u0026lt;/ul\u0026gt; ); } JavaScript expressions can be mixed with other types of children. This is often useful in lieu of string templates:\nfunction Hello(props) { return \u0026lt;div\u0026gt;Hello {props.addressee}!\u0026lt;/div\u0026gt;;} Functions as Children # Normally, JavaScript expressions inserted in JSX will evaluate to a string, a React element, or a list of those things. However, props.children works just like any other prop in that it can pass any sort of data, not just the sorts that React knows how to render. For example, if you have a custom component, you could have it take a callback as props.children:\n// Calls the children callback numTimes to produce a repeated component function Repeat(props) { let items = []; for (let i = 0; i \u0026lt; props.numTimes; i++) { items.push(props.children(i)); } return \u0026lt;div\u0026gt;{items}\u0026lt;/div\u0026gt;; } function ListOfTenThings() { return ( \u0026lt;Repeat numTimes={10}\u0026gt; {(index) =\u0026gt; \u0026lt;div key={index}\u0026gt;This is item {index} in the list\u0026lt;/div\u0026gt;} \u0026lt;/Repeat\u0026gt; ); } Children passed to a custom component can be anything, as long as that component transforms them into something React can understand before rendering. This usage is not common, but it works if you want to stretch what JSX is capable of.\nBooleans, Null, and Undefined Are Ignored # false, null, undefined, and true are valid children. They simply don’t render. These JSX expressions will all render to the same thing:\n\u0026lt;div /\u0026gt; \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{false}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{null}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{undefined}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{true}\u0026lt;/div\u0026gt; This can be useful to conditionally render React elements. This JSX renders the \u0026lt;Header /\u0026gt; component only if showHeader is true:\n\u0026lt;div\u0026gt; {showHeader \u0026amp;\u0026amp; \u0026lt;Header /\u0026gt;} \u0026lt;Content /\u0026gt; \u0026lt;/div\u0026gt; One caveat is that some “falsy” values, such as the 0 number, are still rendered by React. For example, this code will not behave as you might expect because 0 will be printed when props.messages is an empty array:\n\u0026lt;div\u0026gt; {props.messages.length \u0026amp;\u0026amp; \u0026lt;MessageList messages={props.messages} /\u0026gt; } \u0026lt;/div\u0026gt; To fix this, make sure that the expression before \u0026amp;\u0026amp; is always boolean:\n\u0026lt;div\u0026gt; {props.messages.length \u0026gt; 0 \u0026amp;\u0026amp; \u0026lt;MessageList messages={props.messages} /\u0026gt; } \u0026lt;/div\u0026gt; Conversely, if you want a value like false, true, null, or undefined to appear in the output, you have to convert it to a string first:\n\u0026lt;div\u0026gt; My JavaScript variable is {String(myVariable)}.\u0026lt;/div\u0026gt; "},{"id":334,"href":"/docs/references/meta-frameworks/react/advanced/optimizing-performance/","title":"Optimizing Performance","section":"Advanced","content":" ⭐ Optimizing Performance # Internally, React uses several clever techniques to minimize the number of costly DOM operations required to update the UI. For many applications, using React will lead to a fast user interface without doing much work to specifically optimize for performance. Nevertheless, there are several ways you can speed up your React application.\nUse the Production Build # If you’re benchmarking or experiencing performance problems in your React apps, make sure you’re testing with the minified production build.\nBy default, React includes many helpful warnings. These warnings are very useful in development. However, they make React larger and slower so you should make sure to use the production version when you deploy the app.\nIf you aren’t sure whether your build process is set up correctly, you can check it by installing React Developer Tools for Chrome. If you visit a site with React in production mode, the icon will have a dark background:\nIf you visit a site with React in development mode, the icon will have a red background:\nIt is expected that you use the development mode when working on your app, and the production mode when deploying your app to the users.\nYou can find instructions for building your app for production below.\nCreate React App # If your project is built with Create React App, run:\nThis will create a production build of your app in the build/ folder of your project.\nRemember that this is only necessary before deploying to production. For normal development, use npm start.\nSingle-File Builds # We offer production-ready versions of React and React DOM as single files:\n\u0026lt;script src=\u0026#34;https://unpkg.com/react@18/umd/react.production.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Remember that only React files ending with .production.min.js are suitable for production.\nBrunch # For the most efficient Brunch production build, install the terser-brunch plugin:\n# If you use npm npm install --save-dev terser-brunch # If you use Yarn yarn add --dev terser-brunch Then, to create a production build, add the -p flag to the build command:\nRemember that you only need to do this for production builds. You shouldn’t pass the -p flag or apply this plugin in development, because it will hide useful React warnings and make the builds much slower.\nBrowserify # For the most efficient Browserify production build, install a few plugins:\n# If you use npm npm install --save-dev envify terser uglifyify # If you use Yarn yarn add --dev envify terser uglifyify To create a production build, make sure that you add these transforms (the order matters):\nThe envify transform ensures the right build environment is set. Make it global (-g). The uglifyify transform removes development imports. Make it global too (-g). Finally, the resulting bundle is piped to terser for mangling ( read why). For example:\nbrowserify ./index.js \\ -g [ envify --NODE_ENV production ] \\ -g uglifyify \\ | terser --compress --mangle \u0026gt; ./bundle.js Remember that you only need to do this for production builds. You shouldn’t apply these plugins in development because they will hide useful React warnings, and make the builds much slower.\nRollup # For the most efficient Rollup production build, install a few plugins:\n# If you use npm npm install --save-dev rollup-plugin-commonjs rollup-plugin-replace rollup-plugin-terser # If you use Yarn yarn add --dev rollup-plugin-commonjs rollup-plugin-replace rollup-plugin-terser To create a production build, make sure that you add these plugins (the order matters):\nThe replace plugin ensures the right build environment is set. The commonjs plugin provides support for CommonJS in Rollup. The terser plugin compresses and mangles the final bundle. plugins: [ // ... require(\u0026#39;rollup-plugin-replace\u0026#39;)({ \u0026#39;process.env.NODE_ENV\u0026#39;: JSON.stringify(\u0026#39;production\u0026#39;) }), require(\u0026#39;rollup-plugin-commonjs\u0026#39;)(), require(\u0026#39;rollup-plugin-terser\u0026#39;)(), // ... ] For a complete setup example see this gist.\nRemember that you only need to do this for production builds. You shouldn’t apply the terser plugin or the replace plugin with 'production' value in development because they will hide useful React warnings, and make the builds much slower.\nwebpack # Note:\nIf you’re using Create React App, please follow the instructions above.\nThis section is only relevant if you configure webpack directly.\nWebpack v4+ will minify your code by default in production mode.\nconst TerserPlugin = require(\u0026#39;terser-webpack-plugin\u0026#39;); module.exports = { mode: \u0026#39;production\u0026#39;, optimization: { minimizer: [new TerserPlugin({ /* additional options here */ })], }, }; You can learn more about this in webpack documentation.\nRemember that you only need to do this for production builds. You shouldn’t apply TerserPlugin in development because it will hide useful React warnings, and make the builds much slower.\nreact-dom 16.5+ and react-native 0.57+ provide enhanced profiling capabilities in DEV mode with the React DevTools Profiler. An overview of the Profiler can be found in the blog post “Introducing the React Profiler”. A video walkthrough of the profiler is also available on YouTube.\nIf you haven’t yet installed the React DevTools, you can find them here:\nChrome Browser Extension Firefox Browser Extension Standalone Node Package Note\nA production profiling bundle of react-dom is also available as react-dom/profiling. Read more about how to use this bundle at fb.me/react-profiling\nNote\nBefore React 17, we use the standard User Timing API to profile components with the chrome performance tab. For a more detailed walkthrough, check out this article by Ben Schwarz.\nVirtualize Long Lists # If your application renders long lists of data (hundreds or thousands of rows), we recommend using a technique known as “windowing”. This technique only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created.\nreact-window and react-virtualized are popular windowing libraries. They provide several reusable components for displaying lists, grids, and tabular data. You can also create your own windowing component, like Twitter did, if you want something more tailored to your application’s specific use case.\nAvoid Reconciliation # React builds and maintains an internal representation of the rendered UI. It includes the React elements you return from your components. This representation lets React avoid creating DOM nodes and accessing existing ones beyond necessity, as that can be slower than operations on JavaScript objects. Sometimes it is referred to as a “virtual DOM”, but it works the same way on React Native.\nWhen a component’s props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM.\nEven though React only updates the changed DOM nodes, re-rendering still takes some time. In many cases it’s not a problem, but if the slowdown is noticeable, you can speed all of this up by overriding the lifecycle function shouldComponentUpdate, which is triggered before the re-rendering process starts. The default implementation of this function returns true, leaving React to perform the update:\nshouldComponentUpdate(nextProps, nextState) { return true; } If you know that in some situations your component doesn’t need to update, you can return false from shouldComponentUpdate instead, to skip the whole rendering process, including calling render() on this component and below.\nIn most cases, instead of writing shouldComponentUpdate() by hand, you can inherit from React.PureComponent. It is equivalent to implementing shouldComponentUpdate() with a shallow comparison of current and previous props and state.\nshouldComponentUpdate In Action # Here’s a subtree of components. For each one, SCU indicates what shouldComponentUpdate returned, and vDOMEq indicates whether the rendered React elements were equivalent. Finally, the circle’s color indicates whether the component had to be reconciled or not.\nSince shouldComponentUpdate returned false for the subtree rooted at C2, React did not attempt to render C2, and thus didn’t even have to invoke shouldComponentUpdate on C4 and C5.\nFor C1 and C3, shouldComponentUpdate returned true, so React had to go down to the leaves and check them. For C6 shouldComponentUpdate returned true, and since the rendered elements weren’t equivalent React had to update the DOM.\nThe last interesting case is C8. React had to render this component, but since the React elements it returned were equal to the previously rendered ones, it didn’t have to update the DOM.\nNote that React only had to do DOM mutations for C6, which was inevitable. For C8, it bailed out by comparing the rendered React elements, and for C2’s subtree and C7, it didn’t even have to compare the elements as we bailed out on shouldComponentUpdate, and render was not called.\nExamples # If the only way your component ever changes is when the props.color or the state.count variable changes, you could have shouldComponentUpdate check that:\nclass CounterButton extends React.Component { constructor(props) { super(props); this.state = {count: 1}; } shouldComponentUpdate(nextProps, nextState) { if (this.props.color !== nextProps.color) { return true; } if (this.state.count !== nextState.count) { return true; } return false; } render() { return ( \u0026lt;button color={this.props.color} onClick={() =\u0026gt; this.setState(state =\u0026gt; ({count: state.count + 1}))}\u0026gt; Count: {this.state.count} \u0026lt;/button\u0026gt; ); } } In this code, shouldComponentUpdate is just checking if there is any change in props.color or state.count. If those values don’t change, the component doesn’t update. If your component got more complex, you could use a similar pattern of doing a “shallow comparison” between all the fields of props and state to determine if the component should update. This pattern is common enough that React provides a helper to use this logic - just inherit from React.PureComponent. So this code is a simpler way to achieve the same thing:\nclass CounterButton extends React.PureComponent { constructor(props) { super(props); this.state = {count: 1}; } render() { return ( \u0026lt;button color={this.props.color} onClick={() =\u0026gt; this.setState(state =\u0026gt; ({count: state.count + 1}))}\u0026gt; Count: {this.state.count} \u0026lt;/button\u0026gt; ); } } Most of the time, you can use React.PureComponent instead of writing your own shouldComponentUpdate. It only does a shallow comparison, so you can’t use it if the props or state may have been mutated in a way that a shallow comparison would miss.\nThis can be a problem with more complex data structures. For example, let’s say you want a ListOfWords component to render a comma-separated list of words, with a parent WordAdder component that lets you click a button to add a word to the list. This code does not work correctly:\nclass ListOfWords extends React.PureComponent { render() { return \u0026lt;div\u0026gt;{this.props.words.join(\u0026#39;,\u0026#39;)}\u0026lt;/div\u0026gt;; } } class WordAdder extends React.Component { constructor(props) { super(props); this.state = { words: [\u0026#39;marklar\u0026#39;] }; this.handleClick = this.handleClick.bind(this); } handleClick() { // This section is bad style and causes a bug const words = this.state.words; words.push(\u0026#39;marklar\u0026#39;); this.setState({words: words}); } render() { return ( \u0026lt;div\u0026gt; \u0026lt;button onClick={this.handleClick} /\u0026gt; \u0026lt;ListOfWords words={this.state.words} /\u0026gt; \u0026lt;/div\u0026gt; ); } } The problem is that PureComponent will do a simple comparison between the old and new values of this.props.words. Since this code mutates the words array in the handleClick method of WordAdder, the old and new values of this.props.words will compare as equal, even though the actual words in the array have changed. The ListOfWords will thus not update even though it has new words that should be rendered.\nThe Power Of Not Mutating Data # The simplest way to avoid this problem is to avoid mutating values that you are using as props or state. For example, the handleClick method above could be rewritten using concat as:\nhandleClick() { this.setState(state =\u0026gt; ({ words: state.words.concat([\u0026#39;marklar\u0026#39;]) })); } ES6 supports a spread syntax for arrays which can make this easier. If you’re using Create React App, this syntax is available by default.\nhandleClick() { this.setState(state =\u0026gt; ({ words: [...state.words, \u0026#39;marklar\u0026#39;], })); }; You can also rewrite code that mutates objects to avoid mutation, in a similar way. For example, let’s say we have an object named colormap and we want to write a function that changes colormap.right to be 'blue'. We could write:\nfunction updateColorMap(colormap) { colormap.right = \u0026#39;blue\u0026#39;; } To write this without mutating the original object, we can use Object.assign method:\nfunction updateColorMap(colormap) { return Object.assign({}, colormap, {right: \u0026#39;blue\u0026#39;}); } updateColorMap now returns a new object, rather than mutating the old one. Object.assign is in ES6 and requires a polyfill.\nObject spread syntax makes it easier to update objects without mutation as well:\nfunction updateColorMap(colormap) { return {...colormap, right: \u0026#39;blue\u0026#39;}; } This feature was added to JavaScript in ES2018.\nIf you’re using Create React App, both Object.assign and the object spread syntax are available by default.\nWhen you deal with deeply nested objects, updating them in an immutable way can feel convoluted. If you run into this problem, check out Immer or immutability-helper. These libraries let you write highly readable code without losing the benefits of immutability.\n"},{"id":335,"href":"/docs/references/meta-frameworks/react/advanced/portals/","title":"Portals","section":"Advanced","content":" Portals # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nThese new documentation pages teach modern React and include live examples:\ncreatePortal Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\nReactDOM.createPortal(child, container) The first argument (child) is any renderable React child, such as an element, string, or fragment. The second argument (container) is a DOM element.\nUsage # Normally, when you return an element from a component’s render method, it’s mounted into the DOM as a child of the nearest parent node:\nrender() { // React mounts a new div and renders the children into it return ( \u0026lt;div\u0026gt; {this.props.children} \u0026lt;/div\u0026gt; ); } However, sometimes it’s useful to insert a child into a different location in the DOM:\nrender() { // React does *not* create a new div. It renders the children into `domNode`. // `domNode` is any valid DOM node, regardless of its location in the DOM. return ReactDOM.createPortal( this.props.children, domNode ); } A typical use case for portals is when a parent component has an overflow: hidden or z-index style, but you need the child to visually “break out” of its container. For example, dialogs, hovercards, and tooltips.\nNote:\nWhen working with portals, remember that managing keyboard focus becomes very important.\nFor modal dialogs, ensure that everyone can interact with them by following the WAI-ARIA Modal Authoring Practices.\nTry it on CodePen\nEvent Bubbling Through Portals # Even though a portal can be anywhere in the DOM tree, it behaves like a normal React child in every other way. Features like context work exactly the same regardless of whether the child is a portal, as the portal still exists in the React tree regardless of position in the DOM tree.\nThis includes event bubbling. An event fired from inside a portal will propagate to ancestors in the containing React tree, even if those elements are not ancestors in the DOM tree. Assuming the following HTML structure:\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app-root\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;modal-root\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; A Parent component in #app-root would be able to catch an uncaught, bubbling event from the sibling node #modal-root.\n// These two containers are siblings in the DOM const appRoot = document.getElementById(\u0026#39;app-root\u0026#39;); const modalRoot = document.getElementById(\u0026#39;modal-root\u0026#39;); class Modal extends React.Component { constructor(props) { super(props); this.el = document.createElement(\u0026#39;div\u0026#39;); } componentDidMount() { // The portal element is inserted in the DOM tree after // the Modal\u0026#39;s children are mounted, meaning that children // will be mounted on a detached DOM node. If a child // component requires to be attached to the DOM tree // immediately when mounted, for example to measure a // DOM node, or uses \u0026#39;autoFocus\u0026#39; in a descendant, add // state to Modal and only render the children when Modal // is inserted in the DOM tree. modalRoot.appendChild(this.el); } componentWillUnmount() { modalRoot.removeChild(this.el); } render() { return ReactDOM.createPortal( this.props.children, this.el ); } } class Parent extends React.Component { constructor(props) { super(props); this.state = {clicks: 0}; this.handleClick = this.handleClick.bind(this); } handleClick() { // This will fire when the button in Child is clicked, // updating Parent\u0026#39;s state, even though button // is not direct descendant in the DOM. this.setState(state =\u0026gt; ({ clicks: state.clicks + 1 })); } render() { return ( \u0026lt;div onClick={this.handleClick}\u0026gt; \u0026lt;p\u0026gt;Number of clicks: {this.state.clicks}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Open up the browser DevTools to observe that the button is not a child of the div with the onClick handler. \u0026lt;/p\u0026gt; \u0026lt;Modal\u0026gt; \u0026lt;Child /\u0026gt; \u0026lt;/Modal\u0026gt; \u0026lt;/div\u0026gt; ); } } function Child() { // The click event on this button will bubble up to parent, // because there is no \u0026#39;onClick\u0026#39; attribute defined return ( \u0026lt;div className=\u0026#34;modal\u0026#34;\u0026gt; \u0026lt;button\u0026gt;Click\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } const root = ReactDOM.createRoot(appRoot); root.render(\u0026lt;Parent /\u0026gt;); Try it on CodePen\nCatching an event bubbling up from a portal in a parent component allows the development of more flexible abstractions that are not inherently reliant on portals. For example, if you render a \u0026lt;Modal /\u0026gt; component, the parent can capture its events regardless of whether it’s implemented using portals.\n"},{"id":336,"href":"/docs/references/meta-frameworks/react/advanced/profiler-api/","title":"Profiler API","section":"Advanced","content":" ⭐ Profiler API # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nThese new documentation pages teach modern React:\n\u0026lt;Profiler\u0026gt; The Profiler measures how often a React application renders and what the “cost” of rendering is. Its purpose is to help identify parts of an application that are slow and may benefit from optimizations such as memoization.\nNote:\nProfiling adds some additional overhead, so it is disabled in the production build.\nTo opt into production profiling, React provides a special production build with profiling enabled. Read more about how to use this build at fb.me/react-profiling\nUsage # A Profiler can be added anywhere in a React tree to measure the cost of rendering that part of the tree. It requires two props: an id (string) and an onRender callback (function) which React calls any time a component within the tree “commits” an update.\nFor example, to profile a Navigation component and its descendants:\nrender( \u0026lt;App\u0026gt; \u0026lt;Profiler id=\u0026#34;Navigation\u0026#34; onRender={callback}\u0026gt; \u0026lt;Navigation {...props} /\u0026gt; \u0026lt;/Profiler\u0026gt; \u0026lt;Main {...props} /\u0026gt; \u0026lt;/App\u0026gt; ); Multiple Profiler components can be used to measure different parts of an application:\nrender( \u0026lt;App\u0026gt; \u0026lt;Profiler id=\u0026#34;Navigation\u0026#34; onRender={callback}\u0026gt; \u0026lt;Navigation {...props} /\u0026gt; \u0026lt;/Profiler\u0026gt; \u0026lt;Profiler id=\u0026#34;Main\u0026#34; onRender={callback}\u0026gt; \u0026lt;Main {...props} /\u0026gt; \u0026lt;/Profiler\u0026gt; \u0026lt;/App\u0026gt; ); Profiler components can also be nested to measure different components within the same subtree:\nrender( \u0026lt;App\u0026gt; \u0026lt;Profiler id=\u0026#34;Panel\u0026#34; onRender={callback}\u0026gt; \u0026lt;Panel {...props}\u0026gt; \u0026lt;Profiler id=\u0026#34;Content\u0026#34; onRender={callback}\u0026gt; \u0026lt;Content {...props} /\u0026gt; \u0026lt;/Profiler\u0026gt; \u0026lt;Profiler id=\u0026#34;PreviewPane\u0026#34; onRender={callback}\u0026gt; \u0026lt;PreviewPane {...props} /\u0026gt; \u0026lt;/Profiler\u0026gt; \u0026lt;/Panel\u0026gt; \u0026lt;/Profiler\u0026gt; \u0026lt;/App\u0026gt; ); Note\nAlthough Profiler is a light-weight component, it should be used only when necessary; each use adds some CPU and memory overhead to an application.\nonRender Callback # The Profiler requires an onRender function as a prop. React calls this function any time a component within the profiled tree “commits” an update. It receives parameters describing what was rendered and how long it took.\nfunction onRenderCallback( id, // the \u0026#34;id\u0026#34; prop of the Profiler tree that has just committed phase, // either \u0026#34;mount\u0026#34; (if the tree just mounted) or \u0026#34;update\u0026#34; (if it re-rendered) actualDuration, // time spent rendering the committed update baseDuration, // estimated time to render the entire subtree without memoization startTime, // when React began rendering this update commitTime, // when React committed this update interactions // the Set of interactions belonging to this update ) { // Aggregate or log render timings... } Let’s take a closer look at each of the props:\nid: string - The id prop of the Profiler tree that has just committed. This can be used to identify which part of the tree was committed if you are using multiple profilers. phase: \u0026quot;mount\u0026quot; | \u0026quot;update\u0026quot; - Identifies whether the tree has just been mounted for the first time or re-rendered due to a change in props, state, or hooks. actualDuration: number - Time spent rendering the Profiler and its descendants for the current update. This indicates how well the subtree makes use of memoization (e.g. React.memo, useMemo, shouldComponentUpdate). Ideally this value should decrease significantly after the initial mount as many of the descendants will only need to re-render if their specific props change. baseDuration: number - Duration of the most recent render time for each individual component within the Profiler tree. This value estimates a worst-case cost of rendering (e.g. the initial mount or a tree with no memoization). startTime: number - Timestamp when React began rendering the current update. commitTime: number - Timestamp when React committed the current update. This value is shared between all profilers in a commit, enabling them to be grouped if desirable. interactions: Set - Set of “interactions” that were being traced when the update was scheduled (e.g. when render or setState were called). Note\nInteractions can be used to identify the cause of an update, although the API for tracing them is still experimental.\nLearn more about it at fb.me/react-interaction-tracing\n"},{"id":337,"href":"/docs/references/meta-frameworks/react/advanced/react-without-es6/","title":"React Without Es6","section":"Advanced","content":" React Without ES6 # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nNormally you would define a React component as a plain JavaScript class:\nclass Greeting extends React.Component { render() { return \u0026lt;h1\u0026gt;Hello, {this.props.name}\u0026lt;/h1\u0026gt;; } } If you don’t use ES6 yet, you may use the create-react-class module instead:\nvar createReactClass = require(\u0026#39;create-react-class\u0026#39;); var Greeting = createReactClass({ render: function() { return \u0026lt;h1\u0026gt;Hello, {this.props.name}\u0026lt;/h1\u0026gt;; } }); The API of ES6 classes is similar to createReactClass() with a few exceptions.\nDeclaring Default Props # With functions and ES6 classes defaultProps is defined as a property on the component itself:\nclass Greeting extends React.Component { // ... } Greeting.defaultProps = { name: \u0026#39;Mary\u0026#39; }; With createReactClass(), you need to define getDefaultProps() as a function on the passed object:\nvar Greeting = createReactClass({ getDefaultProps: function() { return { name: \u0026#39;Mary\u0026#39; }; }, // ... }); Setting the Initial State # In ES6 classes, you can define the initial state by assigning this.state in the constructor:\nclass Counter extends React.Component { constructor(props) { super(props); this.state = {count: props.initialCount}; } // ... } With createReactClass(), you have to provide a separate getInitialState method that returns the initial state:\nvar Counter = createReactClass({ getInitialState: function() { return {count: this.props.initialCount}; }, // ... }); Autobinding # In React components declared as ES6 classes, methods follow the same semantics as regular ES6 classes. This means that they don’t automatically bind this to the instance. You’ll have to explicitly use .bind(this) in the constructor:\nclass SayHello extends React.Component { constructor(props) { super(props); this.state = {message: \u0026#39;Hello!\u0026#39;}; // This line is important! this.handleClick = this.handleClick.bind(this); } handleClick() { alert(this.state.message); } render() { // Because `this.handleClick` is bound, we can use it as an event handler. return ( \u0026lt;button onClick={this.handleClick}\u0026gt; Say hello \u0026lt;/button\u0026gt; ); } } With createReactClass(), this is not necessary because it binds all methods:\nvar SayHello = createReactClass({ getInitialState: function() { return {message: \u0026#39;Hello!\u0026#39;}; }, handleClick: function() { alert(this.state.message); }, render: function() { return ( \u0026lt;button onClick={this.handleClick}\u0026gt; Say hello \u0026lt;/button\u0026gt; ); } }); This means writing ES6 classes comes with a little more boilerplate code for event handlers, but the upside is slightly better performance in large applications.\nIf the boilerplate code is too unattractive to you, you may use ES2022 Class Properties syntax:\nclass SayHello extends React.Component { constructor(props) { super(props); this.state = {message: \u0026#39;Hello!\u0026#39;}; } // Using an arrow here binds the method: handleClick = () =\u0026gt; { alert(this.state.message); }; render() { return ( \u0026lt;button onClick={this.handleClick}\u0026gt; Say hello \u0026lt;/button\u0026gt; ); } } You also have a few other options:\nBind methods in the constructor. Use arrow functions, e.g. onClick={(e) =\u0026gt; this.handleClick(e)}. Keep using createReactClass. Mixins # Note:\nES6 launched without any mixin support. Therefore, there is no support for mixins when you use React with ES6 classes.\nWe also found numerous issues in codebases using mixins, and don’t recommend using them in the new code.\nThis section exists only for the reference.\nSometimes very different components may share some common functionality. These are sometimes called cross-cutting concerns. createReactClass lets you use a legacy mixins system for that.\nOne common use case is a component wanting to update itself on a time interval. It’s easy to use setInterval(), but it’s important to cancel your interval when you don’t need it anymore to save memory. React provides lifecycle methods that let you know when a component is about to be created or destroyed. Let’s create a simple mixin that uses these methods to provide an easy setInterval() function that will automatically get cleaned up when your component is destroyed.\nvar SetIntervalMixin = { componentWillMount: function() { this.intervals = []; }, setInterval: function() { this.intervals.push(setInterval.apply(null, arguments)); }, componentWillUnmount: function() { this.intervals.forEach(clearInterval); } }; var createReactClass = require(\u0026#39;create-react-class\u0026#39;); var TickTock = createReactClass({ mixins: [SetIntervalMixin], // Use the mixin getInitialState: function() { return {seconds: 0}; }, componentDidMount: function() { this.setInterval(this.tick, 1000); // Call a method on the mixin }, tick: function() { this.setState({seconds: this.state.seconds + 1}); }, render: function() { return ( \u0026lt;p\u0026gt; React has been running for {this.state.seconds} seconds. \u0026lt;/p\u0026gt; ); } }); const root = ReactDOM.createRoot(document.getElementById(\u0026#39;example\u0026#39;)); root.render(\u0026lt;TickTock /\u0026gt;); If a component is using multiple mixins and several mixins define the same lifecycle method (i.e. several mixins want to do some cleanup when the component is destroyed), all of the lifecycle methods are guaranteed to be called. Methods defined on mixins run in the order mixins were listed, followed by a method call on the component.\n"},{"id":338,"href":"/docs/references/meta-frameworks/react/advanced/react-without-jsx/","title":"React Without Jsx","section":"Advanced","content":" React Without JSX # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nJSX is not a requirement for using React. Using React without JSX is especially convenient when you don’t want to set up compilation in your build environment.\nEach JSX element is just syntactic sugar for calling React.createElement(component, props, ...children). So, anything you can do with JSX can also be done with just plain JavaScript.\nFor example, this code written with JSX:\nclass Hello extends React.Component { render() { return \u0026lt;div\u0026gt;Hello {this.props.toWhat}\u0026lt;/div\u0026gt;; } } const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); root.render(\u0026lt;Hello toWhat=\u0026#34;World\u0026#34; /\u0026gt;); can be compiled to this code that does not use JSX:\nclass Hello extends React.Component { render() { return React.createElement(\u0026#39;div\u0026#39;, null, `Hello ${this.props.toWhat}`); } } const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); root.render(React.createElement(Hello, {toWhat: \u0026#39;World\u0026#39;}, null)); If you’re curious to see more examples of how JSX is converted to JavaScript, you can try out the online Babel compiler.\nThe component can either be provided as a string, as a subclass of React.Component, or a plain function.\nIf you get tired of typing React.createElement so much, one common pattern is to assign a shorthand:\nconst e = React.createElement; const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); root.render(e(\u0026#39;div\u0026#39;, null, \u0026#39;Hello World\u0026#39;)); If you use this shorthand form for React.createElement, it can be almost as convenient to use React without JSX.\nAlternatively, you can refer to community projects such as react-hyperscript and hyperscript-helpers which offer a terser syntax.\n"},{"id":339,"href":"/docs/references/meta-frameworks/react/advanced/reconciliation/","title":"Reconciliation","section":"Advanced","content":" ⭐ Reconciliation # React provides a declarative API so that you don’t have to worry about exactly what changes on every update. This makes writing applications a lot easier, but it might not be obvious how this is implemented within React. This article explains the choices we made in React’s “diffing” algorithm so that component updates are predictable while being fast enough for high-performance apps.\nMotivation # When you use React, at a single point in time you can think of the render() function as creating a tree of React elements. On the next state or props update, that render() function will return a different tree of React elements. React then needs to figure out how to efficiently update the UI to match the most recent tree.\nThere are some generic solutions to this algorithmic problem of generating the minimum number of operations to transform one tree into another. However, the state of the art algorithms have a complexity in the order of O(n3) where n is the number of elements in the tree.\nIf we used this in React, displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:\nTwo elements of different types will produce different trees. The developer can hint at which child elements may be stable across different renders with a key prop. In practice, these assumptions are valid for almost all practical use cases.\nThe Diffing Algorithm # When diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements.\nElements Of Different Types # Whenever the root elements have different types, React will tear down the old tree and build the new tree from scratch. Going from \u0026lt;a\u0026gt; to \u0026lt;img\u0026gt;, or from \u0026lt;Article\u0026gt; to \u0026lt;Comment\u0026gt;, or from \u0026lt;Button\u0026gt; to \u0026lt;div\u0026gt; - any of those will lead to a full rebuild.\nWhen tearing down a tree, old DOM nodes are destroyed. Component instances receive componentWillUnmount(). When building up a new tree, new DOM nodes are inserted into the DOM. Component instances receive UNSAFE_componentWillMount() and then componentDidMount(). Any state associated with the old tree is lost.\nAny components below the root will also get unmounted and have their state destroyed. For example, when diffing:\n\u0026lt;div\u0026gt; \u0026lt;Counter /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;span\u0026gt; \u0026lt;Counter /\u0026gt; \u0026lt;/span\u0026gt; This will destroy the old Counter and remount a new one.\nNote:\nThis method is considered legacy and you should avoid it in new code:\nUNSAFE_componentWillMount() DOM Elements Of The Same Type # When comparing two React DOM elements of the same type, React looks at the attributes of both, keeps the same underlying DOM node, and only updates the changed attributes. For example:\n\u0026lt;div className=\u0026#34;before\u0026#34; title=\u0026#34;stuff\u0026#34; /\u0026gt; \u0026lt;div className=\u0026#34;after\u0026#34; title=\u0026#34;stuff\u0026#34; /\u0026gt; By comparing these two elements, React knows to only modify the className on the underlying DOM node.\nWhen updating style, React also knows to update only the properties that changed. For example:\n\u0026lt;div style={{color: \u0026#39;red\u0026#39;, fontWeight: \u0026#39;bold\u0026#39;}} /\u0026gt; \u0026lt;div style={{color: \u0026#39;green\u0026#39;, fontWeight: \u0026#39;bold\u0026#39;}} /\u0026gt; When converting between these two elements, React knows to only modify the color style, not the fontWeight.\nAfter handling the DOM node, React then recurses on the children.\nComponent Elements Of The Same Type # When a component updates, the instance stays the same, so that state is maintained across renders. React updates the props of the underlying component instance to match the new element, and calls UNSAFE_componentWillReceiveProps(), UNSAFE_componentWillUpdate() and componentDidUpdate() on the underlying instance.\nNext, the render() method is called and the diff algorithm recurses on the previous result and the new result.\nNote:\nThese methods are considered legacy and you should avoid them in new code:\nUNSAFE_componentWillUpdate() UNSAFE_componentWillReceiveProps() Recursing On Children # By default, when recursing on the children of a DOM node, React just iterates over both lists of children at the same time and generates a mutation whenever there’s a difference.\nFor example, when adding an element at the end of the children, converting between these two trees works well:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;first\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;first\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;third\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; React will match the two \u0026lt;li\u0026gt;first\u0026lt;/li\u0026gt; trees, match the two \u0026lt;li\u0026gt;second\u0026lt;/li\u0026gt; trees, and then insert the \u0026lt;li\u0026gt;third\u0026lt;/li\u0026gt; tree.\nIf you implement it naively, inserting an element at the beginning has worse performance. For example, converting between these two trees works poorly:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Duke\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Villanova\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Connecticut\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Duke\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Villanova\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; React will mutate every child instead of realizing it can keep the \u0026lt;li\u0026gt;Duke\u0026lt;/li\u0026gt; and \u0026lt;li\u0026gt;Villanova\u0026lt;/li\u0026gt; subtrees intact. This inefficiency can be a problem.\nKeys # In order to solve this issue, React supports a key attribute. When children have keys, React uses the key to match children in the original tree with children in the subsequent tree. For example, adding a key to our inefficient example above can make the tree conversion efficient:\n\u0026lt;ul\u0026gt; \u0026lt;li key=\u0026#34;2015\u0026#34;\u0026gt;Duke\u0026lt;/li\u0026gt; \u0026lt;li key=\u0026#34;2016\u0026#34;\u0026gt;Villanova\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li key=\u0026#34;2014\u0026#34;\u0026gt;Connecticut\u0026lt;/li\u0026gt; \u0026lt;li key=\u0026#34;2015\u0026#34;\u0026gt;Duke\u0026lt;/li\u0026gt; \u0026lt;li key=\u0026#34;2016\u0026#34;\u0026gt;Villanova\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; Now React knows that the element with key '2014' is the new one, and the elements with the keys '2015' and '2016' have just moved.\nIn practice, finding a key is usually not hard. The element you are going to display may already have a unique ID, so the key can just come from your data:\n\u0026lt;li key={item.id}\u0026gt;{item.name}\u0026lt;/li\u0026gt; When that’s not the case, you can add a new ID property to your model or hash some parts of the content to generate a key. The key only has to be unique among its siblings, not globally unique.\nAs a last resort, you can pass an item’s index in the array as a key. This can work well if the items are never reordered, but reorders will be slow.\nReorders can also cause issues with component state when indexes are used as keys. Component instances are updated and reused based on their key. If the key is an index, moving an item changes it. As a result, component state for things like uncontrolled inputs can get mixed up and updated in unexpected ways.\nHere is an example of the issues that can be caused by using indexes as keys on CodePen, and here is an updated version of the same example showing how not using indexes as keys will fix these reordering, sorting, and prepending issues.\nTradeoffs # It is important to remember that the reconciliation algorithm is an implementation detail. React could rerender the whole app on every action; the end result would be the same. Just to be clear, rerender in this context means calling render for all components, it doesn’t mean React will unmount and remount them. It will only apply the differences following the rules stated in the previous sections.\nWe are regularly refining the heuristics in order to make common use cases faster. In the current implementation, you can express the fact that a subtree has been moved amongst its siblings, but you cannot tell that it has moved somewhere else. The algorithm will rerender that full subtree.\nBecause React relies on heuristics, if the assumptions behind them are not met, performance will suffer.\nThe algorithm will not try to match subtrees of different component types. If you see yourself alternating between two component types with very similar output, you may want to make it the same type. In practice, we haven’t found this to be an issue. Keys should be stable, predictable, and unique. Unstable keys (like those produced by Math.random()) will cause many component instances and DOM nodes to be unnecessarily recreated, which can cause performance degradation and lost state in child components. "},{"id":340,"href":"/docs/references/meta-frameworks/react/advanced/refs-and-the-dom/","title":"Refs and the Dom","section":"Advanced","content":" 🌵 Refs and the DOM # Refs provide a way to access DOM nodes or React elements created in the render method.\nIn the typical React dataflow, props are the only way that parent components interact with their children. To modify a child, you re-render it with new props. However, there are a few cases where you need to imperatively modify a child outside of the typical dataflow. The child to be modified could be an instance of a React component, or it could be a DOM element. For both of these cases, React provides an escape hatch.\nWhen to Use Refs # There are a few good use cases for refs:\nManaging focus, text selection, or media playback. Triggering imperative animations. Integrating with third-party DOM libraries. Avoid using refs for anything that can be done declaratively.\nFor example, instead of exposing open() and close() methods on a Dialog component, pass an isOpen prop to it.\nDon’t Overuse Refs # Your first inclination may be to use refs to “make things happen” in your app. If this is the case, take a moment and think more critically about where state should be owned in the component hierarchy. Often, it becomes clear that the proper place to “own” that state is at a higher level in the hierarchy. See the Lifting State Up guide for examples of this.\nNote\nThe examples below have been updated to use the React.createRef() API introduced in React 16.3. If you are using an earlier release of React, we recommend using callback refs instead.\nCreating Refs # Refs are created using React.createRef() and attached to React elements via the ref attribute. Refs are commonly assigned to an instance property when a component is constructed so they can be referenced throughout the component.\nclass MyComponent extends React.Component { constructor(props) { super(props); this.myRef = React.createRef(); } render() { return \u0026lt;div ref={this.myRef} /\u0026gt;; } } Accessing Refs # When a ref is passed to an element in render, a reference to the node becomes accessible at the current attribute of the ref.\nconst node = this.myRef.current; The value of the ref differs depending on the type of the node:\nWhen the ref attribute is used on an HTML element, the ref created in the constructor with React.createRef() receives the underlying DOM element as its current property. When the ref attribute is used on a custom class component, the ref object receives the mounted instance of the component as its current. You may not use the ref attribute on function components because they don’t have instances. The examples below demonstrate the differences.\nAdding a Ref to a DOM Element\nThis code uses a ref to store a reference to a DOM node:\nclass CustomTextInput extends React.Component { constructor(props) { super(props); // create a ref to store the textInput DOM element this.textInput = React.createRef(); this.focusTextInput = this.focusTextInput.bind(this); } focusTextInput() { // Explicitly focus the text input using the raw DOM API // Note: we\u0026#39;re accessing \u0026#34;current\u0026#34; to get the DOM node this.textInput.current.focus(); } render() { // tell React that we want to associate the \u0026lt;input\u0026gt; ref // with the `textInput` that we created in the constructor return ( \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; ref={this.textInput} /\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Focus the text input\u0026#34; onClick={this.focusTextInput} /\u0026gt; \u0026lt;/div\u0026gt; ); } } React will assign the current property with the DOM element when the component mounts, and assign it back to null when it unmounts. ref updates happen before componentDidMount or componentDidUpdate lifecycle methods.\nAdding a Ref to a Class Component\nIf we wanted to wrap the CustomTextInput above to simulate it being clicked immediately after mounting, we could use a ref to get access to the custom input and call its focusTextInput method manually:\nclass AutoFocusTextInput extends React.Component { constructor(props) { super(props); this.textInput = React.createRef(); } componentDidMount() { this.textInput.current.focusTextInput(); } render() { return ( \u0026lt;CustomTextInput ref={this.textInput} /\u0026gt; ); } } Note that this only works if CustomTextInput is declared as a class:\nclass CustomTextInput extends React.Component { // ... } Refs and Function Components\nBy default, you may not use the ref attribute on function components because they don’t have instances:\nfunction MyFunctionComponent() { return \u0026lt;input /\u0026gt;; } class Parent extends React.Component { constructor(props) { super(props); this.textInput = React.createRef(); } render() { // This will *not* work! return ( \u0026lt;MyFunctionComponent ref={this.textInput} /\u0026gt; ); } } If you want to allow people to take a ref to your function component, you can use forwardRef (possibly in conjunction with useImperativeHandle), or you can convert the component to a class.\nYou can, however, use the ref attribute inside a function component as long as you refer to a DOM element or a class component:\nfunction CustomTextInput(props) { // textInput must be declared here so the ref can refer to it const textInput = useRef(null); function handleClick() { textInput.current.focus(); } return ( \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; ref={textInput} /\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Focus the text input\u0026#34; onClick={handleClick} /\u0026gt; \u0026lt;/div\u0026gt; ); } Exposing DOM Refs to Parent Components # In rare cases, you might want to have access to a child’s DOM node from a parent component. This is generally not recommended because it breaks component encapsulation, but it can occasionally be useful for triggering focus or measuring the size or position of a child DOM node.\nWhile you could add a ref to the child component, this is not an ideal solution, as you would only get a component instance rather than a DOM node. Additionally, this wouldn’t work with function components.\nIf you use React 16.3 or higher, we recommend to use ref forwarding for these cases. Ref forwarding lets components opt into exposing any child component’s ref as their own. You can find a detailed example of how to expose a child’s DOM node to a parent component in the ref forwarding documentation.\nIf you use React 16.2 or lower, or if you need more flexibility than provided by ref forwarding, you can use this alternative approach and explicitly pass a ref as a differently named prop.\nWhen possible, we advise against exposing DOM nodes, but it can be a useful escape hatch. Note that this approach requires you to add some code to the child component. If you have absolutely no control over the child component implementation, your last option is to use findDOMNode(), but it is discouraged and deprecated in StrictMode.\nCallback Refs # React also supports another way to set refs called “callback refs”, which gives more fine-grain control over when refs are set and unset.\nInstead of passing a ref attribute created by createRef(), you pass a function. The function receives the React component instance or HTML DOM element as its argument, which can be stored and accessed elsewhere.\nThe example below implements a common pattern: using the ref callback to store a reference to a DOM node in an instance property.\nclass CustomTextInput extends React.Component { constructor(props) { super(props); this.textInput = null; this.setTextInputRef = element =\u0026gt; { this.textInput = element; }; this.focusTextInput = () =\u0026gt; { // Focus the text input using the raw DOM API if (this.textInput) this.textInput.focus(); }; } componentDidMount() { // autofocus the input on mount this.focusTextInput(); } render() { // Use the `ref` callback to store a reference to the text input DOM // element in an instance field (for example, this.textInput). return ( \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; ref={this.setTextInputRef} /\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Focus the text input\u0026#34; onClick={this.focusTextInput} /\u0026gt; \u0026lt;/div\u0026gt; ); } } React will call the ref callback with the DOM element when the component mounts, and call it with null when it unmounts. Refs are guaranteed to be up-to-date before componentDidMount or componentDidUpdate fires.\nYou can pass callback refs between components like you can with object refs that were created with React.createRef().\nfunction CustomTextInput(props) { return ( \u0026lt;div\u0026gt; \u0026lt;input ref={props.inputRef} /\u0026gt; \u0026lt;/div\u0026gt; ); } class Parent extends React.Component { render() { return ( \u0026lt;CustomTextInput inputRef={el =\u0026gt; this.inputElement = el} /\u0026gt; ); } } In the example above, Parent passes its ref callback as an inputRef prop to the CustomTextInput, and the CustomTextInput passes the same function as a special ref attribute to the \u0026lt;input\u0026gt;. As a result, this.inputElement in Parent will be set to the DOM node corresponding to the \u0026lt;input\u0026gt; element in the CustomTextInput.\nLegacy API: String Refs # If you worked with React before, you might be familiar with an older API where the ref attribute is a string, like \u0026quot;textInput\u0026quot;, and the DOM node is accessed as this.refs.textInput. We advise against it because string refs have some issues, are considered legacy, and are likely to be removed in one of the future releases.\nNote\nIf you’re currently using this.refs.textInput to access refs, we recommend using either the callback pattern or the createRef API instead.\nCaveats with callback refs # If the ref callback is defined as an inline function, it will get called twice during updates, first with null and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one. You can avoid this by defining the ref callback as a bound method on the class, but note that it shouldn’t matter in most cases.\n"},{"id":341,"href":"/docs/references/meta-frameworks/react/advanced/render-props/","title":"Render Props","section":"Advanced","content":" 🧀 Render Props # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nRender props are used in modern React, but aren’t very common.\nFor many cases, they have been replaced by custom Hooks.\nThe term “render prop” refers to a technique for sharing code between React components using a prop whose value is a function.\nA component with a render prop takes a function that returns a React element and calls it instead of implementing its own render logic.\n\u0026lt;DataProvider render={data =\u0026gt; ( \u0026lt;h1\u0026gt;Hello {data.target}\u0026lt;/h1\u0026gt; )}/\u0026gt; Libraries that use render props include React Router, Downshift and Formik.\nIn this document, we’ll discuss why render props are useful, and how to write your own.\nUse Render Props for Cross-Cutting Concerns # Components are the primary unit of code reuse in React, but it’s not always obvious how to share the state or behavior that one component encapsulates to other components that need that same state.\nFor example, the following component tracks the mouse position in a web app:\nclass MouseTracker extends React.Component { constructor(props) { super(props); this.handleMouseMove = this.handleMouseMove.bind(this); this.state = { x: 0, y: 0 }; } handleMouseMove(event) { this.setState({ x: event.clientX, y: event.clientY }); } render() { return ( \u0026lt;div style={{ height: \u0026#39;100vh\u0026#39; }} onMouseMove={this.handleMouseMove}\u0026gt; \u0026lt;h1\u0026gt;Move the mouse around!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;The current mouse position is ({this.state.x}, {this.state.y})\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } } As the cursor moves around the screen, the component displays its (x, y) coordinates in a \u0026lt;p\u0026gt;.\nNow the question is: How can we reuse this behavior in another component? In other words, if another component needs to know about the cursor position, can we encapsulate that behavior so that we can easily share it with that component?\nSince components are the basic unit of code reuse in React, let’s try refactoring the code a bit to use a \u0026lt;Mouse\u0026gt; component that encapsulates the behavior we need to reuse elsewhere.\n// The \u0026lt;Mouse\u0026gt; component encapsulates the behavior we need... class Mouse extends React.Component { constructor(props) { super(props); this.handleMouseMove = this.handleMouseMove.bind(this); this.state = { x: 0, y: 0 }; } handleMouseMove(event) { this.setState({ x: event.clientX, y: event.clientY }); } render() { return ( \u0026lt;div style={{ height: \u0026#39;100vh\u0026#39; }} onMouseMove={this.handleMouseMove}\u0026gt; {/* ...but how do we render something other than a \u0026lt;p\u0026gt;? */} \u0026lt;p\u0026gt;The current mouse position is ({this.state.x}, {this.state.y})\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } } class MouseTracker extends React.Component { render() { return ( \u0026lt;\u0026gt; \u0026lt;h1\u0026gt;Move the mouse around!\u0026lt;/h1\u0026gt; \u0026lt;Mouse /\u0026gt; \u0026lt;/\u0026gt; ); } } Now the \u0026lt;Mouse\u0026gt; component encapsulates all behavior associated with listening for mousemove events and storing the (x, y) position of the cursor, but it’s not yet truly reusable.\nFor example, let’s say we have a \u0026lt;Cat\u0026gt; component that renders the image of a cat chasing the mouse around the screen. We might use a \u0026lt;Cat mouse={{ x, y }}\u0026gt; prop to tell the component the coordinates of the mouse so it knows where to position the image on the screen.\nAs a first pass, you might try rendering the \u0026lt;Cat\u0026gt; inside \u0026lt;Mouse\u0026gt;’s render method, like this:\nclass Cat extends React.Component { render() { const mouse = this.props.mouse; return ( \u0026lt;img src=\u0026#34;/cat.jpg\u0026#34; style={{ position: \u0026#39;absolute\u0026#39;, left: mouse.x, top: mouse.y }} /\u0026gt; ); } } class MouseWithCat extends React.Component { constructor(props) { super(props); this.handleMouseMove = this.handleMouseMove.bind(this); this.state = { x: 0, y: 0 }; } handleMouseMove(event) { this.setState({ x: event.clientX, y: event.clientY }); } render() { return ( \u0026lt;div style={{ height: \u0026#39;100vh\u0026#39; }} onMouseMove={this.handleMouseMove}\u0026gt; {/* We could just swap out the \u0026lt;p\u0026gt; for a \u0026lt;Cat\u0026gt; here ... but then we would need to create a separate \u0026lt;MouseWithSomethingElse\u0026gt; component every time we need to use it, so \u0026lt;MouseWithCat\u0026gt; isn\u0026#39;t really reusable yet. */} \u0026lt;Cat mouse={this.state} /\u0026gt; \u0026lt;/div\u0026gt; ); } } class MouseTracker extends React.Component { render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Move the mouse around!\u0026lt;/h1\u0026gt; \u0026lt;MouseWithCat /\u0026gt; \u0026lt;/div\u0026gt; ); } } This approach will work for our specific use case, but we haven’t achieved the objective of truly encapsulating the behavior in a reusable way. Now, every time we want the mouse position for a different use case, we have to create a new component (i.e. essentially another \u0026lt;MouseWithCat\u0026gt;) that renders something specifically for that use case.\nHere’s where the render prop comes in: Instead of hard-coding a \u0026lt;Cat\u0026gt; inside a \u0026lt;Mouse\u0026gt; component, and effectively changing its rendered output, we can provide \u0026lt;Mouse\u0026gt; with a function prop that it uses to dynamically determine what to render–a render prop.\nclass Cat extends React.Component { render() { const mouse = this.props.mouse; return ( \u0026lt;img src=\u0026#34;/cat.jpg\u0026#34; style={{ position: \u0026#39;absolute\u0026#39;, left: mouse.x, top: mouse.y }} /\u0026gt; ); } } class Mouse extends React.Component { constructor(props) { super(props); this.handleMouseMove = this.handleMouseMove.bind(this); this.state = { x: 0, y: 0 }; } handleMouseMove(event) { this.setState({ x: event.clientX, y: event.clientY }); } render() { return ( \u0026lt;div style={{ height: \u0026#39;100vh\u0026#39; }} onMouseMove={this.handleMouseMove}\u0026gt; {/* Instead of providing a static representation of what \u0026lt;Mouse\u0026gt; renders, use the `render` prop to dynamically determine what to render. */} {this.props.render(this.state)} \u0026lt;/div\u0026gt; ); } } class MouseTracker extends React.Component { render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Move the mouse around!\u0026lt;/h1\u0026gt; \u0026lt;Mouse render={mouse =\u0026gt; ( \u0026lt;Cat mouse={mouse} /\u0026gt; )}/\u0026gt; \u0026lt;/div\u0026gt; ); } } Now, instead of effectively cloning the \u0026lt;Mouse\u0026gt; component and hard-coding something else in its render method to solve for a specific use case, we provide a render prop that \u0026lt;Mouse\u0026gt; can use to dynamically determine what it renders.\nMore concretely, a render prop is a function prop that a component uses to know what to render.\nThis technique makes the behavior that we need to share extremely portable. To get that behavior, render a \u0026lt;Mouse\u0026gt; with a render prop that tells it what to render with the current (x, y) of the cursor.\nOne interesting thing to note about render props is that you can implement most higher-order components (HOC) using a regular component with a render prop. For example, if you would prefer to have a withMouse HOC instead of a \u0026lt;Mouse\u0026gt; component, you could easily create one using a regular \u0026lt;Mouse\u0026gt; with a render prop:\n// If you really want a HOC for some reason, you can easily // create one using a regular component with a render prop! function withMouse(Component) { return class extends React.Component { render() { return ( \u0026lt;Mouse render={mouse =\u0026gt; ( \u0026lt;Component {...this.props} mouse={mouse} /\u0026gt; )}/\u0026gt; ); } } } So using a render prop makes it possible to use either pattern.\nUsing Props Other Than render # It’s important to remember that just because the pattern is called “render props” you don’t have to use a prop named render to use this pattern. In fact, any prop that is a function that a component uses to know what to render is technically a “render prop”.\nAlthough the examples above use render, we could just as easily use the children prop!\n\u0026lt;Mouse children={mouse =\u0026gt; ( \u0026lt;p\u0026gt;The mouse position is {mouse.x}, {mouse.y}\u0026lt;/p\u0026gt; )}/\u0026gt; And remember, the children prop doesn’t actually need to be named in the list of “attributes” in your JSX element. Instead, you can put it directly inside the element!\n\u0026lt;Mouse\u0026gt; {mouse =\u0026gt; ( \u0026lt;p\u0026gt;The mouse position is {mouse.x}, {mouse.y}\u0026lt;/p\u0026gt; )} \u0026lt;/Mouse\u0026gt; You’ll see this technique used in the react-motion API.\nSince this technique is a little unusual, you’ll probably want to explicitly state that children should be a function in your propTypes when designing an API like this.\nMouse.propTypes = { children: PropTypes.func.isRequired }; Caveats # Be careful when using Render Props with React.PureComponent # Using a render prop can negate the advantage that comes from using React.PureComponent if you create the function inside a render method. This is because the shallow prop comparison will always return false for new props, and each render in this case will generate a new value for the render prop.\nFor example, continuing with our \u0026lt;Mouse\u0026gt; component from above, if Mouse were to extend React.PureComponent instead of React.Component, our example would look like this:\nclass Mouse extends React.PureComponent { // Same implementation as above... } class MouseTracker extends React.Component { render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Move the mouse around!\u0026lt;/h1\u0026gt; {/* This is bad! The value of the `render` prop will be different on each render. */} \u0026lt;Mouse render={mouse =\u0026gt; ( \u0026lt;Cat mouse={mouse} /\u0026gt; )}/\u0026gt; \u0026lt;/div\u0026gt; ); } } In this example, each time \u0026lt;MouseTracker\u0026gt; renders, it generates a new function as the value of the \u0026lt;Mouse render\u0026gt; prop, thus negating the effect of \u0026lt;Mouse\u0026gt; extending React.PureComponent in the first place!\nTo get around this problem, you can sometimes define the prop as an instance method, like so:\nclass MouseTracker extends React.Component { // Defined as an instance method, `this.renderTheCat` always // refers to *same* function when we use it in render renderTheCat(mouse) { return \u0026lt;Cat mouse={mouse} /\u0026gt;; } render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Move the mouse around!\u0026lt;/h1\u0026gt; \u0026lt;Mouse render={this.renderTheCat} /\u0026gt; \u0026lt;/div\u0026gt; ); } } In cases where you cannot define the prop statically (e.g. because you need to close over the component’s props and/or state) \u0026lt;Mouse\u0026gt; should extend React.Component instead.\n"},{"id":342,"href":"/docs/references/meta-frameworks/react/advanced/static-type-checking/","title":"Static Type Checking","section":"Advanced","content":" Static Type Checking # Static type checkers like Flow and TypeScript identify certain types of problems before you even run your code. They can also improve developer workflow by adding features like auto-completion. For this reason, we recommend using Flow or TypeScript instead of PropTypes for larger code bases.\nFlow # Flow is a static type checker for your JavaScript code. It is developed at Facebook and is often used with React. It lets you annotate the variables, functions, and React components with a special type syntax, and catch mistakes early. You can read an introduction to Flow to learn its basics.\nTo use Flow, you need to:\nAdd Flow to your project as a dependency. Ensure that Flow syntax is stripped from the compiled code. Add type annotations and run Flow to check them. We will explain these steps below in detail.\nAdding Flow to a Project # First, navigate to your project directory in the terminal. You will need to run the following command:\nIf you use Yarn, run:\nIf you use npm, run:\nnpm install --save-dev flow-bin This command installs the latest version of Flow into your project.\nNow, add flow to the \u0026quot;scripts\u0026quot; section of your package.json to be able to use this from the terminal:\n{ // ... \u0026#34;scripts\u0026#34;: { \u0026#34;flow\u0026#34;: \u0026#34;flow\u0026#34;, // ... }, // ... } Finally, run one of the following commands:\nIf you use Yarn, run:\nIf you use npm, run:\nThis command will create a Flow configuration file that you will need to commit.\nStripping Flow Syntax from the Compiled Code # Flow extends the JavaScript language with a special syntax for type annotations. However, browsers aren’t aware of this syntax, so we need to make sure it doesn’t end up in the compiled JavaScript bundle that is sent to the browser.\nThe exact way to do this depends on the tools you use to compile JavaScript.\nCreate React App\nIf your project was set up using Create React App, congratulations! The Flow annotations are already being stripped by default so you don’t need to do anything else in this step.\nBabel\nNote:\nThese instructions are not for Create React App users. Even though Create React App uses Babel under the hood, it is already configured to understand Flow. Only follow this step if you don’t use Create React App.\nIf you manually configured Babel for your project, you will need to install a special preset for Flow.\nIf you use Yarn, run:\nyarn add --dev @babel/preset-flow If you use npm, run:\nnpm install --save-dev @babel/preset-flow Then add the flow preset to your Babel configuration. For example, if you configure Babel through .babelrc file, it could look like this:\n{ \u0026#34;presets\u0026#34;: [ \u0026#34;@babel/preset-flow\u0026#34;, \u0026#34;react\u0026#34; ] } This will let you use the Flow syntax in your code.\nNote:\nFlow does not require the react preset, but they are often used together. Flow itself understands JSX syntax out of the box.\nOther Build Setups\nIf you don’t use either Create React App or Babel, you can use flow-remove-types to strip the type annotations.\nRunning Flow # If you followed the instructions above, you should be able to run Flow for the first time.\nIf you use npm, run:\nYou should see a message like:\nNo errors! ✨ Done in 0.17s. Adding Flow Type Annotations # By default, Flow only checks the files that include this annotation:\nTypically it is placed at the top of a file. Try adding it to some files in your project and run yarn flow or npm run flow to see if Flow already found any issues.\nThere is also an option to force Flow to check all files regardless of the annotation. This can be too noisy for existing projects, but is reasonable for a new project if you want to fully type it with Flow.\nNow you’re all set! We recommend to check out the following resources to learn more about Flow:\nFlow Documentation: Type Annotations Flow Documentation: Editors Flow Documentation: React Linting in Flow TypeScript # TypeScript is a programming language developed by Microsoft. It is a typed superset of JavaScript, and includes its own compiler. Being a typed language, TypeScript can catch errors and bugs at build time, long before your app goes live. You can learn more about using TypeScript with React here.\nTo use TypeScript, you need to:\nAdd TypeScript as a dependency to your project Configure the TypeScript compiler options Use the right file extensions Add definitions for libraries you use Let’s go over these in detail.\nUsing TypeScript with Create React App # Create React App supports TypeScript out of the box.\nTo create a new project with TypeScript support, run:\nnpx create-react-app my-app --template typescript You can also add it to an existing Create React App project, as documented here.\nNote:\nIf you use Create React App, you can skip the rest of this page. It describes the manual setup which doesn’t apply to Create React App users.\nAdding TypeScript to a Project # It all begins with running one command in your terminal.\nIf you use Yarn, run:\nyarn add --dev typescript If you use npm, run:\nnpm install --save-dev typescript Congrats! You’ve installed the latest version of TypeScript into your project. Installing TypeScript gives us access to the tsc command. Before configuration, let’s add tsc to the “scripts” section in our package.json:\n{ // ... \u0026#34;scripts\u0026#34;: { \u0026#34;build\u0026#34;: \u0026#34;tsc\u0026#34;, // ... }, // ... } Configuring the TypeScript Compiler # The compiler is of no help to us until we tell it what to do. In TypeScript, these rules are defined in a special file called tsconfig.json. To generate this file:\nIf you use Yarn, run:\nIf you use npm, run:\nLooking at the now generated tsconfig.json, you can see that there are many options you can use to configure the compiler. For a detailed description of all the options, check here.\nOf the many options, we’ll look at rootDir and outDir. In its true fashion, the compiler will take in typescript files and generate javascript files. However we don’t want to get confused with our source files and the generated output.\nWe’ll address this in two steps:\nFirstly, let’s arrange our project structure like this. We’ll place all our source code in the src directory. ├── package.json ├── src │ └── index.ts └── tsconfig.json Next, we’ll tell the compiler where our source code is and where the output should go. // tsconfig.json { \u0026#34;compilerOptions\u0026#34;: { // ... \u0026#34;rootDir\u0026#34;: \u0026#34;src\u0026#34;, \u0026#34;outDir\u0026#34;: \u0026#34;build\u0026#34; // ... }, } Great! Now when we run our build script the compiler will output the generated javascript to the build folder. The TypeScript React Starter provides a tsconfig.json with a good set of rules to get you started.\nGenerally, you don’t want to keep the generated javascript in your source control, so be sure to add the build folder to your .gitignore.\nFile extensions # In React, you most likely write your components in a .js file. In TypeScript we have 2 file extensions:\n.ts is the default file extension while .tsx is a special extension used for files which contain JSX.\nRunning TypeScript # If you followed the instructions above, you should be able to run TypeScript for the first time.\nIf you use npm, run:\nIf you see no output, it means that it completed successfully.\nType Definitions # To be able to show errors and hints from other packages, the compiler relies on declaration files. A declaration file provides all the type information about a library. This enables us to use javascript libraries like those on npm in our project.\nThere are two main ways to get declarations for a library:\nBundled - The library bundles its own declaration file. This is great for us, since all we need to do is install the library, and we can use it right away. To check if a library has bundled types, look for an index.d.ts file in the project. Some libraries will have it specified in their package.json under the typings or types field.\nDefinitelyTyped - DefinitelyTyped is a huge repository of declarations for libraries that don’t bundle a declaration file. The declarations are crowd-sourced and managed by Microsoft and open source contributors. React for example doesn’t bundle its own declaration file. Instead we can get it from DefinitelyTyped. To do so enter this command in your terminal.\n# yarn yarn add --dev @types/react # npm npm i --save-dev @types/react Local Declarations Sometimes the package that you want to use doesn’t bundle declarations nor is it available on DefinitelyTyped. In that case, we can have a local declaration file. To do this, create a declarations.d.ts file in the root of your source directory. A simple declaration could look like this:\ndeclare module \u0026#39;querystring\u0026#39; { export function stringify(val: object): string export function parse(val: string): object } You are now ready to code! We recommend to check out the following resources to learn more about TypeScript:\nTypeScript Documentation: Everyday Types TypeScript Documentation: Migrating from JavaScript TypeScript Documentation: React and Webpack ReScript # ReScript is a typed language that compiles to JavaScript. Some of its core features are guaranteed 100% type coverage, first-class JSX support and dedicated React bindings to allow integration in existing JS / TS React codebases.\nYou can find more infos on integrating ReScript in your existing JS / React codebase here.\nKotlin # Kotlin is a statically typed language developed by JetBrains. Its target platforms include the JVM, Android, LLVM, and JavaScript.\nJetBrains develops and maintains several tools specifically for the React community: React bindings as well as Create React Kotlin App. The latter helps you start building React apps with Kotlin with no build configuration.\nOther Languages # Note there are other statically typed languages that compile to JavaScript and are thus React compatible. For example, F#/Fable with elmish-react. Check out their respective sites for more information, and feel free to add more statically typed languages that work with React to this page!\n"},{"id":343,"href":"/docs/references/meta-frameworks/react/advanced/strict-mode/","title":"Strict Mode","section":"Advanced","content":" 🐸 Strict Mode # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nThese new documentation pages teach modern React and include live examples:\nStrictMode StrictMode is a tool for highlighting potential problems in an application. Like Fragment, StrictMode does not render any visible UI. It activates additional checks and warnings for its descendants.\nNote:\nStrict mode checks are run in development mode only; they do not impact the production build.\nYou can enable strict mode for any part of your application. For example:\nimport React from \u0026#39;react\u0026#39;; function ExampleApplication() { return ( \u0026lt;div\u0026gt; \u0026lt;Header /\u0026gt; \u0026lt;React.StrictMode\u0026gt; \u0026lt;div\u0026gt; \u0026lt;ComponentOne /\u0026gt; \u0026lt;ComponentTwo /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/React.StrictMode\u0026gt; \u0026lt;Footer /\u0026gt; \u0026lt;/div\u0026gt; ); } In the above example, strict mode checks will not be run against the Header and Footer components. However, ComponentOne and ComponentTwo, as well as all of their descendants, will have the checks.\nStrictMode currently helps with:\nIdentifying components with unsafe lifecycles Warning about legacy string ref API usage Warning about deprecated findDOMNode usage Detecting unexpected side effects Detecting legacy context API Ensuring reusable state Additional functionality will be added with future releases of React.\nIdentifying unsafe lifecycles # As explained in this blog post, certain legacy lifecycle methods are unsafe for use in async React applications. However, if your application uses third party libraries, it can be difficult to ensure that these lifecycles aren’t being used. Fortunately, strict mode can help with this!\nWhen strict mode is enabled, React compiles a list of all class components using the unsafe lifecycles, and logs a warning message with information about these components, like so:\nAddressing the issues identified by strict mode now will make it easier for you to take advantage of concurrent rendering in future releases of React.\nWarning about legacy string ref API usage # Previously, React provided two ways for managing refs: the legacy string ref API and the callback API. Although the string ref API was the more convenient of the two, it had several downsides and so our official recommendation was to use the callback form instead.\nReact 16.3 added a third option that offers the convenience of a string ref without any of the downsides:\nclass MyComponent extends React.Component { constructor(props) { super(props); this.inputRef = React.createRef(); } render() { return \u0026lt;input type=\u0026#34;text\u0026#34; ref={this.inputRef} /\u0026gt;; } componentDidMount() { this.inputRef.current.focus(); } } Since object refs were largely added as a replacement for string refs, strict mode now warns about usage of string refs.\nNote:\nCallback refs will continue to be supported in addition to the new createRef API.\nYou don’t need to replace callback refs in your components. They are slightly more flexible, so they will remain as an advanced feature.\nLearn more about the new createRef API here.\nWarning about deprecated findDOMNode usage # React used to support findDOMNode to search the tree for a DOM node given a class instance. Normally you don’t need this because you can attach a ref directly to a DOM node.\nfindDOMNode can also be used on class components but this was breaking abstraction levels by allowing a parent to demand that certain children were rendered. It creates a refactoring hazard where you can’t change the implementation details of a component because a parent might be reaching into its DOM node. findDOMNode only returns the first child, but with the use of Fragments, it is possible for a component to render multiple DOM nodes. findDOMNode is a one time read API. It only gave you an answer when you asked for it. If a child component renders a different node, there is no way to handle this change. Therefore findDOMNode only worked if components always return a single DOM node that never changes.\nYou can instead make this explicit by passing a ref to your custom component and pass that along to the DOM using ref forwarding.\nYou can also add a wrapper DOM node in your component and attach a ref directly to it.\nclass MyComponent extends React.Component { constructor(props) { super(props); this.wrapper = React.createRef(); } render() { return \u0026lt;div ref={this.wrapper}\u0026gt;{this.props.children}\u0026lt;/div\u0026gt;; } } Note:\nIn CSS, the display: contents attribute can be used if you don’t want the node to be part of the layout.\nDetecting unexpected side effects # Conceptually, React does work in two phases:\nThe render phase determines what changes need to be made to e.g. the DOM. During this phase, React calls render and then compares the result to the previous render. The commit phase is when React applies any changes. (In the case of React DOM, this is when React inserts, updates, and removes DOM nodes.) React also calls lifecycles like componentDidMount and componentDidUpdate during this phase. The commit phase is usually very fast, but rendering can be slow. For this reason, the upcoming concurrent mode (which is not enabled by default yet) breaks the rendering work into pieces, pausing and resuming the work to avoid blocking the browser. This means that React may invoke render phase lifecycles more than once before committing, or it may invoke them without committing at all (because of an error or a higher priority interruption).\nRender phase lifecycles include the following class component methods:\nconstructor componentWillMount (or UNSAFE_componentWillMount) componentWillReceiveProps (or UNSAFE_componentWillReceiveProps) componentWillUpdate (or UNSAFE_componentWillUpdate) getDerivedStateFromProps shouldComponentUpdate render setState updater functions (the first argument) Because the above methods might be called more than once, it’s important that they do not contain side-effects. Ignoring this rule can lead to a variety of problems, including memory leaks and invalid application state. Unfortunately, it can be difficult to detect these problems as they can often be non-deterministic.\nStrict mode can’t automatically detect side effects for you, but it can help you spot them by making them a little more deterministic. This is done by intentionally double-invoking the following functions:\nClass component constructor, render, and shouldComponentUpdate methods Class component static getDerivedStateFromProps method Function component bodies State updater functions (the first argument to setState) Functions passed to useState, useMemo, or useReducer Note:\nThis only applies to development mode. Lifecycles will not be double-invoked in production mode.\nFor example, consider the following code:\nclass TopLevelRoute extends React.Component { constructor(props) { super(props); SharedApplicationState.recordEvent(\u0026#39;ExampleComponent\u0026#39;); } } At first glance, this code might not seem problematic. But if SharedApplicationState.recordEvent is not idempotent, then instantiating this component multiple times could lead to invalid application state. This sort of subtle bug might not manifest during development, or it might do so inconsistently and so be overlooked.\nBy intentionally double-invoking methods like the component constructor, strict mode makes patterns like this easier to spot.\nNote:\nIn React 17, React automatically modifies the console methods like console.log() to silence the logs in the second call to lifecycle functions. However, it may cause undesired behavior in certain cases where a workaround can be used.\nStarting from React 18, React does not suppress any logs. However, if you have React DevTools installed, the logs from the second call will appear slightly dimmed. React DevTools also offers a setting (off by default) to suppress them completely.\nDetecting legacy context API # The legacy context API is error-prone, and will be removed in a future major version. It still works for all 16.x releases but will show this warning message in strict mode:\nRead the new context API documentation to help migrate to the new version.\nEnsuring reusable state # In the future, we’d like to add a feature that allows React to add and remove sections of the UI while preserving state. For example, when a user tabs away from a screen and back, React should be able to immediately show the previous screen. To do this, React will support remounting trees using the same component state used before unmounting.\nThis feature will give React better performance out-of-the-box, but requires components to be resilient to effects being mounted and destroyed multiple times. Most effects will work without any changes, but some effects do not properly clean up subscriptions in the destroy callback, or implicitly assume they are only mounted or destroyed once.\nTo help surface these issues, React 18 introduces a new development-only check to Strict Mode. This new check will automatically unmount and remount every component, whenever a component mounts for the first time, restoring the previous state on the second mount.\nTo demonstrate the development behavior you’ll see in Strict Mode with this feature, consider what happens when React mounts a new component. Without this change, when a component mounts, React creates the effects:\n* React mounts the component. * Layout effects are created. * Effects are created. With Strict Mode starting in React 18, whenever a component mounts in development, React will simulate immediately unmounting and remounting the component:\n* React mounts the component. * Layout effects are created. * Effects are created. * React simulates effects being destroyed on a mounted component. * Layout effects are destroyed. * Effects are destroyed. * React simulates effects being re-created on a mounted component. * Layout effects are created * Effect setup code runs On the second mount, React will restore the state from the first mount. This feature simulates user behavior such as a user tabbing away from a screen and back, ensuring that code will properly handle state restoration.\nWhen the component unmounts, effects are destroyed as normal:\n* React unmounts the component. * Layout effects are destroyed. * Effects are destroyed. Unmounting and remounting includes:\ncomponentDidMount componentWillUnmount useEffect useLayoutEffect useInsertionEffect Note:\nThis only applies to development mode, production behavior is unchanged.\nFor help supporting common issues, see:\nHow to support Reusable State in Effects "},{"id":344,"href":"/docs/references/meta-frameworks/react/advanced/typechecking-with-proptypes/","title":"Typechecking With Proptypes","section":"Advanced","content":" Typechecking With PropTypes # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nPropTypes aren’t commonly used in modern React. Use TypeScript for static type checking.\nNote:\nReact.PropTypes has moved into a different package since React v15.5. Please use the prop-types library instead.\nWe provide a codemod script to automate the conversion.\nAs your app grows, you can catch a lot of bugs with typechecking. For some applications, you can use JavaScript extensions like Flow or TypeScript to typecheck your whole application. But even if you don’t use those, React has some built-in typechecking abilities. To run typechecking on the props for a component, you can assign the special propTypes property:\nimport PropTypes from \u0026#39;prop-types\u0026#39;; class Greeting extends React.Component { render() { return ( \u0026lt;h1\u0026gt;Hello, {this.props.name}\u0026lt;/h1\u0026gt; ); } } Greeting.propTypes = { name: PropTypes.string }; In this example, we are using a class component, but the same functionality could also be applied to function components, or components created by React.memo or React.forwardRef.\nPropTypes exports a range of validators that can be used to make sure the data you receive is valid. In this example, we’re using PropTypes.string. When an invalid value is provided for a prop, a warning will be shown in the JavaScript console. For performance reasons, propTypes is only checked in development mode.\nPropTypes # Here is an example documenting the different validators provided:\nimport PropTypes from \u0026#39;prop-types\u0026#39;; MyComponent.propTypes = { // You can declare that a prop is a specific JS type. By default, these // are all optional. optionalArray: PropTypes.array, optionalBool: PropTypes.bool, optionalFunc: PropTypes.func, optionalNumber: PropTypes.number, optionalObject: PropTypes.object, optionalString: PropTypes.string, optionalSymbol: PropTypes.symbol, // Anything that can be rendered: numbers, strings, elements or an array // (or fragment) containing these types. optionalNode: PropTypes.node, // A React element. optionalElement: PropTypes.element, // A React element type (ie. MyComponent). optionalElementType: PropTypes.elementType, // You can also declare that a prop is an instance of a class. This uses // JS\u0026#39;s instanceof operator. optionalMessage: PropTypes.instanceOf(Message), // You can ensure that your prop is limited to specific values by treating // it as an enum. optionalEnum: PropTypes.oneOf([\u0026#39;News\u0026#39;, \u0026#39;Photos\u0026#39;]), // An object that could be one of many types optionalUnion: PropTypes.oneOfType([ PropTypes.string, PropTypes.number, PropTypes.instanceOf(Message) ]), // An array of a certain type optionalArrayOf: PropTypes.arrayOf(PropTypes.number), // An object with property values of a certain type optionalObjectOf: PropTypes.objectOf(PropTypes.number), // An object taking on a particular shape optionalObjectWithShape: PropTypes.shape({ color: PropTypes.string, fontSize: PropTypes.number }), // An object with warnings on extra properties optionalObjectWithStrictShape: PropTypes.exact({ name: PropTypes.string, quantity: PropTypes.number }), // You can chain any of the above with `isRequired` to make sure a warning // is shown if the prop isn\u0026#39;t provided. requiredFunc: PropTypes.func.isRequired, // A required value of any data type requiredAny: PropTypes.any.isRequired, // You can also specify a custom validator. It should return an Error // object if the validation fails. Don\u0026#39;t `console.warn` or throw, as this // won\u0026#39;t work inside `oneOfType`. customProp: function(props, propName, componentName) { if (!/matchme/.test(props[propName])) { return new Error( \u0026#39;Invalid prop `\u0026#39; + propName + \u0026#39;` supplied to\u0026#39; + \u0026#39; `\u0026#39; + componentName + \u0026#39;`. Validation failed.\u0026#39; ); } }, // You can also supply a custom validator to `arrayOf` and `objectOf`. // It should return an Error object if the validation fails. The validator // will be called for each key in the array or object. The first two // arguments of the validator are the array or object itself, and the // current item\u0026#39;s key. customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) { if (!/matchme/.test(propValue[key])) { return new Error( \u0026#39;Invalid prop `\u0026#39; + propFullName + \u0026#39;` supplied to\u0026#39; + \u0026#39; `\u0026#39; + componentName + \u0026#39;`. Validation failed.\u0026#39; ); } }) }; Requiring Single Child # With PropTypes.element you can specify that only a single child can be passed to a component as children.\nimport PropTypes from \u0026#39;prop-types\u0026#39;; class MyComponent extends React.Component { render() { // This must be exactly one element or it will warn. const children = this.props.children; return ( \u0026lt;div\u0026gt; {children} \u0026lt;/div\u0026gt; ); } } MyComponent.propTypes = { children: PropTypes.element.isRequired }; Default Prop Values # You can define default values for your props by assigning to the special defaultProps property:\nclass Greeting extends React.Component { render() { return ( \u0026lt;h1\u0026gt;Hello, {this.props.name}\u0026lt;/h1\u0026gt; ); } } // Specifies the default values for props: Greeting.defaultProps = { name: \u0026#39;Stranger\u0026#39; }; // Renders \u0026#34;Hello, Stranger\u0026#34;: const root = ReactDOM.createRoot(document.getElementById(\u0026#39;example\u0026#39;)); root.render(\u0026lt;Greeting /\u0026gt;); Since ES2022 you can also declare defaultProps as static property within a React component class. For more information, see the class public static fields. This modern syntax will require a compilation step to work within older browsers.\nclass Greeting extends React.Component { static defaultProps = { name: \u0026#39;stranger\u0026#39; } render() { return ( \u0026lt;div\u0026gt;Hello, {this.props.name}\u0026lt;/div\u0026gt; ) } } The defaultProps will be used to ensure that this.props.name will have a value if it was not specified by the parent component. The propTypes typechecking happens after defaultProps are resolved, so typechecking will also apply to the defaultProps.\nFunction Components # If you are using function components in your regular development, you may want to make some small changes to allow PropTypes to be properly applied.\nLet’s say you have a component like this:\nexport default function HelloWorldComponent({ name }) { return ( \u0026lt;div\u0026gt;Hello, {name}\u0026lt;/div\u0026gt; ) } To add PropTypes, you may want to declare the component in a separate function before exporting, like this:\nfunction HelloWorldComponent({ name }) { return ( \u0026lt;div\u0026gt;Hello, {name}\u0026lt;/div\u0026gt; ) } export default HelloWorldComponent Then, you can add PropTypes directly to the HelloWorldComponent:\nimport PropTypes from \u0026#39;prop-types\u0026#39; function HelloWorldComponent({ name }) { return ( \u0026lt;div\u0026gt;Hello, {name}\u0026lt;/div\u0026gt; ) } HelloWorldComponent.propTypes = { name: PropTypes.string } export default HelloWorldComponent "},{"id":345,"href":"/docs/references/meta-frameworks/react/advanced/uncontrolled-components/","title":"Uncontrolled Components","section":"Advanced","content":" Uncontrolled Components # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nThese new documentation pages teach modern React and include live examples:\n\u0026lt;input\u0026gt; \u0026lt;select\u0026gt; \u0026lt;textarea\u0026gt; In most cases, we recommend using controlled components to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.\nTo write an uncontrolled component, instead of writing an event handler for every state update, you can use a ref to get form values from the DOM.\nFor example, this code accepts a single name in an uncontrolled component:\nclass NameForm extends React.Component { constructor(props) { super(props); this.handleSubmit = this.handleSubmit.bind(this); this.input = React.createRef(); } handleSubmit(event) { alert(\u0026#39;A name was submitted: \u0026#39; + this.input.current.value); event.preventDefault(); } render() { return ( \u0026lt;form onSubmit={this.handleSubmit}\u0026gt; \u0026lt;label\u0026gt; Name: \u0026lt;input type=\u0026#34;text\u0026#34; ref={this.input} /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; ); } } Try it on CodePen\nSince an uncontrolled component keeps the source of truth in the DOM, it is sometimes easier to integrate React and non-React code when using uncontrolled components. It can also be slightly less code if you want to be quick and dirty. Otherwise, you should usually use controlled components.\nIf it’s still not clear which type of component you should use for a particular situation, you might find this article on controlled versus uncontrolled inputs to be helpful.\nDefault Values # In the React rendering lifecycle, the value attribute on form elements will override the value in the DOM. With an uncontrolled component, you often want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a defaultValue attribute instead of value. Changing the value of defaultValue attribute after a component has mounted will not cause any update of the value in the DOM.\nrender() { return ( \u0026lt;form onSubmit={this.handleSubmit}\u0026gt; \u0026lt;label\u0026gt; Name: \u0026lt;input defaultValue=\u0026#34;Bob\u0026#34; type=\u0026#34;text\u0026#34; ref={this.input} /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; ); } Likewise, \u0026lt;input type=\u0026quot;checkbox\u0026quot;\u0026gt; and \u0026lt;input type=\u0026quot;radio\u0026quot;\u0026gt; support defaultChecked, and \u0026lt;select\u0026gt; and \u0026lt;textarea\u0026gt; supports defaultValue.\nThe file input Tag # In HTML, an \u0026lt;input type=\u0026quot;file\u0026quot;\u0026gt; lets the user choose one or more files from their device storage to be uploaded to a server or manipulated by JavaScript via the File API.\nIn React, an \u0026lt;input type=\u0026quot;file\u0026quot; /\u0026gt; is always an uncontrolled component because its value can only be set by a user, and not programmatically.\nYou should use the File API to interact with the files. The following example shows how to create a ref to the DOM node to access file(s) in a submit handler:\nclass FileInput extends React.Component { constructor(props) { super(props); this.handleSubmit = this.handleSubmit.bind(this); this.fileInput = React.createRef(); } handleSubmit(event) { event.preventDefault(); alert( `Selected file - ${this.fileInput.current.files[0].name}` ); } render() { return ( \u0026lt;form onSubmit={this.handleSubmit}\u0026gt; \u0026lt;label\u0026gt; Upload file: \u0026lt;input type=\u0026#34;file\u0026#34; ref={this.fileInput} /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; ); } } const root = ReactDOM.createRoot( document.getElementById(\u0026#39;root\u0026#39;) ); root.render(\u0026lt;FileInput /\u0026gt;); Try it on CodePen\n"},{"id":346,"href":"/docs/references/meta-frameworks/react/advanced/web-components/","title":"Web Components","section":"Advanced","content":" 🐸 Web Components # React and Web Components are built to solve different problems. Web Components provide strong encapsulation for reusable components, while React provides a declarative library that keeps the DOM in sync with your data. The two goals are complementary. As a developer, you are free to use React in your Web Components, or to use Web Components in React, or both.\nMost people who use React don’t use Web Components, but you may want to, especially if you are using third-party UI components that are written using Web Components.\nUsing Web Components in React # class HelloMessage extends React.Component { render() { return \u0026lt;div\u0026gt;Hello \u0026lt;x-search\u0026gt;{this.props.name}\u0026lt;/x-search\u0026gt;!\u0026lt;/div\u0026gt;; } } Note:\nWeb Components often expose an imperative API. For instance, a video Web Component might expose play() and pause() functions. To access the imperative APIs of a Web Component, you will need to use a ref to interact with the DOM node directly. If you are using third-party Web Components, the best solution is to write a React component that behaves as a wrapper for your Web Component.\nEvents emitted by a Web Component may not properly propagate through a React render tree. You will need to manually attach event handlers to handle these events within your React components.\nOne common confusion is that Web Components use “class” instead of “className”.\nfunction BrickFlipbox() { return ( \u0026lt;brick-flipbox class=\u0026#34;demo\u0026#34;\u0026gt; \u0026lt;div\u0026gt;front\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;back\u0026lt;/div\u0026gt; \u0026lt;/brick-flipbox\u0026gt; ); } Using React in your Web Components # class XSearch extends HTMLElement { connectedCallback() { const mountPoint = document.createElement(\u0026#39;span\u0026#39;); this.attachShadow({ mode: \u0026#39;open\u0026#39; }).appendChild(mountPoint); const name = this.getAttribute(\u0026#39;name\u0026#39;); const url = \u0026#39;https://www.google.com/search?q=\u0026#39; + encodeURIComponent(name); const root = ReactDOM.createRoot(mountPoint); root.render(\u0026lt;a href={url}\u0026gt;{name}\u0026lt;/a\u0026gt;); } } customElements.define(\u0026#39;x-search\u0026#39;, XSearch); Note:\nThis code will not work if you transform classes with Babel. See this issue for the discussion. Include the custom-elements-es5-adapter before you load your web components to fix this issue.\n"},{"id":347,"href":"/docs/references/meta-frameworks/react/basics/installation/add-react-to-a-website/","title":"Add React to a Website","section":"Installation","content":" Add React to a Website # If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.\nNote # You need to install Node.js for local development. Although you can try React online or with a simple HTML page, realistically most JavaScript tooling you’ll want to use for development requires Node.js.\nUsing React for an entire subroute of your existing website # Let’s say you have an existing web app at example.com built with another server technology (like Rails), and you want to implement all routes starting with example.com/some-app/ fully with React.\nHere’s how we recommend to set it up:\nBuild the React part of your app using one of the React-based frameworks. Specify /some-app as the _base path_ in your framework’s configuration (here’s how: Next.js, Gatsby). Configure your server or a proxy so that all requests under /some-app/ are handled by your React app. This ensures the React part of your app can benefit from the best practices baked into those frameworks.\nMany React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even if you can’t or don’t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export ( next export output for Next.js, default for Gatsby) at /some-app/ instead.\nUsing React for a part of your existing page # Let’s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That’s a common way to integrate React—in fact, it’s how most React usage looked at Meta for many years!\nYou can do this in two steps:\nSet up a JavaScript environment that lets you use the JSX syntax, split your code into modules with the import / export syntax, and use packages (for example, React) from the npm package registry. Render your React components where you want to see them on the page. The exact approach depends on your existing page setup, so let’s walk through some details.\nStep 1: Set up a modular JavaScript environment # A modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on the npm registry—including React itself! How you do this depends on your existing setup:\nIf your app is already split into files that use import statements, try to use the setup you already have. Check whether writing \u0026lt;div /\u0026gt; in your JS code causes a syntax error. If it causes a syntax error, you might need to transform your JavaScript code with Babel, and enable the Babel React preset to use JSX. If your app doesn’t have an existing setup for compiling JavaScript modules, set it up with Vite. The Vite community maintains many integrations with backend frameworks, including Rails, Django, and Laravel. If your backend framework is not listed, follow this guide to manually integrate Vite builds with your backend. To check whether your setup works, run this command in your project folder:\nnpm install react react-dom\nThen add these lines of code at the top of your main JavaScript file (it might be called index.js or main.js):\nIf the entire content of your page was replaced by a “Hello, world!”, everything worked! Keep reading.\nNote # Integrating a modular JavaScript environment into an existing project for the first time can feel intimidating, but it’s worth it! If you get stuck, try our community resources or the Vite Chat.\nStep 2: Render React components anywhere on the page # In the previous step, you put this code at the top of your main file:\nimport { createRoot } from \u0026#39;react-dom/client\u0026#39;; // Clear the existing HTML content document.body.innerHTML = \u0026#39;\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026#39;; // Render your React component instead const root = createRoot(document.getElementById(\u0026#39;app\u0026#39;)); root.render(\u0026lt;h1\u0026gt;Hello, world\u0026lt;/h1\u0026gt;); Of course, you don’t actually want to clear the existing HTML content!\nDelete this code.\nInstead, you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it) and add a unique id attribute to any tag, for example:\n\u0026lt;!-- ... somewhere in your html ... --\u0026gt; \u0026lt;nav id=\u0026#34;navigation\u0026#34;\u0026gt;\u0026lt;/nav\u0026gt; \u0026lt;!-- ... more html ... --\u0026gt; This lets you find that HTML element with document.getElementById and pass it to createRoot so that you can render your own React component inside:\nNotice how the original HTML content from index.html is preserved, but your own NavigationBar React component now appears inside the \u0026lt;nav id=\u0026quot;navigation\u0026quot;\u0026gt; from your HTML. Read the createRoot usage documentation to learn more about rendering React components inside an existing HTML page.\nWhen you adopt React in an existing project, it’s common to start with small interactive components (like buttons), and then gradually keep “moving upwards” until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to a React framework right after to get the most out of React.\nUsing React Native in an existing native mobile app # React Native can also be integrated into existing native apps incrementally. If you have an existing native app for Android (Java or Kotlin) or iOS (Objective-C or Swift), follow this guide to add a React Native screen to it.\n"},{"id":348,"href":"/docs/references/meta-frameworks/react/basics/installation/cdn-links/","title":"Cdn Links","section":"Installation","content":" CDN Links # Both React and ReactDOM are available over a CDN.\n\u0026lt;script crossorigin src=\u0026#34;https://unpkg.com/react@18/umd/react.development.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script crossorigin src=\u0026#34;https://unpkg.com/react-dom@18/umd/react-dom.development.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; The versions above are only meant for development, and are not suitable for production. Minified and optimized production versions of React are available at:\n\u0026lt;script crossorigin src=\u0026#34;https://unpkg.com/react@18/umd/react.production.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script crossorigin src=\u0026#34;https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; To load a specific version of react and react-dom, replace 18 with the version number.\nWhy the crossorigin Attribute? # If you serve React from a CDN, we recommend to keep the crossorigin attribute set:\n\u0026lt;script crossorigin src=\u0026#34;...\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; We also recommend to verify that the CDN you are using sets the Access-Control-Allow-Origin: * HTTP header:\nThis enables a better error handling experience in React 16 and later.\n"},{"id":349,"href":"/docs/references/meta-frameworks/react/basics/installation/create-a-new-react-app/","title":"Create a New React App","section":"Installation","content":" Create a New React App # If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community. Frameworks provide features that most apps and sites eventually need, including routing, data fetching, and generating HTML.\nNote # You need to install Node.js for local development. You can also choose to use Node.js in production, but you don’t have to. Many React frameworks support export to a static HTML/CSS/JS folder.\nProduction-grade React frameworks # Next.js # Next.js is a full-stack React framework. It’s versatile and lets you create React apps of any size—from a mostly static blog to a complex dynamic application. To create a new Next.js project, run in your terminal:\nIf you’re new to Next.js, check out the Next.js tutorial.\nNext.js is maintained by Vercel. You can deploy a Next.js app to any Node.js or serverless hosting, or to your own server. Fully static Next.js apps can be deployed to any static hosting.\nRemix # Remix is a full-stack React framework with nested routing. It lets you break your app into nested parts that can load data in parallel and refresh in response to the user actions. To create a new Remix project, run:\nIf you’re new to Remix, check out the Remix blog tutorial (short) and app tutorial (long).\nRemix is maintained by Shopify. When you create a Remix project, you need to pick your deployment target. You can deploy a Remix app to any Node.js or serverless hosting by using or writing an adapter.\nGatsby # Gatsby is a React framework for fast CMS-backed websites. Its rich plugin ecosystem and its GraphQL data layer simplify integrating content, APIs, and services into one website. To create a new Gatsby project, run:\nIf you’re new to Gatsby, check out the Gatsby tutorial.\nGatsby is maintained by Netlify. You can deploy a fully static Gatsby site to any static hosting. If you opt into using server-only features, make sure your hosting provider supports them for Gatsby.\nExpo (for native apps) # Expo is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs. It provides an SDK for React Native that makes the native parts easier to use. To create a new Expo project, run:\nIf you’re new to Expo, check out the Expo tutorial.\nExpo is maintained by Expo (the company). Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions. Expo additionally provides opt-in paid cloud services.\nDeep DiveCan I use React without a framework? You can definitely use React without a framework—that’s how you’d use React for a part of your page. However, if you’re building a new app or a site fully with React, we recommend using a framework.\nHere’s why.\nEven if you don’t need routing or data fetching at first, you’ll likely want to add some libraries for them. As your JavaScript bundle grows with every new feature, you might have to figure out how to split code for every route individually. As your data fetching needs get more complex, you are likely to encounter server-client network waterfalls that make your app feel very slow. As your audience includes more users with poor network conditions and low-end devices, you might need to generate HTML from your components to display content early—either on the server, or during the build time. Changing your setup to run some of your code on the server or during the build can be very tricky.\nThese problems are not React-specific. This is why Svelte has SvelteKit, Vue has Nuxt, and so on. To solve these problems on your own, you’ll need to integrate your bundler with your router and with your data fetching library. It’s not hard to get an initial setup working, but there are a lot of subtleties involved in making an app that loads quickly even as it grows over time. You’ll want to send down the minimal amount of app code but do so in a single client–server roundtrip, in parallel with any data required for the page. You’ll likely want the page to be interactive before your JavaScript code even runs, to support progressive enhancement. You may want to generate a folder of fully static HTML files for your marketing pages that can be hosted anywhere and still work with JavaScript disabled. Building these capabilities yourself takes real work.\nReact frameworks on this page solve problems like these by default, with no extra work from your side. They let you start very lean and then scale your app with your needs. Each React framework has a community, so finding answers to questions and upgrading tooling is easier. Frameworks also give structure to your code, helping you and others retain context and skills between different projects. Conversely, with a custom setup it’s easier to get stuck on unsupported dependency versions, and you’ll essentially end up creating your own framework—albeit one with no community or upgrade path (and if it’s anything like the ones we’ve made in the past, more haphazardly designed).\nIf you’re still not convinced, or your app has unusual constraints not served well by these frameworks and you’d like to roll your own custom setup, we can’t stop you—go for it! Grab react and react-dom from npm, set up your custom build process with a bundler like Vite or Parcel, and add other tools as you need them for routing, static generation or server-side rendering, and more.\nBleeding-edge React frameworks # As we’ve explored how to continue improving React, we realized that integrating React more closely with frameworks (specifically, with routing, bundling, and server technologies) is our biggest opportunity to help React users build better apps. The Next.js team has agreed to collaborate with us in researching, developing, integrating, and testing framework-agnostic bleeding-edge React features like React Server Components.\nThese features are getting closer to being production-ready every day, and we’ve been in talks with other bundler and framework developers about integrating them. Our hope is that in a year or two, all frameworks listed on this page will have full support for these features. (If you’re a framework author interested in partnering with us to experiment with these features, please let us know!)\nNext.js (App Router) # Next.js’s App Router is a redesign of the Next.js APIs aiming to fulfill the React team’s full-stack architecture vision. It lets you fetch data in asynchronous components that run on the server or even during the build.\nNext.js is maintained by Vercel. You can deploy a Next.js app to any Node.js or serverless hosting, or to your own server. Next.js also supports static export which doesn’t require a server.\nPitfall # Next.js’s App Router is currently in beta and is not yet recommended for production (as of Mar 2023). To experiment with it in an existing Next.js project, follow this incremental migration guide.\nDeep DiveWhich features make up the React team’s full-stack architecture vision? Next.js’s App Router bundler fully implements the official React Server Components specification. This lets you mix build-time, server-only, and interactive components in a single React tree.\nFor example, you can write a server-only React component as an async function that reads from a database or from a file. Then you can pass data down from it to your interactive components:\n// This component runs *only* on the server (or during the build). async function Talks({ confId }) { // 1. You\u0026#39;re on the server, so you can talk to your data layer. API endpoint not required. const talks = await db.Talks.findAll({ confId }); // 2. Add any amount of rendering logic. It won\u0026#39;t make your JavaScript bundle larger. const videos = talks.map(talk =\u0026gt; talk.video); // 3. Pass the data down to the components that will run in the browser. return \u0026lt;SearchableVideoList videos={videos} /\u0026gt;; } Next.js’s App Router also integrates data fetching with Suspense. This lets you specify a loading state (like a skeleton placeholder) for different parts of your user interface directly in your React tree:\n\u0026lt;Suspense fallback={\u0026lt;TalksLoading /\u0026gt;}\u0026gt; \u0026lt;Talks confId={conf.id} /\u0026gt; \u0026lt;/Suspense\u0026gt; Server Components and Suspense are React features rather than Next.js features. However, adopting them at the framework level requires buy-in and non-trivial implementation work. At the moment, the Next.js App Router is the most complete implementation. The React team is working with bundler developers to make these features easier to implement in the next generation of frameworks.\n"},{"id":350,"href":"/docs/references/meta-frameworks/react/basics/installation/getting-started/","title":"Getting Started","section":"Installation","content":" Getting Started # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nThe new Quick Start teaches modern React and includes live examples.\nThis page is an overview of the React documentation and related resources.\nReact is a JavaScript library for building user interfaces. Learn what React is all about on our homepage or in the tutorial.\nTry React Learn React Staying Informed Versioned Documentation Something Missing? Try React # React has been designed from the start for gradual adoption, and you can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to a simple HTML page, or start a complex React-powered app, the links in this section will help you get started.\nOnline Playgrounds # If you’re interested in playing around with React, you can use an online code playground. Try a Hello World template on CodePen, CodeSandbox, or Stackblitz.\nIf you prefer to use your own text editor, you can also download this HTML file, edit it, and open it from the local filesystem in your browser. It does a slow runtime code transformation, so we’d only recommend using this for simple demos.\nAdd React to a Website # You can add React to an HTML page in one minute. You can then either gradually expand its presence, or keep it contained to a few dynamic widgets.\nCreate a New React App # When starting a React project, a simple HTML page with script tags might still be the best option. It only takes a minute to set up!\nAs your application grows, you might want to consider a more integrated setup. There are several JavaScript toolchains we recommend for larger applications. Each of them can work with little to no configuration and lets you take full advantage of the rich React ecosystem. Learn how.\nLearn React # People come to React from different backgrounds and with different learning styles. Whether you prefer a more theoretical or a practical approach, we hope you’ll find this section helpful.\nIf you prefer to learn by doing, start with our practical tutorial. If you prefer to learn concepts step by step, start with our guide to main concepts. Like any unfamiliar technology, React does have a learning curve. With practice and some patience, you will get the hang of it.\nFirst Examples # The React homepage contains a few small React examples with a live editor. Even if you don’t know anything about React yet, try changing their code and see how it affects the result.\nReact for Beginners # If you feel that the React documentation goes at a faster pace than you’re comfortable with, check out this overview of React by Tania Rascia. It introduces the most important React concepts in a detailed, beginner-friendly way. Once you’re done, give the documentation another try!\nReact for Designers # If you’re coming from a design background, these resources are a great place to get started.\nJavaScript Resources # The React documentation assumes some familiarity with programming in the JavaScript language. You don’t have to be an expert, but it’s harder to learn both React and JavaScript at the same time.\nWe recommend going through this JavaScript overview to check your knowledge level. It will take you between 30 minutes and an hour but you will feel more confident learning React.\nTip\nWhenever you get confused by something in JavaScript, MDN and javascript.info are great websites to check. There are also community support forums where you can ask for help.\nPractical Tutorial # If you prefer to learn by doing, check out our practical tutorial. In this tutorial, we build a tic-tac-toe game in React. You might be tempted to skip it because you’re not into building games — but give it a chance. The techniques you’ll learn in the tutorial are fundamental to building any React apps, and mastering it will give you a much deeper understanding.\nStep-by-Step Guide # If you prefer to learn concepts step by step, our guide to main concepts is the best place to start. Every next chapter in it builds on the knowledge introduced in the previous chapters so you won’t miss anything as you go along.\nThinking in React # Many React users credit reading Thinking in React as the moment React finally “clicked” for them. It’s probably the oldest React walkthrough but it’s still just as relevant.\nRecommended Courses # Sometimes people find third-party books and video courses more helpful than the official documentation. We maintain a list of commonly recommended resources, some of which are free.\nAdvanced Concepts # Once you’re comfortable with the main concepts and played with React a little bit, you might be interested in more advanced topics. This section will introduce you to the powerful, but less commonly used React features like context and refs.\nAPI Reference # This documentation section is useful when you want to learn more details about a particular React API. For example, React.Component API reference can provide you with details on how setState() works, and what different lifecycle methods are useful for.\nGlossary and FAQ # The glossary contains an overview of the most common terms you’ll see in the React documentation. There is also a FAQ section dedicated to short questions and answers about common topics, including making AJAX requests, component state, and file structure.\nStaying Informed # The React blog is the official source for the updates from the React team. Anything important, including release notes or deprecation notices, will be posted there first.\nYou can also follow the @reactjs account on Twitter, but you won’t miss anything essential if you only read the blog.\nNot every React release deserves its own blog post, but you can find a detailed changelog for every release in the CHANGELOG.md file in the React repository, as well as on the Releases page.\nVersioned Documentation # This documentation always reflects the latest stable version of React. Since React 16, you can find older versions of the documentation on a separate page. Note that documentation for past versions is snapshotted at the time of the release, and isn’t being continuously updated.\nSomething Missing? # If something is missing in the documentation or if you found some part confusing, please file an issue for the documentation repository with your suggestions for improvement, or tweet at the @reactjs account. We love hearing from you!\n"},{"id":351,"href":"/docs/references/meta-frameworks/react/basics/installation/release-channels/","title":"Release Channels","section":"Installation","content":" Release Channels # All stable builds of React go through a high level of testing and follow semantic versioning (semver). React also offers unstable release channels to encourage early feedback on experimental features. This page describes what you can expect from React releases.\nStable releases # Stable React releases (also known as “Latest” release channel) follow semantic versioning (semver) principles.\nThat means that with a version number x.y.z:\nWhen releasing critical bug fixes, we make a patch release by changing the z number (ex: 15.6.2 to 15.6.3). When releasing new features or non-critical fixes, we make a minor release by changing the y number (ex: 15.6.2 to 15.7.0). When releasing breaking changes, we make a major release by changing the x number (ex: 15.6.2 to 16.0.0). Major releases can also contain new features, and any release can include bug fixes.\nMinor releases are the most common type of release.\nBreaking Changes # Breaking changes are inconvenient for everyone, so we try to minimize the number of major releases – for example, React 15 was released in April 2016 and React 16 was released in September 2017, and React 17 was released in October 2020.\nInstead, we release new features in minor versions. That means that minor releases are often more interesting and compelling than majors, despite their unassuming name.\nCommitment to stability # As we change React over time, we try to minimize the effort required to take advantage of new features. When possible, we’ll keep an older API working, even if that means putting it in a separate package. For example, mixins have been discouraged for years but they’re supported to this day via create-react-class and many codebases continue to use them in stable, legacy code.\nOver a million developers use React, collectively maintaining millions of components. The Facebook codebase alone has over 50,000 React components. That means we need to make it as easy as possible to upgrade to new versions of React; if we make large changes without a migration path, people will be stuck on old versions. We test these upgrade paths on Facebook itself – if our team of less than 10 people can update 50,000+ components alone, we hope the upgrade will be manageable for anyone using React. In many cases, we write automated scripts to upgrade component syntax, which we then include in the open-source release for everyone to use.\nGradual upgrades via warnings # Development builds of React include many helpful warnings. Whenever possible, we add warnings in preparation for future breaking changes. That way, if your app has no warnings on the latest release, it will be compatible with the next major release. This allows you to upgrade your apps one component at a time.\nDevelopment warnings won’t affect the runtime behavior of your app. That way, you can feel confident that your app will behave the same way between the development and production builds — the only differences are that the production build won’t log the warnings and that it is more efficient. (If you ever notice otherwise, please file an issue.)\nWhat counts as a breaking change? # In general, we don’t bump the major version number for changes to:\nDevelopment warnings. Since these don’t affect production behavior, we may add new warnings or modify existing warnings in between major versions. In fact, this is what allows us to reliably warn about upcoming breaking changes. APIs starting with unstable_. These are provided as experimental features whose APIs we are not yet confident in. By releasing these with an unstable_ prefix, we can iterate faster and get to a stable API sooner. Alpha and canary versions of React. We provide alpha versions of React as a way to test new features early, but we need the flexibility to make changes based on what we learn in the alpha period. If you use these versions, note that APIs may change before the stable release. Undocumented APIs and internal data structures. If you access internal property names like __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED or __reactInternalInstance$uk43rzhitjg, there is no warranty. You are on your own. This policy is designed to be pragmatic: certainly, we don’t want to cause headaches for you. If we bumped the major version for all of these changes, we would end up releasing more major versions and ultimately causing more versioning pain for the community. It would also mean that we can’t make progress in improving React as fast as we’d like.\nThat said, if we expect that a change on this list will cause broad problems in the community, we will still do our best to provide a gradual migration path.\nIf a minor release includes no new features, why isn’t it a patch? # It’s possible that a minor release will not include new features. This is allowed by semver, which states “[a minor version] MAY be incremented if substantial new functionality or improvements are introduced within the private code. It MAY include patch level changes.”\nHowever, it does raise the question of why these releases aren’t versioned as patches instead.\nThe answer is that any change to React (or other software) carries some risk of breaking in unexpected ways. Imagine a scenario where a patch release that fixes one bug accidentally introduces a different bug. This would not only be disruptive to developers, but also harm their confidence in future patch releases. It’s especially regrettable if the original fix is for a bug that is rarely encountered in practice.\nWe have a pretty good track record for keeping React releases free of bugs, but patch releases have an even higher bar for reliability because most developers assume they can be adopted without adverse consequences.\nFor these reasons, we reserve patch releases only for the most critical bugs and security vulnerabilities.\nIf a release includes non-essential changes — such as internal refactors, changes to implementation details, performance improvements, or minor bugfixes — we will bump the minor version even when there are no new features.\nAll release channels # React relies on a thriving open source community to file bug reports, open pull requests, and submit RFCs. To encourage feedback we sometimes share special builds of React that include unreleased features.\nNote # This section will be most relevant to developers who work on frameworks, libraries, or developer tooling. Developers who use React primarily to build user-facing applications should not need to worry about our prerelease channels.\nEach of React’s release channels is designed for a distinct use case:\nLatest is for stable, semver React releases. It’s what you get when you install React from npm. This is the channel you’re already using today. User-facing applications that consume React directly use this channel. Canary tracks the main branch of the React source code repository. Think of these as release candidates for the next semver release. Frameworks or other curated setups may choose to use this channel with a pinned version of React. You can also Canaries for integration testing between React and third party projects. Experimental includes experimental APIs and features that aren’t available in the stable releases. These also track the main branch, but with additional feature flags turned on. Use this to try out upcoming features before they are released. All releases are published to npm, but only Latest uses semantic versioning. Prereleases (those in the Canary and Experimental channels) have versions generated from a hash of their contents and the commit date, e.g. 18.3.0-canary-388686f29-20230503 for Canary and 0.0.0-experimental-388686f29-20230503 for Experimental.\nBoth Latest and Canary channels are officially supported for user-facing applications, but with different expectations:\nLatest releases follow the traditional semver model. Canary releases must be pinned and may include breaking changes. They exist for curated setups (like frameworks) that want to gradually release new React features and bugfixes on their own release schedule. The Experimental releases are provided for testing purposes only, and we provide no guarantees that behavior won’t change between releases. They do not follow the semver protocol that we use for releases from Latest.\nBy publishing prereleases to the same registry that we use for stable releases, we are able to take advantage of the many tools that support the npm workflow, like unpkg and CodeSandbox.\nLatest channel # Latest is the channel used for stable React releases. It corresponds to the latest tag on npm. It is the recommended channel for all React apps that are shipped to real users.\nIf you’re not sure which channel you should use, it’s Latest. If you’re using React directly, this is what you’re already using. You can expect updates to Latest to be extremely stable. Versions follow the semantic versioning scheme, as described earlier.\nCanary channel # The Canary channel is a prerelease channel that tracks the main branch of the React repository. We use prereleases in the Canary channel as release candidates for the Latest channel. You can think of Canary as a superset of Latest that is updated more frequently.\nThe degree of change between the most recent Canary release and the most recent Latest release is approximately the same as you would find between two minor semver releases. However, the Canary channel does not conform to semantic versioning. You should expect occasional breaking changes between successive releases in the Canary channel.\nDo not use prereleases in user-facing applications directly unless you’re following the Canary workflow.\nReleases in Canary are published with the canary tag on npm. Versions are generated from a hash of the build’s contents and the commit date, e.g. 18.3.0-canary-388686f29-20230503.\nUsing the canary channel for integration testing\nThe Canary channel also supports integration testing between React and other projects.\nAll changes to React go through extensive internal testing before they are released to the public. However, there are a myriad of environments and configurations used throughout the React ecosystem, and it’s not possible for us to test against every single one.\nIf you’re the author of a third party React framework, library, developer tool, or similar infrastructure-type project, you can help us keep React stable for your users and the entire React community by periodically running your test suite against the most recent changes. If you’re interested, follow these steps:\nSet up a cron job using your preferred continuous integration platform. Cron jobs are supported by both CircleCI and Travis CI.\nIn the cron job, update your React packages to the most recent React release in the Canary channel, using canary tag on npm. Using the npm cli:\nnpm update react@canary react-dom@canary Or yarn:\nyarn upgrade react@canary react-dom@canary Run your test suite against the updated packages.\nIf everything passes, great! You can expect that your project will work with the next minor React release.\nIf something breaks unexpectedly, please let us know by filing an issue.\nA project that uses this workflow is Next.js. You can refer to their CircleCI configuration as an example.\nExperimental channel # Like Canary, the Experimental channel is a prerelease channel that tracks the main branch of the React repository. Unlike Canary, Experimental releases include additional features and APIs that are not ready for wider release.\nUsually, an update to Canary is accompanied by a corresponding update to Experimental. They are based on the same source revision, but are built using a different set of feature flags.\nExperimental releases may be significantly different than releases to Canary and Latest. Do not use Experimental releases in user-facing applications. You should expect frequent breaking changes between releases in the Experimental channel.\nReleases in Experimental are published with the experimental tag on npm. Versions are generated from a hash of the build’s contents and the commit date, e.g. 0.0.0-experimental-68053d940-20210623.\nWhat goes into an experimental release?\nExperimental features are ones that are not ready to be released to the wider public, and may change drastically before they are finalized. Some experiments may never be finalized — the reason we have experiments is to test the viability of proposed changes.\nFor example, if the Experimental channel had existed when we announced Hooks, we would have released Hooks to the Experimental channel weeks before they were available in Latest.\nYou may find it valuable to run integration tests against Experimental. This is up to you. However, be advised that Experimental is even less stable than Canary. We do not guarantee any stability between Experimental releases.\nHow can I learn more about experimental features?\nExperimental features may or may not be documented. Usually, experiments aren’t documented until they are close to shipping in Canary or Latest.\nIf a feature is not documented, they may be accompanied by an RFC.\nWe will post to the React blog when we’re ready to announce new experiments, but that doesn’t mean we will publicize every experiment.\nYou can always refer to our public GitHub repository’s history for a comprehensive list of changes.\n"},{"id":352,"href":"/docs/references/meta-frameworks/react/basics/main-concepts/components-and-props/","title":"Components and Props","section":"main-concepts","content":" 🌵 Components and Props # Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. This page provides an introduction to the idea of components. You can find a detailed component API reference here.\nConceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.\nFunction and Class Components # The simplest way to define a component is to write a JavaScript function:\nfunction Welcome(props) { return \u0026lt;h1\u0026gt;Hello, {props.name}\u0026lt;/h1\u0026gt;; } This function is a valid React component because it accepts a single “props” (which stands for properties) object argument with data and returns a React element. We call such components “function components” because they are literally JavaScript functions.\nYou can also use an ES6 class to define a component:\nclass Welcome extends React.Component { render() { return \u0026lt;h1\u0026gt;Hello, {this.props.name}\u0026lt;/h1\u0026gt;; } } The above two components are equivalent from React’s point of view.\nFunction and Class components both have some additional features that we will discuss in the next sections.\nRendering a Component # Previously, we only encountered React elements that represent DOM tags:\nHowever, elements can also represent user-defined components:\nconst element = \u0026lt;Welcome name=\u0026#34;Sara\u0026#34; /\u0026gt;; When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.\nFor example, this code renders “Hello, Sara” on the page:\nfunction Welcome(props) { return \u0026lt;h1\u0026gt;Hello, {props.name}\u0026lt;/h1\u0026gt;; } const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); const element = \u0026lt;Welcome name=\u0026#34;Sara\u0026#34; /\u0026gt;;root.render(element); Try it on CodePen\nLet’s recap what happens in this example:\nWe call root.render() with the \u0026lt;Welcome name=\u0026quot;Sara\u0026quot; /\u0026gt; element. React calls the Welcome component with {name: 'Sara'} as the props. Our Welcome component returns a \u0026lt;h1\u0026gt;Hello, Sara\u0026lt;/h1\u0026gt; element as the result. React DOM efficiently updates the DOM to match \u0026lt;h1\u0026gt;Hello, Sara\u0026lt;/h1\u0026gt;. Note: Always start component names with a capital letter.\nReact treats components starting with lowercase letters as DOM tags. For example, \u0026lt;div /\u0026gt; represents an HTML div tag, but \u0026lt;Welcome /\u0026gt; represents a component and requires Welcome to be in scope.\nTo learn more about the reasoning behind this convention, please read JSX In Depth.\nComposing Components # Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.\nFor example, we can create an App component that renders Welcome many times:\nfunction Welcome(props) { return \u0026lt;h1\u0026gt;Hello, {props.name}\u0026lt;/h1\u0026gt;; } function App() { return ( \u0026lt;div\u0026gt; \u0026lt;Welcome name=\u0026#34;Sara\u0026#34; /\u0026gt; \u0026lt;Welcome name=\u0026#34;Cahal\u0026#34; /\u0026gt; \u0026lt;Welcome name=\u0026#34;Edite\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; ); } Try it on CodePen\nTypically, new React apps have a single App component at the very top. However, if you integrate React into an existing app, you might start bottom-up with a small component like Button and gradually work your way to the top of the view hierarchy.\nDon’t be afraid to split components into smaller components.\nFor example, consider this Comment component:\nfunction Comment(props) { return ( \u0026lt;div className=\u0026#34;Comment\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;UserInfo\u0026#34;\u0026gt; \u0026lt;img className=\u0026#34;Avatar\u0026#34; src={props.author.avatarUrl} alt={props.author.name} /\u0026gt; \u0026lt;div className=\u0026#34;UserInfo-name\u0026#34;\u0026gt; {props.author.name} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;Comment-text\u0026#34;\u0026gt; {props.text} \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;Comment-date\u0026#34;\u0026gt; {formatDate(props.date)} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } Try it on CodePen\nIt accepts author (an object), text (a string), and date (a date) as props, and describes a comment on a social media website.\nThis component can be tricky to change because of all the nesting, and it is also hard to reuse individual parts of it. Let’s extract a few components from it.\nFirst, we will extract Avatar:\nfunction Avatar(props) { return ( \u0026lt;img className=\u0026#34;Avatar\u0026#34; src={props.user.avatarUrl} alt={props.user.name} /\u0026gt; ); } The Avatar doesn’t need to know that it is being rendered inside a Comment. This is why we have given its prop a more generic name: user rather than author.\nWe recommend naming props from the component’s own point of view rather than the context in which it is being used.\nWe can now simplify Comment a tiny bit:\nfunction Comment(props) { return ( \u0026lt;div className=\u0026#34;Comment\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;UserInfo\u0026#34;\u0026gt; \u0026lt;Avatar user={props.author} /\u0026gt; \u0026lt;div className=\u0026#34;UserInfo-name\u0026#34;\u0026gt; {props.author.name} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;Comment-text\u0026#34;\u0026gt; {props.text} \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;Comment-date\u0026#34;\u0026gt; {formatDate(props.date)} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:\nfunction UserInfo(props) { return ( \u0026lt;div className=\u0026#34;UserInfo\u0026#34;\u0026gt; \u0026lt;Avatar user={props.user} /\u0026gt; \u0026lt;div className=\u0026#34;UserInfo-name\u0026#34;\u0026gt; {props.user.name} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } This lets us simplify Comment even further:\nfunction Comment(props) { return ( \u0026lt;div className=\u0026#34;Comment\u0026#34;\u0026gt; \u0026lt;UserInfo user={props.author} /\u0026gt; \u0026lt;div className=\u0026#34;Comment-text\u0026#34;\u0026gt; {props.text} \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;Comment-date\u0026#34;\u0026gt; {formatDate(props.date)} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } Try it on CodePen\nExtracting components might seem like grunt work at first, but having a palette of reusable components pays off in larger apps. A good rule of thumb is that if a part of your UI is used several times (Button, Panel, Avatar), or is complex enough on its own (App, FeedStory, Comment), it is a good candidate to be extracted to a separate component.\nProps are Read-Only # Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:\nfunction sum(a, b) { return a + b; } Such functions are called “pure” because they do not attempt to change their inputs, and always return the same result for the same inputs.\nIn contrast, this function is impure because it changes its own input:\nfunction withdraw(account, amount) { account.total -= amount; } React is pretty flexible but it has a single strict rule:\nAll React components must act like pure functions with respect to their props.\nOf course, application UIs are dynamic and change over time. In the next section, we will introduce a new concept of “state”. State allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.\n"},{"id":353,"href":"/docs/references/meta-frameworks/react/basics/main-concepts/composition-vs-inheritance/","title":"Composition vs Inheritance","section":"main-concepts","content":" 🍕 Composition vs Inheritance # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nReact has a powerful composition model, and we recommend using composition instead of inheritance to reuse code between components.\nIn this section, we will consider a few problems where developers new to React often reach for inheritance, and show how we can solve them with composition.\nContainment # Some components don’t know their children ahead of time. This is especially common for components like Sidebar or Dialog that represent generic “boxes”.\nWe recommend that such components use the special children prop to pass children elements directly into their output:\nfunction FancyBorder(props) { return ( \u0026lt;div className={\u0026#39;FancyBorder FancyBorder-\u0026#39; + props.color}\u0026gt; {props.children} \u0026lt;/div\u0026gt; ); } This lets other components pass arbitrary children to them by nesting the JSX:\nfunction WelcomeDialog() { return ( \u0026lt;FancyBorder color=\u0026#34;blue\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;Dialog-title\u0026#34;\u0026gt; Welcome \u0026lt;/h1\u0026gt; \u0026lt;p className=\u0026#34;Dialog-message\u0026#34;\u0026gt; Thank you for visiting our spacecraft! \u0026lt;/p\u0026gt; \u0026lt;/FancyBorder\u0026gt; ); } Try it on CodePen\nAnything inside the \u0026lt;FancyBorder\u0026gt; JSX tag gets passed into the FancyBorder component as a children prop. Since FancyBorder renders {props.children} inside a \u0026lt;div\u0026gt;, the passed elements appear in the final output.\nWhile this is less common, sometimes you might need multiple “holes” in a component. In such cases you may come up with your own convention instead of using children:\nfunction SplitPane(props) { return ( \u0026lt;div className=\u0026#34;SplitPane\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;SplitPane-left\u0026#34;\u0026gt; {props.left} \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;SplitPane-right\u0026#34;\u0026gt; {props.right} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } function App() { return ( \u0026lt;SplitPane left={ \u0026lt;Contacts /\u0026gt; } right={ \u0026lt;Chat /\u0026gt; } /\u0026gt; ); } Try it on CodePen\nReact elements like \u0026lt;Contacts /\u0026gt; and \u0026lt;Chat /\u0026gt; are just objects, so you can pass them as props like any other data. This approach may remind you of “slots” in other libraries but there are no limitations on what you can pass as props in React.\nSpecialization # Sometimes we think about components as being “special cases” of other components. For example, we might say that a WelcomeDialog is a special case of Dialog.\nIn React, this is also achieved by composition, where a more “specific” component renders a more “generic” one and configures it with props:\nfunction Dialog(props) { return ( \u0026lt;FancyBorder color=\u0026#34;blue\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;Dialog-title\u0026#34;\u0026gt; {props.title} \u0026lt;/h1\u0026gt; \u0026lt;p className=\u0026#34;Dialog-message\u0026#34;\u0026gt; {props.message} \u0026lt;/p\u0026gt; \u0026lt;/FancyBorder\u0026gt; ); } function WelcomeDialog() { return ( \u0026lt;Dialog title=\u0026#34;Welcome\u0026#34; message=\u0026#34;Thank you for visiting our spacecraft!\u0026#34; /\u0026gt; ); } Try it on CodePen\nComposition works equally well for components defined as classes:\nfunction Dialog(props) { return ( \u0026lt;FancyBorder color=\u0026#34;blue\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;Dialog-title\u0026#34;\u0026gt; {props.title} \u0026lt;/h1\u0026gt; \u0026lt;p className=\u0026#34;Dialog-message\u0026#34;\u0026gt; {props.message} \u0026lt;/p\u0026gt; {props.children} \u0026lt;/FancyBorder\u0026gt; ); } class SignUpDialog extends React.Component { constructor(props) { super(props); this.handleChange = this.handleChange.bind(this); this.handleSignUp = this.handleSignUp.bind(this); this.state = {login: \u0026#39;\u0026#39;}; } render() { return ( \u0026lt;Dialog title=\u0026#34;Mars Exploration Program\u0026#34; message=\u0026#34;How should we refer to you?\u0026#34;\u0026gt; \u0026lt;input value={this.state.login} onChange={this.handleChange} /\u0026gt; \u0026lt;button onClick={this.handleSignUp}\u0026gt; Sign Me Up! \u0026lt;/button\u0026gt; \u0026lt;/Dialog\u0026gt; ); } handleChange(e) { this.setState({login: e.target.value}); } handleSignUp() { alert(`Welcome aboard, ${this.state.login}!`); } } Try it on CodePen\nSo What About Inheritance? # At Facebook, we use React in thousands of components, and we haven’t found any use cases where we would recommend creating component inheritance hierarchies.\nProps and composition give you all the flexibility you need to customize a component’s look and behavior in an explicit and safe way. Remember that components may accept arbitrary props, including primitive values, React elements, or functions.\nIf you want to reuse non-UI functionality between components, we suggest extracting it into a separate JavaScript module. The components may import it and use that function, object, or class, without extending it.\n"},{"id":354,"href":"/docs/references/meta-frameworks/react/basics/main-concepts/conditional-rendering/","title":"Conditional Rendering","section":"main-concepts","content":" Conditional Rendering # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nThese new documentation pages teach modern React and include live examples:\nConditional Rendering In React, you can create distinct components that encapsulate behavior you need. Then, you can render only some of them, depending on the state of your application.\nConditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like if or the conditional operator to create elements representing the current state, and let React update the UI to match them.\nConsider these two components:\nfunction UserGreeting(props) { return \u0026lt;h1\u0026gt;Welcome back!\u0026lt;/h1\u0026gt;; } function GuestGreeting(props) { return \u0026lt;h1\u0026gt;Please sign up.\u0026lt;/h1\u0026gt;; } We’ll create a Greeting component that displays either of these components depending on whether a user is logged in:\nfunction Greeting(props) { const isLoggedIn = props.isLoggedIn; if (isLoggedIn) { return \u0026lt;UserGreeting /\u0026gt;; } return \u0026lt;GuestGreeting /\u0026gt;;} const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); // Try changing to isLoggedIn={true}: root.render(\u0026lt;Greeting isLoggedIn={false} /\u0026gt;); Try it on CodePen\nThis example renders a different greeting depending on the value of isLoggedIn prop.\nElement Variables # You can use variables to store elements. This can help you conditionally render a part of the component while the rest of the output doesn’t change.\nConsider these two new components representing Logout and Login buttons:\nfunction LoginButton(props) { return ( \u0026lt;button onClick={props.onClick}\u0026gt; Login \u0026lt;/button\u0026gt; ); } function LogoutButton(props) { return ( \u0026lt;button onClick={props.onClick}\u0026gt; Logout \u0026lt;/button\u0026gt; ); } In the example below, we will create a stateful component called LoginControl.\nIt will render either \u0026lt;LoginButton /\u0026gt; or \u0026lt;LogoutButton /\u0026gt; depending on its current state. It will also render a \u0026lt;Greeting /\u0026gt; from the previous example:\nclass LoginControl extends React.Component { constructor(props) { super(props); this.handleLoginClick = this.handleLoginClick.bind(this); this.handleLogoutClick = this.handleLogoutClick.bind(this); this.state = {isLoggedIn: false}; } handleLoginClick() { this.setState({isLoggedIn: true}); } handleLogoutClick() { this.setState({isLoggedIn: false}); } render() { const isLoggedIn = this.state.isLoggedIn; let button; if (isLoggedIn) { button = \u0026lt;LogoutButton onClick={this.handleLogoutClick} /\u0026gt;; } else { button = \u0026lt;LoginButton onClick={this.handleLoginClick} /\u0026gt;; } return ( \u0026lt;div\u0026gt; \u0026lt;Greeting isLoggedIn={isLoggedIn} /\u0026gt; {button} \u0026lt;/div\u0026gt; ); } } const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); root.render(\u0026lt;LoginControl /\u0026gt;); Try it on CodePen\nWhile declaring a variable and using an if statement is a fine way to conditionally render a component, sometimes you might want to use a shorter syntax. There are a few ways to inline conditions in JSX, explained below.\nInline If with Logical \u0026amp;\u0026amp; Operator # You may embed expressions in JSX by wrapping them in curly braces. This includes the JavaScript logical \u0026amp;\u0026amp; operator. It can be handy for conditionally including an element:\nfunction Mailbox(props) { const unreadMessages = props.unreadMessages; return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello!\u0026lt;/h1\u0026gt; {unreadMessages.length \u0026gt; 0 \u0026amp;\u0026amp; \u0026lt;h2\u0026gt; You have {unreadMessages.length} unread messages. \u0026lt;/h2\u0026gt; } \u0026lt;/div\u0026gt; ); } const messages = [\u0026#39;React\u0026#39;, \u0026#39;Re: React\u0026#39;, \u0026#39;Re:Re: React\u0026#39;]; const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); root.render(\u0026lt;Mailbox unreadMessages={messages} /\u0026gt;); Try it on CodePen\nIt works because in JavaScript, true \u0026amp;\u0026amp; expression always evaluates to expression, and false \u0026amp;\u0026amp; expression always evaluates to false.\nTherefore, if the condition is true, the element right after \u0026amp;\u0026amp; will appear in the output. If it is false, React will ignore and skip it.\nNote that returning a falsy expression will still cause the element after \u0026amp;\u0026amp; to be skipped but will return the falsy expression. In the example below, \u0026lt;div\u0026gt;0\u0026lt;/div\u0026gt; will be returned by the render method.\nrender() { const count = 0; return ( \u0026lt;div\u0026gt; {count \u0026amp;\u0026amp; \u0026lt;h1\u0026gt;Messages: {count}\u0026lt;/h1\u0026gt;} \u0026lt;/div\u0026gt; ); } Inline If-Else with Conditional Operator # Another method for conditionally rendering elements inline is to use the JavaScript conditional operator condition ? true : false.\nIn the example below, we use it to conditionally render a small block of text.\nrender() { const isLoggedIn = this.state.isLoggedIn; return ( \u0026lt;div\u0026gt; The user is \u0026lt;b\u0026gt;{isLoggedIn ? \u0026#39;currently\u0026#39; : \u0026#39;not\u0026#39;}\u0026lt;/b\u0026gt; logged in. \u0026lt;/div\u0026gt; ); } It can also be used for larger expressions although it is less obvious what’s going on:\nrender() { const isLoggedIn = this.state.isLoggedIn; return ( \u0026lt;div\u0026gt; {isLoggedIn ? \u0026lt;LogoutButton onClick={this.handleLogoutClick} /\u0026gt; : \u0026lt;LoginButton onClick={this.handleLoginClick} /\u0026gt; } \u0026lt;/div\u0026gt; ); } Just like in JavaScript, it is up to you to choose an appropriate style based on what you and your team consider more readable. Also remember that whenever conditions become too complex, it might be a good time to extract a component.\nPreventing Component from Rendering # In rare cases you might want a component to hide itself even though it was rendered by another component. To do this return null instead of its render output.\nIn the example below, the \u0026lt;WarningBanner /\u0026gt; is rendered depending on the value of the prop called warn. If the value of the prop is false, then the component does not render:\nfunction WarningBanner(props) { if (!props.warn) { return null; } return ( \u0026lt;div className=\u0026#34;warning\u0026#34;\u0026gt; Warning! \u0026lt;/div\u0026gt; ); } class Page extends React.Component { constructor(props) { super(props); this.state = {showWarning: true}; this.handleToggleClick = this.handleToggleClick.bind(this); } handleToggleClick() { this.setState(state =\u0026gt; ({ showWarning: !state.showWarning })); } render() { return ( \u0026lt;div\u0026gt; \u0026lt;WarningBanner warn={this.state.showWarning} /\u0026gt; \u0026lt;button onClick={this.handleToggleClick}\u0026gt; {this.state.showWarning ? \u0026#39;Hide\u0026#39; : \u0026#39;Show\u0026#39;} \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } } const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); root.render(\u0026lt;Page /\u0026gt;); Try it on CodePen\nReturning null from a component’s render method does not affect the firing of the component’s lifecycle methods. For instance componentDidUpdate will still be called.\n"},{"id":355,"href":"/docs/references/meta-frameworks/react/basics/main-concepts/forms/","title":"Forms","section":"main-concepts","content":" ⭐ Forms # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nThese new documentation pages teach modern React and include live examples:\n\u0026lt;input\u0026gt; \u0026lt;select\u0026gt; \u0026lt;textarea\u0026gt; HTML form elements work a bit differently from other DOM elements in React, because form elements naturally keep some internal state. For example, this form in plain HTML accepts a single name:\n\u0026lt;form\u0026gt; \u0026lt;label\u0026gt; Name: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; This form has the default HTML form behavior of browsing to a new page when the user submits the form. If you want this behavior in React, it just works. But in most cases, it’s convenient to have a JavaScript function that handles the submission of the form and has access to the data that the user entered into the form. The standard way to achieve this is with a technique called “controlled components”.\nControlled Components # In HTML, form elements such as \u0026lt;input\u0026gt;, \u0026lt;textarea\u0026gt;, and \u0026lt;select\u0026gt; typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with setState().\nWe can combine the two by making the React state be the “single source of truth”. Then the React component that renders a form also controls what happens in that form on subsequent user input. An input form element whose value is controlled by React in this way is called a “controlled component”.\nFor example, if we want to make the previous example log the name when it is submitted, we can write the form as a controlled component:\nclass NameForm extends React.Component { constructor(props) { super(props); this.state = {value: \u0026#39;\u0026#39;}; this.handleChange = this.handleChange.bind(this); this.handleSubmit = this.handleSubmit.bind(this); } handleChange(event) { this.setState({value: event.target.value}); } handleSubmit(event) { alert(\u0026#39;A name was submitted: \u0026#39; + this.state.value); event.preventDefault(); } render() { return ( \u0026lt;form onSubmit={this.handleSubmit}\u0026gt; \u0026lt;label\u0026gt; Name: \u0026lt;input type=\u0026#34;text\u0026#34; value={this.state.value} onChange={this.handleChange} /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; ); } } Try it on CodePen\nSince the value attribute is set on our form element, the displayed value will always be this.state.value, making the React state the source of truth. Since handleChange runs on every keystroke to update the React state, the displayed value will update as the user types.\nWith a controlled component, the input’s value is always driven by the React state. While this means you have to type a bit more code, you can now pass the value to other UI elements too, or reset it from other event handlers.\nThe textarea Tag # In HTML, a \u0026lt;textarea\u0026gt; element defines its text by its children:\n\u0026lt;textarea\u0026gt; Hello there, this is some text in a text area \u0026lt;/textarea\u0026gt; In React, a \u0026lt;textarea\u0026gt; uses a value attribute instead. This way, a form using a \u0026lt;textarea\u0026gt; can be written very similarly to a form that uses a single-line input:\nclass EssayForm extends React.Component { constructor(props) { super(props); this.state = { value: \u0026#39;Please write an essay about your favorite DOM element.\u0026#39; }; this.handleChange = this.handleChange.bind(this); this.handleSubmit = this.handleSubmit.bind(this); } handleChange(event) { this.setState({value: event.target.value}); } handleSubmit(event) { alert(\u0026#39;An essay was submitted: \u0026#39; + this.state.value); event.preventDefault(); } render() { return ( \u0026lt;form onSubmit={this.handleSubmit}\u0026gt; \u0026lt;label\u0026gt; Essay: \u0026lt;textarea value={this.state.value} onChange={this.handleChange} /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; ); } } Notice that this.state.value is initialized in the constructor, so that the text area starts off with some text in it.\nThe select Tag # In HTML, \u0026lt;select\u0026gt; creates a drop-down list. For example, this HTML creates a drop-down list of flavors:\n\u0026lt;select\u0026gt; \u0026lt;option value=\u0026#34;grapefruit\u0026#34;\u0026gt;Grapefruit\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;lime\u0026#34;\u0026gt;Lime\u0026lt;/option\u0026gt; \u0026lt;option selected value=\u0026#34;coconut\u0026#34;\u0026gt;Coconut\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;mango\u0026#34;\u0026gt;Mango\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; Note that the Coconut option is initially selected, because of the selected attribute. React, instead of using this selected attribute, uses a value attribute on the root select tag. This is more convenient in a controlled component because you only need to update it in one place. For example:\nclass FlavorForm extends React.Component { constructor(props) { super(props); this.state = {value: \u0026#39;coconut\u0026#39;}; this.handleChange = this.handleChange.bind(this); this.handleSubmit = this.handleSubmit.bind(this); } handleChange(event) { this.setState({value: event.target.value}); } handleSubmit(event) { alert(\u0026#39;Your favorite flavor is: \u0026#39; + this.state.value); event.preventDefault(); } render() { return ( \u0026lt;form onSubmit={this.handleSubmit}\u0026gt; \u0026lt;label\u0026gt; Pick your favorite flavor: \u0026lt;select value={this.state.value} onChange={this.handleChange}\u0026gt; \u0026lt;option value=\u0026#34;grapefruit\u0026#34;\u0026gt;Grapefruit\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;lime\u0026#34;\u0026gt;Lime\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;coconut\u0026#34;\u0026gt;Coconut\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;mango\u0026#34;\u0026gt;Mango\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; ); } } Try it on CodePen\nOverall, this makes it so that \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt;, \u0026lt;textarea\u0026gt;, and \u0026lt;select\u0026gt; all work very similarly - they all accept a value attribute that you can use to implement a controlled component.\nNote\nYou can pass an array into the value attribute, allowing you to select multiple options in a select tag:\n\u0026lt;select multiple={true} value={[\u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;]}\u0026gt; The file input Tag # In HTML, an \u0026lt;input type=\u0026quot;file\u0026quot;\u0026gt; lets the user choose one or more files from their device storage to be uploaded to a server or manipulated by JavaScript via the File API.\nBecause its value is read-only, it is an uncontrolled component in React. It is discussed together with other uncontrolled components later in the documentation.\nHandling Multiple Inputs # When you need to handle multiple controlled input elements, you can add a name attribute to each element and let the handler function choose what to do based on the value of event.target.name.\nFor example:\nclass Reservation extends React.Component { constructor(props) { super(props); this.state = { isGoing: true, numberOfGuests: 2 }; this.handleInputChange = this.handleInputChange.bind(this); } handleInputChange(event) { const target = event.target; const value = target.type === \u0026#39;checkbox\u0026#39; ? target.checked : target.value; const name = target.name; this.setState({ [name]: value }); } render() { return ( \u0026lt;form\u0026gt; \u0026lt;label\u0026gt; Is going: \u0026lt;input name=\u0026#34;isGoing\u0026#34; type=\u0026#34;checkbox\u0026#34; checked={this.state.isGoing} onChange={this.handleInputChange} /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;label\u0026gt; Number of guests: \u0026lt;input name=\u0026#34;numberOfGuests\u0026#34; type=\u0026#34;number\u0026#34; value={this.state.numberOfGuests} onChange={this.handleInputChange} /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;/form\u0026gt; ); } } Try it on CodePen\nNote how we used the ES6 computed property name syntax to update the state key corresponding to the given input name:\nthis.setState({ [name]: value}); It is equivalent to this ES5 code:\nvar partialState = {}; partialState[name] = value;this.setState(partialState); Also, since setState() automatically merges a partial state into the current state, we only needed to call it with the changed parts.\nControlled Input Null Value # Specifying the value prop on a controlled component prevents the user from changing the input unless you desire so. If you’ve specified a value but the input is still editable, you may have accidentally set value to undefined or null.\nThe following code demonstrates this. (The input is locked at first but becomes editable after a short delay.)\nReactDOM.createRoot(mountNode).render(\u0026lt;input value=\u0026#34;hi\u0026#34; /\u0026gt;); setTimeout(function() { ReactDOM.createRoot(mountNode).render(\u0026lt;input value={null} /\u0026gt;); }, 1000); Alternatives to Controlled Components # It can sometimes be tedious to use controlled components, because you need to write an event handler for every way your data can change and pipe all of the input state through a React component. This can become particularly annoying when you are converting a preexisting codebase to React, or integrating a React application with a non-React library. In these situations, you might want to check out uncontrolled components, an alternative technique for implementing input forms.\nFully-Fledged Solutions # If you’re looking for a complete solution including validation, keeping track of the visited fields, and handling form submission, Formik is one of the popular choices. However, it is built on the same principles of controlled components and managing state — so don’t neglect to learn them.\n"},{"id":356,"href":"/docs/references/meta-frameworks/react/basics/main-concepts/handling-events/","title":"Handling Events","section":"main-concepts","content":" ⭐ Handling Events # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nThese new documentation pages teach modern React and include live examples:\nResponding to Events Handling events with React elements is very similar to handling events on DOM elements. There are some syntax differences:\nReact events are named using camelCase, rather than lowercase. With JSX you pass a function as the event handler, rather than a string. For example, the HTML:\n\u0026lt;button onclick=\u0026#34;activateLasers()\u0026#34;\u0026gt; Activate Lasers \u0026lt;/button\u0026gt; is slightly different in React:\n\u0026lt;button onClick={activateLasers}\u0026gt; Activate Lasers \u0026lt;/button\u0026gt; Another difference is that you cannot return false to prevent default behavior in React. You must call preventDefault explicitly. For example, with plain HTML, to prevent the default form behavior of submitting, you can write:\n\u0026lt;form onsubmit=\u0026#34;console.log(\u0026#39;You clicked submit.\u0026#39;); return false\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; In React, this could instead be:\nfunction Form() { function handleSubmit(e) { e.preventDefault(); console.log(\u0026#39;You clicked submit.\u0026#39;); } return ( \u0026lt;form onSubmit={handleSubmit}\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; ); } Here, e is a synthetic event. React defines these synthetic events according to the W3C spec, so you don’t need to worry about cross-browser compatibility. React events do not work exactly the same as native events. See the SyntheticEvent reference guide to learn more.\nWhen using React, you generally don’t need to call addEventListener to add listeners to a DOM element after it is created. Instead, just provide a listener when the element is initially rendered.\nWhen you define a component using an ES6 class, a common pattern is for an event handler to be a method on the class. For example, this Toggle component renders a button that lets the user toggle between “ON” and “OFF” states:\nclass Toggle extends React.Component { constructor(props) { super(props); this.state = {isToggleOn: true}; // This binding is necessary to make `this` work in the callback this.handleClick = this.handleClick.bind(this); } handleClick() { this.setState(prevState =\u0026gt; ({ isToggleOn: !prevState.isToggleOn })); } render() { return ( \u0026lt;button onClick={this.handleClick}\u0026gt; {this.state.isToggleOn ? \u0026#39;ON\u0026#39; : \u0026#39;OFF\u0026#39;} \u0026lt;/button\u0026gt; ); } } Try it on CodePen\nYou have to be careful about the meaning of this in JSX callbacks. In JavaScript, class methods are not bound by default. If you forget to bind this.handleClick and pass it to onClick, this will be undefined when the function is actually called.\nThis is not React-specific behavior; it is a part of how functions work in JavaScript. Generally, if you refer to a method without () after it, such as onClick={this.handleClick}, you should bind that method.\nIf calling bind annoys you, there are two ways you can get around this. You can use public class fields syntax to correctly bind callbacks:\nclass LoggingButton extends React.Component { // This syntax ensures `this` is bound within handleClick. handleClick = () =\u0026gt; { console.log(\u0026#39;this is:\u0026#39;, this); }; render() { return ( \u0026lt;button onClick={this.handleClick}\u0026gt; Click me \u0026lt;/button\u0026gt; ); } } This syntax is enabled by default in Create React App.\nIf you aren’t using class fields syntax, you can use an arrow function in the callback:\nclass LoggingButton extends React.Component { handleClick() { console.log(\u0026#39;this is:\u0026#39;, this); } render() { // This syntax ensures `this` is bound within handleClick return ( \u0026lt;button onClick={() =\u0026gt; this.handleClick()}\u0026gt; Click me \u0026lt;/button\u0026gt; ); } } The problem with this syntax is that a different callback is created each time the LoggingButton renders. In most cases, this is fine. However, if this callback is passed as a prop to lower components, those components might do an extra re-rendering. We generally recommend binding in the constructor or using the class fields syntax, to avoid this sort of performance problem.\nPassing Arguments to Event Handlers # Inside a loop, it is common to want to pass an extra parameter to an event handler. For example, if id is the row ID, either of the following would work:\n\u0026lt;button onClick={(e) =\u0026gt; this.deleteRow(id, e)}\u0026gt;Delete Row\u0026lt;/button\u0026gt; \u0026lt;button onClick={this.deleteRow.bind(this, id)}\u0026gt;Delete Row\u0026lt;/button\u0026gt; The above two lines are equivalent, and use arrow functions and Function.prototype.bind respectively.\nIn both cases, the e argument representing the React event will be passed as a second argument after the ID. With an arrow function, we have to pass it explicitly, but with bind any further arguments are automatically forwarded.\n"},{"id":357,"href":"/docs/references/meta-frameworks/react/basics/main-concepts/introducing-jsx/","title":"Introducing Jsx","section":"main-concepts","content":" ⭐ Introducing JSX # Consider this variable declaration:\nconst element = \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt;; This funny tag syntax is neither a string nor HTML.\nIt is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.\nJSX produces React “elements”. We will explore rendering them to the DOM in the next section. Below, you can find the basics of JSX necessary to get you started.\nWhy JSX? # React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display.\nInstead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both. We will come back to components in a further section, but if you’re not yet comfortable putting markup in JS, this talk might convince you otherwise.\nReact doesn’t require using JSX, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.\nWith that out of the way, let’s get started!\nEmbedding Expressions in JSX # In the example below, we declare a variable called name and then use it inside JSX by wrapping it in curly braces:\nconst name = \u0026#39;Josh Perez\u0026#39;;const element = \u0026lt;h1\u0026gt;Hello, {name}\u0026lt;/h1\u0026gt;; You can put any valid JavaScript expression inside the curly braces in JSX. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.\nIn the example below, we embed the result of calling a JavaScript function, formatName(user), into an \u0026lt;h1\u0026gt; element.\nfunction formatName(user) { return user.firstName + \u0026#39; \u0026#39; + user.lastName; } const user = { firstName: \u0026#39;Harper\u0026#39;, lastName: \u0026#39;Perez\u0026#39; }; const element = ( \u0026lt;h1\u0026gt; Hello, {formatName(user)}! \u0026lt;/h1\u0026gt; ); Try it on CodePen\nWe split JSX over multiple lines for readability. While it isn’t required, when doing this, we also recommend wrapping it in parentheses to avoid the pitfalls of automatic semicolon insertion.\nJSX is an Expression Too # After compilation, JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects.\nThis means that you can use JSX inside of if statements and for loops, assign it to variables, accept it as arguments, and return it from functions:\nfunction getGreeting(user) { if (user) { return \u0026lt;h1\u0026gt;Hello, {formatName(user)}!\u0026lt;/h1\u0026gt;; } return \u0026lt;h1\u0026gt;Hello, Stranger.\u0026lt;/h1\u0026gt;;} Specifying Attributes with JSX # You may use quotes to specify string literals as attributes:\nconst element = \u0026lt;a href=\u0026#34;https://www.reactjs.org\u0026#34;\u0026gt; link \u0026lt;/a\u0026gt;; You may also use curly braces to embed a JavaScript expression in an attribute:\nconst element = \u0026lt;img src={user.avatarUrl}\u0026gt;\u0026lt;/img\u0026gt;; Don’t put quotes around curly braces when embedding a JavaScript expression in an attribute. You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.\nWarning:\nSince JSX is closer to JavaScript than to HTML, React DOM uses camelCase property naming convention instead of HTML attribute names.\nFor example, class becomes className in JSX, and tabindex becomes tabIndex.\nSpecifying Children with JSX # If a tag is empty, you may close it immediately with /\u0026gt;, like XML:\nconst element = \u0026lt;img src={user.avatarUrl} /\u0026gt;; JSX tags may contain children:\nconst element = ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Good to see you here.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); JSX Prevents Injection Attacks # It is safe to embed user input in JSX:\nconst title = response.potentiallyMaliciousInput; // This is safe: const element = \u0026lt;h1\u0026gt;{title}\u0026lt;/h1\u0026gt;; By default, React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that’s not explicitly written in your application. Everything is converted to a string before being rendered. This helps prevent XSS (cross-site-scripting) attacks.\nJSX Represents Objects # Babel compiles JSX down to React.createElement() calls.\nThese two examples are identical:\nconst element = ( \u0026lt;h1 className=\u0026#34;greeting\u0026#34;\u0026gt; Hello, world! \u0026lt;/h1\u0026gt; ); const element = React.createElement( \u0026#39;h1\u0026#39;, {className: \u0026#39;greeting\u0026#39;}, \u0026#39;Hello, world!\u0026#39; ); React.createElement() performs a few checks to help you write bug-free code but essentially it creates an object like this:\n// Note: this structure is simplified const element = { type: \u0026#39;h1\u0026#39;, props: { className: \u0026#39;greeting\u0026#39;, children: \u0026#39;Hello, world!\u0026#39; } }; These objects are called “React elements”. You can think of them as descriptions of what you want to see on the screen. React reads these objects and uses them to construct the DOM and keep it up to date.\nWe will explore rendering React elements to the DOM in the next section.\nTip:\nWe recommend using the “Babel” language definition for your editor of choice so that both ES6 and JSX code is properly highlighted.\n"},{"id":358,"href":"/docs/references/meta-frameworks/react/basics/main-concepts/lifting-state-up/","title":"Lifting State Up","section":"main-concepts","content":" 🌵 Lifting State Up # Often, several components need to reflect the same changing data. We recommend lifting the shared state up to their closest common ancestor. Let’s see how this works in action.\nIn this section, we will create a temperature calculator that calculates whether the water would boil at a given temperature.\nWe will start with a component called BoilingVerdict. It accepts the celsius temperature as a prop, and prints whether it is enough to boil the water:\nfunction BoilingVerdict(props) { if (props.celsius \u0026gt;= 100) { return \u0026lt;p\u0026gt;The water would boil.\u0026lt;/p\u0026gt;; } return \u0026lt;p\u0026gt;The water would not boil.\u0026lt;/p\u0026gt;;} Next, we will create a component called Calculator. It renders an \u0026lt;input\u0026gt; that lets you enter the temperature, and keeps its value in this.state.temperature.\nAdditionally, it renders the BoilingVerdict for the current input value.\nclass Calculator extends React.Component { constructor(props) { super(props); this.handleChange = this.handleChange.bind(this); this.state = {temperature: \u0026#39;\u0026#39;}; } handleChange(e) { this.setState({temperature: e.target.value}); } render() { const temperature = this.state.temperature; return ( \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Enter temperature in Celsius:\u0026lt;/legend\u0026gt; \u0026lt;input value={temperature} onChange={this.handleChange} /\u0026gt; \u0026lt;BoilingVerdict celsius={parseFloat(temperature)} /\u0026gt; \u0026lt;/fieldset\u0026gt; ); } } Try it on CodePen\nAdding a Second Input # Our new requirement is that, in addition to a Celsius input, we provide a Fahrenheit input, and they are kept in sync.\nWe can start by extracting a TemperatureInput component from Calculator. We will add a new scale prop to it that can either be \u0026quot;c\u0026quot; or \u0026quot;f\u0026quot;:\nconst scaleNames = { c: \u0026#39;Celsius\u0026#39;, f: \u0026#39;Fahrenheit\u0026#39;}; class TemperatureInput extends React.Component { constructor(props) { super(props); this.handleChange = this.handleChange.bind(this); this.state = {temperature: \u0026#39;\u0026#39;}; } handleChange(e) { this.setState({temperature: e.target.value}); } render() { const temperature = this.state.temperature; const scale = this.props.scale; return ( \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Enter temperature in {scaleNames[scale]}:\u0026lt;/legend\u0026gt; \u0026lt;input value={temperature} onChange={this.handleChange} /\u0026gt; \u0026lt;/fieldset\u0026gt; ); } } We can now change the Calculator to render two separate temperature inputs:\nclass Calculator extends React.Component { render() { return ( \u0026lt;div\u0026gt; \u0026lt;TemperatureInput scale=\u0026#34;c\u0026#34; /\u0026gt; \u0026lt;TemperatureInput scale=\u0026#34;f\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; ); } } Try it on CodePen\nWe have two inputs now, but when you enter the temperature in one of them, the other doesn’t update. This contradicts our requirement: we want to keep them in sync.\nWe also can’t display the BoilingVerdict from Calculator. The Calculator doesn’t know the current temperature because it is hidden inside the TemperatureInput.\nWriting Conversion Functions # First, we will write two functions to convert from Celsius to Fahrenheit and back:\nfunction toCelsius(fahrenheit) { return (fahrenheit - 32) * 5 / 9; } function toFahrenheit(celsius) { return (celsius * 9 / 5) + 32; } These two functions convert numbers. We will write another function that takes a string temperature and a converter function as arguments and returns a string. We will use it to calculate the value of one input based on the other input.\nIt returns an empty string on an invalid temperature, and it keeps the output rounded to the third decimal place:\nfunction tryConvert(temperature, convert) { const input = parseFloat(temperature); if (Number.isNaN(input)) { return \u0026#39;\u0026#39;; } const output = convert(input); const rounded = Math.round(output * 1000) / 1000; return rounded.toString(); } For example, tryConvert('abc', toCelsius) returns an empty string, and tryConvert('10.22', toFahrenheit) returns '50.396'.\nLifting State Up # Currently, both TemperatureInput components independently keep their values in the local state:\nclass TemperatureInput extends React.Component { constructor(props) { super(props); this.handleChange = this.handleChange.bind(this); this.state = {temperature: \u0026#39;\u0026#39;}; } handleChange(e) { this.setState({temperature: e.target.value}); } render() { const temperature = this.state.temperature; // ... However, we want these two inputs to be in sync with each other. When we update the Celsius input, the Fahrenheit input should reflect the converted temperature, and vice versa.\nIn React, sharing state is accomplished by moving it up to the closest common ancestor of the components that need it. This is called “lifting state up”. We will remove the local state from the TemperatureInput and move it into the Calculator instead.\nIf the Calculator owns the shared state, it becomes the “source of truth” for the current temperature in both inputs. It can instruct them both to have values that are consistent with each other. Since the props of both TemperatureInput components are coming from the same parent Calculator component, the two inputs will always be in sync.\nLet’s see how this works step by step.\nFirst, we will replace this.state.temperature with this.props.temperature in the TemperatureInput component. For now, let’s pretend this.props.temperature already exists, although we will need to pass it from the Calculator in the future:\nrender() { // Before: const temperature = this.state.temperature; const temperature = this.props.temperature; // ... We know that props are read-only. When the temperature was in the local state, the TemperatureInput could just call this.setState() to change it. However, now that the temperature is coming from the parent as a prop, the TemperatureInput has no control over it.\nIn React, this is usually solved by making a component “controlled”. Just like the DOM \u0026lt;input\u0026gt; accepts both a value and an onChange prop, so can the custom TemperatureInput accept both temperature and onTemperatureChange props from its parent Calculator.\nNow, when the TemperatureInput wants to update its temperature, it calls this.props.onTemperatureChange:\nhandleChange(e) { // Before: this.setState({temperature: e.target.value}); this.props.onTemperatureChange(e.target.value); // ... Note:\nThere is no special meaning to either temperature or onTemperatureChange prop names in custom components. We could have called them anything else, like name them value and onChange which is a common convention.\nThe onTemperatureChange prop will be provided together with the temperature prop by the parent Calculator component. It will handle the change by modifying its own local state, thus re-rendering both inputs with the new values. We will look at the new Calculator implementation very soon.\nBefore diving into the changes in the Calculator, let’s recap our changes to the TemperatureInput component. We have removed the local state from it, and instead of reading this.state.temperature, we now read this.props.temperature. Instead of calling this.setState() when we want to make a change, we now call this.props.onTemperatureChange(), which will be provided by the Calculator:\nclass TemperatureInput extends React.Component { constructor(props) { super(props); this.handleChange = this.handleChange.bind(this); } handleChange(e) { this.props.onTemperatureChange(e.target.value); } render() { const temperature = this.props.temperature; const scale = this.props.scale; return ( \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Enter temperature in {scaleNames[scale]}:\u0026lt;/legend\u0026gt; \u0026lt;input value={temperature} onChange={this.handleChange} /\u0026gt; \u0026lt;/fieldset\u0026gt; ); } } Now let’s turn to the Calculator component.\nWe will store the current input’s temperature and scale in its local state. This is the state we “lifted up” from the inputs, and it will serve as the “source of truth” for both of them. It is the minimal representation of all the data we need to know in order to render both inputs.\nFor example, if we enter 37 into the Celsius input, the state of the Calculator component will be:\n{ temperature: \u0026#39;37\u0026#39;, scale: \u0026#39;c\u0026#39; } If we later edit the Fahrenheit field to be 212, the state of the Calculator will be:\n{ temperature: \u0026#39;212\u0026#39;, scale: \u0026#39;f\u0026#39; } We could have stored the value of both inputs but it turns out to be unnecessary. It is enough to store the value of the most recently changed input, and the scale that it represents. We can then infer the value of the other input based on the current temperature and scale alone.\nThe inputs stay in sync because their values are computed from the same state:\nclass Calculator extends React.Component { constructor(props) { super(props); this.handleCelsiusChange = this.handleCelsiusChange.bind(this); this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this); this.state = {temperature: \u0026#39;\u0026#39;, scale: \u0026#39;c\u0026#39;}; } handleCelsiusChange(temperature) { this.setState({scale: \u0026#39;c\u0026#39;, temperature}); } handleFahrenheitChange(temperature) { this.setState({scale: \u0026#39;f\u0026#39;, temperature}); } render() { const scale = this.state.scale; const temperature = this.state.temperature; const celsius = scale === \u0026#39;f\u0026#39; ? tryConvert(temperature, toCelsius) : temperature; const fahrenheit = scale === \u0026#39;c\u0026#39; ? tryConvert(temperature, toFahrenheit) : temperature; return ( \u0026lt;div\u0026gt; \u0026lt;TemperatureInput scale=\u0026#34;c\u0026#34; temperature={celsius} onTemperatureChange={this.handleCelsiusChange} /\u0026gt; \u0026lt;TemperatureInput scale=\u0026#34;f\u0026#34; temperature={fahrenheit} onTemperatureChange={this.handleFahrenheitChange} /\u0026gt; \u0026lt;BoilingVerdict celsius={parseFloat(celsius)} /\u0026gt; \u0026lt;/div\u0026gt; ); } } Try it on CodePen\nNow, no matter which input you edit, this.state.temperature and this.state.scale in the Calculator get updated. One of the inputs gets the value as is, so any user input is preserved, and the other input value is always recalculated based on it.\nLet’s recap what happens when you edit an input:\nReact calls the function specified as onChange on the DOM \u0026lt;input\u0026gt;. In our case, this is the handleChange method in the TemperatureInput component. The handleChange method in the TemperatureInput component calls this.props.onTemperatureChange() with the new desired value. Its props, including onTemperatureChange, were provided by its parent component, the Calculator. When it previously rendered, the Calculator had specified that onTemperatureChange of the Celsius TemperatureInput is the Calculator’s handleCelsiusChange method, and onTemperatureChange of the Fahrenheit TemperatureInput is the Calculator’s handleFahrenheitChange method. So either of these two Calculator methods gets called depending on which input we edited. Inside these methods, the Calculator component asks React to re-render itself by calling this.setState() with the new input value and the current scale of the input we just edited. React calls the Calculator component’s render method to learn what the UI should look like. The values of both inputs are recomputed based on the current temperature and the active scale. The temperature conversion is performed here. React calls the render methods of the individual TemperatureInput components with their new props specified by the Calculator. It learns what their UI should look like. React calls the render method of the BoilingVerdict component, passing the temperature in Celsius as its props. React DOM updates the DOM with the boiling verdict and to match the desired input values. The input we just edited receives its current value, and the other input is updated to the temperature after conversion. Every update goes through the same steps so the inputs stay in sync.\nLessons Learned # There should be a single “source of truth” for any data that changes in a React application. Usually, the state is first added to the component that needs it for rendering. Then, if other components also need it, you can lift it up to their closest common ancestor. Instead of trying to sync the state between different components, you should rely on the top-down data flow.\nLifting state involves writing more “boilerplate” code than two-way binding approaches, but as a benefit, it takes less work to find and isolate bugs. Since any state “lives” in some component and that component alone can change it, the surface area for bugs is greatly reduced. Additionally, you can implement any custom logic to reject or transform user input.\nIf something can be derived from either props or state, it probably shouldn’t be in the state. For example, instead of storing both celsiusValue and fahrenheitValue, we store just the last edited temperature and its scale. The value of the other input can always be calculated from them in the render() method. This lets us clear or apply rounding to the other field without losing any precision in the user input.\nWhen you see something wrong in the UI, you can use React Developer Tools to inspect the props and move up the tree until you find the component responsible for updating the state. This lets you trace the bugs to their source:\n"},{"id":359,"href":"/docs/references/meta-frameworks/react/basics/main-concepts/lists-and-keys/","title":"Lists and Keys","section":"main-concepts","content":" 🌵 Lists and Keys # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nThese new documentation pages teach modern React and include live examples:\nRendering Lists First, let’s review how you transform lists in JavaScript.\nGiven the code below, we use the map() function to take an array of numbers and double their values. We assign the new array returned by map() to the variable doubled and log it:\nconst numbers = [1, 2, 3, 4, 5]; const doubled = numbers.map((number) =\u0026gt; number * 2);console.log(doubled); This code logs [2, 4, 6, 8, 10] to the console.\nIn React, transforming arrays into lists of elements is nearly identical.\nRendering Multiple Components # You can build collections of elements and include them in JSX using curly braces {}.\nBelow, we loop through the numbers array using the JavaScript map() function. We return a \u0026lt;li\u0026gt; element for each item. Finally, we assign the resulting array of elements to listItems:\nconst numbers = [1, 2, 3, 4, 5]; const listItems = numbers.map((number) =\u0026gt; \u0026lt;li\u0026gt;{number}\u0026lt;/li\u0026gt;); Then, we can include the entire listItems array inside a \u0026lt;ul\u0026gt; element:\nTry it on CodePen\nThis code displays a bullet list of numbers between 1 and 5.\nBasic List Component # Usually you would render lists inside a component.\nWe can refactor the previous example into a component that accepts an array of numbers and outputs a list of elements.\nfunction NumberList(props) { const numbers = props.numbers; const listItems = numbers.map((number) =\u0026gt; \u0026lt;li\u0026gt;{number}\u0026lt;/li\u0026gt; ); return ( \u0026lt;ul\u0026gt;{listItems}\u0026lt;/ul\u0026gt; ); } const numbers = [1, 2, 3, 4, 5]; const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); root.render(\u0026lt;NumberList numbers={numbers} /\u0026gt;); When you run this code, you’ll be given a warning that a key should be provided for list items. A “key” is a special string attribute you need to include when creating lists of elements. We’ll discuss why it’s important in the next section.\nLet’s assign a key to our list items inside numbers.map() and fix the missing key issue.\nfunction NumberList(props) { const numbers = props.numbers; const listItems = numbers.map((number) =\u0026gt; \u0026lt;li key={number.toString()}\u0026gt; {number} \u0026lt;/li\u0026gt; ); return ( \u0026lt;ul\u0026gt;{listItems}\u0026lt;/ul\u0026gt; ); } Try it on CodePen\nKeys # Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity:\nconst numbers = [1, 2, 3, 4, 5]; const listItems = numbers.map((number) =\u0026gt; \u0026lt;li key={number.toString()}\u0026gt; {number} \u0026lt;/li\u0026gt; ); The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often you would use IDs from your data as keys:\nconst todoItems = todos.map((todo) =\u0026gt; \u0026lt;li key={todo.id}\u0026gt; {todo.text} \u0026lt;/li\u0026gt; ); When you don’t have stable IDs for rendered items, you may use the item index as a key as a last resort:\nconst todoItems = todos.map((todo, index) =\u0026gt; // Only do this if items have no stable IDs \u0026lt;li key={index}\u0026gt; {todo.text} \u0026lt;/li\u0026gt; ); We don’t recommend using indexes for keys if the order of items may change. This can negatively impact performance and may cause issues with component state. Check out Robin Pokorny’s article for an in-depth explanation on the negative impacts of using an index as a key. If you choose not to assign an explicit key to list items then React will default to using indexes as keys.\nHere is an in-depth explanation about why keys are necessary if you’re interested in learning more.\nKeys only make sense in the context of the surrounding array.\nFor example, if you extract a ListItem component, you should keep the key on the \u0026lt;ListItem /\u0026gt; elements in the array rather than on the \u0026lt;li\u0026gt; element in the ListItem itself.\nExample: Incorrect Key Usage\nfunction ListItem(props) { const value = props.value; return ( // Wrong! There is no need to specify the key here: \u0026lt;li key={value.toString()}\u0026gt; {value} \u0026lt;/li\u0026gt; ); } function NumberList(props) { const numbers = props.numbers; const listItems = numbers.map((number) =\u0026gt; // Wrong! The key should have been specified here: \u0026lt;ListItem value={number} /\u0026gt; ); return ( \u0026lt;ul\u0026gt; {listItems} \u0026lt;/ul\u0026gt; ); } Example: Correct Key Usage\nfunction ListItem(props) { // Correct! There is no need to specify the key here: return \u0026lt;li\u0026gt;{props.value}\u0026lt;/li\u0026gt;;} function NumberList(props) { const numbers = props.numbers; const listItems = numbers.map((number) =\u0026gt; // Correct! Key should be specified inside the array. \u0026lt;ListItem key={number.toString()} value={number} /\u0026gt; ); return ( \u0026lt;ul\u0026gt; {listItems} \u0026lt;/ul\u0026gt; ); } Try it on CodePen\nA good rule of thumb is that elements inside the map() call need keys.\nKeys Must Only Be Unique Among Siblings # Keys used within arrays should be unique among their siblings. However, they don’t need to be globally unique. We can use the same keys when we produce two different arrays:\nfunction Blog(props) { const sidebar = ( \u0026lt;ul\u0026gt; {props.posts.map((post) =\u0026gt; \u0026lt;li key={post.id}\u0026gt; {post.title} \u0026lt;/li\u0026gt; )} \u0026lt;/ul\u0026gt; ); const content = props.posts.map((post) =\u0026gt; \u0026lt;div key={post.id}\u0026gt; \u0026lt;h3\u0026gt;{post.title}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{post.content}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); return ( \u0026lt;div\u0026gt; {sidebar} \u0026lt;hr /\u0026gt; {content} \u0026lt;/div\u0026gt; ); } const posts = [ {id: 1, title: \u0026#39;Hello World\u0026#39;, content: \u0026#39;Welcome to learning React!\u0026#39;}, {id: 2, title: \u0026#39;Installation\u0026#39;, content: \u0026#39;You can install React from npm.\u0026#39;} ]; const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); root.render(\u0026lt;Blog posts={posts} /\u0026gt;); Try it on CodePen\nKeys serve as a hint to React but they don’t get passed to your components. If you need the same value in your component, pass it explicitly as a prop with a different name:\nconst content = posts.map((post) =\u0026gt; \u0026lt;Post key={post.id} id={post.id} title={post.title} /\u0026gt; ); With the example above, the Post component can read props.id, but not props.key.\nEmbedding map() in JSX # In the examples above we declared a separate listItems variable and included it in JSX:\nfunction NumberList(props) { const numbers = props.numbers; const listItems = numbers.map((number) =\u0026gt; \u0026lt;ListItem key={number.toString()} value={number} /\u0026gt; ); return ( \u0026lt;ul\u0026gt; {listItems} \u0026lt;/ul\u0026gt; ); } JSX allows embedding any expression in curly braces so we could inline the map() result:\nfunction NumberList(props) { const numbers = props.numbers; return ( \u0026lt;ul\u0026gt; {numbers.map((number) =\u0026gt; \u0026lt;ListItem key={number.toString()} value={number} /\u0026gt; )} \u0026lt;/ul\u0026gt; ); } Try it on CodePen\nSometimes this results in clearer code, but this style can also be abused. Like in JavaScript, it is up to you to decide whether it is worth extracting a variable for readability. Keep in mind that if the map() body is too nested, it might be a good time to extract a component.\n"},{"id":360,"href":"/docs/references/meta-frameworks/react/basics/main-concepts/rendering-elements/","title":"Rendering Elements","section":"main-concepts","content":" Rendering Elements # Elements are the smallest building blocks of React apps.\nAn element describes what you want to see on the screen:\nconst element = \u0026lt;h1\u0026gt;Hello, world\u0026lt;/h1\u0026gt;; Unlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match the React elements.\nNote:\nOne might confuse elements with a more widely known concept of “components”. We will introduce components in the next section. Elements are what components are “made of”, and we encourage you to read this section before jumping ahead.\nRendering an Element into the DOM # Let’s say there is a \u0026lt;div\u0026gt; somewhere in your HTML file:\nWe call this a “root” DOM node because everything inside it will be managed by React DOM.\nApplications built with just React usually have a single root DOM node. If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like.\nTo render a React element, first pass the DOM element to ReactDOM.createRoot(), then pass the React element to root.render():\nconst root = ReactDOM.createRoot( document.getElementById(\u0026#39;root\u0026#39;) ); const element = \u0026lt;h1\u0026gt;Hello, world\u0026lt;/h1\u0026gt;; root.render(element); Try it on CodePen\nIt displays “Hello, world” on the page.\nUpdating the Rendered Element # React elements are immutable. Once you create an element, you can’t change its children or attributes. An element is like a single frame in a movie: it represents the UI at a certain point in time.\nWith our knowledge so far, the only way to update the UI is to create a new element, and pass it to root.render().\nConsider this ticking clock example:\nconst root = ReactDOM.createRoot( document.getElementById(\u0026#39;root\u0026#39;) ); function tick() { const element = ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;It is {new Date().toLocaleTimeString()}.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); root.render(element);} setInterval(tick, 1000); Try it on CodePen\nIt calls root.render() every second from a setInterval() callback.\nNote:\nIn practice, most React apps only call root.render() once. In the next sections we will learn how such code gets encapsulated into stateful components.\nWe recommend that you don’t skip topics because they build on each other.\nReact Only Updates What’s Necessary # React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.\nYou can verify by inspecting the last example with the browser tools:\nEven though we create an element describing the whole UI tree on every tick, only the text node whose contents have changed gets updated by React DOM.\nIn our experience, thinking about how the UI should look at any given moment, rather than how to change it over time, eliminates a whole class of bugs.\n"},{"id":361,"href":"/docs/references/meta-frameworks/react/basics/main-concepts/state-and-lifecycle/","title":"State and Lifecycle","section":"main-concepts","content":" 🌵 State and Lifecycle # This page introduces the concept of state and lifecycle in a React component. You can find a detailed component API reference here.\nConsider the ticking clock example from one of the previous sections. In Rendering Elements, we have only learned one way to update the UI. We call root.render() to change the rendered output:\nconst root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); function tick() { const element = ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;It is {new Date().toLocaleTimeString()}.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); root.render(element);} setInterval(tick, 1000); Try it on CodePen\nIn this section, we will learn how to make the Clock component truly reusable and encapsulated. It will set up its own timer and update itself every second.\nWe can start by encapsulating how the clock looks:\nconst root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); function Clock(props) { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;It is {props.date.toLocaleTimeString()}.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); } function tick() { root.render(\u0026lt;Clock date={new Date()} /\u0026gt;);} setInterval(tick, 1000); Try it on CodePen\nHowever, it misses a crucial requirement: the fact that the Clock sets up a timer and updates the UI every second should be an implementation detail of the Clock.\nIdeally we want to write this once and have the Clock update itself:\nTo implement this, we need to add “state” to the Clock component.\nState is similar to props, but it is private and fully controlled by the component.\nConverting a Function to a Class # You can convert a function component like Clock to a class in five steps:\nCreate an ES6 class, with the same name, that extends React.Component. Add a single empty method to it called render(). Move the body of the function into the render() method. Replace props with this.props in the render() body. Delete the remaining empty function declaration. class Clock extends React.Component { render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;It is {this.props.date.toLocaleTimeString()}.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); } } Try it on CodePen\nClock is now defined as a class rather than a function.\nThe render method will be called each time an update happens, but as long as we render \u0026lt;Clock /\u0026gt; into the same DOM node, only a single instance of the Clock class will be used. This lets us use additional features such as local state and lifecycle methods.\nAdding Local State to a Class # We will move the date from props to state in three steps:\nReplace this.props.date with this.state.date in the render() method: class Clock extends React.Component { render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;It is {this.state.date.toLocaleTimeString()}.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); } } Add a class constructor that assigns the initial this.state: class Clock extends React.Component { constructor(props) { super(props); this.state = {date: new Date()}; } render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;It is {this.state.date.toLocaleTimeString()}.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); } } Note how we pass props to the base constructor:\nconstructor(props) { super(props); this.state = {date: new Date()}; } Class components should always call the base constructor with props.\nRemove the date prop from the \u0026lt;Clock /\u0026gt; element: We will later add the timer code back to the component itself.\nThe result looks like this:\nclass Clock extends React.Component { constructor(props) { super(props); this.state = {date: new Date()}; } render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;It is {this.state.date.toLocaleTimeString()}.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); } } const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); root.render(\u0026lt;Clock /\u0026gt;); Try it on CodePen\nNext, we’ll make the Clock set up its own timer and update itself every second.\nAdding Lifecycle Methods to a Class # In applications with many components, it’s very important to free up resources taken by the components when they are destroyed.\nWe want to set up a timer whenever the Clock is rendered to the DOM for the first time. This is called “mounting” in React.\nWe also want to clear that timer whenever the DOM produced by the Clock is removed. This is called “unmounting” in React.\nWe can declare special methods on the component class to run some code when a component mounts and unmounts:\nclass Clock extends React.Component { constructor(props) { super(props); this.state = {date: new Date()}; } componentDidMount() { } componentWillUnmount() { } render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;It is {this.state.date.toLocaleTimeString()}.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); } } These methods are called “lifecycle methods”.\nThe componentDidMount() method runs after the component output has been rendered to the DOM. This is a good place to set up a timer:\ncomponentDidMount() { this.timerID = setInterval( () =\u0026gt; this.tick(), 1000 ); } Note how we save the timer ID right on this (this.timerID).\nWhile this.props is set up by React itself and this.state has a special meaning, you are free to add additional fields to the class manually if you need to store something that doesn’t participate in the data flow (like a timer ID).\nWe will tear down the timer in the componentWillUnmount() lifecycle method:\ncomponentWillUnmount() { clearInterval(this.timerID); } Finally, we will implement a method called tick() that the Clock component will run every second.\nIt will use this.setState() to schedule updates to the component local state:\nclass Clock extends React.Component { constructor(props) { super(props); this.state = {date: new Date()}; } componentDidMount() { this.timerID = setInterval( () =\u0026gt; this.tick(), 1000 ); } componentWillUnmount() { clearInterval(this.timerID); } tick() { this.setState({ date: new Date() }); } render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;It is {this.state.date.toLocaleTimeString()}.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); } } const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); root.render(\u0026lt;Clock /\u0026gt;); Try it on CodePen\nNow the clock ticks every second.\nLet’s quickly recap what’s going on and the order in which the methods are called:\nWhen \u0026lt;Clock /\u0026gt; is passed to root.render(), React calls the constructor of the Clock component. Since Clock needs to display the current time, it initializes this.state with an object including the current time. We will later update this state. React then calls the Clock component’s render() method. This is how React learns what should be displayed on the screen. React then updates the DOM to match the Clock’s render output. When the Clock output is inserted in the DOM, React calls the componentDidMount() lifecycle method. Inside it, the Clock component asks the browser to set up a timer to call the component’s tick() method once a second. Every second the browser calls the tick() method. Inside it, the Clock component schedules a UI update by calling setState() with an object containing the current time. Thanks to the setState() call, React knows the state has changed, and calls the render() method again to learn what should be on the screen. This time, this.state.date in the render() method will be different, and so the render output will include the updated time. React updates the DOM accordingly. If the Clock component is ever removed from the DOM, React calls the componentWillUnmount() lifecycle method so the timer is stopped. Using State Correctly # There are three things you should know about setState().\nDo Not Modify State Directly # For example, this will not re-render a component:\n// Wrong this.state.comment = \u0026#39;Hello\u0026#39;; Instead, use setState():\n// Correct this.setState({comment: \u0026#39;Hello\u0026#39;}); The only place where you can assign this.state is the constructor.\nState Updates May Be Asynchronous # React may batch multiple setState() calls into a single update for performance.\nBecause this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.\nFor example, this code may fail to update the counter:\n// Wrong this.setState({ counter: this.state.counter + this.props.increment, }); To fix it, use a second form of setState() that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:\n// Correct this.setState((state, props) =\u0026gt; ({ counter: state.counter + props.increment })); We used an arrow function above, but it also works with regular functions:\n// Correct this.setState(function(state, props) { return { counter: state.counter + props.increment }; }); State Updates are Merged # When you call setState(), React merges the object you provide into the current state.\nFor example, your state may contain several independent variables:\nconstructor(props) { super(props); this.state = { posts: [], comments: [] }; } Then you can update them independently with separate setState() calls:\ncomponentDidMount() { fetchPosts().then(response =\u0026gt; { this.setState({ posts: response.posts }); }); fetchComments().then(response =\u0026gt; { this.setState({ comments: response.comments }); }); } The merging is shallow, so this.setState({comments}) leaves this.state.posts intact, but completely replaces this.state.comments.\nThe Data Flows Down # Neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn’t care whether it is defined as a function or a class.\nThis is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it.\nA component may choose to pass its state down as props to its child components:\n\u0026lt;FormattedDate date={this.state.date} /\u0026gt; The FormattedDate component would receive the date in its props and wouldn’t know whether it came from the Clock’s state, from the Clock’s props, or was typed by hand:\nfunction FormattedDate(props) { return \u0026lt;h2\u0026gt;It is {props.date.toLocaleTimeString()}.\u0026lt;/h2\u0026gt;; } Try it on CodePen\nThis is commonly called a “top-down” or “unidirectional” data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components “below” them in the tree.\nIf you imagine a component tree as a waterfall of props, each component’s state is like an additional water source that joins it at an arbitrary point but also flows down.\nTo show that all components are truly isolated, we can create an App component that renders three \u0026lt;Clock\u0026gt;s:\nfunction App() { return ( \u0026lt;div\u0026gt; \u0026lt;Clock /\u0026gt; \u0026lt;Clock /\u0026gt; \u0026lt;Clock /\u0026gt; \u0026lt;/div\u0026gt; ); } Try it on CodePen\nEach Clock sets up its own timer and updates independently.\nIn React apps, whether a component is stateful or stateless is considered an implementation detail of the component that may change over time. You can use stateless components inside stateful components, and vice versa.\n"},{"id":362,"href":"/docs/references/meta-frameworks/react/basics/main-concepts/thinking-in-react/","title":"Thinking in React","section":"main-concepts","content":" ⭐ Thinking in React # React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.\nStart with the mockup # Imagine that you already have a JSON API and a mockup from a designer.\nThe JSON API returns some data that looks like this:\n[ { category: \u0026#34;Fruits\u0026#34;, price: \u0026#34;$1\u0026#34;, stocked: true, name: \u0026#34;Apple\u0026#34; }, { category: \u0026#34;Fruits\u0026#34;, price: \u0026#34;$1\u0026#34;, stocked: true, name: \u0026#34;Dragonfruit\u0026#34; }, { category: \u0026#34;Fruits\u0026#34;, price: \u0026#34;$2\u0026#34;, stocked: false, name: \u0026#34;Passionfruit\u0026#34; }, { category: \u0026#34;Vegetables\u0026#34;, price: \u0026#34;$2\u0026#34;, stocked: true, name: \u0026#34;Spinach\u0026#34; }, { category: \u0026#34;Vegetables\u0026#34;, price: \u0026#34;$4\u0026#34;, stocked: false, name: \u0026#34;Pumpkin\u0026#34; }, { category: \u0026#34;Vegetables\u0026#34;, price: \u0026#34;$1\u0026#34;, stocked: true, name: \u0026#34;Peas\u0026#34; } ] The mockup looks like this:\nTo implement a UI in React, you will usually follow the same five steps.\nStep 1: Break the UI into a component hierarchy # Start by drawing boxes around every component and subcomponent in the mockup and naming them. If you work with a designer, they may have already named these components in their design tool. Ask them!\nDepending on your background, you can think about splitting up a design into components in different ways:\nProgramming—use the same techniques for deciding if you should create a new function or object. One such technique is the single responsibility principle, that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents. CSS—consider what you would make class selectors for. (However, components are a bit less granular.) Design—consider how you would organize the design’s layers. If your JSON is well-structured, you’ll often find that it naturally maps to the component structure of your UI. That’s because UI and data models often have the same information architecture—that is, the same shape. Separate your UI into components, where each component matches one piece of your data model.\nThere are five components on this screen:\nFilterableProductTable (grey) contains the entire app. SearchBar (blue) receives the user input. ProductTable (lavender) displays and filters the list according to the user input. ProductCategoryRow (green) displays a heading for each category. ProductRow (yellow) displays a row for each product. If you look at ProductTable (lavender), you’ll see that the table header (containing the “Name” and “Price” labels) isn’t its own component. This is a matter of preference, and you could go either way. For this example, it is a part of ProductTable because it appears inside the ProductTable’s list. However, if this header grows to be complex (e.g., if you add sorting), you can move it into its own ProductTableHeader component.\nNow that you’ve identified the components in the mockup, arrange them into a hierarchy. Components that appear within another component in the mockup should appear as a child in the hierarchy:\nFilterableProductTable SearchBar ProductTable ProductCategoryRow ProductRow Step 2: Build a static version in React # Now that you have your component hierarchy, it’s time to implement your app. The most straightforward approach is to build a version that renders the UI from your data model without adding any interactivity… yet! It’s often easier to build the static version first and add interactivity later. Building a static version requires a lot of typing and no thinking, but adding interactivity requires a lot of thinking and not a lot of typing.\nTo build a static version of your app that renders your data model, you’ll want to build components that reuse other components and pass data using props. Props are a way of passing data from parent to child. (If you’re familiar with the concept of state, don’t use state at all to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don’t need it.)\nYou can either build “top down” by starting with building the components higher up in the hierarchy (like FilterableProductTable) or “bottom up” by working from components lower down (like ProductRow). In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up.\nfunction ProductCategoryRow({ category }) { return ( \u0026lt;tr\u0026gt; \u0026lt;th colSpan=\u0026#34;2\u0026#34;\u0026gt; {category} \u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; ); } function ProductRow({ product }) { const name = product.stocked ? product.name : \u0026lt;span style={{ color: \u0026#39;red\u0026#39; }}\u0026gt; {product.name} \u0026lt;/span\u0026gt;; return ( \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{name}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{product.price}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; ); } function ProductTable({ products }) { const rows = []; let lastCategory = null; products.forEach((product) =\u0026gt; { if (product.category !== lastCategory) { rows.push( \u0026lt;ProductCategoryRow category={product.category} key={product.category} /\u0026gt; ); } rows.push( \u0026lt;ProductRow product={product} key={product.name} /\u0026gt; ); lastCategory = product.category; }); return ( \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Price\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt;{rows}\u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; ); } function SearchBar() { return ( \u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;Search...\u0026#34; /\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; /\u0026gt; {\u0026#39; \u0026#39;} Only show products in stock \u0026lt;/label\u0026gt; \u0026lt;/form\u0026gt; ); } function FilterableProductTable({ products }) { return ( \u0026lt;div\u0026gt; \u0026lt;SearchBar /\u0026gt; \u0026lt;ProductTable products={products} /\u0026gt; \u0026lt;/div\u0026gt; ); } const PRODUCTS = [ {category: \u0026#34;Fruits\u0026#34;, price: \u0026#34;$1\u0026#34;, stocked: true, name: \u0026#34;Apple\u0026#34;}, {category: \u0026#34;Fruits\u0026#34;, price: \u0026#34;$1\u0026#34;, stocked: true, name: \u0026#34;Dragonfruit\u0026#34;}, {category: \u0026#34;Fruits\u0026#34;, price: \u0026#34;$2\u0026#34;, stocked: false, name: \u0026#34;Passionfruit\u0026#34;}, {category: \u0026#34;Vegetables\u0026#34;, price: \u0026#34;$2\u0026#34;, stocked: true, name: \u0026#34;Spinach\u0026#34;}, {category: \u0026#34;Vegetables\u0026#34;, price: \u0026#34;$4\u0026#34;, stocked: false, name: \u0026#34;Pumpkin\u0026#34;}, {category: \u0026#34;Vegetables\u0026#34;, price: \u0026#34;$1\u0026#34;, stocked: true, name: \u0026#34;Peas\u0026#34;} ]; export default function App() { return \u0026lt;FilterableProductTable products={PRODUCTS} /\u0026gt;; } (If this code looks intimidating, go through the Quick Start first!)\nAfter building your components, you’ll have a library of reusable components that render your data model. Because this is a static app, the components will only return JSX. The component at the top of the hierarchy (FilterableProductTable) will take your data model as a prop. This is called one-way data flow because the data flows down from the top-level component to the ones at the bottom of the tree.\nPitfall # At this point, you should not be using any state values. That’s for the next step!\nStep 3: Find the minimal but complete representation of UI state # To make the UI interactive, you need to let users change your underlying data model. You will use state for this.\nThink of state as the minimal set of changing data that your app needs to remember. The most important principle for structuring state is to keep it DRY (Don’t Repeat Yourself). Figure out the absolute minimal representation of the state your application needs and compute everything else on-demand. For example, if you’re building a shopping list, you can store the items as an array in state. If you want to also display the number of items in the list, don’t store the number of items as another state value—instead, read the length of your array.\nNow think of all of the pieces of data in this example application:\nThe original list of products The search text the user has entered The value of the checkbox The filtered list of products Which of these are state? Identify the ones that are not:\nDoes it remain unchanged over time? If so, it isn’t state. Is it passed in from a parent via props? If so, it isn’t state. Can you compute it based on existing state or props in your component? If so, it definitely isn’t state! What’s left is probably state.\nLet’s go through them one by one again:\nThe original list of products is passed in as props, so it’s not state. The search text seems to be state since it changes over time and can’t be computed from anything. The value of the checkbox seems to be state since it changes over time and can’t be computed from anything. The filtered list of products isn’t state because it can be computed by taking the original list of products and filtering it according to the search text and value of the checkbox. This means only the search text and the value of the checkbox are state! Nicely done!\nDeep DiveProps vs State There are two types of “model” data in React: props and state. The two are very different:\nProps are like arguments you pass to a function. They let a parent component pass data to a child component and customize its appearance. For example, a Form can pass a color prop to a Button. State is like a component’s memory. It lets a component keep track of some information and change it in response to interactions. For example, a Button might keep track of isHovered state. Props and state are different, but they work together. A parent component will often keep some information in state (so that it can change it), and pass it down to child components as their props. It’s okay if the difference still feels fuzzy on the first read. It takes a bit of practice for it to really stick!\nStep 4: Identify where your state should live # After identifying your app’s minimal state data, you need to identify which component is responsible for changing this state, or owns the state. Remember: React uses one-way data flow, passing data down the component hierarchy from parent to child component. It may not be immediately clear which component should own what state. This can be challenging if you’re new to this concept, but you can figure it out by following these steps!\nFor each piece of state in your application:\nIdentify every component that renders something based on that state. Find their closest common parent component—a component above them all in the hierarchy. Decide where the state should live: Often, you can put the state directly into their common parent. You can also put the state into some component above their common parent. If you can’t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common parent component. In the previous step, you found two pieces of state in this application: the search input text, and the value of the checkbox. In this example, they always appear together, so it makes sense to put them into the same place.\nNow let’s run through our strategy for them:\nIdentify components that use state: ProductTable needs to filter the product list based on that state (search text and checkbox value). SearchBar needs to display that state (search text and checkbox value). Find their common parent: The first parent component both components share is FilterableProductTable. Decide where the state lives: We’ll keep the filter text and checked state values in FilterableProductTable. So the state values will live in FilterableProductTable.\nAdd state to the component with the useState() Hook. Hooks are special functions that let you “hook into” React. Add two state variables at the top of FilterableProductTable and specify their initial state:\nfunction FilterableProductTable({ products }) { const [filterText, setFilterText] = useState(\u0026#39;\u0026#39;); const [inStockOnly, setInStockOnly] = useState(false); Then, pass filterText and inStockOnly to ProductTable and SearchBar as props:\n\u0026lt;div\u0026gt; \u0026lt;SearchBar filterText={filterText} inStockOnly={inStockOnly} /\u0026gt; \u0026lt;ProductTable products={products} filterText={filterText} inStockOnly={inStockOnly} /\u0026gt; \u0026lt;/div\u0026gt; You can start seeing how your application will behave. Edit the filterText initial value from useState('') to useState('fruit') in the sandbox code below. You’ll see both the search input text and the table update:\nimport { useState } from \u0026#39;react\u0026#39;; function FilterableProductTable({ products }) { const [filterText, setFilterText] = useState(\u0026#39;\u0026#39;); const [inStockOnly, setInStockOnly] = useState(false); return ( \u0026lt;div\u0026gt; \u0026lt;SearchBar filterText={filterText} inStockOnly={inStockOnly} /\u0026gt; \u0026lt;ProductTable products={products} filterText={filterText} inStockOnly={inStockOnly} /\u0026gt; \u0026lt;/div\u0026gt; ); } function ProductCategoryRow({ category }) { return ( \u0026lt;tr\u0026gt; \u0026lt;th colSpan=\u0026#34;2\u0026#34;\u0026gt; {category} \u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; ); } function ProductRow({ product }) { const name = product.stocked ? product.name : \u0026lt;span style={{ color: \u0026#39;red\u0026#39; }}\u0026gt; {product.name} \u0026lt;/span\u0026gt;; return ( \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{name}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{product.price}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; ); } function ProductTable({ products, filterText, inStockOnly }) { const rows = []; let lastCategory = null; products.forEach((product) =\u0026gt; { if ( product.name.toLowerCase().indexOf( filterText.toLowerCase() ) === -1 ) { return; } if (inStockOnly \u0026amp;\u0026amp; !product.stocked) { return; } if (product.category !== lastCategory) { rows.push( \u0026lt;ProductCategoryRow category={product.category} key={product.category} /\u0026gt; ); } rows.push( \u0026lt;ProductRow product={product} key={product.name} /\u0026gt; ); lastCategory = product.category; }); return ( \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Price\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt;{rows}\u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; ); } function SearchBar({ filterText, inStockOnly }) { return ( \u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; value={filterText} placeholder=\u0026#34;Search...\u0026#34;/\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; checked={inStockOnly} /\u0026gt; {\u0026#39; \u0026#39;} Only show products in stock \u0026lt;/label\u0026gt; \u0026lt;/form\u0026gt; ); } const PRODUCTS = [ {category: \u0026#34;Fruits\u0026#34;, price: \u0026#34;$1\u0026#34;, stocked: true, name: \u0026#34;Apple\u0026#34;}, {category: \u0026#34;Fruits\u0026#34;, price: \u0026#34;$1\u0026#34;, stocked: true, name: \u0026#34;Dragonfruit\u0026#34;}, {category: \u0026#34;Fruits\u0026#34;, price: \u0026#34;$2\u0026#34;, stocked: false, name: \u0026#34;Passionfruit\u0026#34;}, {category: \u0026#34;Vegetables\u0026#34;, price: \u0026#34;$2\u0026#34;, stocked: true, name: \u0026#34;Spinach\u0026#34;}, {category: \u0026#34;Vegetables\u0026#34;, price: \u0026#34;$4\u0026#34;, stocked: false, name: \u0026#34;Pumpkin\u0026#34;}, {category: \u0026#34;Vegetables\u0026#34;, price: \u0026#34;$1\u0026#34;, stocked: true, name: \u0026#34;Peas\u0026#34;} ]; export default function App() { return \u0026lt;FilterableProductTable products={PRODUCTS} /\u0026gt;; } Notice that editing the form doesn’t work yet. There is a console error in the sandbox above explaining why:\nYou provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field.\nIn the sandbox above, ProductTable and SearchBar read the filterText and inStockOnly props to render the table, the input, and the checkbox. For example, here is how SearchBar populates the input value:\nfunction SearchBar({ filterText, inStockOnly }) { return ( \u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; value={filterText} placeholder=\u0026#34;Search...\u0026#34;/\u0026gt; However, you haven’t added any code to respond to the user actions like typing yet. This will be your final step.\nStep 5: Add inverse data flow # Currently your app renders correctly with props and state flowing down the hierarchy. But to change the state according to user input, you will need to support data flowing the other way: the form components deep in the hierarchy need to update the state in FilterableProductTable.\nReact makes this data flow explicit, but it requires a little more typing than two-way data binding. If you try to type or check the box in the example above, you’ll see that React ignores your input. This is intentional. By writing \u0026lt;input value={filterText} /\u0026gt;, you’ve set the value prop of the input to always be equal to the filterText state passed in from FilterableProductTable. Since filterText state is never set, the input never changes.\nYou want to make it so whenever the user changes the form inputs, the state updates to reflect those changes. The state is owned by FilterableProductTable, so only it can call setFilterText and setInStockOnly. To let SearchBar update the FilterableProductTable’s state, you need to pass these functions down to SearchBar:\nfunction FilterableProductTable({ products }) { const [filterText, setFilterText] = useState(\u0026#39;\u0026#39;); const [inStockOnly, setInStockOnly] = useState(false); return ( \u0026lt;div\u0026gt; \u0026lt;SearchBar filterText={filterText} inStockOnly={inStockOnly} onFilterTextChange={setFilterText} onInStockOnlyChange={setInStockOnly} /\u0026gt; Inside the SearchBar, you will add the onChange event handlers and set the parent state from them:\n\u0026lt;input type=\u0026#34;text\u0026#34; value={filterText} placeholder=\u0026#34;Search...\u0026#34; onChange={(e) =\u0026gt; onFilterTextChange(e.target.value)} /\u0026gt; Now the application fully works!\nimport { useState } from \u0026#39;react\u0026#39;; function FilterableProductTable({ products }) { const [filterText, setFilterText] = useState(\u0026#39;\u0026#39;); const [inStockOnly, setInStockOnly] = useState(false); return ( \u0026lt;div\u0026gt; \u0026lt;SearchBar filterText={filterText} inStockOnly={inStockOnly} onFilterTextChange={setFilterText} onInStockOnlyChange={setInStockOnly} /\u0026gt; \u0026lt;ProductTable products={products} filterText={filterText} inStockOnly={inStockOnly} /\u0026gt; \u0026lt;/div\u0026gt; ); } function ProductCategoryRow({ category }) { return ( \u0026lt;tr\u0026gt; \u0026lt;th colSpan=\u0026#34;2\u0026#34;\u0026gt; {category} \u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; ); } function ProductRow({ product }) { const name = product.stocked ? product.name : \u0026lt;span style={{ color: \u0026#39;red\u0026#39; }}\u0026gt; {product.name} \u0026lt;/span\u0026gt;; return ( \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{name}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{product.price}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; ); } function ProductTable({ products, filterText, inStockOnly }) { const rows = []; let lastCategory = null; products.forEach((product) =\u0026gt; { if ( product.name.toLowerCase().indexOf( filterText.toLowerCase() ) === -1 ) { return; } if (inStockOnly \u0026amp;\u0026amp; !product.stocked) { return; } if (product.category !== lastCategory) { rows.push( \u0026lt;ProductCategoryRow category={product.category} key={product.category} /\u0026gt; ); } rows.push( \u0026lt;ProductRow product={product} key={product.name} /\u0026gt; ); lastCategory = product.category; }); return ( \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Price\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt;{rows}\u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; ); } function SearchBar({ filterText, inStockOnly, onFilterTextChange, onInStockOnlyChange }) { return ( \u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; value={filterText} placeholder=\u0026#34;Search...\u0026#34; onChange={(e) =\u0026gt; onFilterTextChange(e.target.value)} /\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; checked={inStockOnly} onChange={(e) =\u0026gt; onInStockOnlyChange(e.target.checked)} /\u0026gt; {\u0026#39; \u0026#39;} Only show products in stock \u0026lt;/label\u0026gt; \u0026lt;/form\u0026gt; ); } const PRODUCTS = [ {category: \u0026#34;Fruits\u0026#34;, price: \u0026#34;$1\u0026#34;, stocked: true, name: \u0026#34;Apple\u0026#34;}, {category: \u0026#34;Fruits\u0026#34;, price: \u0026#34;$1\u0026#34;, stocked: true, name: \u0026#34;Dragonfruit\u0026#34;}, {category: \u0026#34;Fruits\u0026#34;, price: \u0026#34;$2\u0026#34;, stocked: false, name: \u0026#34;Passionfruit\u0026#34;}, {category: \u0026#34;Vegetables\u0026#34;, price: \u0026#34;$2\u0026#34;, stocked: true, name: \u0026#34;Spinach\u0026#34;}, {category: \u0026#34;Vegetables\u0026#34;, price: \u0026#34;$4\u0026#34;, stocked: false, name: \u0026#34;Pumpkin\u0026#34;}, {category: \u0026#34;Vegetables\u0026#34;, price: \u0026#34;$1\u0026#34;, stocked: true, name: \u0026#34;Peas\u0026#34;} ]; export default function App() { return \u0026lt;FilterableProductTable products={PRODUCTS} /\u0026gt;; } "},{"id":363,"href":"/docs/references/meta-frameworks/react/frequently-used/api-reference/dom-elements/","title":"Dom Elements","section":"API Reference","content":" 🌵 DOM Elements # React implements a browser-independent DOM system for performance and cross-browser compatibility. We took the opportunity to clean up a few rough edges in browser DOM implementations.\nIn React, all DOM properties and attributes (including event handlers) should be camelCased. For example, the HTML attribute tabindex corresponds to the attribute tabIndex in React. The exception is aria-* and data-* attributes, which should be lowercased. For example, you can keep aria-label as aria-label.\nDifferences In Attributes # There are a number of attributes that work differently between React and HTML:\nchecked # The checked attribute is supported by \u0026lt;input\u0026gt; components of type checkbox or radio. You can use it to set whether the component is checked. This is useful for building controlled components. defaultChecked is the uncontrolled equivalent, which sets whether the component is checked when it is first mounted.\nclassName # To specify a CSS class, use the className attribute. This applies to all regular DOM and SVG elements like \u0026lt;div\u0026gt;, \u0026lt;a\u0026gt;, and others.\nIf you use React with Web Components (which is uncommon), use the class attribute instead.\ndangerouslySetInnerHTML # dangerouslySetInnerHTML is React’s replacement for using innerHTML in the browser DOM. In general, setting HTML from code is risky because it’s easy to inadvertently expose your users to a cross-site scripting (XSS) attack. So, you can set HTML directly from React, but you have to type out dangerouslySetInnerHTML and pass an object with a __html key, to remind yourself that it’s dangerous. For example:\nfunction createMarkup() { return {__html: \u0026#39;First \u0026amp;middot; Second\u0026#39;}; } function MyComponent() { return \u0026lt;div dangerouslySetInnerHTML={createMarkup()} /\u0026gt;; } htmlFor # Since for is a reserved word in JavaScript, React elements use htmlFor instead.\nonChange # The onChange event behaves as you would expect it to: whenever a form field is changed, this event is fired. We intentionally do not use the existing browser behavior because onChange is a misnomer for its behavior and React relies on this event to handle user input in real time.\nselected # If you want to mark an \u0026lt;option\u0026gt; as selected, reference the value of that option in the value of its \u0026lt;select\u0026gt; instead. Check out “The select Tag” for detailed instructions.\nstyle # Note\nSome examples in the documentation use style for convenience, but using the style attribute as the primary means of styling elements is generally not recommended. In most cases, className should be used to reference classes defined in an external CSS stylesheet. style is most often used in React applications to add dynamically-computed styles at render time. See also FAQ: Styling and CSS.\nThe style attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. For example:\nconst divStyle = { color: \u0026#39;blue\u0026#39;, backgroundImage: \u0026#39;url(\u0026#39; + imgUrl + \u0026#39;)\u0026#39;, }; function HelloWorldComponent() { return \u0026lt;div style={divStyle}\u0026gt;Hello World!\u0026lt;/div\u0026gt;; } Note that styles are not autoprefixed. To support older browsers, you need to supply corresponding style properties:\nconst divStyle = { WebkitTransition: \u0026#39;all\u0026#39;, // note the capital \u0026#39;W\u0026#39; here msTransition: \u0026#39;all\u0026#39; // \u0026#39;ms\u0026#39; is the only lowercase vendor prefix }; function ComponentWithTransition() { return \u0026lt;div style={divStyle}\u0026gt;This should work cross-browser\u0026lt;/div\u0026gt;; } Style keys are camelCased in order to be consistent with accessing the properties on DOM nodes from JS (e.g. node.style.backgroundImage). Vendor prefixes other than ms should begin with a capital letter. This is why WebkitTransition has an uppercase “W”.\nReact will automatically append a “px” suffix to certain numeric inline style properties. If you want to use units other than “px”, specify the value as a string with the desired unit. For example:\n// Result style: \u0026#39;10px\u0026#39; \u0026lt;div style={{ height: 10 }}\u0026gt; Hello World! \u0026lt;/div\u0026gt; // Result style: \u0026#39;10%\u0026#39; \u0026lt;div style={{ height: \u0026#39;10%\u0026#39; }}\u0026gt; Hello World! \u0026lt;/div\u0026gt; Not all style properties are converted to pixel strings though. Certain ones remain unitless (eg zoom, order, flex). A complete list of unitless properties can be seen here.\nsuppressContentEditableWarning # Normally, there is a warning when an element with children is also marked as contentEditable, because it won’t work. This attribute suppresses that warning. Don’t use this unless you are building a library like Draft.js that manages contentEditable manually.\nsuppressHydrationWarning # If you use server-side React rendering, normally there is a warning when the server and the client render different content. However, in some rare cases, it is very hard or impossible to guarantee an exact match. For example, timestamps are expected to differ on the server and on the client.\nIf you set suppressHydrationWarning to true, React will not warn you about mismatches in the attributes and the content of that element. It only works one level deep, and is intended to be used as an escape hatch. Don’t overuse it. You can read more about hydration in the ReactDOM.hydrateRoot() documentation.\nvalue # The value attribute is supported by \u0026lt;input\u0026gt;, \u0026lt;select\u0026gt; and \u0026lt;textarea\u0026gt; components. You can use it to set the value of the component. This is useful for building controlled components. defaultValue is the uncontrolled equivalent, which sets the value of the component when it is first mounted.\nAll Supported HTML Attributes # As of React 16, any standard or custom DOM attributes are fully supported.\nReact has always provided a JavaScript-centric API to the DOM. Since React components often take both custom and DOM-related props, React uses the camelCase convention just like the DOM APIs:\n\u0026lt;div tabIndex={-1} /\u0026gt; // Just like node.tabIndex DOM API \u0026lt;div className=\u0026#34;Button\u0026#34; /\u0026gt; // Just like node.className DOM API \u0026lt;input readOnly={true} /\u0026gt; // Just like node.readOnly DOM API These props work similarly to the corresponding HTML attributes, with the exception of the special cases documented above.\nSome of the DOM attributes supported by React include:\naccept acceptCharset accessKey action allowFullScreen alt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked cite classID className colSpan cols content contentEditable contextMenu controls controlsList coords crossOrigin data dateTime default defer dir disabled download draggable encType form formAction formEncType formMethod formNoValidate formTarget frameBorder headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media mediaGroup method min minLength multiple muted name noValidate nonce open optimum pattern placeholder poster preload profile radioGroup readOnly rel required reversed role rowSpan rows sandbox scope scoped scrolling seamless selected shape size sizes span spellCheck src srcDoc srcLang srcSet start step style summary tabIndex target title type useMap value width wmode wrap Similarly, all SVG attributes are fully supported:\naccentHeight accumulate additive alignmentBaseline allowReorder alphabetic amplitude arabicForm ascent attributeName attributeType autoReverse azimuth baseFrequency baseProfile baselineShift bbox begin bias by calcMode capHeight clip clipPath clipPathUnits clipRule colorInterpolation colorInterpolationFilters colorProfile colorRendering contentScriptType contentStyleType cursor cx cy d decelerate descent diffuseConstant direction display divisor dominantBaseline dur dx dy edgeMode elevation enableBackground end exponent externalResourcesRequired fill fillOpacity fillRule filter filterRes filterUnits floodColor floodOpacity focusable fontFamily fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontWeight format from fx fy g1 g2 glyphName glyphOrientationHorizontal glyphOrientationVertical glyphRef gradientTransform gradientUnits hanging horizAdvX horizOriginX ideographic imageRendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength kerning keyPoints keySplines keyTimes lengthAdjust letterSpacing lightingColor limitingConeAngle local markerEnd markerHeight markerMid markerStart markerUnits markerWidth mask maskContentUnits maskUnits mathematical mode numOctaves offset opacity operator order orient orientation origin overflow overlinePosition overlineThickness paintOrder panose1 pathLength patternContentUnits patternTransform patternUnits pointerEvents points pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits r radius refX refY renderingIntent repeatCount repeatDur requiredExtensions requiredFeatures restart result rotate rx ry scale seed shapeRendering slope spacing specularConstant specularExponent speed spreadMethod startOffset stdDeviation stemh stemv stitchTiles stopColor stopOpacity strikethroughPosition strikethroughThickness string stroke strokeDasharray strokeDashoffset strokeLinecap strokeLinejoin strokeMiterlimit strokeOpacity strokeWidth surfaceScale systemLanguage tableValues targetX targetY textAnchor textDecoration textLength textRendering to transform u1 u2 underlinePosition underlineThickness unicode unicodeBidi unicodeRange unitsPerEm vAlphabetic vHanging vIdeographic vMathematical values vectorEffect version vertAdvY vertOriginX vertOriginY viewBox viewTarget visibility widths wordSpacing writingMode x x1 x2 xChannelSelector xHeight xlinkActuate xlinkArcrole xlinkHref xlinkRole xlinkShow xlinkTitle xlinkType xmlns xmlnsXlink xmlBase xmlLang xmlSpace y y1 y2 yChannelSelector z zoomAndPan You may also use custom attributes as long as they’re fully lowercase.\n"},{"id":364,"href":"/docs/references/meta-frameworks/react/frequently-used/api-reference/javascript-environment-requirements/","title":"Javascript Environment Requirements","section":"API Reference","content":" JavaScript Environment Requirements # React 18 supports all modern browsers (Edge, Firefox, Chrome, Safari, etc).\nIf you support older browsers and devices such as Internet Explorer which do not provide modern browser features natively or have non-compliant implementations, consider including a global polyfill in your bundled application.\nHere is a list of the modern features React 18 uses:\nPromise Symbol Object.assign The correct polyfill for these features depend on your environment. For many users, you can configure your Browserlist settings. For others, you may need to import polyfills like core-js directly.\n"},{"id":365,"href":"/docs/references/meta-frameworks/react/frequently-used/api-reference/legacy-context/","title":"Legacy Context","section":"API Reference","content":" Legacy Context # Note:\nThe legacy context API will be removed in a future major version. Use the new context API introduced with version 16.3. The legacy API will continue working for all 16.x releases.\nHow To Use Context # This section documents a legacy API. See the new API.\nSuppose you have a structure like:\nclass Button extends React.Component { render() { return ( \u0026lt;button style={{background: this.props.color}}\u0026gt; {this.props.children} \u0026lt;/button\u0026gt; ); } } class Message extends React.Component { render() { return ( \u0026lt;div\u0026gt; {this.props.text} \u0026lt;Button color={this.props.color}\u0026gt;Delete\u0026lt;/Button\u0026gt; \u0026lt;/div\u0026gt; ); } } class MessageList extends React.Component { render() { const color = \u0026#34;purple\u0026#34;; const children = this.props.messages.map((message) =\u0026gt; \u0026lt;Message text={message.text} color={color} /\u0026gt; ); return \u0026lt;div\u0026gt;{children}\u0026lt;/div\u0026gt;; } } In this example, we manually thread through a color prop in order to style the Button and Message components appropriately. Using context, we can pass this through the tree automatically:\nimport PropTypes from \u0026#39;prop-types\u0026#39;; class Button extends React.Component { render() { return ( \u0026lt;button style={{background: this.context.color}}\u0026gt; {this.props.children} \u0026lt;/button\u0026gt; ); } } Button.contextTypes = { color: PropTypes.string}; class Message extends React.Component { render() { return ( \u0026lt;div\u0026gt; {this.props.text} \u0026lt;Button\u0026gt;Delete\u0026lt;/Button\u0026gt; \u0026lt;/div\u0026gt; ); } } class MessageList extends React.Component { getChildContext() { return {color: \u0026#34;purple\u0026#34;}; } render() { const children = this.props.messages.map((message) =\u0026gt; \u0026lt;Message text={message.text} /\u0026gt; ); return \u0026lt;div\u0026gt;{children}\u0026lt;/div\u0026gt;; } } MessageList.childContextTypes = { color: PropTypes.string}; By adding childContextTypes and getChildContext to MessageList (the context provider), React passes the information down automatically and any component in the subtree (in this case, Button) can access it by defining contextTypes.\nIf contextTypes is not defined, then context will be an empty object.\nNote:\nReact.PropTypes has moved into a different package since React v15.5. Please use the prop-types library instead to define contextTypes.\nWe provide a codemod script to automate the conversion.\nParent-Child Coupling # This section documents a legacy API. See the new API.\nContext can also let you build an API where parents and children communicate. For example, one library that works this way is React Router V4:\nimport { BrowserRouter as Router, Route, Link } from \u0026#39;react-router-dom\u0026#39;; const BasicExample = () =\u0026gt; ( \u0026lt;Router\u0026gt; \u0026lt;div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;Link to=\u0026#34;/\u0026#34;\u0026gt;Home\u0026lt;/Link\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;Link to=\u0026#34;/about\u0026#34;\u0026gt;About\u0026lt;/Link\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;Link to=\u0026#34;/topics\u0026#34;\u0026gt;Topics\u0026lt;/Link\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;Route exact path=\u0026#34;/\u0026#34; component={Home} /\u0026gt; \u0026lt;Route path=\u0026#34;/about\u0026#34; component={About} /\u0026gt; \u0026lt;Route path=\u0026#34;/topics\u0026#34; component={Topics} /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/Router\u0026gt; ); By passing down some information from the Router component, each Link and Route can communicate back to the containing Router.\nBefore you build components with an API similar to this, consider if there are cleaner alternatives. For example, you can pass entire React components as props if you’d like to.\nReferencing Context in Lifecycle Methods # This section documents a legacy API. See the new API.\nIf contextTypes is defined within a component, the following lifecycle methods will receive an additional parameter, the context object:\nconstructor(props, context) componentWillReceiveProps(nextProps, nextContext) shouldComponentUpdate(nextProps, nextState, nextContext) componentWillUpdate(nextProps, nextState, nextContext) Note:\nAs of React 16, componentDidUpdate no longer receives prevContext.\nReferencing Context in Function Components # This section documents a legacy API. See the new API.\nFunction components are also able to reference context if contextTypes is defined as a property of the function. The following code shows a Button component written as a function component.\nimport PropTypes from \u0026#39;prop-types\u0026#39;; const Button = ({children}, context) =\u0026gt; \u0026lt;button style={{background: context.color}}\u0026gt; {children} \u0026lt;/button\u0026gt;; Button.contextTypes = {color: PropTypes.string}; Updating Context # This section documents a legacy API. See the new API.\nDon’t do it.\nReact has an API to update context, but it is fundamentally broken and you should not use it.\nThe getChildContext function will be called when the state or props changes. In order to update data in the context, trigger a local state update with this.setState. This will trigger a new context and changes will be received by the children.\nimport PropTypes from \u0026#39;prop-types\u0026#39;; class MediaQuery extends React.Component { constructor(props) { super(props); this.state = {type:\u0026#39;desktop\u0026#39;}; } getChildContext() { return {type: this.state.type}; } componentDidMount() { const checkMediaQuery = () =\u0026gt; { const type = window.matchMedia(\u0026#34;(min-width: 1025px)\u0026#34;).matches ? \u0026#39;desktop\u0026#39; : \u0026#39;mobile\u0026#39;; if (type !== this.state.type) { this.setState({type}); } }; window.addEventListener(\u0026#39;resize\u0026#39;, checkMediaQuery); checkMediaQuery(); } render() { return this.props.children; } } MediaQuery.childContextTypes = { type: PropTypes.string }; The problem is, if a context value provided by component changes, descendants that use that value won’t update if an intermediate parent returns false from shouldComponentUpdate. This is totally out of control of the components using context, so there’s basically no way to reliably update the context. This blog post has a good explanation of why this is a problem and how you might get around it.\n"},{"id":366,"href":"/docs/references/meta-frameworks/react/frequently-used/api-reference/react-top-level-api/","title":"React Top Level API","section":"API Reference","content":" 🍕 React Top-Level API # React is the entry point to the React library. If you load React from a \u0026lt;script\u0026gt; tag, these top-level APIs are available on the React global. If you use ES6 with npm, you can write import React from 'react'. If you use ES5 with npm, you can write var React = require('react').\nOverview # Components # React components let you split the UI into independent, reusable pieces, and think about each piece in isolation. React components can be defined by subclassing React.Component or React.PureComponent.\nReact.Component React.PureComponent If you don’t use ES6 classes, you may use the create-react-class module instead. See Using React without ES6 for more information.\nReact components can also be defined as functions which can be wrapped:\nReact.memo Creating React Elements # We recommend using JSX to describe what your UI should look like. Each JSX element is just syntactic sugar for calling React.createElement(). You will not typically invoke the following methods directly if you are using JSX.\ncreateElement() createFactory() See Using React without JSX for more information.\nTransforming Elements # React provides several APIs for manipulating elements:\ncloneElement() isValidElement() React.Children Fragments # React also provides a component for rendering multiple elements without a wrapper.\nReact.Fragment Refs # React.createRef React.forwardRef Suspense # Suspense lets components “wait” for something before rendering. Today, Suspense only supports one use case: loading components dynamically with React.lazy. In the future, it will support other use cases like data fetching.\nReact.lazy React.Suspense Transitions # Transitions are a new concurrent feature introduced in React 18. They allow you to mark updates as transitions, which tells React that they can be interrupted and avoid going back to Suspense fallbacks for already visible content.\nReact.startTransition React.useTransition Hooks # Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class. Hooks have a dedicated docs section and a separate API reference:\nBasic Hooks useState useEffect useContext Additional Hooks useReducer useCallback useMemo useRef useImperativeHandle useLayoutEffect useDebugValue useDeferredValue useTransition useId Library Hooks useSyncExternalStore useInsertionEffect Reference # React.Component # This content is out of date.\nRead the new React documentation for Component.\nReact.Component is the base class for React components when they are defined using ES6 classes:\nclass Greeting extends React.Component { render() { return \u0026lt;h1\u0026gt;Hello, {this.props.name}\u0026lt;/h1\u0026gt;; } } See the React.Component API Reference for a list of methods and properties related to the base React.Component class.\nReact.PureComponent # This content is out of date.\nRead the new React documentation for PureComponent.\nReact.PureComponent is similar to React.Component. The difference between them is that React.Component doesn’t implement shouldComponentUpdate(), but React.PureComponent implements it with a shallow prop and state comparison.\nIf your React component’s render() function renders the same result given the same props and state, you can use React.PureComponent for a performance boost in some cases.\nNote\nReact.PureComponent’s shouldComponentUpdate() only shallowly compares the objects. If these contain complex data structures, it may produce false-negatives for deeper differences. Only extend PureComponent when you expect to have simple props and state, or use forceUpdate() when you know deep data structures have changed. Or, consider using immutable objects to facilitate fast comparisons of nested data.\nFurthermore, React.PureComponent’s shouldComponentUpdate() skips prop updates for the whole component subtree. Make sure all the children components are also “pure”.\nReact.memo # This content is out of date.\nRead the new React documentation for memo.\nconst MyComponent = React.memo(function MyComponent(props) { /* render using props */ }); React.memo is a higher order component.\nIf your component renders the same result given the same props, you can wrap it in a call to React.memo for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.\nReact.memo only checks for prop changes. If your function component wrapped in React.memo has a useState, useReducer or useContext Hook in its implementation, it will still rerender when state or context change.\nBy default it will only shallowly compare complex objects in the props object. If you want control over the comparison, you can also provide a custom comparison function as the second argument.\nfunction MyComponent(props) { /* render using props */ } function areEqual(prevProps, nextProps) { /* return true if passing nextProps to render would return the same result as passing prevProps to render, otherwise return false */ } export default React.memo(MyComponent, areEqual); This method only exists as a performance optimization. Do not rely on it to “prevent” a render, as this can lead to bugs.\nNote\nUnlike the shouldComponentUpdate() method on class components, the areEqual function returns true if the props are equal and false if the props are not equal. This is the inverse from shouldComponentUpdate.\ncreateElement() # This content is out of date.\nRead the new React documentation for createElement.\nReact.createElement( type, [props], [...children] ) Create and return a new React element of the given type. The type argument can be either a tag name string (such as 'div' or 'span'), a React component type (a class or a function), or a React fragment type.\nCode written with JSX will be converted to use React.createElement(). You will not typically invoke React.createElement() directly if you are using JSX. See React Without JSX to learn more.\ncloneElement() # This content is out of date.\nRead the new React documentation for cloneElement.\nReact.cloneElement( element, [config], [...children] ) Clone and return a new React element using element as the starting point. config should contain all new props, key, or ref. The resulting element will have the original element’s props with the new props merged in shallowly. New children will replace existing children. key and ref from the original element will be preserved if no key and ref present in the config.\nReact.cloneElement() is almost equivalent to:\n\u0026lt;element.type {...element.props} {...props}\u0026gt;{children}\u0026lt;/element.type\u0026gt; However, it also preserves refs. This means that if you get a child with a ref on it, you won’t accidentally steal it from your ancestor. You will get the same ref attached to your new element. The new ref or key will replace old ones if present.\nThis API was introduced as a replacement of the deprecated React.addons.cloneWithProps().\ncreateFactory() # This content is out of date.\nRead the new React documentation for createFactory.\nReact.createFactory(type) Return a function that produces React elements of a given type. Like React.createElement(), the type argument can be either a tag name string (such as 'div' or 'span'), a React component type (a class or a function), or a React fragment type.\nThis helper is considered legacy, and we encourage you to either use JSX or use React.createElement() directly instead.\nYou will not typically invoke React.createFactory() directly if you are using JSX. See React Without JSX to learn more.\nisValidElement() # This content is out of date.\nRead the new React documentation for isValidElement.\nReact.isValidElement(object) Verifies the object is a React element. Returns true or false.\nReact.Children # This content is out of date.\nRead the new React documentation for Children.\nReact.Children provides utilities for dealing with the this.props.children opaque data structure.\nReact.Children.map\nReact.Children.map(children, function[(thisArg)]) Invokes a function on every immediate child contained within children with this set to thisArg. If children is an array it will be traversed and the function will be called for each child in the array. If children is null or undefined, this method will return null or undefined rather than an array.\nNote\nIf children is a Fragment it will be treated as a single child and not traversed.\nReact.Children.forEach\nReact.Children.forEach(children, function[(thisArg)]) Like React.Children.map() but does not return an array.\nReact.Children.count\nReact.Children.count(children) Returns the total number of components in children, equal to the number of times that a callback passed to map or forEach would be invoked.\nReact.Children.only\nReact.Children.only(children) Verifies that children has only one child (a React element) and returns it. Otherwise this method throws an error.\nNote:\nReact.Children.only() does not accept the return value of React.Children.map() because it is an array rather than a React element.\nReact.Children.toArray\nReact.Children.toArray(children) Returns the children opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice this.props.children before passing it down.\nNote:\nReact.Children.toArray() changes keys to preserve the semantics of nested arrays when flattening lists of children. That is, toArray prefixes each key in the returned array so that each element’s key is scoped to the input array containing it.\nReact.Fragment # This content is out of date.\nRead the new React documentation for Fragment.\nThe React.Fragment component lets you return multiple elements in a render() method without creating an additional DOM element:\nrender() { return ( \u0026lt;React.Fragment\u0026gt; Some text. \u0026lt;h2\u0026gt;A heading\u0026lt;/h2\u0026gt; \u0026lt;/React.Fragment\u0026gt; ); } You can also use it with the shorthand \u0026lt;\u0026gt;\u0026lt;/\u0026gt; syntax. For more information, see React v16.2.0: Improved Support for Fragments.\nReact.createRef # This content is out of date.\nRead the new React documentation for createRef.\nReact.createRef creates a ref that can be attached to React elements via the ref attribute.\nclass MyComponent extends React.Component { constructor(props) { super(props); this.inputRef = React.createRef(); } render() { return \u0026lt;input type=\u0026#34;text\u0026#34; ref={this.inputRef} /\u0026gt;; } componentDidMount() { this.inputRef.current.focus(); } } React.forwardRef # This content is out of date.\nRead the new React documentation for forwardRef.\nReact.forwardRef creates a React component that forwards the ref attribute it receives to another component below in the tree. This technique is not very common but is particularly useful in two scenarios:\nForwarding refs to DOM components Forwarding refs in higher-order-components React.forwardRef accepts a rendering function as an argument. React will call this function with props and ref as two arguments. This function should return a React node.\nconst FancyButton = React.forwardRef((props, ref) =\u0026gt; ( \u0026lt;button ref={ref} className=\u0026#34;FancyButton\u0026#34;\u0026gt; {props.children} \u0026lt;/button\u0026gt; )); // You can now get a ref directly to the DOM button: const ref = React.createRef(); \u0026lt;FancyButton ref={ref}\u0026gt;Click me!\u0026lt;/FancyButton\u0026gt;; In the above example, React passes a ref given to \u0026lt;FancyButton ref={ref}\u0026gt; element as a second argument to the rendering function inside the React.forwardRef call. This rendering function passes the ref to the \u0026lt;button ref={ref}\u0026gt; element.\nAs a result, after React attaches the ref, ref.current will point directly to the \u0026lt;button\u0026gt; DOM element instance.\nFor more information, see forwarding refs.\nReact.lazy # This content is out of date.\nRead the new React documentation for lazy.\nReact.lazy() lets you define a component that is loaded dynamically. This helps reduce the bundle size to delay loading components that aren’t used during the initial render.\nYou can learn how to use it from our code splitting documentation. You might also want to check out this article explaining how to use it in more detail.\n// This component is loaded dynamically const SomeComponent = React.lazy(() =\u0026gt; import(\u0026#39;./SomeComponent\u0026#39;)); Note that rendering lazy components requires that there’s a \u0026lt;React.Suspense\u0026gt; component higher in the rendering tree. This is how you specify a loading indicator.\nReact.Suspense # This content is out of date.\nRead the new React documentation for Suspense.\nReact.Suspense lets you specify the loading indicator in case some components in the tree below it are not yet ready to render. In the future we plan to let Suspense handle more scenarios such as data fetching. You can read about this in our roadmap.\nToday, lazy loading components is the only use case supported by \u0026lt;React.Suspense\u0026gt;:\n// This component is loaded dynamically const OtherComponent = React.lazy(() =\u0026gt; import(\u0026#39;./OtherComponent\u0026#39;)); function MyComponent() { return ( // Displays \u0026lt;Spinner\u0026gt; until OtherComponent loads \u0026lt;React.Suspense fallback={\u0026lt;Spinner /\u0026gt;}\u0026gt; \u0026lt;div\u0026gt; \u0026lt;OtherComponent /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/React.Suspense\u0026gt; ); } It is documented in our code splitting guide. Note that lazy components can be deep inside the Suspense tree — it doesn’t have to wrap every one of them. The best practice is to place \u0026lt;Suspense\u0026gt; where you want to see a loading indicator, but to use lazy() wherever you want to do code splitting.\nNote\nFor content that is already shown to the user, switching back to a loading indicator can be disorienting. It is sometimes better to show the “old” UI while the new UI is being prepared. To do this, you can use the new transition APIs startTransition and useTransition to mark updates as transitions and avoid unexpected fallbacks.\nReact.Suspense in Server Side Rendering\nDuring server side rendering Suspense Boundaries allow you to flush your application in smaller chunks by suspending. When a component suspends we schedule a low priority task to render the closest Suspense boundary’s fallback. If the component unsuspends before we flush the fallback then we send down the actual content and throw away the fallback.\nReact.Suspense during hydration\nSuspense boundaries depend on their parent boundaries being hydrated before they can hydrate, but they can hydrate independently from sibling boundaries. Events on a boundary before it is hydrated will cause the boundary to hydrate at a higher priority than neighboring boundaries. Read more\nReact.startTransition # This content is out of date.\nRead the new React documentation for startTransition.\nReact.startTransition(callback) React.startTransition lets you mark updates inside the provided callback as transitions. This method is designed to be used when React.useTransition is not available.\nNote:\nUpdates in a transition yield to more urgent updates such as clicks.\nUpdates in a transition will not show a fallback for re-suspended content, allowing the user to continue interacting while rendering the update.\nReact.startTransition does not provide an isPending flag. To track the pending status of a transition see React.useTransition.\n"},{"id":367,"href":"/docs/references/meta-frameworks/react/frequently-used/api-reference/react.component/","title":"React.component","section":"API Reference","content":" 🍕 React.Component # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nThese new documentation pages teach modern React:\nReact.Component This page contains a detailed API reference for the React component class definition. It assumes you’re familiar with fundamental React concepts, such as Components and Props, as well as State and Lifecycle. If you’re not, read them first.\nOverview # React lets you define components as classes or functions. Components defined as classes currently provide more features which are described in detail on this page. To define a React component class, you need to extend React.Component:\nclass Welcome extends React.Component { render() { return \u0026lt;h1\u0026gt;Hello, {this.props.name}\u0026lt;/h1\u0026gt;; } } The only method you must define in a React.Component subclass is called render(). All the other methods described on this page are optional.\nWe strongly recommend against creating your own base component classes. In React components, code reuse is primarily achieved through composition rather than inheritance.\nNote:\nReact doesn’t force you to use the ES6 class syntax. If you prefer to avoid it, you may use the create-react-class module or a similar custom abstraction instead. Take a look at Using React without ES6 to learn more.\nThe Component Lifecycle # Each component has several “lifecycle methods” that you can override to run code at particular times in the process. You can use this lifecycle diagram as a cheat sheet. In the list below, commonly used lifecycle methods are marked as bold. The rest of them exist for relatively rare use cases.\nMounting\nThese methods are called in the following order when an instance of a component is being created and inserted into the DOM:\nconstructor() static getDerivedStateFromProps() render() componentDidMount() Note:\nThis method is considered legacy and you should avoid it in new code:\nUNSAFE_componentWillMount() Updating\nAn update can be caused by changes to props or state. These methods are called in the following order when a component is being re-rendered:\nstatic getDerivedStateFromProps() shouldComponentUpdate() render() getSnapshotBeforeUpdate() componentDidUpdate() Note:\nThese methods are considered legacy and you should avoid them in new code:\nUNSAFE_componentWillUpdate() UNSAFE_componentWillReceiveProps() Unmounting\nThis method is called when a component is being removed from the DOM:\ncomponentWillUnmount() Error Handling\nThese methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.\nstatic getDerivedStateFromError() componentDidCatch() Other APIs # Each component also provides some other APIs:\nsetState() forceUpdate() Class Properties # defaultProps displayName Instance Properties # props state Reference # Commonly Used Lifecycle Methods # The methods in this section cover the vast majority of use cases you’ll encounter creating React components. For a visual reference, check out this lifecycle diagram.\nrender() # The render() method is the only required method in a class component.\nWhen called, it should examine this.props and this.state and return one of the following types:\nReact elements. Typically created via JSX. For example, \u0026lt;div /\u0026gt; and \u0026lt;MyComponent /\u0026gt; are React elements that instruct React to render a DOM node, or another user-defined component, respectively. Arrays and fragments. Let you return multiple elements from render. See the documentation on fragments for more details. Portals. Let you render children into a different DOM subtree. See the documentation on portals for more details. String and numbers. These are rendered as text nodes in the DOM. Booleans or null or undefined. Render nothing. (Mostly exists to support return test \u0026amp;\u0026amp; \u0026lt;Child /\u0026gt; pattern, where test is boolean). The render() function should be pure, meaning that it does not modify component state, it returns the same result each time it’s invoked, and it does not directly interact with the browser.\nIf you need to interact with the browser, perform your work in componentDidMount() or the other lifecycle methods instead. Keeping render() pure makes components easier to think about.\nNote\nrender() will not be invoked if shouldComponentUpdate() returns false.\nconstructor() # If you don’t initialize state and you don’t bind methods, you don’t need to implement a constructor for your React component.\nThe constructor for a React component is called before it is mounted. When implementing the constructor for a React.Component subclass, you should call super(props) before any other statement. Otherwise, this.props will be undefined in the constructor, which can lead to bugs.\nTypically, in React constructors are only used for two purposes:\nInitializing local state by assigning an object to this.state. Binding event handler methods to an instance. You should not call setState() in the constructor(). Instead, if your component needs to use local state, assign the initial state to this.state directly in the constructor:\nconstructor(props) { super(props); // Don\u0026#39;t call this.setState() here! this.state = { counter: 0 }; this.handleClick = this.handleClick.bind(this); } Constructor is the only place where you should assign this.state directly. In all other methods, you need to use this.setState() instead.\nAvoid introducing any side-effects or subscriptions in the constructor. For those use cases, use componentDidMount() instead.\nNote\nAvoid copying props into state! This is a common mistake:\nconstructor(props) { super(props); // Don\u0026#39;t do this! this.state = { color: props.color }; } The problem is that it’s both unnecessary (you can use this.props.color directly instead), and creates bugs (updates to the color prop won’t be reflected in the state).\nOnly use this pattern if you intentionally want to ignore prop updates. In that case, it makes sense to rename the prop to be called initialColor or defaultColor. You can then force a component to “reset” its internal state by changing its key when necessary.\nRead our blog post on avoiding derived state to learn about what to do if you think you need some state to depend on the props.\ncomponentDidMount() # componentDidMount() is invoked immediately after a component is mounted (inserted into the tree). Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\nThis method is a good place to set up any subscriptions. If you do that, don’t forget to unsubscribe in componentWillUnmount().\nYou may call setState() immediately in componentDidMount(). It will trigger an extra rendering, but it will happen before the browser updates the screen. This guarantees that even though the render() will be called twice in this case, the user won’t see the intermediate state. Use this pattern with caution because it often causes performance issues. In most cases, you should be able to assign the initial state in the constructor() instead. It can, however, be necessary for cases like modals and tooltips when you need to measure a DOM node before rendering something that depends on its size or position.\ncomponentDidUpdate() # componentDidUpdate(prevProps, prevState, snapshot) componentDidUpdate() is invoked immediately after updating occurs. This method is not called for the initial render.\nUse this as an opportunity to operate on the DOM when the component has been updated. This is also a good place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed).\ncomponentDidUpdate(prevProps) { // Typical usage (don\u0026#39;t forget to compare props): if (this.props.userID !== prevProps.userID) { this.fetchData(this.props.userID); } } You may call setState() immediately in componentDidUpdate() but note that it must be wrapped in a condition like in the example above, or you’ll cause an infinite loop. It would also cause an extra re-rendering which, while not visible to the user, can affect the component performance. If you’re trying to “mirror” some state to a prop coming from above, consider using the prop directly instead. Read more about why copying props into state causes bugs.\nIf your component implements the getSnapshotBeforeUpdate() lifecycle (which is rare), the value it returns will be passed as a third “snapshot” parameter to componentDidUpdate(). Otherwise this parameter will be undefined.\nNote\ncomponentDidUpdate() will not be invoked if shouldComponentUpdate() returns false.\ncomponentWillUnmount() # componentWillUnmount() is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in componentDidMount().\nYou should not call setState() in componentWillUnmount() because the component will never be re-rendered. Once a component instance is unmounted, it will never be mounted again.\nRarely Used Lifecycle Methods # The methods in this section correspond to uncommon use cases. They’re handy once in a while, but most of your components probably don’t need any of them. You can see most of the methods below on this lifecycle diagram if you click the “Show less common lifecycles” checkbox at the top of it.\nshouldComponentUpdate() # shouldComponentUpdate(nextProps, nextState) Use shouldComponentUpdate() to let React know if a component’s output is not affected by the current change in state or props. The default behavior is to re-render on every state change, and in the vast majority of cases you should rely on the default behavior.\nshouldComponentUpdate() is invoked before rendering when new props or state are being received. Defaults to true. This method is not called for the initial render or when forceUpdate() is used.\nThis method only exists as a performance optimization. Do not rely on it to “prevent” a rendering, as this can lead to bugs. Consider using the built-in PureComponent instead of writing shouldComponentUpdate() by hand. PureComponent performs a shallow comparison of props and state, and reduces the chance that you’ll skip a necessary update.\nIf you are confident you want to write it by hand, you may compare this.props with nextProps and this.state with nextState and return false to tell React the update can be skipped. Note that returning false does not prevent child components from re-rendering when their state changes.\nWe do not recommend doing deep equality checks or using JSON.stringify() in shouldComponentUpdate(). It is very inefficient and will harm performance.\nCurrently, if shouldComponentUpdate() returns false, then UNSAFE_componentWillUpdate(), render(), and componentDidUpdate() will not be invoked. In the future React may treat shouldComponentUpdate() as a hint rather than a strict directive, and returning false may still result in a re-rendering of the component.\nstatic getDerivedStateFromProps() # static getDerivedStateFromProps(props, state) getDerivedStateFromProps is invoked right before calling the render method, both on the initial mount and on subsequent updates. It should return an object to update the state, or null to update nothing.\nThis method exists for rare use cases where the state depends on changes in props over time. For example, it might be handy for implementing a \u0026lt;Transition\u0026gt; component that compares its previous and next children to decide which of them to animate in and out.\nDeriving state leads to verbose code and makes your components difficult to think about. Make sure you’re familiar with simpler alternatives:\nIf you need to perform a side effect (for example, data fetching or an animation) in response to a change in props, use componentDidUpdate lifecycle instead. If you want to re-compute some data only when a prop changes, use a memoization helper instead. If you want to “reset” some state when a prop changes, consider either making a component fully controlled or fully uncontrolled with a key instead. This method doesn’t have access to the component instance. If you’d like, you can reuse some code between getDerivedStateFromProps() and the other class methods by extracting pure functions of the component props and state outside the class definition.\nNote that this method is fired on every render, regardless of the cause. This is in contrast to UNSAFE_componentWillReceiveProps, which only fires when the parent causes a re-render and not as a result of a local setState.\ngetSnapshotBeforeUpdate() # getSnapshotBeforeUpdate(prevProps, prevState) getSnapshotBeforeUpdate() is invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture some information from the DOM (e.g. scroll position) before it is potentially changed. Any value returned by this lifecycle method will be passed as a parameter to componentDidUpdate().\nThis use case is not common, but it may occur in UIs like a chat thread that need to handle scroll position in a special way.\nA snapshot value (or null) should be returned.\nFor example:\nclass ScrollingList extends React.Component { constructor(props) { super(props); this.listRef = React.createRef(); } getSnapshotBeforeUpdate(prevProps, prevState) { // Are we adding new items to the list? // Capture the scroll position so we can adjust scroll later. if (prevProps.list.length \u0026lt; this.props.list.length) { const list = this.listRef.current; return list.scrollHeight - list.scrollTop; } return null; } componentDidUpdate(prevProps, prevState, snapshot) { // If we have a snapshot value, we\u0026#39;ve just added new items. // Adjust scroll so these new items don\u0026#39;t push the old ones out of view. // (snapshot here is the value returned from getSnapshotBeforeUpdate) if (snapshot !== null) { const list = this.listRef.current; list.scrollTop = list.scrollHeight - snapshot; } } render() { return ( \u0026lt;div ref={this.listRef}\u0026gt;{/* ...contents... */}\u0026lt;/div\u0026gt; ); } } In the above examples, it is important to read the scrollHeight property in getSnapshotBeforeUpdate because there may be delays between “render” phase lifecycles (like render) and “commit” phase lifecycles (like getSnapshotBeforeUpdate and componentDidUpdate).\nError boundaries # Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.\nA class component becomes an error boundary if it defines either (or both) of the lifecycle methods static getDerivedStateFromError() or componentDidCatch(). Updating state from these lifecycles lets you capture an unhandled JavaScript error in the below tree and display a fallback UI.\nOnly use error boundaries for recovering from unexpected exceptions; don’t try to use them for control flow.\nFor more details, see Error Handling in React 16.\nNote\nError boundaries only catch errors in the components below them in the tree. An error boundary can’t catch an error within itself.\nstatic getDerivedStateFromError() # static getDerivedStateFromError(error) This lifecycle is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.\nclass ErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false }; } static getDerivedStateFromError(error) { // Update state so the next render will show the fallback UI. return { hasError: true }; } render() { if (this.state.hasError) { // You can render any custom fallback UI return \u0026lt;h1\u0026gt;Something went wrong.\u0026lt;/h1\u0026gt;; } return this.props.children; } } Note\ngetDerivedStateFromError() is called during the “render” phase, so side-effects are not permitted. For those use cases, use componentDidCatch() instead.\ncomponentDidCatch() # componentDidCatch(error, info) This lifecycle is invoked after an error has been thrown by a descendant component. It receives two parameters:\nerror - The error that was thrown. info - An object with a componentStack key containing information about which component threw the error. componentDidCatch() is called during the “commit” phase, so side-effects are permitted. It should be used for things like logging errors:\nclass ErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false }; } static getDerivedStateFromError(error) { // Update state so the next render will show the fallback UI. return { hasError: true }; } componentDidCatch(error, info) { // Example \u0026#34;componentStack\u0026#34;: // in ComponentThatThrows (created by App) // in ErrorBoundary (created by App) // in div (created by App) // in App logComponentStackToMyService(info.componentStack); } render() { if (this.state.hasError) { // You can render any custom fallback UI return \u0026lt;h1\u0026gt;Something went wrong.\u0026lt;/h1\u0026gt;; } return this.props.children; } } Production and development builds of React slightly differ in the way componentDidCatch() handles errors.\nOn development, the errors will bubble up to window, this means that any window.onerror or window.addEventListener('error', callback) will intercept the errors that have been caught by componentDidCatch().\nOn production, instead, the errors will not bubble up, which means any ancestor error handler will only receive errors not explicitly caught by componentDidCatch().\nNote\nIn the event of an error, you can render a fallback UI with componentDidCatch() by calling setState, but this will be deprecated in a future release. Use static getDerivedStateFromError() to handle fallback rendering instead.\nLegacy Lifecycle Methods # The lifecycle methods below are marked as “legacy”. They still work, but we don’t recommend using them in the new code. You can learn more about migrating away from legacy lifecycle methods in this blog post.\nUNSAFE_componentWillMount() # UNSAFE_componentWillMount() Note\nThis lifecycle was previously named componentWillMount. That name will continue to work until version 17. Use the rename-unsafe-lifecycles codemod to automatically update your components.\nUNSAFE_componentWillMount() is invoked just before mounting occurs. It is called before render(), therefore calling setState() synchronously in this method will not trigger an extra rendering. Generally, we recommend using the constructor() instead for initializing state.\nAvoid introducing any side-effects or subscriptions in this method. For those use cases, use componentDidMount() instead.\nThis is the only lifecycle method called on server rendering.\nUNSAFE_componentWillReceiveProps() # UNSAFE_componentWillReceiveProps(nextProps) Note\nThis lifecycle was previously named componentWillReceiveProps. That name will continue to work until version 17. Use the rename-unsafe-lifecycles codemod to automatically update your components.\nNote:\nUsing this lifecycle method often leads to bugs and inconsistencies\nIf you need to perform a side effect (for example, data fetching or an animation) in response to a change in props, use componentDidUpdate lifecycle instead. If you used componentWillReceiveProps for re-computing some data only when a prop changes, use a memoization helper instead. If you used componentWillReceiveProps to “reset” some state when a prop changes, consider either making a component fully controlled or fully uncontrolled with a key instead. For other use cases, follow the recommendations in this blog post about derived state.\nUNSAFE_componentWillReceiveProps() is invoked before a mounted component receives new props. If you need to update the state in response to prop changes (for example, to reset it), you may compare this.props and nextProps and perform state transitions using this.setState() in this method.\nNote that if a parent component causes your component to re-render, this method will be called even if props have not changed. Make sure to compare the current and next values if you only want to handle changes.\nReact doesn’t call UNSAFE_componentWillReceiveProps() with initial props during mounting. It only calls this method if some of component’s props may update. Calling this.setState() generally doesn’t trigger UNSAFE_componentWillReceiveProps().\nUNSAFE_componentWillUpdate() # UNSAFE_componentWillUpdate(nextProps, nextState) Note\nThis lifecycle was previously named componentWillUpdate. That name will continue to work until version 17. Use the rename-unsafe-lifecycles codemod to automatically update your components.\nUNSAFE_componentWillUpdate() is invoked just before rendering when new props or state are being received. Use this as an opportunity to perform preparation before an update occurs. This method is not called for the initial render.\nNote that you cannot call this.setState() here; nor should you do anything else (e.g. dispatch a Redux action) that would trigger an update to a React component before UNSAFE_componentWillUpdate() returns.\nTypically, this method can be replaced by componentDidUpdate(). If you were reading from the DOM in this method (e.g. to save a scroll position), you can move that logic to getSnapshotBeforeUpdate().\nNote\nUNSAFE_componentWillUpdate() will not be invoked if shouldComponentUpdate() returns false.\nOther APIs # Unlike the lifecycle methods above (which React calls for you), the methods below are the methods you can call from your components.\nThere are just two of them: setState() and forceUpdate().\nsetState() # setState(updater[, callback]) setState() enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses.\nThink of setState() as a request rather than an immediate command to update the component. For better perceived performance, React may delay it, and then update several components in a single pass. In the rare case that you need to force the DOM update to be applied synchronously, you may wrap it in flushSync, but this may hurt performance.\nsetState() does not always immediately update the component. It may batch or defer the update until later. This makes reading this.state right after calling setState() a potential pitfall. Instead, use componentDidUpdate or a setState callback (setState(updater, callback)), either of which are guaranteed to fire after the update has been applied. If you need to set the state based on the previous state, read about the updater argument below.\nsetState() will always lead to a re-render unless shouldComponentUpdate() returns false. If mutable objects are being used and conditional rendering logic cannot be implemented in shouldComponentUpdate(), calling setState() only when the new state differs from the previous state will avoid unnecessary re-renders.\nThe first argument is an updater function with the signature:\n(state, props) =\u0026gt; stateChange state is a reference to the component state at the time the change is being applied. It should not be directly mutated. Instead, changes should be represented by building a new object based on the input from state and props. For instance, suppose we wanted to increment a value in state by props.step:\nthis.setState((state, props) =\u0026gt; { return {counter: state.counter + props.step}; }); Both state and props received by the updater function are guaranteed to be up-to-date. The output of the updater is shallowly merged with state.\nThe second parameter to setState() is an optional callback function that will be executed once setState is completed and the component is re-rendered. Generally we recommend using componentDidUpdate() for such logic instead.\nYou may optionally pass an object as the first argument to setState() instead of a function:\nsetState(stateChange[, callback]) This performs a shallow merge of stateChange into the new state, e.g., to adjust a shopping cart item quantity:\nthis.setState({quantity: 2}) This form of setState() is also asynchronous, and multiple calls during the same cycle may be batched together. For example, if you attempt to increment an item quantity more than once in the same cycle, that will result in the equivalent of:\nObject.assign( previousState, {quantity: state.quantity + 1}, {quantity: state.quantity + 1}, ... ) Subsequent calls will override values from previous calls in the same cycle, so the quantity will only be incremented once. If the next state depends on the current state, we recommend using the updater function form, instead:\nthis.setState((state) =\u0026gt; { return {quantity: state.quantity + 1}; }); For more detail, see:\nState and Lifecycle guide In depth: When and why are setState() calls batched? In depth: Why isn’t this.state updated immediately? forceUpdate() # component.forceUpdate(callback) By default, when your component’s state or props change, your component will re-render. If your render() method depends on some other data, you can tell React that the component needs re-rendering by calling forceUpdate().\nCalling forceUpdate() will cause render() to be called on the component, skipping shouldComponentUpdate(). This will trigger the normal lifecycle methods for child components, including the shouldComponentUpdate() method of each child. React will still only update the DOM if the markup changes.\nNormally you should try to avoid all uses of forceUpdate() and only read from this.props and this.state in render().\nClass Properties # defaultProps # defaultProps can be defined as a property on the component class itself, to set the default props for the class. This is used for undefined props, but not for null props. For example:\nclass CustomButton extends React.Component { // ... } CustomButton.defaultProps = { color: \u0026#39;blue\u0026#39; }; If props.color is not provided, it will be set by default to 'blue':\nrender() { return \u0026lt;CustomButton /\u0026gt; ; // props.color will be set to blue } If props.color is set to null, it will remain null:\nrender() { return \u0026lt;CustomButton color={null} /\u0026gt; ; // props.color will remain null } displayName # The displayName string is used in debugging messages. Usually, you don’t need to set it explicitly because it’s inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component, see Wrap the Display Name for Easy Debugging for details.\nInstance Properties # props # this.props contains the props that were defined by the caller of this component. See Components and Props for an introduction to props.\nIn particular, this.props.children is a special prop, typically defined by the child tags in the JSX expression rather than in the tag itself.\nstate # The state contains data specific to this component that may change over time. The state is user-defined, and it should be a plain JavaScript object.\nIf some value isn’t used for rendering or data flow (for example, a timer ID), you don’t have to put it in the state. Such values can be defined as fields on the component instance.\nSee State and Lifecycle for more information about the state.\nNever mutate this.state directly, as calling setState() afterwards may replace the mutation you made. Treat this.state as if it were immutable.\n"},{"id":368,"href":"/docs/references/meta-frameworks/react/frequently-used/api-reference/reactdom/","title":"Reactdom","section":"API Reference","content":" ⭐ ReactDOM # The react-dom package provides DOM-specific methods that can be used at the top level of your app and as an escape hatch to get outside the React model if you need to.\nimport * as ReactDOM from \u0026#39;react-dom\u0026#39;; If you use ES5 with npm, you can write:\nvar ReactDOM = require(\u0026#39;react-dom\u0026#39;); The react-dom package also provides modules specific to client and server apps:\nreact-dom/client react-dom/server Overview # The react-dom package exports these methods:\ncreatePortal() flushSync() These react-dom methods are also exported, but are considered legacy:\nrender() hydrate() findDOMNode() unmountComponentAtNode() Note:\nBoth render and hydrate have been replaced with new client methods in React 18. These methods will warn that your app will behave as if it’s running React 17 (learn more here).\nBrowser Support # React supports all modern browsers, although some polyfills are required for older versions.\nNote\nWe do not support older browsers that don’t support ES5 methods or microtasks such as Internet Explorer. You may find that your apps do work in older browsers if polyfills such as es5-shim and es5-sham are included in the page, but you’re on your own if you choose to take this path.\nReference # createPortal() # This content is out of date.\nRead the new React documentation for createPortal.\ncreatePortal(child, container) Creates a portal. Portals provide a way to render children into a DOM node that exists outside the hierarchy of the DOM component.\nflushSync() # This content is out of date.\nRead the new React documentation for flushSync.\nForce React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.\n// Force this state update to be synchronous. flushSync(() =\u0026gt; { setCount(count + 1); }); // By this point, DOM is updated. Note:\nflushSync can significantly hurt performance. Use sparingly.\nflushSync may force pending Suspense boundaries to show their fallback state.\nflushSync may also run pending effects and synchronously apply any updates they contain before returning.\nflushSync may also flush updates outside the callback when necessary to flush the updates inside the callback. For example, if there are pending updates from a click, React may flush those before flushing the updates inside the callback.\nLegacy Reference # render() # This content is out of date.\nRead the new React documentation for render.\nrender(element, container[, callback]) Note:\nrender has been replaced with createRoot in React 18. See createRoot for more info.\nRender a React element into the DOM in the supplied container and return a reference to the component (or returns null for stateless components).\nIf the React element was previously rendered into container, this will perform an update on it and only mutate the DOM as necessary to reflect the latest React element.\nIf the optional callback is provided, it will be executed after the component is rendered or updated.\nNote:\nrender() controls the contents of the container node you pass in. Any existing DOM elements inside are replaced when first called. Later calls use React’s DOM diffing algorithm for efficient updates.\nrender() does not modify the container node (only modifies the children of the container). It may be possible to insert a component to an existing DOM node without overwriting the existing children.\nrender() currently returns a reference to the root ReactComponent instance. However, using this return value is legacy and should be avoided because future versions of React may render components asynchronously in some cases. If you need a reference to the root ReactComponent instance, the preferred solution is to attach a callback ref to the root element.\nUsing render() to hydrate a server-rendered container is deprecated. Use hydrateRoot() instead.\nhydrate() # This content is out of date.\nRead the new React documentation for hydrate.\nhydrate(element, container[, callback]) Note:\nhydrate has been replaced with hydrateRoot in React 18. See hydrateRoot for more info.\nSame as render(), but is used to hydrate a container whose HTML contents were rendered by ReactDOMServer. React will attempt to attach event listeners to the existing markup.\nReact expects that the rendered content is identical between the server and the client. It can patch up differences in text content, but you should treat mismatches as bugs and fix them. In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.\nIf a single element’s attribute or text content is unavoidably different between the server and the client (for example, a timestamp), you may silence the warning by adding suppressHydrationWarning={true} to the element. It only works one level deep, and is intended to be an escape hatch. Don’t overuse it. Unless it’s text content, React still won’t attempt to patch it up, so it may remain inconsistent until future updates.\nIf you intentionally need to render something different on the server and the client, you can do a two-pass rendering. Components that render something different on the client can read a state variable like this.state.isClient, which you can set to true in componentDidMount(). This way the initial render pass will render the same content as the server, avoiding mismatches, but an additional pass will happen synchronously right after hydration. Note that this approach will make your components slower because they have to render twice, so use it with caution.\nRemember to be mindful of user experience on slow connections. The JavaScript code may load significantly later than the initial HTML render, so if you render something different in the client-only pass, the transition can be jarring. However, if executed well, it may be beneficial to render a “shell” of the application on the server, and only show some of the extra widgets on the client. To learn how to do this without getting the markup mismatch issues, refer to the explanation in the previous paragraph.\nunmountComponentAtNode() # unmountComponentAtNode(container) Note:\nunmountComponentAtNode has been replaced with root.unmount() in React 18. See createRoot for more info.\nRemove a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount.\nfindDOMNode() # This content is out of date.\nRead the new React documentation for findDOMNode.\nNote:\nfindDOMNode is an escape hatch used to access the underlying DOM node. In most cases, use of this escape hatch is discouraged because it pierces the component abstraction. It has been deprecated in StrictMode.\nIf this component has been mounted into the DOM, this returns the corresponding native browser DOM element. This method is useful for reading values out of the DOM, such as form field values and performing DOM measurements. In most cases, you can attach a ref to the DOM node and avoid using findDOMNode at all.\nWhen a component renders to null or false, findDOMNode returns null. When a component renders to a string, findDOMNode returns a text DOM node containing that value. As of React 16, a component may return a fragment with multiple children, in which case findDOMNode will return the DOM node corresponding to the first non-empty child.\nNote:\nfindDOMNode only works on mounted components (that is, components that have been placed in the DOM). If you try to call this on a component that has not been mounted yet (like calling findDOMNode() in render() on a component that has yet to be created) an exception will be thrown.\nfindDOMNode cannot be used on function components.\n"},{"id":369,"href":"/docs/references/meta-frameworks/react/frequently-used/api-reference/reactdomclient/","title":"Reactdomclient","section":"API Reference","content":" ReactDOMClient # The react-dom/client package provides client-specific methods used for initializing an app on the client. Most of your components should not need to use this module.\nimport * as ReactDOM from \u0026#39;react-dom/client\u0026#39;; If you use ES5 with npm, you can write:\nvar ReactDOM = require(\u0026#39;react-dom/client\u0026#39;); Overview # The following methods can be used in client environments:\ncreateRoot() hydrateRoot() Browser Support # React supports all modern browsers, although some polyfills are required for older versions.\nNote\nWe do not support older browsers that don’t support ES5 methods or microtasks such as Internet Explorer. You may find that your apps do work in older browsers if polyfills such as es5-shim and es5-sham are included in the page, but you’re on your own if you choose to take this path.\nReference # createRoot() # This content is out of date.\nRead the new React documentation for createRoot.\ncreateRoot(container[, options]); Create a React root for the supplied container and return the root. The root can be used to render a React element into the DOM with render:\nconst root = createRoot(container); root.render(element); createRoot accepts two options:\nonRecoverableError: optional callback called when React automatically recovers from errors. identifierPrefix: optional prefix React uses for ids generated by React.useId. Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix used on the server. The root can also be unmounted with unmount:\nNote:\ncreateRoot() controls the contents of the container node you pass in. Any existing DOM elements inside are replaced when render is called. Later calls use React’s DOM diffing algorithm for efficient updates.\ncreateRoot() does not modify the container node (only modifies the children of the container). It may be possible to insert a component to an existing DOM node without overwriting the existing children.\nUsing createRoot() to hydrate a server-rendered container is not supported. Use hydrateRoot() instead.\nhydrateRoot() # This content is out of date.\nRead the new React documentation for hydrateRoot.\nhydrateRoot(container, element[, options]) Same as createRoot(), but is used to hydrate a container whose HTML contents were rendered by ReactDOMServer. React will attempt to attach event listeners to the existing markup.\nhydrateRoot accepts two options:\nonRecoverableError: optional callback called when React automatically recovers from errors. identifierPrefix: optional prefix React uses for ids generated by React.useId. Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix used on the server. Note\nReact expects that the rendered content is identical between the server and the client. It can patch up differences in text content, but you should treat mismatches as bugs and fix them. In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.\n"},{"id":370,"href":"/docs/references/meta-frameworks/react/frequently-used/api-reference/reactdomserver/","title":"Reactdomserver","section":"API Reference","content":" ReactDOMServer # The ReactDOMServer object enables you to render components to static markup. Typically, it’s used on a Node server:\n// ES modules import * as ReactDOMServer from \u0026#39;react-dom/server\u0026#39;; // CommonJS var ReactDOMServer = require(\u0026#39;react-dom/server\u0026#39;); Overview # These methods are only available in the environments with Node.js Streams:\nrenderToPipeableStream() renderToNodeStream() (Deprecated) renderToStaticNodeStream() These methods are only available in the environments with Web Streams (this includes browsers, Deno, and some modern edge runtimes):\nrenderToReadableStream() The following methods can be used in the environments that don’t support streams:\nrenderToString() renderToStaticMarkup() Reference # renderToPipeableStream() # ReactDOMServer.renderToPipeableStream(element, options) Render a React element to its initial HTML. Returns a stream with a pipe(res) method to pipe the output and abort() to abort the request. Fully supports Suspense and streaming of HTML with “delayed” content blocks “popping in” via inline \u0026lt;script\u0026gt; tags later. Read more\nIf you call ReactDOM.hydrateRoot() on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.\nlet didError = false; const stream = renderToPipeableStream( \u0026lt;App /\u0026gt;, { onShellReady() { // The content above all Suspense boundaries is ready. // If something errored before we started streaming, we set the error code appropriately. res.statusCode = didError ? 500 : 200; res.setHeader(\u0026#39;Content-type\u0026#39;, \u0026#39;text/html\u0026#39;); stream.pipe(res); }, onShellError(error) { // Something errored before we could complete the shell so we emit an alternative shell. res.statusCode = 500; res.send( \u0026#39;\u0026lt;!doctype html\u0026gt;\u0026lt;p\u0026gt;Loading...\u0026lt;/p\u0026gt;\u0026lt;script src=\u0026#34;clientrender.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39; ); }, onAllReady() { // If you don\u0026#39;t want streaming, use this instead of onShellReady. // This will fire after the entire page content is ready. // You can use this for crawlers or static generation. // res.statusCode = didError ? 500 : 200; // res.setHeader(\u0026#39;Content-type\u0026#39;, \u0026#39;text/html\u0026#39;); // stream.pipe(res); }, onError(err) { didError = true; console.error(err); }, } ); See the full list of options.\nNote:\nThis is a Node.js-specific API. Environments with Web Streams, like Deno and modern edge runtimes, should use renderToReadableStream instead.\nrenderToReadableStream() # ReactDOMServer.renderToReadableStream(element, options); Streams a React element to its initial HTML. Returns a Promise that resolves to a Readable Stream. Fully supports Suspense and streaming of HTML. Read more\nIf you call ReactDOM.hydrateRoot() on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.\nlet controller = new AbortController(); let didError = false; try { let stream = await renderToReadableStream( \u0026lt;html\u0026gt; \u0026lt;body\u0026gt;Success\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;, { signal: controller.signal, onError(error) { didError = true; console.error(error); } } ); // This is to wait for all Suspense boundaries to be ready. You can uncomment // this line if you want to buffer the entire HTML instead of streaming it. // You can use this for crawlers or static generation: // await stream.allReady; return new Response(stream, { status: didError ? 500 : 200, headers: {\u0026#39;Content-Type\u0026#39;: \u0026#39;text/html\u0026#39;}, }); } catch (error) { return new Response( \u0026#39;\u0026lt;!doctype html\u0026gt;\u0026lt;p\u0026gt;Loading...\u0026lt;/p\u0026gt;\u0026lt;script src=\u0026#34;clientrender.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39;, { status: 500, headers: {\u0026#39;Content-Type\u0026#39;: \u0026#39;text/html\u0026#39;}, } ); } See the full list of options.\nNote:\nThis API depends on Web Streams. For Node.js, use renderToPipeableStream instead.\nrenderToNodeStream() (Deprecated) # ReactDOMServer.renderToNodeStream(element) Render a React element to its initial HTML. Returns a Node.js Readable stream that outputs an HTML string. The HTML output by this stream is exactly equal to what ReactDOMServer.renderToString would return. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.\nIf you call ReactDOM.hydrateRoot() on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.\nNote:\nServer-only. This API is not available in the browser.\nThe stream returned from this method will return a byte stream encoded in utf-8. If you need a stream in another encoding, take a look at a project like iconv-lite, which provides transform streams for transcoding text.\nrenderToStaticNodeStream() # ReactDOMServer.renderToStaticNodeStream(element) Similar to renderToNodeStream, except this doesn’t create extra DOM attributes that React uses internally, such as data-reactroot. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save some bytes.\nThe HTML output by this stream is exactly equal to what ReactDOMServer.renderToStaticMarkup would return.\nIf you plan to use React on the client to make the markup interactive, do not use this method. Instead, use renderToNodeStream on the server and ReactDOM.hydrateRoot() on the client.\nNote:\nServer-only. This API is not available in the browser.\nThe stream returned from this method will return a byte stream encoded in utf-8. If you need a stream in another encoding, take a look at a project like iconv-lite, which provides transform streams for transcoding text.\nrenderToString() # This content is out of date.\nRead the new React documentation for renderToString.\nReactDOMServer.renderToString(element) Render a React element to its initial HTML. React will return an HTML string. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.\nIf you call ReactDOM.hydrateRoot() on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.\nNote\nThis API has limited Suspense support and does not support streaming.\nOn the server, it is recommended to use either renderToPipeableStream (for Node.js) or renderToReadableStream (for Web Streams) instead.\nrenderToStaticMarkup() # ReactDOMServer.renderToStaticMarkup(element) Similar to renderToString, except this doesn’t create extra DOM attributes that React uses internally, such as data-reactroot. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save some bytes.\nIf you plan to use React on the client to make the markup interactive, do not use this method. Instead, use renderToString on the server and ReactDOM.hydrateRoot() on the client.\n"},{"id":371,"href":"/docs/references/meta-frameworks/react/frequently-used/api-reference/syntheticevent/","title":"Syntheticevent","section":"API Reference","content":" SyntheticEvent # This reference guide documents the SyntheticEvent wrapper that forms part of React’s Event System. See the Handling Events guide to learn more.\nOverview # Your event handlers will be passed instances of SyntheticEvent, a cross-browser wrapper around the browser’s native event. It has the same interface as the browser’s native event, including stopPropagation() and preventDefault(), except the events work identically across all browsers.\nIf you find that you need the underlying browser event for some reason, simply use the nativeEvent attribute to get it. The synthetic events are different from, and do not map directly to, the browser’s native events. For example in onMouseLeave event.nativeEvent will point to a mouseout event. The specific mapping is not part of the public API and may change at any time. Every SyntheticEvent object has the following attributes:\nboolean bubbles boolean cancelable DOMEventTarget currentTarget boolean defaultPrevented number eventPhase boolean isTrusted DOMEvent nativeEvent void preventDefault() boolean isDefaultPrevented() void stopPropagation() boolean isPropagationStopped() void persist() DOMEventTarget target number timeStamp string type Note:\nAs of v17, e.persist() doesn’t do anything because the SyntheticEvent is no longer pooled.\nNote:\nAs of v0.14, returning false from an event handler will no longer stop event propagation. Instead, e.stopPropagation() or e.preventDefault() should be triggered manually, as appropriate.\nSupported Events # React normalizes events so that they have consistent properties across different browsers.\nThe event handlers below are triggered by an event in the bubbling phase. To register an event handler for the capture phase, append Capture to the event name; for example, instead of using onClick, you would use onClickCapture to handle the click event in the capture phase.\nClipboard Events Composition Events Keyboard Events Focus Events Form Events Generic Events Mouse Events Pointer Events Selection Events Touch Events UI Events Wheel Events Media Events Image Events Animation Events Transition Events Other Events Reference # Clipboard Events # Event names:\nProperties:\nDOMDataTransfer clipboardData Composition Events # Event names:\nonCompositionEnd onCompositionStart onCompositionUpdate Properties:\nKeyboard Events # Event names:\nonKeyDown onKeyPress onKeyUp Properties:\nboolean altKey number charCode boolean ctrlKey boolean getModifierState(key) string key number keyCode string locale number location boolean metaKey boolean repeat boolean shiftKey number which The key property can take any of the values documented in the DOM Level 3 Events spec.\nFocus Events # Event names:\nThese focus events work on all elements in the React DOM, not just form elements.\nProperties:\nDOMEventTarget relatedTarget onFocus\nThe onFocus event is called when the element (or some element inside of it) receives focus. For example, it’s called when the user clicks on a text input.\nfunction Example() { return ( \u0026lt;input onFocus={(e) =\u0026gt; { console.log(\u0026#39;Focused on input\u0026#39;); }} placeholder=\u0026#34;onFocus is triggered when you click this input.\u0026#34; /\u0026gt; ) } onBlur\nThe onBlur event handler is called when focus has left the element (or left some element inside of it). For example, it’s called when the user clicks outside of a focused text input.\nfunction Example() { return ( \u0026lt;input onBlur={(e) =\u0026gt; { console.log(\u0026#39;Triggered because this input lost focus\u0026#39;); }} placeholder=\u0026#34;onBlur is triggered when you click this input and then you click outside of it.\u0026#34; /\u0026gt; ) } Detecting Focus Entering and Leaving\nYou can use the currentTarget and relatedTarget to differentiate if the focusing or blurring events originated from outside of the parent element. Here is a demo you can copy and paste that shows how to detect focusing a child, focusing the element itself, and focus entering or leaving the whole subtree.\nfunction Example() { return ( \u0026lt;div tabIndex={1} onFocus={(e) =\u0026gt; { if (e.currentTarget === e.target) { console.log(\u0026#39;focused self\u0026#39;); } else { console.log(\u0026#39;focused child\u0026#39;, e.target); } if (!e.currentTarget.contains(e.relatedTarget)) { // Not triggered when swapping focus between children console.log(\u0026#39;focus entered self\u0026#39;); } }} onBlur={(e) =\u0026gt; { if (e.currentTarget === e.target) { console.log(\u0026#39;unfocused self\u0026#39;); } else { console.log(\u0026#39;unfocused child\u0026#39;, e.target); } if (!e.currentTarget.contains(e.relatedTarget)) { // Not triggered when swapping focus between children console.log(\u0026#39;focus left self\u0026#39;); } }} \u0026gt; \u0026lt;input id=\u0026#34;1\u0026#34; /\u0026gt; \u0026lt;input id=\u0026#34;2\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; ); } Form Events # Event names:\nonChange onInput onInvalid onReset onSubmit For more information about the onChange event, see Forms.\nGeneric Events # Event names:\nMouse Events # Event names:\nonClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp The onMouseEnter and onMouseLeave events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.\nProperties:\nboolean altKey number button number buttons number clientX number clientY boolean ctrlKey boolean getModifierState(key) boolean metaKey number pageX number pageY DOMEventTarget relatedTarget number screenX number screenY boolean shiftKey Pointer Events # Event names:\nonPointerDown onPointerMove onPointerUp onPointerCancel onGotPointerCapture onLostPointerCapture onPointerEnter onPointerLeave onPointerOver onPointerOut The onPointerEnter and onPointerLeave events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.\nProperties:\nAs defined in the W3 spec, pointer events extend Mouse Events with the following properties:\nnumber pointerId number width number height number pressure number tangentialPressure number tiltX number tiltY number twist string pointerType boolean isPrimary A note on cross-browser support:\nPointer events are not yet supported in every browser (at the time of writing this article, supported browsers include: Chrome, Firefox, Edge, and Internet Explorer). React deliberately does not polyfill support for other browsers because a standard-conform polyfill would significantly increase the bundle size of react-dom.\nIf your application requires pointer events, we recommend adding a third party pointer event polyfill.\nSelection Events # Event names:\nTouch Events # Event names:\nonTouchCancel onTouchEnd onTouchMove onTouchStart Properties:\nboolean altKey DOMTouchList changedTouches boolean ctrlKey boolean getModifierState(key) boolean metaKey boolean shiftKey DOMTouchList targetTouches DOMTouchList touches UI Events # Event names:\nNote\nStarting with React 17, the onScroll event does not bubble in React. This matches the browser behavior and prevents the confusion when a nested scrollable element fires events on a distant parent.\nProperties:\nnumber detail DOMAbstractView view Wheel Events # Event names:\nProperties:\nnumber deltaMode number deltaX number deltaY number deltaZ Media Events # Event names:\nonAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting Image Events # Event names:\nAnimation Events # Event names:\nonAnimationStart onAnimationEnd onAnimationIteration Properties:\nstring animationName string pseudoElement float elapsedTime Transition Events # Event names:\nProperties:\nstring propertyName string pseudoElement float elapsedTime Other Events # Event names:\n"},{"id":372,"href":"/docs/references/meta-frameworks/react/frequently-used/api-reference/test-renderer/","title":"Test Renderer","section":"API Reference","content":" Test Renderer # Importing\nimport TestRenderer from \u0026#39;react-test-renderer\u0026#39;; // ES6 const TestRenderer = require(\u0026#39;react-test-renderer\u0026#39;); // ES5 with npm Overview # This package provides a React renderer that can be used to render React components to pure JavaScript objects, without depending on the DOM or a native mobile environment.\nEssentially, this package makes it easy to grab a snapshot of the platform view hierarchy (similar to a DOM tree) rendered by a React DOM or React Native component without using a browser or jsdom.\nExample:\nimport TestRenderer from \u0026#39;react-test-renderer\u0026#39;; function Link(props) { return \u0026lt;a href={props.page}\u0026gt;{props.children}\u0026lt;/a\u0026gt;; } const testRenderer = TestRenderer.create( \u0026lt;Link page=\u0026#34;https://www.facebook.com/\u0026#34;\u0026gt;Facebook\u0026lt;/Link\u0026gt; ); console.log(testRenderer.toJSON()); // { type: \u0026#39;a\u0026#39;, // props: { href: \u0026#39;https://www.facebook.com/\u0026#39; }, // children: [ \u0026#39;Facebook\u0026#39; ] } You can use Jest’s snapshot testing feature to automatically save a copy of the JSON tree to a file and check in your tests that it hasn’t changed: Learn more about it.\nYou can also traverse the output to find specific nodes and make assertions about them.\nimport TestRenderer from \u0026#39;react-test-renderer\u0026#39;; function MyComponent() { return ( \u0026lt;div\u0026gt; \u0026lt;SubComponent foo=\u0026#34;bar\u0026#34; /\u0026gt; \u0026lt;p className=\u0026#34;my\u0026#34;\u0026gt;Hello\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ) } function SubComponent() { return ( \u0026lt;p className=\u0026#34;sub\u0026#34;\u0026gt;Sub\u0026lt;/p\u0026gt; ); } const testRenderer = TestRenderer.create(\u0026lt;MyComponent /\u0026gt;); const testInstance = testRenderer.root; expect(testInstance.findByType(SubComponent).props.foo).toBe(\u0026#39;bar\u0026#39;); expect(testInstance.findByProps({className: \u0026#34;sub\u0026#34;}).children).toEqual([\u0026#39;Sub\u0026#39;]); TestRenderer # TestRenderer.create() TestRenderer.act() TestRenderer instance # testRenderer.toJSON() testRenderer.toTree() testRenderer.update() testRenderer.unmount() testRenderer.getInstance() testRenderer.root TestInstance # testInstance.find() testInstance.findByType() testInstance.findByProps() testInstance.findAll() testInstance.findAllByType() testInstance.findAllByProps() testInstance.instance testInstance.type testInstance.props testInstance.parent testInstance.children Reference # TestRenderer.create() # TestRenderer.create(element, options); Create a TestRenderer instance with the passed React element. It doesn’t use the real DOM, but it still fully renders the component tree into memory so you can make assertions about it. Returns a TestRenderer instance.\nTestRenderer.act() # TestRenderer.act(callback); Similar to the act() helper from react-dom/test-utils, TestRenderer.act prepares a component for assertions. Use this version of act() to wrap calls to TestRenderer.create and testRenderer.update.\nimport {create, act} from \u0026#39;react-test-renderer\u0026#39;; import App from \u0026#39;./app.js\u0026#39;; // The component being tested // render the component let root; act(() =\u0026gt; { root = create(\u0026lt;App value={1}/\u0026gt;) }); // make assertions on root expect(root.toJSON()).toMatchSnapshot(); // update with some different props act(() =\u0026gt; { root.update(\u0026lt;App value={2}/\u0026gt;); }) // make assertions on root expect(root.toJSON()).toMatchSnapshot(); testRenderer.toJSON() # Return an object representing the rendered tree. This tree only contains the platform-specific nodes like \u0026lt;div\u0026gt; or \u0026lt;View\u0026gt; and their props, but doesn’t contain any user-written components. This is handy for snapshot testing.\ntestRenderer.toTree() # Return an object representing the rendered tree. The representation is more detailed than the one provided by toJSON(), and includes the user-written components. You probably don’t need this method unless you’re writing your own assertion library on top of the test renderer.\ntestRenderer.update() # testRenderer.update(element) Re-render the in-memory tree with a new root element. This simulates a React update at the root. If the new element has the same type and key as the previous element, the tree will be updated; otherwise, it will re-mount a new tree.\ntestRenderer.unmount() # Unmount the in-memory tree, triggering the appropriate lifecycle events.\ntestRenderer.getInstance() # testRenderer.getInstance() Return the instance corresponding to the root element, if available. This will not work if the root element is a function component because they don’t have instances.\ntestRenderer.root # Returns the root “test instance” object that is useful for making assertions about specific nodes in the tree. You can use it to find other “test instances” deeper below.\ntestInstance.find() # Find a single descendant test instance for which test(testInstance) returns true. If test(testInstance) does not return true for exactly one test instance, it will throw an error.\ntestInstance.findByType() # testInstance.findByType(type) Find a single descendant test instance with the provided type. If there is not exactly one test instance with the provided type, it will throw an error.\ntestInstance.findByProps() # testInstance.findByProps(props) Find a single descendant test instance with the provided props. If there is not exactly one test instance with the provided props, it will throw an error.\ntestInstance.findAll() # testInstance.findAll(test) Find all descendant test instances for which test(testInstance) returns true.\ntestInstance.findAllByType() # testInstance.findAllByType(type) Find all descendant test instances with the provided type.\ntestInstance.findAllByProps() # testInstance.findAllByProps(props) Find all descendant test instances with the provided props.\ntestInstance.instance # The component instance corresponding to this test instance. It is only available for class components, as function components don’t have instances. It matches the this value inside the given component.\ntestInstance.type # The component type corresponding to this test instance. For example, a \u0026lt;Button /\u0026gt; component has a type of Button.\ntestInstance.props # The props corresponding to this test instance. For example, a \u0026lt;Button size=\u0026quot;small\u0026quot; /\u0026gt; component has {size: 'small'} as props.\ntestInstance.parent # The parent test instance of this test instance.\ntestInstance.children # The children test instances of this test instance.\nIdeas # You can pass createNodeMock function to TestRenderer.create as the option, which allows for custom mock refs. createNodeMock accepts the current element and should return a mock ref object. This is useful when you test a component that relies on refs.\nimport TestRenderer from \u0026#39;react-test-renderer\u0026#39;; class MyComponent extends React.Component { constructor(props) { super(props); this.input = null; } componentDidMount() { this.input.focus(); } render() { return \u0026lt;input type=\u0026#34;text\u0026#34; ref={el =\u0026gt; this.input = el} /\u0026gt; } } let focused = false; TestRenderer.create( \u0026lt;MyComponent /\u0026gt;, { createNodeMock: (element) =\u0026gt; { if (element.type === \u0026#39;input\u0026#39;) { // mock a focus function return { focus: () =\u0026gt; { focused = true; } }; } return null; } } ); expect(focused).toBe(true); "},{"id":373,"href":"/docs/references/meta-frameworks/react/frequently-used/api-reference/test-utilities/","title":"Test Utilities","section":"API Reference","content":" Test Utilities # Importing\nimport ReactTestUtils from \u0026#39;react-dom/test-utils\u0026#39;; // ES6 var ReactTestUtils = require(\u0026#39;react-dom/test-utils\u0026#39;); // ES5 with npm Overview # ReactTestUtils makes it easy to test React components in the testing framework of your choice. At Facebook we use Jest for painless JavaScript testing. Learn how to get started with Jest through the Jest website’s React Tutorial.\nNote:\nWe recommend using React Testing Library which is designed to enable and encourage writing tests that use your components as the end users do.\nFor React versions {\u0026rsquo;\u0026lt;=\u0026rsquo;} 16, the Enzyme library makes it easy to assert, manipulate, and traverse your React Components’ output.\nact() mockComponent() isElement() isElementOfType() isDOMComponent() isCompositeComponent() isCompositeComponentWithType() findAllInRenderedTree() scryRenderedDOMComponentsWithClass() findRenderedDOMComponentWithClass() scryRenderedDOMComponentsWithTag() findRenderedDOMComponentWithTag() scryRenderedComponentsWithType() findRenderedComponentWithType() renderIntoDocument() Simulate Reference # act() # To prepare a component for assertions, wrap the code rendering it and performing updates inside an act() call. This makes your test run closer to how React works in the browser.\nNote\nIf you use react-test-renderer, it also provides an act export that behaves the same way.\nFor example, let’s say we have this Counter component:\nclass Counter extends React.Component { constructor(props) { super(props); this.state = {count: 0}; this.handleClick = this.handleClick.bind(this); } componentDidMount() { document.title = `You clicked ${this.state.count} times`; } componentDidUpdate() { document.title = `You clicked ${this.state.count} times`; } handleClick() { this.setState(state =\u0026gt; ({ count: state.count + 1, })); } render() { return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {this.state.count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={this.handleClick}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } } Here is how we can test it:\nimport React from \u0026#39;react\u0026#39;; import ReactDOM from \u0026#39;react-dom/client\u0026#39;; import { act } from \u0026#39;react-dom/test-utils\u0026#39;;import Counter from \u0026#39;./Counter\u0026#39;; let container; beforeEach(() =\u0026gt; { container = document.createElement(\u0026#39;div\u0026#39;); document.body.appendChild(container); }); afterEach(() =\u0026gt; { document.body.removeChild(container); container = null; }); it(\u0026#39;can render and update a counter\u0026#39;, () =\u0026gt; { // Test first render and componentDidMount act(() =\u0026gt; { ReactDOM.createRoot(container).render(\u0026lt;Counter /\u0026gt;); }); const button = container.querySelector(\u0026#39;button\u0026#39;); const label = container.querySelector(\u0026#39;p\u0026#39;); expect(label.textContent).toBe(\u0026#39;You clicked 0 times\u0026#39;); expect(document.title).toBe(\u0026#39;You clicked 0 times\u0026#39;); // Test second render and componentDidUpdate act(() =\u0026gt; { button.dispatchEvent(new MouseEvent(\u0026#39;click\u0026#39;, {bubbles: true})); }); expect(label.textContent).toBe(\u0026#39;You clicked 1 times\u0026#39;); expect(document.title).toBe(\u0026#39;You clicked 1 times\u0026#39;); }); Don’t forget that dispatching DOM events only works when the DOM container is added to the document. You can use a library like React Testing Library to reduce the boilerplate code. The recipes document contains more details on how act() behaves, with examples and usage. mockComponent() # mockComponent( componentClass, [mockTagName] ) Pass a mocked component module to this method to augment it with useful methods that allow it to be used as a dummy React component. Instead of rendering as usual, the component will become a simple \u0026lt;div\u0026gt; (or other tag if mockTagName is provided) containing any provided children.\nNote:\nmockComponent() is a legacy API. We recommend using jest.mock() instead.\nisElement() # Returns true if element is any React element.\nisElementOfType() # isElementOfType( element, componentClass ) Returns true if element is a React element whose type is of a React componentClass.\nisDOMComponent() # Returns true if instance is a DOM component (such as a \u0026lt;div\u0026gt; or \u0026lt;span\u0026gt;).\nisCompositeComponent() # isCompositeComponent(instance) Returns true if instance is a user-defined component, such as a class or a function.\nisCompositeComponentWithType() # isCompositeComponentWithType( instance, componentClass ) Returns true if instance is a component whose type is of a React componentClass.\nfindAllInRenderedTree() # findAllInRenderedTree( tree, test ) Traverse all components in tree and accumulate all components where test(component) is true. This is not that useful on its own, but it’s used as a primitive for other test utils.\nscryRenderedDOMComponentsWithClass() # scryRenderedDOMComponentsWithClass( tree, className ) Finds all DOM elements of components in the rendered tree that are DOM components with the class name matching className.\nfindRenderedDOMComponentWithClass() # findRenderedDOMComponentWithClass( tree, className ) Like scryRenderedDOMComponentsWithClass() but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.\nscryRenderedDOMComponentsWithTag() # scryRenderedDOMComponentsWithTag( tree, tagName ) Finds all DOM elements of components in the rendered tree that are DOM components with the tag name matching tagName.\nfindRenderedDOMComponentWithTag() # findRenderedDOMComponentWithTag( tree, tagName ) Like scryRenderedDOMComponentsWithTag() but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.\nscryRenderedComponentsWithType() # scryRenderedComponentsWithType( tree, componentClass ) Finds all instances of components with type equal to componentClass.\nfindRenderedComponentWithType() # findRenderedComponentWithType( tree, componentClass ) Same as scryRenderedComponentsWithType() but expects there to be one result and returns that one result, or throws exception if there is any other number of matches besides one.\nrenderIntoDocument() # renderIntoDocument(element) Render a React element into a detached DOM node in the document. This function requires a DOM. It is effectively equivalent to:\nconst domContainer = document.createElement(\u0026#39;div\u0026#39;); ReactDOM.createRoot(domContainer).render(element); Note:\nYou will need to have window, window.document and window.document.createElement globally available before you import React. Otherwise React will think it can’t access the DOM and methods like setState won’t work.\nOther Utilities # Simulate # Simulate.{eventName}( element, [eventData] ) Simulate an event dispatch on a DOM node with optional eventData event data.\nSimulate has a method for every event that React understands.\nClicking an element\n// \u0026lt;button ref={(node) =\u0026gt; this.button = node}\u0026gt;...\u0026lt;/button\u0026gt; const node = this.button; ReactTestUtils.Simulate.click(node); Changing the value of an input field and then pressing ENTER.\n// \u0026lt;input ref={(node) =\u0026gt; this.textInput = node} /\u0026gt; const node = this.textInput; node.value = \u0026#39;giraffe\u0026#39;; ReactTestUtils.Simulate.change(node); ReactTestUtils.Simulate.keyDown(node, {key: \u0026#34;Enter\u0026#34;, keyCode: 13, which: 13}); Note\nYou will have to provide any event property that you’re using in your component (e.g. keyCode, which, etc…) as React is not creating any of these for you.\n"},{"id":374,"href":"/docs/references/meta-frameworks/react/frequently-used/faq/ajax-and-apis/","title":"Ajax and Apis","section":"Frequently Asked Questions","content":" AJAX and APIs # How can I make an AJAX call? # You can use any AJAX library you like with React. Some popular ones are Axios, jQuery AJAX, and the browser built-in window.fetch.\nWhere in the component lifecycle should I make an AJAX call? # You should populate data with AJAX calls in the componentDidMount lifecycle method. This is so you can use setState to update your component when the data is retrieved.\nExample: Using AJAX results to set local state # The component below demonstrates how to make an AJAX call in componentDidMount to populate local component state.\nThe example API returns a JSON object like this:\n{ \u0026#34;items\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Apples\u0026#34;, \u0026#34;price\u0026#34;: \u0026#34;$2\u0026#34; }, { \u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;Peaches\u0026#34;, \u0026#34;price\u0026#34;: \u0026#34;$5\u0026#34; } ] } class MyComponent extends React.Component { constructor(props) { super(props); this.state = { error: null, isLoaded: false, items: [] }; } componentDidMount() { fetch(\u0026#34;https://api.example.com/items\u0026#34;) .then(res =\u0026gt; res.json()) .then( (result) =\u0026gt; { this.setState({ isLoaded: true, items: result.items }); }, // Note: it\u0026#39;s important to handle errors here // instead of a catch() block so that we don\u0026#39;t swallow // exceptions from actual bugs in components. (error) =\u0026gt; { this.setState({ isLoaded: true, error }); } ) } render() { const { error, isLoaded, items } = this.state; if (error) { return \u0026lt;div\u0026gt;Error: {error.message}\u0026lt;/div\u0026gt;; } else if (!isLoaded) { return \u0026lt;div\u0026gt;Loading...\u0026lt;/div\u0026gt;; } else { return ( \u0026lt;ul\u0026gt; {items.map(item =\u0026gt; ( \u0026lt;li key={item.id}\u0026gt; {item.name} {item.price} \u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; ); } } } Here is the equivalent with Hooks:\nfunction MyComponent() { const [error, setError] = useState(null); const [isLoaded, setIsLoaded] = useState(false); const [items, setItems] = useState([]); // Note: the empty deps array [] means // this useEffect will run once // similar to componentDidMount() useEffect(() =\u0026gt; { fetch(\u0026#34;https://api.example.com/items\u0026#34;) .then(res =\u0026gt; res.json()) .then( (result) =\u0026gt; { setIsLoaded(true); setItems(result); }, // Note: it\u0026#39;s important to handle errors here // instead of a catch() block so that we don\u0026#39;t swallow // exceptions from actual bugs in components. (error) =\u0026gt; { setIsLoaded(true); setError(error); } ) }, []) if (error) { return \u0026lt;div\u0026gt;Error: {error.message}\u0026lt;/div\u0026gt;; } else if (!isLoaded) { return \u0026lt;div\u0026gt;Loading...\u0026lt;/div\u0026gt;; } else { return ( \u0026lt;ul\u0026gt; {items.map(item =\u0026gt; ( \u0026lt;li key={item.id}\u0026gt; {item.name} {item.price} \u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; ); } } "},{"id":375,"href":"/docs/references/meta-frameworks/react/frequently-used/faq/babel-jsx-and-build-steps/","title":"Babel Jsx and Build Steps","section":"Frequently Asked Questions","content":" 🍕 Babel, JSX, and Build Steps # Do I need to use JSX with React? # No! Check out “React Without JSX” to learn more.\nDo I need to use ES6 (+) with React? # No! Check out “React Without ES6” to learn more.\nHow can I write comments in JSX? # \u0026lt;div\u0026gt; {/* Comment goes here */} Hello, {name}! \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; {/* It also works for multi-line comments. */} Hello, {name}! \u0026lt;/div\u0026gt; "},{"id":376,"href":"/docs/references/meta-frameworks/react/frequently-used/faq/component-state/","title":"Component State","section":"Frequently Asked Questions","content":" 🌵 Component State # What does setState do? # setState() schedules an update to a component’s state object. When state changes, the component responds by re-rendering.\nWhat is the difference between state and props? # props (short for “properties”) and state are both plain JavaScript objects. While both hold information that influences the output of render, they are different in one important way: props get passed to the component (similar to function parameters) whereas state is managed within the component (similar to variables declared within a function).\nHere are some good resources for further reading on when to use props vs state:\nProps vs State ReactJS: Props vs. State Why is setState giving me the wrong value? # In React, both this.props and this.state represent the rendered values, i.e. what’s currently on the screen.\nCalls to setState are asynchronous - don’t rely on this.state to reflect the new value immediately after calling setState. Pass an updater function instead of an object if you need to compute values based on the current state (see below for details).\nExample of code that will not behave as expected:\nincrementCount() { // Note: this will *not* work as intended. this.setState({count: this.state.count + 1}); } handleSomething() { // Let\u0026#39;s say `this.state.count` starts at 0. this.incrementCount(); this.incrementCount(); this.incrementCount(); // When React re-renders the component, `this.state.count` will be 1, but you expected 3. // This is because `incrementCount()` function above reads from `this.state.count`, // but React doesn\u0026#39;t update `this.state.count` until the component is re-rendered. // So `incrementCount()` ends up reading `this.state.count` as 0 every time, and sets it to 1. // The fix is described below! } See below for how to fix this problem.\nHow do I update state with values that depend on the current state? # Pass a function instead of an object to setState to ensure the call always uses the most updated version of state (see below).\nWhat is the difference between passing an object or a function in setState? # Passing an update function allows you to access the current state value inside the updater. Since setState calls are batched, this lets you chain updates and ensure they build on top of each other instead of conflicting:\nincrementCount() { this.setState((state) =\u0026gt; { // Important: read `state` instead of `this.state` when updating. return {count: state.count + 1} }); } handleSomething() { // Let\u0026#39;s say `this.state.count` starts at 0. this.incrementCount(); this.incrementCount(); this.incrementCount(); // If you read `this.state.count` now, it would still be 0. // But when React re-renders the component, it will be 3. } Learn more about setState\nWhen is setState asynchronous? # Currently, setState is asynchronous inside event handlers.\nThis ensures, for example, that if both Parent and Child call setState during a click event, Child isn’t re-rendered twice. Instead, React “flushes” the state updates at the end of the browser event. This results in significant performance improvements in larger apps.\nThis is an implementation detail so avoid relying on it directly. In the future versions, React will batch updates by default in more cases.\nWhy doesn’t React update this.state synchronously? # As explained in the previous section, React intentionally “waits” until all components call setState() in their event handlers before starting to re-render. This boosts performance by avoiding unnecessary re-renders.\nHowever, you might still be wondering why React doesn’t just update this.state immediately without re-rendering.\nThere are two main reasons:\nThis would break the consistency between props and state, causing issues that are very hard to debug. This would make some of the new features we’re working on impossible to implement. This GitHub comment dives deep into the specific examples.\nShould I use a state management library like Redux or MobX? # Maybe.\nIt’s a good idea to get to know React first, before adding in additional libraries. You can build quite complex applications using only React.\n"},{"id":377,"href":"/docs/references/meta-frameworks/react/frequently-used/faq/file-structure/","title":"File Structure","section":"Frequently Asked Questions","content":" ⭐ File Structure # Is there a recommended way to structure React projects? # React doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.\nGrouping by features or routes\nOne common way to structure projects is to locate CSS, JS, and tests together inside folders grouped by feature or route.\ncommon/ Avatar.js Avatar.css APIUtils.js APIUtils.test.js feed/ index.js Feed.js Feed.css FeedStory.js FeedStory.test.js FeedAPI.js profile/ index.js Profile.js ProfileHeader.js ProfileHeader.css ProfileAPI.js The definition of a “feature” is not universal, and it is up to you to choose the granularity. If you can’t come up with a list of top-level folders, you can ask the users of your product what major parts it consists of, and use their mental model as a blueprint.\nGrouping by file type\nAnother popular way to structure projects is to group similar files together, for example:\napi/ APIUtils.js APIUtils.test.js ProfileAPI.js UserAPI.js components/ Avatar.js Avatar.css Feed.js Feed.css FeedStory.js FeedStory.test.js Profile.js ProfileHeader.js ProfileHeader.css Some people also prefer to go further, and separate components into different folders depending on their role in the application. For example, Atomic Design is a design methodology built on this principle. Remember that it’s often more productive to treat such methodologies as helpful examples rather than strict rules to follow.\nAvoid too much nesting\nThere are many pain points associated with deep directory nesting in JavaScript projects. It becomes harder to write relative imports between them, or to update those imports when the files are moved. Unless you have a very compelling reason to use a deep folder structure, consider limiting yourself to a maximum of three or four nested folders within a single project. Of course, this is only a recommendation, and it may not be relevant to your project.\nDon’t overthink it\nIf you’re just starting a project, don’t spend more than five minutes on choosing a file structure. Pick any of the above approaches (or come up with your own) and start writing code! You’ll likely want to rethink it anyway after you’ve written some real code.\nIf you feel completely stuck, start by keeping all files in a single folder. Eventually it will grow large enough that you will want to separate some files from the rest. By that time you’ll have enough knowledge to tell which files you edit together most often. In general, it is a good idea to keep files that often change together close to each other. This principle is called “colocation”.\nAs projects grow larger, they often use a mix of both of the above approaches in practice. So choosing the “right” one in the beginning isn’t very important.\n"},{"id":378,"href":"/docs/references/meta-frameworks/react/frequently-used/faq/passing-functions-to-components/","title":"Passing Functions to Components","section":"Frequently Asked Questions","content":" 🌵 Passing Functions to Components # How do I pass an event handler (like onClick) to a component? # Pass event handlers and other functions as props to child components:\n\u0026lt;button onClick={this.handleClick}\u0026gt; If you need to have access to the parent component in the handler, you also need to bind the function to the component instance (see below).\nHow do I bind a function to a component instance? # There are several ways to make sure functions have access to component attributes like this.props and this.state, depending on which syntax and build steps you are using.\nBind in Constructor (ES2015)\nclass Foo extends Component { constructor(props) { super(props); this.handleClick = this.handleClick.bind(this); } handleClick() { console.log(\u0026#39;Click happened\u0026#39;); } render() { return \u0026lt;button onClick={this.handleClick}\u0026gt;Click Me\u0026lt;/button\u0026gt;; } } Class Properties (ES2022)\nclass Foo extends Component { handleClick = () =\u0026gt; { console.log(\u0026#39;Click happened\u0026#39;); }; render() { return \u0026lt;button onClick={this.handleClick}\u0026gt;Click Me\u0026lt;/button\u0026gt;; } } Bind in Render\nclass Foo extends Component { handleClick() { console.log(\u0026#39;Click happened\u0026#39;); } render() { return \u0026lt;button onClick={this.handleClick.bind(this)}\u0026gt;Click Me\u0026lt;/button\u0026gt;; } } Note:\nUsing Function.prototype.bind in render creates a new function each time the component renders, which may have performance implications (see below).\nArrow Function in Render\nclass Foo extends Component { handleClick() { console.log(\u0026#39;Click happened\u0026#39;); } render() { return \u0026lt;button onClick={() =\u0026gt; this.handleClick()}\u0026gt;Click Me\u0026lt;/button\u0026gt;; } } Note:\nUsing an arrow function in render creates a new function each time the component renders, which may break optimizations based on strict identity comparison.\nIs it OK to use arrow functions in render methods? # Generally speaking, yes, it is OK, and it is often the easiest way to pass parameters to callback functions.\nIf you do have performance issues, by all means, optimize!\nWhy is binding necessary at all? # In JavaScript, these two code snippets are not equivalent:\nvar method = obj.method; method(); Binding methods helps ensure that the second snippet works the same way as the first one.\nWith React, typically you only need to bind the methods you pass to other components. For example, \u0026lt;button onClick={this.handleClick}\u0026gt; passes this.handleClick so you want to bind it. However, it is unnecessary to bind the render method or the lifecycle methods: we don’t pass them to other components.\nThis post by Yehuda Katz explains what binding is, and how functions work in JavaScript, in detail.\nWhy is my function being called every time the component renders? # Make sure you aren’t calling the function when you pass it to the component:\nrender() { // Wrong: handleClick is called instead of passed as a reference! return \u0026lt;button onClick={this.handleClick()}\u0026gt;Click Me\u0026lt;/button\u0026gt; } Instead, pass the function itself (without parens):\nrender() { // Correct: handleClick is passed as a reference! return \u0026lt;button onClick={this.handleClick}\u0026gt;Click Me\u0026lt;/button\u0026gt; } How do I pass a parameter to an event handler or callback? # You can use an arrow function to wrap around an event handler and pass parameters:\n\u0026lt;button onClick={() =\u0026gt; this.handleClick(id)} /\u0026gt; This is equivalent to calling .bind:\n\u0026lt;button onClick={this.handleClick.bind(this, id)} /\u0026gt; Example: Passing params using arrow functions\nconst A = 65 // ASCII character code class Alphabet extends React.Component { constructor(props) { super(props); this.state = { justClicked: null, letters: Array.from({length: 26}, (_, i) =\u0026gt; String.fromCharCode(A + i)) }; } handleClick(letter) { this.setState({ justClicked: letter }); } render() { return ( \u0026lt;div\u0026gt; Just clicked: {this.state.justClicked} \u0026lt;ul\u0026gt; {this.state.letters.map(letter =\u0026gt; \u0026lt;li key={letter} onClick={() =\u0026gt; this.handleClick(letter)}\u0026gt; {letter} \u0026lt;/li\u0026gt; )} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; ) } } Example: Passing params using data-attributes\nAlternately, you can use DOM APIs to store data needed for event handlers. Consider this approach if you need to optimize a large number of elements or have a render tree that relies on React.PureComponent equality checks.\nconst A = 65 // ASCII character code class Alphabet extends React.Component { constructor(props) { super(props); this.handleClick = this.handleClick.bind(this); this.state = { justClicked: null, letters: Array.from({length: 26}, (_, i) =\u0026gt; String.fromCharCode(A + i)) }; } handleClick(e) { this.setState({ justClicked: e.target.dataset.letter }); } render() { return ( \u0026lt;div\u0026gt; Just clicked: {this.state.justClicked} \u0026lt;ul\u0026gt; {this.state.letters.map(letter =\u0026gt; \u0026lt;li key={letter} data-letter={letter} onClick={this.handleClick}\u0026gt; {letter} \u0026lt;/li\u0026gt; )} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; ) } } How can I prevent a function from being called too quickly or too many times in a row? # If you have an event handler such as onClick or onScroll and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be done by using:\nthrottling: sample changes based on a time based frequency (eg _.throttle) debouncing: publish changes after a period of inactivity (eg _.debounce) requestAnimationFrame throttling: sample changes based on requestAnimationFrame (eg raf-schd) See this visualization for a comparison of throttle and debounce functions.\nNote:\n_.debounce, _.throttle and raf-schd provide a cancel method to cancel delayed callbacks. You should either call this method from componentWillUnmount or check to ensure that the component is still mounted within the delayed function.\nThrottle\nThrottling prevents a function from being called more than once in a given window of time. The example below throttles a “click” handler to prevent calling it more than once per second.\nimport throttle from \u0026#39;lodash.throttle\u0026#39;; class LoadMoreButton extends React.Component { constructor(props) { super(props); this.handleClick = this.handleClick.bind(this); this.handleClickThrottled = throttle(this.handleClick, 1000); } componentWillUnmount() { this.handleClickThrottled.cancel(); } render() { return \u0026lt;button onClick={this.handleClickThrottled}\u0026gt;Load More\u0026lt;/button\u0026gt;; } handleClick() { this.props.loadMore(); } } Debounce\nDebouncing ensures that a function will not be executed until after a certain amount of time has passed since it was last called. This can be useful when you have to perform some expensive calculation in response to an event that might dispatch rapidly (eg scroll or keyboard events). The example below debounces text input with a 250ms delay.\nimport debounce from \u0026#39;lodash.debounce\u0026#39;; class Searchbox extends React.Component { constructor(props) { super(props); this.handleChange = this.handleChange.bind(this); this.emitChangeDebounced = debounce(this.emitChange, 250); } componentWillUnmount() { this.emitChangeDebounced.cancel(); } render() { return ( \u0026lt;input type=\u0026#34;text\u0026#34; onChange={this.handleChange} placeholder=\u0026#34;Search...\u0026#34; defaultValue={this.props.value} /\u0026gt; ); } handleChange(e) { this.emitChangeDebounced(e.target.value); } emitChange(value) { this.props.onChange(value); } } requestAnimationFrame throttling\nrequestAnimationFrame is a way of queuing a function to be executed in the browser at the optimal time for rendering performance. A function that is queued with requestAnimationFrame will fire in the next frame. The browser will work hard to ensure that there are 60 frames per second (60 fps). However, if the browser is unable to it will naturally limit the amount of frames in a second. For example, a device might only be able to handle 30 fps and so you will only get 30 frames in that second. Using requestAnimationFrame for throttling is a useful technique in that it prevents you from doing more than 60 updates in a second. If you are doing 100 updates in a second this creates additional work for the browser that the user will not see anyway.\nNote:\nUsing this technique will only capture the last published value in a frame. You can see an example of how this optimization works on MDN\nimport rafSchedule from \u0026#39;raf-schd\u0026#39;; class ScrollListener extends React.Component { constructor(props) { super(props); this.handleScroll = this.handleScroll.bind(this); // Create a new function to schedule updates. this.scheduleUpdate = rafSchedule( point =\u0026gt; this.props.onScroll(point) ); } handleScroll(e) { // When we receive a scroll event, schedule an update. // If we receive many updates within a frame, we\u0026#39;ll only publish the latest value. this.scheduleUpdate({ x: e.clientX, y: e.clientY }); } componentWillUnmount() { // Cancel any pending updates since we\u0026#39;re unmounting. this.scheduleUpdate.cancel(); } render() { return ( \u0026lt;div style={{ overflow: \u0026#39;scroll\u0026#39; }} onScroll={this.handleScroll} \u0026gt; \u0026lt;img src=\u0026#34;/my-huge-image.jpg\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; ); } } Testing your rate limiting\nWhen testing your rate limiting code works correctly it is helpful to have the ability to fast forward time. If you are using jest then you can use mock timers to fast forward time. If you are using requestAnimationFrame throttling then you may find raf-stub to be a useful tool to control the ticking of animation frames.\n"},{"id":379,"href":"/docs/references/meta-frameworks/react/frequently-used/faq/styling-and-css/","title":"Styling and Css","section":"Frequently Asked Questions","content":" 🌵 Styling and CSS # How do I add CSS classes to components? # Pass a string as the className prop:\nrender() { return \u0026lt;span className=\u0026#34;menu navigation-menu\u0026#34;\u0026gt;Menu\u0026lt;/span\u0026gt; } It is common for CSS classes to depend on the component props or state:\nrender() { let className = \u0026#39;menu\u0026#39;; if (this.props.isActive) { className += \u0026#39; menu-active\u0026#39;; } return \u0026lt;span className={className}\u0026gt;Menu\u0026lt;/span\u0026gt; } Tip\nIf you often find yourself writing code like this, classnames package can simplify it.\nCan I use inline styles? # Yes, see the docs on styling here.\nAre inline styles bad? # CSS classes are generally better for performance than inline styles.\nWhat is CSS-in-JS? # “CSS-in-JS” refers to a pattern where CSS is composed using JavaScript instead of defined in external files.\nNote that this functionality is not a part of React, but provided by third-party libraries. React does not have an opinion about how styles are defined; if in doubt, a good starting point is to define your styles in a separate *.css file as usual and refer to them using className.\nCan I do animations in React? # React can be used to power animations. See React Transition Group, React Motion, React Spring, or Framer Motion, for example.\n"},{"id":380,"href":"/docs/references/meta-frameworks/react/frequently-used/faq/versioning-policy/","title":"Versioning Policy","section":"Frequently Asked Questions","content":" Versioning Policy # React follows semantic versioning (semver) principles.\nThat means that with a version number x.y.z:\nWhen releasing critical bug fixes, we make a patch release by changing the z number (ex: 15.6.2 to 15.6.3). When releasing new features or non-critical fixes, we make a minor release by changing the y number (ex: 15.6.2 to 15.7.0). When releasing breaking changes, we make a major release by changing the x number (ex: 15.6.2 to 16.0.0). Major releases can also contain new features, and any release can include bug fixes.\nMinor releases are the most common type of release.\nThis versioning policy does not apply to prerelease builds in the Next or Experimental channels. Learn more about prereleases.\nBreaking Changes # Breaking changes are inconvenient for everyone, so we try to minimize the number of major releases – for example, React 15 was released in April 2016 and React 16 was released in September 2017, and React 17 was released in October 2020.\nInstead, we release new features in minor versions. That means that minor releases are often more interesting and compelling than majors, despite their unassuming name.\nCommitment to Stability # As we change React over time, we try to minimize the effort required to take advantage of new features. When possible, we’ll keep an older API working, even if that means putting it in a separate package. For example, mixins have been discouraged for years but they’re supported to this day via create-react-class and many codebases continue to use them in stable, legacy code.\nOver a million developers use React, collectively maintaining millions of components. The Facebook codebase alone has over 50,000 React components. That means we need to make it as easy as possible to upgrade to new versions of React; if we make large changes without a migration path, people will be stuck on old versions. We test these upgrade paths on Facebook itself – if our team of less than 10 people can update 50,000+ components alone, we hope the upgrade will be manageable for anyone using React. In many cases, we write automated scripts to upgrade component syntax, which we then include in the open-source release for everyone to use.\nGradual Upgrades via Warnings # Development builds of React include many helpful warnings. Whenever possible, we add warnings in preparation for future breaking changes. That way, if your app has no warnings on the latest release, it will be compatible with the next major release. This allows you to upgrade your apps one component at a time.\nDevelopment warnings won’t affect the runtime behavior of your app. That way, you can feel confident that your app will behave the same way between the development and production builds — the only differences are that the production build won’t log the warnings and that it is more efficient. (If you ever notice otherwise, please file an issue.)\nWhat Counts as a Breaking Change? # In general, we don’t bump the major version number for changes to:\nDevelopment warnings. Since these don’t affect production behavior, we may add new warnings or modify existing warnings in between major versions. In fact, this is what allows us to reliably warn about upcoming breaking changes. APIs starting with unstable_. These are provided as experimental features whose APIs we are not yet confident in. By releasing these with an unstable_ prefix, we can iterate faster and get to a stable API sooner. Alpha and canary versions of React. We provide alpha versions of React as a way to test new features early, but we need the flexibility to make changes based on what we learn in the alpha period. If you use these versions, note that APIs may change before the stable release. Undocumented APIs and internal data structures. If you access internal property names like __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED or __reactInternalInstance$uk43rzhitjg, there is no warranty. You are on your own. This policy is designed to be pragmatic: certainly, we don’t want to cause headaches for you. If we bumped the major version for all of these changes, we would end up releasing more major versions and ultimately causing more versioning pain for the community. It would also mean that we can’t make progress in improving React as fast as we’d like.\nThat said, if we expect that a change on this list will cause broad problems in the community, we will still do our best to provide a gradual migration path.\nIf a Minor Release Includes No New Features, Why Isn’t It a Patch? # It’s possible that a minor release will not include new features. This is allowed by semver, which states ”[a minor version] MAY be incremented if substantial new functionality or improvements are introduced within the private code. It MAY include patch level changes.”\nHowever, it does raise the question of why these releases aren’t versioned as patches instead.\nThe answer is that any change to React (or other software) carries some risk of breaking in unexpected ways. Imagine a scenario where a patch release that fixes one bug accidentally introduces a different bug. This would not only be disruptive to developers, but also harm their confidence in future patch releases. It’s especially regrettable if the original fix is for a bug that is rarely encountered in practice.\nWe have a pretty good track record for keeping React releases free of bugs, but patch releases have an even higher bar for reliability because most developers assume they can be adopted without adverse consequences.\nFor these reasons, we reserve patch releases only for the most critical bugs and security vulnerabilities.\nIf a release includes non-essential changes — such as internal refactors, changes to implementation details, performance improvements, or minor bugfixes — we will bump the minor version even when there are no new features.\n"},{"id":381,"href":"/docs/references/meta-frameworks/react/frequently-used/faq/virtual-dom-and-internals/","title":"Virtual Dom and Internals","section":"Frequently Asked Questions","content":" 🍕 Virtual DOM and Internals # What is the Virtual DOM? # The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. This process is called reconciliation.\nThis approach enables the declarative API of React: You tell React what state you want the UI to be in, and it makes sure the DOM matches that state. This abstracts out the attribute manipulation, event handling, and manual DOM updating that you would otherwise have to use to build your app.\nSince “virtual DOM” is more of a pattern than a specific technology, people sometimes say it to mean different things. In React world, the term “virtual DOM” is usually associated with React elements since they are the objects representing the user interface. React, however, also uses internal objects called “fibers” to hold additional information about the component tree. They may also be considered a part of “virtual DOM” implementation in React.\nIs the Shadow DOM the same as the Virtual DOM? # No, they are different. The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components. The virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs.\nWhat is “React Fiber”? # Fiber is the new reconciliation engine in React 16. Its main goal is to enable incremental rendering of the virtual DOM. Read more.\n"},{"id":382,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/building-your-own-hooks/","title":"Building Your Own Hooks","section":"Hooks","content":" 💘 Building Your Own Hooks # Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\nBuilding your own Hooks lets you extract component logic into reusable functions.\nWhen we were learning about using the Effect Hook, we saw this component from a chat application that displays a message indicating whether a friend is online or offline:\nimport React, { useState, useEffect } from \u0026#39;react\u0026#39;; function FriendStatus(props) { const [isOnline, setIsOnline] = useState(null); useEffect(() =\u0026gt; { function handleStatusChange(status) { setIsOnline(status.isOnline); } ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); return () =\u0026gt; { ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange); }; }); if (isOnline === null) { return \u0026#39;Loading...\u0026#39;; } return isOnline ? \u0026#39;Online\u0026#39; : \u0026#39;Offline\u0026#39;; } Now let’s say that our chat application also has a contact list, and we want to render names of online users with a green color. We could copy and paste similar logic above into our FriendListItem component but it wouldn’t be ideal:\nimport React, { useState, useEffect } from \u0026#39;react\u0026#39;; function FriendListItem(props) { const [isOnline, setIsOnline] = useState(null); useEffect(() =\u0026gt; { function handleStatusChange(status) { setIsOnline(status.isOnline); } ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); return () =\u0026gt; { ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange); }; }); return ( \u0026lt;li style={{ color: isOnline ? \u0026#39;green\u0026#39; : \u0026#39;black\u0026#39; }}\u0026gt; {props.friend.name} \u0026lt;/li\u0026gt; ); } Instead, we’d like to share this logic between FriendStatus and FriendListItem.\nTraditionally in React, we’ve had two popular ways to share stateful logic between components: render props and higher-order components. We will now look at how Hooks solve many of the same problems without forcing you to add more components to the tree.\nWhen we want to share logic between two JavaScript functions, we extract it to a third function. Both components and Hooks are functions, so this works for them too!\nA custom Hook is a JavaScript function whose name starts with ”use” and that may call other Hooks. For example, useFriendStatus below is our first custom Hook:\nimport { useState, useEffect } from \u0026#39;react\u0026#39;; function useFriendStatus(friendID) { const [isOnline, setIsOnline] = useState(null); useEffect(() =\u0026gt; { function handleStatusChange(status) { setIsOnline(status.isOnline); } ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange); return () =\u0026gt; { ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange); }; }); return isOnline; } There’s nothing new inside of it — the logic is copied from the components above. Just like in a component, make sure to only call other Hooks unconditionally at the top level of your custom Hook.\nUnlike a React component, a custom Hook doesn’t need to have a specific signature. We can decide what it takes as arguments, and what, if anything, it should return. In other words, it’s just like a normal function. Its name should always start with use so that you can tell at a glance that the rules of Hooks apply to it.\nThe purpose of our useFriendStatus Hook is to subscribe us to a friend’s status. This is why it takes friendID as an argument, and returns whether this friend is online:\nfunction useFriendStatus(friendID) { const [isOnline, setIsOnline] = useState(null); // ... return isOnline; } Now let’s see how we can use our custom Hook.\nUsing a Custom Hook # In the beginning, our stated goal was to remove the duplicated logic from the FriendStatus and FriendListItem components. Both of them want to know whether a friend is online.\nNow that we’ve extracted this logic to a useFriendStatus hook, we can just use it:\nfunction FriendStatus(props) { const isOnline = useFriendStatus(props.friend.id); if (isOnline === null) { return \u0026#39;Loading...\u0026#39;; } return isOnline ? \u0026#39;Online\u0026#39; : \u0026#39;Offline\u0026#39;; } function FriendListItem(props) { const isOnline = useFriendStatus(props.friend.id); return ( \u0026lt;li style={{ color: isOnline ? \u0026#39;green\u0026#39; : \u0026#39;black\u0026#39; }}\u0026gt; {props.friend.name} \u0026lt;/li\u0026gt; ); } Is this code equivalent to the original examples? Yes, it works in exactly the same way. If you look closely, you’ll notice we didn’t make any changes to the behavior. All we did was to extract some common code between two functions into a separate function. Custom Hooks are a convention that naturally follows from the design of Hooks, rather than a React feature.\nDo I have to name my custom Hooks starting with “use”? Please do. This convention is very important. Without it, we wouldn’t be able to automatically check for violations of rules of Hooks because we couldn’t tell if a certain function contains calls to Hooks inside of it.\nDo two components using the same Hook share state? No. Custom Hooks are a mechanism to reuse stateful logic (such as setting up a subscription and remembering the current value), but every time you use a custom Hook, all state and effects inside of it are fully isolated.\nHow does a custom Hook get isolated state? Each call to a Hook gets isolated state. Because we call useFriendStatus directly, from React’s point of view our component just calls useState and useEffect. And as we learned earlier, we can call useState and useEffect many times in one component, and they will be completely independent.\nTip: Pass Information Between Hooks # Since Hooks are functions, we can pass information between them.\nTo illustrate this, we’ll use another component from our hypothetical chat example. This is a chat message recipient picker that displays whether the currently selected friend is online:\nconst friendList = [ { id: 1, name: \u0026#39;Phoebe\u0026#39; }, { id: 2, name: \u0026#39;Rachel\u0026#39; }, { id: 3, name: \u0026#39;Ross\u0026#39; }, ]; function ChatRecipientPicker() { const [recipientID, setRecipientID] = useState(1); const isRecipientOnline = useFriendStatus(recipientID); return ( \u0026lt;\u0026gt; \u0026lt;Circle color={isRecipientOnline ? \u0026#39;green\u0026#39; : \u0026#39;red\u0026#39;} /\u0026gt; \u0026lt;select value={recipientID} onChange={e =\u0026gt; setRecipientID(Number(e.target.value))} \u0026gt; {friendList.map(friend =\u0026gt; ( \u0026lt;option key={friend.id} value={friend.id}\u0026gt; {friend.name} \u0026lt;/option\u0026gt; ))} \u0026lt;/select\u0026gt; \u0026lt;/\u0026gt; ); } We keep the currently chosen friend ID in the recipientID state variable, and update it if the user chooses a different friend in the \u0026lt;select\u0026gt; picker.\nBecause the useState Hook call gives us the latest value of the recipientID state variable, we can pass it to our custom useFriendStatus Hook as an argument:\nconst [recipientID, setRecipientID] = useState(1); const isRecipientOnline = useFriendStatus(recipientID); This lets us know whether the currently selected friend is online. If we pick a different friend and update the recipientID state variable, our useFriendStatus Hook will unsubscribe from the previously selected friend, and subscribe to the status of the newly selected one.\nuseYourImagination() # Custom Hooks offer the flexibility of sharing logic that wasn’t possible in React components before. You can write custom Hooks that cover a wide range of use cases like form handling, animation, declarative subscriptions, timers, and probably many more we haven’t considered. What’s more, you can build Hooks that are just as easy to use as React’s built-in features.\nTry to resist adding abstraction too early. Now that function components can do more, it’s likely that the average function component in your codebase will become longer. This is normal — don’t feel like you have to immediately split it into Hooks. But we also encourage you to start spotting cases where a custom Hook could hide complex logic behind a simple interface, or help untangle a messy component.\nFor example, maybe you have a complex component that contains a lot of local state that is managed in an ad-hoc way. useState doesn’t make centralizing the update logic any easier so you might prefer to write it as a Redux reducer:\nfunction todosReducer(state, action) { switch (action.type) { case \u0026#39;add\u0026#39;: return [...state, { text: action.text, completed: false }]; // ... other actions ... default: return state; } } Reducers are very convenient to test in isolation, and scale to express complex update logic. You can further break them apart into smaller reducers if necessary. However, you might also enjoy the benefits of using React local state, or might not want to install another library.\nSo what if we could write a useReducer Hook that lets us manage the local state of our component with a reducer? A simplified version of it might look like this:\nfunction useReducer(reducer, initialState) { const [state, setState] = useState(initialState); function dispatch(action) { const nextState = reducer(state, action); setState(nextState); } return [state, dispatch]; } Now we could use it in our component, and let the reducer drive its state management:\nfunction Todos() { const [todos, dispatch] = useReducer(todosReducer, []); function handleAddClick(text) { dispatch({ type: \u0026#39;add\u0026#39;, text }); } // ... } The need to manage local state with a reducer in a complex component is common enough that we’ve built the useReducer Hook right into React. You’ll find it together with other built-in Hooks in the Hooks API reference.\n"},{"id":383,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/hooks-api-reference/","title":"Hooks API Reference","section":"Hooks","content":" Hooks API Reference # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nThese new documentation pages teach modern React:\nreact: Hooks Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\nThis page describes the APIs for the built-in Hooks in React.\nIf you’re new to Hooks, you might want to check out the overview first. You may also find useful information in the frequently asked questions section.\nBasic Hooks useState useEffect useContext Additional Hooks useReducer useCallback useMemo useRef useImperativeHandle useLayoutEffect useDebugValue useDeferredValue useTransition useId Library Hooks useSyncExternalStore useInsertionEffect Basic Hooks # useState # This content is out of date.\nRead the new React documentation for useState.\nconst [state, setState] = useState(initialState); Returns a stateful value, and a function to update it.\nDuring the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).\nThe setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component.\nDuring subsequent re-renders, the first value returned by useState will always be the most recent state after applying updates.\nNote\nReact guarantees that setState function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the useEffect or useCallback dependency list.\nFunctional updates\nIf the new state is computed using the previous state, you can pass a function to setState. The function will receive the previous value, and return an updated value. Here’s an example of a counter component that uses both forms of setState:\nfunction Counter({initialCount}) { const [count, setCount] = useState(initialCount); return ( \u0026lt;\u0026gt; Count: {count} \u0026lt;button onClick={() =\u0026gt; setCount(initialCount)}\u0026gt;Reset\u0026lt;/button\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(prevCount =\u0026gt; prevCount - 1)}\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(prevCount =\u0026gt; prevCount + 1)}\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/\u0026gt; ); } The ”+” and ”-” buttons use the functional form, because the updated value is based on the previous value. But the “Reset” button uses the normal form, because it always sets the count back to the initial value.\nIf your update function returns the exact same value as the current state, the subsequent rerender will be skipped completely.\nNote\nUnlike the setState method found in class components, useState does not automatically merge update objects. You can replicate this behavior by combining the function updater form with object spread syntax:\nconst [state, setState] = useState({}); setState(prevState =\u0026gt; { // Object.assign would also work return {...prevState, ...updatedValues}; }); Another option is useReducer, which is more suited for managing state objects that contain multiple sub-values.\nLazy initial state\nThe initialState argument is the state used during the initial render. In subsequent renders, it is disregarded. If the initial state is the result of an expensive computation, you may provide a function instead, which will be executed only on the initial render:\nconst [state, setState] = useState(() =\u0026gt; { const initialState = someExpensiveComputation(props); return initialState; }); Bailing out of a state update\nIf you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.)\nNote that React may still need to render that specific component again before bailing out. That shouldn’t be a concern because React won’t unnecessarily go “deeper” into the tree. If you’re doing expensive calculations while rendering, you can optimize them with useMemo.\nBatching of state updates\nReact may group several state updates into a single re-render to improve performance. Normally, this improves performance and shouldn’t affect your application’s behavior.\nBefore React 18, only updates inside React event handlers were batched. Starting with React 18, batching is enabled for all updates by default. Note that React makes sure that updates from several different user-initiated events — for example, clicking a button twice — are always processed separately and do not get batched. This prevents logical mistakes.\nIn the rare case that you need to force the DOM update to be applied synchronously, you may wrap it in flushSync. However, this can hurt performance so do this only where needed.\nuseEffect # This content is out of date.\nRead the new React documentation for useEffect.\nAccepts a function that contains imperative, possibly effectful code.\nMutations, subscriptions, timers, logging, and other side effects are not allowed inside the main body of a function component (referred to as React’s render phase). Doing so will lead to confusing bugs and inconsistencies in the UI.\nInstead, use useEffect. The function passed to useEffect will run after the render is committed to the screen. Think of effects as an escape hatch from React’s purely functional world into the imperative world.\nBy default, effects run after every completed render, but you can choose to fire them only when certain values have changed.\nCleaning up an effect\nOften, effects create resources that need to be cleaned up before the component leaves the screen, such as a subscription or timer ID. To do this, the function passed to useEffect may return a clean-up function. For example, to create a subscription:\nuseEffect(() =\u0026gt; { const subscription = props.source.subscribe(); return () =\u0026gt; { // Clean up the subscription subscription.unsubscribe(); }; }); The clean-up function runs before the component is removed from the UI to prevent memory leaks. Additionally, if a component renders multiple times (as they typically do), the previous effect is cleaned up before executing the next effect. In our example, this means a new subscription is created on every update. To avoid firing an effect on every update, refer to the next section.\nTiming of effects\nUnlike componentDidMount and componentDidUpdate, the function passed to useEffect fires after layout and paint, during a deferred event. This makes it suitable for the many common side effects, like setting up subscriptions and event handlers, because most types of work shouldn’t block the browser from updating the screen.\nHowever, not all effects can be deferred. For example, a DOM mutation that is visible to the user must fire synchronously before the next paint so that the user does not perceive a visual inconsistency. (The distinction is conceptually similar to passive versus active event listeners.) For these types of effects, React provides one additional Hook called useLayoutEffect. It has the same signature as useEffect, and only differs in when it is fired.\nAdditionally, starting in React 18, the function passed to useEffect will fire synchronously before layout and paint when it’s the result of a discrete user input such as a click, or when it’s the result of an update wrapped in flushSync. This behavior allows the result of the effect to be observed by the event system, or by the caller of flushSync.\nNote\nThis only affects the timing of when the function passed to useEffect is called - updates scheduled inside these effects are still deferred. This is different than useLayoutEffect, which fires the function and processes the updates inside of it immediately.\nEven in cases where useEffect is deferred until after the browser has painted, it’s guaranteed to fire before any new renders. React will always flush a previous render’s effects before starting a new update.\nConditionally firing an effect\nThe default behavior for effects is to fire the effect after every completed render. That way an effect is always recreated if one of its dependencies changes.\nHowever, this may be overkill in some cases, like the subscription example from the previous section. We don’t need to create a new subscription on every update, only if the source prop has changed.\nTo implement this, pass a second argument to useEffect that is the array of values that the effect depends on. Our updated example now looks like this:\nuseEffect( () =\u0026gt; { const subscription = props.source.subscribe(); return () =\u0026gt; { subscription.unsubscribe(); }; }, [props.source], ); Now the subscription will only be recreated when props.source changes.\nNote\nIf you use this optimization, make sure the array includes all values from the component scope (such as props and state) that change over time and that are used by the effect. Otherwise, your code will reference stale values from previous renders. Learn more about how to deal with functions and what to do when the array values change too often.\nIf you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument. This tells React that your effect doesn’t depend on any values from props or state, so it never needs to re-run. This isn’t handled as a special case — it follows directly from how the dependencies array always works.\nIf you pass an empty array ([]), the props and state inside the effect will always have their initial values. While passing [] as the second argument is closer to the familiar componentDidMount and componentWillUnmount mental model, there are usually better solutions to avoid re-running effects too often. Also, don’t forget that React defers running useEffect until after the browser has painted, so doing extra work is less of a problem.\nWe recommend using the exhaustive-deps rule as part of our eslint-plugin-react-hooks package. It warns when dependencies are specified incorrectly and suggests a fix.\nThe array of dependencies is not passed as arguments to the effect function. Conceptually, though, that’s what they represent: every value referenced inside the effect function should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.\nuseContext # This content is out of date.\nRead the new React documentation for useContext.\nconst value = useContext(MyContext); Accepts a context object (the value returned from React.createContext) and returns the current context value for that context. The current context value is determined by the value prop of the nearest \u0026lt;MyContext.Provider\u0026gt; above the calling component in the tree.\nWhen the nearest \u0026lt;MyContext.Provider\u0026gt; above the component updates, this Hook will trigger a rerender with the latest context value passed to that MyContext provider. Even if an ancestor uses React.memo or shouldComponentUpdate, a rerender will still happen starting at the component itself using useContext.\nDon’t forget that the argument to useContext must be the context object itself:\nCorrect: useContext(MyContext) Incorrect: useContext(MyContext.Consumer) Incorrect: useContext(MyContext.Provider) A component calling useContext will always re-render when the context value changes. If re-rendering the component is expensive, you can optimize it by using memoization.\nTip\nIf you’re familiar with the context API before Hooks, useContext(MyContext) is equivalent to static contextType = MyContext in a class, or to \u0026lt;MyContext.Consumer\u0026gt;.\nuseContext(MyContext) only lets you read the context and subscribe to its changes. You still need a \u0026lt;MyContext.Provider\u0026gt; above in the tree to provide the value for this context.\nPutting it together with Context.Provider\nconst themes = { light: { foreground: \u0026#34;#000000\u0026#34;, background: \u0026#34;#eeeeee\u0026#34; }, dark: { foreground: \u0026#34;#ffffff\u0026#34;, background: \u0026#34;#222222\u0026#34; } }; const ThemeContext = React.createContext(themes.light); function App() { return ( \u0026lt;ThemeContext.Provider value={themes.dark}\u0026gt; \u0026lt;Toolbar /\u0026gt; \u0026lt;/ThemeContext.Provider\u0026gt; ); } function Toolbar(props) { return ( \u0026lt;div\u0026gt; \u0026lt;ThemedButton /\u0026gt; \u0026lt;/div\u0026gt; ); } function ThemedButton() { const theme = useContext(ThemeContext); return ( \u0026lt;button style={{ background: theme.background, color: theme.foreground }}\u0026gt; I am styled by theme context! \u0026lt;/button\u0026gt; ); } This example is modified for hooks from a previous example in the Context Advanced Guide, where you can find more information about when and how to use Context.\nAdditional Hooks # The following Hooks are either variants of the basic ones from the previous section, or only needed for specific edge cases. Don’t stress about learning them up front.\nuseReducer # This content is out of date.\nRead the new React documentation for useReducer.\nconst [state, dispatch] = useReducer(reducer, initialArg, init); An alternative to useState. Accepts a reducer of type (state, action) =\u0026gt; newState, and returns the current state paired with a dispatch method. (If you’re familiar with Redux, you already know how this works.)\nuseReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. useReducer also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks.\nHere’s the counter example from the useState section, rewritten to use a reducer:\nconst initialState = {count: 0}; function reducer(state, action) { switch (action.type) { case \u0026#39;increment\u0026#39;: return {count: state.count + 1}; case \u0026#39;decrement\u0026#39;: return {count: state.count - 1}; default: throw new Error(); } } function Counter() { const [state, dispatch] = useReducer(reducer, initialState); return ( \u0026lt;\u0026gt; Count: {state.count} \u0026lt;button onClick={() =\u0026gt; dispatch({type: \u0026#39;decrement\u0026#39;})}\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;button onClick={() =\u0026gt; dispatch({type: \u0026#39;increment\u0026#39;})}\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/\u0026gt; ); } Note\nReact guarantees that dispatch function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the useEffect or useCallback dependency list.\nSpecifying the initial state\nThere are two different ways to initialize useReducer state. You may choose either one depending on the use case. The simplest way is to pass the initial state as a second argument:\nconst [state, dispatch] = useReducer( reducer, {count: initialCount} ); Note\nReact doesn’t use the state = initialState argument convention popularized by Redux. The initial value sometimes needs to depend on props and so is specified from the Hook call instead. If you feel strongly about this, you can call useReducer(reducer, undefined, reducer) to emulate the Redux behavior, but it’s not encouraged.\nLazy initialization\nYou can also create the initial state lazily. To do this, you can pass an init function as the third argument. The initial state will be set to init(initialArg).\nIt lets you extract the logic for calculating the initial state outside the reducer. This is also handy for resetting the state later in response to an action:\nfunction init(initialCount) { return {count: initialCount};} function reducer(state, action) { switch (action.type) { case \u0026#39;increment\u0026#39;: return {count: state.count + 1}; case \u0026#39;decrement\u0026#39;: return {count: state.count - 1}; case \u0026#39;reset\u0026#39;: return init(action.payload); default: throw new Error(); } } function Counter({initialCount}) { const [state, dispatch] = useReducer(reducer, initialCount, init); return ( \u0026lt;\u0026gt; Count: {state.count} \u0026lt;button onClick={() =\u0026gt; dispatch({type: \u0026#39;reset\u0026#39;, payload: initialCount})}\u0026gt; Reset \u0026lt;/button\u0026gt; \u0026lt;button onClick={() =\u0026gt; dispatch({type: \u0026#39;decrement\u0026#39;})}\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;button onClick={() =\u0026gt; dispatch({type: \u0026#39;increment\u0026#39;})}\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/\u0026gt; ); } Bailing out of a dispatch\nIf you return the same value from a Reducer Hook as the current state, React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.)\nNote that React may still need to render that specific component again before bailing out. That shouldn’t be a concern because React won’t unnecessarily go “deeper” into the tree. If you’re doing expensive calculations while rendering, you can optimize them with useMemo.\nuseCallback # This content is out of date.\nRead the new React documentation for useCallback.\nconst memoizedCallback = useCallback( () =\u0026gt; { doSomething(a, b); }, [a, b], ); Returns a memoized callback.\nPass an inline callback and an array of dependencies. useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. shouldComponentUpdate).\nuseCallback(fn, deps) is equivalent to useMemo(() =\u0026gt; fn, deps).\nNote\nThe array of dependencies is not passed as arguments to the callback. Conceptually, though, that’s what they represent: every value referenced inside the callback should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.\nWe recommend using the exhaustive-deps rule as part of our eslint-plugin-react-hooks package. It warns when dependencies are specified incorrectly and suggests a fix.\nuseMemo # This content is out of date.\nRead the new React documentation for useMemo.\nconst memoizedValue = useMemo(() =\u0026gt; computeExpensiveValue(a, b), [a, b]); Returns a memoized value.\nPass a “create” function and an array of dependencies. useMemo will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.\nRemember that the function passed to useMemo runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. For example, side effects belong in useEffect, not useMemo.\nIf no array is provided, a new value will be computed on every render.\nYou may rely on useMemo as a performance optimization, not as a semantic guarantee. In the future, React may choose to “forget” some previously memoized values and recalculate them on next render, e.g. to free memory for offscreen components. Write your code so that it still works without useMemo — and then add it to optimize performance.\nNote\nThe array of dependencies is not passed as arguments to the function. Conceptually, though, that’s what they represent: every value referenced inside the function should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.\nWe recommend using the exhaustive-deps rule as part of our eslint-plugin-react-hooks package. It warns when dependencies are specified incorrectly and suggests a fix.\nuseRef # This content is out of date.\nRead the new React documentation for useRef.\nconst refContainer = useRef(initialValue); useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component.\nA common use case is to access a child imperatively:\nfunction TextInputWithFocusButton() { const inputEl = useRef(null); const onButtonClick = () =\u0026gt; { // `current` points to the mounted text input element inputEl.current.focus(); }; return ( \u0026lt;\u0026gt; \u0026lt;input ref={inputEl} type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;button onClick={onButtonClick}\u0026gt;Focus the input\u0026lt;/button\u0026gt; \u0026lt;/\u0026gt; ); } Essentially, useRef is like a “box” that can hold a mutable value in its .current property.\nYou might be familiar with refs primarily as a way to access the DOM. If you pass a ref object to React with \u0026lt;div ref={myRef} /\u0026gt;, React will set its .current property to the corresponding DOM node whenever that node changes.\nHowever, useRef() is useful for more than the ref attribute. It’s handy for keeping any mutable value around similar to how you’d use instance fields in classes.\nThis works because useRef() creates a plain JavaScript object. The only difference between useRef() and creating a {current: ...} object yourself is that useRef will give you the same ref object on every render.\nKeep in mind that useRef doesn’t notify you when its content changes. Mutating the .current property doesn’t cause a re-render. If you want to run some code when React attaches or detaches a ref to a DOM node, you may want to use a callback ref instead.\nuseImperativeHandle # useImperativeHandle(ref, createHandle, [deps]) useImperativeHandle customizes the instance value that is exposed to parent components when using ref. As always, imperative code using refs should be avoided in most cases. useImperativeHandle should be used with forwardRef:\nfunction FancyInput(props, ref) { const inputRef = useRef(); useImperativeHandle(ref, () =\u0026gt; ({ focus: () =\u0026gt; { inputRef.current.focus(); } })); return \u0026lt;input ref={inputRef} ... /\u0026gt;; } FancyInput = forwardRef(FancyInput); In this example, a parent component that renders \u0026lt;FancyInput ref={inputRef} /\u0026gt; would be able to call inputRef.current.focus().\nuseLayoutEffect # This content is out of date.\nRead the new React documentation for useLayoutEffect.\nThe signature is identical to useEffect, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint.\nPrefer the standard useEffect when possible to avoid blocking visual updates.\nTip\nIf you’re migrating code from a class component, note useLayoutEffect fires in the same phase as componentDidMount and componentDidUpdate. However, we recommend starting with useEffect first and only trying useLayoutEffect if that causes a problem.\nIf you use server rendering, keep in mind that neither useLayoutEffect nor useEffect can run until the JavaScript is downloaded. This is why React warns when a server-rendered component contains useLayoutEffect. To fix this, either move that logic to useEffect (if it isn’t necessary for the first render), or delay showing that component until after the client renders (if the HTML looks broken until useLayoutEffect runs).\nTo exclude a component that needs layout effects from the server-rendered HTML, render it conditionally with showChild \u0026amp;\u0026amp; \u0026lt;Child /\u0026gt; and defer showing it with useEffect(() =\u0026gt; { setShowChild(true); }, []). This way, the UI doesn’t appear broken before hydration.\nuseDebugValue # This content is out of date.\nRead the new React documentation for useDebugValue.\nuseDebugValue can be used to display a label for custom hooks in React DevTools.\nFor example, consider the useFriendStatus custom Hook described in “Building Your Own Hooks”:\nfunction useFriendStatus(friendID) { const [isOnline, setIsOnline] = useState(null); // ... // Show a label in DevTools next to this Hook // e.g. \u0026#34;FriendStatus: Online\u0026#34; useDebugValue(isOnline ? \u0026#39;Online\u0026#39; : \u0026#39;Offline\u0026#39;); return isOnline; } Tip\nWe don’t recommend adding debug values to every custom Hook. It’s most valuable for custom Hooks that are part of shared libraries.\nDefer formatting debug values\nIn some cases formatting a value for display might be an expensive operation. It’s also unnecessary unless a Hook is actually inspected.\nFor this reason useDebugValue accepts a formatting function as an optional second parameter. This function is only called if the Hooks are inspected. It receives the debug value as a parameter and should return a formatted display value.\nFor example a custom Hook that returned a Date value could avoid calling the toDateString function unnecessarily by passing the following formatter:\nuseDebugValue(date, date =\u0026gt; date.toDateString()); useDeferredValue # This content is out of date.\nRead the new React documentation for useDeferredValue.\nconst deferredValue = useDeferredValue(value); useDeferredValue accepts a value and returns a new copy of the value that will defer to more urgent updates. If the current render is the result of an urgent update, like user input, React will return the previous value and then render the new value after the urgent render has completed.\nThis hook is similar to user-space hooks which use debouncing or throttling to defer updates. The benefits to using useDeferredValue is that React will work on the update as soon as other work finishes (instead of waiting for an arbitrary amount of time), and like startTransition, deferred values can suspend without triggering an unexpected fallback for existing content.\nMemoizing deferred children\nuseDeferredValue only defers the value that you pass to it. If you want to prevent a child component from re-rendering during an urgent update, you must also memoize that component with React.memo or React.useMemo:\nfunction Typeahead() { const query = useSearchQuery(\u0026#39;\u0026#39;); const deferredQuery = useDeferredValue(query); // Memoizing tells React to only re-render when deferredQuery changes, // not when query changes. const suggestions = useMemo(() =\u0026gt; \u0026lt;SearchSuggestions query={deferredQuery} /\u0026gt;, [deferredQuery] ); return ( \u0026lt;\u0026gt; \u0026lt;SearchInput query={query} /\u0026gt; \u0026lt;Suspense fallback=\u0026#34;Loading results...\u0026#34;\u0026gt; {suggestions} \u0026lt;/Suspense\u0026gt; \u0026lt;/\u0026gt; ); } Memoizing the children tells React that it only needs to re-render them when deferredQuery changes and not when query changes. This caveat is not unique to useDeferredValue, and it’s the same pattern you would use with similar hooks that use debouncing or throttling.\nuseTransition # This content is out of date.\nRead the new React documentation for useTransition.\nconst [isPending, startTransition] = useTransition(); Returns a stateful value for the pending state of the transition, and a function to start it.\nstartTransition lets you mark updates in the provided callback as transitions:\nstartTransition(() =\u0026gt; { setCount(count + 1); }); isPending indicates when a transition is active to show a pending state:\nfunction App() { const [isPending, startTransition] = useTransition(); const [count, setCount] = useState(0); function handleClick() { startTransition(() =\u0026gt; { setCount(c =\u0026gt; c + 1); }); } return ( \u0026lt;div\u0026gt; {isPending \u0026amp;\u0026amp; \u0026lt;Spinner /\u0026gt;} \u0026lt;button onClick={handleClick}\u0026gt;{count}\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } Note:\nUpdates in a transition yield to more urgent updates such as clicks.\nUpdates in a transition will not show a fallback for re-suspended content. This allows the user to continue interacting with the current content while rendering the update.\nuseId # This content is out of date.\nRead the new React documentation for useId.\nuseId is a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatches.\nNote\nuseId is not for generating keys in a list. Keys should be generated from your data.\nFor a basic example, pass the id directly to the elements that need it:\nfunction Checkbox() { const id = useId(); return ( \u0026lt;\u0026gt; \u0026lt;label htmlFor={id}\u0026gt;Do you like React?\u0026lt;/label\u0026gt; \u0026lt;input id={id} type=\u0026#34;checkbox\u0026#34; name=\u0026#34;react\u0026#34;/\u0026gt; \u0026lt;/\u0026gt; ); }; For multiple IDs in the same component, append a suffix using the same id:\nfunction NameFields() { const id = useId(); return ( \u0026lt;div\u0026gt; \u0026lt;label htmlFor={id + \u0026#39;-firstName\u0026#39;}\u0026gt;First Name\u0026lt;/label\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input id={id + \u0026#39;-firstName\u0026#39;} type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;label htmlFor={id + \u0026#39;-lastName\u0026#39;}\u0026gt;Last Name\u0026lt;/label\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input id={id + \u0026#39;-lastName\u0026#39;} type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } Note:\nuseId generates a string that includes the : token. This helps ensure that the token is unique, but is not supported in CSS selectors or APIs like querySelectorAll.\nuseId supports an identifierPrefix to prevent collisions in multi-root apps. To configure, see the options for hydrateRoot and ReactDOMServer.\nLibrary Hooks # The following Hooks are provided for library authors to integrate libraries deeply into the React model, and are not typically used in application code.\nuseSyncExternalStore # const state = useSyncExternalStore(subscribe, getSnapshot[, getServerSnapshot]); useSyncExternalStore is a hook recommended for reading and subscribing from external data sources in a way that’s compatible with concurrent rendering features like selective hydration and time slicing.\nThis method returns the value of the store and accepts three arguments:\nsubscribe: function to register a callback that is called whenever the store changes. getSnapshot: function that returns the current value of the store. getServerSnapshot: function that returns the snapshot used during server rendering. The most basic example simply subscribes to the entire store:\nconst state = useSyncExternalStore(store.subscribe, store.getSnapshot); However, you can also subscribe to a specific field:\nconst selectedField = useSyncExternalStore( store.subscribe, () =\u0026gt; store.getSnapshot().selectedField, ); When server rendering, you must serialize the store value used on the server, and provide it to useSyncExternalStore. React will use this snapshot during hydration to prevent server mismatches:\nconst selectedField = useSyncExternalStore( store.subscribe, () =\u0026gt; store.getSnapshot().selectedField, () =\u0026gt; INITIAL_SERVER_SNAPSHOT.selectedField, ); Note:\ngetSnapshot must return a cached value. If getSnapshot is called multiple times in a row, it must return the same exact value unless there was a store update in between.\nA shim is provided for supporting multiple React versions published as use-sync-external-store/shim. This shim will prefer useSyncExternalStore when available, and fallback to a user-space implementation when it’s not.\nAs a convenience, we also provide a version of the API with automatic support for memoizing the result of getSnapshot published as use-sync-external-store/with-selector.\nuseInsertionEffect # useInsertionEffect(didUpdate); The signature is identical to useEffect, but it fires synchronously before all DOM mutations. Use this to inject styles into the DOM before reading layout in useLayoutEffect. Since this hook is limited in scope, this hook does not have access to refs and cannot schedule updates.\nNote:\nuseInsertionEffect should be limited to css-in-js library authors. Prefer useEffect or useLayoutEffect instead.\n"},{"id":384,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/hooks-at-a-glance/","title":"Hooks at a Glance","section":"Hooks","content":" Hooks at a Glance # Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\nHooks are backwards-compatible. This page provides an overview of Hooks for experienced React users. This is a fast-paced overview. If you get confused, look for a yellow box like this:\nDetailed Explanation\nRead the Motivation to learn why we’re introducing Hooks to React.\n↑↑↑ Each section ends with a yellow box like this. They link to detailed explanations.\n📌 State Hook # This example renders a counter. When you click the button, it increments the value:\nimport React, { useState } from \u0026#39;react\u0026#39;; function Example() { // Declare a new state variable, which we\u0026#39;ll call \u0026#34;count\u0026#34; const [count, setCount] = useState(0); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } Here, useState is a Hook (we’ll talk about what this means in a moment). We call it inside a function component to add some local state to it. React will preserve this state between re-renders. useState returns a pair: the current state value and a function that lets you update it. You can call this function from an event handler or somewhere else. It’s similar to this.setState in a class, except it doesn’t merge the old and new state together. (We’ll show an example comparing useState to this.state in Using the State Hook.)\nThe only argument to useState is the initial state. In the example above, it is 0 because our counter starts from zero. Note that unlike this.state, the state here doesn’t have to be an object — although it can be if you want. The initial state argument is only used during the first render.\nDeclaring multiple state variables\nYou can use the State Hook more than once in a single component:\nfunction ExampleWithManyStates() { // Declare multiple state variables! const [age, setAge] = useState(42); const [fruit, setFruit] = useState(\u0026#39;banana\u0026#39;); const [todos, setTodos] = useState([{ text: \u0026#39;Learn Hooks\u0026#39; }]); // ... } The array destructuring syntax lets us give different names to the state variables we declared by calling useState. These names aren’t a part of the useState API. Instead, React assumes that if you call useState many times, you do it in the same order during every render. We’ll come back to why this works and when this is useful later.\nBut what is a Hook?\nHooks are functions that let you “hook into” React state and lifecycle features from function components. Hooks don’t work inside classes — they let you use React without classes. (We don’t recommend rewriting your existing components overnight but you can start using Hooks in the new ones if you’d like.)\nReact provides a few built-in Hooks like useState. You can also create your own Hooks to reuse stateful behavior between different components. We’ll look at the built-in Hooks first.\nDetailed Explanation\nYou can learn more about the State Hook on a dedicated page: Using the State Hook.\n⚡️ Effect Hook # You’ve likely performed data fetching, subscriptions, or manually changing the DOM from React components before. We call these operations “side effects” (or “effects” for short) because they can affect other components and can’t be done during rendering.\nThe Effect Hook, useEffect, adds the ability to perform side effects from a function component. It serves the same purpose as componentDidMount, componentDidUpdate, and componentWillUnmount in React classes, but unified into a single API. (We’ll show examples comparing useEffect to these methods in Using the Effect Hook.)\nFor example, this component sets the document title after React updates the DOM:\nimport React, { useState, useEffect } from \u0026#39;react\u0026#39;; function Example() { const [count, setCount] = useState(0); // Similar to componentDidMount and componentDidUpdate: useEffect(() =\u0026gt; { // Update the document title using the browser API document.title = `You clicked ${count} times`; }); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } When you call useEffect, you’re telling React to run your “effect” function after flushing changes to the DOM. Effects are declared inside the component so they have access to its props and state. By default, React runs the effects after every render — including the first render. (We’ll talk more about how this compares to class lifecycles in Using the Effect Hook.)\nEffects may also optionally specify how to “clean up” after them by returning a function. For example, this component uses an effect to subscribe to a friend’s online status, and cleans up by unsubscribing from it:\nimport React, { useState, useEffect } from \u0026#39;react\u0026#39;; function FriendStatus(props) { const [isOnline, setIsOnline] = useState(null); function handleStatusChange(status) { setIsOnline(status.isOnline); } useEffect(() =\u0026gt; { ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); return () =\u0026gt; { ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange); }; }); if (isOnline === null) { return \u0026#39;Loading...\u0026#39;; } return isOnline ? \u0026#39;Online\u0026#39; : \u0026#39;Offline\u0026#39;; } In this example, React would unsubscribe from our ChatAPI when the component unmounts, as well as before re-running the effect due to a subsequent render. (If you want, there’s a way to tell React to skip re-subscribing if the props.friend.id we passed to ChatAPI didn’t change.)\nJust like with useState, you can use more than a single effect in a component:\nfunction FriendStatusWithCounter(props) { const [count, setCount] = useState(0); useEffect(() =\u0026gt; { document.title = `You clicked ${count} times`; }); const [isOnline, setIsOnline] = useState(null); useEffect(() =\u0026gt; { ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); return () =\u0026gt; { ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange); }; }); function handleStatusChange(status) { setIsOnline(status.isOnline); } // ... Hooks let you organize side effects in a component by what pieces are related (such as adding and removing a subscription), rather than forcing a split based on lifecycle methods.\nDetailed Explanation\nYou can learn more about useEffect on a dedicated page: Using the Effect Hook.\n✌️ Rules of Hooks # Hooks are JavaScript functions, but they impose two additional rules:\nOnly call Hooks at the top level. Don’t call Hooks inside loops, conditions, or nested functions. Only call Hooks from React function components. Don’t call Hooks from regular JavaScript functions. (There is just one other valid place to call Hooks — your own custom Hooks. We’ll learn about them in a moment.) We provide a linter plugin to enforce these rules automatically. We understand these rules might seem limiting or confusing at first, but they are essential to making Hooks work well.\nDetailed Explanation\nYou can learn more about these rules on a dedicated page: Rules of Hooks.\n💡 Building Your Own Hooks # Sometimes, we want to reuse some stateful logic between components. Traditionally, there were two popular solutions to this problem: higher-order components and render props. Custom Hooks let you do this, but without adding more components to your tree.\nEarlier on this page, we introduced a FriendStatus component that calls the useState and useEffect Hooks to subscribe to a friend’s online status. Let’s say we also want to reuse this subscription logic in another component.\nFirst, we’ll extract this logic into a custom Hook called useFriendStatus:\nimport React, { useState, useEffect } from \u0026#39;react\u0026#39;; function useFriendStatus(friendID) { const [isOnline, setIsOnline] = useState(null); function handleStatusChange(status) { setIsOnline(status.isOnline); } useEffect(() =\u0026gt; { ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange); return () =\u0026gt; { ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange); }; }); return isOnline; } It takes friendID as an argument, and returns whether our friend is online.\nNow we can use it from both components:\nfunction FriendStatus(props) { const isOnline = useFriendStatus(props.friend.id); if (isOnline === null) { return \u0026#39;Loading...\u0026#39;; } return isOnline ? \u0026#39;Online\u0026#39; : \u0026#39;Offline\u0026#39;; } function FriendListItem(props) { const isOnline = useFriendStatus(props.friend.id); return ( \u0026lt;li style={{ color: isOnline ? \u0026#39;green\u0026#39; : \u0026#39;black\u0026#39; }}\u0026gt; {props.friend.name} \u0026lt;/li\u0026gt; ); } The state of each component is completely independent. Hooks are a way to reuse stateful logic, not state itself. In fact, each call to a Hook has a completely isolated state — so you can even use the same custom Hook twice in one component.\nCustom Hooks are more of a convention than a feature. If a function’s name starts with ”use” and it calls other Hooks, we say it is a custom Hook. The useSomething naming convention is how our linter plugin is able to find bugs in the code using Hooks.\nYou can write custom Hooks that cover a wide range of use cases like form handling, animation, declarative subscriptions, timers, and probably many more we haven’t considered. We are excited to see what custom Hooks the React community will come up with.\nDetailed Explanation\nYou can learn more about custom Hooks on a dedicated page: Building Your Own Hooks.\n🔌 Other Hooks # There are a few less commonly used built-in Hooks that you might find useful. For example, useContext lets you subscribe to React context without introducing nesting:\nfunction Example() { const locale = useContext(LocaleContext); const theme = useContext(ThemeContext); // ... } And useReducer lets you manage local state of complex components with a reducer:\nfunction Todos() { const [todos, dispatch] = useReducer(todosReducer); // ... Detailed Explanation\nYou can learn more about all the built-in Hooks on a dedicated page: Hooks API Reference.\nNext Steps # Phew, that was fast! If some things didn’t quite make sense or you’d like to learn more in detail, you can read the next pages, starting with the State Hook documentation.\nYou can also check out the Hooks API reference and the Hooks FAQ.\nFinally, don’t miss the introduction page which explains why we’re adding Hooks and how we’ll start using them side by side with classes — without rewriting our apps.\n"},{"id":385,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/hooks-faq/","title":"Hooks Faq","section":"Hooks","content":" 🌵 Hooks FAQ # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nThe new documentation pages teaches React with Hooks.\nHooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\nThis page answers some of the frequently asked questions about Hooks.\nAdoption Strategy Which versions of React include Hooks? Do I need to rewrite all my class components? What can I do with Hooks that I couldn’t with classes? How much of my React knowledge stays relevant? Should I use Hooks, classes, or a mix of both? Do Hooks cover all use cases for classes? Do Hooks replace render props and higher-order components? What do Hooks mean for popular APIs like Redux connect() and React Router? Do Hooks work with static typing? How to test components that use Hooks? What exactly do the lint rules enforce? From Classes to Hooks How do lifecycle methods correspond to Hooks? How can I do data fetching with Hooks? Is there something like instance variables? Should I use one or many state variables? Can I run an effect only on updates? How to get the previous props or state? Why am I seeing stale props or state inside my function? How do I implement getDerivedStateFromProps? Is there something like forceUpdate? Can I make a ref to a function component? How can I measure a DOM node? What does const [thing, setThing] = useState() mean? Performance Optimizations Can I skip an effect on updates? Is it safe to omit functions from the list of dependencies? What can I do if my effect dependencies change too often? How do I implement shouldComponentUpdate? How to memoize calculations? How to create expensive objects lazily? Are Hooks slow because of creating functions in render? How to avoid passing callbacks down? How to read an often-changing value from useCallback? Under the Hood How does React associate Hook calls with components? What is the prior art for Hooks? Adoption Strategy # Which versions of React include Hooks? # Starting with 16.8.0, React includes a stable implementation of React Hooks for:\nReact DOM React Native React DOM Server React Test Renderer React Shallow Renderer Note that to enable Hooks, all React packages need to be 16.8.0 or higher. Hooks won’t work if you forget to update, for example, React DOM.\nReact Native 0.59 and above support Hooks.\nDo I need to rewrite all my class components? # No. There are no plans to remove classes from React — we all need to keep shipping products and can’t afford rewrites. We recommend trying Hooks in new code.\nWhat can I do with Hooks that I couldn’t with classes? # Hooks offer a powerful and expressive new way to reuse functionality between components. “Building Your Own Hooks” provides a glimpse of what’s possible. This article by a React core team member dives deeper into the new capabilities unlocked by Hooks.\nHow much of my React knowledge stays relevant? # Hooks are a more direct way to use the React features you already know — such as state, lifecycle, context, and refs. They don’t fundamentally change how React works, and your knowledge of components, props, and top-down data flow is just as relevant.\nHooks do have a learning curve of their own. If there’s something missing in this documentation, raise an issue and we’ll try to help.\nShould I use Hooks, classes, or a mix of both? # When you’re ready, we’d encourage you to start trying Hooks in new components you write. Make sure everyone on your team is on board with using them and familiar with this documentation. We don’t recommend rewriting your existing classes to Hooks unless you planned to rewrite them anyway (e.g. to fix bugs).\nYou can’t use Hooks inside a class component, but you can definitely mix classes and function components with Hooks in a single tree. Whether a component is a class or a function that uses Hooks is an implementation detail of that component. In the longer term, we expect Hooks to be the primary way people write React components.\nDo Hooks cover all use cases for classes? # Our goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon getSnapshotBeforeUpdate, getDerivedStateFromError and componentDidCatch lifecycles yet, but we plan to add them soon.\nDo Hooks replace render props and higher-order components? # Often, render props and higher-order components render only a single child. We think Hooks are a simpler way to serve this use case. There is still a place for both patterns (for example, a virtual scroller component might have a renderItem prop, or a visual container component might have its own DOM structure). But in most cases, Hooks will be sufficient and can help reduce nesting in your tree.\nWhat do Hooks mean for popular APIs like Redux connect() and React Router? # You can continue to use the exact same APIs as you always have; they’ll continue to work.\nReact Redux since v7.1.0 supports Hooks API and exposes hooks like useDispatch or useSelector.\nReact Router supports hooks since v5.1.\nOther libraries might support hooks in the future too.\nDo Hooks work with static typing? # Hooks were designed with static typing in mind. Because they’re functions, they are easier to type correctly than patterns like higher-order components. The latest Flow and TypeScript React definitions include support for React Hooks.\nImportantly, custom Hooks give you the power to constrain React API if you’d like to type them more strictly in some way. React gives you the primitives, but you can combine them in different ways than what we provide out of the box.\nHow to test components that use Hooks? # From React’s point of view, a component using Hooks is just a regular component. If your testing solution doesn’t rely on React internals, testing components with Hooks shouldn’t be different from how you normally test components.\nNote\nTesting Recipes include many examples that you can copy and paste.\nFor example, let’s say we have this counter component:\nfunction Example() { const [count, setCount] = useState(0); useEffect(() =\u0026gt; { document.title = `You clicked ${count} times`; }); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } We’ll test it using React DOM. To make sure that the behavior matches what happens in the browser, we’ll wrap the code rendering and updating it into ReactTestUtils.act() calls:\nimport React from \u0026#39;react\u0026#39;; import ReactDOM from \u0026#39;react-dom/client\u0026#39;; import { act } from \u0026#39;react-dom/test-utils\u0026#39;;import Counter from \u0026#39;./Counter\u0026#39;; let container; beforeEach(() =\u0026gt; { container = document.createElement(\u0026#39;div\u0026#39;); document.body.appendChild(container); }); afterEach(() =\u0026gt; { document.body.removeChild(container); container = null; }); it(\u0026#39;can render and update a counter\u0026#39;, () =\u0026gt; { // Test first render and effect act(() =\u0026gt; { ReactDOM.createRoot(container).render(\u0026lt;Counter /\u0026gt;); }); const button = container.querySelector(\u0026#39;button\u0026#39;); const label = container.querySelector(\u0026#39;p\u0026#39;); expect(label.textContent).toBe(\u0026#39;You clicked 0 times\u0026#39;); expect(document.title).toBe(\u0026#39;You clicked 0 times\u0026#39;); // Test second render and effect act(() =\u0026gt; { button.dispatchEvent(new MouseEvent(\u0026#39;click\u0026#39;, {bubbles: true})); }); expect(label.textContent).toBe(\u0026#39;You clicked 1 times\u0026#39;); expect(document.title).toBe(\u0026#39;You clicked 1 times\u0026#39;); }); The calls to act() will also flush the effects inside of them.\nIf you need to test a custom Hook, you can do so by creating a component in your test, and using your Hook from it. Then you can test the component you wrote.\nTo reduce the boilerplate, we recommend using React Testing Library which is designed to encourage writing tests that use your components as the end users do.\nFor more information, check out Testing Recipes.\nWhat exactly do the lint rules enforce? # We provide an ESLint plugin that enforces rules of Hooks to avoid bugs. It assumes that any function starting with ”use” and a capital letter right after it is a Hook. We recognize this heuristic isn’t perfect and there may be some false positives, but without an ecosystem-wide convention there is just no way to make Hooks work well — and longer names will discourage people from either adopting Hooks or following the convention.\nIn particular, the rule enforces that:\nCalls to Hooks are either inside a PascalCase function (assumed to be a component) or another useSomething function (assumed to be a custom Hook). Hooks are called in the same order on every render. There are a few more heuristics, and they might change over time as we fine-tune the rule to balance finding bugs with avoiding false positives.\nFrom Classes to Hooks # How do lifecycle methods correspond to Hooks? # constructor: Function components don’t need a constructor. You can initialize the state in the useState call. If computing the initial state is expensive, you can pass a function to useState. getDerivedStateFromProps: Schedule an update while rendering instead. shouldComponentUpdate: See React.memo below. render: This is the function component body itself. componentDidMount, componentDidUpdate, componentWillUnmount: The useEffect Hook can express all combinations of these (including less common cases). getSnapshotBeforeUpdate, componentDidCatch and getDerivedStateFromError: There are no Hook equivalents for these methods yet, but they will be added soon. How can I do data fetching with Hooks? # Here is a small demo to get you started. To learn more, check out this article about data fetching with Hooks.\nIs there something like instance variables? # Yes! The useRef() Hook isn’t just for DOM refs. The “ref” object is a generic container whose current property is mutable and can hold any value, similar to an instance property on a class.\nYou can write to it from inside useEffect:\nfunction Timer() { const intervalRef = useRef(); useEffect(() =\u0026gt; { const id = setInterval(() =\u0026gt; { // ... }); intervalRef.current = id; return () =\u0026gt; { clearInterval(intervalRef.current); }; }); // ... } If we just wanted to set an interval, we wouldn’t need the ref (id could be local to the effect), but it’s useful if we want to clear the interval from an event handler:\n// ... function handleCancelClick() { clearInterval(intervalRef.current); } // ... Conceptually, you can think of refs as similar to instance variables in a class. Unless you’re doing lazy initialization, avoid setting refs during rendering — this can lead to surprising behavior. Instead, typically you want to modify refs in event handlers and effects.\nShould I use one or many state variables? # If you’re coming from classes, you might be tempted to always call useState() once and put all state into a single object. You can do it if you’d like. Here is an example of a component that follows the mouse movement. We keep its position and size in the local state:\nfunction Box() { const [state, setState] = useState({ left: 0, top: 0, width: 100, height: 100 }); // ... } Now let’s say we want to write some logic that changes left and top when the user moves their mouse. Note how we have to merge these fields into the previous state object manually:\n// ... useEffect(() =\u0026gt; { function handleWindowMouseMove(e) { // Spreading \u0026#34;...state\u0026#34; ensures we don\u0026#39;t \u0026#34;lose\u0026#34; width and height setState(state =\u0026gt; ({ ...state, left: e.pageX, top: e.pageY })); } // Note: this implementation is a bit simplified window.addEventListener(\u0026#39;mousemove\u0026#39;, handleWindowMouseMove); return () =\u0026gt; window.removeEventListener(\u0026#39;mousemove\u0026#39;, handleWindowMouseMove); }, []); // ... This is because when we update a state variable, we replace its value. This is different from this.setState in a class, which merges the updated fields into the object.\nIf you miss automatic merging, you could write a custom useLegacyState Hook that merges object state updates. However, we recommend to split state into multiple state variables based on which values tend to change together.\nFor example, we could split our component state into position and size objects, and always replace the position with no need for merging:\nfunction Box() { const [position, setPosition] = useState({ left: 0, top: 0 }); const [size, setSize] = useState({ width: 100, height: 100 }); useEffect(() =\u0026gt; { function handleWindowMouseMove(e) { setPosition({ left: e.pageX, top: e.pageY }); } // ... Separating independent state variables also has another benefit. It makes it easy to later extract some related logic into a custom Hook, for example:\nfunction Box() { const position = useWindowPosition(); const [size, setSize] = useState({ width: 100, height: 100 }); // ... } function useWindowPosition() { const [position, setPosition] = useState({ left: 0, top: 0 }); useEffect(() =\u0026gt; { // ... }, []); return position; } Note how we were able to move the useState call for the position state variable and the related effect into a custom Hook without changing their code. If all state was in a single object, extracting it would be more difficult.\nBoth putting all state in a single useState call, and having a useState call per each field can work. Components tend to be most readable when you find a balance between these two extremes, and group related state into a few independent state variables. If the state logic becomes complex, we recommend managing it with a reducer or a custom Hook.\nCan I run an effect only on updates? # This is a rare use case. If you need it, you can use a mutable ref to manually store a boolean value corresponding to whether you are on the first or a subsequent render, then check that flag in your effect. (If you find yourself doing this often, you could create a custom Hook for it.)\nHow to get the previous props or state? # There are two cases in which you might want to get previous props or state.\nSometimes, you need previous props to clean up an effect. For example, you might have an effect that subscribes to a socket based on the userId prop. If the userId prop changes, you want to unsubscribe from the previous userId and subscribe to the next one. You don’t need to do anything special for this to work:\nuseEffect(() =\u0026gt; { ChatAPI.subscribeToSocket(props.userId); return () =\u0026gt; ChatAPI.unsubscribeFromSocket(props.userId); }, [props.userId]); In the above example, if userId changes from 3 to 4, ChatAPI.unsubscribeFromSocket(3) will run first, and then ChatAPI.subscribeToSocket(4) will run. There is no need to get “previous” userId because the cleanup function will capture it in a closure.\nOther times, you might need to adjust state based on a change in props or other state. This is rarely needed and is usually a sign you have some duplicate or redundant state. However, in the rare case that you need this pattern, you can store previous state or props in state and update them during rendering.\nWe have previously suggested a custom Hook called usePrevious to hold the previous value. However, we’ve found that most use cases fall into the two patterns described above. If your use case is different, you can hold a value in a ref and manually update it when needed. Avoid reading and updating refs during rendering because this makes your component’s behavior difficult to predict and understand.\nWhy am I seeing stale props or state inside my function? # Any function inside a component, including event handlers and effects, “sees” the props and state from the render it was created in. For example, consider code like this:\nfunction Example() { const [count, setCount] = useState(0); function handleAlertClick() { setTimeout(() =\u0026gt; { alert(\u0026#39;You clicked on: \u0026#39; + count); }, 3000); } return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;button onClick={handleAlertClick}\u0026gt; Show alert \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } If you first click “Show alert” and then increment the counter, the alert will show the count variable at the time you clicked the “Show alert” button. This prevents bugs caused by the code assuming props and state don’t change.\nIf you intentionally want to read the latest state from some asynchronous callback, you could keep it in a ref, mutate it, and read from it.\nFinally, another possible reason you’re seeing stale props or state is if you use the “dependency array” optimization but didn’t correctly specify all the dependencies. For example, if an effect specifies [] as the second argument but reads someProp inside, it will keep “seeing” the initial value of someProp. The solution is to either remove the dependency array, or to fix it. Here’s how you can deal with functions, and here’s other common strategies to run effects less often without incorrectly skipping dependencies.\nNote\nWe provide an exhaustive-deps ESLint rule as a part of the eslint-plugin-react-hooks package. It warns when dependencies are specified incorrectly and suggests a fix.\nHow do I implement getDerivedStateFromProps? # While you probably don’t need it, in rare cases that you do (such as implementing a \u0026lt;Transition\u0026gt; component), you can update the state right during rendering. React will re-run the component with updated state immediately after exiting the first render so it wouldn’t be expensive.\nHere, we store the previous value of the row prop in a state variable so that we can compare:\nfunction ScrollView({row}) { const [isScrollingDown, setIsScrollingDown] = useState(false); const [prevRow, setPrevRow] = useState(null); if (row !== prevRow) { // Row changed since last render. Update isScrollingDown. setIsScrollingDown(prevRow !== null \u0026amp;\u0026amp; row \u0026gt; prevRow); setPrevRow(row); } return `Scrolling down: ${isScrollingDown}`; } This might look strange at first, but an update during rendering is exactly what getDerivedStateFromProps has always been like conceptually.\nIs there something like forceUpdate? # Both useState and useReducer Hooks bail out of updates if the next value is the same as the previous one. Mutating state in place and calling setState will not cause a re-render.\nNormally, you shouldn’t mutate local state in React. However, as an escape hatch, you can use an incrementing counter to force a re-render even if the state has not changed:\nconst [ignored, forceUpdate] = useReducer(x =\u0026gt; x + 1, 0); function handleClick() { forceUpdate(); } Try to avoid this pattern if possible.\nCan I make a ref to a function component? # While you shouldn’t need this often, you may expose some imperative methods to a parent component with the useImperativeHandle Hook.\nHow can I measure a DOM node? # One rudimentary way to measure the position or size of a DOM node is to use a callback ref. React will call that callback whenever the ref gets attached to a different node. Here is a small demo:\nfunction MeasureExample() { const [height, setHeight] = useState(0); const measuredRef = useCallback(node =\u0026gt; { if (node !== null) { setHeight(node.getBoundingClientRect().height); } }, []); return ( \u0026lt;\u0026gt; \u0026lt;h1 ref={measuredRef}\u0026gt;Hello, world\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;The above header is {Math.round(height)}px tall\u0026lt;/h2\u0026gt; \u0026lt;/\u0026gt; ); } We didn’t choose useRef in this example because an object ref doesn’t notify us about changes to the current ref value. Using a callback ref ensures that even if a child component displays the measured node later (e.g. in response to a click), we still get notified about it in the parent component and can update the measurements.\nNote that we pass [] as a dependency array to useCallback. This ensures that our ref callback doesn’t change between the re-renders, and so React won’t call it unnecessarily.\nIn this example, the callback ref will be called only when the component mounts and unmounts, since the rendered \u0026lt;h1\u0026gt; component stays present throughout any rerenders. If you want to be notified any time a component resizes, you may want to use ResizeObserver or a third-party Hook built on it.\nIf you want, you can extract this logic into a reusable Hook:\nfunction MeasureExample() { const [rect, ref] = useClientRect(); return ( \u0026lt;\u0026gt; \u0026lt;h1 ref={ref}\u0026gt;Hello, world\u0026lt;/h1\u0026gt; {rect !== null \u0026amp;\u0026amp; \u0026lt;h2\u0026gt;The above header is {Math.round(rect.height)}px tall\u0026lt;/h2\u0026gt; } \u0026lt;/\u0026gt; ); } function useClientRect() { const [rect, setRect] = useState(null); const ref = useCallback(node =\u0026gt; { if (node !== null) { setRect(node.getBoundingClientRect()); } }, []); return [rect, ref]; } What does const [thing, setThing] = useState() mean? # If you’re not familiar with this syntax, check out the explanation in the State Hook documentation.\nPerformance Optimizations # Can I skip an effect on updates? # Yes. See conditionally firing an effect. Note that forgetting to handle updates often introduces bugs, which is why this isn’t the default behavior.\nIs it safe to omit functions from the list of dependencies? # Generally speaking, no.\nfunction Example({ someProp }) { function doSomething() { console.log(someProp); } useEffect(() =\u0026gt; { doSomething(); }, []); // 🔴 This is not safe (it calls `doSomething` which uses `someProp`)} It’s difficult to remember which props or state are used by functions outside of the effect. This is why usually you’ll want to declare functions needed by an effect _inside_** of it.** Then it’s easy to see what values from the component scope that effect depends on:\nfunction Example({ someProp }) { useEffect(() =\u0026gt; { function doSomething() { console.log(someProp); } doSomething(); }, [someProp]); // ✅ OK (our effect only uses `someProp`)} If after that we still don’t use any values from the component scope, it’s safe to specify []:\nuseEffect(() =\u0026gt; { function doSomething() { console.log(\u0026#39;hello\u0026#39;); } doSomething(); }, []); // ✅ OK in this example because we don\u0026#39;t use *any* values from component scope Depending on your use case, there are a few more options described below.\nNote\nWe provide the exhaustive-deps ESLint rule as a part of the eslint-plugin-react-hooks package. It helps you find components that don’t handle updates consistently.\nLet’s see why this matters.\nIf you specify a list of dependencies as the last argument to useEffect, useLayoutEffect, useMemo, useCallback, or useImperativeHandle, it must include all values that are used inside the callback and participate in the React data flow. That includes props, state, and anything derived from them.\nIt is only safe to omit a function from the dependency list if nothing in it (or the functions called by it) references props, state, or values derived from them. This example has a bug:\nfunction ProductPage({ productId }) { const [product, setProduct] = useState(null); async function fetchProduct() { const response = await fetch(\u0026#39;http://myapi/product/\u0026#39; + productId); // Uses productId prop const json = await response.json(); setProduct(json); } useEffect(() =\u0026gt; { fetchProduct(); }, []); // 🔴 Invalid because `fetchProduct` uses `productId` // ... } The recommended fix is to move that function _inside_** of your effect**. That makes it easy to see which props or state your effect uses, and to ensure they’re all declared:\nfunction ProductPage({ productId }) { const [product, setProduct] = useState(null); useEffect(() =\u0026gt; { // By moving this function inside the effect, we can clearly see the values it uses. async function fetchProduct() { const response = await fetch(\u0026#39;http://myapi/product/\u0026#39; + productId); const json = await response.json(); setProduct(json); } fetchProduct(); }, [productId]); // ✅ Valid because our effect only uses productId // ... } This also allows you to handle out-of-order responses with a local variable inside the effect:\nuseEffect(() =\u0026gt; { let ignore = false; async function fetchProduct() { const response = await fetch(\u0026#39;http://myapi/product/\u0026#39; + productId); const json = await response.json(); if (!ignore) setProduct(json); } fetchProduct(); return () =\u0026gt; { ignore = true }; }, [productId]); We moved the function inside the effect so it doesn’t need to be in its dependency list.\nTip\nCheck out this small demo and this article to learn more about data fetching with Hooks.\nIf for some reason you _can’t_** move a function inside an effect, there are a few more options:**\nYou can try moving that function outside of your component. In that case, the function is guaranteed to not reference any props or state, and also doesn’t need to be in the list of dependencies. If the function you’re calling is a pure computation and is safe to call while rendering, you may call it outside of the effect instead, and make the effect depend on the returned value. As a last resort, you can add a function to effect dependencies but _wrap its definition_ into the useCallback Hook. This ensures it doesn’t change on every render unless its own dependencies also change: function ProductPage({ productId }) { // ✅ Wrap with useCallback to avoid change on every render const fetchProduct = useCallback(() =\u0026gt; { // ... Does something with productId ... }, [productId]); // ✅ All useCallback dependencies are specified return \u0026lt;ProductDetails fetchProduct={fetchProduct} /\u0026gt;; } function ProductDetails({ fetchProduct }) { useEffect(() =\u0026gt; { fetchProduct(); }, [fetchProduct]); // ✅ All useEffect dependencies are specified // ... } Note that in the above example we need to keep the function in the dependencies list. This ensures that a change in the productId prop of ProductPage automatically triggers a refetch in the ProductDetails component.\nWhat can I do if my effect dependencies change too often? # Sometimes, your effect may be using state that changes too often. You might be tempted to omit that state from a list of dependencies, but that usually leads to bugs:\nfunction Counter() { const [count, setCount] = useState(0); useEffect(() =\u0026gt; { const id = setInterval(() =\u0026gt; { setCount(count + 1); // This effect depends on the `count` state }, 1000); return () =\u0026gt; clearInterval(id); }, []); // 🔴 Bug: `count` is not specified as a dependency return \u0026lt;h1\u0026gt;{count}\u0026lt;/h1\u0026gt;; } The empty set of dependencies, [], means that the effect will only run once when the component mounts, and not on every re-render. The problem is that inside the setInterval callback, the value of count does not change, because we’ve created a closure with the value of count set to 0 as it was when the effect callback ran. Every second, this callback then calls setCount(0 + 1), so the count never goes above 1.\nSpecifying [count] as a list of dependencies would fix the bug, but would cause the interval to be reset on every change. Effectively, each setInterval would get one chance to execute before being cleared (similar to a setTimeout.) That may not be desirable. To fix this, we can use the functional update form of setState. It lets us specify how the state needs to change without referencing the current state:\nfunction Counter() { const [count, setCount] = useState(0); useEffect(() =\u0026gt; { const id = setInterval(() =\u0026gt; { setCount(c =\u0026gt; c + 1); // ✅ This doesn\u0026#39;t depend on `count` variable outside }, 1000); return () =\u0026gt; clearInterval(id); }, []); // ✅ Our effect doesn\u0026#39;t use any variables in the component scope return \u0026lt;h1\u0026gt;{count}\u0026lt;/h1\u0026gt;; } (The identity of the setCount function is guaranteed to be stable so it’s safe to omit.)\nNow, the setInterval callback executes once a second, but each time the inner call to setCount can use an up-to-date value for count (called c in the callback here.)\nIn more complex cases (such as if one state depends on another state), try moving the state update logic outside the effect with the useReducer Hook. This article offers an example of how you can do this. The identity of the dispatch function from useReducer is always stable — even if the reducer function is declared inside the component and reads its props.\nAs a last resort, if you want something like this in a class, you can use a ref to hold a mutable variable. Then you can write and read to it. For example:\nfunction Example(props) { // Keep latest props in a ref. const latestProps = useRef(props); useEffect(() =\u0026gt; { latestProps.current = props; }); useEffect(() =\u0026gt; { function tick() { // Read latest props at any time console.log(latestProps.current); } const id = setInterval(tick, 1000); return () =\u0026gt; clearInterval(id); }, []); // This effect never re-runs} Only do this if you couldn’t find a better alternative, as relying on mutation makes components less predictable. If there’s a specific pattern that doesn’t translate well, file an issue with a runnable example code and we can try to help.\nHow do I implement shouldComponentUpdate? # You can wrap a function component with React.memo to shallowly compare its props:\nconst Button = React.memo((props) =\u0026gt; { // your component }); It’s not a Hook because it doesn’t compose like Hooks do. React.memo is equivalent to PureComponent, but it only compares props. (You can also add a second argument to specify a custom comparison function that takes the old and new props. If it returns true, the update is skipped.)\nReact.memo doesn’t compare state because there is no single state object to compare. But you can make children pure too, or even optimize individual children with useMemo.\nHow to memoize calculations? # The useMemo Hook lets you cache calculations between multiple renders by “remembering” the previous computation:\nconst memoizedValue = useMemo(() =\u0026gt; computeExpensiveValue(a, b), [a, b]); This code calls computeExpensiveValue(a, b). But if the dependencies [a, b] haven’t changed since the last value, useMemo skips calling it a second time and simply reuses the last value it returned.\nRemember that the function passed to useMemo runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. For example, side effects belong in useEffect, not useMemo.\nYou may rely on useMemo as a performance optimization, not as a semantic guarantee. In the future, React may choose to “forget” some previously memoized values and recalculate them on next render, e.g. to free memory for offscreen components. Write your code so that it still works without useMemo — and then add it to optimize performance. (For rare cases when a value must never be recomputed, you can lazily initialize a ref.)\nConveniently, useMemo also lets you skip an expensive re-render of a child:\nfunction Parent({ a, b }) { // Only re-rendered if `a` changes: const child1 = useMemo(() =\u0026gt; \u0026lt;Child1 a={a} /\u0026gt;, [a]); // Only re-rendered if `b` changes: const child2 = useMemo(() =\u0026gt; \u0026lt;Child2 b={b} /\u0026gt;, [b]); return ( \u0026lt;\u0026gt; {child1} {child2} \u0026lt;/\u0026gt; ) } Note that this approach won’t work in a loop because Hook calls can’t be placed inside loops. But you can extract a separate component for the list item, and call useMemo there.\nHow to create expensive objects lazily? # useMemo lets you memoize an expensive calculation if the dependencies are the same. However, it only serves as a hint, and doesn’t guarantee the computation won’t re-run. But sometimes you need to be sure an object is only created once.\nThe first common use case is when creating the initial state is expensive:\nfunction Table(props) { // ⚠️ createRows() is called on every render const [rows, setRows] = useState(createRows(props.count)); // ... } To avoid re-creating the ignored initial state, we can pass a function to useState:\nfunction Table(props) { // ✅ createRows() is only called once const [rows, setRows] = useState(() =\u0026gt; createRows(props.count)); // ... } React will only call this function during the first render. See the useState API reference.\nYou might also occasionally want to avoid re-creating the useRef() initial value. For example, maybe you want to ensure some imperative class instance only gets created once:\nfunction Image(props) { // ⚠️ IntersectionObserver is created on every render const ref = useRef(new IntersectionObserver(onIntersect)); // ... } useRef does not accept a special function overload like useState. Instead, you can write your own function that creates and sets it lazily:\nfunction Image(props) { const ref = useRef(null); // ✅ IntersectionObserver is created lazily once function getObserver() { if (ref.current === null) { ref.current = new IntersectionObserver(onIntersect); } return ref.current; } // When you need it, call getObserver() // ... } This avoids creating an expensive object until it’s truly needed for the first time. If you use Flow or TypeScript, you can also give getObserver() a non-nullable type for convenience.\nAre Hooks slow because of creating functions in render? # No. In modern browsers, the raw performance of closures compared to classes doesn’t differ significantly except in extreme scenarios.\nIn addition, consider that the design of Hooks is more efficient in a couple ways:\nHooks avoid a lot of the overhead that classes require, like the cost of creating class instances and binding event handlers in the constructor. Idiomatic code using Hooks doesn’t need the deep component tree nesting that is prevalent in codebases that use higher-order components, render props, and context. With smaller component trees, React has less work to do. Traditionally, performance concerns around inline functions in React have been related to how passing new callbacks on each render breaks shouldComponentUpdate optimizations in child components. Hooks approach this problem from three sides.\nThe useCallback Hook lets you keep the same callback reference between re-renders so that shouldComponentUpdate continues to work:\n// Will not change unless `a` or `b` changes const memoizedCallback = useCallback(() =\u0026gt; { doSomething(a, b); }, [a, b]); The useMemo Hook makes it easier to control when individual children update, reducing the need for pure components.\nFinally, the useReducer Hook reduces the need to pass callbacks deeply, as explained below.\nHow to avoid passing callbacks down? # We’ve found that most people don’t enjoy manually passing callbacks through every level of a component tree. Even though it is more explicit, it can feel like a lot of “plumbing”.\nIn large component trees, an alternative we recommend is to pass down a dispatch function from useReducer via context:\nconst TodosDispatch = React.createContext(null); function TodosApp() { // Note: `dispatch` won\u0026#39;t change between re-renders const [todos, dispatch] = useReducer(todosReducer); return ( \u0026lt;TodosDispatch.Provider value={dispatch}\u0026gt; \u0026lt;DeepTree todos={todos} /\u0026gt; \u0026lt;/TodosDispatch.Provider\u0026gt; ); } Any child in the tree inside TodosApp can use the dispatch function to pass actions up to TodosApp:\nfunction DeepChild(props) { // If we want to perform an action, we can get dispatch from context. const dispatch = useContext(TodosDispatch); function handleClick() { dispatch({ type: \u0026#39;add\u0026#39;, text: \u0026#39;hello\u0026#39; }); } return ( \u0026lt;button onClick={handleClick}\u0026gt;Add todo\u0026lt;/button\u0026gt; ); } This is both more convenient from the maintenance perspective (no need to keep forwarding callbacks), and avoids the callback problem altogether. Passing dispatch down like this is the recommended pattern for deep updates.\nNote that you can still choose whether to pass the application state down as props (more explicit) or as context (more convenient for very deep updates). If you use context to pass down the state too, use two different context types — the dispatch context never changes, so components that read it don’t need to rerender unless they also need the application state.\nHow to read an often-changing value from useCallback? # Note\nWe recommend to pass dispatch down in context rather than individual callbacks in props. The approach below is only mentioned here for completeness and as an escape hatch.\nIn some rare cases you might need to memoize a callback with useCallback but the memoization doesn’t work very well because the inner function has to be re-created too often. If the function you’re memoizing is an event handler and isn’t used during rendering, you can use ref as an instance variable, and save the last committed value into it manually:\nfunction Form() { const [text, updateText] = useState(\u0026#39;\u0026#39;); const textRef = useRef(); useEffect(() =\u0026gt; { textRef.current = text; // Write it to the ref }); const handleSubmit = useCallback(() =\u0026gt; { const currentText = textRef.current; // Read it from the ref alert(currentText); }, [textRef]); // Don\u0026#39;t recreate handleSubmit like [text] would do return ( \u0026lt;\u0026gt; \u0026lt;input value={text} onChange={e =\u0026gt; updateText(e.target.value)} /\u0026gt; \u0026lt;ExpensiveTree onSubmit={handleSubmit} /\u0026gt; \u0026lt;/\u0026gt; ); } This is a rather convoluted pattern but it shows that you can do this escape hatch optimization if you need it. It’s more bearable if you extract it to a custom Hook:\nfunction Form() { const [text, updateText] = useState(\u0026#39;\u0026#39;); // Will be memoized even if `text` changes: const handleSubmit = useEventCallback(() =\u0026gt; { alert(text); }, [text]); return ( \u0026lt;\u0026gt; \u0026lt;input value={text} onChange={e =\u0026gt; updateText(e.target.value)} /\u0026gt; \u0026lt;ExpensiveTree onSubmit={handleSubmit} /\u0026gt; \u0026lt;/\u0026gt; ); } function useEventCallback(fn, dependencies) { const ref = useRef(() =\u0026gt; { throw new Error(\u0026#39;Cannot call an event handler while rendering.\u0026#39;); }); useEffect(() =\u0026gt; { ref.current = fn; }, [fn, ...dependencies]); return useCallback(() =\u0026gt; { const fn = ref.current; return fn(); }, [ref]); } In either case, we don’t recommend this pattern and only show it here for completeness. Instead, it is preferable to avoid passing callbacks deep down.\nUnder the Hood # How does React associate Hook calls with components? # React keeps track of the currently rendering component. Thanks to the Rules of Hooks, we know that Hooks are only called from React components (or custom Hooks — which are also only called from React components).\nThere is an internal list of “memory cells” associated with each component. They’re just JavaScript objects where we can put some data. When you call a Hook like useState(), it reads the current cell (or initializes it during the first render), and then moves the pointer to the next one. This is how multiple useState() calls each get independent local state.\nWhat is the prior art for Hooks? # Hooks synthesize ideas from several different sources:\nOur old experiments with functional APIs in the react-future repository. React community’s experiments with render prop APIs, including Ryan Florence’s Reactions Component. Dominic Gannaway’s adopt keyword proposal as a sugar syntax for render props. State variables and state cells in DisplayScript. Reducer components in ReasonReact. Subscriptions in Rx. Algebraic effects in Multicore OCaml. Sebastian Markbåge came up with the original design for Hooks, later refined by Andrew Clark, Sophie Alpert, Dominic Gannaway, and other members of the React team.\n"},{"id":386,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/introducing-hooks/","title":"Introducing Hooks","section":"Hooks","content":" Introducing Hooks # Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\nimport React, { useState } from \u0026#39;react\u0026#39;; function Example() { // Declare a new state variable, which we\u0026#39;ll call \u0026#34;count\u0026#34; const [count, setCount] = useState(0); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } This new function useState is the first “Hook” we’ll learn about, but this example is just a teaser. Don’t worry if it doesn’t make sense yet!\nYou can start learning Hooks on the next page. On this page, we’ll continue by explaining why we’re adding Hooks to React and how they can help you write great applications.\nNote\nReact 16.8.0 is the first release to support Hooks. When upgrading, don’t forget to update all packages, including React DOM. React Native has supported Hooks since the 0.59 release of React Native.\nVideo Introduction # At React Conf 2018, Sophie Alpert and Dan Abramov introduced Hooks, followed by Ryan Florence demonstrating how to refactor an application to use them. Watch the video here:\nNo Breaking Changes # Before we continue, note that Hooks are:\nCompletely opt-in. You can try Hooks in a few components without rewriting any existing code. But you don’t have to learn or use Hooks right now if you don’t want to. 100% backwards-compatible. Hooks don’t contain any breaking changes. Available now. Hooks are now available with the release of v16.8.0. There are no plans to remove classes from React. You can read more about the gradual adoption strategy for Hooks in the bottom section of this page.\nHooks don’t replace your knowledge of React concepts. Instead, Hooks provide a more direct API to the React concepts you already know: props, state, context, refs, and lifecycle. As we will show later, Hooks also offer a new powerful way to combine them.\nIf you just want to start learning Hooks, feel free to jump directly to the next page! You can also keep reading this page to learn more about why we’re adding Hooks, and how we’re going to start using them without rewriting our applications.\nMotivation # Hooks solve a wide variety of seemingly unconnected problems in React that we’ve encountered over five years of writing and maintaining tens of thousands of components. Whether you’re learning React, use it daily, or even prefer a different library with a similar component model, you might recognize some of these problems.\nIt’s hard to reuse stateful logic between components # React doesn’t offer a way to “attach” reusable behavior to a component (for example, connecting it to a store). If you’ve worked with React for a while, you may be familiar with patterns like render props and higher-order components that try to solve this. But these patterns require you to restructure your components when you use them, which can be cumbersome and make code harder to follow. If you look at a typical React application in React DevTools, you will likely find a “wrapper hell” of components surrounded by layers of providers, consumers, higher-order components, render props, and other abstractions. While we could filter them out in DevTools, this points to a deeper underlying problem: React needs a better primitive for sharing stateful logic.\nWith Hooks, you can extract stateful logic from a component so it can be tested independently and reused. Hooks allow you to reuse stateful logic without changing your component hierarchy. This makes it easy to share Hooks among many components or with the community.\nWe’ll discuss this more in Building Your Own Hooks.\nComplex components become hard to understand # We’ve often had to maintain components that started out simple but grew into an unmanageable mess of stateful logic and side effects. Each lifecycle method often contains a mix of unrelated logic. For example, components might perform some data fetching in componentDidMount and componentDidUpdate. However, the same componentDidMount method might also contain some unrelated logic that sets up event listeners, with cleanup performed in componentWillUnmount. Mutually related code that changes together gets split apart, but completely unrelated code ends up combined in a single method. This makes it too easy to introduce bugs and inconsistencies.\nIn many cases it’s not possible to break these components into smaller ones because the stateful logic is all over the place. It’s also difficult to test them. This is one of the reasons many people prefer to combine React with a separate state management library. However, that often introduces too much abstraction, requires you to jump between different files, and makes reusing components more difficult.\nTo solve this, Hooks let you split one component into smaller functions based on what pieces are related (such as setting up a subscription or fetching data), rather than forcing a split based on lifecycle methods. You may also opt into managing the component’s local state with a reducer to make it more predictable.\nWe’ll discuss this more in Using the Effect Hook.\nClasses confuse both people and machines # In addition to making code reuse and code organization more difficult, we’ve found that classes can be a large barrier to learning React. You have to understand how this works in JavaScript, which is very different from how it works in most languages. You have to remember to bind the event handlers. Without ES2022 public class fields, the code is very verbose. People can understand props, state, and top-down data flow perfectly well but still struggle with classes. The distinction between function and class components in React and when to use each one leads to disagreements even between experienced React developers.\nAdditionally, React has been out for about five years, and we want to make sure it stays relevant in the next five years. As Svelte, Angular, Glimmer, and others show, ahead-of-time compilation of components has a lot of future potential. Especially if it’s not limited to templates. Recently, we’ve been experimenting with component folding using Prepack, and we’ve seen promising early results. However, we found that class components can encourage unintentional patterns that make these optimizations fall back to a slower path. Classes present issues for today’s tools, too. For example, classes don’t minify very well, and they make hot reloading flaky and unreliable. We want to present an API that makes it more likely for code to stay on the optimizable path.\nTo solve these problems, Hooks let you use more of React’s features without classes. Conceptually, React components have always been closer to functions. Hooks embrace functions, but without sacrificing the practical spirit of React. Hooks provide access to imperative escape hatches and don’t require you to learn complex functional or reactive programming techniques.\nExamples\nHooks at a Glance is a good place to start learning Hooks.\nGradual Adoption Strategy # TLDR: There are no plans to remove classes from React.\nWe know that React developers are focused on shipping products and don’t have time to look into every new API that’s being released. Hooks are very new, and it might be better to wait for more examples and tutorials before considering learning or adopting them.\nWe also understand that the bar for adding a new primitive to React is extremely high. For curious readers, we have prepared a detailed RFC that dives into the motivation with more details, and provides extra perspective on the specific design decisions and related prior art.\nCrucially, Hooks work side-by-side with existing code so you can adopt them gradually. There is no rush to migrate to Hooks. We recommend avoiding any “big rewrites”, especially for existing, complex class components. It takes a bit of a mind shift to start “thinking in Hooks”. In our experience, it’s best to practice using Hooks in new and non-critical components first, and ensure that everybody on your team feels comfortable with them. After you give Hooks a try, please feel free to send us feedback, positive or negative.\nWe intend for Hooks to cover all existing use cases for classes, but we will keep supporting class components for the foreseeable future. At Facebook, we have tens of thousands of components written as classes, and we have absolutely no plans to rewrite them. Instead, we are starting to use Hooks in the new code side by side with classes.\nFrequently Asked Questions # We’ve prepared a Hooks FAQ page that answers the most common questions about Hooks.\nNext Steps # By the end of this page, you should have a rough idea of what problems Hooks are solving, but many details are probably unclear. Don’t worry! Let’s now go to the next page where we start learning about Hooks by example.\n"},{"id":387,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/rules-of-hooks/","title":"Rules of Hooks","section":"Hooks","content":" 🌵 Rules of Hooks # Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\nHooks are JavaScript functions, but you need to follow two rules when using them. We provide a linter plugin to enforce these rules automatically:\nOnly Call Hooks at the Top Level # Don’t call Hooks inside loops, conditions, or nested functions. Instead, always use Hooks at the top level of your React function, before any early returns. By following this rule, you ensure that Hooks are called in the same order each time a component renders. That’s what allows React to correctly preserve the state of Hooks between multiple useState and useEffect calls. (If you’re curious, we’ll explain this in depth below.)\nOnly Call Hooks from React Functions # Don’t call Hooks from regular JavaScript functions. Instead, you can:\n✅ Call Hooks from React function components. ✅ Call Hooks from custom Hooks (we’ll learn about them on the next page). By following this rule, you ensure that all stateful logic in a component is clearly visible from its source code.\nESLint Plugin # We released an ESLint plugin called eslint-plugin-react-hooks that enforces these two rules. You can add this plugin to your project if you’d like to try it:\nThis plugin is included by default in Create React App.\nnpm install eslint-plugin-react-hooks --save-dev // Your ESLint configuration { \u0026#34;plugins\u0026#34;: [ // ... \u0026#34;react-hooks\u0026#34; ], \u0026#34;rules\u0026#34;: { // ... \u0026#34;react-hooks/rules-of-hooks\u0026#34;: \u0026#34;error\u0026#34;, // Checks rules of Hooks \u0026#34;react-hooks/exhaustive-deps\u0026#34;: \u0026#34;warn\u0026#34; // Checks effect dependencies } } You can skip to the next page explaining how to write your own Hooks now. On this page, we’ll continue by explaining the reasoning behind these rules.\nExplanation # As we learned earlier, we can use multiple State or Effect Hooks in a single component:\nfunction Form() { // 1. Use the name state variable const [name, setName] = useState(\u0026#39;Mary\u0026#39;); // 2. Use an effect for persisting the form useEffect(function persistForm() { localStorage.setItem(\u0026#39;formData\u0026#39;, name); }); // 3. Use the surname state variable const [surname, setSurname] = useState(\u0026#39;Poppins\u0026#39;); // 4. Use an effect for updating the title useEffect(function updateTitle() { document.title = name + \u0026#39; \u0026#39; + surname; }); // ... } So how does React know which state corresponds to which useState call? The answer is that React relies on the order in which Hooks are called. Our example works because the order of the Hook calls is the same on every render:\n// ------------ // First render // ------------ useState(\u0026#39;Mary\u0026#39;) // 1. Initialize the name state variable with \u0026#39;Mary\u0026#39; useEffect(persistForm) // 2. Add an effect for persisting the form useState(\u0026#39;Poppins\u0026#39;) // 3. Initialize the surname state variable with \u0026#39;Poppins\u0026#39; useEffect(updateTitle) // 4. Add an effect for updating the title // ------------- // Second render // ------------- useState(\u0026#39;Mary\u0026#39;) // 1. Read the name state variable (argument is ignored) useEffect(persistForm) // 2. Replace the effect for persisting the form useState(\u0026#39;Poppins\u0026#39;) // 3. Read the surname state variable (argument is ignored) useEffect(updateTitle) // 4. Replace the effect for updating the title // ... As long as the order of the Hook calls is the same between renders, React can associate some local state with each of them. But what happens if we put a Hook call (for example, the persistForm effect) inside a condition?\n// 🔴 We\u0026#39;re breaking the first rule by using a Hook in a condition if (name !== \u0026#39;\u0026#39;) { useEffect(function persistForm() { localStorage.setItem(\u0026#39;formData\u0026#39;, name); }); } The name !== '' condition is true on the first render, so we run this Hook. However, on the next render the user might clear the form, making the condition false. Now that we skip this Hook during rendering, the order of the Hook calls becomes different:\nuseState(\u0026#39;Mary\u0026#39;) // 1. Read the name state variable (argument is ignored) // useEffect(persistForm) // 🔴 This Hook was skipped! useState(\u0026#39;Poppins\u0026#39;) // 🔴 2 (but was 3). Fail to read the surname state variable useEffect(updateTitle) // 🔴 3 (but was 4). Fail to replace the effect React wouldn’t know what to return for the second useState Hook call. React expected that the second Hook call in this component corresponds to the persistForm effect, just like during the previous render, but it doesn’t anymore. From that point, every next Hook call after the one we skipped would also shift by one, leading to bugs.\nThis is why Hooks must be called on the top level of our components. If we want to run an effect conditionally, we can put that condition inside our Hook:\nuseEffect(function persistForm() { // 👍 We\u0026#39;re not breaking the first rule anymore if (name !== \u0026#39;\u0026#39;) { localStorage.setItem(\u0026#39;formData\u0026#39;, name); } }); Note that you don’t need to worry about this problem if you use the provided lint rule. But now you also know why Hooks work this way, and which issues the rule is preventing.\nNext Steps # Finally, we’re ready to learn about writing your own Hooks! Custom Hooks let you combine Hooks provided by React into your own abstractions, and reuse common stateful logic between different components.\n"},{"id":388,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/usecallback/","title":"Usecallback","section":"Hooks","content":" 🍕 Usecallback # useCallback # const memoizedCallback = useCallback( () =\u0026gt; { doSomething(a, b); }, [a, b], ); Returns a memoized callback.\nPass an inline callback and an array of dependencies. useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. shouldComponentUpdate).\nuseCallback(fn, deps) is equivalent to useMemo(() =\u0026gt; fn, deps).\nNote\nThe array of dependencies is not passed as arguments to the callback. Conceptually, though, that’s what they represent: every value referenced inside the callback should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.\nWe recommend using the exhaustive-deps rule as part of our eslint-plugin-react-hooks package. It warns when dependencies are specified incorrectly and suggests a fix.\n"},{"id":389,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/usecontext/","title":"Usecontext","section":"Hooks","content":" useContext # useContext # const value = useContext(MyContext); Accepts a context object (the value returned from React.createContext) and returns the current context value for that context. The current context value is determined by the value prop of the nearest \u0026lt;MyContext.Provider\u0026gt; above the calling component in the tree.\nWhen the nearest \u0026lt;MyContext.Provider\u0026gt; above the component updates, this Hook will trigger a rerender with the latest context value passed to that MyContext provider. Even if an ancestor uses React.memo or shouldComponentUpdate, a rerender will still happen starting at the component itself using useContext.\nDon’t forget that the argument to useContext must be the context object itself:\nCorrect: useContext(MyContext) Incorrect: useContext(MyContext.Consumer) Incorrect: useContext(MyContext.Provider) A component calling useContext will always re-render when the context value changes. If re-rendering the component is expensive, you can optimize it by using memoization.\nTip\nIf you’re familiar with the context API before Hooks, useContext(MyContext) is equivalent to static contextType = MyContext in a class, or to \u0026lt;MyContext.Consumer\u0026gt;.\nuseContext(MyContext) only lets you read the context and subscribe to its changes. You still need a \u0026lt;MyContext.Provider\u0026gt; above in the tree to provide the value for this context.\nPutting it together with Context.Provider\nconst themes = { light: { foreground: \u0026#34;#000000\u0026#34;, background: \u0026#34;#eeeeee\u0026#34; }, dark: { foreground: \u0026#34;#ffffff\u0026#34;, background: \u0026#34;#222222\u0026#34; } }; const ThemeContext = React.createContext(themes.light); function App() { return ( \u0026lt;ThemeContext.Provider value={themes.dark}\u0026gt; \u0026lt;Toolbar /\u0026gt; \u0026lt;/ThemeContext.Provider\u0026gt; ); } function Toolbar(props) { return ( \u0026lt;div\u0026gt; \u0026lt;ThemedButton /\u0026gt; \u0026lt;/div\u0026gt; ); } function ThemedButton() { const theme = useContext(ThemeContext); return ( \u0026lt;button style={{ background: theme.background, color: theme.foreground }}\u0026gt; I am styled by theme context! \u0026lt;/button\u0026gt; ); } This example is modified for hooks from a previous example in the Context Advanced Guide, where you can find more information about when and how to use Context.\n"},{"id":390,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/usedebugvalue/","title":"Usedebugvalue","section":"Hooks","content":" useDebugValue # useDebugValue # useDebugValue(value) useDebugValue can be used to display a label for custom hooks in React DevTools.\nFor example, consider the useFriendStatus custom Hook described in “Building Your Own Hooks”:\nfunction useFriendStatus(friendID) { const [isOnline, setIsOnline] = useState(null); // ... // Show a label in DevTools next to this Hook // e.g. \u0026#34;FriendStatus: Online\u0026#34; useDebugValue(isOnline ? \u0026#39;Online\u0026#39; : \u0026#39;Offline\u0026#39;); return isOnline; } Tip\nWe don’t recommend adding debug values to every custom Hook. It’s most valuable for custom Hooks that are part of shared libraries.\nDefer formatting debug values\nIn some cases formatting a value for display might be an expensive operation. It’s also unnecessary unless a Hook is actually inspected.\nFor this reason useDebugValue accepts a formatting function as an optional second parameter. This function is only called if the Hooks are inspected. It receives the debug value as a parameter and should return a formatted display value.\nFor example a custom Hook that returned a Date value could avoid calling the toDateString function unnecessarily by passing the following formatter:\nuseDebugValue(date, date =\u0026gt; date.toDateString()); "},{"id":391,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/usedeferredvalue/","title":"Usedeferredvalue","section":"Hooks","content":" useDeferredValue # useDeferredValue # const deferredValue = useDeferredValue(value); useDeferredValue accepts a value and returns a new copy of the value that will defer to more urgent updates. If the current render is the result of an urgent update, like user input, React will return the previous value and then render the new value after the urgent render has completed.\nThis hook is similar to user-space hooks which use debouncing or throttling to defer updates. The benefits to using useDeferredValue is that React will work on the update as soon as other work finishes (instead of waiting for an arbitrary amount of time), and like startTransition, deferred values can suspend without triggering an unexpected fallback for existing content.\nMemoizing deferred children\nuseDeferredValue only defers the value that you pass to it. If you want to prevent a child component from re-rendering during an urgent update, you must also memoize that component with React.memo or React.useMemo:\nfunction Typeahead() { const query = useSearchQuery(\u0026#39;\u0026#39;); const deferredQuery = useDeferredValue(query); // Memoizing tells React to only re-render when deferredQuery changes, // not when query changes. const suggestions = useMemo(() =\u0026gt; \u0026lt;SearchSuggestions query={deferredQuery} /\u0026gt;, [deferredQuery] ); return ( \u0026lt;\u0026gt; \u0026lt;SearchInput query={query} /\u0026gt; \u0026lt;Suspense fallback=\u0026#34;Loading results...\u0026#34;\u0026gt; {suggestions} \u0026lt;/Suspense\u0026gt; \u0026lt;/\u0026gt; ); } Memoizing the children tells React that it only needs to re-render them when deferredQuery changes and not when query changes. This caveat is not unique to useDeferredValue, and it’s the same pattern you would use with similar hooks that use debouncing or throttling.\n"},{"id":392,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/useeffect/","title":"Useeffect","section":"Hooks","content":" 🌵 useEffect # useEffect # useEffect(didUpdate); Accepts a function that contains imperative, possibly effectful code.\nMutations, subscriptions, timers, logging, and other side effects are not allowed inside the main body of a function component (referred to as React’s render phase). Doing so will lead to confusing bugs and inconsistencies in the UI.\nInstead, use useEffect. The function passed to useEffect will run after the render is committed to the screen. Think of effects as an escape hatch from React’s purely functional world into the imperative world.\nBy default, effects run after every completed render, but you can choose to fire them only when certain values have changed.\nCleaning up an effect\nOften, effects create resources that need to be cleaned up before the component leaves the screen, such as a subscription or timer ID. To do this, the function passed to useEffect may return a clean-up function. For example, to create a subscription:\nuseEffect(() =\u0026gt; { const subscription = props.source.subscribe(); return () =\u0026gt; { // Clean up the subscription subscription.unsubscribe(); }; }); The clean-up function runs before the component is removed from the UI to prevent memory leaks. Additionally, if a component renders multiple times (as they typically do), the previous effect is cleaned up before executing the next effect. In our example, this means a new subscription is created on every update. To avoid firing an effect on every update, refer to the next section.\nTiming of effects\nUnlike componentDidMount and componentDidUpdate, the function passed to useEffect fires after layout and paint, during a deferred event. This makes it suitable for the many common side effects, like setting up subscriptions and event handlers, because most types of work shouldn’t block the browser from updating the screen.\nHowever, not all effects can be deferred. For example, a DOM mutation that is visible to the user must fire synchronously before the next paint so that the user does not perceive a visual inconsistency. (The distinction is conceptually similar to passive versus active event listeners.) For these types of effects, React provides one additional Hook called useLayoutEffect. It has the same signature as useEffect, and only differs in when it is fired.\nAdditionally, starting in React 18, the function passed to useEffect will fire synchronously before layout and paint when it’s the result of a discrete user input such as a click, or when it’s the result of an update wrapped in flushSync. This behavior allows the result of the effect to be observed by the event system, or by the caller of flushSync.\nNote\nThis only affects the timing of when the function passed to useEffect is called - updates scheduled inside these effects are still deferred. This is different than useLayoutEffect, which fires the function and processes the updates inside of it immediately.\nEven in cases where useEffect is deferred until after the browser has painted, it’s guaranteed to fire before any new renders. React will always flush a previous render’s effects before starting a new update.\nConditionally firing an effect\nThe default behavior for effects is to fire the effect after every completed render. That way an effect is always recreated if one of its dependencies changes.\nHowever, this may be overkill in some cases, like the subscription example from the previous section. We don’t need to create a new subscription on every update, only if the source prop has changed.\nTo implement this, pass a second argument to useEffect that is the array of values that the effect depends on. Our updated example now looks like this:\nuseEffect( () =\u0026gt; { const subscription = props.source.subscribe(); return () =\u0026gt; { subscription.unsubscribe(); }; }, [props.source], ); Now the subscription will only be recreated when props.source changes.\nNote\nIf you use this optimization, make sure the array includes all values from the component scope (such as props and state) that change over time and that are used by the effect. Otherwise, your code will reference stale values from previous renders. Learn more about how to deal with functions and what to do when the array values change too often.\nIf you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument. This tells React that your effect doesn’t depend on any values from props or state, so it never needs to re-run. This isn’t handled as a special case — it follows directly from how the dependencies array always works.\nIf you pass an empty array ([]), the props and state inside the effect will always have their initial values. While passing [] as the second argument is closer to the familiar componentDidMount and componentWillUnmount mental model, there are usually better solutions to avoid re-running effects too often. Also, don’t forget that React defers running useEffect until after the browser has painted, so doing extra work is less of a problem.\nWe recommend using the exhaustive-deps rule as part of our eslint-plugin-react-hooks package. It warns when dependencies are specified incorrectly and suggests a fix.\nThe array of dependencies is not passed as arguments to the effect function. Conceptually, though, that’s what they represent: every value referenced inside the effect function should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.\n"},{"id":393,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/useid/","title":"Useid","section":"Hooks","content":" useId # useId # const id = useId(); useId is a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatches.\nNote\nuseId is not for generating keys in a list. Keys should be generated from your data.\nFor a basic example, pass the id directly to the elements that need it:\nfunction Checkbox() { const id = useId(); return ( \u0026lt;\u0026gt; \u0026lt;label htmlFor={id}\u0026gt;Do you like React?\u0026lt;/label\u0026gt; \u0026lt;input id={id} type=\u0026#34;checkbox\u0026#34; name=\u0026#34;react\u0026#34;/\u0026gt; \u0026lt;/\u0026gt; ); }; For multiple IDs in the same component, append a suffix using the same id:\nfunction NameFields() { const id = useId(); return ( \u0026lt;div\u0026gt; \u0026lt;label htmlFor={id + \u0026#39;-firstName\u0026#39;}\u0026gt;First Name\u0026lt;/label\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input id={id + \u0026#39;-firstName\u0026#39;} type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;label htmlFor={id + \u0026#39;-lastName\u0026#39;}\u0026gt;Last Name\u0026lt;/label\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input id={id + \u0026#39;-lastName\u0026#39;} type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } Note:\nuseId generates a string that includes the : token. This helps ensure that the token is unique, but is not supported in CSS selectors or APIs like querySelectorAll.\nuseId supports an identifierPrefix to prevent collisions in multi-root apps. To configure, see the options for hydrateRoot and ReactDOMServer.\n"},{"id":394,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/useimperativehandle/","title":"Useimperativehandle","section":"Hooks","content":" useImperativeHandle # useImperativeHandle # useImperativeHandle(ref, createHandle, [deps]) useImperativeHandle customizes the instance value that is exposed to parent components when using ref. As always, imperative code using refs should be avoided in most cases. useImperativeHandle should be used with forwardRef:\nfunction FancyInput(props, ref) { const inputRef = useRef(); useImperativeHandle(ref, () =\u0026gt; ({ focus: () =\u0026gt; { inputRef.current.focus(); } })); return \u0026lt;input ref={inputRef} ... /\u0026gt;; } FancyInput = forwardRef(FancyInput); In this example, a parent component that renders \u0026lt;FancyInput ref={inputRef} /\u0026gt; would be able to call inputRef.current.focus().\n"},{"id":395,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/useinsertioneffect/","title":"Useinsertioneffect","section":"Hooks","content":" useInsertionEffect # useInsertionEffect # useInsertionEffect(didUpdate); The signature is identical to useEffect, but it fires synchronously before all DOM mutations. Use this to inject styles into the DOM before reading layout in useLayoutEffect. Since this hook is limited in scope, this hook does not have access to refs and cannot schedule updates.\nNote:\nuseInsertionEffect should be limited to css-in-js library authors. Prefer useEffect or useLayoutEffect instead.\n"},{"id":396,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/uselayouteffect/","title":"Uselayouteffect","section":"Hooks","content":" useLayoutEffect # useLayoutEffect # The signature is identical to useEffect, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint.\nPrefer the standard useEffect when possible to avoid blocking visual updates.\nTip\nIf you’re migrating code from a class component, note useLayoutEffect fires in the same phase as componentDidMount and componentDidUpdate. However, we recommend starting with useEffect first and only trying useLayoutEffect if that causes a problem.\nIf you use server rendering, keep in mind that neither useLayoutEffect nor useEffect can run until the JavaScript is downloaded. This is why React warns when a server-rendered component contains useLayoutEffect. To fix this, either move that logic to useEffect (if it isn’t necessary for the first render), or delay showing that component until after the client renders (if the HTML looks broken until useLayoutEffect runs).\nTo exclude a component that needs layout effects from the server-rendered HTML, render it conditionally with showChild \u0026amp;\u0026amp; \u0026lt;Child /\u0026gt; and defer showing it with useEffect(() =\u0026gt; { setShowChild(true); }, []). This way, the UI doesn’t appear broken before hydration.\n"},{"id":397,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/usememo/","title":"Usememo","section":"Hooks","content":" 🍕 useMemo # useMemo # const memoizedValue = useMemo(() =\u0026gt; computeExpensiveValue(a, b), [a, b]); Returns a memoized value.\nPass a “create” function and an array of dependencies. useMemo will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.\nRemember that the function passed to useMemo runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. For example, side effects belong in useEffect, not useMemo.\nIf no array is provided, a new value will be computed on every render.\nYou may rely on useMemo as a performance optimization, not as a semantic guarantee. In the future, React may choose to “forget” some previously memoized values and recalculate them on next render, e.g. to free memory for offscreen components. Write your code so that it still works without useMemo — and then add it to optimize performance.\nNote\nThe array of dependencies is not passed as arguments to the function. Conceptually, though, that’s what they represent: every value referenced inside the function should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.\nWe recommend using the exhaustive-deps rule as part of our eslint-plugin-react-hooks package. It warns when dependencies are specified incorrectly and suggests a fix.\n"},{"id":398,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/usereducer/","title":"Usereducer","section":"Hooks","content":" useReducer # useReducer # const [state, dispatch] = useReducer(reducer, initialArg, init); An alternative to useState. Accepts a reducer of type (state, action) =\u0026gt; newState, and returns the current state paired with a dispatch method. (If you’re familiar with Redux, you already know how this works.)\nuseReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. useReducer also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks.\nHere’s the counter example from the useState section, rewritten to use a reducer:\nconst initialState = {count: 0}; function reducer(state, action) { switch (action.type) { case \u0026#39;increment\u0026#39;: return {count: state.count + 1}; case \u0026#39;decrement\u0026#39;: return {count: state.count - 1}; default: throw new Error(); } } function Counter() { const [state, dispatch] = useReducer(reducer, initialState); return ( \u0026lt;\u0026gt; Count: {state.count} \u0026lt;button onClick={() =\u0026gt; dispatch({type: \u0026#39;decrement\u0026#39;})}\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;button onClick={() =\u0026gt; dispatch({type: \u0026#39;increment\u0026#39;})}\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/\u0026gt; ); } Note\nReact guarantees that dispatch function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the useEffect or useCallback dependency list.\n"},{"id":399,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/useref/","title":"Useref","section":"Hooks","content":" 🍕 useRef # useRef # const refContainer = useRef(initialValue); useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component.\nA common use case is to access a child imperatively:\nfunction TextInputWithFocusButton() { const inputEl = useRef(null); const onButtonClick = () =\u0026gt; { // `current` points to the mounted text input element inputEl.current.focus(); }; return ( \u0026lt;\u0026gt; \u0026lt;input ref={inputEl} type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;button onClick={onButtonClick}\u0026gt;Focus the input\u0026lt;/button\u0026gt; \u0026lt;/\u0026gt; ); } Essentially, useRef is like a “box” that can hold a mutable value in its .current property.\nYou might be familiar with refs primarily as a way to access the DOM. If you pass a ref object to React with \u0026lt;div ref={myRef} /\u0026gt;, React will set its .current property to the corresponding DOM node whenever that node changes.\nHowever, useRef() is useful for more than the ref attribute. It’s handy for keeping any mutable value around similar to how you’d use instance fields in classes.\nThis works because useRef() creates a plain JavaScript object. The only difference between useRef() and creating a {current: ...} object yourself is that useRef will give you the same ref object on every render.\nKeep in mind that useRef doesn’t notify you when its content changes. Mutating the .current property doesn’t cause a re-render. If you want to run some code when React attaches or detaches a ref to a DOM node, you may want to use a callback ref instead.\n"},{"id":400,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/usestate/","title":"Usestate","section":"Hooks","content":" 🌵 useState # useState # const [state, setState] = useState(initialState); Returns a stateful value, and a function to update it.\nDuring the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).\nThe setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component.\nsetState(newState); During subsequent re-renders, the first value returned by useState will always be the most recent state after applying updates.\nNote\nReact guarantees that setState function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the useEffect or useCallback dependency list.\nFunctional updates\nIf the new state is computed using the previous state, you can pass a function to setState. The function will receive the previous value, and return an updated value. Here’s an example of a counter component that uses both forms of setState:\nfunction Counter({initialCount}) { const [count, setCount] = useState(initialCount); return ( \u0026lt;\u0026gt; Count: {count} \u0026lt;button onClick={() =\u0026gt; setCount(initialCount)}\u0026gt;Reset\u0026lt;/button\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(prevCount =\u0026gt; prevCount - 1)}\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(prevCount =\u0026gt; prevCount + 1)}\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/\u0026gt; ); } The ”+” and ”-” buttons use the functional form, because the updated value is based on the previous value. But the “Reset” button uses the normal form, because it always sets the count back to the initial value.\nIf your update function returns the exact same value as the current state, the subsequent rerender will be skipped completely.\nNote\nUnlike the setState method found in class components, useState does not automatically merge update objects. You can replicate this behavior by combining the function updater form with object spread syntax:\nconst [state, setState] = useState({}); setState(prevState =\u0026gt; { // Object.assign would also work return {...prevState, ...updatedValues}; }); Another option is useReducer, which is more suited for managing state objects that contain multiple sub-values.\nLazy initial state\nThe initialState argument is the state used during the initial render. In subsequent renders, it is disregarded. If the initial state is the result of an expensive computation, you may provide a function instead, which will be executed only on the initial render:\nconst [state, setState] = useState(() =\u0026gt; { const initialState = someExpensiveComputation(props); return initialState; }); Bailing out of a state update\nIf you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.)\nNote that React may still need to render that specific component again before bailing out. That shouldn’t be a concern because React won’t unnecessarily go “deeper” into the tree. If you’re doing expensive calculations while rendering, you can optimize them with useMemo.\nBatching of state updates\nReact may group several state updates into a single re-render to improve performance. Normally, this improves performance and shouldn’t affect your application’s behavior.\nBefore React 18, only updates inside React event handlers were batched. Starting with React 18, batching is enabled for all updates by default. Note that React makes sure that updates from several different user-initiated events — for example, clicking a button twice — are always processed separately and do not get batched. This prevents logical mistakes.\nIn the rare case that you need to force the DOM update to be applied synchronously, you may wrap it in flushSync. However, this can hurt performance so do this only where needed.\n"},{"id":401,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/usesyncexternalstore/","title":"Usesyncexternalstore","section":"Hooks","content":" useSyncExternalStore # useSyncExternalStore # const state = useSyncExternalStore(subscribe, getSnapshot[, getServerSnapshot]); useSyncExternalStore is a hook recommended for reading and subscribing from external data sources in a way that’s compatible with concurrent rendering features like selective hydration and time slicing.\nThis method returns the value of the store and accepts three arguments:\nsubscribe: function to register a callback that is called whenever the store changes. getSnapshot: function that returns the current value of the store. getServerSnapshot: function that returns the snapshot used during server rendering. The most basic example simply subscribes to the entire store:\nconst state = useSyncExternalStore(store.subscribe, store.getSnapshot); However, you can also subscribe to a specific field:\nconst selectedField = useSyncExternalStore( store.subscribe, () =\u0026gt; store.getSnapshot().selectedField, ); When server rendering, you must serialize the store value used on the server, and provide it to useSyncExternalStore. React will use this snapshot during hydration to prevent server mismatches:\nconst selectedField = useSyncExternalStore( store.subscribe, () =\u0026gt; store.getSnapshot().selectedField, () =\u0026gt; INITIAL_SERVER_SNAPSHOT.selectedField, ); Note:\ngetSnapshot must return a cached value. If getSnapshot is called multiple times in a row, it must return the same exact value unless there was a store update in between.\nA shim is provided for supporting multiple React versions published as use-sync-external-store/shim. This shim will prefer useSyncExternalStore when available, and fallback to a user-space implementation when it’s not.\nAs a convenience, we also provide a version of the API with automatic support for memoizing the result of getSnapshot published as use-sync-external-store/with-selector.\n"},{"id":402,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/usetransition/","title":"Usetransition","section":"Hooks","content":" useTransition # useTransition # const [isPending, startTransition] = useTransition(); Returns a stateful value for the pending state of the transition, and a function to start it.\nstartTransition lets you mark updates in the provided callback as transitions:\nstartTransition(() =\u0026gt; { setCount(count + 1); }) isPending indicates when a transition is active to show a pending state:\nfunction App() { const [isPending, startTransition] = useTransition(); const [count, setCount] = useState(0); function handleClick() { startTransition(() =\u0026gt; { setCount(c =\u0026gt; c + 1); }) } return ( \u0026lt;div\u0026gt; {isPending \u0026amp;\u0026amp; \u0026lt;Spinner /\u0026gt;} \u0026lt;button onClick={handleClick}\u0026gt;{count}\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } "},{"id":403,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/using-the-effect-hook/","title":"Using the Effect Hook","section":"Hooks","content":" 🌵 Using the Effect Hook # Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\nThe Effect Hook lets you perform side effects in function components:\nimport React, { useState, useEffect } from \u0026#39;react\u0026#39;; function Example() { const [count, setCount] = useState(0); // Similar to componentDidMount and componentDidUpdate: useEffect(() =\u0026gt; { // Update the document title using the browser API document.title = `You clicked ${count} times`; }); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } This snippet is based on the counter example from the previous page, but we added a new feature to it: we set the document title to a custom message including the number of clicks.\nData fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects. Whether or not you’re used to calling these operations “side effects” (or just “effects”), you’ve likely performed them in your components before.\nTip\nIf you’re familiar with React class lifecycle methods, you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.\nThere are two common kinds of side effects in React components: those that don’t require cleanup, and those that do. Let’s look at this distinction in more detail.\nEffects Without Cleanup # Sometimes, we want to run some additional code after React has updated the DOM. Network requests, manual DOM mutations, and logging are common examples of effects that don’t require a cleanup. We say that because we can run them and immediately forget about them. Let’s compare how classes and Hooks let us express such side effects.\nExample Using Classes # In React class components, the render method itself shouldn’t cause side effects. It would be too early — we typically want to perform our effects after React has updated the DOM.\nThis is why in React classes, we put side effects into componentDidMount and componentDidUpdate. Coming back to our example, here is a React counter class component that updates the document title right after React makes changes to the DOM:\nclass Example extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; } componentDidMount() { document.title = `You clicked ${this.state.count} times`; } componentDidUpdate() { document.title = `You clicked ${this.state.count} times`; } render() { return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {this.state.count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; this.setState({ count: this.state.count + 1 })}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } } Note how we have to duplicate the code between these two lifecycle methods in class.\nThis is because in many cases we want to perform the same side effect regardless of whether the component just mounted, or if it has been updated. Conceptually, we want it to happen after every render — but React class components don’t have a method like this. We could extract a separate method but we would still have to call it in two places.\nNow let’s see how we can do the same with the useEffect Hook.\nExample Using Hooks # We’ve already seen this example at the top of this page, but let’s take a closer look at it:\nimport React, { useState, useEffect } from \u0026#39;react\u0026#39;; function Example() { const [count, setCount] = useState(0); useEffect(() =\u0026gt; { document.title = `You clicked ${count} times`; }); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } What does useEffect do? By using this Hook, you tell React that your component needs to do something after render. React will remember the function you passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates. In this effect, we set the document title, but we could also perform data fetching or call some other imperative API.\nWhy is useEffect called inside a component? Placing useEffect inside the component lets us access the count state variable (or any props) right from the effect. We don’t need a special API to read it — it’s already in the function scope. Hooks embrace JavaScript closures and avoid introducing React-specific APIs where JavaScript already provides a solution.\nDoes useEffect run after every render? Yes! By default, it runs both after the first render and after every update. (We will later talk about how to customize this.) Instead of thinking in terms of “mounting” and “updating”, you might find it easier to think that effects happen “after render”. React guarantees the DOM has been updated by the time it runs the effects.\nDetailed Explanation # Now that we know more about effects, these lines should make sense:\nfunction Example() { const [count, setCount] = useState(0); useEffect(() =\u0026gt; { document.title = `You clicked ${count} times`; }); } We declare the count state variable, and then we tell React we need to use an effect. We pass a function to the useEffect Hook. This function we pass is our effect. Inside our effect, we set the document title using the document.title browser API. We can read the latest count inside the effect because it’s in the scope of our function. When React renders our component, it will remember the effect we used, and then run our effect after updating the DOM. This happens for every render, including the first one.\nExperienced JavaScript developers might notice that the function passed to useEffect is going to be different on every render. This is intentional. In fact, this is what lets us read the count value from inside the effect without worrying about it getting stale. Every time we re-render, we schedule a different effect, replacing the previous one. In a way, this makes the effects behave more like a part of the render result — each effect “belongs” to a particular render. We will see more clearly why this is useful later on this page.\nTip\nUnlike componentDidMount or componentDidUpdate, effects scheduled with useEffect don’t block the browser from updating the screen. This makes your app feel more responsive. The majority of effects don’t need to happen synchronously. In the uncommon cases where they do (such as measuring the layout), there is a separate useLayoutEffect Hook with an API identical to useEffect.\nEffects with Cleanup # Earlier, we looked at how to express side effects that don’t require any cleanup. However, some effects do. For example, we might want to set up a subscription to some external data source. In that case, it is important to clean up so that we don’t introduce a memory leak! Let’s compare how we can do it with classes and with Hooks.\nExample Using Classes # In a React class, you would typically set up a subscription in componentDidMount, and clean it up in componentWillUnmount. For example, let’s say we have a ChatAPI module that lets us subscribe to a friend’s online status. Here’s how we might subscribe and display that status using a class:\nclass FriendStatus extends React.Component { constructor(props) { super(props); this.state = { isOnline: null }; this.handleStatusChange = this.handleStatusChange.bind(this); } componentDidMount() { ChatAPI.subscribeToFriendStatus( this.props.friend.id, this.handleStatusChange ); } componentWillUnmount() { ChatAPI.unsubscribeFromFriendStatus( this.props.friend.id, this.handleStatusChange ); } handleStatusChange(status) { this.setState({ isOnline: status.isOnline }); } render() { if (this.state.isOnline === null) { return \u0026#39;Loading...\u0026#39;; } return this.state.isOnline ? \u0026#39;Online\u0026#39; : \u0026#39;Offline\u0026#39;; } } Notice how componentDidMount and componentWillUnmount need to mirror each other. Lifecycle methods force us to split this logic even though conceptually code in both of them is related to the same effect.\nNote\nEagle-eyed readers may notice that this example also needs a componentDidUpdate method to be fully correct. We’ll ignore this for now but will come back to it in a later section of this page.\nExample Using Hooks # Let’s see how we could write this component with Hooks.\nYou might be thinking that we’d need a separate effect to perform the cleanup. But code for adding and removing a subscription is so tightly related that useEffect is designed to keep it together. If your effect returns a function, React will run it when it is time to clean up:\nimport React, { useState, useEffect } from \u0026#39;react\u0026#39;; function FriendStatus(props) { const [isOnline, setIsOnline] = useState(null); useEffect(() =\u0026gt; { function handleStatusChange(status) { setIsOnline(status.isOnline); } ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); // Specify how to clean up after this effect: return function cleanup() { ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange); }; }); if (isOnline === null) { return \u0026#39;Loading...\u0026#39;; } return isOnline ? \u0026#39;Online\u0026#39; : \u0026#39;Offline\u0026#39;; } Why did we return a function from our effect? This is the optional cleanup mechanism for effects. Every effect may return a function that cleans up after it. This lets us keep the logic for adding and removing subscriptions close to each other. They’re part of the same effect!\nWhen exactly does React clean up an effect? React performs the cleanup when the component unmounts. However, as we learned earlier, effects run for every render and not just once. This is why React also cleans up effects from the previous render before running the effects next time. We’ll discuss why this helps avoid bugs and how to opt out of this behavior in case it creates performance issues later below.\nNote\nWe don’t have to return a named function from the effect. We called it cleanup here to clarify its purpose, but you could return an arrow function or call it something different.\nRecap # We’ve learned that useEffect lets us express different kinds of side effects after a component renders. Some effects might require cleanup so they return a function:\nuseEffect(() =\u0026gt; { function handleStatusChange(status) { setIsOnline(status.isOnline); } ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); return () =\u0026gt; { ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange); }; }); Other effects might not have a cleanup phase, and don’t return anything.\nuseEffect(() =\u0026gt; { document.title = `You clicked ${count} times`; }); The Effect Hook unifies both use cases with a single API.\nIf you feel like you have a decent grasp on how the Effect Hook works, or if you feel overwhelmed, you can jump to the next page about Rules of Hooks now.\nTips for Using Effects # We’ll continue this page with an in-depth look at some aspects of useEffect that experienced React users will likely be curious about. Don’t feel obligated to dig into them now. You can always come back to this page to learn more details about the Effect Hook.\nTip: Use Multiple Effects to Separate Concerns # One of the problems we outlined in the Motivation for Hooks is that class lifecycle methods often contain unrelated logic, but related logic gets broken up into several methods. Here is a component that combines the counter and the friend status indicator logic from the previous examples:\nclass FriendStatusWithCounter extends React.Component { constructor(props) { super(props); this.state = { count: 0, isOnline: null }; this.handleStatusChange = this.handleStatusChange.bind(this); } componentDidMount() { document.title = `You clicked ${this.state.count} times`; ChatAPI.subscribeToFriendStatus( this.props.friend.id, this.handleStatusChange ); } componentDidUpdate() { document.title = `You clicked ${this.state.count} times`; } componentWillUnmount() { ChatAPI.unsubscribeFromFriendStatus( this.props.friend.id, this.handleStatusChange ); } handleStatusChange(status) { this.setState({ isOnline: status.isOnline }); } // ... Note how the logic that sets document.title is split between componentDidMount and componentDidUpdate. The subscription logic is also spread between componentDidMount and componentWillUnmount. And componentDidMount contains code for both tasks.\nSo, how can Hooks solve this problem? Just like you can use the State Hook more than once, you can also use several effects. This lets us separate unrelated logic into different effects:\nfunction FriendStatusWithCounter(props) { const [count, setCount] = useState(0); useEffect(() =\u0026gt; { document.title = `You clicked ${count} times`; }); const [isOnline, setIsOnline] = useState(null); useEffect(() =\u0026gt; { function handleStatusChange(status) { setIsOnline(status.isOnline); } ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); return () =\u0026gt; { ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange); }; }); // ... } Hooks let us split the code based on what it is doing rather than a lifecycle method name. React will apply every effect used by the component, in the order they were specified.\nExplanation: Why Effects Run on Each Update # If you’re used to classes, you might be wondering why the effect cleanup phase happens after every re-render, and not just once during unmounting. Let’s look at a practical example to see why this design helps us create components with fewer bugs.\nEarlier on this page, we introduced an example FriendStatus component that displays whether a friend is online or not. Our class reads friend.id from this.props, subscribes to the friend status after the component mounts, and unsubscribes during unmounting:\ncomponentDidMount() { ChatAPI.subscribeToFriendStatus( this.props.friend.id, this.handleStatusChange ); } componentWillUnmount() { ChatAPI.unsubscribeFromFriendStatus( this.props.friend.id, this.handleStatusChange ); } But what happens if the friend prop changes while the component is on the screen? Our component would continue displaying the online status of a different friend. This is a bug. We would also cause a memory leak or crash when unmounting since the unsubscribe call would use the wrong friend ID.\nIn a class component, we would need to add componentDidUpdate to handle this case:\ncomponentDidMount() { ChatAPI.subscribeToFriendStatus( this.props.friend.id, this.handleStatusChange ); } componentDidUpdate(prevProps) { // Unsubscribe from the previous friend.id ChatAPI.unsubscribeFromFriendStatus( prevProps.friend.id, this.handleStatusChange ); // Subscribe to the next friend.id ChatAPI.subscribeToFriendStatus( this.props.friend.id, this.handleStatusChange ); } componentWillUnmount() { ChatAPI.unsubscribeFromFriendStatus( this.props.friend.id, this.handleStatusChange ); } Forgetting to handle componentDidUpdate properly is a common source of bugs in React applications.\nNow consider the version of this component that uses Hooks:\nfunction FriendStatus(props) { // ... useEffect(() =\u0026gt; { // ... ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); return () =\u0026gt; { ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange); }; }); It doesn’t suffer from this bug. (But we also didn’t make any changes to it.)\nThere is no special code for handling updates because useEffect handles them by default. It cleans up the previous effects before applying the next effects. To illustrate this, here is a sequence of subscribe and unsubscribe calls that this component could produce over time:\n// Mount with { friend: { id: 100 } } props ChatAPI.subscribeToFriendStatus(100, handleStatusChange); // Run first effect // Update with { friend: { id: 200 } } props ChatAPI.unsubscribeFromFriendStatus(100, handleStatusChange); // Clean up previous effect ChatAPI.subscribeToFriendStatus(200, handleStatusChange); // Run next effect // Update with { friend: { id: 300 } } props ChatAPI.unsubscribeFromFriendStatus(200, handleStatusChange); // Clean up previous effect ChatAPI.subscribeToFriendStatus(300, handleStatusChange); // Run next effect // Unmount ChatAPI.unsubscribeFromFriendStatus(300, handleStatusChange); // Clean up last effect This behavior ensures consistency by default and prevents bugs that are common in class components due to missing update logic.\nTip: Optimizing Performance by Skipping Effects # In some cases, cleaning up or applying the effect after every render might create a performance problem. In class components, we can solve this by writing an extra comparison with prevProps or prevState inside componentDidUpdate:\ncomponentDidUpdate(prevProps, prevState) { if (prevState.count !== this.state.count) { document.title = `You clicked ${this.state.count} times`; } } This requirement is common enough that it is built into the useEffect Hook API. You can tell React to skip applying an effect if certain values haven’t changed between re-renders. To do so, pass an array as an optional second argument to useEffect:\nuseEffect(() =\u0026gt; { document.title = `You clicked ${count} times`; }, [count]); // Only re-run the effect if count changes In the example above, we pass [count] as the second argument. What does this mean? If the count is 5, and then our component re-renders with count still equal to 5, React will compare [5] from the previous render and [5] from the next render. Because all items in the array are the same (5 === 5), React would skip the effect. That’s our optimization.\nWhen we render with count updated to 6, React will compare the items in the [5] array from the previous render to items in the [6] array from the next render. This time, React will re-apply the effect because 5 !== 6. If there are multiple items in the array, React will re-run the effect even if just one of them is different.\nThis also works for effects that have a cleanup phase:\nuseEffect(() =\u0026gt; { function handleStatusChange(status) { setIsOnline(status.isOnline); } ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); return () =\u0026gt; { ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange); }; }, [props.friend.id]); // Only re-subscribe if props.friend.id changes In the future, the second argument might get added automatically by a build-time transformation.\nNote\nIf you use this optimization, make sure the array includes all values from the component scope (such as props and state) that change over time and that are used by the effect. Otherwise, your code will reference stale values from previous renders. Learn more about how to deal with functions and what to do when the array changes too often.\nIf you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument. This tells React that your effect doesn’t depend on any values from props or state, so it never needs to re-run. This isn’t handled as a special case — it follows directly from how the dependencies array always works.\nIf you pass an empty array ([]), the props and state inside the effect will always have their initial values. While passing [] as the second argument is closer to the familiar componentDidMount and componentWillUnmount mental model, there are usually better solutions to avoid re-running effects too often. Also, don’t forget that React defers running useEffect until after the browser has painted, so doing extra work is less of a problem.\nWe recommend using the exhaustive-deps rule as part of our eslint-plugin-react-hooks package. It warns when dependencies are specified incorrectly and suggests a fix.\nNext Steps # Congratulations! This was a long page, but hopefully by the end most of your questions about effects were answered. You’ve learned both the State Hook and the Effect Hook, and there is a lot you can do with both of them combined. They cover most of the use cases for classes — and where they don’t, you might find the additional Hooks helpful.\nWe’re also starting to see how Hooks solve problems outlined in Motivation. We’ve seen how effect cleanup avoids duplication in componentDidUpdate and componentWillUnmount, brings related code closer together, and helps us avoid bugs. We’ve also seen how we can separate effects by their purpose, which is something we couldn’t do in classes at all.\nAt this point you might be questioning how Hooks work. How can React know which useState call corresponds to which state variable between re-renders? How does React “match up” previous and next effects on every update? On the next page we will learn about the Rules of Hooks — they’re essential to making Hooks work.\n"},{"id":404,"href":"/docs/references/meta-frameworks/react/frequently-used/hooks/using-the-state-hook/","title":"Using the State Hook","section":"Hooks","content":" 🌵 Using the State Hook # Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\nThe introduction page used this example to get familiar with Hooks:\nimport React, { useState } from \u0026#39;react\u0026#39;; function Example() { // Declare a new state variable, which we\u0026#39;ll call \u0026#34;count\u0026#34; const [count, setCount] = useState(0); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } We’ll start learning about Hooks by comparing this code to an equivalent class example.\nEquivalent Class Example # If you used classes in React before, this code should look familiar:\nclass Example extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; } render() { return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {this.state.count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; this.setState({ count: this.state.count + 1 })}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } } The state starts as { count: 0 }, and we increment state.count when the user clicks a button by calling this.setState(). We’ll use snippets from this class throughout the page.\nNote\nYou might be wondering why we’re using a counter here instead of a more realistic example. This is to help us focus on the API while we’re still making our first steps with Hooks.\nHooks and Function Components # As a reminder, function components in React look like this:\nconst Example = (props) =\u0026gt; { // You can use Hooks here! return \u0026lt;div /\u0026gt;; } or this:\nfunction Example(props) { // You can use Hooks here! return \u0026lt;div /\u0026gt;; } You might have previously known these as “stateless components”. We’re now introducing the ability to use React state from these, so we prefer the name “function components”.\nHooks don’t work inside classes. But you can use them instead of writing classes.\nWhat’s a Hook? # Our new example starts by importing the useState Hook from React:\nimport React, { useState } from \u0026#39;react\u0026#39;; function Example() { // ... } What is a Hook? A Hook is a special function that lets you “hook into” React features. For example, useState is a Hook that lets you add React state to function components. We’ll learn other Hooks later.\nWhen would I use a Hook? If you write a function component and realize you need to add some state to it, previously you had to convert it to a class. Now you can use a Hook inside the existing function component. We’re going to do that right now!\nNote:\nThere are some special rules about where you can and can’t use Hooks within a component. We’ll learn them in Rules of Hooks.\nDeclaring a State Variable # In a class, we initialize the count state to 0 by setting this.state to { count: 0 } in the constructor:\nclass Example extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; } In a function component, we have no this, so we can’t assign or read this.state. Instead, we call the useState Hook directly inside our component:\nimport React, { useState } from \u0026#39;react\u0026#39;; function Example() { // Declare a new state variable, which we\u0026#39;ll call \u0026#34;count\u0026#34; const [count, setCount] = useState(0); What does calling useState do? It declares a “state variable”. Our variable is called count but we could call it anything else, like banana. This is a way to “preserve” some values between the function calls — useState is a new way to use the exact same capabilities that this.state provides in a class. Normally, variables “disappear” when the function exits but state variables are preserved by React.\nWhat do we pass to useState as an argument? The only argument to the useState() Hook is the initial state. Unlike with classes, the state doesn’t have to be an object. We can keep a number or a string if that’s all we need. In our example, we just want a number for how many times the user clicked, so pass 0 as initial state for our variable. (If we wanted to store two different values in state, we would call useState() twice.)\nWhat does useState return? It returns a pair of values: the current state and a function that updates it. This is why we write const [count, setCount] = useState(). This is similar to this.state.count and this.setState in a class, except you get them in a pair. If you’re not familiar with the syntax we used, we’ll come back to it at the bottom of this page.\nNow that we know what the useState Hook does, our example should make more sense:\nimport React, { useState } from \u0026#39;react\u0026#39;; function Example() { // Declare a new state variable, which we\u0026#39;ll call \u0026#34;count\u0026#34; const [count, setCount] = useState(0); We declare a state variable called count, and set it to 0. React will remember its current value between re-renders, and provide the most recent one to our function. If we want to update the current count, we can call setCount.\nNote\nYou might be wondering: why is useState not named createState instead?\n“Create” wouldn’t be quite accurate because the state is only created the first time our component renders. During the next renders, useState gives us the current state. Otherwise it wouldn’t be “state” at all! There’s also a reason why Hook names always start with use. We’ll learn why later in the Rules of Hooks.\nReading State # When we want to display the current count in a class, we read this.state.count:\n\u0026lt;p\u0026gt;You clicked {this.state.count} times\u0026lt;/p\u0026gt; In a function, we can use count directly:\n\u0026lt;p\u0026gt;You clicked {count} times\u0026lt;/p\u0026gt; Updating State # In a class, we need to call this.setState() to update the count state:\n\u0026lt;button onClick={() =\u0026gt; this.setState({ count: this.state.count + 1 })}\u0026gt; Click me \u0026lt;/button\u0026gt; In a function, we already have setCount and count as variables so we don’t need this:\n\u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt; Click me \u0026lt;/button\u0026gt; Recap # Let’s now recap what we learned line by line and check our understanding.\n1: import React, { useState } from \u0026#39;react\u0026#39;; 2: 3: function Example() { 4: const [count, setCount] = useState(0); 5: 6: return ( 7: \u0026lt;div\u0026gt; 8: \u0026lt;p\u0026gt;You clicked {count} times\u0026lt;/p\u0026gt; 9: \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt;10: Click me 11: \u0026lt;/button\u0026gt; 12: \u0026lt;/div\u0026gt; 13: ); 14: } Line 1: We import the useState Hook from React. It lets us keep local state in a function component. Line 4: Inside the Example component, we declare a new state variable by calling the useState Hook. It returns a pair of values, to which we give names. We’re calling our variable count because it holds the number of button clicks. We initialize it to zero by passing 0 as the only useState argument. The second returned item is itself a function. It lets us update the count so we’ll name it setCount. Line 9: When the user clicks, we call setCount with a new value. React will then re-render the Example component, passing the new count value to it. This might seem like a lot to take in at first. Don’t rush it! If you’re lost in the explanation, look at the code above again and try to read it from top to bottom. We promise that once you try to “forget” how state works in classes, and look at this code with fresh eyes, it will make sense.\nTip: What Do Square Brackets Mean? # You might have noticed the square brackets when we declare a state variable:\nconst [count, setCount] = useState(0); The names on the left aren’t a part of the React API. You can name your own state variables:\nconst [fruit, setFruit] = useState(\u0026#39;banana\u0026#39;); This JavaScript syntax is called “array destructuring”. It means that we’re making two new variables fruit and setFruit, where fruit is set to the first value returned by useState, and setFruit is the second. It is equivalent to this code:\nvar fruitStateVariable = useState(\u0026#39;banana\u0026#39;); // Returns a pair var fruit = fruitStateVariable[0]; // First item in a pair var setFruit = fruitStateVariable[1]; // Second item in a pair When we declare a state variable with useState, it returns a pair — an array with two items. The first item is the current value, and the second is a function that lets us update it. Using [0] and [1] to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.\nNote\nYou might be curious how React knows which component useState corresponds to since we’re not passing anything like this back to React. We’ll answer this question and many others in the FAQ section.\nTip: Using Multiple State Variables # Declaring state variables as a pair of [something, setSomething] is also handy because it lets us give different names to different state variables if we want to use more than one:\nfunction ExampleWithManyStates() { // Declare multiple state variables! const [age, setAge] = useState(42); const [fruit, setFruit] = useState(\u0026#39;banana\u0026#39;); const [todos, setTodos] = useState([{ text: \u0026#39;Learn Hooks\u0026#39; }]); In the above component, we have age, fruit, and todos as local variables, and we can update them individually:\nfunction handleOrangeClick() { // Similar to this.setState({ fruit: \u0026#39;orange\u0026#39; }) setFruit(\u0026#39;orange\u0026#39;); } You don’t have to use many state variables. State variables can hold objects and arrays just fine, so you can still group related data together. However, unlike this.setState in a class, updating a state variable always replaces it instead of merging it.\nWe provide more recommendations on splitting independent state variables in the FAQ.\nNext Steps # On this page we’ve learned about one of the Hooks provided by React, called useState. We’re also sometimes going to refer to it as the “State Hook”. It lets us add local state to React function components — which we did for the first time ever!\nWe also learned a little bit more about what Hooks are. Hooks are functions that let you “hook into” React features from function components. Their names always start with use, and there are more Hooks we haven’t seen yet.\nNow let’s continue by learning the next Hook: useEffect. It lets you perform side effects in components, and is similar to lifecycle methods in classes.\n"},{"id":405,"href":"/docs/references/meta-frameworks/react/frequently-used/testing/testing-environments/","title":"Testing Environments","section":"Testing","content":" Testing Environments # This document goes through the factors that can affect your environment and recommendations for some scenarios.\nTest runners # Test runners like Jest, mocha, ava let you write test suites as regular JavaScript, and run them as part of your development process. Additionally, test suites are run as part of continuous integration.\nJest is widely compatible with React projects, supporting features like mocked modules and timers, and jsdom support. If you use Create React App, Jest is already included out of the box with useful defaults. Libraries like mocha work well in real browser environments, and could help for tests that explicitly need it. End-to-end tests are used for testing longer flows across multiple pages, and require a different setup. Mocking a rendering surface # Tests often run in an environment without access to a real rendering surface like a browser. For these environments, we recommend simulating a browser with jsdom, a lightweight browser implementation that runs inside Node.js.\nIn most cases, jsdom behaves like a regular browser would, but doesn’t have features like layout and navigation. This is still useful for most web-based component tests, since it runs quicker than having to start up a browser for each test. It also runs in the same process as your tests, so you can write code to examine and assert on the rendered DOM.\nJust like in a real browser, jsdom lets us model user interactions; tests can dispatch events on DOM nodes, and then observe and assert on the side effects of these actions (example).\nA large portion of UI tests can be written with the above setup: using Jest as a test runner, rendered to jsdom, with user interactions specified as sequences of browser events, powered by the act() helper (example). For example, a lot of React’s own tests are written with this combination.\nIf you’re writing a library that tests mostly browser-specific behavior, and requires native browser behavior like layout or real inputs, you could use a framework like mocha.\nIn an environment where you can’t simulate a DOM (e.g. testing React Native components on Node.js), you could use event simulation helpers to simulate interactions with elements. Alternately, you could use the fireEvent helper from @testing-library/react-native.\nFrameworks like Cypress, puppeteer and webdriver are useful for running end-to-end tests.\nMocking functions # When writing tests, we’d like to mock out the parts of our code that don’t have equivalents inside our testing environment (e.g. checking navigator.onLine status inside Node.js). Tests could also spy on some functions, and observe how other parts of the test interact with them. It is then useful to be able to selectively mock these functions with test-friendly versions.\nThis is especially useful for data fetching. It is usually preferable to use “fake” data for tests to avoid the slowness and flakiness due to fetching from real API endpoints (example). This helps make the tests predictable. Libraries like Jest and sinon, among others, support mocked functions. For end-to-end tests, mocking network can be more difficult, but you might also want to test the real API endpoints in them anyway.\nMocking modules # Some components have dependencies for modules that may not work well in test environments, or aren’t essential to our tests. It can be useful to selectively mock these modules out with suitable replacements (example).\nOn Node.js, runners like Jest support mocking modules. You could also use libraries like mock-require.\nMocking timers # Components might be using time-based functions like setTimeout, setInterval, or Date.now. In testing environments, it can be helpful to mock these functions out with replacements that let you manually “advance” time. This is great for making sure your tests run fast! Tests that are dependent on timers would still resolve in order, but quicker (example). Most frameworks, including Jest, sinon and lolex, let you mock timers in your tests.\nSometimes, you may not want to mock timers. For example, maybe you’re testing an animation, or interacting with an endpoint that’s sensitive to timing (like an API rate limiter). Libraries with timer mocks let you enable and disable them on a per test/suite basis, so you can explicitly choose how these tests would run.\nEnd-to-end tests # End-to-end tests are useful for testing longer workflows, especially when they’re critical to your business (such as payments or signups). For these tests, you’d probably want to test how a real browser renders the whole app, fetches data from the real API endpoints, uses sessions and cookies, navigates between different links. You might also likely want to make assertions not just on the DOM state, but on the backing data as well (e.g. to verify whether the updates have been persisted to the database).\nIn this scenario, you would use a framework like Cypress, Playwright or a library like Puppeteer so you can navigate between multiple routes and assert on side effects not just in the browser, but potentially on the backend as well.\n"},{"id":406,"href":"/docs/references/meta-frameworks/react/frequently-used/testing/testing-overview/","title":"Testing Overview","section":"Testing","content":" Testing Overview # You can test React components similar to testing other JavaScript code.\nThere are a few ways to test React components. Broadly, they divide into two categories:\nRendering component trees in a simplified test environment and asserting on their output. Running a complete app in a realistic browser environment (also known as “end-to-end” tests). This documentation section focuses on testing strategies for the first case. While full end-to-end tests can be very useful to prevent regressions to important workflows, such tests are not concerned with React components in particular, and are out of the scope of this section.\nTradeoffs # When choosing testing tools, it is worth considering a few tradeoffs:\nIteration speed vs Realistic environment: Some tools offer a very quick feedback loop between making a change and seeing the result, but don’t model the browser behavior precisely. Other tools might use a real browser environment, but reduce the iteration speed and are flakier on a continuous integration server. How much to mock: With components, the distinction between a “unit” and “integration” test can be blurry. If you’re testing a form, should its test also test the buttons inside of it? Or should a button component have its own test suite? Should refactoring a button ever break the form test? Different answers may work for different teams and products.\nRecommended Tools # Jest is a JavaScript test runner that lets you access the DOM via jsdom. While jsdom is only an approximation of how the browser works, it is often good enough for testing React components. Jest provides a great iteration speed combined with powerful features like mocking modules and timers so you can have more control over how the code executes.\nReact Testing Library is a set of helpers that let you test React components without relying on their implementation details. This approach makes refactoring a breeze and also nudges you towards best practices for accessibility. Although it doesn’t provide a way to “shallowly” render a component without its children, a test runner like Jest lets you do this by mocking.\nLearn More # This section is divided in two pages:\nRecipes: Common patterns when writing tests for React components. Environments: What to consider when setting up a testing environment for React components. "},{"id":407,"href":"/docs/references/meta-frameworks/react/frequently-used/testing/testing-recipes/","title":"Testing Recipes","section":"Testing","content":" ⭐ Testing Recipes # Common testing patterns for React components.\nNote:\nThis page assumes you’re using Jest as a test runner. If you use a different test runner, you may need to adjust the API, but the overall shape of the solution will likely be the same. Read more details on setting up a testing environment on the Testing Environments page.\nOn this page, we will primarily use function components. However, these testing strategies don’t depend on implementation details, and work just as well for class components too.\nSetup/Teardown act() Rendering Data Fetching Mocking Modules Events Timers Snapshot Testing Multiple Renderers Something Missing? Setup/Teardown # For each test, we usually want to render our React tree to a DOM element that’s attached to document. This is important so that it can receive DOM events. When the test ends, we want to “clean up” and unmount the tree from the document.\nA common way to do it is to use a pair of beforeEach and afterEach blocks so that they’ll always run and isolate the effects of a test to itself:\nimport { unmountComponentAtNode } from \u0026#34;react-dom\u0026#34;; let container = null; beforeEach(() =\u0026gt; { // setup a DOM element as a render target container = document.createElement(\u0026#34;div\u0026#34;); document.body.appendChild(container); }); afterEach(() =\u0026gt; { // cleanup on exiting unmountComponentAtNode(container); container.remove(); container = null; }); You may use a different pattern, but keep in mind that we want to execute the cleanup even if a test fails. Otherwise, tests can become “leaky”, and one test can change the behavior of another test. That makes them difficult to debug.\nact() # When writing UI tests, tasks like rendering, user events, or data fetching can be considered as “units” of interaction with a user interface. react-dom/test-utils provides a helper called act() that makes sure all updates related to these “units” have been processed and applied to the DOM before you make any assertions:\nact(() =\u0026gt; { // render components }); // make assertions This helps make your tests run closer to what real users would experience when using your application. The rest of these examples use act() to make these guarantees.\nYou might find using act() directly a bit too verbose. To avoid some of the boilerplate, you could use a library like React Testing Library, whose helpers are wrapped with act().\nNote:\nThe name act comes from the Arrange-Act-Assert pattern.\nRendering # Commonly, you might want to test whether a component renders correctly for given props. Consider a simple component that renders a message based on a prop:\n// hello.js import React from \u0026#34;react\u0026#34;; export default function Hello(props) { if (props.name) { return \u0026lt;h1\u0026gt;Hello, {props.name}!\u0026lt;/h1\u0026gt;; } else { return \u0026lt;span\u0026gt;Hey, stranger\u0026lt;/span\u0026gt;; } } We can write a test for this component:\n// hello.test.js import React from \u0026#34;react\u0026#34;; import { render, unmountComponentAtNode } from \u0026#34;react-dom\u0026#34;; import { act } from \u0026#34;react-dom/test-utils\u0026#34;; import Hello from \u0026#34;./hello\u0026#34;; let container = null; beforeEach(() =\u0026gt; { // setup a DOM element as a render target container = document.createElement(\u0026#34;div\u0026#34;); document.body.appendChild(container); }); afterEach(() =\u0026gt; { // cleanup on exiting unmountComponentAtNode(container); container.remove(); container = null; }); it(\u0026#34;renders with or without a name\u0026#34;, () =\u0026gt; { act(() =\u0026gt; { render(\u0026lt;Hello /\u0026gt;, container); }); expect(container.textContent).toBe(\u0026#34;Hey, stranger\u0026#34;); act(() =\u0026gt; { render(\u0026lt;Hello name=\u0026#34;Jenny\u0026#34; /\u0026gt;, container); }); expect(container.textContent).toBe(\u0026#34;Hello, Jenny!\u0026#34;); act(() =\u0026gt; { render(\u0026lt;Hello name=\u0026#34;Margaret\u0026#34; /\u0026gt;, container); }); expect(container.textContent).toBe(\u0026#34;Hello, Margaret!\u0026#34;); }); Data Fetching # Instead of calling real APIs in all your tests, you can mock requests with dummy data. Mocking data fetching with “fake” data prevents flaky tests due to an unavailable backend, and makes them run faster. Note: you may still want to run a subset of tests using an “end-to-end” framework that tells whether the whole app is working together.\n// user.js import React, { useState, useEffect } from \u0026#34;react\u0026#34;; export default function User(props) { const [user, setUser] = useState(null); async function fetchUserData(id) { const response = await fetch(\u0026#34;/\u0026#34; + id); setUser(await response.json()); } useEffect(() =\u0026gt; { fetchUserData(props.id); }, [props.id]); if (!user) { return \u0026#34;loading...\u0026#34;; } return ( \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;{user.name}\u0026lt;/summary\u0026gt; \u0026lt;strong\u0026gt;{user.age}\u0026lt;/strong\u0026gt; years old \u0026lt;br /\u0026gt; lives in {user.address} \u0026lt;/details\u0026gt; ); } We can write tests for it:\n// user.test.js import React from \u0026#34;react\u0026#34;; import { render, unmountComponentAtNode } from \u0026#34;react-dom\u0026#34;; import { act } from \u0026#34;react-dom/test-utils\u0026#34;; import User from \u0026#34;./user\u0026#34;; let container = null; beforeEach(() =\u0026gt; { // setup a DOM element as a render target container = document.createElement(\u0026#34;div\u0026#34;); document.body.appendChild(container); }); afterEach(() =\u0026gt; { // cleanup on exiting unmountComponentAtNode(container); container.remove(); container = null; }); it(\u0026#34;renders user data\u0026#34;, async () =\u0026gt; { const fakeUser = { name: \u0026#34;Joni Baez\u0026#34;, age: \u0026#34;32\u0026#34;, address: \u0026#34;123, Charming Avenue\u0026#34; }; jest.spyOn(global, \u0026#34;fetch\u0026#34;).mockImplementation(() =\u0026gt; Promise.resolve({ json: () =\u0026gt; Promise.resolve(fakeUser) }) ); // Use the asynchronous version of act to apply resolved promises await act(async () =\u0026gt; { render(\u0026lt;User id=\u0026#34;123\u0026#34; /\u0026gt;, container); }); expect(container.querySelector(\u0026#34;summary\u0026#34;).textContent).toBe(fakeUser.name); expect(container.querySelector(\u0026#34;strong\u0026#34;).textContent).toBe(fakeUser.age); expect(container.textContent).toContain(fakeUser.address); // remove the mock to ensure tests are completely isolated global.fetch.mockRestore();}); Mocking Modules # Some modules might not work well inside a testing environment, or may not be as essential to the test itself. Mocking out these modules with dummy replacements can make it easier to write tests for your own code.\nConsider a Contact component that embeds a third-party GoogleMap component:\n// map.js import React from \u0026#34;react\u0026#34;; import { LoadScript, GoogleMap } from \u0026#34;react-google-maps\u0026#34;; export default function Map(props) { return ( \u0026lt;LoadScript id=\u0026#34;script-loader\u0026#34; googleMapsApiKey=\u0026#34;YOUR_API_KEY\u0026#34;\u0026gt; \u0026lt;GoogleMap id=\u0026#34;example-map\u0026#34; center={props.center} /\u0026gt; \u0026lt;/LoadScript\u0026gt; ); } // contact.js import React from \u0026#34;react\u0026#34;; import Map from \u0026#34;./map\u0026#34;; export default function Contact(props) { return ( \u0026lt;div\u0026gt; \u0026lt;address\u0026gt; Contact {props.name} via{\u0026#34; \u0026#34;} \u0026lt;a data-testid=\u0026#34;email\u0026#34; href={\u0026#34;mailto:\u0026#34; + props.email}\u0026gt; email \u0026lt;/a\u0026gt; or on their \u0026lt;a data-testid=\u0026#34;site\u0026#34; href={props.site}\u0026gt; website \u0026lt;/a\u0026gt;. \u0026lt;/address\u0026gt; \u0026lt;Map center={props.center} /\u0026gt; \u0026lt;/div\u0026gt; ); } If we don’t want to load this component in our tests, we can mock out the dependency itself to a dummy component, and run our tests:\n// contact.test.js import React from \u0026#34;react\u0026#34;; import { render, unmountComponentAtNode } from \u0026#34;react-dom\u0026#34;; import { act } from \u0026#34;react-dom/test-utils\u0026#34;; import Contact from \u0026#34;./contact\u0026#34;; import MockedMap from \u0026#34;./map\u0026#34;; jest.mock(\u0026#34;./map\u0026#34;, () =\u0026gt; { return function DummyMap(props) { return ( \u0026lt;div data-testid=\u0026#34;map\u0026#34;\u0026gt; {props.center.lat}:{props.center.long} \u0026lt;/div\u0026gt; ); };}); let container = null; beforeEach(() =\u0026gt; { // setup a DOM element as a render target container = document.createElement(\u0026#34;div\u0026#34;); document.body.appendChild(container); }); afterEach(() =\u0026gt; { // cleanup on exiting unmountComponentAtNode(container); container.remove(); container = null; }); it(\u0026#34;should render contact information\u0026#34;, () =\u0026gt; { const center = { lat: 0, long: 0 }; act(() =\u0026gt; { render( \u0026lt;Contact name=\u0026#34;Joni Baez\u0026#34; email=\u0026#34;test@example.com\u0026#34; site=\u0026#34;http://test.com\u0026#34; center={center} /\u0026gt;, container ); }); expect( container.querySelector(\u0026#34;[data-testid=\u0026#39;email\u0026#39;]\u0026#34;).getAttribute(\u0026#34;href\u0026#34;) ).toEqual(\u0026#34;mailto:test@example.com\u0026#34;); expect( container.querySelector(\u0026#39;[data-testid=\u0026#34;site\u0026#34;]\u0026#39;).getAttribute(\u0026#34;href\u0026#34;) ).toEqual(\u0026#34;http://test.com\u0026#34;); expect(container.querySelector(\u0026#39;[data-testid=\u0026#34;map\u0026#34;]\u0026#39;).textContent).toEqual( \u0026#34;0:0\u0026#34; ); }); Events # We recommend dispatching real DOM events on DOM elements, and then asserting on the result. Consider a Toggle component:\n// toggle.js import React, { useState } from \u0026#34;react\u0026#34;; export default function Toggle(props) { const [state, setState] = useState(false); return ( \u0026lt;button onClick={() =\u0026gt; { setState(previousState =\u0026gt; !previousState); props.onChange(!state); }} data-testid=\u0026#34;toggle\u0026#34; \u0026gt; {state === true ? \u0026#34;Turn off\u0026#34; : \u0026#34;Turn on\u0026#34;} \u0026lt;/button\u0026gt; ); } We could write tests for it:\n// toggle.test.js import React from \u0026#34;react\u0026#34;; import { render, unmountComponentAtNode } from \u0026#34;react-dom\u0026#34;; import { act } from \u0026#34;react-dom/test-utils\u0026#34;; import Toggle from \u0026#34;./toggle\u0026#34;; let container = null; beforeEach(() =\u0026gt; { // setup a DOM element as a render target container = document.createElement(\u0026#34;div\u0026#34;); document.body.appendChild(container);}); afterEach(() =\u0026gt; { // cleanup on exiting unmountComponentAtNode(container); container.remove(); container = null; }); it(\u0026#34;changes value when clicked\u0026#34;, () =\u0026gt; { const onChange = jest.fn(); act(() =\u0026gt; { render(\u0026lt;Toggle onChange={onChange} /\u0026gt;, container); }); // get a hold of the button element, and trigger some clicks on it const button = document.querySelector(\u0026#34;[data-testid=toggle]\u0026#34;); expect(button.innerHTML).toBe(\u0026#34;Turn on\u0026#34;); act(() =\u0026gt; { button.dispatchEvent(new MouseEvent(\u0026#34;click\u0026#34;, { bubbles: true })); }); expect(onChange).toHaveBeenCalledTimes(1); expect(button.innerHTML).toBe(\u0026#34;Turn off\u0026#34;); act(() =\u0026gt; { for (let i = 0; i \u0026lt; 5; i++) { button.dispatchEvent(new MouseEvent(\u0026#34;click\u0026#34;, { bubbles: true })); } }); expect(onChange).toHaveBeenCalledTimes(6); expect(button.innerHTML).toBe(\u0026#34;Turn on\u0026#34;); }); Different DOM events and their properties are described in MDN. Note that you need to pass { bubbles: true } in each event you create for it to reach the React listener because React automatically delegates events to the root.\nNote:\nReact Testing Library offers a more concise helper for firing events.\nTimers # Your code might use timer-based functions like setTimeout to schedule more work in the future. In this example, a multiple choice panel waits for a selection and advances, timing out if a selection isn’t made in 5 seconds:\n// card.js import React, { useEffect } from \u0026#34;react\u0026#34;; export default function Card(props) { useEffect(() =\u0026gt; { const timeoutID = setTimeout(() =\u0026gt; { props.onSelect(null); }, 5000); return () =\u0026gt; { clearTimeout(timeoutID); }; }, [props.onSelect]); return [1, 2, 3, 4].map(choice =\u0026gt; ( \u0026lt;button key={choice} data-testid={choice} onClick={() =\u0026gt; props.onSelect(choice)} \u0026gt; {choice} \u0026lt;/button\u0026gt; )); } We can write tests for this component by leveraging Jest’s timer mocks, and testing the different states it can be in.\n// card.test.js import React from \u0026#34;react\u0026#34;; import { render, unmountComponentAtNode } from \u0026#34;react-dom\u0026#34;; import { act } from \u0026#34;react-dom/test-utils\u0026#34;; import Card from \u0026#34;./card\u0026#34;; let container = null; beforeEach(() =\u0026gt; { // setup a DOM element as a render target container = document.createElement(\u0026#34;div\u0026#34;); document.body.appendChild(container); jest.useFakeTimers(); }); afterEach(() =\u0026gt; { // cleanup on exiting unmountComponentAtNode(container); container.remove(); container = null; jest.useRealTimers(); }); it(\u0026#34;should select null after timing out\u0026#34;, () =\u0026gt; { const onSelect = jest.fn(); act(() =\u0026gt; { render(\u0026lt;Card onSelect={onSelect} /\u0026gt;, container); }); // move ahead in time by 100ms act(() =\u0026gt; { jest.advanceTimersByTime(100); }); expect(onSelect).not.toHaveBeenCalled(); // and then move ahead by 5 seconds act(() =\u0026gt; { jest.advanceTimersByTime(5000); }); expect(onSelect).toHaveBeenCalledWith(null); }); it(\u0026#34;should cleanup on being removed\u0026#34;, () =\u0026gt; { const onSelect = jest.fn(); act(() =\u0026gt; { render(\u0026lt;Card onSelect={onSelect} /\u0026gt;, container); }); act(() =\u0026gt; { jest.advanceTimersByTime(100); }); expect(onSelect).not.toHaveBeenCalled(); // unmount the app act(() =\u0026gt; { render(null, container); }); act(() =\u0026gt; { jest.advanceTimersByTime(5000); }); expect(onSelect).not.toHaveBeenCalled(); }); it(\u0026#34;should accept selections\u0026#34;, () =\u0026gt; { const onSelect = jest.fn(); act(() =\u0026gt; { render(\u0026lt;Card onSelect={onSelect} /\u0026gt;, container); }); act(() =\u0026gt; { container .querySelector(\u0026#34;[data-testid=\u0026#39;2\u0026#39;]\u0026#34;) .dispatchEvent(new MouseEvent(\u0026#34;click\u0026#34;, { bubbles: true })); }); expect(onSelect).toHaveBeenCalledWith(2); }); You can use fake timers only in some tests. Above, we enabled them by calling jest.useFakeTimers(). The main advantage they provide is that your test doesn’t actually have to wait five seconds to execute, and you also didn’t need to make the component code more convoluted just for testing.\nSnapshot Testing # Frameworks like Jest also let you save “snapshots” of data with toMatchSnapshot / toMatchInlineSnapshot. With these, we can “save” the rendered component output and ensure that a change to it has to be explicitly committed as a change to the snapshot.\nIn this example, we render a component and format the rendered HTML with the pretty package, before saving it as an inline snapshot:\n// hello.test.js, again import React from \u0026#34;react\u0026#34;; import { render, unmountComponentAtNode } from \u0026#34;react-dom\u0026#34;; import { act } from \u0026#34;react-dom/test-utils\u0026#34;; import pretty from \u0026#34;pretty\u0026#34;; import Hello from \u0026#34;./hello\u0026#34;; let container = null; beforeEach(() =\u0026gt; { // setup a DOM element as a render target container = document.createElement(\u0026#34;div\u0026#34;); document.body.appendChild(container); }); afterEach(() =\u0026gt; { // cleanup on exiting unmountComponentAtNode(container); container.remove(); container = null; }); it(\u0026#34;should render a greeting\u0026#34;, () =\u0026gt; { act(() =\u0026gt; { render(\u0026lt;Hello /\u0026gt;, container); }); expect( pretty(container.innerHTML) ).toMatchInlineSnapshot(); /* ... gets filled automatically by jest ... */ act(() =\u0026gt; { render(\u0026lt;Hello name=\u0026#34;Jenny\u0026#34; /\u0026gt;, container); }); expect( pretty(container.innerHTML) ).toMatchInlineSnapshot(); /* ... gets filled automatically by jest ... */ act(() =\u0026gt; { render(\u0026lt;Hello name=\u0026#34;Margaret\u0026#34; /\u0026gt;, container); }); expect( pretty(container.innerHTML) ).toMatchInlineSnapshot(); /* ... gets filled automatically by jest ... */ }); It’s typically better to make more specific assertions than to use snapshots. These kinds of tests include implementation details so they break easily, and teams can get desensitized to snapshot breakages. Selectively mocking some child components can help reduce the size of snapshots and keep them readable for the code review.\nMultiple Renderers # In rare cases, you may be running a test on a component that uses multiple renderers. For example, you may be running snapshot tests on a component with react-test-renderer, that internally uses render from react-dom inside a child component to render some content. In this scenario, you can wrap updates with act()s corresponding to their renderers.\nimport { act as domAct } from \u0026#34;react-dom/test-utils\u0026#34;; import { act as testAct, create } from \u0026#34;react-test-renderer\u0026#34;; // ... let root; domAct(() =\u0026gt; { testAct(() =\u0026gt; { root = create(\u0026lt;App /\u0026gt;); }); }); expect(root).toMatchSnapshot(); Something Missing? # If some common scenario is not covered, please let us know on the issue tracker for the documentation website.\n"},{"id":408,"href":"/docs/references/meta-frameworks/react/glossary/bundlers/","title":"Bundlers","section":"Glossary","content":" Bundlers # Bundlers take JavaScript and CSS code written as separate modules (often hundreds of them), and combine them together into a few files better optimized for the browsers. Some bundlers commonly used in React applications include Webpack and Browserify.\n"},{"id":409,"href":"/docs/references/meta-frameworks/react/glossary/cdn/","title":"Cdn","section":"Glossary","content":" CDN # CDN stands for Content Delivery Network. CDNs deliver cached, static content from a network of servers across the globe.\n"},{"id":410,"href":"/docs/references/meta-frameworks/react/glossary/compilers/","title":"Compilers","section":"Glossary","content":" Compilers # A JavaScript compiler takes JavaScript code, transforms it and returns JavaScript code in a different format. The most common use case is to take ES6 syntax and transform it into syntax that older browsers are capable of interpreting. Babel is the compiler most commonly used with React.\n"},{"id":411,"href":"/docs/references/meta-frameworks/react/glossary/components/","title":"Components","section":"Glossary","content":" 🌵 Components # React components are small, reusable pieces of code that return a React element to be rendered to the page. The simplest version of React component is a plain JavaScript function that returns a React element:\nfunction Welcome(props) { return \u0026lt;h1\u0026gt;Hello, {props.name}\u0026lt;/h1\u0026gt;; } Components can also be ES6 classes:\nclass Welcome extends React.Component { render() { return \u0026lt;h1\u0026gt;Hello, {this.props.name}\u0026lt;/h1\u0026gt;; } } Components can be broken down into distinct pieces of functionality and used within other components. Components can return other components, arrays, strings and numbers. A good rule of thumb is that if a part of your UI is used several times (Button, Panel, Avatar), or is complex enough on its own (App, FeedStory, Comment), it is a good candidate to be a reusable component. Component names should also always start with a capital letter (\u0026lt;Wrapper/\u0026gt; not \u0026lt;wrapper/\u0026gt;). See this documentation for more information on rendering components.\n"},{"id":412,"href":"/docs/references/meta-frameworks/react/glossary/controlled-vs.-uncontrolled-components/","title":"Controlled vs. Uncontrolled Components","section":"Glossary","content":" Controlled vs. Uncontrolled Components # React has two different approaches to dealing with form inputs.\nAn input form element whose value is controlled by React is called a controlled component. When a user enters data into a controlled component a change event handler is triggered and your code decides whether the input is valid (by re-rendering with the updated value). If you do not re-render then the form element will remain unchanged.\nAn uncontrolled component works like form elements do outside of React. When a user inputs data into a form field (an input box, dropdown, etc) the updated information is reflected without React needing to do anything. However, this also means that you can’t force the field to have a certain value.\nIn most cases you should use controlled components.\n"},{"id":413,"href":"/docs/references/meta-frameworks/react/glossary/elements/","title":"Elements","section":"Glossary","content":" Elements # React elements are the building blocks of React applications. One might confuse elements with a more widely known concept of “components”. An element describes what you want to see on the screen. React elements are immutable.\nconst element = \u0026lt;h1\u0026gt;Hello, world\u0026lt;/h1\u0026gt;; Typically, elements are not used directly, but get returned from components.\n"},{"id":414,"href":"/docs/references/meta-frameworks/react/glossary/es6-es2015-es2016-etc/","title":"Es6 Es2015 Es2016 Etc","section":"Glossary","content":" ES6, ES2015, ES2016, etc # These acronyms all refer to the most recent versions of the ECMAScript Language Specification standard, which the JavaScript language is an implementation of. The ES6 version (also known as ES2015) includes many additions to the previous versions such as: arrow functions, classes, template literals, let and const statements. You can learn more about specific versions here.\n"},{"id":415,"href":"/docs/references/meta-frameworks/react/glossary/events/","title":"Events","section":"Glossary","content":" ⭐ Events # Handling events with React elements has some syntactic differences:\nReact event handlers are named using camelCase, rather than lowercase. With JSX you pass a function as the event handler, rather than a string. "},{"id":416,"href":"/docs/references/meta-frameworks/react/glossary/jsx/","title":"Jsx","section":"Glossary","content":" JSX # JSX is a syntax extension to JavaScript. It is similar to a template language, but it has full power of JavaScript. JSX gets compiled to React.createElement() calls which return plain JavaScript objects called “React elements”. To get a basic introduction to JSX see the docs here and find a more in-depth tutorial on JSX here.\nReact DOM uses camelCase property naming convention instead of HTML attribute names. For example, tabindex becomes tabIndex in JSX. The attribute class is also written as className since class is a reserved word in JavaScript:\n\u0026lt;h1 className=\u0026#34;hello\u0026#34;\u0026gt;My name is Clementine!\u0026lt;/h1\u0026gt; "},{"id":417,"href":"/docs/references/meta-frameworks/react/glossary/keys/","title":"Keys","section":"Glossary","content":" 🌵 Keys # A “key” is a special string attribute you need to include when creating arrays of elements. Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside an array to give the elements a stable identity.\nKeys only need to be unique among sibling elements in the same array. They don’t need to be unique across the whole application or even a single component.\nDon’t pass something like Math.random() to keys. It is important that keys have a “stable identity” across re-renders so that React can determine when items are added, removed, or re-ordered. Ideally, keys should correspond to unique and stable identifiers coming from your data, such as post.id.\n"},{"id":418,"href":"/docs/references/meta-frameworks/react/glossary/lifecycle-methods/","title":"Lifecycle Methods","section":"Glossary","content":" Lifecycle Methods # Lifecycle methods are custom functionality that gets executed during the different phases of a component. There are methods available when the component gets created and inserted into the DOM (mounting), when the component updates, and when the component gets unmounted or removed from the DOM.\n"},{"id":419,"href":"/docs/references/meta-frameworks/react/glossary/package-managers/","title":"Package Managers","section":"Glossary","content":" Package Managers # Package managers are tools that allow you to manage dependencies in your project. npm and Yarn are two package managers commonly used in React applications. Both of them are clients for the same npm package registry.\n"},{"id":420,"href":"/docs/references/meta-frameworks/react/glossary/props.children/","title":"Props.children","section":"Glossary","content":" props.children # props.children is available on every component. It contains the content between the opening and closing tags of a component. For example:\n\u0026lt;Welcome\u0026gt;Hello world!\u0026lt;/Welcome\u0026gt; The string Hello world! is available in props.children in the Welcome component:\nfunction Welcome(props) { return \u0026lt;p\u0026gt;{props.children}\u0026lt;/p\u0026gt;; } For components defined as classes, use this.props.children:\nclass Welcome extends React.Component { render() { return \u0026lt;p\u0026gt;{this.props.children}\u0026lt;/p\u0026gt;; } } "},{"id":421,"href":"/docs/references/meta-frameworks/react/glossary/props/","title":"Props","section":"Glossary","content":" 🌵 props # props are inputs to a React component. They are data passed down from a parent component to a child component.\nRemember that props are readonly. They should not be modified in any way:\n// Wrong! props.number = 42; If you need to modify some value in response to user input or a network response, use state instead.\n"},{"id":422,"href":"/docs/references/meta-frameworks/react/glossary/reconciliation/","title":"Reconciliation","section":"Glossary","content":" 🍕 Reconciliation # When a component’s props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called “reconciliation”.\n"},{"id":423,"href":"/docs/references/meta-frameworks/react/glossary/refs/","title":"Refs","section":"Glossary","content":" 🍕 Refs # React supports a special attribute that you can attach to any component. The ref attribute can be an object created by React.createRef() function or a callback function, or a string (in legacy API). When the ref attribute is a callback function, the function receives the underlying DOM element or class instance (depending on the type of element) as its argument. This allows you to have direct access to the DOM element or component instance.\nUse refs sparingly. If you find yourself often using refs to “make things happen” in your app, consider getting more familiar with top-down data flow.\n"},{"id":424,"href":"/docs/references/meta-frameworks/react/glossary/single-page-application/","title":"Single Page Application","section":"Glossary","content":" Single-page Application # A single-page application is an application that loads a single HTML page and all the necessary assets (such as JavaScript and CSS) required for the application to run. Any interactions with the page or subsequent pages do not require a round trip to the server which means the page is not reloaded.\nThough you may build a single-page application in React, it is not a requirement. React can also be used for enhancing small parts of existing websites with additional interactivity. Code written in React can coexist peacefully with markup rendered on the server by something like PHP, or with other client-side libraries. In fact, this is exactly how React is being used at Facebook.\n"},{"id":425,"href":"/docs/references/meta-frameworks/react/glossary/state/","title":"State","section":"Glossary","content":" 🌵 state # A component needs state when some data associated with it changes over time. For example, a Checkbox component might need isChecked in its state, and a NewsFeed component might want to keep track of fetchedPosts in its state.\nThe most important difference between state and props is that props are passed from a parent component, but state is managed by the component itself. A component cannot change its props, but it can change its state.\nFor each particular piece of changing data, there should be just one component that “owns” it in its state. Don’t try to synchronize states of two different components. Instead, lift it up to their closest shared ancestor, and pass it down as props to both of them.\n"},{"id":426,"href":"/docs/references/meta-frameworks/react/references/component/componentdidcatch/","title":"Componentdidcatch","section":"Component","content":" componentDidCatch() # componentDidCatch() # componentDidCatch(error, info) This lifecycle is invoked after an error has been thrown by a descendant component. It receives two parameters:\nerror - The error that was thrown. info - An object with a componentStack key containing information about which component threw the error. componentDidCatch() is called during the “commit” phase, so side-effects are permitted. It should be used for things like logging errors:\nclass ErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false }; } static getDerivedStateFromError(error) { // Update state so the next render will show the fallback UI. return { hasError: true }; } componentDidCatch(error, info) { // Example \u0026#34;componentStack\u0026#34;: // in ComponentThatThrows (created by App) // in ErrorBoundary (created by App) // in div (created by App) // in App logComponentStackToMyService(info.componentStack); } render() { if (this.state.hasError) { // You can render any custom fallback UI return \u0026lt;h1\u0026gt;Something went wrong.\u0026lt;/h1\u0026gt;; } return this.props.children; } } Production and development builds of React slightly differ in the way componentDidCatch() handles errors.\nOn development, the errors will bubble up to window, this means that any window.onerror or window.addEventListener('error', callback) will intercept the errors that have been caught by componentDidCatch().\nOn production, instead, the errors will not bubble up, which means any ancestor error handler will only receive errors not explicitly caught by componentDidCatch().\nNote\nIn the event of an error, you can render a fallback UI with componentDidCatch() by calling setState, but this will be deprecated in a future release. Use static getDerivedStateFromError() to handle fallback rendering instead.\n"},{"id":427,"href":"/docs/references/meta-frameworks/react/references/component/componentdidmount/","title":"Componentdidmount","section":"Component","content":" ⭐ componentDidMount() # componentDidMount() # componentDidMount() componentDidMount() is invoked immediately after a component is mounted (inserted into the tree). Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\nThis method is a good place to set up any subscriptions. If you do that, don’t forget to unsubscribe in componentWillUnmount().\nYou may call setState() immediately in componentDidMount(). It will trigger an extra rendering, but it will happen before the browser updates the screen. This guarantees that even though the render() will be called twice in this case, the user won’t see the intermediate state. Use this pattern with caution because it often causes performance issues. In most cases, you should be able to assign the initial state in the constructor() instead. It can, however, be necessary for cases like modals and tooltips when you need to measure a DOM node before rendering something that depends on its size or position.\n"},{"id":428,"href":"/docs/references/meta-frameworks/react/references/component/componentdidupdate/","title":"Componentdidupdate","section":"Component","content":" ⭐ componentDidUpdate() # componentDidUpdate() # componentDidUpdate(prevProps, prevState, snapshot) componentDidUpdate() is invoked immediately after updating occurs. This method is not called for the initial render.\nUse this as an opportunity to operate on the DOM when the component has been updated. This is also a good place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed).\ncomponentDidUpdate(prevProps) { // Typical usage (don\u0026#39;t forget to compare props): if (this.props.userID !== prevProps.userID) { this.fetchData(this.props.userID); } } You may call setState() immediately in componentDidUpdate() but note that it must be wrapped in a condition like in the example above, or you’ll cause an infinite loop. It would also cause an extra re-rendering which, while not visible to the user, can affect the component performance. If you’re trying to “mirror” some state to a prop coming from above, consider using the prop directly instead. Read more about why copying props into state causes bugs.\nIf your component implements the getSnapshotBeforeUpdate() lifecycle (which is rare), the value it returns will be passed as a third “snapshot” parameter to componentDidUpdate(). Otherwise this parameter will be undefined.\nNote\ncomponentDidUpdate() will not be invoked if shouldComponentUpdate() returns false.\n"},{"id":429,"href":"/docs/references/meta-frameworks/react/references/component/componentwillunmount/","title":"Componentwillunmount","section":"Component","content":" componentWillUnmount() # componentWillUnmount() # componentWillUnmount() componentWillUnmount() is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in componentDidMount().\nYou should not call setState() in componentWillUnmount() because the component will never be re-rendered. Once a component instance is unmounted, it will never be mounted again.\n"},{"id":430,"href":"/docs/references/meta-frameworks/react/references/component/constructor/","title":"Constructor","section":"Component","content":" constructor() # constructor() # constructor(props) If you don’t initialize state and you don’t bind methods, you don’t need to implement a constructor for your React component.\nThe constructor for a React component is called before it is mounted. When implementing the constructor for a React.Component subclass, you should call super(props) before any other statement. Otherwise, this.props will be undefined in the constructor, which can lead to bugs.\nTypically, in React constructors are only used for two purposes:\nInitializing local state by assigning an object to this.state. Binding event handler methods to an instance. You should not call setState() in the constructor(). Instead, if your component needs to use local state, assign the initial state to this.state directly in the constructor:\nconstructor(props) { super(props); // Don\u0026#39;t call this.setState() here! this.state = { counter: 0 }; this.handleClick = this.handleClick.bind(this); } Constructor is the only place where you should assign this.state directly. In all other methods, you need to use this.setState() instead.\nAvoid introducing any side-effects or subscriptions in the constructor. For those use cases, use componentDidMount() instead.\nNote\nAvoid copying props into state! This is a common mistake:\nconstructor(props) { super(props); // Don\u0026#39;t do this! this.state = { color: props.color }; } The problem is that it’s both unnecessary (you can use this.props.color directly instead), and creates bugs (updates to the color prop won’t be reflected in the state).\nOnly use this pattern if you intentionally want to ignore prop updates. In that case, it makes sense to rename the prop to be called initialColor or defaultColor. You can then force a component to “reset” its internal state by changing its key when necessary.\nRead our blog post on avoiding derived state to learn about what to do if you think you need some state to depend on the props.\n"},{"id":431,"href":"/docs/references/meta-frameworks/react/references/component/defaultprop/","title":"Defaultprop","section":"Component","content":" defaultProp # defaultProps # defaultProps can be defined as a property on the component class itself, to set the default props for the class. This is used for undefined props, but not for null props. For example:\nclass CustomButton extends React.Component { // ... } CustomButton.defaultProps = { color: \u0026#39;blue\u0026#39; }; If props.color is not provided, it will be set by default to 'blue':\nrender() { return \u0026lt;CustomButton /\u0026gt; ; // props.color will be set to blue } If props.color is set to null, it will remain null:\nrender() { return \u0026lt;CustomButton color={null} /\u0026gt; ; // props.color will remain null } "},{"id":432,"href":"/docs/references/meta-frameworks/react/references/component/displayname/","title":"Displayname","section":"Component","content":" displayName # displayName # The displayName string is used in debugging messages. Usually, you don’t need to set it explicitly because it’s inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component, see Wrap the Display Name for Easy Debugging for details.\n"},{"id":433,"href":"/docs/references/meta-frameworks/react/references/component/forceupdate/","title":"Forceupdate","section":"Component","content":" forceUpdate() # forceUpdate() # component.forceUpdate(callback) By default, when your component’s state or props change, your component will re-render. If your render() method depends on some other data, you can tell React that the component needs re-rendering by calling forceUpdate().\nCalling forceUpdate() will cause render() to be called on the component, skipping shouldComponentUpdate(). This will trigger the normal lifecycle methods for child components, including the shouldComponentUpdate() method of each child. React will still only update the DOM if the markup changes.\nNormally you should try to avoid all uses of forceUpdate() and only read from this.props and this.state in render().\n"},{"id":434,"href":"/docs/references/meta-frameworks/react/references/component/getsnapshotbeforeupdate/","title":"Getsnapshotbeforeupdate","section":"Component","content":" getSnapshotBeforeUpdate() # getSnapshotBeforeUpdate() # getSnapshotBeforeUpdate(prevProps, prevState) getSnapshotBeforeUpdate() is invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture some information from the DOM (e.g. scroll position) before it is potentially changed. Any value returned by this lifecycle method will be passed as a parameter to componentDidUpdate().\nThis use case is not common, but it may occur in UIs like a chat thread that need to handle scroll position in a special way.\nA snapshot value (or null) should be returned.\nFor example:\nclass ScrollingList extends React.Component { constructor(props) { super(props); this.listRef = React.createRef(); } getSnapshotBeforeUpdate(prevProps, prevState) { // Are we adding new items to the list? // Capture the scroll position so we can adjust scroll later. if (prevProps.list.length \u0026lt; this.props.list.length) { const list = this.listRef.current; return list.scrollHeight - list.scrollTop; } return null; } componentDidUpdate(prevProps, prevState, snapshot) { // If we have a snapshot value, we\u0026#39;ve just added new items. // Adjust scroll so these new items don\u0026#39;t push the old ones out of view. // (snapshot here is the value returned from getSnapshotBeforeUpdate) if (snapshot !== null) { const list = this.listRef.current; list.scrollTop = list.scrollHeight - snapshot; } } render() { return ( \u0026lt;div ref={this.listRef}\u0026gt;{/* ...contents... */}\u0026lt;/div\u0026gt; ); } } In the above examples, it is important to read the scrollHeight property in getSnapshotBeforeUpdate because there may be delays between “render” phase lifecycles (like render) and “commit” phase lifecycles (like getSnapshotBeforeUpdate and componentDidUpdate).\n"},{"id":435,"href":"/docs/references/meta-frameworks/react/references/component/props/","title":"Props","section":"Component","content":" 🌵 props # props # this.props contains the props that were defined by the caller of this component. See Components and Props for an introduction to props.\nIn particular, this.props.children is a special prop, typically defined by the child tags in the JSX expression rather than in the tag itself.\n"},{"id":436,"href":"/docs/references/meta-frameworks/react/references/component/render/","title":"Render","section":"Component","content":" ⭐ render() # render() # render() The render() method is the only required method in a class component.\nWhen called, it should examine this.props and this.state and return one of the following types:\nReact elements. Typically created via JSX. For example, \u0026lt;div /\u0026gt; and \u0026lt;MyComponent /\u0026gt; are React elements that instruct React to render a DOM node, or another user-defined component, respectively. Arrays and fragments. Let you return multiple elements from render. See the documentation on fragments for more details. Portals. Let you render children into a different DOM subtree. See the documentation on portals for more details. String and numbers. These are rendered as text nodes in the DOM. Booleans or null. Render nothing. (Mostly exists to support return test \u0026amp;\u0026amp; \u0026lt;Child /\u0026gt; pattern, where test is boolean.) The render() function should be pure, meaning that it does not modify component state, it returns the same result each time it’s invoked, and it does not directly interact with the browser.\nIf you need to interact with the browser, perform your work in componentDidMount() or the other lifecycle methods instead. Keeping render() pure makes components easier to think about.\nNote\nrender() will not be invoked if shouldComponentUpdate() returns false.\n"},{"id":437,"href":"/docs/references/meta-frameworks/react/references/component/setstate/","title":"Setstate","section":"Component","content":" setState() # setState() # setState(updater[, callback]) setState() enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses.\nThink of setState() as a request rather than an immediate command to update the component. For better perceived performance, React may delay it, and then update several components in a single pass. In the rare case that you need to force the DOM update to be applied synchronously, you may wrap it in flushSync, but this may hurt performance.\nsetState() does not always immediately update the component. It may batch or defer the update until later. This makes reading this.state right after calling setState() a potential pitfall. Instead, use componentDidUpdate or a setState callback (setState(updater, callback)), either of which are guaranteed to fire after the update has been applied. If you need to set the state based on the previous state, read about the updater argument below.\nsetState() will always lead to a re-render unless shouldComponentUpdate() returns false. If mutable objects are being used and conditional rendering logic cannot be implemented in shouldComponentUpdate(), calling setState() only when the new state differs from the previous state will avoid unnecessary re-renders.\nThe first argument is an updater function with the signature:\n(state, props) =\u0026gt; stateChange state is a reference to the component state at the time the change is being applied. It should not be directly mutated. Instead, changes should be represented by building a new object based on the input from state and props. For instance, suppose we wanted to increment a value in state by props.step:\nthis.setState((state, props) =\u0026gt; { return {counter: state.counter + props.step}; }); Both state and props received by the updater function are guaranteed to be up-to-date. The output of the updater is shallowly merged with state.\nThe second parameter to setState() is an optional callback function that will be executed once setState is completed and the component is re-rendered. Generally we recommend using componentDidUpdate() for such logic instead.\nYou may optionally pass an object as the first argument to setState() instead of a function:\nsetState(stateChange[, callback]) This performs a shallow merge of stateChange into the new state, e.g., to adjust a shopping cart item quantity:\nthis.setState({quantity: 2}) This form of setState() is also asynchronous, and multiple calls during the same cycle may be batched together. For example, if you attempt to increment an item quantity more than once in the same cycle, that will result in the equivalent of:\nObject.assign( previousState, {quantity: state.quantity + 1}, {quantity: state.quantity + 1}, ... ) Subsequent calls will override values from previous calls in the same cycle, so the quantity will only be incremented once. If the next state depends on the current state, we recommend using the updater function form, instead:\nthis.setState((state) =\u0026gt; { return {quantity: state.quantity + 1}; }); For more detail, see:\nState and Lifecycle guide In depth: When and why are setState() calls batched? In depth: Why isn’t this.state updated immediately? "},{"id":438,"href":"/docs/references/meta-frameworks/react/references/component/shouldcomponentupdate/","title":"Shouldcomponentupdate","section":"Component","content":" shouldComponentUpdate() # shouldComponentUpdate() # shouldComponentUpdate(nextProps, nextState) Use shouldComponentUpdate() to let React know if a component’s output is not affected by the current change in state or props. The default behavior is to re-render on every state change, and in the vast majority of cases you should rely on the default behavior.\nshouldComponentUpdate() is invoked before rendering when new props or state are being received. Defaults to true. This method is not called for the initial render or when forceUpdate() is used.\nThis method only exists as a performance optimization. Do not rely on it to “prevent” a rendering, as this can lead to bugs. Consider using the built-in PureComponent instead of writing shouldComponentUpdate() by hand. PureComponent performs a shallow comparison of props and state, and reduces the chance that you’ll skip a necessary update.\nIf you are confident you want to write it by hand, you may compare this.props with nextProps and this.state with nextState and return false to tell React the update can be skipped. Note that returning false does not prevent child components from re-rendering when their state changes.\nWe do not recommend doing deep equality checks or using JSON.stringify() in shouldComponentUpdate(). It is very inefficient and will harm performance.\nCurrently, if shouldComponentUpdate() returns false, then UNSAFE_componentWillUpdate(), render(), and componentDidUpdate() will not be invoked. In the future React may treat shouldComponentUpdate() as a hint rather than a strict directive, and returning false may still result in a re-rendering of the component.\n"},{"id":439,"href":"/docs/references/meta-frameworks/react/references/component/state/","title":"State","section":"Component","content":" 🌵 state # state # The state contains data specific to this component that may change over time. The state is user-defined, and it should be a plain JavaScript object.\nIf some value isn’t used for rendering or data flow (for example, a timer ID), you don’t have to put it in the state. Such values can be defined as fields on the component instance.\nSee State and Lifecycle for more information about the state.\nNever mutate this.state directly, as calling setState() afterwards may replace the mutation you made. Treat this.state as if it were immutable.\nIs this page useful?\n"},{"id":440,"href":"/docs/references/meta-frameworks/react/references/component/static-getderivedstatefromerror/","title":"Static Getderivedstatefromerror","section":"Component","content":" static getDerivedStateFromError() # static getDerivedStateFromError() # static getDerivedStateFromError(error) This lifecycle is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.\nclass ErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false }; } static getDerivedStateFromError(error) { // Update state so the next render will show the fallback UI. return { hasError: true }; } render() { if (this.state.hasError) { // You can render any custom fallback UI return \u0026lt;h1\u0026gt;Something went wrong.\u0026lt;/h1\u0026gt;; } return this.props.children; } } Note\ngetDerivedStateFromError() is called during the “render” phase, so side-effects are not permitted. For those use cases, use componentDidCatch() instead.\n"},{"id":441,"href":"/docs/references/meta-frameworks/react/references/component/static-getderivedstatefromprops/","title":"Static Getderivedstatefromprops","section":"Component","content":" static getDerivedStateFromProps() # static getDerivedStateFromProps() # static getDerivedStateFromProps(props, state) getDerivedStateFromProps is invoked right before calling the render method, both on the initial mount and on subsequent updates. It should return an object to update the state, or null to update nothing.\nThis method exists for rare use cases where the state depends on changes in props over time. For example, it might be handy for implementing a \u0026lt;Transition\u0026gt; component that compares its previous and next children to decide which of them to animate in and out.\nDeriving state leads to verbose code and makes your components difficult to think about. Make sure you’re familiar with simpler alternatives:\nIf you need to perform a side effect (for example, data fetching or an animation) in response to a change in props, use componentDidUpdate lifecycle instead. If you want to re-compute some data only when a prop changes, use a memoization helper instead. If you want to “reset” some state when a prop changes, consider either making a component fully controlled or fully uncontrolled with a key instead. This method doesn’t have access to the component instance. If you’d like, you can reuse some code between getDerivedStateFromProps() and the other class methods by extracting pure functions of the component props and state outside the class definition.\nNote that this method is fired on every render, regardless of the cause. This is in contrast to UNSAFE_componentWillReceiveProps, which only fires when the parent causes a re-render and not as a result of a local setState.\n"},{"id":442,"href":"/docs/references/meta-frameworks/react/references/component/unsafe_componentwillmount/","title":"Unsafe Componentwillmount","section":"Component","content":" UNSAFE_componentWillMount() # UNSAFE_componentWillMount() # UNSAFE_componentWillMount() Note\nThis lifecycle was previously named componentWillMount. That name will continue to work until version 17. Use the rename-unsafe-lifecycles codemod to automatically update your components.\nUNSAFE_componentWillMount() is invoked just before mounting occurs. It is called before render(), therefore calling setState() synchronously in this method will not trigger an extra rendering. Generally, we recommend using the constructor() instead for initializing state.\nAvoid introducing any side-effects or subscriptions in this method. For those use cases, use componentDidMount() instead.\nThis is the only lifecycle method called on server rendering.\n"},{"id":443,"href":"/docs/references/meta-frameworks/react/references/component/unsafe_componentwillreceiveprops/","title":"Unsafe Componentwillreceiveprops","section":"Component","content":" UNSAFE_componentWillReceiveProps() # UNSAFE_componentWillReceiveProps() # UNSAFE_componentWillReceiveProps(nextProps) Note\nThis lifecycle was previously named componentWillReceiveProps. That name will continue to work until version 17. Use the rename-unsafe-lifecycles codemod to automatically update your components.\nNote:\nUsing this lifecycle method often leads to bugs and inconsistencies\nIf you need to perform a side effect (for example, data fetching or an animation) in response to a change in props, use componentDidUpdate lifecycle instead. If you used componentWillReceiveProps for re-computing some data only when a prop changes, use a memoization helper instead. If you used componentWillReceiveProps to “reset” some state when a prop changes, consider either making a component fully controlled or fully uncontrolled with a key instead. For other use cases, follow the recommendations in this blog post about derived state.\nUNSAFE_componentWillReceiveProps() is invoked before a mounted component receives new props. If you need to update the state in response to prop changes (for example, to reset it), you may compare this.props and nextProps and perform state transitions using this.setState() in this method.\nNote that if a parent component causes your component to re-render, this method will be called even if props have not changed. Make sure to compare the current and next values if you only want to handle changes.\nReact doesn’t call UNSAFE_componentWillReceiveProps() with initial props during mounting. It only calls this method if some of component’s props may update. Calling this.setState() generally doesn’t trigger UNSAFE_componentWillReceiveProps().\n"},{"id":444,"href":"/docs/references/meta-frameworks/react/references/component/unsafe_componentwillupdate/","title":"Unsafe Componentwillupdate","section":"Component","content":" UNSAFE_componentWillUpdate() # UNSAFE_componentWillUpdate() # UNSAFE_componentWillUpdate(nextProps, nextState) Note\nThis lifecycle was previously named componentWillUpdate. That name will continue to work until version 17. Use the rename-unsafe-lifecycles codemod to automatically update your components.\nUNSAFE_componentWillUpdate() is invoked just before rendering when new props or state are being received. Use this as an opportunity to perform preparation before an update occurs. This method is not called for the initial render.\nNote that you cannot call this.setState() here; nor should you do anything else (e.g. dispatch a Redux action) that would trigger an update to a React component before UNSAFE_componentWillUpdate() returns.\nTypically, this method can be replaced by componentDidUpdate(). If you were reading from the DOM in this method (e.g. to save a scroll position), you can move that logic to getSnapshotBeforeUpdate().\nNote\nUNSAFE_componentWillUpdate() will not be invoked if shouldComponentUpdate() returns false.\nOther APIs # Unlike the lifecycle methods above (which React calls for you), the methods below are the methods you can call from your components.\nThere are just two of them: setState() and forceUpdate().\n"},{"id":445,"href":"/docs/references/meta-frameworks/react/references/general/class.contexttype/","title":"Class.contexttype","section":"General","content":" Class.contextType # Class.contextType # class MyClass extends React.Component { componentDidMount() { let value = this.context; /* perform a side-effect at mount using the value of MyContext */ } componentDidUpdate() { let value = this.context; /* ... */ } componentWillUnmount() { let value = this.context; /* ... */ } render() { let value = this.context; /* render something based on the value of MyContext */ } } MyClass.contextType = MyContext; The contextType property on a class can be assigned a Context object created by React.createContext(). Using this property lets you consume the nearest current value of that Context type using this.context. You can reference this in any of the lifecycle methods including the render function.\nNote:\nYou can only subscribe to a single context using this API. If you need to read more than one see Consuming Multiple Contexts.\nIf you are using the experimental public class fields syntax, you can use a static class field to initialize your contextType.\nclass MyClass extends React.Component { static contextType = MyContext; render() { let value = this.context; /* render something based on the value */ } } "},{"id":446,"href":"/docs/references/meta-frameworks/react/references/general/context.consumer/","title":"Context.consumer","section":"General","content":" Context.Consumer # Context.Consumer # \u0026lt;MyContext.Consumer\u0026gt; {value =\u0026gt; /* render something based on the context value */} \u0026lt;/MyContext.Consumer\u0026gt; A React component that subscribes to context changes. Using this component lets you subscribe to a context within a function component.\nRequires a function as a child. The function receives the current context value and returns a React node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree. If there is no Provider for this context above, the value argument will be equal to the defaultValue that was passed to createContext().\nNote\nFor more information about the ‘function as a child’ pattern, see render props.\n"},{"id":447,"href":"/docs/references/meta-frameworks/react/references/general/context.displayname/","title":"Context.displayname","section":"General","content":" Context.displayName # Context.displayName # Context object accepts a displayName string property. React DevTools uses this string to determine what to display for the context.\nFor example, the following component will appear as MyDisplayName in the DevTools:\nconst MyContext = React.createContext(/* some value */); MyContext.displayName = \u0026#39;MyDisplayName\u0026#39;; \u0026lt;MyContext.Provider\u0026gt; // \u0026#34;MyDisplayName.Provider\u0026#34; in DevTools \u0026lt;MyContext.Consumer\u0026gt; // \u0026#34;MyDisplayName.Consumer\u0026#34; in DevTools "},{"id":448,"href":"/docs/references/meta-frameworks/react/references/general/context.provider/","title":"Context.provider","section":"General","content":" 🍕 Context.Provider # Context.Provider # \u0026lt;MyContext.Provider value={/* some value */}\u0026gt; Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes.\nThe Provider component accepts a value prop to be passed to consuming components that are descendants of this Provider. One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree.\nAll consumers that are descendants of a Provider will re-render whenever the Provider’s value prop changes. The propagation from Provider to its descendant consumers (including .contextType and useContext) is not subject to the shouldComponentUpdate method, so the consumer is updated even when an ancestor component skips an update.\nChanges are determined by comparing the new and old values using the same algorithm as Object.is.\nNote\nThe way changes are determined can cause some issues when passing objects as value: see Caveats.\n"},{"id":449,"href":"/docs/references/meta-frameworks/react/references/general/createportal/","title":"Createportal","section":"General","content":" createPortal() # createPortal() # createPortal(child, container) Creates a portal. Portals provide a way to render children into a DOM node that exists outside the hierarchy of the DOM component.\n"},{"id":450,"href":"/docs/references/meta-frameworks/react/references/general/createroot/","title":"Createroot","section":"General","content":" createRoot() # createRoot() # createRoot(container[, options]); Create a React root for the supplied container and return the root. The root can be used to render a React element into the DOM with render:\nconst root = createRoot(container); root.render(element); createRoot accepts two options:\nonRecoverableError: optional callback called when React automatically recovers from errors. identifierPrefix: optional prefix React uses for ids generated by React.useId. Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix used on the server. The root can also be unmounted with unmount:\nroot.unmount(); Note:\ncreateRoot() controls the contents of the container node you pass in. Any existing DOM elements inside are replaced when render is called. Later calls use React’s DOM diffing algorithm for efficient updates.\ncreateRoot() does not modify the container node (only modifies the children of the container). It may be possible to insert a component to an existing DOM node without overwriting the existing children.\nUsing createRoot() to hydrate a server-rendered container is not supported. Use hydrateRoot() instead.\n"},{"id":451,"href":"/docs/references/meta-frameworks/react/references/general/finddomnode/","title":"Finddomnode","section":"General","content":" 🍕 findDOMNode() # findDOMNode() # Note:\nfindDOMNode is an escape hatch used to access the underlying DOM node. In most cases, use of this escape hatch is discouraged because it pierces the component abstraction. It has been deprecated in StrictMode.\nfindDOMNode(component) If this component has been mounted into the DOM, this returns the corresponding native browser DOM element. This method is useful for reading values out of the DOM, such as form field values and performing DOM measurements. In most cases, you can attach a ref to the DOM node and avoid using findDOMNode at all.\nWhen a component renders to null or false, findDOMNode returns null. When a component renders to a string, findDOMNode returns a text DOM node containing that value. As of React 16, a component may return a fragment with multiple children, in which case findDOMNode will return the DOM node corresponding to the first non-empty child.\nNote:\nfindDOMNode only works on mounted components (that is, components that have been placed in the DOM). If you try to call this on a component that has not been mounted yet (like calling findDOMNode() in render() on a component that has yet to be created) an exception will be thrown.\nfindDOMNode cannot be used on function components.\n"},{"id":452,"href":"/docs/references/meta-frameworks/react/references/general/flushsync/","title":"Flushsync","section":"General","content":" flushSync() # flushSync() # flushSync(callback) Force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.\n// Force this state update to be synchronous. flushSync(() =\u0026gt; { setCount(count + 1); }); // By this point, DOM is updated. Note:\nflushSync can significantly hurt performance. Use sparingly.\nflushSync may force pending Suspense boundaries to show their fallback state.\nflushSync may also run pending effects and synchronously apply any updates they contain before returning.\nflushSync may also flush updates outside the callback when necessary to flush the updates inside the callback. For example, if there are pending updates from a click, React may flush those before flushing the updates inside the callback.\n"},{"id":453,"href":"/docs/references/meta-frameworks/react/references/general/hydrate/","title":"Hydrate","section":"General","content":" hydrate() # hydrate() # hydrate(element, container[, callback]) Note:\nhydrate has been replaced with hydrateRoot in React 18. See hydrateRoot for more info.\nSame as render(), but is used to hydrate a container whose HTML contents were rendered by ReactDOMServer. React will attempt to attach event listeners to the existing markup.\nReact expects that the rendered content is identical between the server and the client. It can patch up differences in text content, but you should treat mismatches as bugs and fix them. In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.\nIf a single element’s attribute or text content is unavoidably different between the server and the client (for example, a timestamp), you may silence the warning by adding suppressHydrationWarning={true} to the element. It only works one level deep, and is intended to be an escape hatch. Don’t overuse it. Unless it’s text content, React still won’t attempt to patch it up, so it may remain inconsistent until future updates.\nIf you intentionally need to render something different on the server and the client, you can do a two-pass rendering. Components that render something different on the client can read a state variable like this.state.isClient, which you can set to true in componentDidMount(). This way the initial render pass will render the same content as the server, avoiding mismatches, but an additional pass will happen synchronously right after hydration. Note that this approach will make your components slower because they have to render twice, so use it with caution.\nRemember to be mindful of user experience on slow connections. The JavaScript code may load significantly later than the initial HTML render, so if you render something different in the client-only pass, the transition can be jarring. However, if executed well, it may be beneficial to render a “shell” of the application on the server, and only show some of the extra widgets on the client. To learn how to do this without getting the markup mismatch issues, refer to the explanation in the previous paragraph.\n"},{"id":454,"href":"/docs/references/meta-frameworks/react/references/general/hydrateroot/","title":"Hydrateroot","section":"General","content":" ⭐ hydrateRoot() # hydrateRoot() # hydrateRoot(container, element[, options]) Same as createRoot(), but is used to hydrate a container whose HTML contents were rendered by ReactDOMServer. React will attempt to attach event listeners to the existing markup.\nhydrateRoot accepts two options:\nonRecoverableError: optional callback called when React automatically recovers from errors. identifierPrefix: optional prefix React uses for ids generated by React.useId. Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix used on the server. Note\nReact expects that the rendered content is identical between the server and the client. It can patch up differences in text content, but you should treat mismatches as bugs and fix them. In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.\n"},{"id":455,"href":"/docs/references/meta-frameworks/react/references/general/react.createcontext/","title":"React.createcontext","section":"General","content":" React.createContext # React.createContext # const MyContext = React.createContext(defaultValue); Creates a Context object. When React renders a component that subscribes to this Context object it will read the current context value from the closest matching Provider above it in the tree.\nThe defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This default value can be helpful for testing components in isolation without wrapping them. Note: passing undefined as a Provider value does not cause consuming components to use defaultValue.\n"},{"id":456,"href":"/docs/references/meta-frameworks/react/references/general/render/","title":"Render","section":"General","content":" 🌵 render() # render() # render(element, container[, callback]) Note:\nrender has been replaced with createRoot in React 18. See createRoot for more info.\nRender a React element into the DOM in the supplied container and return a reference to the component (or returns null for stateless components).\nIf the React element was previously rendered into container, this will perform an update on it and only mutate the DOM as necessary to reflect the latest React element.\nIf the optional callback is provided, it will be executed after the component is rendered or updated.\nNote:\nrender() controls the contents of the container node you pass in. Any existing DOM elements inside are replaced when first called. Later calls use React’s DOM diffing algorithm for efficient updates.\nrender() does not modify the container node (only modifies the children of the container). It may be possible to insert a component to an existing DOM node without overwriting the existing children.\nrender() currently returns a reference to the root ReactComponent instance. However, using this return value is legacy and should be avoided because future versions of React may render components asynchronously in some cases. If you need a reference to the root ReactComponent instance, the preferred solution is to attach a callback ref to the root element.\nUsing render() to hydrate a server-rendered container is deprecated. Use hydrateRoot() instead.\n"},{"id":457,"href":"/docs/references/meta-frameworks/react/references/general/rendertonodestream-deprecated/","title":"Rendertonodestream Deprecated","section":"General","content":" renderToNodeStream() (Deprecated) # renderToNodeStream() (Deprecated) # ReactDOMServer.renderToNodeStream(element) Render a React element to its initial HTML. Returns a Node.js Readable stream that outputs an HTML string. The HTML output by this stream is exactly equal to what ReactDOMServer.renderToString would return. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.\nIf you call ReactDOM.hydrateRoot() on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.\nNote:\nServer-only. This API is not available in the browser.\nThe stream returned from this method will return a byte stream encoded in utf-8. If you need a stream in another encoding, take a look at a project like iconv-lite, which provides transform streams for transcoding text.\n"},{"id":458,"href":"/docs/references/meta-frameworks/react/references/general/rendertopipeablestream/","title":"Rendertopipeablestream","section":"General","content":" 🍕 renderToPipeableStream() # renderToPipeableStream() # ReactDOMServer.renderToPipeableStream(element, options) Render a React element to its initial HTML. Returns a stream with a pipe(res) method to pipe the output and abort() to abort the request. Fully supports Suspense and streaming of HTML with “delayed” content blocks “popping in” via inline \u0026lt;script\u0026gt; tags later. Read more\nIf you call ReactDOM.hydrateRoot() on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.\nlet didError = false; const stream = renderToPipeableStream( \u0026lt;App /\u0026gt;, { onShellReady() { // The content above all Suspense boundaries is ready. // If something errored before we started streaming, we set the error code appropriately. res.statusCode = didError ? 500 : 200; res.setHeader(\u0026#39;Content-type\u0026#39;, \u0026#39;text/html\u0026#39;); stream.pipe(res); }, onShellError(error) { // Something errored before we could complete the shell so we emit an alternative shell. res.statusCode = 500; res.send( \u0026#39;\u0026lt;!doctype html\u0026gt;\u0026lt;p\u0026gt;Loading...\u0026lt;/p\u0026gt;\u0026lt;script src=\u0026#34;clientrender.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39; ); }, onAllReady() { // If you don\u0026#39;t want streaming, use this instead of onShellReady. // This will fire after the entire page content is ready. // You can use this for crawlers or static generation. // res.statusCode = didError ? 500 : 200; // res.setHeader(\u0026#39;Content-type\u0026#39;, \u0026#39;text/html\u0026#39;); // stream.pipe(res); }, onError(err) { didError = true; console.error(err); }, } ); See the full list of options.\nNote:\nThis is a Node.js-specific API. Environments with Web Streams, like Deno and modern edge runtimes, should use renderToReadableStream instead.\n"},{"id":459,"href":"/docs/references/meta-frameworks/react/references/general/rendertoreadablestream/","title":"Rendertoreadablestream","section":"General","content":" 🍕 renderToReadableStream() # renderToReadableStream() # ReactDOMServer.renderToReadableStream(element, options); Streams a React element to its initial HTML. Returns a Promise that resolves to a Readable Stream. Fully supports Suspense and streaming of HTML. Read more\nIf you call ReactDOM.hydrateRoot() on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.\nlet controller = new AbortController(); let didError = false; try { let stream = await renderToReadableStream( \u0026lt;html\u0026gt; \u0026lt;body\u0026gt;Success\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;, { signal: controller.signal, onError(error) { didError = true; console.error(error); } } ); // This is to wait for all Suspense boundaries to be ready. You can uncomment // this line if you want to buffer the entire HTML instead of streaming it. // You can use this for crawlers or static generation: // await stream.allReady; return new Response(stream, { status: didError ? 500 : 200, headers: {\u0026#39;Content-Type\u0026#39;: \u0026#39;text/html\u0026#39;}, }); } catch (error) { return new Response( \u0026#39;\u0026lt;!doctype html\u0026gt;\u0026lt;p\u0026gt;Loading...\u0026lt;/p\u0026gt;\u0026lt;script src=\u0026#34;clientrender.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39;, { status: 500, headers: {\u0026#39;Content-Type\u0026#39;: \u0026#39;text/html\u0026#39;}, } ); } See the full list of options.\nNote:\nThis API depends on Web Streams. For Node.js, use renderToPipeableStream instead.\n"},{"id":460,"href":"/docs/references/meta-frameworks/react/references/general/rendertostaticmarkup/","title":"Rendertostaticmarkup","section":"General","content":" renderToStaticMarkup() # renderToStaticMarkup() # ReactDOMServer.renderToStaticMarkup(element) Similar to renderToString, except this doesn’t create extra DOM attributes that React uses internally, such as data-reactroot. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save some bytes.\nIf you plan to use React on the client to make the markup interactive, do not use this method. Instead, use renderToString on the server and ReactDOM.hydrateRoot() on the client.\n"},{"id":461,"href":"/docs/references/meta-frameworks/react/references/general/rendertostaticnodestream/","title":"Rendertostaticnodestream","section":"General","content":" 🍕 renderToStaticNodeStream() # renderToStaticNodeStream() # ReactDOMServer.renderToStaticNodeStream(element) Similar to renderToNodeStream, except this doesn’t create extra DOM attributes that React uses internally, such as data-reactroot. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save some bytes.\nThe HTML output by this stream is exactly equal to what ReactDOMServer.renderToStaticMarkup would return.\nIf you plan to use React on the client to make the markup interactive, do not use this method. Instead, use renderToNodeStream on the server and ReactDOM.hydrateRoot() on the client.\nNote:\nServer-only. This API is not available in the browser.\nThe stream returned from this method will return a byte stream encoded in utf-8. If you need a stream in another encoding, take a look at a project like iconv-lite, which provides transform streams for transcoding text.\n"},{"id":462,"href":"/docs/references/meta-frameworks/react/references/general/rendertostring/","title":"Rendertostring","section":"General","content":" 🌵 renderToString() # renderToString() # ReactDOMServer.renderToString(element) Render a React element to its initial HTML. React will return an HTML string. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.\nIf you call ReactDOM.hydrateRoot() on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.\nNote\nThis API has limited Suspense support and does not support streaming.\nOn the server, it is recommended to use either renderToPipeableStream (for Node.js) or renderToReadableStream (for Web Streams) instead.\n"},{"id":463,"href":"/docs/references/meta-frameworks/react/references/general/requestanimationframe-throttling/","title":"Requestanimationframe Throttling","section":"General","content":" 🍕 requestAnimationFrame throttling # requestAnimationFrame throttling\nrequestAnimationFrame is a way of queuing a function to be executed in the browser at the optimal time for rendering performance. A function that is queued with requestAnimationFrame will fire in the next frame. The browser will work hard to ensure that there are 60 frames per second (60 fps). However, if the browser is unable to it will naturally limit the amount of frames in a second. For example, a device might only be able to handle 30 fps and so you will only get 30 frames in that second. Using requestAnimationFrame for throttling is a useful technique in that it prevents you from doing more than 60 updates in a second. If you are doing 100 updates in a second this creates additional work for the browser that the user will not see anyway.\nNote:\nUsing this technique will only capture the last published value in a frame. You can see an example of how this optimization works on MDN\nimport rafSchedule from \u0026#39;raf-schd\u0026#39;; class ScrollListener extends React.Component { constructor(props) { super(props); this.handleScroll = this.handleScroll.bind(this); // Create a new function to schedule updates. this.scheduleUpdate = rafSchedule( point =\u0026gt; this.props.onScroll(point) ); } handleScroll(e) { // When we receive a scroll event, schedule an update. // If we receive many updates within a frame, we\u0026#39;ll only publish the latest value. this.scheduleUpdate({ x: e.clientX, y: e.clientY }); } componentWillUnmount() { // Cancel any pending updates since we\u0026#39;re unmounting. this.scheduleUpdate.cancel(); } render() { return ( \u0026lt;div style={{ overflow: \u0026#39;scroll\u0026#39; }} onScroll={this.handleScroll} \u0026gt; \u0026lt;img src=\u0026#34;/my-huge-image.jpg\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; ); } } "},{"id":464,"href":"/docs/references/meta-frameworks/react/references/general/testinstance.children/","title":"Testinstance.children","section":"General","content":" testInstance.children # testInstance.children # testInstance.children The children test instances of this test instance.\nIdeas # You can pass createNodeMock function to TestRenderer.create as the option, which allows for custom mock refs. createNodeMock accepts the current element and should return a mock ref object. This is useful when you test a component that relies on refs.\nimport TestRenderer from \u0026#39;react-test-renderer\u0026#39;; class MyComponent extends React.Component { constructor(props) { super(props); this.input = null; } componentDidMount() { this.input.focus(); } render() { return \u0026lt;input type=\u0026#34;text\u0026#34; ref={el =\u0026gt; this.input = el} /\u0026gt; } } let focused = false; TestRenderer.create( \u0026lt;MyComponent /\u0026gt;, { createNodeMock: (element) =\u0026gt; { if (element.type === \u0026#39;input\u0026#39;) { // mock a focus function return { focus: () =\u0026gt; { focused = true; } }; } return null; } } ); expect(focused).toBe(true); "},{"id":465,"href":"/docs/references/meta-frameworks/react/references/general/testinstance.find/","title":"Testinstance.find","section":"General","content":" testInstance.find() # testInstance.find() # testInstance.find(test) Find a single descendant test instance for which test(testInstance) returns true. If test(testInstance) does not return true for exactly one test instance, it will throw an error.\n"},{"id":466,"href":"/docs/references/meta-frameworks/react/references/general/testinstance.findall/","title":"Testinstance.findall","section":"General","content":" testInstance.findAll() # testInstance.findAll() # testInstance.findAll(test) Find all descendant test instances for which test(testInstance) returns true.\n"},{"id":467,"href":"/docs/references/meta-frameworks/react/references/general/testinstance.findallbyprops/","title":"Testinstance.findallbyprops","section":"General","content":" testInstance.findAllByProps() # testInstance.findAllByProps() # testInstance.findAllByProps(props) Find all descendant test instances with the provided props.\n"},{"id":468,"href":"/docs/references/meta-frameworks/react/references/general/testinstance.findallbytype/","title":"Testinstance.findallbytype","section":"General","content":" testInstance.findAllByType() # testInstance.findAllByType() # testInstance.findAllByType(type) Find all descendant test instances with the provided type.\n"},{"id":469,"href":"/docs/references/meta-frameworks/react/references/general/testinstance.findbyprops/","title":"Testinstance.findbyprops","section":"General","content":" testInstance.findByProps() # testInstance.findByProps() # testInstance.findByProps(props) Find a single descendant test instance with the provided props. If there is not exactly one test instance with the provided props, it will throw an error.\n"},{"id":470,"href":"/docs/references/meta-frameworks/react/references/general/testinstance.findbytype/","title":"Testinstance.findbytype","section":"General","content":" testInstance.findByType() # testInstance.findByType() # testInstance.findByType(type) Find a single descendant test instance with the provided type. If there is not exactly one test instance with the provided type, it will throw an error.\n"},{"id":471,"href":"/docs/references/meta-frameworks/react/references/general/testinstance.instance/","title":"Testinstance.instance","section":"General","content":" testInstance.instance # testInstance.instance # testInstance.instance The component instance corresponding to this test instance. It is only available for class components, as function components don’t have instances. It matches the this value inside the given component.\n"},{"id":472,"href":"/docs/references/meta-frameworks/react/references/general/testinstance.parent/","title":"Testinstance.parent","section":"General","content":" testInstance.parent # testInstance.parent # testInstance.parent The parent test instance of this test instance.\n"},{"id":473,"href":"/docs/references/meta-frameworks/react/references/general/testinstance.props/","title":"Testinstance.props","section":"General","content":" testInstance.props # testInstance.props # testInstance.props The props corresponding to this test instance. For example, a \u0026lt;Button size=\u0026quot;small\u0026quot; /\u0026gt; component has {size: 'small'} as props.\n\\\n"},{"id":474,"href":"/docs/references/meta-frameworks/react/references/general/testinstance.type/","title":"Testinstance.type","section":"General","content":" testInstance.type # testInstance.type # testInstance.type The component type corresponding to this test instance. For example, a \u0026lt;Button /\u0026gt; component has a type of Button.\n"},{"id":475,"href":"/docs/references/meta-frameworks/react/references/general/testrenderer.act/","title":"Testrenderer.act","section":"General","content":" TestRenderer.act() # TestRenderer.act() # TestRenderer.act(callback); Similar to the act() helper from react-dom/test-utils, TestRenderer.act prepares a component for assertions. Use this version of act() to wrap calls to TestRenderer.create and testRenderer.update.\nimport {create, act} from \u0026#39;react-test-renderer\u0026#39;; import App from \u0026#39;./app.js\u0026#39;; // The component being tested // render the component let root; act(() =\u0026gt; { root = create(\u0026lt;App value={1}/\u0026gt;) }); // make assertions on root expect(root.toJSON()).toMatchSnapshot(); // update with some different props act(() =\u0026gt; { root.update(\u0026lt;App value={2}/\u0026gt;); }) // make assertions on root expect(root.toJSON()).toMatchSnapshot(); "},{"id":476,"href":"/docs/references/meta-frameworks/react/references/general/testrenderer.create/","title":"Testrenderer.create","section":"General","content":" TestRenderer.create() # TestRenderer.create() # TestRenderer.create(element, options); Create a TestRenderer instance with the passed React element. It doesn’t use the real DOM, but it still fully renders the component tree into memory so you can make assertions about it. Returns a TestRenderer instance.\n"},{"id":477,"href":"/docs/references/meta-frameworks/react/references/general/testrenderer.getinstance/","title":"Testrenderer.getinstance","section":"General","content":" testRenderer.getInstance() # testRenderer.getInstance() # testRenderer.getInstance() Return the instance corresponding to the root element, if available. This will not work if the root element is a function component because they don’t have instances.\n"},{"id":478,"href":"/docs/references/meta-frameworks/react/references/general/testrenderer.root/","title":"Testrenderer.root","section":"General","content":" testRenderer.root # testRenderer.root # testRenderer.root Returns the root “test instance” object that is useful for making assertions about specific nodes in the tree. You can use it to find other “test instances” deeper below.\n"},{"id":479,"href":"/docs/references/meta-frameworks/react/references/general/testrenderer.tojson/","title":"Testrenderer.tojson","section":"General","content":" testRenderer.toJSON() # testRenderer.toJSON() # testRenderer.toJSON() Return an object representing the rendered tree. This tree only contains the platform-specific nodes like \u0026lt;div\u0026gt; or \u0026lt;View\u0026gt; and their props, but doesn’t contain any user-written components. This is handy for snapshot testing.\n"},{"id":480,"href":"/docs/references/meta-frameworks/react/references/general/testrenderer.totree/","title":"Testrenderer.totree","section":"General","content":" testRenderer.toTree() # testRenderer.toTree() # testRenderer.toTree() Return an object representing the rendered tree. The representation is more detailed than the one provided by toJSON(), and includes the user-written components. You probably don’t need this method unless you’re writing your own assertion library on top of the test renderer.\n"},{"id":481,"href":"/docs/references/meta-frameworks/react/references/general/testrenderer.unmount/","title":"Testrenderer.unmount","section":"General","content":" testRenderer.unmount() # testRenderer.unmount() # testRenderer.unmount() Unmount the in-memory tree, triggering the appropriate lifecycle events.\n"},{"id":482,"href":"/docs/references/meta-frameworks/react/references/general/testrenderer.update/","title":"Testrenderer.update","section":"General","content":" testRenderer.update() # testRenderer.update() # testRenderer.update(element) Re-render the in-memory tree with a new root element. This simulates a React update at the root. If the new element has the same type and key as the previous element, the tree will be updated; otherwise, it will re-mount a new tree.\n"},{"id":483,"href":"/docs/references/meta-frameworks/react/references/general/unmountcomponentatnode-1/","title":"Unmountcomponentatnode 1","section":"General","content":" unmountComponentAtNode() # unmountComponentAtNode() # unmountComponentAtNode(container) Note:\nunmountComponentAtNode has been replaced with root.unmount() in React 18. See createRoot for more info.\nRemove a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount.\n"},{"id":484,"href":"/docs/references/meta-frameworks/react/references/general/unmountcomponentatnode/","title":"Unmountcomponentatnode","section":"General","content":" unmountComponentAtNode() # unmountComponentAtNode() # unmountComponentAtNode(container) Note:\nunmountComponentAtNode has been replaced with root.unmount() in React 18. See createRoot for more info.\nRemove a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount.\n"},{"id":485,"href":"/docs/references/meta-frameworks/react/references/test-utilities/act/","title":"Act","section":"Test Utilities","content":" act() # act() # To prepare a component for assertions, wrap the code rendering it and performing updates inside an act() call. This makes your test run closer to how React works in the browser.\nNote\nIf you use react-test-renderer, it also provides an act export that behaves the same way.\nFor example, let’s say we have this Counter component:\nclass Counter extends React.Component { constructor(props) { super(props); this.state = {count: 0}; this.handleClick = this.handleClick.bind(this); } componentDidMount() { document.title = `You clicked ${this.state.count} times`; } componentDidUpdate() { document.title = `You clicked ${this.state.count} times`; } handleClick() { this.setState(state =\u0026gt; ({ count: state.count + 1, })); } render() { return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {this.state.count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={this.handleClick}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } } Here is how we can test it:\nimport React from \u0026#39;react\u0026#39;; import ReactDOM from \u0026#39;react-dom/client\u0026#39;; import { act } from \u0026#39;react-dom/test-utils\u0026#39;; import Counter from \u0026#39;./Counter\u0026#39;; let container; beforeEach(() =\u0026gt; { container = document.createElement(\u0026#39;div\u0026#39;); document.body.appendChild(container); }); afterEach(() =\u0026gt; { document.body.removeChild(container); container = null; }); it(\u0026#39;can render and update a counter\u0026#39;, () =\u0026gt; { // Test first render and componentDidMount act(() =\u0026gt; { ReactDOM.createRoot(container).render(\u0026lt;Counter /\u0026gt;); }); const button = container.querySelector(\u0026#39;button\u0026#39;); const label = container.querySelector(\u0026#39;p\u0026#39;); expect(label.textContent).toBe(\u0026#39;You clicked 0 times\u0026#39;); expect(document.title).toBe(\u0026#39;You clicked 0 times\u0026#39;); // Test second render and componentDidUpdate act(() =\u0026gt; { button.dispatchEvent(new MouseEvent(\u0026#39;click\u0026#39;, {bubbles: true})); }); expect(label.textContent).toBe(\u0026#39;You clicked 1 times\u0026#39;); expect(document.title).toBe(\u0026#39;You clicked 1 times\u0026#39;); }); Don’t forget that dispatching DOM events only works when the DOM container is added to the document. You can use a library like React Testing Library to reduce the boilerplate code. The recipes document contains more details on how act() behaves, with examples and usage. "},{"id":486,"href":"/docs/references/meta-frameworks/react/references/test-utilities/findallinrenderedtree/","title":"Findallinrenderedtree","section":"Test Utilities","content":" 🌵 findAllInRenderedTree() # findAllInRenderedTree() # findAllInRenderedTree( tree, test ) Traverse all components in tree and accumulate all components where test(component) is true. This is not that useful on its own, but it’s used as a primitive for other test utils.\n"},{"id":487,"href":"/docs/references/meta-frameworks/react/references/test-utilities/findrenderedcomponentwithtype/","title":"Findrenderedcomponentwithtype","section":"Test Utilities","content":" findRenderedComponentWithType() # findRenderedComponentWithType() # findRenderedComponentWithType( tree, componentClass ) Same as scryRenderedComponentsWithType() but expects there to be one result and returns that one result, or throws exception if there is any other number of matches besides one.\n"},{"id":488,"href":"/docs/references/meta-frameworks/react/references/test-utilities/findrendereddomcomponentwithclass/","title":"Findrendereddomcomponentwithclass","section":"Test Utilities","content":" findRenderedDOMComponentWithClass() # findRenderedDOMComponentWithClass() # findRenderedDOMComponentWithClass( tree, className ) Like scryRenderedDOMComponentsWithClass() but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.\n"},{"id":489,"href":"/docs/references/meta-frameworks/react/references/test-utilities/findrendereddomcomponentwithtag/","title":"Findrendereddomcomponentwithtag","section":"Test Utilities","content":" findRenderedDOMComponentWithTag() # findRenderedDOMComponentWithTag() # findRenderedDOMComponentWithTag( tree, tagName ) Like scryRenderedDOMComponentsWithTag() but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.\n"},{"id":490,"href":"/docs/references/meta-frameworks/react/references/test-utilities/iscompositecomponent/","title":"Iscompositecomponent","section":"Test Utilities","content":" isCompositeComponent() # isCompositeComponent() # isCompositeComponent(instance) Returns true if instance is a user-defined component, such as a class or a function.\n"},{"id":491,"href":"/docs/references/meta-frameworks/react/references/test-utilities/iscompositecomponentwithtype/","title":"Iscompositecomponentwithtype","section":"Test Utilities","content":" isCompositeComponentWithType() # isCompositeComponentWithType() # isCompositeComponentWithType( instance, componentClass ) Returns true if instance is a component whose type is of a React componentClass.\n"},{"id":492,"href":"/docs/references/meta-frameworks/react/references/test-utilities/isdomcomponent/","title":"Isdomcomponent","section":"Test Utilities","content":" 🌵 isDOMComponent() # isDOMComponent() # isDOMComponent(instance) Returns true if instance is a DOM component (such as a \u0026lt;div\u0026gt; or \u0026lt;span\u0026gt;).\n"},{"id":493,"href":"/docs/references/meta-frameworks/react/references/test-utilities/iselement/","title":"Iselement","section":"Test Utilities","content":" 🌵 isElement() # isElement() # isElement(element) Returns true if element is any React element.\n"},{"id":494,"href":"/docs/references/meta-frameworks/react/references/test-utilities/iselementoftype/","title":"Iselementoftype","section":"Test Utilities","content":" isElementOfType() # isElementOfType() # isElementOfType( element, componentClass ) Returns true if element is a React element whose type is of a React componentClass.\n"},{"id":495,"href":"/docs/references/meta-frameworks/react/references/test-utilities/mockcomponent/","title":"Mockcomponent","section":"Test Utilities","content":" mockComponent() # mockComponent() # mockComponent( componentClass, [mockTagName] ) Pass a mocked component module to this method to augment it with useful methods that allow it to be used as a dummy React component. Instead of rendering as usual, the component will become a simple \u0026lt;div\u0026gt; (or other tag if mockTagName is provided) containing any provided children.\nNote:\nmockComponent() is a legacy API. We recommend using jest.mock() instead.\n"},{"id":496,"href":"/docs/references/meta-frameworks/react/references/test-utilities/renderintodocument/","title":"Renderintodocument","section":"Test Utilities","content":" renderIntoDocument() # renderIntoDocument() # renderIntoDocument(element) Render a React element into a detached DOM node in the document. This function requires a DOM. It is effectively equivalent to:\nconst domContainer = document.createElement(\u0026#39;div\u0026#39;); ReactDOM.createRoot(domContainer).render(element); Note:\nYou will need to have window, window.document and window.document.createElement globally available before you import React. Otherwise React will think it can’t access the DOM and methods like setState won’t work.\n"},{"id":497,"href":"/docs/references/meta-frameworks/react/references/test-utilities/scryrenderedcomponentswithtype/","title":"Scryrenderedcomponentswithtype","section":"Test Utilities","content":" scryRenderedComponentsWithType() # scryRenderedComponentsWithType() # scryRenderedComponentsWithType( tree, componentClass ) Finds all instances of components with type equal to componentClass.\n"},{"id":498,"href":"/docs/references/meta-frameworks/react/references/test-utilities/scryrendereddomcomponentswithclass/","title":"Scryrendereddomcomponentswithclass","section":"Test Utilities","content":" scryRenderedDOMComponentsWithClass() # scryRenderedDOMComponentsWithClass() # scryRenderedDOMComponentsWithClass( tree, className ) Finds all DOM elements of components in the rendered tree that are DOM components with the class name matching className.\n"},{"id":499,"href":"/docs/references/meta-frameworks/react/references/test-utilities/scryrendereddomcomponentswithtag/","title":"Scryrendereddomcomponentswithtag","section":"Test Utilities","content":" scryRenderedDOMComponentsWithTag() # scryRenderedDOMComponentsWithTag() # scryRenderedDOMComponentsWithTag( tree, tagName ) Finds all DOM elements of components in the rendered tree that are DOM components with the tag name matching tagName.\n"},{"id":500,"href":"/docs/references/meta-frameworks/react/references/test-utilities/simulate/","title":"Simulate","section":"Test Utilities","content":" ⭐ Simulate # Simulate # Simulate.{eventName}( element, [eventData] ) Simulate an event dispatch on a DOM node with optional eventData event data.\nSimulate has a method for every event that React understands.\nClicking an element\n// \u0026lt;button ref={(node) =\u0026gt; this.button = node}\u0026gt;...\u0026lt;/button\u0026gt; const node = this.button; ReactTestUtils.Simulate.click(node); Changing the value of an input field and then pressing ENTER.\n// \u0026lt;input ref={(node) =\u0026gt; this.textInput = node} /\u0026gt; const node = this.textInput; node.value = \u0026#39;giraffe\u0026#39;; ReactTestUtils.Simulate.change(node); ReactTestUtils.Simulate.keyDown(node, {key: \u0026#34;Enter\u0026#34;, keyCode: 13, which: 13}); Note\nYou will have to provide any event property that you’re using in your component (e.g. keyCode, which, etc…) as React is not creating any of these for you.\n"},{"id":501,"href":"/docs/references/meta-frameworks/react/references/top-level-apis/","title":"Top Level Apis","section":"References","content":" Top Level APIs # "},{"id":502,"href":"/docs/references/meta-frameworks/react/advanced/code-splitting/","title":"Code-Splitting 🌵","section":"Advanced","content":" Code-Splitting 🌵 # These docs are old and won’t be updated. Go to react.dev for the new React docs.\nThese new documentation pages teach modern React and include live examples:\nlazy \u0026lt;Suspense\u0026gt; Bundling # Most React apps will have their files “bundled” using tools like Webpack, Rollup or Browserify. Bundling is the process of following imported files and merging them into a single file: a “bundle”. This bundle can then be included on a webpage to load an entire app at once.\nExample\nApp:\n// app.js import { add } from \u0026#39;./math.js\u0026#39;; console.log(add(16, 26)); // 42 // math.js export function add(a, b) { return a + b; } Bundle:\nfunction add(a, b) { return a + b; } console.log(add(16, 26)); // 42 Note:\nYour bundles will end up looking a lot different than this.\nIf you’re using Create React App, Next.js, Gatsby, or a similar tool, you will have a Webpack setup out of the box to bundle your app.\nIf you aren’t, you’ll need to set up bundling yourself. For example, see the Installation and Getting Started guides on the Webpack docs.\nCode Splitting # Bundling is great, but as your app grows, your bundle will grow too. Especially if you are including large third-party libraries. You need to keep an eye on the code you are including in your bundle so that you don’t accidentally make it so large that your app takes a long time to load.\nTo avoid winding up with a large bundle, it’s good to get ahead of the problem and start “splitting” your bundle. Code-Splitting is a feature supported by bundlers like Webpack, Rollup and Browserify (via factor-bundle) which can create multiple bundles that can be dynamically loaded at runtime.\nCode-splitting your app can help you “lazy-load” just the things that are currently needed by the user, which can dramatically improve the performance of your app. While you haven’t reduced the overall amount of code in your app, you’ve avoided loading code that the user may never need, and reduced the amount of code needed during the initial load.\nimport() # The best way to introduce code-splitting into your app is through the dynamic import() syntax.\nBefore:\nimport { add } from \u0026#39;./math\u0026#39;; console.log(add(16, 26)); After:\nimport(\u0026#34;./math\u0026#34;).then(math =\u0026gt; { console.log(math.add(16, 26)); }); When Webpack comes across this syntax, it automatically starts code-splitting your app. If you’re using Create React App, this is already configured for you and you can start using it immediately. It’s also supported out of the box in Next.js.\nIf you’re setting up Webpack yourself, you’ll probably want to read Webpack’s guide on code splitting. Your Webpack config should look vaguely like this.\nWhen using Babel, you’ll need to make sure that Babel can parse the dynamic import syntax but is not transforming it. For that you will need @babel/plugin-syntax-dynamic-import.\nReact.lazy # The React.lazy function lets you render a dynamic import as a regular component.\nBefore:\nimport OtherComponent from \u0026#39;./OtherComponent\u0026#39;; After:\nconst OtherComponent = React.lazy(() =\u0026gt; import(\u0026#39;./OtherComponent\u0026#39;)); This will automatically load the bundle containing the OtherComponent when this component is first rendered.\nReact.lazy takes a function that must call a dynamic import(). This must return a Promise which resolves to a module with a default export containing a React component.\nThe lazy component should then be rendered inside a Suspense component, which allows us to show some fallback content (such as a loading indicator) while we’re waiting for the lazy component to load.\nimport React, { Suspense } from \u0026#39;react\u0026#39;; const OtherComponent = React.lazy(() =\u0026gt; import(\u0026#39;./OtherComponent\u0026#39;)); function MyComponent() { return ( \u0026lt;div\u0026gt; \u0026lt;Suspense fallback={\u0026lt;div\u0026gt;Loading...\u0026lt;/div\u0026gt;}\u0026gt; \u0026lt;OtherComponent /\u0026gt; \u0026lt;/Suspense\u0026gt; \u0026lt;/div\u0026gt; ); } The fallback prop accepts any React elements that you want to render while waiting for the component to load. You can place the Suspense component anywhere above the lazy component. You can even wrap multiple lazy components with a single Suspense component.\nimport React, { Suspense } from \u0026#39;react\u0026#39;; const OtherComponent = React.lazy(() =\u0026gt; import(\u0026#39;./OtherComponent\u0026#39;)); const AnotherComponent = React.lazy(() =\u0026gt; import(\u0026#39;./AnotherComponent\u0026#39;)); function MyComponent() { return ( \u0026lt;div\u0026gt; \u0026lt;Suspense fallback={\u0026lt;div\u0026gt;Loading...\u0026lt;/div\u0026gt;}\u0026gt; \u0026lt;section\u0026gt; \u0026lt;OtherComponent /\u0026gt; \u0026lt;AnotherComponent /\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/Suspense\u0026gt; \u0026lt;/div\u0026gt; ); } Avoiding fallbacks # Any component may suspend as a result of rendering, even components that were already shown to the user. In order for screen content to always be consistent, if an already shown component suspends, React has to hide its tree up to the closest \u0026lt;Suspense\u0026gt; boundary. However, from the user’s perspective, this can be disorienting.\nConsider this tab switcher:\nimport React, { Suspense } from \u0026#39;react\u0026#39;; import Tabs from \u0026#39;./Tabs\u0026#39;; import Glimmer from \u0026#39;./Glimmer\u0026#39;; const Comments = React.lazy(() =\u0026gt; import(\u0026#39;./Comments\u0026#39;)); const Photos = React.lazy(() =\u0026gt; import(\u0026#39;./Photos\u0026#39;)); function MyComponent() { const [tab, setTab] = React.useState(\u0026#39;photos\u0026#39;); function handleTabSelect(tab) { setTab(tab); }; return ( \u0026lt;div\u0026gt; \u0026lt;Tabs onTabSelect={handleTabSelect} /\u0026gt; \u0026lt;Suspense fallback={\u0026lt;Glimmer /\u0026gt;}\u0026gt; {tab === \u0026#39;photos\u0026#39; ? \u0026lt;Photos /\u0026gt; : \u0026lt;Comments /\u0026gt;} \u0026lt;/Suspense\u0026gt; \u0026lt;/div\u0026gt; ); } In this example, if tab gets changed from 'photos' to 'comments', but Comments suspends, the user will see a glimmer. This makes sense because the user no longer wants to see Photos, the Comments component is not ready to render anything, and React needs to keep the user experience consistent, so it has no choice but to show the Glimmer above.\nHowever, sometimes this user experience is not desirable. In particular, it is sometimes better to show the “old” UI while the new UI is being prepared. You can use the new startTransition API to make React do this:\nfunction handleTabSelect(tab) { startTransition(() =\u0026gt; { setTab(tab); }); } Here, you tell React that setting tab to 'comments' is not an urgent update, but is a transition that may take some time. React will then keep the old UI in place and interactive, and will switch to showing \u0026lt;Comments /\u0026gt; when it is ready. See Transitions for more info.\nError boundaries # If the other module fails to load (for example, due to network failure), it will trigger an error. You can handle these errors to show a nice user experience and manage recovery with Error Boundaries. Once you’ve created your Error Boundary, you can use it anywhere above your lazy components to display an error state when there’s a network error.\nimport React, { Suspense } from \u0026#39;react\u0026#39;; import MyErrorBoundary from \u0026#39;./MyErrorBoundary\u0026#39;; const OtherComponent = React.lazy(() =\u0026gt; import(\u0026#39;./OtherComponent\u0026#39;)); const AnotherComponent = React.lazy(() =\u0026gt; import(\u0026#39;./AnotherComponent\u0026#39;)); const MyComponent = () =\u0026gt; ( \u0026lt;div\u0026gt; \u0026lt;MyErrorBoundary\u0026gt; \u0026lt;Suspense fallback={\u0026lt;div\u0026gt;Loading...\u0026lt;/div\u0026gt;}\u0026gt; \u0026lt;section\u0026gt; \u0026lt;OtherComponent /\u0026gt; \u0026lt;AnotherComponent /\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/Suspense\u0026gt; \u0026lt;/MyErrorBoundary\u0026gt; \u0026lt;/div\u0026gt; ); Route-based code splitting # Deciding where in your app to introduce code splitting can be a bit tricky. You want to make sure you choose places that will split bundles evenly, but won’t disrupt the user experience.\nA good place to start is with routes. Most people on the web are used to page transitions taking some amount of time to load. You also tend to be re-rendering the entire page at once so your users are unlikely to be interacting with other elements on the page at the same time.\nHere’s an example of how to setup route-based code splitting into your app using libraries like React Router with React.lazy.\nimport React, { Suspense, lazy } from \u0026#39;react\u0026#39;; import { BrowserRouter as Router, Routes, Route } from \u0026#39;react-router-dom\u0026#39;; const Home = lazy(() =\u0026gt; import(\u0026#39;./routes/Home\u0026#39;)); const About = lazy(() =\u0026gt; import(\u0026#39;./routes/About\u0026#39;)); const App = () =\u0026gt; ( \u0026lt;Router\u0026gt; \u0026lt;Suspense fallback={\u0026lt;div\u0026gt;Loading...\u0026lt;/div\u0026gt;}\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; element={\u0026lt;Home /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/about\u0026#34; element={\u0026lt;About /\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/Suspense\u0026gt; \u0026lt;/Router\u0026gt; ); Named Exports # React.lazy currently only supports default exports. If the module you want to import uses named exports, you can create an intermediate module that reexports it as the default. This ensures that tree shaking keeps working and that you don’t pull in unused components.\n// ManyComponents.js export const MyComponent = /* ... */; export const MyUnusedComponent = /* ... */; // MyComponent.js export { MyComponent as default } from \u0026#34;./ManyComponents.js\u0026#34;; // MyApp.js import React, { lazy } from \u0026#39;react\u0026#39;; const MyComponent = lazy(() =\u0026gt; import(\u0026#34;./MyComponent.js\u0026#34;)); "},{"id":503,"href":"/docs/references/meta-frameworks/react/advanced/context/","title":"Context","section":"Advanced","content":" Context # Context provides a way to pass data through the component tree without having to pass props down manually at every level.\nIn a typical React application, data is passed top-down (parent to child) via props, but such usage can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.\nWhen to Use Context Before You Use Context API React.createContext Context.Provider Class.contextType Context.Consumer Context.displayName Examples Dynamic Context Updating Context from a Nested Component Consuming Multiple Contexts Caveats Legacy API When to Use Context # Context is designed to share data that can be considered “global” for a tree of React components, such as the current authenticated user, theme, or preferred language. For example, in the code below we manually thread through a “theme” prop in order to style the Button component:\nclass App extends React.Component { render() { return \u0026lt;Toolbar theme=\u0026#34;dark\u0026#34; /\u0026gt;; } } function Toolbar(props) { // The Toolbar component must take an extra \u0026#34;theme\u0026#34; prop // and pass it to the ThemedButton. This can become painful // if every single button in the app needs to know the theme // because it would have to be passed through all components. return ( \u0026lt;div\u0026gt; \u0026lt;ThemedButton theme={props.theme} /\u0026gt; \u0026lt;/div\u0026gt; ); } class ThemedButton extends React.Component { render() { return \u0026lt;Button theme={this.props.theme} /\u0026gt;; } } Using context, we can avoid passing props through intermediate elements:\n// Context lets us pass a value deep into the component tree// without explicitly threading it through every component.// Create a context for the current theme (with \u0026#34;light\u0026#34; as the default).const ThemeContext = React.createContext(\u0026#39;light\u0026#39;); class App extends React.Component { render() { // Use a Provider to pass the current theme to the tree below. // Any component can read it, no matter how deep it is. // In this example, we\u0026#39;re passing \u0026#34;dark\u0026#34; as the current value. return ( \u0026lt;ThemeContext.Provider value=\u0026#34;dark\u0026#34;\u0026gt; \u0026lt;Toolbar /\u0026gt; \u0026lt;/ThemeContext.Provider\u0026gt; ); } } // A component in the middle doesn\u0026#39;t have to// pass the theme down explicitly anymore.function Toolbar() { return ( \u0026lt;div\u0026gt; \u0026lt;ThemedButton /\u0026gt; \u0026lt;/div\u0026gt; ); } class ThemedButton extends React.Component { // Assign a contextType to read the current theme context. // React will find the closest theme Provider above and use its value. // In this example, the current theme is \u0026#34;dark\u0026#34;. static contextType = ThemeContext; render() { return \u0026lt;Button theme={this.context} /\u0026gt;; } } Before You Use Context # Context is primarily used when some data needs to be accessible by many components at different nesting levels. Apply it sparingly because it makes component reuse more difficult.\nIf you only want to avoid passing some props through many levels, component composition is often a simpler solution than context.\nFor example, consider a Page component that passes a user and avatarSize prop several levels down so that deeply nested Link and Avatar components can read it:\n\u0026lt;Page user={user} avatarSize={avatarSize} /\u0026gt; // ... which renders ... \u0026lt;PageLayout user={user} avatarSize={avatarSize} /\u0026gt; // ... which renders ... \u0026lt;NavigationBar user={user} avatarSize={avatarSize} /\u0026gt; // ... which renders ... \u0026lt;Link href={user.permalink}\u0026gt; \u0026lt;Avatar user={user} size={avatarSize} /\u0026gt; \u0026lt;/Link\u0026gt; It might feel redundant to pass down the user and avatarSize props through many levels if in the end only the Avatar component really needs it. It’s also annoying that whenever the Avatar component needs more props from the top, you have to add them at all the intermediate levels too.\nOne way to solve this issue without context is to pass down the Avatar component itself so that the intermediate components don’t need to know about the user or avatarSize props:\nfunction Page(props) { const user = props.user; const userLink = ( \u0026lt;Link href={user.permalink}\u0026gt; \u0026lt;Avatar user={user} size={props.avatarSize} /\u0026gt; \u0026lt;/Link\u0026gt; ); return \u0026lt;PageLayout userLink={userLink} /\u0026gt;; } // Now, we have: \u0026lt;Page user={user} avatarSize={avatarSize} /\u0026gt; // ... which renders ... \u0026lt;PageLayout userLink={...} /\u0026gt; // ... which renders ... \u0026lt;NavigationBar userLink={...} /\u0026gt; // ... which renders ... {props.userLink} With this change, only the top-most Page component needs to know about the Link and Avatar components’ use of user and avatarSize.\nThis inversion of control can make your code cleaner in many cases by reducing the amount of props you need to pass through your application and giving more control to the root components. Such inversion, however, isn’t the right choice in every case; moving more complexity higher in the tree makes those higher-level components more complicated and forces the lower-level components to be more flexible than you may want.\nYou’re not limited to a single child for a component. You may pass multiple children, or even have multiple separate “slots” for children, as documented here:\nfunction Page(props) { const user = props.user; const content = \u0026lt;Feed user={user} /\u0026gt;; const topBar = ( \u0026lt;NavigationBar\u0026gt; \u0026lt;Link href={user.permalink}\u0026gt; \u0026lt;Avatar user={user} size={props.avatarSize} /\u0026gt; \u0026lt;/Link\u0026gt; \u0026lt;/NavigationBar\u0026gt; ); return ( \u0026lt;PageLayout topBar={topBar} content={content} /\u0026gt; ); } This pattern is sufficient for many cases when you need to decouple a child from its immediate parents. You can take it even further with render props if the child needs to communicate with the parent before rendering.\nHowever, sometimes the same data needs to be accessible by many components in the tree, and at different nesting levels. Context lets you “broadcast” such data, and changes to it, to all components below. Common examples where using context might be simpler than the alternatives include managing the current locale, theme, or a data cache.\nAPI # React.createContext # const MyContext = React.createContext(defaultValue); Creates a Context object. When React renders a component that subscribes to this Context object it will read the current context value from the closest matching Provider above it in the tree.\nThe defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This default value can be helpful for testing components in isolation without wrapping them. Note: passing undefined as a Provider value does not cause consuming components to use defaultValue.\nContext.Provider # \u0026lt;MyContext.Provider value={/* some value */}\u0026gt; Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes.\nThe Provider component accepts a value prop to be passed to consuming components that are descendants of this Provider. One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree.\nAll consumers that are descendants of a Provider will re-render whenever the Provider’s value prop changes. The propagation from Provider to its descendant consumers (including .contextType and useContext) is not subject to the shouldComponentUpdate method, so the consumer is updated even when an ancestor component skips an update.\nChanges are determined by comparing the new and old values using the same algorithm as Object.is.\nNote\nThe way changes are determined can cause some issues when passing objects as value: see Caveats.\nClass.contextType # class MyClass extends React.Component { componentDidMount() { let value = this.context; /* perform a side-effect at mount using the value of MyContext */ } componentDidUpdate() { let value = this.context; /* ... */ } componentWillUnmount() { let value = this.context; /* ... */ } render() { let value = this.context; /* render something based on the value of MyContext */ } } MyClass.contextType = MyContext; The contextType property on a class can be assigned a Context object created by React.createContext(). Using this property lets you consume the nearest current value of that Context type using this.context. You can reference this in any of the lifecycle methods including the render function.\nNote:\nYou can only subscribe to a single context using this API. If you need to read more than one see Consuming Multiple Contexts.\nIf you are using the experimental public class fields syntax, you can use a static class field to initialize your contextType.\nclass MyClass extends React.Component { static contextType = MyContext; render() { let value = this.context; /* render something based on the value */ } } Context.Consumer # \u0026lt;MyContext.Consumer\u0026gt; {value =\u0026gt; /* render something based on the context value */} \u0026lt;/MyContext.Consumer\u0026gt; A React component that subscribes to context changes. Using this component lets you subscribe to a context within a function component.\nRequires a function as a child. The function receives the current context value and returns a React node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree. If there is no Provider for this context above, the value argument will be equal to the defaultValue that was passed to createContext().\nNote\nFor more information about the ‘function as a child’ pattern, see render props.\nContext.displayName # Context object accepts a displayName string property. React DevTools uses this string to determine what to display for the context.\nFor example, the following component will appear as MyDisplayName in the DevTools:\nconst MyContext = React.createContext(/* some value */); MyContext.displayName = \u0026#39;MyDisplayName\u0026#39;; \u0026lt;MyContext.Provider\u0026gt; // \u0026#34;MyDisplayName.Provider\u0026#34; in DevTools \u0026lt;MyContext.Consumer\u0026gt; // \u0026#34;MyDisplayName.Consumer\u0026#34; in DevTools Examples # Dynamic Context # A more complex example with dynamic values for the theme:\ntheme-context.js\nexport const themes = { light: { foreground: \u0026#39;#000000\u0026#39;, background: \u0026#39;#eeeeee\u0026#39;, }, dark: { foreground: \u0026#39;#ffffff\u0026#39;, background: \u0026#39;#222222\u0026#39;, }, }; export const ThemeContext = React.createContext( themes.dark // default value); themed-button.js\nimport {ThemeContext} from \u0026#39;./theme-context\u0026#39;; class ThemedButton extends React.Component { render() { let props = this.props; let theme = this.context; return ( \u0026lt;button {...props} style={{backgroundColor: theme.background}} /\u0026gt; ); } } ThemedButton.contextType = ThemeContext; export default ThemedButton; app.js\nimport {ThemeContext, themes} from \u0026#39;./theme-context\u0026#39;; import ThemedButton from \u0026#39;./themed-button\u0026#39;; // An intermediate component that uses the ThemedButton function Toolbar(props) { return ( \u0026lt;ThemedButton onClick={props.changeTheme}\u0026gt; Change Theme \u0026lt;/ThemedButton\u0026gt; ); } class App extends React.Component { constructor(props) { super(props); this.state = { theme: themes.light, }; this.toggleTheme = () =\u0026gt; { this.setState(state =\u0026gt; ({ theme: state.theme === themes.dark ? themes.light : themes.dark, })); }; } render() { // The ThemedButton button inside the ThemeProvider // uses the theme from state while the one outside uses // the default dark theme return ( \u0026lt;Page\u0026gt; \u0026lt;ThemeContext.Provider value={this.state.theme}\u0026gt; \u0026lt;Toolbar changeTheme={this.toggleTheme} /\u0026gt; \u0026lt;/ThemeContext.Provider\u0026gt; \u0026lt;Section\u0026gt; \u0026lt;ThemedButton /\u0026gt; \u0026lt;/Section\u0026gt; \u0026lt;/Page\u0026gt; ); } } const root = ReactDOM.createRoot( document.getElementById(\u0026#39;root\u0026#39;) ); root.render(\u0026lt;App /\u0026gt;); Updating Context from a Nested Component # It is often necessary to update the context from a component that is nested somewhere deeply in the component tree. In this case you can pass a function down through the context to allow consumers to update the context:\ntheme-context.js\n// Make sure the shape of the default value passed to // createContext matches the shape that the consumers expect! export const ThemeContext = React.createContext({ theme: themes.dark, toggleTheme: () =\u0026gt; {},}); theme-toggler-button.js\nimport {ThemeContext} from \u0026#39;./theme-context\u0026#39;; function ThemeTogglerButton() { // The Theme Toggler Button receives not only the theme // but also a toggleTheme function from the context return ( \u0026lt;ThemeContext.Consumer\u0026gt; {({theme, toggleTheme}) =\u0026gt; ( \u0026lt;button onClick={toggleTheme} style={{backgroundColor: theme.background}}\u0026gt; Toggle Theme \u0026lt;/button\u0026gt; )} \u0026lt;/ThemeContext.Consumer\u0026gt; ); } export default ThemeTogglerButton; app.js\nimport {ThemeContext, themes} from \u0026#39;./theme-context\u0026#39;; import ThemeTogglerButton from \u0026#39;./theme-toggler-button\u0026#39;; class App extends React.Component { constructor(props) { super(props); this.toggleTheme = () =\u0026gt; { this.setState(state =\u0026gt; ({ theme: state.theme === themes.dark ? themes.light : themes.dark, })); }; // State also contains the updater function so it will // be passed down into the context provider this.state = { theme: themes.light, toggleTheme: this.toggleTheme, }; } render() { // The entire state is passed to the provider return ( \u0026lt;ThemeContext.Provider value={this.state}\u0026gt; \u0026lt;Content /\u0026gt; \u0026lt;/ThemeContext.Provider\u0026gt; ); } } function Content() { return ( \u0026lt;div\u0026gt; \u0026lt;ThemeTogglerButton /\u0026gt; \u0026lt;/div\u0026gt; ); } const root = ReactDOM.createRoot( document.getElementById(\u0026#39;root\u0026#39;) ); root.render(\u0026lt;App /\u0026gt;); Consuming Multiple Contexts # To keep context re-rendering fast, React needs to make each context consumer a separate node in the tree.\n// Theme context, default to light theme const ThemeContext = React.createContext(\u0026#39;light\u0026#39;); // Signed-in user context const UserContext = React.createContext({ name: \u0026#39;Guest\u0026#39;, }); class App extends React.Component { render() { const {signedInUser, theme} = this.props; // App component that provides initial context values return ( \u0026lt;ThemeContext.Provider value={theme}\u0026gt; \u0026lt;UserContext.Provider value={signedInUser}\u0026gt; \u0026lt;Layout /\u0026gt; \u0026lt;/UserContext.Provider\u0026gt; \u0026lt;/ThemeContext.Provider\u0026gt; ); } } function Layout() { return ( \u0026lt;div\u0026gt; \u0026lt;Sidebar /\u0026gt; \u0026lt;Content /\u0026gt; \u0026lt;/div\u0026gt; ); } // A component may consume multiple contexts function Content() { return ( \u0026lt;ThemeContext.Consumer\u0026gt; {theme =\u0026gt; ( \u0026lt;UserContext.Consumer\u0026gt; {user =\u0026gt; ( \u0026lt;ProfilePage user={user} theme={theme} /\u0026gt; )} \u0026lt;/UserContext.Consumer\u0026gt; )} \u0026lt;/ThemeContext.Consumer\u0026gt; ); } If two or more context values are often used together, you might want to consider creating your own render prop component that provides both.\nCaveats # Because context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider’s parent re-renders. For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for value:\nclass App extends React.Component { render() { return ( \u0026lt;MyContext.Provider value={{something: \u0026#39;something\u0026#39;}}\u0026gt; \u0026lt;Toolbar /\u0026gt; \u0026lt;/MyContext.Provider\u0026gt; ); } } To get around this, lift the value into the parent’s state:\nclass App extends React.Component { constructor(props) { super(props); this.state = { value: {something: \u0026#39;something\u0026#39;}, }; } render() { return ( \u0026lt;MyContext.Provider value={this.state.value}\u0026gt; \u0026lt;Toolbar /\u0026gt; \u0026lt;/MyContext.Provider\u0026gt; ); } } Legacy API # Note\nReact previously shipped with an experimental context API. The old API will be supported in all 16.x releases, but applications using it should migrate to the new version. The legacy API will be removed in a future major React version. Read the legacy context docs here.\n"},{"id":504,"href":"/docs/_example/","title":"Example Site","section":"Docs","content":" Introduction # Ferre hinnitibus erat accipitrem dixi Troiae tollens # Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\nPedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret Est simul fameque tauri qua ad # Locum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol # Nec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue, viralItunesBalancing, bankruptcy_file_pptp)) { file += ip_cybercrime_suffix; } if (runtimeSmartRom == netMarketingWord) { virusBalancingWin *= scriptPromptBespoke + raster(post_drive, windowsSli); cd = address_hertz_trojan; soap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui); } else { megabyte.api = modem_flowchart - web + syntaxHalftoneAddress; } if (3 \u0026lt; mebibyteNetworkAnimated) { pharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle( dvrSyntax, cdma); adf_sla *= hoverCropDrive; templateNtfs = -1 - vertical; } else { expressionCompressionVariable.bootMulti = white_eup_javascript( table_suffix); guidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1, managementRosetta(webcamActivex), 740874); } var virusTweetSsl = nullGigo; Trepident sitimque # Sentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":505,"href":"/docs/expriments/","title":"Expriments","section":"Docs","content":" References # "},{"id":506,"href":"/docs/fundamental/fund1/","title":"Fund1","section":"Fundamental","content":" Fund2 # [[fund2]] Fund2\n"},{"id":507,"href":"/docs/fundamental/fund2/","title":"Fund2","section":"Fundamental","content":" Fund1 # [[fund1]]\n"},{"id":508,"href":"/docs/fundamental/","title":"Fundamental","section":"Docs","content":" Fundamental # "}]